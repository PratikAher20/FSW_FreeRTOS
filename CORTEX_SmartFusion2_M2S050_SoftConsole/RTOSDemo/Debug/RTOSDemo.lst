
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007770  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  20007770  20007770  0000f770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006b40  200077d0  200077d0  0000f7d0  2**2
                  ALLOC
  3 .stack        00000400  2000e310  2000e310  0000f7d0  2**0
                  ALLOC
  4 .comment      0000045e  00000000  00000000  0000f7d0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf0  00000000  00000000  0000fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001e65  00000000  00000000  0001081e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ef73  00000000  00000000  00012683  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002529  00000000  00000000  000215f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00011f60  00000000  00000000  00023b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002790  00000000  00000000  00035a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004be3  00000000  00000000  00038210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000418f  00000000  00000000  0003cdf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000cd4b5  00000000  00000000  00040f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0010e437  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000b80  00000000  00000000  0010e45c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	20004391 	.word	0x20004391
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	200045c1 	.word	0x200045c1
2000003c:	20004611 	.word	0x20004611
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20000213 	.word	0x20000213
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20000219 	.word	0x20000219
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	20005805 	.word	0x20005805
2000006c:	20005829 	.word	0x20005829
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	20005355 	.word	0x20005355
200000cc:	20005369 	.word	0x20005369
200000d0:	2000537d 	.word	0x2000537d
200000d4:	20005391 	.word	0x20005391
200000d8:	200053a5 	.word	0x200053a5
200000dc:	200053b9 	.word	0x200053b9
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>

20000212 <I2C0_IRQHandler>:
20000212:	e7fe      	b.n	20000212 <I2C0_IRQHandler>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>

20000218 <I2C1_IRQHandler>:
20000218:	e7fe      	b.n	20000218 <I2C1_IRQHandler>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	20007005 	.word	0x20007005
200002b4:	00000000 	.word	0x00000000
200002b8:	20000000 	.word	0x20000000
200002bc:	20000000 	.word	0x20000000
200002c0:	20007770 	.word	0x20007770
200002c4:	20007770 	.word	0x20007770
200002c8:	20007770 	.word	0x20007770
200002cc:	200077d0 	.word	0x200077d0
200002d0:	00000000 	.word	0x00000000
200002d4:	200077d0 	.word	0x200077d0
200002d8:	2000e310 	.word	0x2000e310
200002dc:	20007411 	.word	0x20007411
200002e0:	2000040d 	.word	0x2000040d
	...

200002f0 <__do_global_dtors_aux>:
200002f0:	f247 73d0 	movw	r3, #30672	; 0x77d0
200002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	b90a      	cbnz	r2, 20000300 <__do_global_dtors_aux+0x10>
200002fc:	2001      	movs	r0, #1
200002fe:	7018      	strb	r0, [r3, #0]
20000300:	4770      	bx	lr
20000302:	bf00      	nop

20000304 <frame_dummy>:
20000304:	f247 7070 	movw	r0, #30576	; 0x7770
20000308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000030c:	b508      	push	{r3, lr}
2000030e:	6803      	ldr	r3, [r0, #0]
20000310:	b12b      	cbz	r3, 2000031e <frame_dummy+0x1a>
20000312:	f240 0300 	movw	r3, #0
20000316:	f2c0 0300 	movt	r3, #0
2000031a:	b103      	cbz	r3, 2000031e <frame_dummy+0x1a>
2000031c:	4798      	blx	r3
2000031e:	bd08      	pop	{r3, pc}

20000320 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
20000320:	b480      	push	{r7}
20000322:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
20000324:	f64e 53fc 	movw	r3, #60924	; 0xedfc
20000328:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000032c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
20000330:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000334:	6812      	ldr	r2, [r2, #0]
20000336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2000033a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
2000033c:	f241 0304 	movw	r3, #4100	; 0x1004
20000340:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000344:	f04f 0200 	mov.w	r2, #0
20000348:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
2000034a:	f241 0300 	movw	r3, #4096	; 0x1000
2000034e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000352:	f241 0200 	movw	r2, #4096	; 0x1000
20000356:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000035a:	6812      	ldr	r2, [r2, #0]
2000035c:	f042 0201 	orr.w	r2, r2, #1
20000360:	601a      	str	r2, [r3, #0]
}
20000362:	46bd      	mov	sp, r7
20000364:	bc80      	pop	{r7}
20000366:	4770      	bx	lr

20000368 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
20000368:	b480      	push	{r7}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
2000036e:	f241 0304 	movw	r3, #4100	; 0x1004
20000372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
2000037a:	f247 73d4 	movw	r3, #30676	; 0x77d4
2000037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	687a      	ldr	r2, [r7, #4]
20000386:	429a      	cmp	r2, r3
20000388:	d20b      	bcs.n	200003a2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
2000038a:	f247 73d8 	movw	r3, #30680	; 0x77d8
2000038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	f103 0201 	add.w	r2, r3, #1
20000398:	f247 73d8 	movw	r3, #30680	; 0x77d8
2000039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003a0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
200003a2:	f247 73d4 	movw	r3, #30676	; 0x77d4
200003a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003aa:	687a      	ldr	r2, [r7, #4]
200003ac:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
200003ae:	f247 73b4 	movw	r3, #30644	; 0x77b4
200003b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003b6:	681a      	ldr	r2, [r3, #0]
200003b8:	f641 537f 	movw	r3, #7551	; 0x1d7f
200003bc:	f2c0 432c 	movt	r3, #1068	; 0x42c
200003c0:	429a      	cmp	r2, r3
200003c2:	d80e      	bhi.n	200003e2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	ea4f 3353 	mov.w	r3, r3, lsr #13
200003ca:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
200003cc:	f247 73d8 	movw	r3, #30680	; 0x77d8
200003d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
200003da:	687a      	ldr	r2, [r7, #4]
200003dc:	4413      	add	r3, r2
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e00d      	b.n	200003fe <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	ea4f 3393 	mov.w	r3, r3, lsr #14
200003e8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
200003ea:	f247 73d8 	movw	r3, #30680	; 0x77d8
200003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	ea4f 4383 	mov.w	r3, r3, lsl #18
200003f8:	687a      	ldr	r2, [r7, #4]
200003fa:	4413      	add	r3, r2
200003fc:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
200003fe:	687b      	ldr	r3, [r7, #4]
}
20000400:	4618      	mov	r0, r3
20000402:	f107 070c 	add.w	r7, r7, #12
20000406:	46bd      	mov	sp, r7
20000408:	bc80      	pop	{r7}
2000040a:	4770      	bx	lr

2000040c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
		//main_blinky();


//		demo();

		demo_tasks();
20000410:	f004 fe22 	bl	20005058 <demo_tasks>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
20000414:	f04f 0300 	mov.w	r3, #0
}
20000418:	4618      	mov	r0, r3
2000041a:	bd80      	pop	{r7, pc}

2000041c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
2000041c:	b480      	push	{r7}
2000041e:	b083      	sub	sp, #12
20000420:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000426:	f383 8811 	msr	BASEPRI, r3
2000042a:	f3bf 8f6f 	isb	sy
2000042e:	f3bf 8f4f 	dsb	sy
20000432:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000434:	e7fe      	b.n	20000434 <vApplicationMallocFailedHook+0x18>
20000436:	bf00      	nop

20000438 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
20000438:	b480      	push	{r7}
2000043a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
2000043c:	46bd      	mov	sp, r7
2000043e:	bc80      	pop	{r7}
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
20000444:	b480      	push	{r7}
20000446:	b085      	sub	sp, #20
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
2000044c:	6039      	str	r1, [r7, #0]
2000044e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000452:	f383 8811 	msr	BASEPRI, r3
20000456:	f3bf 8f6f 	isb	sy
2000045a:	f3bf 8f4f 	dsb	sy
2000045e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000460:	e7fe      	b.n	20000460 <vApplicationStackOverflowHook+0x1c>
20000462:	bf00      	nop

20000464 <set_pktRate>:

#include "stream.h"
#include "Demo_Tasks/demo_tasks.h"


void set_pktRate(pkt_name_t pn, uint8_t sr){
20000464:	b480      	push	{r7}
20000466:	b083      	sub	sp, #12
20000468:	af00      	add	r7, sp, #0
2000046a:	4602      	mov	r2, r0
2000046c:	460b      	mov	r3, r1
2000046e:	71fa      	strb	r2, [r7, #7]
20000470:	71bb      	strb	r3, [r7, #6]

	pkt_stream[pn].rate = sr * 1000;
20000472:	79f9      	ldrb	r1, [r7, #7]
20000474:	79bb      	ldrb	r3, [r7, #6]
20000476:	461a      	mov	r2, r3
20000478:	ea4f 1242 	mov.w	r2, r2, lsl #5
2000047c:	ebc3 0202 	rsb	r2, r3, r2
20000480:	ea4f 0282 	mov.w	r2, r2, lsl #2
20000484:	4413      	add	r3, r2
20000486:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000048a:	b298      	uxth	r0, r3
2000048c:	f64d 72d8 	movw	r2, #57304	; 0xdfd8
20000490:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000494:	460b      	mov	r3, r1
20000496:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000049a:	ebc1 0303 	rsb	r3, r1, r3
2000049e:	ea4f 0343 	mov.w	r3, r3, lsl #1
200004a2:	4413      	add	r3, r2
200004a4:	f103 0308 	add.w	r3, r3, #8
200004a8:	4602      	mov	r2, r0
200004aa:	809a      	strh	r2, [r3, #4]

}
200004ac:	f107 070c 	add.w	r7, r7, #12
200004b0:	46bd      	mov	sp, r7
200004b2:	bc80      	pop	{r7}
200004b4:	4770      	bx	lr
200004b6:	bf00      	nop

200004b8 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
200004b8:	b580      	push	{r7, lr}
200004ba:	b092      	sub	sp, #72	; 0x48
200004bc:	af04      	add	r7, sp, #16
200004be:	60f8      	str	r0, [r7, #12]
200004c0:	60b9      	str	r1, [r7, #8]
200004c2:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
200004c4:	f247 63c8 	movw	r3, #30408	; 0x76c8
200004c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004cc:	881b      	ldrh	r3, [r3, #0]
200004ce:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
200004d0:	f04f 0328 	mov.w	r3, #40	; 0x28
200004d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
200004d8:	f04f 032a 	mov.w	r3, #42	; 0x2a
200004dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
200004e0:	f04f 032c 	mov.w	r3, #44	; 0x2c
200004e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
200004e8:	f04f 0329 	mov.w	r3, #41	; 0x29
200004ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
200004f0:	f04f 032b 	mov.w	r3, #43	; 0x2b
200004f4:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
200004f8:	f04f 032d 	mov.w	r3, #45	; 0x2d
200004fc:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
200004fe:	f04f 0300 	mov.w	r3, #0
20000502:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
20000506:	f107 0334 	add.w	r3, r7, #52	; 0x34
2000050a:	f04f 0200 	mov.w	r2, #0
2000050e:	9200      	str	r2, [sp, #0]
20000510:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000514:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000518:	f04f 016a 	mov.w	r1, #106	; 0x6a
2000051c:	461a      	mov	r2, r3
2000051e:	f04f 0302 	mov.w	r3, #2
20000522:	f005 fda7 	bl	20006074 <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
20000526:	f107 0318 	add.w	r3, r7, #24
2000052a:	f04f 0200 	mov.w	r2, #0
2000052e:	9200      	str	r2, [sp, #0]
20000530:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000534:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000538:	f04f 016a 	mov.w	r1, #106	; 0x6a
2000053c:	461a      	mov	r2, r3
2000053e:	f04f 0301 	mov.w	r3, #1
20000542:	f005 fe09 	bl	20006158 <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000546:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
2000054a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054e:	f04f 0100 	mov.w	r1, #0
20000552:	f005 ff0b 	bl	2000636c <I2C_wait_complete>
20000556:	4603      	mov	r3, r0
20000558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
2000055c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000564:	4413      	add	r3, r2
20000566:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
2000056a:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000056e:	f107 0218 	add.w	r2, r7, #24
20000572:	9200      	str	r2, [sp, #0]
20000574:	f04f 0201 	mov.w	r2, #1
20000578:	9201      	str	r2, [sp, #4]
2000057a:	f04f 0200 	mov.w	r2, #0
2000057e:	9202      	str	r2, [sp, #8]
20000580:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000584:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000588:	f04f 016a 	mov.w	r1, #106	; 0x6a
2000058c:	461a      	mov	r2, r3
2000058e:	f04f 0301 	mov.w	r3, #1
20000592:	f005 fe53 	bl	2000623c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000596:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
2000059a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059e:	f04f 0100 	mov.w	r1, #0
200005a2:	f005 fee3 	bl	2000636c <I2C_wait_complete>
200005a6:	4603      	mov	r3, r0
200005a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005ac:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200005b4:	4413      	add	r3, r2
200005b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
200005ba:	f107 031c 	add.w	r3, r7, #28
200005be:	f107 0214 	add.w	r2, r7, #20
200005c2:	9200      	str	r2, [sp, #0]
200005c4:	f04f 0201 	mov.w	r2, #1
200005c8:	9201      	str	r2, [sp, #4]
200005ca:	f04f 0200 	mov.w	r2, #0
200005ce:	9202      	str	r2, [sp, #8]
200005d0:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200005d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005d8:	f04f 016a 	mov.w	r1, #106	; 0x6a
200005dc:	461a      	mov	r2, r3
200005de:	f04f 0301 	mov.w	r3, #1
200005e2:	f005 fe2b 	bl	2000623c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200005e6:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200005ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005ee:	f04f 0100 	mov.w	r1, #0
200005f2:	f005 febb 	bl	2000636c <I2C_wait_complete>
200005f6:	4603      	mov	r3, r0
200005f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005fc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000600:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000604:	4413      	add	r3, r2
20000606:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
2000060a:	7d3b      	ldrb	r3, [r7, #20]
2000060c:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000610:	b29a      	uxth	r2, r3
20000612:	7e3b      	ldrb	r3, [r7, #24]
20000614:	ea42 0303 	orr.w	r3, r2, r3
20000618:	b29b      	uxth	r3, r3
2000061a:	b29a      	uxth	r2, r3
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
20000620:	687b      	ldr	r3, [r7, #4]
20000622:	881b      	ldrh	r3, [r3, #0]
20000624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000628:	d906      	bls.n	20000638 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
2000062a:	687b      	ldr	r3, [r7, #4]
2000062c:	881b      	ldrh	r3, [r3, #0]
2000062e:	ea6f 0303 	mvn.w	r3, r3
20000632:	b29a      	uxth	r2, r3
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
20000638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
2000063c:	f107 0218 	add.w	r2, r7, #24
20000640:	9200      	str	r2, [sp, #0]
20000642:	f04f 0201 	mov.w	r2, #1
20000646:	9201      	str	r2, [sp, #4]
20000648:	f04f 0200 	mov.w	r2, #0
2000064c:	9202      	str	r2, [sp, #8]
2000064e:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000652:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000656:	f04f 016a 	mov.w	r1, #106	; 0x6a
2000065a:	461a      	mov	r2, r3
2000065c:	f04f 0301 	mov.w	r3, #1
20000660:	f005 fdec 	bl	2000623c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000664:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000668:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000066c:	f04f 0100 	mov.w	r1, #0
20000670:	f005 fe7c 	bl	2000636c <I2C_wait_complete>
20000674:	4603      	mov	r3, r0
20000676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
2000067a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000067e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000682:	4413      	add	r3, r2
20000684:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
20000688:	f107 0320 	add.w	r3, r7, #32
2000068c:	f107 0214 	add.w	r2, r7, #20
20000690:	9200      	str	r2, [sp, #0]
20000692:	f04f 0201 	mov.w	r2, #1
20000696:	9201      	str	r2, [sp, #4]
20000698:	f04f 0200 	mov.w	r2, #0
2000069c:	9202      	str	r2, [sp, #8]
2000069e:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200006a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006a6:	f04f 016a 	mov.w	r1, #106	; 0x6a
200006aa:	461a      	mov	r2, r3
200006ac:	f04f 0301 	mov.w	r3, #1
200006b0:	f005 fdc4 	bl	2000623c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200006b4:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200006b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006bc:	f04f 0100 	mov.w	r1, #0
200006c0:	f005 fe54 	bl	2000636c <I2C_wait_complete>
200006c4:	4603      	mov	r3, r0
200006c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200006ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200006ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200006d2:	4413      	add	r3, r2
200006d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200006d8:	7d3b      	ldrb	r3, [r7, #20]
200006da:	ea4f 2303 	mov.w	r3, r3, lsl #8
200006de:	b29a      	uxth	r2, r3
200006e0:	7e3b      	ldrb	r3, [r7, #24]
200006e2:	ea42 0303 	orr.w	r3, r2, r3
200006e6:	b29b      	uxth	r3, r3
200006e8:	b29a      	uxth	r2, r3
200006ea:	68bb      	ldr	r3, [r7, #8]
200006ec:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
200006ee:	68bb      	ldr	r3, [r7, #8]
200006f0:	881b      	ldrh	r3, [r3, #0]
200006f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200006f6:	d906      	bls.n	20000706 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
200006f8:	68bb      	ldr	r3, [r7, #8]
200006fa:	881b      	ldrh	r3, [r3, #0]
200006fc:	ea6f 0303 	mvn.w	r3, r3
20000700:	b29a      	uxth	r2, r3
20000702:	68bb      	ldr	r3, [r7, #8]
20000704:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
20000706:	f107 0330 	add.w	r3, r7, #48	; 0x30
2000070a:	f107 0218 	add.w	r2, r7, #24
2000070e:	9200      	str	r2, [sp, #0]
20000710:	f04f 0201 	mov.w	r2, #1
20000714:	9201      	str	r2, [sp, #4]
20000716:	f04f 0200 	mov.w	r2, #0
2000071a:	9202      	str	r2, [sp, #8]
2000071c:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000720:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000724:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000728:	461a      	mov	r2, r3
2000072a:	f04f 0301 	mov.w	r3, #1
2000072e:	f005 fd85 	bl	2000623c <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000732:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000736:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000073a:	f04f 0100 	mov.w	r1, #0
2000073e:	f005 fe15 	bl	2000636c <I2C_wait_complete>
20000742:	4603      	mov	r3, r0
20000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000748:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000074c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000750:	4413      	add	r3, r2
20000752:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
20000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000075a:	f107 0214 	add.w	r2, r7, #20
2000075e:	9200      	str	r2, [sp, #0]
20000760:	f04f 0201 	mov.w	r2, #1
20000764:	9201      	str	r2, [sp, #4]
20000766:	f04f 0200 	mov.w	r2, #0
2000076a:	9202      	str	r2, [sp, #8]
2000076c:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000770:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000774:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000778:	461a      	mov	r2, r3
2000077a:	f04f 0301 	mov.w	r3, #1
2000077e:	f005 fd5d 	bl	2000623c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000782:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000786:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000078a:	f04f 0100 	mov.w	r1, #0
2000078e:	f005 fded 	bl	2000636c <I2C_wait_complete>
20000792:	4603      	mov	r3, r0
20000794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000798:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000079c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200007a0:	4413      	add	r3, r2
200007a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200007a6:	7d3b      	ldrb	r3, [r7, #20]
200007a8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200007ac:	b29a      	uxth	r2, r3
200007ae:	7e3b      	ldrb	r3, [r7, #24]
200007b0:	ea42 0303 	orr.w	r3, r2, r3
200007b4:	b29b      	uxth	r3, r3
200007b6:	b29a      	uxth	r2, r3
200007b8:	68fb      	ldr	r3, [r7, #12]
200007ba:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
200007bc:	68fb      	ldr	r3, [r7, #12]
200007be:	881b      	ldrh	r3, [r3, #0]
200007c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200007c4:	d906      	bls.n	200007d4 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
200007c6:	68fb      	ldr	r3, [r7, #12]
200007c8:	881b      	ldrh	r3, [r3, #0]
200007ca:	ea6f 0303 	mvn.w	r3, r3
200007ce:	b29a      	uxth	r2, r3
200007d0:	68fb      	ldr	r3, [r7, #12]
200007d2:	801a      	strh	r2, [r3, #0]
	}

	return status;
200007d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
200007d8:	4618      	mov	r0, r3
200007da:	f107 0738 	add.w	r7, r7, #56	; 0x38
200007de:	46bd      	mov	sp, r7
200007e0:	bd80      	pop	{r7, pc}
200007e2:	bf00      	nop

200007e4 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
200007e4:	b580      	push	{r7, lr}
200007e6:	b092      	sub	sp, #72	; 0x48
200007e8:	af04      	add	r7, sp, #16
200007ea:	60f8      	str	r0, [r7, #12]
200007ec:	60b9      	str	r1, [r7, #8]
200007ee:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
200007f0:	f247 63c4 	movw	r3, #30404	; 0x76c4
200007f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007f8:	881b      	ldrh	r3, [r3, #0]
200007fa:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
200007fc:	f04f 0318 	mov.w	r3, #24
20000800:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
20000804:	f04f 031a 	mov.w	r3, #26
20000808:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
2000080c:	f04f 031c 	mov.w	r3, #28
20000810:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
20000814:	f04f 0319 	mov.w	r3, #25
20000818:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
2000081c:	f04f 031b 	mov.w	r3, #27
20000820:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
20000822:	f04f 031d 	mov.w	r3, #29
20000826:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
20000828:	f04f 036a 	mov.w	r3, #106	; 0x6a
2000082c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
20000830:	f04f 0300 	mov.w	r3, #0
20000834:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
20000838:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000083c:	f107 0330 	add.w	r3, r7, #48	; 0x30
20000840:	f107 0114 	add.w	r1, r7, #20
20000844:	9100      	str	r1, [sp, #0]
20000846:	f04f 0101 	mov.w	r1, #1
2000084a:	9101      	str	r1, [sp, #4]
2000084c:	f04f 0100 	mov.w	r1, #0
20000850:	9102      	str	r1, [sp, #8]
20000852:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000856:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000085a:	4611      	mov	r1, r2
2000085c:	461a      	mov	r2, r3
2000085e:	f04f 0302 	mov.w	r3, #2
20000862:	f005 fceb 	bl	2000623c <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000866:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
2000086a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086e:	f04f 0100 	mov.w	r1, #0
20000872:	f005 fd7b 	bl	2000636c <I2C_wait_complete>
20000876:	4603      	mov	r3, r0
20000878:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
2000087c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000880:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000884:	4413      	add	r3, r2
20000886:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
2000088a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000892:	f107 0114 	add.w	r1, r7, #20
20000896:	9100      	str	r1, [sp, #0]
20000898:	f04f 0101 	mov.w	r1, #1
2000089c:	9101      	str	r1, [sp, #4]
2000089e:	f04f 0100 	mov.w	r1, #0
200008a2:	9102      	str	r1, [sp, #8]
200008a4:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200008a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008ac:	4611      	mov	r1, r2
200008ae:	461a      	mov	r2, r3
200008b0:	f04f 0301 	mov.w	r3, #1
200008b4:	f005 fcc2 	bl	2000623c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200008b8:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200008bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008c0:	f04f 0100 	mov.w	r1, #0
200008c4:	f005 fd52 	bl	2000636c <I2C_wait_complete>
200008c8:	4603      	mov	r3, r0
200008ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200008ce:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200008d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200008d6:	4413      	add	r3, r2
200008d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
200008dc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200008e0:	f107 0318 	add.w	r3, r7, #24
200008e4:	f107 0110 	add.w	r1, r7, #16
200008e8:	9100      	str	r1, [sp, #0]
200008ea:	f04f 0101 	mov.w	r1, #1
200008ee:	9101      	str	r1, [sp, #4]
200008f0:	f04f 0100 	mov.w	r1, #0
200008f4:	9102      	str	r1, [sp, #8]
200008f6:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200008fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008fe:	4611      	mov	r1, r2
20000900:	461a      	mov	r2, r3
20000902:	f04f 0301 	mov.w	r3, #1
20000906:	f005 fc99 	bl	2000623c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000090a:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
2000090e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000912:	f04f 0100 	mov.w	r1, #0
20000916:	f005 fd29 	bl	2000636c <I2C_wait_complete>
2000091a:	4603      	mov	r3, r0
2000091c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000920:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000924:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000928:	4413      	add	r3, r2
2000092a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
2000092e:	7c3b      	ldrb	r3, [r7, #16]
20000930:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000934:	b29a      	uxth	r2, r3
20000936:	7d3b      	ldrb	r3, [r7, #20]
20000938:	ea42 0303 	orr.w	r3, r2, r3
2000093c:	b29b      	uxth	r3, r3
2000093e:	b29a      	uxth	r2, r3
20000940:	68fb      	ldr	r3, [r7, #12]
20000942:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
20000944:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000948:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000094c:	f107 0114 	add.w	r1, r7, #20
20000950:	9100      	str	r1, [sp, #0]
20000952:	f04f 0101 	mov.w	r1, #1
20000956:	9101      	str	r1, [sp, #4]
20000958:	f04f 0100 	mov.w	r1, #0
2000095c:	9102      	str	r1, [sp, #8]
2000095e:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000962:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000966:	4611      	mov	r1, r2
20000968:	461a      	mov	r2, r3
2000096a:	f04f 0301 	mov.w	r3, #1
2000096e:	f005 fc65 	bl	2000623c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000972:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000976:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000097a:	f04f 0100 	mov.w	r1, #0
2000097e:	f005 fcf5 	bl	2000636c <I2C_wait_complete>
20000982:	4603      	mov	r3, r0
20000984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000988:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000098c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000990:	4413      	add	r3, r2
20000992:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
20000996:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000099a:	f107 031c 	add.w	r3, r7, #28
2000099e:	f107 0110 	add.w	r1, r7, #16
200009a2:	9100      	str	r1, [sp, #0]
200009a4:	f04f 0101 	mov.w	r1, #1
200009a8:	9101      	str	r1, [sp, #4]
200009aa:	f04f 0100 	mov.w	r1, #0
200009ae:	9102      	str	r1, [sp, #8]
200009b0:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200009b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009b8:	4611      	mov	r1, r2
200009ba:	461a      	mov	r2, r3
200009bc:	f04f 0301 	mov.w	r3, #1
200009c0:	f005 fc3c 	bl	2000623c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200009c4:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200009c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009cc:	f04f 0100 	mov.w	r1, #0
200009d0:	f005 fccc 	bl	2000636c <I2C_wait_complete>
200009d4:	4603      	mov	r3, r0
200009d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200009da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200009de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200009e2:	4413      	add	r3, r2
200009e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200009e8:	7c3b      	ldrb	r3, [r7, #16]
200009ea:	ea4f 2303 	mov.w	r3, r3, lsl #8
200009ee:	b29a      	uxth	r2, r3
200009f0:	7d3b      	ldrb	r3, [r7, #20]
200009f2:	ea42 0303 	orr.w	r3, r2, r3
200009f6:	b29b      	uxth	r3, r3
200009f8:	b29a      	uxth	r2, r3
200009fa:	68bb      	ldr	r3, [r7, #8]
200009fc:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
200009fe:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000a06:	f107 0114 	add.w	r1, r7, #20
20000a0a:	9100      	str	r1, [sp, #0]
20000a0c:	f04f 0101 	mov.w	r1, #1
20000a10:	9101      	str	r1, [sp, #4]
20000a12:	f04f 0100 	mov.w	r1, #0
20000a16:	9102      	str	r1, [sp, #8]
20000a18:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000a1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a20:	4611      	mov	r1, r2
20000a22:	461a      	mov	r2, r3
20000a24:	f04f 0301 	mov.w	r3, #1
20000a28:	f005 fc08 	bl	2000623c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a2c:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000a30:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a34:	f04f 0100 	mov.w	r1, #0
20000a38:	f005 fc98 	bl	2000636c <I2C_wait_complete>
20000a3c:	4603      	mov	r3, r0
20000a3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a42:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a4a:	4413      	add	r3, r2
20000a4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
20000a50:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a54:	f107 0320 	add.w	r3, r7, #32
20000a58:	f107 0110 	add.w	r1, r7, #16
20000a5c:	9100      	str	r1, [sp, #0]
20000a5e:	f04f 0101 	mov.w	r1, #1
20000a62:	9101      	str	r1, [sp, #4]
20000a64:	f04f 0100 	mov.w	r1, #0
20000a68:	9102      	str	r1, [sp, #8]
20000a6a:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000a6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a72:	4611      	mov	r1, r2
20000a74:	461a      	mov	r2, r3
20000a76:	f04f 0301 	mov.w	r3, #1
20000a7a:	f005 fbdf 	bl	2000623c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a7e:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a86:	f04f 0100 	mov.w	r1, #0
20000a8a:	f005 fc6f 	bl	2000636c <I2C_wait_complete>
20000a8e:	4603      	mov	r3, r0
20000a90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a94:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a9c:	4413      	add	r3, r2
20000a9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000aa2:	7c3b      	ldrb	r3, [r7, #16]
20000aa4:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000aa8:	b29a      	uxth	r2, r3
20000aaa:	7d3b      	ldrb	r3, [r7, #20]
20000aac:	ea42 0303 	orr.w	r3, r2, r3
20000ab0:	b29b      	uxth	r3, r3
20000ab2:	b29a      	uxth	r2, r3
20000ab4:	687b      	ldr	r3, [r7, #4]
20000ab6:	801a      	strh	r2, [r3, #0]

		return status;
20000ab8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
20000abc:	4618      	mov	r0, r3
20000abe:	f107 0738 	add.w	r7, r7, #56	; 0x38
20000ac2:	46bd      	mov	sp, r7
20000ac4:	bd80      	pop	{r7, pc}
20000ac6:	bf00      	nop

20000ac8 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
20000ac8:	b580      	push	{r7, lr}
20000aca:	b08a      	sub	sp, #40	; 0x28
20000acc:	af04      	add	r7, sp, #16
20000ace:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
20000ad0:	f04f 0315 	mov.w	r3, #21
20000ad4:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
20000ad6:	f04f 0316 	mov.w	r3, #22
20000ada:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
20000adc:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000ae0:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
20000ae2:	7dba      	ldrb	r2, [r7, #22]
20000ae4:	f107 0314 	add.w	r3, r7, #20
20000ae8:	f107 010c 	add.w	r1, r7, #12
20000aec:	9100      	str	r1, [sp, #0]
20000aee:	f04f 0101 	mov.w	r1, #1
20000af2:	9101      	str	r1, [sp, #4]
20000af4:	f04f 0100 	mov.w	r1, #0
20000af8:	9102      	str	r1, [sp, #8]
20000afa:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000afe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b02:	4611      	mov	r1, r2
20000b04:	461a      	mov	r2, r3
20000b06:	f04f 0301 	mov.w	r3, #1
20000b0a:	f005 fb97 	bl	2000623c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000b0e:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000b12:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b16:	f04f 0100 	mov.w	r1, #0
20000b1a:	f005 fc27 	bl	2000636c <I2C_wait_complete>
20000b1e:	4603      	mov	r3, r0
20000b20:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
20000b22:	7dba      	ldrb	r2, [r7, #22]
20000b24:	f107 0310 	add.w	r3, r7, #16
20000b28:	f107 0108 	add.w	r1, r7, #8
20000b2c:	9100      	str	r1, [sp, #0]
20000b2e:	f04f 0101 	mov.w	r1, #1
20000b32:	9101      	str	r1, [sp, #4]
20000b34:	f04f 0100 	mov.w	r1, #0
20000b38:	9102      	str	r1, [sp, #8]
20000b3a:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000b3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b42:	4611      	mov	r1, r2
20000b44:	461a      	mov	r2, r3
20000b46:	f04f 0301 	mov.w	r3, #1
20000b4a:	f005 fb77 	bl	2000623c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000b4e:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000b52:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b56:	f04f 0100 	mov.w	r1, #0
20000b5a:	f005 fc07 	bl	2000636c <I2C_wait_complete>
20000b5e:	4603      	mov	r3, r0
20000b60:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
20000b62:	7b3b      	ldrb	r3, [r7, #12]
20000b64:	461a      	mov	r2, r3
20000b66:	7a3b      	ldrb	r3, [r7, #8]
20000b68:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b6c:	b29b      	uxth	r3, r3
20000b6e:	ea42 0303 	orr.w	r3, r2, r3
20000b72:	b29b      	uxth	r3, r3
20000b74:	b29a      	uxth	r2, r3
20000b76:	687b      	ldr	r3, [r7, #4]
20000b78:	801a      	strh	r2, [r3, #0]

		return 0;
20000b7a:	f04f 0300 	mov.w	r3, #0

}
20000b7e:	4618      	mov	r0, r3
20000b80:	f107 0718 	add.w	r7, r7, #24
20000b84:	46bd      	mov	sp, r7
20000b86:	bd80      	pop	{r7, pc}

20000b88 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
20000b88:	b580      	push	{r7, lr}
20000b8a:	b086      	sub	sp, #24
20000b8c:	af02      	add	r7, sp, #8
20000b8e:	60b9      	str	r1, [r7, #8]
20000b90:	4613      	mov	r3, r2
20000b92:	4602      	mov	r2, r0
20000b94:	73fa      	strb	r2, [r7, #15]
20000b96:	71fb      	strb	r3, [r7, #7]
     count = 0;
20000b98:	f24e 0304 	movw	r3, #57348	; 0xe004
20000b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba0:	f04f 0200 	mov.w	r2, #0
20000ba4:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000ba6:	e032      	b.n	20000c0e <vc_write+0x86>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
20000ba8:	79fb      	ldrb	r3, [r7, #7]
20000baa:	7bfa      	ldrb	r2, [r7, #15]
20000bac:	f04f 0100 	mov.w	r1, #0
20000bb0:	9100      	str	r1, [sp, #0]
20000bb2:	f64d 3028 	movw	r0, #56104	; 0xdb28
20000bb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bba:	4611      	mov	r1, r2
20000bbc:	68ba      	ldr	r2, [r7, #8]
20000bbe:	f005 fa59 	bl	20006074 <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000bc2:	f64d 3028 	movw	r0, #56104	; 0xdb28
20000bc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bca:	f04f 0100 	mov.w	r1, #0
20000bce:	f005 fbcd 	bl	2000636c <I2C_wait_complete>
20000bd2:	4603      	mov	r3, r0
20000bd4:	461a      	mov	r2, r3
20000bd6:	f24e 0306 	movw	r3, #57350	; 0xe006
20000bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bde:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000be0:	f24e 0306 	movw	r3, #57350	; 0xe006
20000be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	2b00      	cmp	r3, #0
20000bec:	d102      	bne.n	20000bf4 <vc_write+0x6c>
            return 0;
20000bee:	f04f 0300 	mov.w	r3, #0
20000bf2:	e018      	b.n	20000c26 <vc_write+0x9e>
        }
        count++;
20000bf4:	f24e 0304 	movw	r3, #57348	; 0xe004
20000bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bfc:	781b      	ldrb	r3, [r3, #0]
20000bfe:	f103 0301 	add.w	r3, r3, #1
20000c02:	b2da      	uxtb	r2, r3
20000c04:	f24e 0304 	movw	r3, #57348	; 0xe004
20000c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c0c:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
20000c0e:	f24e 0304 	movw	r3, #57348	; 0xe004
20000c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c16:	781b      	ldrb	r3, [r3, #0]
20000c18:	2b09      	cmp	r3, #9
20000c1a:	d9c5      	bls.n	20000ba8 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000c1c:	f24e 0304 	movw	r3, #57348	; 0xe004
20000c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c24:	781b      	ldrb	r3, [r3, #0]

}
20000c26:	4618      	mov	r0, r3
20000c28:	f107 0710 	add.w	r7, r7, #16
20000c2c:	46bd      	mov	sp, r7
20000c2e:	bd80      	pop	{r7, pc}

20000c30 <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
20000c30:	b580      	push	{r7, lr}
20000c32:	b086      	sub	sp, #24
20000c34:	af02      	add	r7, sp, #8
20000c36:	60b9      	str	r1, [r7, #8]
20000c38:	4613      	mov	r3, r2
20000c3a:	4602      	mov	r2, r0
20000c3c:	73fa      	strb	r2, [r7, #15]
20000c3e:	71fb      	strb	r3, [r7, #7]
    count = 0;
20000c40:	f24e 0304 	movw	r3, #57348	; 0xe004
20000c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c48:	f04f 0200 	mov.w	r2, #0
20000c4c:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000c4e:	e032      	b.n	20000cb6 <vc_read+0x86>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
20000c50:	79fb      	ldrb	r3, [r7, #7]
20000c52:	7bfa      	ldrb	r2, [r7, #15]
20000c54:	f04f 0100 	mov.w	r1, #0
20000c58:	9100      	str	r1, [sp, #0]
20000c5a:	f64d 3028 	movw	r0, #56104	; 0xdb28
20000c5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c62:	4611      	mov	r1, r2
20000c64:	68ba      	ldr	r2, [r7, #8]
20000c66:	f005 fa77 	bl	20006158 <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000c6a:	f64d 3028 	movw	r0, #56104	; 0xdb28
20000c6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c72:	f04f 0100 	mov.w	r1, #0
20000c76:	f005 fb79 	bl	2000636c <I2C_wait_complete>
20000c7a:	4603      	mov	r3, r0
20000c7c:	461a      	mov	r2, r3
20000c7e:	f24e 0306 	movw	r3, #57350	; 0xe006
20000c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c86:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000c88:	f24e 0306 	movw	r3, #57350	; 0xe006
20000c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c90:	781b      	ldrb	r3, [r3, #0]
20000c92:	2b00      	cmp	r3, #0
20000c94:	d102      	bne.n	20000c9c <vc_read+0x6c>
            return 0;
20000c96:	f04f 0300 	mov.w	r3, #0
20000c9a:	e018      	b.n	20000cce <vc_read+0x9e>
        }
        count++;
20000c9c:	f24e 0304 	movw	r3, #57348	; 0xe004
20000ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ca4:	781b      	ldrb	r3, [r3, #0]
20000ca6:	f103 0301 	add.w	r3, r3, #1
20000caa:	b2da      	uxtb	r2, r3
20000cac:	f24e 0304 	movw	r3, #57348	; 0xe004
20000cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cb4:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
20000cb6:	f24e 0304 	movw	r3, #57348	; 0xe004
20000cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cbe:	781b      	ldrb	r3, [r3, #0]
20000cc0:	2b09      	cmp	r3, #9
20000cc2:	d9c5      	bls.n	20000c50 <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000cc4:	f24e 0304 	movw	r3, #57348	; 0xe004
20000cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ccc:	781b      	ldrb	r3, [r3, #0]

}
20000cce:	4618      	mov	r0, r3
20000cd0:	f107 0710 	add.w	r7, r7, #16
20000cd4:	46bd      	mov	sp, r7
20000cd6:	bd80      	pop	{r7, pc}

20000cd8 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
20000cd8:	b580      	push	{r7, lr}
20000cda:	b082      	sub	sp, #8
20000cdc:	af00      	add	r7, sp, #0
20000cde:	460b      	mov	r3, r1
20000ce0:	603a      	str	r2, [r7, #0]
20000ce2:	4602      	mov	r2, r0
20000ce4:	71fa      	strb	r2, [r7, #7]
20000ce6:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
20000ce8:	79fa      	ldrb	r2, [r7, #7]
20000cea:	f107 0306 	add.w	r3, r7, #6
20000cee:	4610      	mov	r0, r2
20000cf0:	4619      	mov	r1, r3
20000cf2:	f04f 0201 	mov.w	r2, #1
20000cf6:	f7ff ff47 	bl	20000b88 <vc_write>
20000cfa:	4603      	mov	r3, r0
20000cfc:	2b09      	cmp	r3, #9
20000cfe:	d902      	bls.n	20000d06 <vc_read_reg+0x2e>
        return 1;
20000d00:	f04f 0301 	mov.w	r3, #1
20000d04:	e00e      	b.n	20000d24 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
20000d06:	79fb      	ldrb	r3, [r7, #7]
20000d08:	4618      	mov	r0, r3
20000d0a:	6839      	ldr	r1, [r7, #0]
20000d0c:	f04f 0202 	mov.w	r2, #2
20000d10:	f7ff ff8e 	bl	20000c30 <vc_read>
20000d14:	4603      	mov	r3, r0
20000d16:	2b09      	cmp	r3, #9
20000d18:	d902      	bls.n	20000d20 <vc_read_reg+0x48>
        return 1;
20000d1a:	f04f 0301 	mov.w	r3, #1
20000d1e:	e001      	b.n	20000d24 <vc_read_reg+0x4c>
    }

    return 0;
20000d20:	f04f 0300 	mov.w	r3, #0
}
20000d24:	4618      	mov	r0, r3
20000d26:	f107 0708 	add.w	r7, r7, #8
20000d2a:	46bd      	mov	sp, r7
20000d2c:	bd80      	pop	{r7, pc}
20000d2e:	bf00      	nop

20000d30 <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000d30:	b580      	push	{r7, lr}
20000d32:	b082      	sub	sp, #8
20000d34:	af00      	add	r7, sp, #0
20000d36:	460b      	mov	r3, r1
20000d38:	603a      	str	r2, [r7, #0]
20000d3a:	4602      	mov	r2, r0
20000d3c:	71fa      	strb	r2, [r7, #7]
20000d3e:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000d40:	f24e 0300 	movw	r3, #57344	; 0xe000
20000d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d48:	f04f 0200 	mov.w	r2, #0
20000d4c:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000d4e:	f24e 0300 	movw	r3, #57344	; 0xe000
20000d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d56:	f04f 0200 	mov.w	r2, #0
20000d5a:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000d5c:	f24e 0302 	movw	r3, #57346	; 0xe002
20000d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d64:	f04f 0200 	mov.w	r2, #0
20000d68:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
20000d6a:	79bb      	ldrb	r3, [r7, #6]
20000d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d70:	b2db      	uxtb	r3, r3
20000d72:	79fa      	ldrb	r2, [r7, #7]
20000d74:	4610      	mov	r0, r2
20000d76:	4619      	mov	r1, r3
20000d78:	f24e 0200 	movw	r2, #57344	; 0xe000
20000d7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000d80:	f7ff ffaa 	bl	20000cd8 <vc_read_reg>
20000d84:	4603      	mov	r3, r0
20000d86:	2b00      	cmp	r3, #0
20000d88:	d11a      	bne.n	20000dc0 <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
20000d8a:	f24e 0300 	movw	r3, #57344	; 0xe000
20000d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d92:	781b      	ldrb	r3, [r3, #0]
20000d94:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000d98:	b29a      	uxth	r2, r3
20000d9a:	f24e 0300 	movw	r3, #57344	; 0xe000
20000d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000da2:	785b      	ldrb	r3, [r3, #1]
20000da4:	ea42 0303 	orr.w	r3, r2, r3
20000da8:	b29b      	uxth	r3, r3
20000daa:	b29a      	uxth	r2, r3
20000dac:	f24e 0302 	movw	r3, #57346	; 0xe002
20000db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db4:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000db6:	683b      	ldr	r3, [r7, #0]
20000db8:	f04f 0200 	mov.w	r2, #0
20000dbc:	701a      	strb	r2, [r3, #0]
20000dbe:	e00a      	b.n	20000dd6 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
20000dc0:	683b      	ldr	r3, [r7, #0]
20000dc2:	f04f 0201 	mov.w	r2, #1
20000dc6:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000dc8:	f24e 0302 	movw	r3, #57346	; 0xe002
20000dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dd0:	f04f 0200 	mov.w	r2, #0
20000dd4:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000dd6:	f24e 0302 	movw	r3, #57346	; 0xe002
20000dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dde:	881b      	ldrh	r3, [r3, #0]
}
20000de0:	4618      	mov	r0, r3
20000de2:	f107 0708 	add.w	r7, r7, #8
20000de6:	46bd      	mov	sp, r7
20000de8:	bd80      	pop	{r7, pc}
20000dea:	bf00      	nop

20000dec <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000dec:	b580      	push	{r7, lr}
20000dee:	b082      	sub	sp, #8
20000df0:	af00      	add	r7, sp, #0
20000df2:	460b      	mov	r3, r1
20000df4:	603a      	str	r2, [r7, #0]
20000df6:	4602      	mov	r2, r0
20000df8:	71fa      	strb	r2, [r7, #7]
20000dfa:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000dfc:	f24e 0300 	movw	r3, #57344	; 0xe000
20000e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e04:	f04f 0200 	mov.w	r2, #0
20000e08:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000e0a:	f24e 0300 	movw	r3, #57344	; 0xe000
20000e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e12:	f04f 0200 	mov.w	r2, #0
20000e16:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000e18:	f24e 0302 	movw	r3, #57346	; 0xe002
20000e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e20:	f04f 0200 	mov.w	r2, #0
20000e24:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
20000e26:	79bb      	ldrb	r3, [r7, #6]
20000e28:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000e2c:	b2db      	uxtb	r3, r3
20000e2e:	f103 33ff 	add.w	r3, r3, #4294967295
20000e32:	b2db      	uxtb	r3, r3
20000e34:	79fa      	ldrb	r2, [r7, #7]
20000e36:	4610      	mov	r0, r2
20000e38:	4619      	mov	r1, r3
20000e3a:	f24e 0200 	movw	r2, #57344	; 0xe000
20000e3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000e42:	f7ff ff49 	bl	20000cd8 <vc_read_reg>
20000e46:	4603      	mov	r3, r0
20000e48:	2b00      	cmp	r3, #0
20000e4a:	d11a      	bne.n	20000e82 <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
20000e4c:	f24e 0300 	movw	r3, #57344	; 0xe000
20000e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e54:	781b      	ldrb	r3, [r3, #0]
20000e56:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e5a:	b29a      	uxth	r2, r3
20000e5c:	f24e 0300 	movw	r3, #57344	; 0xe000
20000e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e64:	785b      	ldrb	r3, [r3, #1]
20000e66:	ea42 0303 	orr.w	r3, r2, r3
20000e6a:	b29b      	uxth	r3, r3
20000e6c:	b29a      	uxth	r2, r3
20000e6e:	f24e 0302 	movw	r3, #57346	; 0xe002
20000e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e76:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000e78:	683b      	ldr	r3, [r7, #0]
20000e7a:	f04f 0200 	mov.w	r2, #0
20000e7e:	701a      	strb	r2, [r3, #0]
20000e80:	e00a      	b.n	20000e98 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
20000e82:	683b      	ldr	r3, [r7, #0]
20000e84:	f04f 0201 	mov.w	r2, #1
20000e88:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000e8a:	f24e 0302 	movw	r3, #57346	; 0xe002
20000e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e92:	f04f 0200 	mov.w	r2, #0
20000e96:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000e98:	f24e 0302 	movw	r3, #57346	; 0xe002
20000e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ea0:	881b      	ldrh	r3, [r3, #0]
}
20000ea2:	4618      	mov	r0, r3
20000ea4:	f107 0708 	add.w	r7, r7, #8
20000ea8:	46bd      	mov	sp, r7
20000eaa:	bd80      	pop	{r7, pc}

20000eac <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
20000eac:	b580      	push	{r7, lr}
20000eae:	b08c      	sub	sp, #48	; 0x30
20000eb0:	af04      	add	r7, sp, #16
20000eb2:	60f8      	str	r0, [r7, #12]
20000eb4:	607b      	str	r3, [r7, #4]
20000eb6:	460b      	mov	r3, r1
20000eb8:	72fb      	strb	r3, [r7, #11]
20000eba:	4613      	mov	r3, r2
20000ebc:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
20000ebe:	7abb      	ldrb	r3, [r7, #10]
20000ec0:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
20000ec2:	7d3b      	ldrb	r3, [r7, #20]
20000ec4:	f043 0308 	orr.w	r3, r3, #8
20000ec8:	b2db      	uxtb	r3, r3
20000eca:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
20000ecc:	7d3b      	ldrb	r3, [r7, #20]
20000ece:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000ed2:	b2db      	uxtb	r3, r3
20000ed4:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
20000ed6:	7afa      	ldrb	r2, [r7, #11]
20000ed8:	f107 0314 	add.w	r3, r7, #20
20000edc:	f107 0118 	add.w	r1, r7, #24
20000ee0:	9100      	str	r1, [sp, #0]
20000ee2:	f04f 0102 	mov.w	r1, #2
20000ee6:	9101      	str	r1, [sp, #4]
20000ee8:	f04f 0100 	mov.w	r1, #0
20000eec:	9102      	str	r1, [sp, #8]
20000eee:	68f8      	ldr	r0, [r7, #12]
20000ef0:	4611      	mov	r1, r2
20000ef2:	461a      	mov	r2, r3
20000ef4:	f04f 0301 	mov.w	r3, #1
20000ef8:	f005 f9a0 	bl	2000623c <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
20000efc:	68f8      	ldr	r0, [r7, #12]
20000efe:	f04f 0100 	mov.w	r1, #0
20000f02:	f005 fa33 	bl	2000636c <I2C_wait_complete>
20000f06:	4603      	mov	r3, r0
20000f08:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
20000f0a:	7f7b      	ldrb	r3, [r7, #29]
20000f0c:	2b00      	cmp	r3, #0
20000f0e:	d004      	beq.n	20000f1a <get_ADC_value+0x6e>
		*flag = 1;
20000f10:	687b      	ldr	r3, [r7, #4]
20000f12:	f04f 0201 	mov.w	r2, #1
20000f16:	701a      	strb	r2, [r3, #0]
20000f18:	e012      	b.n	20000f40 <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
20000f1a:	7e3b      	ldrb	r3, [r7, #24]
20000f1c:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000f20:	b29a      	uxth	r2, r3
20000f22:	7e7b      	ldrb	r3, [r7, #25]
20000f24:	ea42 0303 	orr.w	r3, r2, r3
20000f28:	b29b      	uxth	r3, r3
20000f2a:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
20000f2c:	8bfb      	ldrh	r3, [r7, #30]
20000f2e:	ea4f 5303 	mov.w	r3, r3, lsl #20
20000f32:	ea4f 5313 	mov.w	r3, r3, lsr #20
20000f36:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
20000f38:	687b      	ldr	r3, [r7, #4]
20000f3a:	f04f 0200 	mov.w	r2, #0
20000f3e:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
20000f40:	8bfb      	ldrh	r3, [r7, #30]
}
20000f42:	4618      	mov	r0, r3
20000f44:	f107 0720 	add.w	r7, r7, #32
20000f48:	46bd      	mov	sp, r7
20000f4a:	bd80      	pop	{r7, pc}

20000f4c <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
20000f4c:	b580      	push	{r7, lr}
20000f4e:	b084      	sub	sp, #16
20000f50:	af00      	add	r7, sp, #0
20000f52:	4603      	mov	r3, r0
20000f54:	6039      	str	r1, [r7, #0]
20000f56:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
20000f58:	79fb      	ldrb	r3, [r7, #7]
20000f5a:	2b00      	cmp	r3, #0
20000f5c:	d10e      	bne.n	20000f7c <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
20000f5e:	683b      	ldr	r3, [r7, #0]
20000f60:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
20000f62:	68bb      	ldr	r3, [r7, #8]
20000f64:	6859      	ldr	r1, [r3, #4]
20000f66:	68bb      	ldr	r3, [r7, #8]
20000f68:	689a      	ldr	r2, [r3, #8]
20000f6a:	68bb      	ldr	r3, [r7, #8]
20000f6c:	7b1b      	ldrb	r3, [r3, #12]
20000f6e:	4608      	mov	r0, r1
20000f70:	4611      	mov	r1, r2
20000f72:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f76:	f005 f807 	bl	20005f88 <I2C_init>
20000f7a:	e030      	b.n	20000fde <init+0x92>
	}
	else if(d == vc_sensor){
20000f7c:	79fb      	ldrb	r3, [r7, #7]
20000f7e:	2b0a      	cmp	r3, #10
20000f80:	d10e      	bne.n	20000fa0 <init+0x54>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
20000f82:	683b      	ldr	r3, [r7, #0]
20000f84:	60fb      	str	r3, [r7, #12]
		I2C_init(vc_pkt->g_core_i2c2, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
20000f86:	68fb      	ldr	r3, [r7, #12]
20000f88:	6859      	ldr	r1, [r3, #4]
20000f8a:	68fb      	ldr	r3, [r7, #12]
20000f8c:	689a      	ldr	r2, [r3, #8]
20000f8e:	68fb      	ldr	r3, [r7, #12]
20000f90:	7b1b      	ldrb	r3, [r3, #12]
20000f92:	4608      	mov	r0, r1
20000f94:	4611      	mov	r1, r2
20000f96:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f9a:	f004 fff5 	bl	20005f88 <I2C_init>
20000f9e:	e01e      	b.n	20000fde <init+0x92>
	}
	else if(d == all){
20000fa0:	79fb      	ldrb	r3, [r7, #7]
20000fa2:	2b0b      	cmp	r3, #11
20000fa4:	d11b      	bne.n	20000fde <init+0x92>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000fa6:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
20000faa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000fae:	f245 0100 	movw	r1, #20480	; 0x5000
20000fb2:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000fb6:	f04f 0288 	mov.w	r2, #136	; 0x88
20000fba:	f04f 0300 	mov.w	r3, #0
20000fbe:	f004 ffe3 	bl	20005f88 <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000fc2:	f64d 3028 	movw	r0, #56104	; 0xdb28
20000fc6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000fca:	f242 0100 	movw	r1, #8192	; 0x2000
20000fce:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000fd2:	f04f 0288 	mov.w	r2, #136	; 0x88
20000fd6:	f04f 0300 	mov.w	r3, #0
20000fda:	f004 ffd5 	bl	20005f88 <I2C_init>
	}
	else{

	}

}
20000fde:	f107 0710 	add.w	r7, r7, #16
20000fe2:	46bd      	mov	sp, r7
20000fe4:	bd80      	pop	{r7, pc}
20000fe6:	bf00      	nop

20000fe8 <xMsToTicks>:

	vTaskDelay(tick_for_time);

}

TickType_t xMsToTicks(uint16_t timems){
20000fe8:	b480      	push	{r7}
20000fea:	b083      	sub	sp, #12
20000fec:	af00      	add	r7, sp, #0
20000fee:	4603      	mov	r3, r0
20000ff0:	80fb      	strh	r3, [r7, #6]
	return pdMS_TO_TICKS(timems);
20000ff2:	88fb      	ldrh	r3, [r7, #6]
20000ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20000ff8:	fb02 f203 	mul.w	r2, r2, r3
20000ffc:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20001000:	f2c1 0362 	movt	r3, #4194	; 0x1062
20001004:	fba3 1302 	umull	r1, r3, r3, r2
20001008:	ea4f 1393 	mov.w	r3, r3, lsr #6
}
2000100c:	4618      	mov	r0, r3
2000100e:	f107 070c 	add.w	r7, r7, #12
20001012:	46bd      	mov	sp, r7
20001014:	bc80      	pop	{r7}
20001016:	4770      	bx	lr

20001018 <cmd_valid>:
// Function checking the CheckSUM
//void chk_sum();

cmd_t cmd_list[NUM_CMDS];

uint8_t cmd_valid(rx_cmd_t* rx_cmd){
20001018:	b480      	push	{r7}
2000101a:	b083      	sub	sp, #12
2000101c:	af00      	add	r7, sp, #0
2000101e:	6078      	str	r0, [r7, #4]
	return 1;  //Will be checking the validated of the checksum.
20001020:	f04f 0301 	mov.w	r3, #1
}
20001024:	4618      	mov	r0, r3
20001026:	f107 070c 	add.w	r7, r7, #12
2000102a:	46bd      	mov	sp, r7
2000102c:	bc80      	pop	{r7}
2000102e:	4770      	bx	lr

20001030 <chk_s_cmd>:

uint8_t chk_s_cmd(rx_cmd_t* rx_cmd){
20001030:	b480      	push	{r7}
20001032:	b085      	sub	sp, #20
20001034:	af00      	add	r7, sp, #0
20001036:	6078      	str	r0, [r7, #4]
	uint16_t p;


	p = PILOT_REVERSE_BYTE_ORDER(rx_cmd->ccsds_cmd_p1);
20001038:	687b      	ldr	r3, [r7, #4]
2000103a:	781a      	ldrb	r2, [r3, #0]
2000103c:	785b      	ldrb	r3, [r3, #1]
2000103e:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001042:	ea43 0302 	orr.w	r3, r3, r2
20001046:	b29b      	uxth	r3, r3
20001048:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000104c:	b29a      	uxth	r2, r3
2000104e:	687b      	ldr	r3, [r7, #4]
20001050:	7819      	ldrb	r1, [r3, #0]
20001052:	785b      	ldrb	r3, [r3, #1]
20001054:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001058:	ea43 0301 	orr.w	r3, r3, r1
2000105c:	b29b      	uxth	r3, r3
2000105e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20001062:	b29b      	uxth	r3, r3
20001064:	ea42 0303 	orr.w	r3, r2, r3
20001068:	b29b      	uxth	r3, r3
2000106a:	81fb      	strh	r3, [r7, #14]


	cmd->length = p & 0x07FF;
2000106c:	f24e 2348 	movw	r3, #57928	; 0xe248
20001070:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001074:	681a      	ldr	r2, [r3, #0]
20001076:	89fb      	ldrh	r3, [r7, #14]
20001078:	ea4f 5343 	mov.w	r3, r3, lsl #21
2000107c:	ea4f 5353 	mov.w	r3, r3, lsr #21
20001080:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20001084:	f04f 0000 	mov.w	r0, #0
20001088:	ea40 0101 	orr.w	r1, r0, r1
2000108c:	7051      	strb	r1, [r2, #1]
2000108e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20001092:	b29b      	uxth	r3, r3
20001094:	f04f 0100 	mov.w	r1, #0
20001098:	ea41 0303 	orr.w	r3, r1, r3
2000109c:	7093      	strb	r3, [r2, #2]

	if( (p >> 11) & 0x01){
2000109e:	89fb      	ldrh	r3, [r7, #14]
200010a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
200010a4:	b29b      	uxth	r3, r3
200010a6:	f003 0301 	and.w	r3, r3, #1
200010aa:	b2db      	uxtb	r3, r3
200010ac:	2b00      	cmp	r3, #0
200010ae:	d002      	beq.n	200010b6 <chk_s_cmd+0x86>
		return 1;
200010b0:	f04f 0301 	mov.w	r3, #1
200010b4:	e001      	b.n	200010ba <chk_s_cmd+0x8a>
	}
	else{
		return 0;
200010b6:	f04f 0300 	mov.w	r3, #0
	}
}
200010ba:	4618      	mov	r0, r3
200010bc:	f107 0714 	add.w	r7, r7, #20
200010c0:	46bd      	mov	sp, r7
200010c2:	bc80      	pop	{r7}
200010c4:	4770      	bx	lr
200010c6:	bf00      	nop

200010c8 <add_cmd>:


void add_cmd(uint8_t id, uint16_t length, void (*ex_func)(uint8_t id, rx_cmd_t* rcv_cmd)){
200010c8:	b480      	push	{r7}
200010ca:	b083      	sub	sp, #12
200010cc:	af00      	add	r7, sp, #0
200010ce:	460b      	mov	r3, r1
200010d0:	603a      	str	r2, [r7, #0]
200010d2:	4602      	mov	r2, r0
200010d4:	71fa      	strb	r2, [r7, #7]
200010d6:	80bb      	strh	r3, [r7, #4]

	cmd_list[id].id = id;
200010d8:	79f9      	ldrb	r1, [r7, #7]
200010da:	f24e 2230 	movw	r2, #57904	; 0xe230
200010de:	f2c2 0200 	movt	r2, #8192	; 0x2000
200010e2:	460b      	mov	r3, r1
200010e4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200010e8:	ebc1 0303 	rsb	r3, r1, r3
200010ec:	4413      	add	r3, r2
200010ee:	79fa      	ldrb	r2, [r7, #7]
200010f0:	701a      	strb	r2, [r3, #0]
	cmd_list[id].length = length;
200010f2:	79f9      	ldrb	r1, [r7, #7]
200010f4:	f24e 2230 	movw	r2, #57904	; 0xe230
200010f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200010fc:	460b      	mov	r3, r1
200010fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001102:	ebc1 0303 	rsb	r3, r1, r3
20001106:	4413      	add	r3, r2
20001108:	793a      	ldrb	r2, [r7, #4]
2000110a:	f04f 0100 	mov.w	r1, #0
2000110e:	ea41 0202 	orr.w	r2, r1, r2
20001112:	705a      	strb	r2, [r3, #1]
20001114:	797a      	ldrb	r2, [r7, #5]
20001116:	f04f 0100 	mov.w	r1, #0
2000111a:	ea41 0202 	orr.w	r2, r1, r2
2000111e:	709a      	strb	r2, [r3, #2]
	cmd_list[id].ex_func = ex_func;
20001120:	79f8      	ldrb	r0, [r7, #7]
20001122:	683a      	ldr	r2, [r7, #0]
20001124:	f24e 2130 	movw	r1, #57904	; 0xe230
20001128:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000112c:	4603      	mov	r3, r0
2000112e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001132:	ebc0 0303 	rsb	r3, r0, r3
20001136:	440b      	add	r3, r1
20001138:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2000113c:	f04f 0000 	mov.w	r0, #0
20001140:	ea40 0101 	orr.w	r1, r0, r1
20001144:	70d9      	strb	r1, [r3, #3]
20001146:	ea4f 2112 	mov.w	r1, r2, lsr #8
2000114a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000114e:	f04f 0000 	mov.w	r0, #0
20001152:	ea40 0101 	orr.w	r1, r0, r1
20001156:	7119      	strb	r1, [r3, #4]
20001158:	ea4f 4112 	mov.w	r1, r2, lsr #16
2000115c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
20001160:	f04f 0000 	mov.w	r0, #0
20001164:	ea40 0101 	orr.w	r1, r0, r1
20001168:	7159      	strb	r1, [r3, #5]
2000116a:	ea4f 6212 	mov.w	r2, r2, lsr #24
2000116e:	f04f 0100 	mov.w	r1, #0
20001172:	ea41 0202 	orr.w	r2, r1, r2
20001176:	719a      	strb	r2, [r3, #6]

}
20001178:	f107 070c 	add.w	r7, r7, #12
2000117c:	46bd      	mov	sp, r7
2000117e:	bc80      	pop	{r7}
20001180:	4770      	bx	lr
20001182:	bf00      	nop

20001184 <vcmd_callback>:

void vcmd_callback(){
20001184:	b480      	push	{r7}
20001186:	af00      	add	r7, sp, #0
	//Execution for the timer based command
}
20001188:	46bd      	mov	sp, r7
2000118a:	bc80      	pop	{r7}
2000118c:	4770      	bx	lr
2000118e:	bf00      	nop

20001190 <cmd_engine>:

void cmd_engine(rx_cmd_t* rx_cmd){
20001190:	b590      	push	{r4, r7, lr}
20001192:	b085      	sub	sp, #20
20001194:	af02      	add	r7, sp, #8
20001196:	6078      	str	r0, [r7, #4]

	add_cmd(0, 16, cmd_noop);
20001198:	f241 2395 	movw	r3, #4757	; 0x1295
2000119c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011a0:	f04f 0000 	mov.w	r0, #0
200011a4:	f04f 0110 	mov.w	r1, #16
200011a8:	461a      	mov	r2, r3
200011aa:	f7ff ff8d 	bl	200010c8 <add_cmd>
	add_cmd(1, 16, set_pkt_rate);   //the actual command apid's is one greater than this.
200011ae:	f241 23a9 	movw	r3, #4777	; 0x12a9
200011b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011b6:	f04f 0001 	mov.w	r0, #1
200011ba:	f04f 0110 	mov.w	r1, #16
200011be:	461a      	mov	r2, r3
200011c0:	f7ff ff82 	bl	200010c8 <add_cmd>

	if(chk_s_cmd(rx_cmd)){  //if the command is storable
200011c4:	6878      	ldr	r0, [r7, #4]
200011c6:	f7ff ff33 	bl	20001030 <chk_s_cmd>
200011ca:	4603      	mov	r3, r0
200011cc:	2b00      	cmp	r3, #0
200011ce:	d037      	beq.n	20001240 <cmd_engine+0xb0>
		cmd_timer[0] = xTimerCreate("cmd_timer", pdMS_TO_TICKS(rx_cmd->ccsds_time), pdFALSE, (void*)0, vcmd_callback);
200011d0:	687b      	ldr	r3, [r7, #4]
200011d2:	791b      	ldrb	r3, [r3, #4]
200011d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
200011d8:	fb02 f203 	mul.w	r2, r2, r3
200011dc:	f644 53d3 	movw	r3, #19923	; 0x4dd3
200011e0:	f2c1 0362 	movt	r3, #4194	; 0x1062
200011e4:	fba3 1302 	umull	r1, r3, r3, r2
200011e8:	ea4f 1293 	mov.w	r2, r3, lsr #6
200011ec:	f241 1385 	movw	r3, #4485	; 0x1185
200011f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011f4:	9300      	str	r3, [sp, #0]
200011f6:	f247 60cc 	movw	r0, #30412	; 0x76cc
200011fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200011fe:	4611      	mov	r1, r2
20001200:	f04f 0200 	mov.w	r2, #0
20001204:	f04f 0300 	mov.w	r3, #0
20001208:	f002 fa68 	bl	200036dc <xTimerCreate>
2000120c:	4602      	mov	r2, r0
2000120e:	f24e 232c 	movw	r3, #57900	; 0xe22c
20001212:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001216:	601a      	str	r2, [r3, #0]
		xTimerStart(cmd_timer[0], 0);
20001218:	f24e 232c 	movw	r3, #57900	; 0xe22c
2000121c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001220:	681c      	ldr	r4, [r3, #0]
20001222:	f001 fa49 	bl	200026b8 <xTaskGetTickCount>
20001226:	4603      	mov	r3, r0
20001228:	f04f 0200 	mov.w	r2, #0
2000122c:	9200      	str	r2, [sp, #0]
2000122e:	4620      	mov	r0, r4
20001230:	f04f 0101 	mov.w	r1, #1
20001234:	461a      	mov	r2, r3
20001236:	f04f 0300 	mov.w	r3, #0
2000123a:	f002 faa1 	bl	20003780 <xTimerGenericCommand>
2000123e:	e025      	b.n	2000128c <cmd_engine+0xfc>
	}
	else{
		 //Commands needs to be executed right now.
//		add_cmd(rx_cmd->ccsds_APID, cmd->length, cmd_list[rx_cmd->ccsds_APID].ex_func(rx_cmd->ccsds_APID, rx_cmd->parameters, cmd->length));
		cmd_list[rx_cmd->ccsds_APID - 1].ex_func(rx_cmd);
20001240:	687b      	ldr	r3, [r7, #4]
20001242:	789a      	ldrb	r2, [r3, #2]
20001244:	78db      	ldrb	r3, [r3, #3]
20001246:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000124a:	ea43 0302 	orr.w	r3, r3, r2
2000124e:	b29b      	uxth	r3, r3
20001250:	f103 31ff 	add.w	r1, r3, #4294967295
20001254:	f24e 2230 	movw	r2, #57904	; 0xe230
20001258:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000125c:	460b      	mov	r3, r1
2000125e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001262:	ebc1 0303 	rsb	r3, r1, r3
20001266:	4413      	add	r3, r2
20001268:	78da      	ldrb	r2, [r3, #3]
2000126a:	7919      	ldrb	r1, [r3, #4]
2000126c:	ea4f 2101 	mov.w	r1, r1, lsl #8
20001270:	ea41 0202 	orr.w	r2, r1, r2
20001274:	7959      	ldrb	r1, [r3, #5]
20001276:	ea4f 4101 	mov.w	r1, r1, lsl #16
2000127a:	ea41 0202 	orr.w	r2, r1, r2
2000127e:	799b      	ldrb	r3, [r3, #6]
20001280:	ea4f 6303 	mov.w	r3, r3, lsl #24
20001284:	ea43 0302 	orr.w	r3, r3, r2
20001288:	6878      	ldr	r0, [r7, #4]
2000128a:	4798      	blx	r3
	}

}
2000128c:	f107 070c 	add.w	r7, r7, #12
20001290:	46bd      	mov	sp, r7
20001292:	bd90      	pop	{r4, r7, pc}

20001294 <cmd_noop>:

// Commands Definition

void cmd_noop(rx_cmd_t* rcv_cmd){
20001294:	b480      	push	{r7}
20001296:	b085      	sub	sp, #20
20001298:	af00      	add	r7, sp, #0
2000129a:	6078      	str	r0, [r7, #4]

	uint8_t a;

}
2000129c:	f107 0714 	add.w	r7, r7, #20
200012a0:	46bd      	mov	sp, r7
200012a2:	bc80      	pop	{r7}
200012a4:	4770      	bx	lr
200012a6:	bf00      	nop

200012a8 <set_pkt_rate>:

void set_pkt_rate(rx_cmd_t* rcv_cmd){
200012a8:	b590      	push	{r4, r7, lr}
200012aa:	b085      	sub	sp, #20
200012ac:	af02      	add	r7, sp, #8
200012ae:	6078      	str	r0, [r7, #4]

	xTimerChangePeriod(pkt_timer[rcv_cmd->parameters[0]], xMsToTicks(rcv_cmd->parameters[1] * 1000), 0);
200012b0:	687b      	ldr	r3, [r7, #4]
200012b2:	799b      	ldrb	r3, [r3, #6]
200012b4:	461a      	mov	r2, r3
200012b6:	f64d 73f4 	movw	r3, #57332	; 0xdff4
200012ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012be:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
200012c2:	687b      	ldr	r3, [r7, #4]
200012c4:	79db      	ldrb	r3, [r3, #7]
200012c6:	461a      	mov	r2, r3
200012c8:	ea4f 1242 	mov.w	r2, r2, lsl #5
200012cc:	ebc3 0202 	rsb	r2, r3, r2
200012d0:	ea4f 0282 	mov.w	r2, r2, lsl #2
200012d4:	4413      	add	r3, r2
200012d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200012da:	b29b      	uxth	r3, r3
200012dc:	4618      	mov	r0, r3
200012de:	f7ff fe83 	bl	20000fe8 <xMsToTicks>
200012e2:	4603      	mov	r3, r0
200012e4:	f04f 0200 	mov.w	r2, #0
200012e8:	9200      	str	r2, [sp, #0]
200012ea:	4620      	mov	r0, r4
200012ec:	f04f 0104 	mov.w	r1, #4
200012f0:	461a      	mov	r2, r3
200012f2:	f04f 0300 	mov.w	r3, #0
200012f6:	f002 fa43 	bl	20003780 <xTimerGenericCommand>
//	if(pkt_rate->pkt_apid == HK_API_ID){
//		xTimerChangePeriod() Change the downlink rate of HK packet
//	}


}
200012fa:	f107 070c 	add.w	r7, r7, #12
200012fe:	46bd      	mov	sp, r7
20001300:	bd90      	pop	{r4, r7, pc}
20001302:	bf00      	nop

20001304 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20001304:	b480      	push	{r7}
20001306:	b083      	sub	sp, #12
20001308:	af00      	add	r7, sp, #0
2000130a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
2000130c:	687b      	ldr	r3, [r7, #4]
2000130e:	f103 0308 	add.w	r3, r3, #8
20001312:	461a      	mov	r2, r3
20001314:	687b      	ldr	r3, [r7, #4]
20001316:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20001318:	687b      	ldr	r3, [r7, #4]
2000131a:	f04f 32ff 	mov.w	r2, #4294967295
2000131e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001320:	687b      	ldr	r3, [r7, #4]
20001322:	f103 0308 	add.w	r3, r3, #8
20001326:	461a      	mov	r2, r3
20001328:	687b      	ldr	r3, [r7, #4]
2000132a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
2000132c:	687b      	ldr	r3, [r7, #4]
2000132e:	f103 0308 	add.w	r3, r3, #8
20001332:	461a      	mov	r2, r3
20001334:	687b      	ldr	r3, [r7, #4]
20001336:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20001338:	687b      	ldr	r3, [r7, #4]
2000133a:	f04f 0200 	mov.w	r2, #0
2000133e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20001340:	f107 070c 	add.w	r7, r7, #12
20001344:	46bd      	mov	sp, r7
20001346:	bc80      	pop	{r7}
20001348:	4770      	bx	lr
2000134a:	bf00      	nop

2000134c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
2000134c:	b480      	push	{r7}
2000134e:	b083      	sub	sp, #12
20001350:	af00      	add	r7, sp, #0
20001352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
20001354:	687b      	ldr	r3, [r7, #4]
20001356:	f04f 0200 	mov.w	r2, #0
2000135a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
2000135c:	f107 070c 	add.w	r7, r7, #12
20001360:	46bd      	mov	sp, r7
20001362:	bc80      	pop	{r7}
20001364:	4770      	bx	lr
20001366:	bf00      	nop

20001368 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001368:	b480      	push	{r7}
2000136a:	b085      	sub	sp, #20
2000136c:	af00      	add	r7, sp, #0
2000136e:	6078      	str	r0, [r7, #4]
20001370:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
20001372:	687b      	ldr	r3, [r7, #4]
20001374:	685b      	ldr	r3, [r3, #4]
20001376:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20001378:	683b      	ldr	r3, [r7, #0]
2000137a:	68fa      	ldr	r2, [r7, #12]
2000137c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
2000137e:	68fb      	ldr	r3, [r7, #12]
20001380:	689a      	ldr	r2, [r3, #8]
20001382:	683b      	ldr	r3, [r7, #0]
20001384:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20001386:	68fb      	ldr	r3, [r7, #12]
20001388:	689b      	ldr	r3, [r3, #8]
2000138a:	683a      	ldr	r2, [r7, #0]
2000138c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
2000138e:	68fb      	ldr	r3, [r7, #12]
20001390:	683a      	ldr	r2, [r7, #0]
20001392:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001394:	683b      	ldr	r3, [r7, #0]
20001396:	687a      	ldr	r2, [r7, #4]
20001398:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000139a:	687b      	ldr	r3, [r7, #4]
2000139c:	681b      	ldr	r3, [r3, #0]
2000139e:	f103 0201 	add.w	r2, r3, #1
200013a2:	687b      	ldr	r3, [r7, #4]
200013a4:	601a      	str	r2, [r3, #0]
}
200013a6:	f107 0714 	add.w	r7, r7, #20
200013aa:	46bd      	mov	sp, r7
200013ac:	bc80      	pop	{r7}
200013ae:	4770      	bx	lr

200013b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
200013b0:	b480      	push	{r7}
200013b2:	b085      	sub	sp, #20
200013b4:	af00      	add	r7, sp, #0
200013b6:	6078      	str	r0, [r7, #4]
200013b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
200013ba:	683b      	ldr	r3, [r7, #0]
200013bc:	681b      	ldr	r3, [r3, #0]
200013be:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
200013c0:	68fb      	ldr	r3, [r7, #12]
200013c2:	f1b3 3fff 	cmp.w	r3, #4294967295
200013c6:	d103      	bne.n	200013d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
200013c8:	687b      	ldr	r3, [r7, #4]
200013ca:	691b      	ldr	r3, [r3, #16]
200013cc:	60bb      	str	r3, [r7, #8]
200013ce:	e00d      	b.n	200013ec <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	f103 0308 	add.w	r3, r3, #8
200013d6:	60bb      	str	r3, [r7, #8]
200013d8:	e002      	b.n	200013e0 <vListInsert+0x30>
200013da:	68bb      	ldr	r3, [r7, #8]
200013dc:	685b      	ldr	r3, [r3, #4]
200013de:	60bb      	str	r3, [r7, #8]
200013e0:	68bb      	ldr	r3, [r7, #8]
200013e2:	685b      	ldr	r3, [r3, #4]
200013e4:	681a      	ldr	r2, [r3, #0]
200013e6:	68fb      	ldr	r3, [r7, #12]
200013e8:	429a      	cmp	r2, r3
200013ea:	d9f6      	bls.n	200013da <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
200013ec:	68bb      	ldr	r3, [r7, #8]
200013ee:	685a      	ldr	r2, [r3, #4]
200013f0:	683b      	ldr	r3, [r7, #0]
200013f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
200013f4:	683b      	ldr	r3, [r7, #0]
200013f6:	685b      	ldr	r3, [r3, #4]
200013f8:	683a      	ldr	r2, [r7, #0]
200013fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
200013fc:	683b      	ldr	r3, [r7, #0]
200013fe:	68ba      	ldr	r2, [r7, #8]
20001400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20001402:	68bb      	ldr	r3, [r7, #8]
20001404:	683a      	ldr	r2, [r7, #0]
20001406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001408:	683b      	ldr	r3, [r7, #0]
2000140a:	687a      	ldr	r2, [r7, #4]
2000140c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000140e:	687b      	ldr	r3, [r7, #4]
20001410:	681b      	ldr	r3, [r3, #0]
20001412:	f103 0201 	add.w	r2, r3, #1
20001416:	687b      	ldr	r3, [r7, #4]
20001418:	601a      	str	r2, [r3, #0]
}
2000141a:	f107 0714 	add.w	r7, r7, #20
2000141e:	46bd      	mov	sp, r7
20001420:	bc80      	pop	{r7}
20001422:	4770      	bx	lr

20001424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
20001424:	b480      	push	{r7}
20001426:	b085      	sub	sp, #20
20001428:	af00      	add	r7, sp, #0
2000142a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
2000142c:	687b      	ldr	r3, [r7, #4]
2000142e:	691b      	ldr	r3, [r3, #16]
20001430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
20001432:	687b      	ldr	r3, [r7, #4]
20001434:	685b      	ldr	r3, [r3, #4]
20001436:	687a      	ldr	r2, [r7, #4]
20001438:	6892      	ldr	r2, [r2, #8]
2000143a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
2000143c:	687b      	ldr	r3, [r7, #4]
2000143e:	689b      	ldr	r3, [r3, #8]
20001440:	687a      	ldr	r2, [r7, #4]
20001442:	6852      	ldr	r2, [r2, #4]
20001444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
20001446:	68fb      	ldr	r3, [r7, #12]
20001448:	685a      	ldr	r2, [r3, #4]
2000144a:	687b      	ldr	r3, [r7, #4]
2000144c:	429a      	cmp	r2, r3
2000144e:	d103      	bne.n	20001458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
20001450:	687b      	ldr	r3, [r7, #4]
20001452:	689a      	ldr	r2, [r3, #8]
20001454:	68fb      	ldr	r3, [r7, #12]
20001456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
20001458:	687b      	ldr	r3, [r7, #4]
2000145a:	f04f 0200 	mov.w	r2, #0
2000145e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
20001460:	68fb      	ldr	r3, [r7, #12]
20001462:	681b      	ldr	r3, [r3, #0]
20001464:	f103 32ff 	add.w	r2, r3, #4294967295
20001468:	68fb      	ldr	r3, [r7, #12]
2000146a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
2000146c:	68fb      	ldr	r3, [r7, #12]
2000146e:	681b      	ldr	r3, [r3, #0]
}
20001470:	4618      	mov	r0, r3
20001472:	f107 0714 	add.w	r7, r7, #20
20001476:	46bd      	mov	sp, r7
20001478:	bc80      	pop	{r7}
2000147a:	4770      	bx	lr

2000147c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
2000147c:	b580      	push	{r7, lr}
2000147e:	b084      	sub	sp, #16
20001480:	af00      	add	r7, sp, #0
20001482:	6078      	str	r0, [r7, #4]
20001484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001486:	687b      	ldr	r3, [r7, #4]
20001488:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
2000148a:	68bb      	ldr	r3, [r7, #8]
2000148c:	2b00      	cmp	r3, #0
2000148e:	d109      	bne.n	200014a4 <xQueueGenericReset+0x28>
20001490:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001494:	f383 8811 	msr	BASEPRI, r3
20001498:	f3bf 8f6f 	isb	sy
2000149c:	f3bf 8f4f 	dsb	sy
200014a0:	60fb      	str	r3, [r7, #12]
200014a2:	e7fe      	b.n	200014a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
200014a4:	f003 f822 	bl	200044ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
200014a8:	68bb      	ldr	r3, [r7, #8]
200014aa:	681a      	ldr	r2, [r3, #0]
200014ac:	68bb      	ldr	r3, [r7, #8]
200014ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200014b0:	68b9      	ldr	r1, [r7, #8]
200014b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
200014b4:	fb01 f303 	mul.w	r3, r1, r3
200014b8:	441a      	add	r2, r3
200014ba:	68bb      	ldr	r3, [r7, #8]
200014bc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
200014be:	68bb      	ldr	r3, [r7, #8]
200014c0:	f04f 0200 	mov.w	r2, #0
200014c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
200014c6:	68bb      	ldr	r3, [r7, #8]
200014c8:	681a      	ldr	r2, [r3, #0]
200014ca:	68bb      	ldr	r3, [r7, #8]
200014cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
200014ce:	68bb      	ldr	r3, [r7, #8]
200014d0:	681a      	ldr	r2, [r3, #0]
200014d2:	68bb      	ldr	r3, [r7, #8]
200014d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200014d6:	f103 33ff 	add.w	r3, r3, #4294967295
200014da:	68b9      	ldr	r1, [r7, #8]
200014dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
200014de:	fb01 f303 	mul.w	r3, r1, r3
200014e2:	441a      	add	r2, r3
200014e4:	68bb      	ldr	r3, [r7, #8]
200014e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
200014e8:	68bb      	ldr	r3, [r7, #8]
200014ea:	f04f 32ff 	mov.w	r2, #4294967295
200014ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
200014f2:	68bb      	ldr	r3, [r7, #8]
200014f4:	f04f 32ff 	mov.w	r2, #4294967295
200014f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
200014fc:	683b      	ldr	r3, [r7, #0]
200014fe:	2b00      	cmp	r3, #0
20001500:	d118      	bne.n	20001534 <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001502:	68bb      	ldr	r3, [r7, #8]
20001504:	691b      	ldr	r3, [r3, #16]
20001506:	2b00      	cmp	r3, #0
20001508:	d021      	beq.n	2000154e <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000150a:	68bb      	ldr	r3, [r7, #8]
2000150c:	f103 0310 	add.w	r3, r3, #16
20001510:	4618      	mov	r0, r3
20001512:	f001 fb0f 	bl	20002b34 <xTaskRemoveFromEventList>
20001516:	4603      	mov	r3, r0
20001518:	2b00      	cmp	r3, #0
2000151a:	d01a      	beq.n	20001552 <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
2000151c:	f64e 5304 	movw	r3, #60676	; 0xed04
20001520:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001528:	601a      	str	r2, [r3, #0]
2000152a:	f3bf 8f4f 	dsb	sy
2000152e:	f3bf 8f6f 	isb	sy
20001532:	e00f      	b.n	20001554 <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
20001534:	68bb      	ldr	r3, [r7, #8]
20001536:	f103 0310 	add.w	r3, r3, #16
2000153a:	4618      	mov	r0, r3
2000153c:	f7ff fee2 	bl	20001304 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
20001540:	68bb      	ldr	r3, [r7, #8]
20001542:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001546:	4618      	mov	r0, r3
20001548:	f7ff fedc 	bl	20001304 <vListInitialise>
2000154c:	e002      	b.n	20001554 <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
2000154e:	bf00      	nop
20001550:	e000      	b.n	20001554 <xQueueGenericReset+0xd8>
20001552:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
20001554:	f003 f802 	bl	2000455c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
20001558:	f04f 0301 	mov.w	r3, #1
}
2000155c:	4618      	mov	r0, r3
2000155e:	f107 0710 	add.w	r7, r7, #16
20001562:	46bd      	mov	sp, r7
20001564:	bd80      	pop	{r7, pc}
20001566:	bf00      	nop

20001568 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
20001568:	b580      	push	{r7, lr}
2000156a:	b08a      	sub	sp, #40	; 0x28
2000156c:	af02      	add	r7, sp, #8
2000156e:	60f8      	str	r0, [r7, #12]
20001570:	60b9      	str	r1, [r7, #8]
20001572:	4613      	mov	r3, r2
20001574:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
20001576:	68fb      	ldr	r3, [r7, #12]
20001578:	2b00      	cmp	r3, #0
2000157a:	d109      	bne.n	20001590 <xQueueGenericCreate+0x28>
2000157c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001580:	f383 8811 	msr	BASEPRI, r3
20001584:	f3bf 8f6f 	isb	sy
20001588:	f3bf 8f4f 	dsb	sy
2000158c:	61fb      	str	r3, [r7, #28]
2000158e:	e7fe      	b.n	2000158e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
20001590:	68bb      	ldr	r3, [r7, #8]
20001592:	2b00      	cmp	r3, #0
20001594:	d103      	bne.n	2000159e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
20001596:	f04f 0300 	mov.w	r3, #0
2000159a:	617b      	str	r3, [r7, #20]
2000159c:	e004      	b.n	200015a8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000159e:	68fb      	ldr	r3, [r7, #12]
200015a0:	68ba      	ldr	r2, [r7, #8]
200015a2:	fb02 f303 	mul.w	r3, r2, r3
200015a6:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
200015a8:	697b      	ldr	r3, [r7, #20]
200015aa:	f103 0350 	add.w	r3, r3, #80	; 0x50
200015ae:	4618      	mov	r0, r3
200015b0:	f002 fc4e 	bl	20003e50 <pvPortMalloc>
200015b4:	4603      	mov	r3, r0
200015b6:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
200015b8:	693b      	ldr	r3, [r7, #16]
200015ba:	2b00      	cmp	r3, #0
200015bc:	d00b      	beq.n	200015d6 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
200015be:	693b      	ldr	r3, [r7, #16]
200015c0:	f103 0350 	add.w	r3, r3, #80	; 0x50
200015c4:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
200015c6:	79fb      	ldrb	r3, [r7, #7]
200015c8:	693a      	ldr	r2, [r7, #16]
200015ca:	9200      	str	r2, [sp, #0]
200015cc:	68f8      	ldr	r0, [r7, #12]
200015ce:	68b9      	ldr	r1, [r7, #8]
200015d0:	69ba      	ldr	r2, [r7, #24]
200015d2:	f000 f807 	bl	200015e4 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
200015d6:	693b      	ldr	r3, [r7, #16]
	}
200015d8:	4618      	mov	r0, r3
200015da:	f107 0720 	add.w	r7, r7, #32
200015de:	46bd      	mov	sp, r7
200015e0:	bd80      	pop	{r7, pc}
200015e2:	bf00      	nop

200015e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
200015e4:	b580      	push	{r7, lr}
200015e6:	b084      	sub	sp, #16
200015e8:	af00      	add	r7, sp, #0
200015ea:	60f8      	str	r0, [r7, #12]
200015ec:	60b9      	str	r1, [r7, #8]
200015ee:	607a      	str	r2, [r7, #4]
200015f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
200015f2:	68bb      	ldr	r3, [r7, #8]
200015f4:	2b00      	cmp	r3, #0
200015f6:	d103      	bne.n	20001600 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
200015f8:	69ba      	ldr	r2, [r7, #24]
200015fa:	69bb      	ldr	r3, [r7, #24]
200015fc:	601a      	str	r2, [r3, #0]
200015fe:	e002      	b.n	20001606 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001600:	687a      	ldr	r2, [r7, #4]
20001602:	69bb      	ldr	r3, [r7, #24]
20001604:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
20001606:	69bb      	ldr	r3, [r7, #24]
20001608:	68fa      	ldr	r2, [r7, #12]
2000160a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
2000160c:	69bb      	ldr	r3, [r7, #24]
2000160e:	68ba      	ldr	r2, [r7, #8]
20001610:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
20001612:	69b8      	ldr	r0, [r7, #24]
20001614:	f04f 0101 	mov.w	r1, #1
20001618:	f7ff ff30 	bl	2000147c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
2000161c:	69bb      	ldr	r3, [r7, #24]
2000161e:	78fa      	ldrb	r2, [r7, #3]
20001620:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
20001624:	f107 0710 	add.w	r7, r7, #16
20001628:	46bd      	mov	sp, r7
2000162a:	bd80      	pop	{r7, pc}

2000162c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
2000162c:	b580      	push	{r7, lr}
2000162e:	b082      	sub	sp, #8
20001630:	af00      	add	r7, sp, #0
20001632:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
20001634:	687b      	ldr	r3, [r7, #4]
20001636:	2b00      	cmp	r3, #0
20001638:	d014      	beq.n	20001664 <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
2000163a:	687b      	ldr	r3, [r7, #4]
2000163c:	f04f 0200 	mov.w	r2, #0
20001640:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
20001642:	687b      	ldr	r3, [r7, #4]
20001644:	f04f 0200 	mov.w	r2, #0
20001648:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
2000164a:	687b      	ldr	r3, [r7, #4]
2000164c:	f04f 0200 	mov.w	r2, #0
20001650:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
20001652:	6878      	ldr	r0, [r7, #4]
20001654:	f04f 0100 	mov.w	r1, #0
20001658:	f04f 0200 	mov.w	r2, #0
2000165c:	f04f 0300 	mov.w	r3, #0
20001660:	f000 f820 	bl	200016a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
20001664:	f107 0708 	add.w	r7, r7, #8
20001668:	46bd      	mov	sp, r7
2000166a:	bd80      	pop	{r7, pc}

2000166c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
2000166c:	b580      	push	{r7, lr}
2000166e:	b086      	sub	sp, #24
20001670:	af00      	add	r7, sp, #0
20001672:	4603      	mov	r3, r0
20001674:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
20001676:	f04f 0301 	mov.w	r3, #1
2000167a:	613b      	str	r3, [r7, #16]
2000167c:	f04f 0300 	mov.w	r3, #0
20001680:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
20001682:	79fb      	ldrb	r3, [r7, #7]
20001684:	6938      	ldr	r0, [r7, #16]
20001686:	6979      	ldr	r1, [r7, #20]
20001688:	461a      	mov	r2, r3
2000168a:	f7ff ff6d 	bl	20001568 <xQueueGenericCreate>
2000168e:	4603      	mov	r3, r0
20001690:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
20001692:	68f8      	ldr	r0, [r7, #12]
20001694:	f7ff ffca 	bl	2000162c <prvInitialiseMutex>

		return pxNewQueue;
20001698:	68fb      	ldr	r3, [r7, #12]
	}
2000169a:	4618      	mov	r0, r3
2000169c:	f107 0718 	add.w	r7, r7, #24
200016a0:	46bd      	mov	sp, r7
200016a2:	bd80      	pop	{r7, pc}

200016a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
200016a4:	b580      	push	{r7, lr}
200016a6:	b08e      	sub	sp, #56	; 0x38
200016a8:	af00      	add	r7, sp, #0
200016aa:	60f8      	str	r0, [r7, #12]
200016ac:	60b9      	str	r1, [r7, #8]
200016ae:	607a      	str	r2, [r7, #4]
200016b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
200016b2:	f04f 0300 	mov.w	r3, #0
200016b6:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200016b8:	68fb      	ldr	r3, [r7, #12]
200016ba:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
200016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016be:	2b00      	cmp	r3, #0
200016c0:	d109      	bne.n	200016d6 <xQueueGenericSend+0x32>
200016c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200016c6:	f383 8811 	msr	BASEPRI, r3
200016ca:	f3bf 8f6f 	isb	sy
200016ce:	f3bf 8f4f 	dsb	sy
200016d2:	62bb      	str	r3, [r7, #40]	; 0x28
200016d4:	e7fe      	b.n	200016d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
200016d6:	68bb      	ldr	r3, [r7, #8]
200016d8:	2b00      	cmp	r3, #0
200016da:	d103      	bne.n	200016e4 <xQueueGenericSend+0x40>
200016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200016e0:	2b00      	cmp	r3, #0
200016e2:	d102      	bne.n	200016ea <xQueueGenericSend+0x46>
200016e4:	f04f 0301 	mov.w	r3, #1
200016e8:	e001      	b.n	200016ee <xQueueGenericSend+0x4a>
200016ea:	f04f 0300 	mov.w	r3, #0
200016ee:	2b00      	cmp	r3, #0
200016f0:	d109      	bne.n	20001706 <xQueueGenericSend+0x62>
200016f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200016f6:	f383 8811 	msr	BASEPRI, r3
200016fa:	f3bf 8f6f 	isb	sy
200016fe:	f3bf 8f4f 	dsb	sy
20001702:	62fb      	str	r3, [r7, #44]	; 0x2c
20001704:	e7fe      	b.n	20001704 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001706:	683b      	ldr	r3, [r7, #0]
20001708:	2b02      	cmp	r3, #2
2000170a:	d103      	bne.n	20001714 <xQueueGenericSend+0x70>
2000170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001710:	2b01      	cmp	r3, #1
20001712:	d102      	bne.n	2000171a <xQueueGenericSend+0x76>
20001714:	f04f 0301 	mov.w	r3, #1
20001718:	e001      	b.n	2000171e <xQueueGenericSend+0x7a>
2000171a:	f04f 0300 	mov.w	r3, #0
2000171e:	2b00      	cmp	r3, #0
20001720:	d109      	bne.n	20001736 <xQueueGenericSend+0x92>
20001722:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001726:	f383 8811 	msr	BASEPRI, r3
2000172a:	f3bf 8f6f 	isb	sy
2000172e:	f3bf 8f4f 	dsb	sy
20001732:	633b      	str	r3, [r7, #48]	; 0x30
20001734:	e7fe      	b.n	20001734 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001736:	f001 fc05 	bl	20002f44 <xTaskGetSchedulerState>
2000173a:	4603      	mov	r3, r0
2000173c:	2b00      	cmp	r3, #0
2000173e:	d102      	bne.n	20001746 <xQueueGenericSend+0xa2>
20001740:	687b      	ldr	r3, [r7, #4]
20001742:	2b00      	cmp	r3, #0
20001744:	d102      	bne.n	2000174c <xQueueGenericSend+0xa8>
20001746:	f04f 0301 	mov.w	r3, #1
2000174a:	e001      	b.n	20001750 <xQueueGenericSend+0xac>
2000174c:	f04f 0300 	mov.w	r3, #0
20001750:	2b00      	cmp	r3, #0
20001752:	d10a      	bne.n	2000176a <xQueueGenericSend+0xc6>
20001754:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001758:	f383 8811 	msr	BASEPRI, r3
2000175c:	f3bf 8f6f 	isb	sy
20001760:	f3bf 8f4f 	dsb	sy
20001764:	637b      	str	r3, [r7, #52]	; 0x34
20001766:	e7fe      	b.n	20001766 <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
20001768:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
2000176a:	f002 febf 	bl	200044ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
2000176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001776:	429a      	cmp	r2, r3
20001778:	d302      	bcc.n	20001780 <xQueueGenericSend+0xdc>
2000177a:	683b      	ldr	r3, [r7, #0]
2000177c:	2b02      	cmp	r3, #2
2000177e:	d134      	bne.n	200017ea <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001780:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001782:	68b9      	ldr	r1, [r7, #8]
20001784:	683a      	ldr	r2, [r7, #0]
20001786:	f000 fa7b 	bl	20001c80 <prvCopyDataToQueue>
2000178a:	4603      	mov	r3, r0
2000178c:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001792:	2b00      	cmp	r3, #0
20001794:	d014      	beq.n	200017c0 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001798:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000179c:	4618      	mov	r0, r3
2000179e:	f001 f9c9 	bl	20002b34 <xTaskRemoveFromEventList>
200017a2:	4603      	mov	r3, r0
200017a4:	2b00      	cmp	r3, #0
200017a6:	d01a      	beq.n	200017de <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
200017a8:	f64e 5304 	movw	r3, #60676	; 0xed04
200017ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017b4:	601a      	str	r2, [r3, #0]
200017b6:	f3bf 8f4f 	dsb	sy
200017ba:	f3bf 8f6f 	isb	sy
200017be:	e00f      	b.n	200017e0 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
200017c0:	6a3b      	ldr	r3, [r7, #32]
200017c2:	2b00      	cmp	r3, #0
200017c4:	d00c      	beq.n	200017e0 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
200017c6:	f64e 5304 	movw	r3, #60676	; 0xed04
200017ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017d2:	601a      	str	r2, [r3, #0]
200017d4:	f3bf 8f4f 	dsb	sy
200017d8:	f3bf 8f6f 	isb	sy
200017dc:	e000      	b.n	200017e0 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
200017de:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
200017e0:	f002 febc 	bl	2000455c <vPortExitCritical>
				return pdPASS;
200017e4:	f04f 0301 	mov.w	r3, #1
200017e8:	e06f      	b.n	200018ca <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
200017ea:	687b      	ldr	r3, [r7, #4]
200017ec:	2b00      	cmp	r3, #0
200017ee:	d104      	bne.n	200017fa <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
200017f0:	f002 feb4 	bl	2000455c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
200017f4:	f04f 0300 	mov.w	r3, #0
200017f8:	e067      	b.n	200018ca <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
200017fa:	69fb      	ldr	r3, [r7, #28]
200017fc:	2b00      	cmp	r3, #0
200017fe:	d107      	bne.n	20001810 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001800:	f107 0314 	add.w	r3, r7, #20
20001804:	4618      	mov	r0, r3
20001806:	f001 fa0d 	bl	20002c24 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000180a:	f04f 0301 	mov.w	r3, #1
2000180e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001810:	f002 fea4 	bl	2000455c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001814:	f000 fe6e 	bl	200024f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001818:	f002 fe68 	bl	200044ec <vPortEnterCritical>
2000181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000181e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001822:	b2db      	uxtb	r3, r3
20001824:	b25b      	sxtb	r3, r3
20001826:	f1b3 3fff 	cmp.w	r3, #4294967295
2000182a:	d104      	bne.n	20001836 <xQueueGenericSend+0x192>
2000182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000182e:	f04f 0200 	mov.w	r2, #0
20001832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
2000183c:	b2db      	uxtb	r3, r3
2000183e:	b25b      	sxtb	r3, r3
20001840:	f1b3 3fff 	cmp.w	r3, #4294967295
20001844:	d104      	bne.n	20001850 <xQueueGenericSend+0x1ac>
20001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001848:	f04f 0200 	mov.w	r2, #0
2000184c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001850:	f002 fe84 	bl	2000455c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001854:	f107 0214 	add.w	r2, r7, #20
20001858:	f107 0304 	add.w	r3, r7, #4
2000185c:	4610      	mov	r0, r2
2000185e:	4619      	mov	r1, r3
20001860:	f001 fa04 	bl	20002c6c <xTaskCheckForTimeOut>
20001864:	4603      	mov	r3, r0
20001866:	2b00      	cmp	r3, #0
20001868:	d128      	bne.n	200018bc <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2000186a:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000186c:	f000 fb18 	bl	20001ea0 <prvIsQueueFull>
20001870:	4603      	mov	r3, r0
20001872:	2b00      	cmp	r3, #0
20001874:	d01c      	beq.n	200018b0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
20001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001878:	f103 0210 	add.w	r2, r3, #16
2000187c:	687b      	ldr	r3, [r7, #4]
2000187e:	4610      	mov	r0, r2
20001880:	4619      	mov	r1, r3
20001882:	f001 f905 	bl	20002a90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
20001886:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001888:	f000 fa9a 	bl	20001dc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
2000188c:	f000 fe44 	bl	20002518 <xTaskResumeAll>
20001890:	4603      	mov	r3, r0
20001892:	2b00      	cmp	r3, #0
20001894:	f47f af68 	bne.w	20001768 <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
20001898:	f64e 5304 	movw	r3, #60676	; 0xed04
2000189c:	f2ce 0300 	movt	r3, #57344	; 0xe000
200018a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200018a4:	601a      	str	r2, [r3, #0]
200018a6:	f3bf 8f4f 	dsb	sy
200018aa:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200018ae:	e75c      	b.n	2000176a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
200018b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018b2:	f000 fa85 	bl	20001dc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
200018b6:	f000 fe2f 	bl	20002518 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200018ba:	e756      	b.n	2000176a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
200018bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018be:	f000 fa7f 	bl	20001dc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
200018c2:	f000 fe29 	bl	20002518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
200018c6:	f04f 0300 	mov.w	r3, #0
		}
	}
}
200018ca:	4618      	mov	r0, r3
200018cc:	f107 0738 	add.w	r7, r7, #56	; 0x38
200018d0:	46bd      	mov	sp, r7
200018d2:	bd80      	pop	{r7, pc}

200018d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
200018d4:	b580      	push	{r7, lr}
200018d6:	b08e      	sub	sp, #56	; 0x38
200018d8:	af00      	add	r7, sp, #0
200018da:	60f8      	str	r0, [r7, #12]
200018dc:	60b9      	str	r1, [r7, #8]
200018de:	607a      	str	r2, [r7, #4]
200018e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200018e2:	68fb      	ldr	r3, [r7, #12]
200018e4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
200018e6:	69bb      	ldr	r3, [r7, #24]
200018e8:	2b00      	cmp	r3, #0
200018ea:	d109      	bne.n	20001900 <xQueueGenericSendFromISR+0x2c>
200018ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200018f0:	f383 8811 	msr	BASEPRI, r3
200018f4:	f3bf 8f6f 	isb	sy
200018f8:	f3bf 8f4f 	dsb	sy
200018fc:	623b      	str	r3, [r7, #32]
200018fe:	e7fe      	b.n	200018fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001900:	68bb      	ldr	r3, [r7, #8]
20001902:	2b00      	cmp	r3, #0
20001904:	d103      	bne.n	2000190e <xQueueGenericSendFromISR+0x3a>
20001906:	69bb      	ldr	r3, [r7, #24]
20001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000190a:	2b00      	cmp	r3, #0
2000190c:	d102      	bne.n	20001914 <xQueueGenericSendFromISR+0x40>
2000190e:	f04f 0301 	mov.w	r3, #1
20001912:	e001      	b.n	20001918 <xQueueGenericSendFromISR+0x44>
20001914:	f04f 0300 	mov.w	r3, #0
20001918:	2b00      	cmp	r3, #0
2000191a:	d109      	bne.n	20001930 <xQueueGenericSendFromISR+0x5c>
2000191c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001920:	f383 8811 	msr	BASEPRI, r3
20001924:	f3bf 8f6f 	isb	sy
20001928:	f3bf 8f4f 	dsb	sy
2000192c:	627b      	str	r3, [r7, #36]	; 0x24
2000192e:	e7fe      	b.n	2000192e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001930:	683b      	ldr	r3, [r7, #0]
20001932:	2b02      	cmp	r3, #2
20001934:	d103      	bne.n	2000193e <xQueueGenericSendFromISR+0x6a>
20001936:	69bb      	ldr	r3, [r7, #24]
20001938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000193a:	2b01      	cmp	r3, #1
2000193c:	d102      	bne.n	20001944 <xQueueGenericSendFromISR+0x70>
2000193e:	f04f 0301 	mov.w	r3, #1
20001942:	e001      	b.n	20001948 <xQueueGenericSendFromISR+0x74>
20001944:	f04f 0300 	mov.w	r3, #0
20001948:	2b00      	cmp	r3, #0
2000194a:	d109      	bne.n	20001960 <xQueueGenericSendFromISR+0x8c>
2000194c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001950:	f383 8811 	msr	BASEPRI, r3
20001954:	f3bf 8f6f 	isb	sy
20001958:	f3bf 8f4f 	dsb	sy
2000195c:	62bb      	str	r3, [r7, #40]	; 0x28
2000195e:	e7fe      	b.n	2000195e <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001960:	f002 fe98 	bl	20004694 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20001964:	f3ef 8211 	mrs	r2, BASEPRI
20001968:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000196c:	f383 8811 	msr	BASEPRI, r3
20001970:	f3bf 8f6f 	isb	sy
20001974:	f3bf 8f4f 	dsb	sy
20001978:	633a      	str	r2, [r7, #48]	; 0x30
2000197a:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
2000197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2000197e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001980:	69bb      	ldr	r3, [r7, #24]
20001982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001984:	69bb      	ldr	r3, [r7, #24]
20001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001988:	429a      	cmp	r2, r3
2000198a:	d302      	bcc.n	20001992 <xQueueGenericSendFromISR+0xbe>
2000198c:	683b      	ldr	r3, [r7, #0]
2000198e:	2b02      	cmp	r3, #2
20001990:	d134      	bne.n	200019fc <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001992:	69bb      	ldr	r3, [r7, #24]
20001994:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001998:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
2000199a:	69b8      	ldr	r0, [r7, #24]
2000199c:	68b9      	ldr	r1, [r7, #8]
2000199e:	683a      	ldr	r2, [r7, #0]
200019a0:	f000 f96e 	bl	20001c80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
200019a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
200019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
200019ac:	d114      	bne.n	200019d8 <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
200019ae:	69bb      	ldr	r3, [r7, #24]
200019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200019b2:	2b00      	cmp	r3, #0
200019b4:	d019      	beq.n	200019ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
200019b6:	69bb      	ldr	r3, [r7, #24]
200019b8:	f103 0324 	add.w	r3, r3, #36	; 0x24
200019bc:	4618      	mov	r0, r3
200019be:	f001 f8b9 	bl	20002b34 <xTaskRemoveFromEventList>
200019c2:	4603      	mov	r3, r0
200019c4:	2b00      	cmp	r3, #0
200019c6:	d012      	beq.n	200019ee <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
200019c8:	687b      	ldr	r3, [r7, #4]
200019ca:	2b00      	cmp	r3, #0
200019cc:	d011      	beq.n	200019f2 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
200019ce:	687b      	ldr	r3, [r7, #4]
200019d0:	f04f 0201 	mov.w	r2, #1
200019d4:	601a      	str	r2, [r3, #0]
200019d6:	e00d      	b.n	200019f4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
200019d8:	7ffb      	ldrb	r3, [r7, #31]
200019da:	f103 0301 	add.w	r3, r3, #1
200019de:	b2db      	uxtb	r3, r3
200019e0:	461a      	mov	r2, r3
200019e2:	69bb      	ldr	r3, [r7, #24]
200019e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200019e8:	e004      	b.n	200019f4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
200019ea:	bf00      	nop
200019ec:	e002      	b.n	200019f4 <xQueueGenericSendFromISR+0x120>
200019ee:	bf00      	nop
200019f0:	e000      	b.n	200019f4 <xQueueGenericSendFromISR+0x120>
200019f2:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
200019f4:	f04f 0301 	mov.w	r3, #1
200019f8:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200019fa:	e002      	b.n	20001a02 <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
200019fc:	f04f 0300 	mov.w	r3, #0
20001a00:	613b      	str	r3, [r7, #16]
20001a02:	697b      	ldr	r3, [r7, #20]
20001a04:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001a08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001a0c:	693b      	ldr	r3, [r7, #16]
}
20001a0e:	4618      	mov	r0, r3
20001a10:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001a14:	46bd      	mov	sp, r7
20001a16:	bd80      	pop	{r7, pc}

20001a18 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
20001a18:	b580      	push	{r7, lr}
20001a1a:	b08e      	sub	sp, #56	; 0x38
20001a1c:	af00      	add	r7, sp, #0
20001a1e:	60f8      	str	r0, [r7, #12]
20001a20:	60b9      	str	r1, [r7, #8]
20001a22:	607a      	str	r2, [r7, #4]
20001a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
20001a26:	f04f 0300 	mov.w	r3, #0
20001a2a:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001a2c:	68fb      	ldr	r3, [r7, #12]
20001a2e:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
20001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a32:	2b00      	cmp	r3, #0
20001a34:	d109      	bne.n	20001a4a <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20001a36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a3a:	f383 8811 	msr	BASEPRI, r3
20001a3e:	f3bf 8f6f 	isb	sy
20001a42:	f3bf 8f4f 	dsb	sy
20001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
20001a48:	e7fe      	b.n	20001a48 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001a4a:	68bb      	ldr	r3, [r7, #8]
20001a4c:	2b00      	cmp	r3, #0
20001a4e:	d103      	bne.n	20001a58 <xQueueGenericReceive+0x40>
20001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a54:	2b00      	cmp	r3, #0
20001a56:	d102      	bne.n	20001a5e <xQueueGenericReceive+0x46>
20001a58:	f04f 0301 	mov.w	r3, #1
20001a5c:	e001      	b.n	20001a62 <xQueueGenericReceive+0x4a>
20001a5e:	f04f 0300 	mov.w	r3, #0
20001a62:	2b00      	cmp	r3, #0
20001a64:	d109      	bne.n	20001a7a <xQueueGenericReceive+0x62>
20001a66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a6a:	f383 8811 	msr	BASEPRI, r3
20001a6e:	f3bf 8f6f 	isb	sy
20001a72:	f3bf 8f4f 	dsb	sy
20001a76:	633b      	str	r3, [r7, #48]	; 0x30
20001a78:	e7fe      	b.n	20001a78 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001a7a:	f001 fa63 	bl	20002f44 <xTaskGetSchedulerState>
20001a7e:	4603      	mov	r3, r0
20001a80:	2b00      	cmp	r3, #0
20001a82:	d102      	bne.n	20001a8a <xQueueGenericReceive+0x72>
20001a84:	687b      	ldr	r3, [r7, #4]
20001a86:	2b00      	cmp	r3, #0
20001a88:	d102      	bne.n	20001a90 <xQueueGenericReceive+0x78>
20001a8a:	f04f 0301 	mov.w	r3, #1
20001a8e:	e001      	b.n	20001a94 <xQueueGenericReceive+0x7c>
20001a90:	f04f 0300 	mov.w	r3, #0
20001a94:	2b00      	cmp	r3, #0
20001a96:	d10c      	bne.n	20001ab2 <xQueueGenericReceive+0x9a>
20001a98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a9c:	f383 8811 	msr	BASEPRI, r3
20001aa0:	f3bf 8f6f 	isb	sy
20001aa4:	f3bf 8f4f 	dsb	sy
20001aa8:	637b      	str	r3, [r7, #52]	; 0x34
20001aaa:	e7fe      	b.n	20001aaa <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001aac:	bf00      	nop
20001aae:	e000      	b.n	20001ab2 <xQueueGenericReceive+0x9a>
20001ab0:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
20001ab2:	f002 fd1b 	bl	200044ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001aba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001abe:	2b00      	cmp	r3, #0
20001ac0:	d055      	beq.n	20001b6e <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
20001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ac4:	68db      	ldr	r3, [r3, #12]
20001ac6:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001aca:	68b9      	ldr	r1, [r7, #8]
20001acc:	f000 f950 	bl	20001d70 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
20001ad0:	683b      	ldr	r3, [r7, #0]
20001ad2:	2b00      	cmp	r3, #0
20001ad4:	d127      	bne.n	20001b26 <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
20001ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001ad8:	f103 32ff 	add.w	r2, r3, #4294967295
20001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ade:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ae2:	681b      	ldr	r3, [r3, #0]
20001ae4:	2b00      	cmp	r3, #0
20001ae6:	d105      	bne.n	20001af4 <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
20001ae8:	f001 fb9c 	bl	20003224 <pvTaskIncrementMutexHeldCount>
20001aec:	4603      	mov	r3, r0
20001aee:	461a      	mov	r2, r3
20001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001af2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001af6:	691b      	ldr	r3, [r3, #16]
20001af8:	2b00      	cmp	r3, #0
20001afa:	d030      	beq.n	20001b5e <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001afe:	f103 0310 	add.w	r3, r3, #16
20001b02:	4618      	mov	r0, r3
20001b04:	f001 f816 	bl	20002b34 <xTaskRemoveFromEventList>
20001b08:	4603      	mov	r3, r0
20001b0a:	2b00      	cmp	r3, #0
20001b0c:	d029      	beq.n	20001b62 <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
20001b0e:	f64e 5304 	movw	r3, #60676	; 0xed04
20001b12:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001b1a:	601a      	str	r2, [r3, #0]
20001b1c:	f3bf 8f4f 	dsb	sy
20001b20:	f3bf 8f6f 	isb	sy
20001b24:	e01e      	b.n	20001b64 <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
20001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b28:	6a3a      	ldr	r2, [r7, #32]
20001b2a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001b30:	2b00      	cmp	r3, #0
20001b32:	d017      	beq.n	20001b64 <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b36:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001b3a:	4618      	mov	r0, r3
20001b3c:	f000 fffa 	bl	20002b34 <xTaskRemoveFromEventList>
20001b40:	4603      	mov	r3, r0
20001b42:	2b00      	cmp	r3, #0
20001b44:	d00e      	beq.n	20001b64 <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
20001b46:	f64e 5304 	movw	r3, #60676	; 0xed04
20001b4a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001b52:	601a      	str	r2, [r3, #0]
20001b54:	f3bf 8f4f 	dsb	sy
20001b58:	f3bf 8f6f 	isb	sy
20001b5c:	e002      	b.n	20001b64 <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
20001b5e:	bf00      	nop
20001b60:	e000      	b.n	20001b64 <xQueueGenericReceive+0x14c>
20001b62:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
20001b64:	f002 fcfa 	bl	2000455c <vPortExitCritical>
				return pdPASS;
20001b68:	f04f 0301 	mov.w	r3, #1
20001b6c:	e083      	b.n	20001c76 <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	2b00      	cmp	r3, #0
20001b72:	d104      	bne.n	20001b7e <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001b74:	f002 fcf2 	bl	2000455c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001b78:	f04f 0300 	mov.w	r3, #0
20001b7c:	e07b      	b.n	20001c76 <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
20001b7e:	69fb      	ldr	r3, [r7, #28]
20001b80:	2b00      	cmp	r3, #0
20001b82:	d107      	bne.n	20001b94 <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001b84:	f107 0314 	add.w	r3, r7, #20
20001b88:	4618      	mov	r0, r3
20001b8a:	f001 f84b 	bl	20002c24 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001b8e:	f04f 0301 	mov.w	r3, #1
20001b92:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001b94:	f002 fce2 	bl	2000455c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001b98:	f000 fcac 	bl	200024f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001b9c:	f002 fca6 	bl	200044ec <vPortEnterCritical>
20001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ba6:	b2db      	uxtb	r3, r3
20001ba8:	b25b      	sxtb	r3, r3
20001baa:	f1b3 3fff 	cmp.w	r3, #4294967295
20001bae:	d104      	bne.n	20001bba <xQueueGenericReceive+0x1a2>
20001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bb2:	f04f 0200 	mov.w	r2, #0
20001bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001bc0:	b2db      	uxtb	r3, r3
20001bc2:	b25b      	sxtb	r3, r3
20001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
20001bc8:	d104      	bne.n	20001bd4 <xQueueGenericReceive+0x1bc>
20001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bcc:	f04f 0200 	mov.w	r2, #0
20001bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001bd4:	f002 fcc2 	bl	2000455c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001bd8:	f107 0214 	add.w	r2, r7, #20
20001bdc:	f107 0304 	add.w	r3, r7, #4
20001be0:	4610      	mov	r0, r2
20001be2:	4619      	mov	r1, r3
20001be4:	f001 f842 	bl	20002c6c <xTaskCheckForTimeOut>
20001be8:	4603      	mov	r3, r0
20001bea:	2b00      	cmp	r3, #0
20001bec:	d135      	bne.n	20001c5a <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001bee:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001bf0:	f000 f93c 	bl	20001e6c <prvIsQueueEmpty>
20001bf4:	4603      	mov	r3, r0
20001bf6:	2b00      	cmp	r3, #0
20001bf8:	d029      	beq.n	20001c4e <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bfc:	681b      	ldr	r3, [r3, #0]
20001bfe:	2b00      	cmp	r3, #0
20001c00:	d108      	bne.n	20001c14 <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
20001c02:	f002 fc73 	bl	200044ec <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
20001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c08:	685b      	ldr	r3, [r3, #4]
20001c0a:	4618      	mov	r0, r3
20001c0c:	f001 f9be 	bl	20002f8c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
20001c10:	f002 fca4 	bl	2000455c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c16:	f103 0224 	add.w	r2, r3, #36	; 0x24
20001c1a:	687b      	ldr	r3, [r7, #4]
20001c1c:	4610      	mov	r0, r2
20001c1e:	4619      	mov	r1, r3
20001c20:	f000 ff36 	bl	20002a90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001c26:	f000 f8cb 	bl	20001dc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001c2a:	f000 fc75 	bl	20002518 <xTaskResumeAll>
20001c2e:	4603      	mov	r3, r0
20001c30:	2b00      	cmp	r3, #0
20001c32:	f47f af3b 	bne.w	20001aac <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
20001c36:	f64e 5304 	movw	r3, #60676	; 0xed04
20001c3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c42:	601a      	str	r2, [r3, #0]
20001c44:	f3bf 8f4f 	dsb	sy
20001c48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001c4c:	e731      	b.n	20001ab2 <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001c4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001c50:	f000 f8b6 	bl	20001dc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001c54:	f000 fc60 	bl	20002518 <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001c58:	e72b      	b.n	20001ab2 <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
20001c5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001c5c:	f000 f8b0 	bl	20001dc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001c60:	f000 fc5a 	bl	20002518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001c66:	f000 f901 	bl	20001e6c <prvIsQueueEmpty>
20001c6a:	4603      	mov	r3, r0
20001c6c:	2b00      	cmp	r3, #0
20001c6e:	f43f af1f 	beq.w	20001ab0 <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001c72:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
20001c76:	4618      	mov	r0, r3
20001c78:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001c7c:	46bd      	mov	sp, r7
20001c7e:	bd80      	pop	{r7, pc}

20001c80 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001c80:	b580      	push	{r7, lr}
20001c82:	b086      	sub	sp, #24
20001c84:	af00      	add	r7, sp, #0
20001c86:	60f8      	str	r0, [r7, #12]
20001c88:	60b9      	str	r1, [r7, #8]
20001c8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
20001c8c:	f04f 0300 	mov.w	r3, #0
20001c90:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001c92:	68fb      	ldr	r3, [r7, #12]
20001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001c96:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001c98:	68fb      	ldr	r3, [r7, #12]
20001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c9c:	2b00      	cmp	r3, #0
20001c9e:	d10f      	bne.n	20001cc0 <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001ca0:	68fb      	ldr	r3, [r7, #12]
20001ca2:	681b      	ldr	r3, [r3, #0]
20001ca4:	2b00      	cmp	r3, #0
20001ca6:	d155      	bne.n	20001d54 <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
20001ca8:	68fb      	ldr	r3, [r7, #12]
20001caa:	685b      	ldr	r3, [r3, #4]
20001cac:	4618      	mov	r0, r3
20001cae:	f001 fa13 	bl	200030d8 <xTaskPriorityDisinherit>
20001cb2:	4603      	mov	r3, r0
20001cb4:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
20001cb6:	68fb      	ldr	r3, [r7, #12]
20001cb8:	f04f 0200 	mov.w	r2, #0
20001cbc:	605a      	str	r2, [r3, #4]
20001cbe:	e04c      	b.n	20001d5a <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001cc0:	687b      	ldr	r3, [r7, #4]
20001cc2:	2b00      	cmp	r3, #0
20001cc4:	d11a      	bne.n	20001cfc <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
20001cc6:	68fb      	ldr	r3, [r7, #12]
20001cc8:	689a      	ldr	r2, [r3, #8]
20001cca:	68fb      	ldr	r3, [r7, #12]
20001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001cce:	4610      	mov	r0, r2
20001cd0:	68b9      	ldr	r1, [r7, #8]
20001cd2:	461a      	mov	r2, r3
20001cd4:	f005 fbc4 	bl	20007460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
20001cd8:	68fb      	ldr	r3, [r7, #12]
20001cda:	689a      	ldr	r2, [r3, #8]
20001cdc:	68fb      	ldr	r3, [r7, #12]
20001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ce0:	441a      	add	r2, r3
20001ce2:	68fb      	ldr	r3, [r7, #12]
20001ce4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001ce6:	68fb      	ldr	r3, [r7, #12]
20001ce8:	689a      	ldr	r2, [r3, #8]
20001cea:	68fb      	ldr	r3, [r7, #12]
20001cec:	685b      	ldr	r3, [r3, #4]
20001cee:	429a      	cmp	r2, r3
20001cf0:	d332      	bcc.n	20001d58 <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001cf2:	68fb      	ldr	r3, [r7, #12]
20001cf4:	681a      	ldr	r2, [r3, #0]
20001cf6:	68fb      	ldr	r3, [r7, #12]
20001cf8:	609a      	str	r2, [r3, #8]
20001cfa:	e02e      	b.n	20001d5a <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001cfc:	68fb      	ldr	r3, [r7, #12]
20001cfe:	68da      	ldr	r2, [r3, #12]
20001d00:	68fb      	ldr	r3, [r7, #12]
20001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d04:	4610      	mov	r0, r2
20001d06:	68b9      	ldr	r1, [r7, #8]
20001d08:	461a      	mov	r2, r3
20001d0a:	f005 fba9 	bl	20007460 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
20001d0e:	68fb      	ldr	r3, [r7, #12]
20001d10:	68da      	ldr	r2, [r3, #12]
20001d12:	68fb      	ldr	r3, [r7, #12]
20001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d16:	f1c3 0300 	rsb	r3, r3, #0
20001d1a:	441a      	add	r2, r3
20001d1c:	68fb      	ldr	r3, [r7, #12]
20001d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001d20:	68fb      	ldr	r3, [r7, #12]
20001d22:	68da      	ldr	r2, [r3, #12]
20001d24:	68fb      	ldr	r3, [r7, #12]
20001d26:	681b      	ldr	r3, [r3, #0]
20001d28:	429a      	cmp	r2, r3
20001d2a:	d208      	bcs.n	20001d3e <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
20001d2c:	68fb      	ldr	r3, [r7, #12]
20001d2e:	685a      	ldr	r2, [r3, #4]
20001d30:	68fb      	ldr	r3, [r7, #12]
20001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d34:	f1c3 0300 	rsb	r3, r3, #0
20001d38:	441a      	add	r2, r3
20001d3a:	68fb      	ldr	r3, [r7, #12]
20001d3c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20001d3e:	687b      	ldr	r3, [r7, #4]
20001d40:	2b02      	cmp	r3, #2
20001d42:	d10a      	bne.n	20001d5a <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001d44:	697b      	ldr	r3, [r7, #20]
20001d46:	2b00      	cmp	r3, #0
20001d48:	d007      	beq.n	20001d5a <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
20001d4a:	697b      	ldr	r3, [r7, #20]
20001d4c:	f103 33ff 	add.w	r3, r3, #4294967295
20001d50:	617b      	str	r3, [r7, #20]
20001d52:	e002      	b.n	20001d5a <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
20001d54:	bf00      	nop
20001d56:	e000      	b.n	20001d5a <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001d58:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
20001d5a:	697b      	ldr	r3, [r7, #20]
20001d5c:	f103 0201 	add.w	r2, r3, #1
20001d60:	68fb      	ldr	r3, [r7, #12]
20001d62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
20001d64:	693b      	ldr	r3, [r7, #16]
}
20001d66:	4618      	mov	r0, r3
20001d68:	f107 0718 	add.w	r7, r7, #24
20001d6c:	46bd      	mov	sp, r7
20001d6e:	bd80      	pop	{r7, pc}

20001d70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001d70:	b580      	push	{r7, lr}
20001d72:	b082      	sub	sp, #8
20001d74:	af00      	add	r7, sp, #0
20001d76:	6078      	str	r0, [r7, #4]
20001d78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001d7a:	687b      	ldr	r3, [r7, #4]
20001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d7e:	2b00      	cmp	r3, #0
20001d80:	d019      	beq.n	20001db6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
20001d82:	687b      	ldr	r3, [r7, #4]
20001d84:	68da      	ldr	r2, [r3, #12]
20001d86:	687b      	ldr	r3, [r7, #4]
20001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d8a:	441a      	add	r2, r3
20001d8c:	687b      	ldr	r3, [r7, #4]
20001d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001d90:	687b      	ldr	r3, [r7, #4]
20001d92:	68da      	ldr	r2, [r3, #12]
20001d94:	687b      	ldr	r3, [r7, #4]
20001d96:	685b      	ldr	r3, [r3, #4]
20001d98:	429a      	cmp	r2, r3
20001d9a:	d303      	bcc.n	20001da4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
20001d9c:	687b      	ldr	r3, [r7, #4]
20001d9e:	681a      	ldr	r2, [r3, #0]
20001da0:	687b      	ldr	r3, [r7, #4]
20001da2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
20001da4:	687b      	ldr	r3, [r7, #4]
20001da6:	68da      	ldr	r2, [r3, #12]
20001da8:	687b      	ldr	r3, [r7, #4]
20001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001dac:	6838      	ldr	r0, [r7, #0]
20001dae:	4611      	mov	r1, r2
20001db0:	461a      	mov	r2, r3
20001db2:	f005 fb55 	bl	20007460 <memcpy>
	}
}
20001db6:	f107 0708 	add.w	r7, r7, #8
20001dba:	46bd      	mov	sp, r7
20001dbc:	bd80      	pop	{r7, pc}
20001dbe:	bf00      	nop

20001dc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001dc0:	b580      	push	{r7, lr}
20001dc2:	b084      	sub	sp, #16
20001dc4:	af00      	add	r7, sp, #0
20001dc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001dc8:	f002 fb90 	bl	200044ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001dcc:	687b      	ldr	r3, [r7, #4]
20001dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001dd2:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001dd4:	e012      	b.n	20001dfc <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001dd6:	687b      	ldr	r3, [r7, #4]
20001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001dda:	2b00      	cmp	r3, #0
20001ddc:	d013      	beq.n	20001e06 <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001dde:	687b      	ldr	r3, [r7, #4]
20001de0:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001de4:	4618      	mov	r0, r3
20001de6:	f000 fea5 	bl	20002b34 <xTaskRemoveFromEventList>
20001dea:	4603      	mov	r3, r0
20001dec:	2b00      	cmp	r3, #0
20001dee:	d001      	beq.n	20001df4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001df0:	f000 ffa4 	bl	20002d3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001df4:	7bbb      	ldrb	r3, [r7, #14]
20001df6:	f103 33ff 	add.w	r3, r3, #4294967295
20001dfa:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001e00:	2b00      	cmp	r3, #0
20001e02:	dce8      	bgt.n	20001dd6 <prvUnlockQueue+0x16>
20001e04:	e000      	b.n	20001e08 <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
20001e06:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001e08:	687b      	ldr	r3, [r7, #4]
20001e0a:	f04f 32ff 	mov.w	r2, #4294967295
20001e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001e12:	f002 fba3 	bl	2000455c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001e16:	f002 fb69 	bl	200044ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001e1a:	687b      	ldr	r3, [r7, #4]
20001e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001e20:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001e22:	e012      	b.n	20001e4a <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001e24:	687b      	ldr	r3, [r7, #4]
20001e26:	691b      	ldr	r3, [r3, #16]
20001e28:	2b00      	cmp	r3, #0
20001e2a:	d013      	beq.n	20001e54 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001e2c:	687b      	ldr	r3, [r7, #4]
20001e2e:	f103 0310 	add.w	r3, r3, #16
20001e32:	4618      	mov	r0, r3
20001e34:	f000 fe7e 	bl	20002b34 <xTaskRemoveFromEventList>
20001e38:	4603      	mov	r3, r0
20001e3a:	2b00      	cmp	r3, #0
20001e3c:	d001      	beq.n	20001e42 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
20001e3e:	f000 ff7d 	bl	20002d3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001e42:	7bfb      	ldrb	r3, [r7, #15]
20001e44:	f103 33ff 	add.w	r3, r3, #4294967295
20001e48:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001e4e:	2b00      	cmp	r3, #0
20001e50:	dce8      	bgt.n	20001e24 <prvUnlockQueue+0x64>
20001e52:	e000      	b.n	20001e56 <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
20001e54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001e56:	687b      	ldr	r3, [r7, #4]
20001e58:	f04f 32ff 	mov.w	r2, #4294967295
20001e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001e60:	f002 fb7c 	bl	2000455c <vPortExitCritical>
}
20001e64:	f107 0710 	add.w	r7, r7, #16
20001e68:	46bd      	mov	sp, r7
20001e6a:	bd80      	pop	{r7, pc}

20001e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001e6c:	b580      	push	{r7, lr}
20001e6e:	b084      	sub	sp, #16
20001e70:	af00      	add	r7, sp, #0
20001e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001e74:	f002 fb3a 	bl	200044ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001e78:	687b      	ldr	r3, [r7, #4]
20001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001e7c:	2b00      	cmp	r3, #0
20001e7e:	d103      	bne.n	20001e88 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
20001e80:	f04f 0301 	mov.w	r3, #1
20001e84:	60fb      	str	r3, [r7, #12]
20001e86:	e002      	b.n	20001e8e <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001e88:	f04f 0300 	mov.w	r3, #0
20001e8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001e8e:	f002 fb65 	bl	2000455c <vPortExitCritical>

	return xReturn;
20001e92:	68fb      	ldr	r3, [r7, #12]
}
20001e94:	4618      	mov	r0, r3
20001e96:	f107 0710 	add.w	r7, r7, #16
20001e9a:	46bd      	mov	sp, r7
20001e9c:	bd80      	pop	{r7, pc}
20001e9e:	bf00      	nop

20001ea0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001ea0:	b580      	push	{r7, lr}
20001ea2:	b084      	sub	sp, #16
20001ea4:	af00      	add	r7, sp, #0
20001ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001ea8:	f002 fb20 	bl	200044ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001eac:	687b      	ldr	r3, [r7, #4]
20001eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001eb0:	687b      	ldr	r3, [r7, #4]
20001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001eb4:	429a      	cmp	r2, r3
20001eb6:	d103      	bne.n	20001ec0 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
20001eb8:	f04f 0301 	mov.w	r3, #1
20001ebc:	60fb      	str	r3, [r7, #12]
20001ebe:	e002      	b.n	20001ec6 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
20001ec0:	f04f 0300 	mov.w	r3, #0
20001ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001ec6:	f002 fb49 	bl	2000455c <vPortExitCritical>

	return xReturn;
20001eca:	68fb      	ldr	r3, [r7, #12]
}
20001ecc:	4618      	mov	r0, r3
20001ece:	f107 0710 	add.w	r7, r7, #16
20001ed2:	46bd      	mov	sp, r7
20001ed4:	bd80      	pop	{r7, pc}
20001ed6:	bf00      	nop

20001ed8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001ed8:	b580      	push	{r7, lr}
20001eda:	b086      	sub	sp, #24
20001edc:	af00      	add	r7, sp, #0
20001ede:	60f8      	str	r0, [r7, #12]
20001ee0:	60b9      	str	r1, [r7, #8]
20001ee2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001ee4:	68fb      	ldr	r3, [r7, #12]
20001ee6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001ee8:	f002 fb00 	bl	200044ec <vPortEnterCritical>
20001eec:	697b      	ldr	r3, [r7, #20]
20001eee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ef2:	b2db      	uxtb	r3, r3
20001ef4:	b25b      	sxtb	r3, r3
20001ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
20001efa:	d104      	bne.n	20001f06 <vQueueWaitForMessageRestricted+0x2e>
20001efc:	697b      	ldr	r3, [r7, #20]
20001efe:	f04f 0200 	mov.w	r2, #0
20001f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001f06:	697b      	ldr	r3, [r7, #20]
20001f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001f0c:	b2db      	uxtb	r3, r3
20001f0e:	b25b      	sxtb	r3, r3
20001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
20001f14:	d104      	bne.n	20001f20 <vQueueWaitForMessageRestricted+0x48>
20001f16:	697b      	ldr	r3, [r7, #20]
20001f18:	f04f 0200 	mov.w	r2, #0
20001f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001f20:	f002 fb1c 	bl	2000455c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20001f24:	697b      	ldr	r3, [r7, #20]
20001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001f28:	2b00      	cmp	r3, #0
20001f2a:	d107      	bne.n	20001f3c <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20001f2c:	697b      	ldr	r3, [r7, #20]
20001f2e:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001f32:	4618      	mov	r0, r3
20001f34:	68b9      	ldr	r1, [r7, #8]
20001f36:	687a      	ldr	r2, [r7, #4]
20001f38:	f000 fdd0 	bl	20002adc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20001f3c:	6978      	ldr	r0, [r7, #20]
20001f3e:	f7ff ff3f 	bl	20001dc0 <prvUnlockQueue>
	}
20001f42:	f107 0718 	add.w	r7, r7, #24
20001f46:	46bd      	mov	sp, r7
20001f48:	bd80      	pop	{r7, pc}
20001f4a:	bf00      	nop

20001f4c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20001f4c:	b580      	push	{r7, lr}
20001f4e:	b08c      	sub	sp, #48	; 0x30
20001f50:	af04      	add	r7, sp, #16
20001f52:	60f8      	str	r0, [r7, #12]
20001f54:	60b9      	str	r1, [r7, #8]
20001f56:	603b      	str	r3, [r7, #0]
20001f58:	4613      	mov	r3, r2
20001f5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001f5c:	88fb      	ldrh	r3, [r7, #6]
20001f5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001f62:	4618      	mov	r0, r3
20001f64:	f001 ff74 	bl	20003e50 <pvPortMalloc>
20001f68:	4603      	mov	r3, r0
20001f6a:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
20001f6c:	69fb      	ldr	r3, [r7, #28]
20001f6e:	2b00      	cmp	r3, #0
20001f70:	d010      	beq.n	20001f94 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
20001f72:	f04f 005c 	mov.w	r0, #92	; 0x5c
20001f76:	f001 ff6b 	bl	20003e50 <pvPortMalloc>
20001f7a:	4603      	mov	r3, r0
20001f7c:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
20001f7e:	697b      	ldr	r3, [r7, #20]
20001f80:	2b00      	cmp	r3, #0
20001f82:	d003      	beq.n	20001f8c <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20001f84:	697b      	ldr	r3, [r7, #20]
20001f86:	69fa      	ldr	r2, [r7, #28]
20001f88:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20001f8a:	e006      	b.n	20001f9a <xTaskCreate+0x4e>
20001f8c:	69f8      	ldr	r0, [r7, #28]
20001f8e:	f002 f85b 	bl	20004048 <vPortFree>
20001f92:	e002      	b.n	20001f9a <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
20001f94:	f04f 0300 	mov.w	r3, #0
20001f98:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20001f9a:	697b      	ldr	r3, [r7, #20]
20001f9c:	2b00      	cmp	r3, #0
20001f9e:	d016      	beq.n	20001fce <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
20001fa0:	88fb      	ldrh	r3, [r7, #6]
20001fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001fa4:	9200      	str	r2, [sp, #0]
20001fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001fa8:	9201      	str	r2, [sp, #4]
20001faa:	697a      	ldr	r2, [r7, #20]
20001fac:	9202      	str	r2, [sp, #8]
20001fae:	f04f 0200 	mov.w	r2, #0
20001fb2:	9203      	str	r2, [sp, #12]
20001fb4:	68f8      	ldr	r0, [r7, #12]
20001fb6:	68b9      	ldr	r1, [r7, #8]
20001fb8:	461a      	mov	r2, r3
20001fba:	683b      	ldr	r3, [r7, #0]
20001fbc:	f000 f810 	bl	20001fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001fc0:	6978      	ldr	r0, [r7, #20]
20001fc2:	f000 f8a3 	bl	2000210c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20001fc6:	f04f 0301 	mov.w	r3, #1
20001fca:	61bb      	str	r3, [r7, #24]
20001fcc:	e002      	b.n	20001fd4 <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
20001fce:	f04f 33ff 	mov.w	r3, #4294967295
20001fd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
20001fd4:	69bb      	ldr	r3, [r7, #24]
	}
20001fd6:	4618      	mov	r0, r3
20001fd8:	f107 0720 	add.w	r7, r7, #32
20001fdc:	46bd      	mov	sp, r7
20001fde:	bd80      	pop	{r7, pc}

20001fe0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
20001fe0:	b580      	push	{r7, lr}
20001fe2:	b088      	sub	sp, #32
20001fe4:	af00      	add	r7, sp, #0
20001fe6:	60f8      	str	r0, [r7, #12]
20001fe8:	60b9      	str	r1, [r7, #8]
20001fea:	607a      	str	r2, [r7, #4]
20001fec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
20001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001ff2:	687b      	ldr	r3, [r7, #4]
20001ff4:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001ff8:	4610      	mov	r0, r2
20001ffa:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20001ffe:	461a      	mov	r2, r3
20002000:	f005 faf6 	bl	200075f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
20002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002008:	687b      	ldr	r3, [r7, #4]
2000200a:	f103 33ff 	add.w	r3, r3, #4294967295
2000200e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002012:	4413      	add	r3, r2
20002014:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
20002016:	697b      	ldr	r3, [r7, #20]
20002018:	f023 0307 	bic.w	r3, r3, #7
2000201c:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
2000201e:	697b      	ldr	r3, [r7, #20]
20002020:	f003 0307 	and.w	r3, r3, #7
20002024:	2b00      	cmp	r3, #0
20002026:	d009      	beq.n	2000203c <prvInitialiseNewTask+0x5c>
20002028:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000202c:	f383 8811 	msr	BASEPRI, r3
20002030:	f3bf 8f6f 	isb	sy
20002034:	f3bf 8f4f 	dsb	sy
20002038:	61fb      	str	r3, [r7, #28]
2000203a:	e7fe      	b.n	2000203a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2000203c:	f04f 0300 	mov.w	r3, #0
20002040:	61bb      	str	r3, [r7, #24]
20002042:	e012      	b.n	2000206a <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20002044:	69b9      	ldr	r1, [r7, #24]
20002046:	68ba      	ldr	r2, [r7, #8]
20002048:	69bb      	ldr	r3, [r7, #24]
2000204a:	4413      	add	r3, r2
2000204c:	781a      	ldrb	r2, [r3, #0]
2000204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002050:	440b      	add	r3, r1
20002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
20002056:	68ba      	ldr	r2, [r7, #8]
20002058:	69bb      	ldr	r3, [r7, #24]
2000205a:	4413      	add	r3, r2
2000205c:	781b      	ldrb	r3, [r3, #0]
2000205e:	2b00      	cmp	r3, #0
20002060:	d007      	beq.n	20002072 <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20002062:	69bb      	ldr	r3, [r7, #24]
20002064:	f103 0301 	add.w	r3, r3, #1
20002068:	61bb      	str	r3, [r7, #24]
2000206a:	69bb      	ldr	r3, [r7, #24]
2000206c:	2b09      	cmp	r3, #9
2000206e:	d9e9      	bls.n	20002044 <prvInitialiseNewTask+0x64>
20002070:	e000      	b.n	20002074 <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
20002072:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002076:	f04f 0200 	mov.w	r2, #0
2000207a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2000207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002080:	2b04      	cmp	r3, #4
20002082:	d902      	bls.n	2000208a <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20002084:	f04f 0304 	mov.w	r3, #4
20002088:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
2000208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000208c:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000208e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20002090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002092:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002094:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
20002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002098:	f04f 0200 	mov.w	r2, #0
2000209c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
2000209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020a0:	f103 0304 	add.w	r3, r3, #4
200020a4:	4618      	mov	r0, r3
200020a6:	f7ff f951 	bl	2000134c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
200020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020ac:	f103 0318 	add.w	r3, r3, #24
200020b0:	4618      	mov	r0, r3
200020b2:	f7ff f94b 	bl	2000134c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
200020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200020ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
200020be:	f1c3 0205 	rsb	r2, r3, #5
200020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
200020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200020ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
200020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020ce:	f04f 0200 	mov.w	r2, #0
200020d2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
200020d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020d6:	f04f 0200 	mov.w	r2, #0
200020da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020de:	f04f 0200 	mov.w	r2, #0
200020e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
200020e6:	6978      	ldr	r0, [r7, #20]
200020e8:	68f9      	ldr	r1, [r7, #12]
200020ea:	683a      	ldr	r2, [r7, #0]
200020ec:	f002 f8f8 	bl	200042e0 <pxPortInitialiseStack>
200020f0:	4603      	mov	r3, r0
200020f2:	461a      	mov	r2, r3
200020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
200020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200020fa:	2b00      	cmp	r3, #0
200020fc:	d002      	beq.n	20002104 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
200020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002102:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002104:	f107 0720 	add.w	r7, r7, #32
20002108:	46bd      	mov	sp, r7
2000210a:	bd80      	pop	{r7, pc}

2000210c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
2000210c:	b580      	push	{r7, lr}
2000210e:	b082      	sub	sp, #8
20002110:	af00      	add	r7, sp, #0
20002112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
20002114:	f002 f9ea 	bl	200044ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20002118:	f647 03b4 	movw	r3, #30900	; 0x78b4
2000211c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002120:	681b      	ldr	r3, [r3, #0]
20002122:	f103 0201 	add.w	r2, r3, #1
20002126:	f647 03b4 	movw	r3, #30900	; 0x78b4
2000212a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000212e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
20002130:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002134:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002138:	681b      	ldr	r3, [r3, #0]
2000213a:	2b00      	cmp	r3, #0
2000213c:	d10f      	bne.n	2000215e <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
2000213e:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002142:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002146:	687a      	ldr	r2, [r7, #4]
20002148:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
2000214a:	f647 03b4 	movw	r3, #30900	; 0x78b4
2000214e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002152:	681b      	ldr	r3, [r3, #0]
20002154:	2b01      	cmp	r3, #1
20002156:	d11a      	bne.n	2000218e <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20002158:	f000 fe18 	bl	20002d8c <prvInitialiseTaskLists>
2000215c:	e018      	b.n	20002190 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
2000215e:	f647 03c0 	movw	r3, #30912	; 0x78c0
20002162:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002166:	681b      	ldr	r3, [r3, #0]
20002168:	2b00      	cmp	r3, #0
2000216a:	d111      	bne.n	20002190 <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
2000216c:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002170:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002174:	681b      	ldr	r3, [r3, #0]
20002176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002178:	687b      	ldr	r3, [r7, #4]
2000217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000217c:	429a      	cmp	r2, r3
2000217e:	d807      	bhi.n	20002190 <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
20002180:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002184:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002188:	687a      	ldr	r2, [r7, #4]
2000218a:	601a      	str	r2, [r3, #0]
2000218c:	e000      	b.n	20002190 <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
2000218e:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20002190:	f647 03d0 	movw	r3, #30928	; 0x78d0
20002194:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002198:	681b      	ldr	r3, [r3, #0]
2000219a:	f103 0201 	add.w	r2, r3, #1
2000219e:	f647 03d0 	movw	r3, #30928	; 0x78d0
200021a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021a6:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
200021a8:	f647 03d0 	movw	r3, #30928	; 0x78d0
200021ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021b0:	681a      	ldr	r2, [r3, #0]
200021b2:	687b      	ldr	r3, [r7, #4]
200021b4:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
200021b6:	687b      	ldr	r3, [r7, #4]
200021b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200021ba:	f04f 0201 	mov.w	r2, #1
200021be:	fa02 f203 	lsl.w	r2, r2, r3
200021c2:	f647 03bc 	movw	r3, #30908	; 0x78bc
200021c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021ca:	681b      	ldr	r3, [r3, #0]
200021cc:	ea42 0203 	orr.w	r2, r2, r3
200021d0:	f647 03bc 	movw	r3, #30908	; 0x78bc
200021d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021d8:	601a      	str	r2, [r3, #0]
200021da:	687b      	ldr	r3, [r7, #4]
200021dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200021de:	4613      	mov	r3, r2
200021e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200021e4:	4413      	add	r3, r2
200021e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
200021ea:	461a      	mov	r2, r3
200021ec:	f247 73e0 	movw	r3, #30688	; 0x77e0
200021f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021f4:	441a      	add	r2, r3
200021f6:	687b      	ldr	r3, [r7, #4]
200021f8:	f103 0304 	add.w	r3, r3, #4
200021fc:	4610      	mov	r0, r2
200021fe:	4619      	mov	r1, r3
20002200:	f7ff f8b2 	bl	20001368 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20002204:	f002 f9aa 	bl	2000455c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
20002208:	f647 03c0 	movw	r3, #30912	; 0x78c0
2000220c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002210:	681b      	ldr	r3, [r3, #0]
20002212:	2b00      	cmp	r3, #0
20002214:	d014      	beq.n	20002240 <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20002216:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000221a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000221e:	681b      	ldr	r3, [r3, #0]
20002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002222:	687b      	ldr	r3, [r7, #4]
20002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002226:	429a      	cmp	r2, r3
20002228:	d20a      	bcs.n	20002240 <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
2000222a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000222e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002236:	601a      	str	r2, [r3, #0]
20002238:	f3bf 8f4f 	dsb	sy
2000223c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002240:	f107 0708 	add.w	r7, r7, #8
20002244:	46bd      	mov	sp, r7
20002246:	bd80      	pop	{r7, pc}

20002248 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
20002248:	b580      	push	{r7, lr}
2000224a:	b084      	sub	sp, #16
2000224c:	af00      	add	r7, sp, #0
2000224e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
20002250:	f002 f94c 	bl	200044ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
20002254:	687b      	ldr	r3, [r7, #4]
20002256:	2b00      	cmp	r3, #0
20002258:	d105      	bne.n	20002266 <uxTaskPriorityGet+0x1e>
2000225a:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000225e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002262:	681b      	ldr	r3, [r3, #0]
20002264:	e000      	b.n	20002268 <uxTaskPriorityGet+0x20>
20002266:	687b      	ldr	r3, [r7, #4]
20002268:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxPriority;
2000226a:	68bb      	ldr	r3, [r7, #8]
2000226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000226e:	60fb      	str	r3, [r7, #12]
		}
		taskEXIT_CRITICAL();
20002270:	f002 f974 	bl	2000455c <vPortExitCritical>

		return uxReturn;
20002274:	68fb      	ldr	r3, [r7, #12]
	}
20002276:	4618      	mov	r0, r3
20002278:	f107 0710 	add.w	r7, r7, #16
2000227c:	46bd      	mov	sp, r7
2000227e:	bd80      	pop	{r7, pc}

20002280 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
20002280:	b580      	push	{r7, lr}
20002282:	b088      	sub	sp, #32
20002284:	af00      	add	r7, sp, #0
20002286:	6078      	str	r0, [r7, #4]
20002288:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
2000228a:	f04f 0300 	mov.w	r3, #0
2000228e:	61bb      	str	r3, [r7, #24]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
20002290:	683b      	ldr	r3, [r7, #0]
20002292:	2b04      	cmp	r3, #4
20002294:	d909      	bls.n	200022aa <vTaskPrioritySet+0x2a>
20002296:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000229a:	f383 8811 	msr	BASEPRI, r3
2000229e:	f3bf 8f6f 	isb	sy
200022a2:	f3bf 8f4f 	dsb	sy
200022a6:	61fb      	str	r3, [r7, #28]
200022a8:	e7fe      	b.n	200022a8 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
200022aa:	683b      	ldr	r3, [r7, #0]
200022ac:	2b04      	cmp	r3, #4
200022ae:	d902      	bls.n	200022b6 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
200022b0:	f04f 0304 	mov.w	r3, #4
200022b4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
200022b6:	f002 f919 	bl	200044ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
200022ba:	687b      	ldr	r3, [r7, #4]
200022bc:	2b00      	cmp	r3, #0
200022be:	d105      	bne.n	200022cc <vTaskPrioritySet+0x4c>
200022c0:	f247 73dc 	movw	r3, #30684	; 0x77dc
200022c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022c8:	681b      	ldr	r3, [r3, #0]
200022ca:	e000      	b.n	200022ce <vTaskPrioritySet+0x4e>
200022cc:	687b      	ldr	r3, [r7, #4]
200022ce:	60fb      	str	r3, [r7, #12]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
200022d0:	68fb      	ldr	r3, [r7, #12]
200022d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200022d4:	613b      	str	r3, [r7, #16]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
200022d6:	693a      	ldr	r2, [r7, #16]
200022d8:	683b      	ldr	r3, [r7, #0]
200022da:	429a      	cmp	r2, r3
200022dc:	f000 80a9 	beq.w	20002432 <vTaskPrioritySet+0x1b2>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
200022e0:	683a      	ldr	r2, [r7, #0]
200022e2:	693b      	ldr	r3, [r7, #16]
200022e4:	429a      	cmp	r2, r3
200022e6:	d914      	bls.n	20002312 <vTaskPrioritySet+0x92>
				{
					if( pxTCB != pxCurrentTCB )
200022e8:	f247 73dc 	movw	r3, #30684	; 0x77dc
200022ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022f0:	681b      	ldr	r3, [r3, #0]
200022f2:	68fa      	ldr	r2, [r7, #12]
200022f4:	429a      	cmp	r2, r3
200022f6:	d018      	beq.n	2000232a <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
200022f8:	f247 73dc 	movw	r3, #30684	; 0x77dc
200022fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002300:	681b      	ldr	r3, [r3, #0]
20002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002304:	683b      	ldr	r3, [r7, #0]
20002306:	429a      	cmp	r2, r3
20002308:	d811      	bhi.n	2000232e <vTaskPrioritySet+0xae>
						{
							xYieldRequired = pdTRUE;
2000230a:	f04f 0301 	mov.w	r3, #1
2000230e:	61bb      	str	r3, [r7, #24]
20002310:	e00e      	b.n	20002330 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
20002312:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002316:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000231a:	681b      	ldr	r3, [r3, #0]
2000231c:	68fa      	ldr	r2, [r7, #12]
2000231e:	429a      	cmp	r2, r3
20002320:	d106      	bne.n	20002330 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
20002322:	f04f 0301 	mov.w	r3, #1
20002326:	61bb      	str	r3, [r7, #24]
20002328:	e002      	b.n	20002330 <vTaskPrioritySet+0xb0>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
2000232a:	bf00      	nop
2000232c:	e000      	b.n	20002330 <vTaskPrioritySet+0xb0>
2000232e:	bf00      	nop
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
20002330:	68fb      	ldr	r3, [r7, #12]
20002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002334:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
20002336:	68fb      	ldr	r3, [r7, #12]
20002338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000233a:	68fb      	ldr	r3, [r7, #12]
2000233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000233e:	429a      	cmp	r2, r3
20002340:	d102      	bne.n	20002348 <vTaskPrioritySet+0xc8>
					{
						pxTCB->uxPriority = uxNewPriority;
20002342:	68fb      	ldr	r3, [r7, #12]
20002344:	683a      	ldr	r2, [r7, #0]
20002346:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
20002348:	68fb      	ldr	r3, [r7, #12]
2000234a:	683a      	ldr	r2, [r7, #0]
2000234c:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
2000234e:	68fb      	ldr	r3, [r7, #12]
20002350:	699b      	ldr	r3, [r3, #24]
20002352:	2b00      	cmp	r3, #0
20002354:	db04      	blt.n	20002360 <vTaskPrioritySet+0xe0>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002356:	683b      	ldr	r3, [r7, #0]
20002358:	f1c3 0205 	rsb	r2, r3, #5
2000235c:	68fb      	ldr	r3, [r7, #12]
2000235e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20002360:	68fb      	ldr	r3, [r7, #12]
20002362:	6959      	ldr	r1, [r3, #20]
20002364:	697a      	ldr	r2, [r7, #20]
20002366:	4613      	mov	r3, r2
20002368:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000236c:	4413      	add	r3, r2
2000236e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002372:	461a      	mov	r2, r3
20002374:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002378:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000237c:	4413      	add	r3, r2
2000237e:	4299      	cmp	r1, r3
20002380:	d102      	bne.n	20002388 <vTaskPrioritySet+0x108>
20002382:	f04f 0301 	mov.w	r3, #1
20002386:	e001      	b.n	2000238c <vTaskPrioritySet+0x10c>
20002388:	f04f 0300 	mov.w	r3, #0
2000238c:	2b00      	cmp	r3, #0
2000238e:	d042      	beq.n	20002416 <vTaskPrioritySet+0x196>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002390:	68fb      	ldr	r3, [r7, #12]
20002392:	f103 0304 	add.w	r3, r3, #4
20002396:	4618      	mov	r0, r3
20002398:	f7ff f844 	bl	20001424 <uxListRemove>
2000239c:	4603      	mov	r3, r0
2000239e:	2b00      	cmp	r3, #0
200023a0:	d112      	bne.n	200023c8 <vTaskPrioritySet+0x148>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
200023a2:	697b      	ldr	r3, [r7, #20]
200023a4:	f04f 0201 	mov.w	r2, #1
200023a8:	fa02 f303 	lsl.w	r3, r2, r3
200023ac:	ea6f 0203 	mvn.w	r2, r3
200023b0:	f647 03bc 	movw	r3, #30908	; 0x78bc
200023b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023b8:	681b      	ldr	r3, [r3, #0]
200023ba:	ea02 0203 	and.w	r2, r2, r3
200023be:	f647 03bc 	movw	r3, #30908	; 0x78bc
200023c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023c6:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
200023c8:	68fb      	ldr	r3, [r7, #12]
200023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200023cc:	f04f 0201 	mov.w	r2, #1
200023d0:	fa02 f203 	lsl.w	r2, r2, r3
200023d4:	f647 03bc 	movw	r3, #30908	; 0x78bc
200023d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023dc:	681b      	ldr	r3, [r3, #0]
200023de:	ea42 0203 	orr.w	r2, r2, r3
200023e2:	f647 03bc 	movw	r3, #30908	; 0x78bc
200023e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023ea:	601a      	str	r2, [r3, #0]
200023ec:	68fb      	ldr	r3, [r7, #12]
200023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200023f0:	4613      	mov	r3, r2
200023f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200023f6:	4413      	add	r3, r2
200023f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200023fc:	461a      	mov	r2, r3
200023fe:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002402:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002406:	441a      	add	r2, r3
20002408:	68fb      	ldr	r3, [r7, #12]
2000240a:	f103 0304 	add.w	r3, r3, #4
2000240e:	4610      	mov	r0, r2
20002410:	4619      	mov	r1, r3
20002412:	f7fe ffa9 	bl	20001368 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
20002416:	69bb      	ldr	r3, [r7, #24]
20002418:	2b00      	cmp	r3, #0
2000241a:	d00a      	beq.n	20002432 <vTaskPrioritySet+0x1b2>
				{
					taskYIELD_IF_USING_PREEMPTION();
2000241c:	f64e 5304 	movw	r3, #60676	; 0xed04
20002420:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002428:	601a      	str	r2, [r3, #0]
2000242a:	f3bf 8f4f 	dsb	sy
2000242e:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
20002432:	f002 f893 	bl	2000455c <vPortExitCritical>
	}
20002436:	f107 0720 	add.w	r7, r7, #32
2000243a:	46bd      	mov	sp, r7
2000243c:	bd80      	pop	{r7, pc}
2000243e:	bf00      	nop

20002440 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
20002440:	b580      	push	{r7, lr}
20002442:	b086      	sub	sp, #24
20002444:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
20002446:	f04f 0300 	mov.w	r3, #0
2000244a:	9300      	str	r3, [sp, #0]
2000244c:	f647 03d8 	movw	r3, #30936	; 0x78d8
20002450:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002454:	9301      	str	r3, [sp, #4]
20002456:	f642 5055 	movw	r0, #11605	; 0x2d55
2000245a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000245e:	f247 61d8 	movw	r1, #30424	; 0x76d8
20002462:	f2c2 0100 	movt	r1, #8192	; 0x2000
20002466:	f04f 0250 	mov.w	r2, #80	; 0x50
2000246a:	f04f 0300 	mov.w	r3, #0
2000246e:	f7ff fd6d 	bl	20001f4c <xTaskCreate>
20002472:	4603      	mov	r3, r0
20002474:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
20002476:	687b      	ldr	r3, [r7, #4]
20002478:	2b01      	cmp	r3, #1
2000247a:	d103      	bne.n	20002484 <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
2000247c:	f001 f8f4 	bl	20003668 <xTimerCreateTimerTask>
20002480:	4603      	mov	r3, r0
20002482:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
20002484:	687b      	ldr	r3, [r7, #4]
20002486:	2b01      	cmp	r3, #1
20002488:	d122      	bne.n	200024d0 <vTaskStartScheduler+0x90>
2000248a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000248e:	f383 8811 	msr	BASEPRI, r3
20002492:	f3bf 8f6f 	isb	sy
20002496:	f3bf 8f4f 	dsb	sy
2000249a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
2000249c:	f647 03d4 	movw	r3, #30932	; 0x78d4
200024a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024a4:	f04f 32ff 	mov.w	r2, #4294967295
200024a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
200024aa:	f647 03c0 	movw	r3, #30912	; 0x78c0
200024ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024b2:	f04f 0201 	mov.w	r2, #1
200024b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
200024b8:	f647 03b8 	movw	r3, #30904	; 0x78b8
200024bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024c0:	f04f 0200 	mov.w	r2, #0
200024c4:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
200024c6:	f7fd ff2b 	bl	20000320 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
200024ca:	f001 ff89 	bl	200043e0 <xPortStartScheduler>
200024ce:	e00d      	b.n	200024ec <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
200024d0:	687b      	ldr	r3, [r7, #4]
200024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
200024d6:	d109      	bne.n	200024ec <vTaskStartScheduler+0xac>
200024d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200024dc:	f383 8811 	msr	BASEPRI, r3
200024e0:	f3bf 8f6f 	isb	sy
200024e4:	f3bf 8f4f 	dsb	sy
200024e8:	60fb      	str	r3, [r7, #12]
200024ea:	e7fe      	b.n	200024ea <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
200024ec:	f107 0710 	add.w	r7, r7, #16
200024f0:	46bd      	mov	sp, r7
200024f2:	bd80      	pop	{r7, pc}

200024f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
200024f4:	b480      	push	{r7}
200024f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
200024f8:	f647 03dc 	movw	r3, #30940	; 0x78dc
200024fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002500:	681b      	ldr	r3, [r3, #0]
20002502:	f103 0201 	add.w	r2, r3, #1
20002506:	f647 03dc 	movw	r3, #30940	; 0x78dc
2000250a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000250e:	601a      	str	r2, [r3, #0]
}
20002510:	46bd      	mov	sp, r7
20002512:	bc80      	pop	{r7}
20002514:	4770      	bx	lr
20002516:	bf00      	nop

20002518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
20002518:	b580      	push	{r7, lr}
2000251a:	b084      	sub	sp, #16
2000251c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
2000251e:	f04f 0300 	mov.w	r3, #0
20002522:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
20002524:	f04f 0300 	mov.w	r3, #0
20002528:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
2000252a:	f647 03dc 	movw	r3, #30940	; 0x78dc
2000252e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002532:	681b      	ldr	r3, [r3, #0]
20002534:	2b00      	cmp	r3, #0
20002536:	d109      	bne.n	2000254c <xTaskResumeAll+0x34>
20002538:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000253c:	f383 8811 	msr	BASEPRI, r3
20002540:	f3bf 8f6f 	isb	sy
20002544:	f3bf 8f4f 	dsb	sy
20002548:	60fb      	str	r3, [r7, #12]
2000254a:	e7fe      	b.n	2000254a <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
2000254c:	f001 ffce 	bl	200044ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
20002550:	f647 03dc 	movw	r3, #30940	; 0x78dc
20002554:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002558:	681b      	ldr	r3, [r3, #0]
2000255a:	f103 32ff 	add.w	r2, r3, #4294967295
2000255e:	f647 03dc 	movw	r3, #30940	; 0x78dc
20002562:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002566:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002568:	f647 03dc 	movw	r3, #30940	; 0x78dc
2000256c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002570:	681b      	ldr	r3, [r3, #0]
20002572:	2b00      	cmp	r3, #0
20002574:	f040 8098 	bne.w	200026a8 <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
20002578:	f647 03b4 	movw	r3, #30900	; 0x78b4
2000257c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002580:	681b      	ldr	r3, [r3, #0]
20002582:	2b00      	cmp	r3, #0
20002584:	f000 8090 	beq.w	200026a8 <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002588:	e04a      	b.n	20002620 <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2000258a:	f647 0374 	movw	r3, #30836	; 0x7874
2000258e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002592:	68db      	ldr	r3, [r3, #12]
20002594:	68db      	ldr	r3, [r3, #12]
20002596:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002598:	683b      	ldr	r3, [r7, #0]
2000259a:	f103 0318 	add.w	r3, r3, #24
2000259e:	4618      	mov	r0, r3
200025a0:	f7fe ff40 	bl	20001424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200025a4:	683b      	ldr	r3, [r7, #0]
200025a6:	f103 0304 	add.w	r3, r3, #4
200025aa:	4618      	mov	r0, r3
200025ac:	f7fe ff3a 	bl	20001424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
200025b0:	683b      	ldr	r3, [r7, #0]
200025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200025b4:	f04f 0201 	mov.w	r2, #1
200025b8:	fa02 f203 	lsl.w	r2, r2, r3
200025bc:	f647 03bc 	movw	r3, #30908	; 0x78bc
200025c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025c4:	681b      	ldr	r3, [r3, #0]
200025c6:	ea42 0203 	orr.w	r2, r2, r3
200025ca:	f647 03bc 	movw	r3, #30908	; 0x78bc
200025ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025d2:	601a      	str	r2, [r3, #0]
200025d4:	683b      	ldr	r3, [r7, #0]
200025d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200025d8:	4613      	mov	r3, r2
200025da:	ea4f 0383 	mov.w	r3, r3, lsl #2
200025de:	4413      	add	r3, r2
200025e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200025e4:	461a      	mov	r2, r3
200025e6:	f247 73e0 	movw	r3, #30688	; 0x77e0
200025ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025ee:	441a      	add	r2, r3
200025f0:	683b      	ldr	r3, [r7, #0]
200025f2:	f103 0304 	add.w	r3, r3, #4
200025f6:	4610      	mov	r0, r2
200025f8:	4619      	mov	r1, r3
200025fa:	f7fe feb5 	bl	20001368 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
200025fe:	683b      	ldr	r3, [r7, #0]
20002600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002602:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002606:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000260a:	681b      	ldr	r3, [r3, #0]
2000260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000260e:	429a      	cmp	r2, r3
20002610:	d306      	bcc.n	20002620 <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
20002612:	f647 03c8 	movw	r3, #30920	; 0x78c8
20002616:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000261a:	f04f 0201 	mov.w	r2, #1
2000261e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002620:	f647 0374 	movw	r3, #30836	; 0x7874
20002624:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002628:	681b      	ldr	r3, [r3, #0]
2000262a:	2b00      	cmp	r3, #0
2000262c:	d1ad      	bne.n	2000258a <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
2000262e:	683b      	ldr	r3, [r7, #0]
20002630:	2b00      	cmp	r3, #0
20002632:	d001      	beq.n	20002638 <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
20002634:	f000 fc58 	bl	20002ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
20002638:	f647 03c4 	movw	r3, #30916	; 0x78c4
2000263c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002640:	681b      	ldr	r3, [r3, #0]
20002642:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
20002644:	68bb      	ldr	r3, [r7, #8]
20002646:	2b00      	cmp	r3, #0
20002648:	d019      	beq.n	2000267e <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
2000264a:	f000 f845 	bl	200026d8 <xTaskIncrementTick>
2000264e:	4603      	mov	r3, r0
20002650:	2b00      	cmp	r3, #0
20002652:	d006      	beq.n	20002662 <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
20002654:	f647 03c8 	movw	r3, #30920	; 0x78c8
20002658:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000265c:	f04f 0201 	mov.w	r2, #1
20002660:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
20002662:	68bb      	ldr	r3, [r7, #8]
20002664:	f103 33ff 	add.w	r3, r3, #4294967295
20002668:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2000266a:	68bb      	ldr	r3, [r7, #8]
2000266c:	2b00      	cmp	r3, #0
2000266e:	d1ec      	bne.n	2000264a <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
20002670:	f647 03c4 	movw	r3, #30916	; 0x78c4
20002674:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002678:	f04f 0200 	mov.w	r2, #0
2000267c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
2000267e:	f647 03c8 	movw	r3, #30920	; 0x78c8
20002682:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002686:	681b      	ldr	r3, [r3, #0]
20002688:	2b00      	cmp	r3, #0
2000268a:	d00d      	beq.n	200026a8 <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
2000268c:	f04f 0301 	mov.w	r3, #1
20002690:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
20002692:	f64e 5304 	movw	r3, #60676	; 0xed04
20002696:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000269a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000269e:	601a      	str	r2, [r3, #0]
200026a0:	f3bf 8f4f 	dsb	sy
200026a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
200026a8:	f001 ff58 	bl	2000455c <vPortExitCritical>

	return xAlreadyYielded;
200026ac:	687b      	ldr	r3, [r7, #4]
}
200026ae:	4618      	mov	r0, r3
200026b0:	f107 0710 	add.w	r7, r7, #16
200026b4:	46bd      	mov	sp, r7
200026b6:	bd80      	pop	{r7, pc}

200026b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
200026b8:	b480      	push	{r7}
200026ba:	b083      	sub	sp, #12
200026bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
200026be:	f647 03b8 	movw	r3, #30904	; 0x78b8
200026c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026c6:	681b      	ldr	r3, [r3, #0]
200026c8:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
200026ca:	687b      	ldr	r3, [r7, #4]
}
200026cc:	4618      	mov	r0, r3
200026ce:	f107 070c 	add.w	r7, r7, #12
200026d2:	46bd      	mov	sp, r7
200026d4:	bc80      	pop	{r7}
200026d6:	4770      	bx	lr

200026d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
200026d8:	b580      	push	{r7, lr}
200026da:	b086      	sub	sp, #24
200026dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
200026de:	f04f 0300 	mov.w	r3, #0
200026e2:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200026e4:	f647 03dc 	movw	r3, #30940	; 0x78dc
200026e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026ec:	681b      	ldr	r3, [r3, #0]
200026ee:	2b00      	cmp	r3, #0
200026f0:	f040 80dc 	bne.w	200028ac <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
200026f4:	f647 03b8 	movw	r3, #30904	; 0x78b8
200026f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026fc:	681b      	ldr	r3, [r3, #0]
200026fe:	f103 0301 	add.w	r3, r3, #1
20002702:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
20002704:	f647 03b8 	movw	r3, #30904	; 0x78b8
20002708:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000270c:	68fa      	ldr	r2, [r7, #12]
2000270e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
20002710:	68fb      	ldr	r3, [r7, #12]
20002712:	2b00      	cmp	r3, #0
20002714:	d135      	bne.n	20002782 <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
20002716:	f647 036c 	movw	r3, #30828	; 0x786c
2000271a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000271e:	681b      	ldr	r3, [r3, #0]
20002720:	681b      	ldr	r3, [r3, #0]
20002722:	2b00      	cmp	r3, #0
20002724:	d009      	beq.n	2000273a <xTaskIncrementTick+0x62>
20002726:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000272a:	f383 8811 	msr	BASEPRI, r3
2000272e:	f3bf 8f6f 	isb	sy
20002732:	f3bf 8f4f 	dsb	sy
20002736:	617b      	str	r3, [r7, #20]
20002738:	e7fe      	b.n	20002738 <xTaskIncrementTick+0x60>
2000273a:	f647 036c 	movw	r3, #30828	; 0x786c
2000273e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002742:	681b      	ldr	r3, [r3, #0]
20002744:	613b      	str	r3, [r7, #16]
20002746:	f647 0370 	movw	r3, #30832	; 0x7870
2000274a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000274e:	681a      	ldr	r2, [r3, #0]
20002750:	f647 036c 	movw	r3, #30828	; 0x786c
20002754:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002758:	601a      	str	r2, [r3, #0]
2000275a:	f647 0370 	movw	r3, #30832	; 0x7870
2000275e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002762:	693a      	ldr	r2, [r7, #16]
20002764:	601a      	str	r2, [r3, #0]
20002766:	f647 03cc 	movw	r3, #30924	; 0x78cc
2000276a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000276e:	681b      	ldr	r3, [r3, #0]
20002770:	f103 0201 	add.w	r2, r3, #1
20002774:	f647 03cc 	movw	r3, #30924	; 0x78cc
20002778:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000277c:	601a      	str	r2, [r3, #0]
2000277e:	f000 fbb3 	bl	20002ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
20002782:	f647 03d4 	movw	r3, #30932	; 0x78d4
20002786:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000278a:	681b      	ldr	r3, [r3, #0]
2000278c:	68fa      	ldr	r2, [r7, #12]
2000278e:	429a      	cmp	r2, r3
20002790:	d373      	bcc.n	2000287a <xTaskIncrementTick+0x1a2>
20002792:	e000      	b.n	20002796 <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002794:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002796:	f647 036c 	movw	r3, #30828	; 0x786c
2000279a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000279e:	681b      	ldr	r3, [r3, #0]
200027a0:	681b      	ldr	r3, [r3, #0]
200027a2:	2b00      	cmp	r3, #0
200027a4:	d102      	bne.n	200027ac <xTaskIncrementTick+0xd4>
200027a6:	f04f 0301 	mov.w	r3, #1
200027aa:	e001      	b.n	200027b0 <xTaskIncrementTick+0xd8>
200027ac:	f04f 0300 	mov.w	r3, #0
200027b0:	2b00      	cmp	r3, #0
200027b2:	d007      	beq.n	200027c4 <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200027b4:	f647 03d4 	movw	r3, #30932	; 0x78d4
200027b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027bc:	f04f 32ff 	mov.w	r2, #4294967295
200027c0:	601a      	str	r2, [r3, #0]
					break;
200027c2:	e05a      	b.n	2000287a <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
200027c4:	f647 036c 	movw	r3, #30828	; 0x786c
200027c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027cc:	681b      	ldr	r3, [r3, #0]
200027ce:	68db      	ldr	r3, [r3, #12]
200027d0:	68db      	ldr	r3, [r3, #12]
200027d2:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
200027d4:	683b      	ldr	r3, [r7, #0]
200027d6:	685b      	ldr	r3, [r3, #4]
200027d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
200027da:	68fa      	ldr	r2, [r7, #12]
200027dc:	687b      	ldr	r3, [r7, #4]
200027de:	429a      	cmp	r2, r3
200027e0:	d206      	bcs.n	200027f0 <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
200027e2:	f647 03d4 	movw	r3, #30932	; 0x78d4
200027e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027ea:	687a      	ldr	r2, [r7, #4]
200027ec:	601a      	str	r2, [r3, #0]
						break;
200027ee:	e044      	b.n	2000287a <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200027f0:	683b      	ldr	r3, [r7, #0]
200027f2:	f103 0304 	add.w	r3, r3, #4
200027f6:	4618      	mov	r0, r3
200027f8:	f7fe fe14 	bl	20001424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
200027fc:	683b      	ldr	r3, [r7, #0]
200027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002800:	2b00      	cmp	r3, #0
20002802:	d005      	beq.n	20002810 <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002804:	683b      	ldr	r3, [r7, #0]
20002806:	f103 0318 	add.w	r3, r3, #24
2000280a:	4618      	mov	r0, r3
2000280c:	f7fe fe0a 	bl	20001424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
20002810:	683b      	ldr	r3, [r7, #0]
20002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002814:	f04f 0201 	mov.w	r2, #1
20002818:	fa02 f203 	lsl.w	r2, r2, r3
2000281c:	f647 03bc 	movw	r3, #30908	; 0x78bc
20002820:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002824:	681b      	ldr	r3, [r3, #0]
20002826:	ea42 0203 	orr.w	r2, r2, r3
2000282a:	f647 03bc 	movw	r3, #30908	; 0x78bc
2000282e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002832:	601a      	str	r2, [r3, #0]
20002834:	683b      	ldr	r3, [r7, #0]
20002836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002838:	4613      	mov	r3, r2
2000283a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000283e:	4413      	add	r3, r2
20002840:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002844:	461a      	mov	r2, r3
20002846:	f247 73e0 	movw	r3, #30688	; 0x77e0
2000284a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000284e:	441a      	add	r2, r3
20002850:	683b      	ldr	r3, [r7, #0]
20002852:	f103 0304 	add.w	r3, r3, #4
20002856:	4610      	mov	r0, r2
20002858:	4619      	mov	r1, r3
2000285a:	f7fe fd85 	bl	20001368 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2000285e:	683b      	ldr	r3, [r7, #0]
20002860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002862:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002866:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000286a:	681b      	ldr	r3, [r3, #0]
2000286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000286e:	429a      	cmp	r2, r3
20002870:	d390      	bcc.n	20002794 <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
20002872:	f04f 0301 	mov.w	r3, #1
20002876:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002878:	e78d      	b.n	20002796 <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
2000287a:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002882:	681b      	ldr	r3, [r3, #0]
20002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002886:	4613      	mov	r3, r2
20002888:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000288c:	4413      	add	r3, r2
2000288e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002892:	461a      	mov	r2, r3
20002894:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002898:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000289c:	4413      	add	r3, r2
2000289e:	681b      	ldr	r3, [r3, #0]
200028a0:	2b01      	cmp	r3, #1
200028a2:	d910      	bls.n	200028c6 <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
200028a4:	f04f 0301 	mov.w	r3, #1
200028a8:	60bb      	str	r3, [r7, #8]
200028aa:	e00d      	b.n	200028c8 <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
200028ac:	f647 03c4 	movw	r3, #30916	; 0x78c4
200028b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028b4:	681b      	ldr	r3, [r3, #0]
200028b6:	f103 0201 	add.w	r2, r3, #1
200028ba:	f647 03c4 	movw	r3, #30916	; 0x78c4
200028be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028c2:	601a      	str	r2, [r3, #0]
200028c4:	e000      	b.n	200028c8 <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
200028c6:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
200028c8:	f647 03c8 	movw	r3, #30920	; 0x78c8
200028cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028d0:	681b      	ldr	r3, [r3, #0]
200028d2:	2b00      	cmp	r3, #0
200028d4:	d002      	beq.n	200028dc <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
200028d6:	f04f 0301 	mov.w	r3, #1
200028da:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
200028dc:	68bb      	ldr	r3, [r7, #8]
}
200028de:	4618      	mov	r0, r3
200028e0:	f107 0718 	add.w	r7, r7, #24
200028e4:	46bd      	mov	sp, r7
200028e6:	bd80      	pop	{r7, pc}

200028e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
200028e8:	b580      	push	{r7, lr}
200028ea:	b088      	sub	sp, #32
200028ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
200028ee:	f647 03dc 	movw	r3, #30940	; 0x78dc
200028f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028f6:	681b      	ldr	r3, [r3, #0]
200028f8:	2b00      	cmp	r3, #0
200028fa:	d007      	beq.n	2000290c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
200028fc:	f647 03c8 	movw	r3, #30920	; 0x78c8
20002900:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002904:	f04f 0201 	mov.w	r2, #1
20002908:	601a      	str	r2, [r3, #0]
2000290a:	e0bc      	b.n	20002a86 <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
2000290c:	f647 03c8 	movw	r3, #30920	; 0x78c8
20002910:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002914:	f04f 0200 	mov.w	r2, #0
20002918:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2000291a:	f7fd fd25 	bl	20000368 <ulGetRunTimeCounterValue>
2000291e:	4602      	mov	r2, r0
20002920:	f647 03e4 	movw	r3, #30948	; 0x78e4
20002924:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002928:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
2000292a:	f647 03e4 	movw	r3, #30948	; 0x78e4
2000292e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002932:	681a      	ldr	r2, [r3, #0]
20002934:	f647 03e0 	movw	r3, #30944	; 0x78e0
20002938:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000293c:	681b      	ldr	r3, [r3, #0]
2000293e:	429a      	cmp	r2, r3
20002940:	d913      	bls.n	2000296a <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
20002942:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002946:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000294a:	681a      	ldr	r2, [r3, #0]
2000294c:	6d11      	ldr	r1, [r2, #80]	; 0x50
2000294e:	f647 03e4 	movw	r3, #30948	; 0x78e4
20002952:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002956:	6818      	ldr	r0, [r3, #0]
20002958:	f647 03e0 	movw	r3, #30944	; 0x78e0
2000295c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002960:	681b      	ldr	r3, [r3, #0]
20002962:	ebc3 0300 	rsb	r3, r3, r0
20002966:	440b      	add	r3, r1
20002968:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
2000296a:	f647 03e4 	movw	r3, #30948	; 0x78e4
2000296e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002972:	681a      	ldr	r2, [r3, #0]
20002974:	f647 03e0 	movw	r3, #30944	; 0x78e0
20002978:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000297c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
2000297e:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002982:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002986:	681b      	ldr	r3, [r3, #0]
20002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000298a:	607b      	str	r3, [r7, #4]
2000298c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
20002990:	60bb      	str	r3, [r7, #8]
20002992:	687b      	ldr	r3, [r7, #4]
20002994:	681a      	ldr	r2, [r3, #0]
20002996:	68bb      	ldr	r3, [r7, #8]
20002998:	429a      	cmp	r2, r3
2000299a:	d114      	bne.n	200029c6 <vTaskSwitchContext+0xde>
2000299c:	687b      	ldr	r3, [r7, #4]
2000299e:	f103 0304 	add.w	r3, r3, #4
200029a2:	681a      	ldr	r2, [r3, #0]
200029a4:	68bb      	ldr	r3, [r7, #8]
200029a6:	429a      	cmp	r2, r3
200029a8:	d10d      	bne.n	200029c6 <vTaskSwitchContext+0xde>
200029aa:	687b      	ldr	r3, [r7, #4]
200029ac:	f103 0308 	add.w	r3, r3, #8
200029b0:	681a      	ldr	r2, [r3, #0]
200029b2:	68bb      	ldr	r3, [r7, #8]
200029b4:	429a      	cmp	r2, r3
200029b6:	d106      	bne.n	200029c6 <vTaskSwitchContext+0xde>
200029b8:	687b      	ldr	r3, [r7, #4]
200029ba:	f103 030c 	add.w	r3, r3, #12
200029be:	681a      	ldr	r2, [r3, #0]
200029c0:	68bb      	ldr	r3, [r7, #8]
200029c2:	429a      	cmp	r2, r3
200029c4:	d00f      	beq.n	200029e6 <vTaskSwitchContext+0xfe>
200029c6:	f247 73dc 	movw	r3, #30684	; 0x77dc
200029ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029ce:	681a      	ldr	r2, [r3, #0]
200029d0:	f247 73dc 	movw	r3, #30684	; 0x77dc
200029d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029d8:	681b      	ldr	r3, [r3, #0]
200029da:	f103 0334 	add.w	r3, r3, #52	; 0x34
200029de:	4610      	mov	r0, r2
200029e0:	4619      	mov	r1, r3
200029e2:	f7fd fd2f 	bl	20000444 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
200029e6:	f647 03bc 	movw	r3, #30908	; 0x78bc
200029ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029ee:	681b      	ldr	r3, [r3, #0]
200029f0:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
200029f2:	697b      	ldr	r3, [r7, #20]
200029f4:	fab3 f383 	clz	r3, r3
200029f8:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
200029fa:	7efb      	ldrb	r3, [r7, #27]
200029fc:	f1c3 031f 	rsb	r3, r3, #31
20002a00:	60fb      	str	r3, [r7, #12]
20002a02:	68fa      	ldr	r2, [r7, #12]
20002a04:	4613      	mov	r3, r2
20002a06:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a0a:	4413      	add	r3, r2
20002a0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a10:	461a      	mov	r2, r3
20002a12:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a1a:	4413      	add	r3, r2
20002a1c:	681b      	ldr	r3, [r3, #0]
20002a1e:	2b00      	cmp	r3, #0
20002a20:	d109      	bne.n	20002a36 <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20002a22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002a26:	f383 8811 	msr	BASEPRI, r3
20002a2a:	f3bf 8f6f 	isb	sy
20002a2e:	f3bf 8f4f 	dsb	sy
20002a32:	61fb      	str	r3, [r7, #28]
20002a34:	e7fe      	b.n	20002a34 <vTaskSwitchContext+0x14c>
20002a36:	68fa      	ldr	r2, [r7, #12]
20002a38:	4613      	mov	r3, r2
20002a3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a3e:	4413      	add	r3, r2
20002a40:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a44:	461a      	mov	r2, r3
20002a46:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a4e:	4413      	add	r3, r2
20002a50:	613b      	str	r3, [r7, #16]
20002a52:	693b      	ldr	r3, [r7, #16]
20002a54:	685b      	ldr	r3, [r3, #4]
20002a56:	685a      	ldr	r2, [r3, #4]
20002a58:	693b      	ldr	r3, [r7, #16]
20002a5a:	605a      	str	r2, [r3, #4]
20002a5c:	693b      	ldr	r3, [r7, #16]
20002a5e:	685a      	ldr	r2, [r3, #4]
20002a60:	693b      	ldr	r3, [r7, #16]
20002a62:	f103 0308 	add.w	r3, r3, #8
20002a66:	429a      	cmp	r2, r3
20002a68:	d104      	bne.n	20002a74 <vTaskSwitchContext+0x18c>
20002a6a:	693b      	ldr	r3, [r7, #16]
20002a6c:	685b      	ldr	r3, [r3, #4]
20002a6e:	685a      	ldr	r2, [r3, #4]
20002a70:	693b      	ldr	r3, [r7, #16]
20002a72:	605a      	str	r2, [r3, #4]
20002a74:	693b      	ldr	r3, [r7, #16]
20002a76:	685b      	ldr	r3, [r3, #4]
20002a78:	68db      	ldr	r3, [r3, #12]
20002a7a:	461a      	mov	r2, r3
20002a7c:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a84:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
20002a86:	f107 0720 	add.w	r7, r7, #32
20002a8a:	46bd      	mov	sp, r7
20002a8c:	bd80      	pop	{r7, pc}
20002a8e:	bf00      	nop

20002a90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002a90:	b580      	push	{r7, lr}
20002a92:	b084      	sub	sp, #16
20002a94:	af00      	add	r7, sp, #0
20002a96:	6078      	str	r0, [r7, #4]
20002a98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002a9a:	687b      	ldr	r3, [r7, #4]
20002a9c:	2b00      	cmp	r3, #0
20002a9e:	d109      	bne.n	20002ab4 <vTaskPlaceOnEventList+0x24>
20002aa0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002aa4:	f383 8811 	msr	BASEPRI, r3
20002aa8:	f3bf 8f6f 	isb	sy
20002aac:	f3bf 8f4f 	dsb	sy
20002ab0:	60fb      	str	r3, [r7, #12]
20002ab2:	e7fe      	b.n	20002ab2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002ab4:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002abc:	681b      	ldr	r3, [r3, #0]
20002abe:	f103 0318 	add.w	r3, r3, #24
20002ac2:	6878      	ldr	r0, [r7, #4]
20002ac4:	4619      	mov	r1, r3
20002ac6:	f7fe fc73 	bl	200013b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002aca:	6838      	ldr	r0, [r7, #0]
20002acc:	f04f 0101 	mov.w	r1, #1
20002ad0:	f000 fd42 	bl	20003558 <prvAddCurrentTaskToDelayedList>
}
20002ad4:	f107 0710 	add.w	r7, r7, #16
20002ad8:	46bd      	mov	sp, r7
20002ada:	bd80      	pop	{r7, pc}

20002adc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002adc:	b580      	push	{r7, lr}
20002ade:	b086      	sub	sp, #24
20002ae0:	af00      	add	r7, sp, #0
20002ae2:	60f8      	str	r0, [r7, #12]
20002ae4:	60b9      	str	r1, [r7, #8]
20002ae6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002ae8:	68fb      	ldr	r3, [r7, #12]
20002aea:	2b00      	cmp	r3, #0
20002aec:	d109      	bne.n	20002b02 <vTaskPlaceOnEventListRestricted+0x26>
20002aee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002af2:	f383 8811 	msr	BASEPRI, r3
20002af6:	f3bf 8f6f 	isb	sy
20002afa:	f3bf 8f4f 	dsb	sy
20002afe:	617b      	str	r3, [r7, #20]
20002b00:	e7fe      	b.n	20002b00 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002b02:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b0a:	681b      	ldr	r3, [r3, #0]
20002b0c:	f103 0318 	add.w	r3, r3, #24
20002b10:	68f8      	ldr	r0, [r7, #12]
20002b12:	4619      	mov	r1, r3
20002b14:	f7fe fc28 	bl	20001368 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
20002b18:	687b      	ldr	r3, [r7, #4]
20002b1a:	2b00      	cmp	r3, #0
20002b1c:	d002      	beq.n	20002b24 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
20002b1e:	f04f 33ff 	mov.w	r3, #4294967295
20002b22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
20002b24:	68b8      	ldr	r0, [r7, #8]
20002b26:	6879      	ldr	r1, [r7, #4]
20002b28:	f000 fd16 	bl	20003558 <prvAddCurrentTaskToDelayedList>
	}
20002b2c:	f107 0718 	add.w	r7, r7, #24
20002b30:	46bd      	mov	sp, r7
20002b32:	bd80      	pop	{r7, pc}

20002b34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002b34:	b580      	push	{r7, lr}
20002b36:	b086      	sub	sp, #24
20002b38:	af00      	add	r7, sp, #0
20002b3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
20002b3c:	687b      	ldr	r3, [r7, #4]
20002b3e:	68db      	ldr	r3, [r3, #12]
20002b40:	68db      	ldr	r3, [r3, #12]
20002b42:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
20002b44:	68fb      	ldr	r3, [r7, #12]
20002b46:	2b00      	cmp	r3, #0
20002b48:	d109      	bne.n	20002b5e <xTaskRemoveFromEventList+0x2a>
20002b4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002b4e:	f383 8811 	msr	BASEPRI, r3
20002b52:	f3bf 8f6f 	isb	sy
20002b56:	f3bf 8f4f 	dsb	sy
20002b5a:	617b      	str	r3, [r7, #20]
20002b5c:	e7fe      	b.n	20002b5c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002b5e:	68fb      	ldr	r3, [r7, #12]
20002b60:	f103 0318 	add.w	r3, r3, #24
20002b64:	4618      	mov	r0, r3
20002b66:	f7fe fc5d 	bl	20001424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002b6a:	f647 03dc 	movw	r3, #30940	; 0x78dc
20002b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b72:	681b      	ldr	r3, [r3, #0]
20002b74:	2b00      	cmp	r3, #0
20002b76:	d12d      	bne.n	20002bd4 <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002b78:	68fb      	ldr	r3, [r7, #12]
20002b7a:	f103 0304 	add.w	r3, r3, #4
20002b7e:	4618      	mov	r0, r3
20002b80:	f7fe fc50 	bl	20001424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002b84:	68fb      	ldr	r3, [r7, #12]
20002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002b88:	f04f 0201 	mov.w	r2, #1
20002b8c:	fa02 f203 	lsl.w	r2, r2, r3
20002b90:	f647 03bc 	movw	r3, #30908	; 0x78bc
20002b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b98:	681b      	ldr	r3, [r3, #0]
20002b9a:	ea42 0203 	orr.w	r2, r2, r3
20002b9e:	f647 03bc 	movw	r3, #30908	; 0x78bc
20002ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ba6:	601a      	str	r2, [r3, #0]
20002ba8:	68fb      	ldr	r3, [r7, #12]
20002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002bac:	4613      	mov	r3, r2
20002bae:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002bb2:	4413      	add	r3, r2
20002bb4:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002bb8:	461a      	mov	r2, r3
20002bba:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bc2:	441a      	add	r2, r3
20002bc4:	68fb      	ldr	r3, [r7, #12]
20002bc6:	f103 0304 	add.w	r3, r3, #4
20002bca:	4610      	mov	r0, r2
20002bcc:	4619      	mov	r1, r3
20002bce:	f7fe fbcb 	bl	20001368 <vListInsertEnd>
20002bd2:	e009      	b.n	20002be8 <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002bd4:	68fb      	ldr	r3, [r7, #12]
20002bd6:	f103 0318 	add.w	r3, r3, #24
20002bda:	f647 0074 	movw	r0, #30836	; 0x7874
20002bde:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002be2:	4619      	mov	r1, r3
20002be4:	f7fe fbc0 	bl	20001368 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002be8:	68fb      	ldr	r3, [r7, #12]
20002bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002bec:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bf4:	681b      	ldr	r3, [r3, #0]
20002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002bf8:	429a      	cmp	r2, r3
20002bfa:	d90a      	bls.n	20002c12 <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002bfc:	f04f 0301 	mov.w	r3, #1
20002c00:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002c02:	f647 03c8 	movw	r3, #30920	; 0x78c8
20002c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c0a:	f04f 0201 	mov.w	r2, #1
20002c0e:	601a      	str	r2, [r3, #0]
20002c10:	e002      	b.n	20002c18 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
20002c12:	f04f 0300 	mov.w	r3, #0
20002c16:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
20002c18:	693b      	ldr	r3, [r7, #16]
}
20002c1a:	4618      	mov	r0, r3
20002c1c:	f107 0718 	add.w	r7, r7, #24
20002c20:	46bd      	mov	sp, r7
20002c22:	bd80      	pop	{r7, pc}

20002c24 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002c24:	b480      	push	{r7}
20002c26:	b085      	sub	sp, #20
20002c28:	af00      	add	r7, sp, #0
20002c2a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
20002c2c:	687b      	ldr	r3, [r7, #4]
20002c2e:	2b00      	cmp	r3, #0
20002c30:	d109      	bne.n	20002c46 <vTaskSetTimeOutState+0x22>
20002c32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002c36:	f383 8811 	msr	BASEPRI, r3
20002c3a:	f3bf 8f6f 	isb	sy
20002c3e:	f3bf 8f4f 	dsb	sy
20002c42:	60fb      	str	r3, [r7, #12]
20002c44:	e7fe      	b.n	20002c44 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002c46:	f647 03cc 	movw	r3, #30924	; 0x78cc
20002c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c4e:	681a      	ldr	r2, [r3, #0]
20002c50:	687b      	ldr	r3, [r7, #4]
20002c52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002c54:	f647 03b8 	movw	r3, #30904	; 0x78b8
20002c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c5c:	681a      	ldr	r2, [r3, #0]
20002c5e:	687b      	ldr	r3, [r7, #4]
20002c60:	605a      	str	r2, [r3, #4]
}
20002c62:	f107 0714 	add.w	r7, r7, #20
20002c66:	46bd      	mov	sp, r7
20002c68:	bc80      	pop	{r7}
20002c6a:	4770      	bx	lr

20002c6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002c6c:	b580      	push	{r7, lr}
20002c6e:	b086      	sub	sp, #24
20002c70:	af00      	add	r7, sp, #0
20002c72:	6078      	str	r0, [r7, #4]
20002c74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002c76:	687b      	ldr	r3, [r7, #4]
20002c78:	2b00      	cmp	r3, #0
20002c7a:	d109      	bne.n	20002c90 <xTaskCheckForTimeOut+0x24>
20002c7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002c80:	f383 8811 	msr	BASEPRI, r3
20002c84:	f3bf 8f6f 	isb	sy
20002c88:	f3bf 8f4f 	dsb	sy
20002c8c:	613b      	str	r3, [r7, #16]
20002c8e:	e7fe      	b.n	20002c8e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
20002c90:	683b      	ldr	r3, [r7, #0]
20002c92:	2b00      	cmp	r3, #0
20002c94:	d109      	bne.n	20002caa <xTaskCheckForTimeOut+0x3e>
20002c96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002c9a:	f383 8811 	msr	BASEPRI, r3
20002c9e:	f3bf 8f6f 	isb	sy
20002ca2:	f3bf 8f4f 	dsb	sy
20002ca6:	617b      	str	r3, [r7, #20]
20002ca8:	e7fe      	b.n	20002ca8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
20002caa:	f001 fc1f 	bl	200044ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002cae:	f647 03b8 	movw	r3, #30904	; 0x78b8
20002cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cb6:	681b      	ldr	r3, [r3, #0]
20002cb8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002cba:	683b      	ldr	r3, [r7, #0]
20002cbc:	681b      	ldr	r3, [r3, #0]
20002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
20002cc2:	d103      	bne.n	20002ccc <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002cc4:	f04f 0300 	mov.w	r3, #0
20002cc8:	60bb      	str	r3, [r7, #8]
20002cca:	e02e      	b.n	20002d2a <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002ccc:	687b      	ldr	r3, [r7, #4]
20002cce:	681a      	ldr	r2, [r3, #0]
20002cd0:	f647 03cc 	movw	r3, #30924	; 0x78cc
20002cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cd8:	681b      	ldr	r3, [r3, #0]
20002cda:	429a      	cmp	r2, r3
20002cdc:	d008      	beq.n	20002cf0 <xTaskCheckForTimeOut+0x84>
20002cde:	687b      	ldr	r3, [r7, #4]
20002ce0:	685a      	ldr	r2, [r3, #4]
20002ce2:	68fb      	ldr	r3, [r7, #12]
20002ce4:	429a      	cmp	r2, r3
20002ce6:	d803      	bhi.n	20002cf0 <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002ce8:	f04f 0301 	mov.w	r3, #1
20002cec:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002cee:	e01c      	b.n	20002d2a <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002cf0:	687b      	ldr	r3, [r7, #4]
20002cf2:	685b      	ldr	r3, [r3, #4]
20002cf4:	68fa      	ldr	r2, [r7, #12]
20002cf6:	ebc3 0202 	rsb	r2, r3, r2
20002cfa:	683b      	ldr	r3, [r7, #0]
20002cfc:	681b      	ldr	r3, [r3, #0]
20002cfe:	429a      	cmp	r2, r3
20002d00:	d210      	bcs.n	20002d24 <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
20002d02:	683b      	ldr	r3, [r7, #0]
20002d04:	681a      	ldr	r2, [r3, #0]
20002d06:	687b      	ldr	r3, [r7, #4]
20002d08:	6859      	ldr	r1, [r3, #4]
20002d0a:	68fb      	ldr	r3, [r7, #12]
20002d0c:	ebc3 0301 	rsb	r3, r3, r1
20002d10:	441a      	add	r2, r3
20002d12:	683b      	ldr	r3, [r7, #0]
20002d14:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
20002d16:	6878      	ldr	r0, [r7, #4]
20002d18:	f7ff ff84 	bl	20002c24 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
20002d1c:	f04f 0300 	mov.w	r3, #0
20002d20:	60bb      	str	r3, [r7, #8]
20002d22:	e002      	b.n	20002d2a <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
20002d24:	f04f 0301 	mov.w	r3, #1
20002d28:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
20002d2a:	f001 fc17 	bl	2000455c <vPortExitCritical>

	return xReturn;
20002d2e:	68bb      	ldr	r3, [r7, #8]
}
20002d30:	4618      	mov	r0, r3
20002d32:	f107 0718 	add.w	r7, r7, #24
20002d36:	46bd      	mov	sp, r7
20002d38:	bd80      	pop	{r7, pc}
20002d3a:	bf00      	nop

20002d3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002d3c:	b480      	push	{r7}
20002d3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
20002d40:	f647 03c8 	movw	r3, #30920	; 0x78c8
20002d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d48:	f04f 0201 	mov.w	r2, #1
20002d4c:	601a      	str	r2, [r3, #0]
}
20002d4e:	46bd      	mov	sp, r7
20002d50:	bc80      	pop	{r7}
20002d52:	4770      	bx	lr

20002d54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002d54:	b580      	push	{r7, lr}
20002d56:	b082      	sub	sp, #8
20002d58:	af00      	add	r7, sp, #0
20002d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002d5c:	f000 f868 	bl	20002e30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
20002d60:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d68:	681b      	ldr	r3, [r3, #0]
20002d6a:	2b01      	cmp	r3, #1
20002d6c:	d90a      	bls.n	20002d84 <prvIdleTask+0x30>
			{
				taskYIELD();
20002d6e:	f64e 5304 	movw	r3, #60676	; 0xed04
20002d72:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002d7a:	601a      	str	r2, [r3, #0]
20002d7c:	f3bf 8f4f 	dsb	sy
20002d80:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
20002d84:	f7fd fb58 	bl	20000438 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
20002d88:	e7e8      	b.n	20002d5c <prvIdleTask+0x8>
20002d8a:	bf00      	nop

20002d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002d8c:	b580      	push	{r7, lr}
20002d8e:	b082      	sub	sp, #8
20002d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002d92:	f04f 0300 	mov.w	r3, #0
20002d96:	607b      	str	r3, [r7, #4]
20002d98:	e013      	b.n	20002dc2 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002d9a:	687a      	ldr	r2, [r7, #4]
20002d9c:	4613      	mov	r3, r2
20002d9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002da2:	4413      	add	r3, r2
20002da4:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002da8:	461a      	mov	r2, r3
20002daa:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002db2:	4413      	add	r3, r2
20002db4:	4618      	mov	r0, r3
20002db6:	f7fe faa5 	bl	20001304 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002dba:	687b      	ldr	r3, [r7, #4]
20002dbc:	f103 0301 	add.w	r3, r3, #1
20002dc0:	607b      	str	r3, [r7, #4]
20002dc2:	687b      	ldr	r3, [r7, #4]
20002dc4:	2b04      	cmp	r3, #4
20002dc6:	d9e8      	bls.n	20002d9a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
20002dc8:	f647 0044 	movw	r0, #30788	; 0x7844
20002dcc:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002dd0:	f7fe fa98 	bl	20001304 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002dd4:	f647 0058 	movw	r0, #30808	; 0x7858
20002dd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002ddc:	f7fe fa92 	bl	20001304 <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002de0:	f647 0074 	movw	r0, #30836	; 0x7874
20002de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002de8:	f7fe fa8c 	bl	20001304 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002dec:	f647 0088 	movw	r0, #30856	; 0x7888
20002df0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002df4:	f7fe fa86 	bl	20001304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002df8:	f647 00a0 	movw	r0, #30880	; 0x78a0
20002dfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002e00:	f7fe fa80 	bl	20001304 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
20002e04:	f647 036c 	movw	r3, #30828	; 0x786c
20002e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e0c:	f647 0244 	movw	r2, #30788	; 0x7844
20002e10:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002e14:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002e16:	f647 0370 	movw	r3, #30832	; 0x7870
20002e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e1e:	f647 0258 	movw	r2, #30808	; 0x7858
20002e22:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002e26:	601a      	str	r2, [r3, #0]
}
20002e28:	f107 0708 	add.w	r7, r7, #8
20002e2c:	46bd      	mov	sp, r7
20002e2e:	bd80      	pop	{r7, pc}

20002e30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002e30:	b580      	push	{r7, lr}
20002e32:	b082      	sub	sp, #8
20002e34:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002e36:	e03c      	b.n	20002eb2 <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
20002e38:	f7ff fb5c 	bl	200024f4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
20002e3c:	f647 0388 	movw	r3, #30856	; 0x7888
20002e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e44:	681b      	ldr	r3, [r3, #0]
20002e46:	2b00      	cmp	r3, #0
20002e48:	bf14      	ite	ne
20002e4a:	2300      	movne	r3, #0
20002e4c:	2301      	moveq	r3, #1
20002e4e:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
20002e50:	f7ff fb62 	bl	20002518 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
20002e54:	683b      	ldr	r3, [r7, #0]
20002e56:	2b00      	cmp	r3, #0
20002e58:	d12b      	bne.n	20002eb2 <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
20002e5a:	f001 fb47 	bl	200044ec <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
20002e5e:	f647 0388 	movw	r3, #30856	; 0x7888
20002e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e66:	68db      	ldr	r3, [r3, #12]
20002e68:	68db      	ldr	r3, [r3, #12]
20002e6a:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002e6c:	687b      	ldr	r3, [r7, #4]
20002e6e:	f103 0304 	add.w	r3, r3, #4
20002e72:	4618      	mov	r0, r3
20002e74:	f7fe fad6 	bl	20001424 <uxListRemove>
					--uxCurrentNumberOfTasks;
20002e78:	f647 03b4 	movw	r3, #30900	; 0x78b4
20002e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e80:	681b      	ldr	r3, [r3, #0]
20002e82:	f103 32ff 	add.w	r2, r3, #4294967295
20002e86:	f647 03b4 	movw	r3, #30900	; 0x78b4
20002e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e8e:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
20002e90:	f647 039c 	movw	r3, #30876	; 0x789c
20002e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e98:	681b      	ldr	r3, [r3, #0]
20002e9a:	f103 32ff 	add.w	r2, r3, #4294967295
20002e9e:	f647 039c 	movw	r3, #30876	; 0x789c
20002ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ea6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
20002ea8:	f001 fb58 	bl	2000455c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
20002eac:	6878      	ldr	r0, [r7, #4]
20002eae:	f000 f80b 	bl	20002ec8 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002eb2:	f647 039c 	movw	r3, #30876	; 0x789c
20002eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002eba:	681b      	ldr	r3, [r3, #0]
20002ebc:	2b00      	cmp	r3, #0
20002ebe:	d1bb      	bne.n	20002e38 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002ec0:	f107 0708 	add.w	r7, r7, #8
20002ec4:	46bd      	mov	sp, r7
20002ec6:	bd80      	pop	{r7, pc}

20002ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20002ec8:	b580      	push	{r7, lr}
20002eca:	b082      	sub	sp, #8
20002ecc:	af00      	add	r7, sp, #0
20002ece:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
20002ed0:	687b      	ldr	r3, [r7, #4]
20002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002ed4:	4618      	mov	r0, r3
20002ed6:	f001 f8b7 	bl	20004048 <vPortFree>
			vPortFree( pxTCB );
20002eda:	6878      	ldr	r0, [r7, #4]
20002edc:	f001 f8b4 	bl	20004048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20002ee0:	f107 0708 	add.w	r7, r7, #8
20002ee4:	46bd      	mov	sp, r7
20002ee6:	bd80      	pop	{r7, pc}

20002ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002ee8:	b480      	push	{r7}
20002eea:	b083      	sub	sp, #12
20002eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002eee:	f647 036c 	movw	r3, #30828	; 0x786c
20002ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ef6:	681b      	ldr	r3, [r3, #0]
20002ef8:	681b      	ldr	r3, [r3, #0]
20002efa:	2b00      	cmp	r3, #0
20002efc:	d102      	bne.n	20002f04 <prvResetNextTaskUnblockTime+0x1c>
20002efe:	f04f 0301 	mov.w	r3, #1
20002f02:	e001      	b.n	20002f08 <prvResetNextTaskUnblockTime+0x20>
20002f04:	f04f 0300 	mov.w	r3, #0
20002f08:	2b00      	cmp	r3, #0
20002f0a:	d007      	beq.n	20002f1c <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20002f0c:	f647 03d4 	movw	r3, #30932	; 0x78d4
20002f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f14:	f04f 32ff 	mov.w	r2, #4294967295
20002f18:	601a      	str	r2, [r3, #0]
20002f1a:	e00e      	b.n	20002f3a <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
20002f1c:	f647 036c 	movw	r3, #30828	; 0x786c
20002f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f24:	681b      	ldr	r3, [r3, #0]
20002f26:	68db      	ldr	r3, [r3, #12]
20002f28:	68db      	ldr	r3, [r3, #12]
20002f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
20002f2c:	687b      	ldr	r3, [r7, #4]
20002f2e:	685a      	ldr	r2, [r3, #4]
20002f30:	f647 03d4 	movw	r3, #30932	; 0x78d4
20002f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f38:	601a      	str	r2, [r3, #0]
	}
}
20002f3a:	f107 070c 	add.w	r7, r7, #12
20002f3e:	46bd      	mov	sp, r7
20002f40:	bc80      	pop	{r7}
20002f42:	4770      	bx	lr

20002f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20002f44:	b480      	push	{r7}
20002f46:	b083      	sub	sp, #12
20002f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
20002f4a:	f647 03c0 	movw	r3, #30912	; 0x78c0
20002f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f52:	681b      	ldr	r3, [r3, #0]
20002f54:	2b00      	cmp	r3, #0
20002f56:	d103      	bne.n	20002f60 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
20002f58:	f04f 0301 	mov.w	r3, #1
20002f5c:	607b      	str	r3, [r7, #4]
20002f5e:	e00d      	b.n	20002f7c <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002f60:	f647 03dc 	movw	r3, #30940	; 0x78dc
20002f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f68:	681b      	ldr	r3, [r3, #0]
20002f6a:	2b00      	cmp	r3, #0
20002f6c:	d103      	bne.n	20002f76 <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
20002f6e:	f04f 0302 	mov.w	r3, #2
20002f72:	607b      	str	r3, [r7, #4]
20002f74:	e002      	b.n	20002f7c <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20002f76:	f04f 0300 	mov.w	r3, #0
20002f7a:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
20002f7c:	687b      	ldr	r3, [r7, #4]
	}
20002f7e:	4618      	mov	r0, r3
20002f80:	f107 070c 	add.w	r7, r7, #12
20002f84:	46bd      	mov	sp, r7
20002f86:	bc80      	pop	{r7}
20002f88:	4770      	bx	lr
20002f8a:	bf00      	nop

20002f8c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
20002f8c:	b580      	push	{r7, lr}
20002f8e:	b084      	sub	sp, #16
20002f90:	af00      	add	r7, sp, #0
20002f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20002f94:	687b      	ldr	r3, [r7, #4]
20002f96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
20002f98:	687b      	ldr	r3, [r7, #4]
20002f9a:	2b00      	cmp	r3, #0
20002f9c:	f000 8098 	beq.w	200030d0 <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
20002fa0:	68fb      	ldr	r3, [r7, #12]
20002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002fa4:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fac:	681b      	ldr	r3, [r3, #0]
20002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002fb0:	429a      	cmp	r2, r3
20002fb2:	f080 808d 	bcs.w	200030d0 <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20002fb6:	68fb      	ldr	r3, [r7, #12]
20002fb8:	699b      	ldr	r3, [r3, #24]
20002fba:	2b00      	cmp	r3, #0
20002fbc:	db09      	blt.n	20002fd2 <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002fbe:	f247 73dc 	movw	r3, #30684	; 0x77dc
20002fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fc6:	681b      	ldr	r3, [r3, #0]
20002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002fca:	f1c3 0205 	rsb	r2, r3, #5
20002fce:	68fb      	ldr	r3, [r7, #12]
20002fd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20002fd2:	68fb      	ldr	r3, [r7, #12]
20002fd4:	6959      	ldr	r1, [r3, #20]
20002fd6:	68fb      	ldr	r3, [r7, #12]
20002fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002fda:	4613      	mov	r3, r2
20002fdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002fe0:	4413      	add	r3, r2
20002fe2:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002fe6:	461a      	mov	r2, r3
20002fe8:	f247 73e0 	movw	r3, #30688	; 0x77e0
20002fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ff0:	4413      	add	r3, r2
20002ff2:	4299      	cmp	r1, r3
20002ff4:	d102      	bne.n	20002ffc <vTaskPriorityInherit+0x70>
20002ff6:	f04f 0301 	mov.w	r3, #1
20002ffa:	e001      	b.n	20003000 <vTaskPriorityInherit+0x74>
20002ffc:	f04f 0300 	mov.w	r3, #0
20003000:	2b00      	cmp	r3, #0
20003002:	d05d      	beq.n	200030c0 <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20003004:	68fb      	ldr	r3, [r7, #12]
20003006:	f103 0304 	add.w	r3, r3, #4
2000300a:	4618      	mov	r0, r3
2000300c:	f7fe fa0a 	bl	20001424 <uxListRemove>
20003010:	4603      	mov	r3, r0
20003012:	2b00      	cmp	r3, #0
20003014:	d124      	bne.n	20003060 <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20003016:	68fb      	ldr	r3, [r7, #12]
20003018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000301a:	4613      	mov	r3, r2
2000301c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003020:	4413      	add	r3, r2
20003022:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003026:	461a      	mov	r2, r3
20003028:	f247 73e0 	movw	r3, #30688	; 0x77e0
2000302c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003030:	4413      	add	r3, r2
20003032:	681b      	ldr	r3, [r3, #0]
20003034:	2b00      	cmp	r3, #0
20003036:	d113      	bne.n	20003060 <vTaskPriorityInherit+0xd4>
20003038:	68fb      	ldr	r3, [r7, #12]
2000303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000303c:	f04f 0201 	mov.w	r2, #1
20003040:	fa02 f303 	lsl.w	r3, r2, r3
20003044:	ea6f 0203 	mvn.w	r2, r3
20003048:	f647 03bc 	movw	r3, #30908	; 0x78bc
2000304c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003050:	681b      	ldr	r3, [r3, #0]
20003052:	ea02 0203 	and.w	r2, r2, r3
20003056:	f647 03bc 	movw	r3, #30908	; 0x78bc
2000305a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000305e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20003060:	f247 73dc 	movw	r3, #30684	; 0x77dc
20003064:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003068:	681b      	ldr	r3, [r3, #0]
2000306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000306c:	68fb      	ldr	r3, [r7, #12]
2000306e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
20003070:	68fb      	ldr	r3, [r7, #12]
20003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003074:	f04f 0201 	mov.w	r2, #1
20003078:	fa02 f203 	lsl.w	r2, r2, r3
2000307c:	f647 03bc 	movw	r3, #30908	; 0x78bc
20003080:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003084:	681b      	ldr	r3, [r3, #0]
20003086:	ea42 0203 	orr.w	r2, r2, r3
2000308a:	f647 03bc 	movw	r3, #30908	; 0x78bc
2000308e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003092:	601a      	str	r2, [r3, #0]
20003094:	68fb      	ldr	r3, [r7, #12]
20003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003098:	4613      	mov	r3, r2
2000309a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000309e:	4413      	add	r3, r2
200030a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200030a4:	461a      	mov	r2, r3
200030a6:	f247 73e0 	movw	r3, #30688	; 0x77e0
200030aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030ae:	441a      	add	r2, r3
200030b0:	68fb      	ldr	r3, [r7, #12]
200030b2:	f103 0304 	add.w	r3, r3, #4
200030b6:	4610      	mov	r0, r2
200030b8:	4619      	mov	r1, r3
200030ba:	f7fe f955 	bl	20001368 <vListInsertEnd>
200030be:	e007      	b.n	200030d0 <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
200030c0:	f247 73dc 	movw	r3, #30684	; 0x77dc
200030c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030c8:	681b      	ldr	r3, [r3, #0]
200030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200030cc:	68fb      	ldr	r3, [r7, #12]
200030ce:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
200030d0:	f107 0710 	add.w	r7, r7, #16
200030d4:	46bd      	mov	sp, r7
200030d6:	bd80      	pop	{r7, pc}

200030d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
200030d8:	b580      	push	{r7, lr}
200030da:	b086      	sub	sp, #24
200030dc:	af00      	add	r7, sp, #0
200030de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
200030e0:	687b      	ldr	r3, [r7, #4]
200030e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
200030e4:	f04f 0300 	mov.w	r3, #0
200030e8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
200030ea:	687b      	ldr	r3, [r7, #4]
200030ec:	2b00      	cmp	r3, #0
200030ee:	f000 8092 	beq.w	20003216 <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
200030f2:	f247 73dc 	movw	r3, #30684	; 0x77dc
200030f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030fa:	681b      	ldr	r3, [r3, #0]
200030fc:	68ba      	ldr	r2, [r7, #8]
200030fe:	429a      	cmp	r2, r3
20003100:	d009      	beq.n	20003116 <xTaskPriorityDisinherit+0x3e>
20003102:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003106:	f383 8811 	msr	BASEPRI, r3
2000310a:	f3bf 8f6f 	isb	sy
2000310e:	f3bf 8f4f 	dsb	sy
20003112:	613b      	str	r3, [r7, #16]
20003114:	e7fe      	b.n	20003114 <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
20003116:	68bb      	ldr	r3, [r7, #8]
20003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000311a:	2b00      	cmp	r3, #0
2000311c:	d109      	bne.n	20003132 <xTaskPriorityDisinherit+0x5a>
2000311e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003122:	f383 8811 	msr	BASEPRI, r3
20003126:	f3bf 8f6f 	isb	sy
2000312a:	f3bf 8f4f 	dsb	sy
2000312e:	617b      	str	r3, [r7, #20]
20003130:	e7fe      	b.n	20003130 <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
20003132:	68bb      	ldr	r3, [r7, #8]
20003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20003136:	f103 32ff 	add.w	r2, r3, #4294967295
2000313a:	68bb      	ldr	r3, [r7, #8]
2000313c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
2000313e:	68bb      	ldr	r3, [r7, #8]
20003140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003142:	68bb      	ldr	r3, [r7, #8]
20003144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20003146:	429a      	cmp	r2, r3
20003148:	d065      	beq.n	20003216 <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
2000314a:	68bb      	ldr	r3, [r7, #8]
2000314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000314e:	2b00      	cmp	r3, #0
20003150:	d161      	bne.n	20003216 <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20003152:	68bb      	ldr	r3, [r7, #8]
20003154:	f103 0304 	add.w	r3, r3, #4
20003158:	4618      	mov	r0, r3
2000315a:	f7fe f963 	bl	20001424 <uxListRemove>
2000315e:	4603      	mov	r3, r0
20003160:	2b00      	cmp	r3, #0
20003162:	d124      	bne.n	200031ae <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20003164:	68bb      	ldr	r3, [r7, #8]
20003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003168:	4613      	mov	r3, r2
2000316a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000316e:	4413      	add	r3, r2
20003170:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003174:	461a      	mov	r2, r3
20003176:	f247 73e0 	movw	r3, #30688	; 0x77e0
2000317a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000317e:	4413      	add	r3, r2
20003180:	681b      	ldr	r3, [r3, #0]
20003182:	2b00      	cmp	r3, #0
20003184:	d113      	bne.n	200031ae <xTaskPriorityDisinherit+0xd6>
20003186:	68bb      	ldr	r3, [r7, #8]
20003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000318a:	f04f 0201 	mov.w	r2, #1
2000318e:	fa02 f303 	lsl.w	r3, r2, r3
20003192:	ea6f 0203 	mvn.w	r2, r3
20003196:	f647 03bc 	movw	r3, #30908	; 0x78bc
2000319a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000319e:	681b      	ldr	r3, [r3, #0]
200031a0:	ea02 0203 	and.w	r2, r2, r3
200031a4:	f647 03bc 	movw	r3, #30908	; 0x78bc
200031a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031ac:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
200031ae:	68bb      	ldr	r3, [r7, #8]
200031b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200031b2:	68bb      	ldr	r3, [r7, #8]
200031b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200031b6:	68bb      	ldr	r3, [r7, #8]
200031b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200031ba:	f1c3 0205 	rsb	r2, r3, #5
200031be:	68bb      	ldr	r3, [r7, #8]
200031c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
200031c2:	68bb      	ldr	r3, [r7, #8]
200031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200031c6:	f04f 0201 	mov.w	r2, #1
200031ca:	fa02 f203 	lsl.w	r2, r2, r3
200031ce:	f647 03bc 	movw	r3, #30908	; 0x78bc
200031d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031d6:	681b      	ldr	r3, [r3, #0]
200031d8:	ea42 0203 	orr.w	r2, r2, r3
200031dc:	f647 03bc 	movw	r3, #30908	; 0x78bc
200031e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031e4:	601a      	str	r2, [r3, #0]
200031e6:	68bb      	ldr	r3, [r7, #8]
200031e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200031ea:	4613      	mov	r3, r2
200031ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
200031f0:	4413      	add	r3, r2
200031f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200031f6:	461a      	mov	r2, r3
200031f8:	f247 73e0 	movw	r3, #30688	; 0x77e0
200031fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003200:	441a      	add	r2, r3
20003202:	68bb      	ldr	r3, [r7, #8]
20003204:	f103 0304 	add.w	r3, r3, #4
20003208:	4610      	mov	r0, r2
2000320a:	4619      	mov	r1, r3
2000320c:	f7fe f8ac 	bl	20001368 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20003210:	f04f 0301 	mov.w	r3, #1
20003214:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20003216:	68fb      	ldr	r3, [r7, #12]
	}
20003218:	4618      	mov	r0, r3
2000321a:	f107 0718 	add.w	r7, r7, #24
2000321e:	46bd      	mov	sp, r7
20003220:	bd80      	pop	{r7, pc}
20003222:	bf00      	nop

20003224 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
20003224:	b480      	push	{r7}
20003226:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
20003228:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000322c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003230:	681b      	ldr	r3, [r3, #0]
20003232:	2b00      	cmp	r3, #0
20003234:	d008      	beq.n	20003248 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
20003236:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000323a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000323e:	681b      	ldr	r3, [r3, #0]
20003240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20003242:	f102 0201 	add.w	r2, r2, #1
20003246:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
20003248:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000324c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003250:	681b      	ldr	r3, [r3, #0]
	}
20003252:	4618      	mov	r0, r3
20003254:	46bd      	mov	sp, r7
20003256:	bc80      	pop	{r7}
20003258:	4770      	bx	lr
2000325a:	bf00      	nop

2000325c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
2000325c:	b580      	push	{r7, lr}
2000325e:	b084      	sub	sp, #16
20003260:	af00      	add	r7, sp, #0
20003262:	6078      	str	r0, [r7, #4]
20003264:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
20003266:	f001 f941 	bl	200044ec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
2000326a:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000326e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003272:	681b      	ldr	r3, [r3, #0]
20003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20003276:	2b00      	cmp	r3, #0
20003278:	d11b      	bne.n	200032b2 <ulTaskNotifyTake+0x56>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
2000327a:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000327e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003282:	681b      	ldr	r3, [r3, #0]
20003284:	f04f 0201 	mov.w	r2, #1
20003288:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
2000328c:	683b      	ldr	r3, [r7, #0]
2000328e:	2b00      	cmp	r3, #0
20003290:	d00f      	beq.n	200032b2 <ulTaskNotifyTake+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20003292:	6838      	ldr	r0, [r7, #0]
20003294:	f04f 0101 	mov.w	r1, #1
20003298:	f000 f95e 	bl	20003558 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
2000329c:	f64e 5304 	movw	r3, #60676	; 0xed04
200032a0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200032a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200032a8:	601a      	str	r2, [r3, #0]
200032aa:	f3bf 8f4f 	dsb	sy
200032ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
200032b2:	f001 f953 	bl	2000455c <vPortExitCritical>

		taskENTER_CRITICAL();
200032b6:	f001 f919 	bl	200044ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
200032ba:	f247 73dc 	movw	r3, #30684	; 0x77dc
200032be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032c2:	681b      	ldr	r3, [r3, #0]
200032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200032c6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
200032c8:	68fb      	ldr	r3, [r7, #12]
200032ca:	2b00      	cmp	r3, #0
200032cc:	d014      	beq.n	200032f8 <ulTaskNotifyTake+0x9c>
			{
				if( xClearCountOnExit != pdFALSE )
200032ce:	687b      	ldr	r3, [r7, #4]
200032d0:	2b00      	cmp	r3, #0
200032d2:	d008      	beq.n	200032e6 <ulTaskNotifyTake+0x8a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
200032d4:	f247 73dc 	movw	r3, #30684	; 0x77dc
200032d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032dc:	681b      	ldr	r3, [r3, #0]
200032de:	f04f 0200 	mov.w	r2, #0
200032e2:	655a      	str	r2, [r3, #84]	; 0x54
200032e4:	e008      	b.n	200032f8 <ulTaskNotifyTake+0x9c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
200032e6:	f247 73dc 	movw	r3, #30684	; 0x77dc
200032ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032ee:	681b      	ldr	r3, [r3, #0]
200032f0:	68fa      	ldr	r2, [r7, #12]
200032f2:	f102 32ff 	add.w	r2, r2, #4294967295
200032f6:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200032f8:	f247 73dc 	movw	r3, #30684	; 0x77dc
200032fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003300:	681b      	ldr	r3, [r3, #0]
20003302:	f04f 0200 	mov.w	r2, #0
20003306:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
2000330a:	f001 f927 	bl	2000455c <vPortExitCritical>

		return ulReturn;
2000330e:	68fb      	ldr	r3, [r7, #12]
	}
20003310:	4618      	mov	r0, r3
20003312:	f107 0710 	add.w	r7, r7, #16
20003316:	46bd      	mov	sp, r7
20003318:	bd80      	pop	{r7, pc}
2000331a:	bf00      	nop

2000331c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
2000331c:	b580      	push	{r7, lr}
2000331e:	b086      	sub	sp, #24
20003320:	af00      	add	r7, sp, #0
20003322:	60f8      	str	r0, [r7, #12]
20003324:	60b9      	str	r1, [r7, #8]
20003326:	607a      	str	r2, [r7, #4]
20003328:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
2000332a:	f001 f8df 	bl	200044ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
2000332e:	f247 73dc 	movw	r3, #30684	; 0x77dc
20003332:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003336:	681b      	ldr	r3, [r3, #0]
20003338:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
2000333c:	b2db      	uxtb	r3, r3
2000333e:	2b02      	cmp	r3, #2
20003340:	d027      	beq.n	20003392 <xTaskNotifyWait+0x76>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
20003342:	f247 73dc 	movw	r3, #30684	; 0x77dc
20003346:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000334a:	681b      	ldr	r3, [r3, #0]
2000334c:	6d59      	ldr	r1, [r3, #84]	; 0x54
2000334e:	68fa      	ldr	r2, [r7, #12]
20003350:	ea6f 0202 	mvn.w	r2, r2
20003354:	ea01 0202 	and.w	r2, r1, r2
20003358:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
2000335a:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000335e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003362:	681b      	ldr	r3, [r3, #0]
20003364:	f04f 0201 	mov.w	r2, #1
20003368:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
2000336c:	683b      	ldr	r3, [r7, #0]
2000336e:	2b00      	cmp	r3, #0
20003370:	d00f      	beq.n	20003392 <xTaskNotifyWait+0x76>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20003372:	6838      	ldr	r0, [r7, #0]
20003374:	f04f 0101 	mov.w	r1, #1
20003378:	f000 f8ee 	bl	20003558 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
2000337c:	f64e 5304 	movw	r3, #60676	; 0xed04
20003380:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003388:	601a      	str	r2, [r3, #0]
2000338a:	f3bf 8f4f 	dsb	sy
2000338e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
20003392:	f001 f8e3 	bl	2000455c <vPortExitCritical>

		taskENTER_CRITICAL();
20003396:	f001 f8a9 	bl	200044ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
2000339a:	687b      	ldr	r3, [r7, #4]
2000339c:	2b00      	cmp	r3, #0
2000339e:	d007      	beq.n	200033b0 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
200033a0:	f247 73dc 	movw	r3, #30684	; 0x77dc
200033a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033a8:	681b      	ldr	r3, [r3, #0]
200033aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
200033ac:	687b      	ldr	r3, [r7, #4]
200033ae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
200033b0:	f247 73dc 	movw	r3, #30684	; 0x77dc
200033b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033b8:	681b      	ldr	r3, [r3, #0]
200033ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
200033be:	b2db      	uxtb	r3, r3
200033c0:	2b01      	cmp	r3, #1
200033c2:	d103      	bne.n	200033cc <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
200033c4:	f04f 0300 	mov.w	r3, #0
200033c8:	617b      	str	r3, [r7, #20]
200033ca:	e00e      	b.n	200033ea <xTaskNotifyWait+0xce>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
200033cc:	f247 73dc 	movw	r3, #30684	; 0x77dc
200033d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033d4:	681b      	ldr	r3, [r3, #0]
200033d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
200033d8:	68ba      	ldr	r2, [r7, #8]
200033da:	ea6f 0202 	mvn.w	r2, r2
200033de:	ea01 0202 	and.w	r2, r1, r2
200033e2:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
200033e4:	f04f 0301 	mov.w	r3, #1
200033e8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200033ea:	f247 73dc 	movw	r3, #30684	; 0x77dc
200033ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033f2:	681b      	ldr	r3, [r3, #0]
200033f4:	f04f 0200 	mov.w	r2, #0
200033f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
200033fc:	f001 f8ae 	bl	2000455c <vPortExitCritical>

		return xReturn;
20003400:	697b      	ldr	r3, [r7, #20]
	}
20003402:	4618      	mov	r0, r3
20003404:	f107 0718 	add.w	r7, r7, #24
20003408:	46bd      	mov	sp, r7
2000340a:	bd80      	pop	{r7, pc}

2000340c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
2000340c:	b580      	push	{r7, lr}
2000340e:	b08a      	sub	sp, #40	; 0x28
20003410:	af00      	add	r7, sp, #0
20003412:	6078      	str	r0, [r7, #4]
20003414:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
20003416:	687b      	ldr	r3, [r7, #4]
20003418:	2b00      	cmp	r3, #0
2000341a:	d109      	bne.n	20003430 <vTaskNotifyGiveFromISR+0x24>
2000341c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003420:	f383 8811 	msr	BASEPRI, r3
20003424:	f3bf 8f6f 	isb	sy
20003428:	f3bf 8f4f 	dsb	sy
2000342c:	617b      	str	r3, [r7, #20]
2000342e:	e7fe      	b.n	2000342e <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20003430:	f001 f930 	bl	20004694 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
20003434:	687b      	ldr	r3, [r7, #4]
20003436:	60bb      	str	r3, [r7, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20003438:	f3ef 8211 	mrs	r2, BASEPRI
2000343c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003440:	f383 8811 	msr	BASEPRI, r3
20003444:	f3bf 8f6f 	isb	sy
20003448:	f3bf 8f4f 	dsb	sy
2000344c:	61fa      	str	r2, [r7, #28]
2000344e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
20003450:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20003452:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
20003454:	68bb      	ldr	r3, [r7, #8]
20003456:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
2000345a:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
2000345c:	68bb      	ldr	r3, [r7, #8]
2000345e:	f04f 0202 	mov.w	r2, #2
20003462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
20003466:	68bb      	ldr	r3, [r7, #8]
20003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000346a:	f103 0201 	add.w	r2, r3, #1
2000346e:	68bb      	ldr	r3, [r7, #8]
20003470:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
20003472:	7bfb      	ldrb	r3, [r7, #15]
20003474:	2b01      	cmp	r3, #1
20003476:	d165      	bne.n	20003544 <vTaskNotifyGiveFromISR+0x138>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
20003478:	68bb      	ldr	r3, [r7, #8]
2000347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000347c:	2b00      	cmp	r3, #0
2000347e:	d009      	beq.n	20003494 <vTaskNotifyGiveFromISR+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20003480:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003484:	f383 8811 	msr	BASEPRI, r3
20003488:	f3bf 8f6f 	isb	sy
2000348c:	f3bf 8f4f 	dsb	sy
20003490:	623b      	str	r3, [r7, #32]
20003492:	e7fe      	b.n	20003492 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20003494:	f647 03dc 	movw	r3, #30940	; 0x78dc
20003498:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000349c:	681b      	ldr	r3, [r3, #0]
2000349e:	2b00      	cmp	r3, #0
200034a0:	d12d      	bne.n	200034fe <vTaskNotifyGiveFromISR+0xf2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200034a2:	68bb      	ldr	r3, [r7, #8]
200034a4:	f103 0304 	add.w	r3, r3, #4
200034a8:	4618      	mov	r0, r3
200034aa:	f7fd ffbb 	bl	20001424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
200034ae:	68bb      	ldr	r3, [r7, #8]
200034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200034b2:	f04f 0201 	mov.w	r2, #1
200034b6:	fa02 f203 	lsl.w	r2, r2, r3
200034ba:	f647 03bc 	movw	r3, #30908	; 0x78bc
200034be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034c2:	681b      	ldr	r3, [r3, #0]
200034c4:	ea42 0203 	orr.w	r2, r2, r3
200034c8:	f647 03bc 	movw	r3, #30908	; 0x78bc
200034cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034d0:	601a      	str	r2, [r3, #0]
200034d2:	68bb      	ldr	r3, [r7, #8]
200034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200034d6:	4613      	mov	r3, r2
200034d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200034dc:	4413      	add	r3, r2
200034de:	ea4f 0383 	mov.w	r3, r3, lsl #2
200034e2:	461a      	mov	r2, r3
200034e4:	f247 73e0 	movw	r3, #30688	; 0x77e0
200034e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034ec:	441a      	add	r2, r3
200034ee:	68bb      	ldr	r3, [r7, #8]
200034f0:	f103 0304 	add.w	r3, r3, #4
200034f4:	4610      	mov	r0, r2
200034f6:	4619      	mov	r1, r3
200034f8:	f7fd ff36 	bl	20001368 <vListInsertEnd>
200034fc:	e009      	b.n	20003512 <vTaskNotifyGiveFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
200034fe:	68bb      	ldr	r3, [r7, #8]
20003500:	f103 0318 	add.w	r3, r3, #24
20003504:	f647 0074 	movw	r0, #30836	; 0x7874
20003508:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000350c:	4619      	mov	r1, r3
2000350e:	f7fd ff2b 	bl	20001368 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
20003512:	68bb      	ldr	r3, [r7, #8]
20003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003516:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000351a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000351e:	681b      	ldr	r3, [r3, #0]
20003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003522:	429a      	cmp	r2, r3
20003524:	d90e      	bls.n	20003544 <vTaskNotifyGiveFromISR+0x138>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
20003526:	683b      	ldr	r3, [r7, #0]
20003528:	2b00      	cmp	r3, #0
2000352a:	d004      	beq.n	20003536 <vTaskNotifyGiveFromISR+0x12a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
2000352c:	683b      	ldr	r3, [r7, #0]
2000352e:	f04f 0201 	mov.w	r2, #1
20003532:	601a      	str	r2, [r3, #0]
20003534:	e006      	b.n	20003544 <vTaskNotifyGiveFromISR+0x138>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
20003536:	f647 03c8 	movw	r3, #30920	; 0x78c8
2000353a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000353e:	f04f 0201 	mov.w	r2, #1
20003542:	601a      	str	r2, [r3, #0]
20003544:	693b      	ldr	r3, [r7, #16]
20003546:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000354a:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
2000354e:	f107 0728 	add.w	r7, r7, #40	; 0x28
20003552:	46bd      	mov	sp, r7
20003554:	bd80      	pop	{r7, pc}
20003556:	bf00      	nop

20003558 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
20003558:	b580      	push	{r7, lr}
2000355a:	b084      	sub	sp, #16
2000355c:	af00      	add	r7, sp, #0
2000355e:	6078      	str	r0, [r7, #4]
20003560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
20003562:	f647 03b8 	movw	r3, #30904	; 0x78b8
20003566:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000356a:	681b      	ldr	r3, [r3, #0]
2000356c:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2000356e:	f247 73dc 	movw	r3, #30684	; 0x77dc
20003572:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003576:	681b      	ldr	r3, [r3, #0]
20003578:	f103 0304 	add.w	r3, r3, #4
2000357c:	4618      	mov	r0, r3
2000357e:	f7fd ff51 	bl	20001424 <uxListRemove>
20003582:	4603      	mov	r3, r0
20003584:	2b00      	cmp	r3, #0
20003586:	d117      	bne.n	200035b8 <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
20003588:	f247 73dc 	movw	r3, #30684	; 0x77dc
2000358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003590:	681b      	ldr	r3, [r3, #0]
20003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003594:	f04f 0201 	mov.w	r2, #1
20003598:	fa02 f303 	lsl.w	r3, r2, r3
2000359c:	ea6f 0203 	mvn.w	r2, r3
200035a0:	f647 03bc 	movw	r3, #30908	; 0x78bc
200035a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035a8:	681b      	ldr	r3, [r3, #0]
200035aa:	ea02 0203 	and.w	r2, r2, r3
200035ae:	f647 03bc 	movw	r3, #30908	; 0x78bc
200035b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035b6:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
200035b8:	687b      	ldr	r3, [r7, #4]
200035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
200035be:	d111      	bne.n	200035e4 <prvAddCurrentTaskToDelayedList+0x8c>
200035c0:	683b      	ldr	r3, [r7, #0]
200035c2:	2b00      	cmp	r3, #0
200035c4:	d00e      	beq.n	200035e4 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
200035c6:	f247 73dc 	movw	r3, #30684	; 0x77dc
200035ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035ce:	681b      	ldr	r3, [r3, #0]
200035d0:	f103 0304 	add.w	r3, r3, #4
200035d4:	f647 00a0 	movw	r0, #30880	; 0x78a0
200035d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200035dc:	4619      	mov	r1, r3
200035de:	f7fd fec3 	bl	20001368 <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
200035e2:	e03d      	b.n	20003660 <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
200035e4:	68fa      	ldr	r2, [r7, #12]
200035e6:	687b      	ldr	r3, [r7, #4]
200035e8:	4413      	add	r3, r2
200035ea:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
200035ec:	f247 73dc 	movw	r3, #30684	; 0x77dc
200035f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035f4:	681b      	ldr	r3, [r3, #0]
200035f6:	68ba      	ldr	r2, [r7, #8]
200035f8:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
200035fa:	68ba      	ldr	r2, [r7, #8]
200035fc:	68fb      	ldr	r3, [r7, #12]
200035fe:	429a      	cmp	r2, r3
20003600:	d210      	bcs.n	20003624 <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003602:	f647 0370 	movw	r3, #30832	; 0x7870
20003606:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000360a:	681a      	ldr	r2, [r3, #0]
2000360c:	f247 73dc 	movw	r3, #30684	; 0x77dc
20003610:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003614:	681b      	ldr	r3, [r3, #0]
20003616:	f103 0304 	add.w	r3, r3, #4
2000361a:	4610      	mov	r0, r2
2000361c:	4619      	mov	r1, r3
2000361e:	f7fd fec7 	bl	200013b0 <vListInsert>
20003622:	e01d      	b.n	20003660 <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003624:	f647 036c 	movw	r3, #30828	; 0x786c
20003628:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000362c:	681a      	ldr	r2, [r3, #0]
2000362e:	f247 73dc 	movw	r3, #30684	; 0x77dc
20003632:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003636:	681b      	ldr	r3, [r3, #0]
20003638:	f103 0304 	add.w	r3, r3, #4
2000363c:	4610      	mov	r0, r2
2000363e:	4619      	mov	r1, r3
20003640:	f7fd feb6 	bl	200013b0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
20003644:	f647 03d4 	movw	r3, #30932	; 0x78d4
20003648:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000364c:	681b      	ldr	r3, [r3, #0]
2000364e:	68ba      	ldr	r2, [r7, #8]
20003650:	429a      	cmp	r2, r3
20003652:	d205      	bcs.n	20003660 <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
20003654:	f647 03d4 	movw	r3, #30932	; 0x78d4
20003658:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000365c:	68ba      	ldr	r2, [r7, #8]
2000365e:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
20003660:	f107 0710 	add.w	r7, r7, #16
20003664:	46bd      	mov	sp, r7
20003666:	bd80      	pop	{r7, pc}

20003668 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
20003668:	b580      	push	{r7, lr}
2000366a:	b084      	sub	sp, #16
2000366c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
2000366e:	f04f 0300 	mov.w	r3, #0
20003672:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
20003674:	f000 fb72 	bl	20003d5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
20003678:	f647 1318 	movw	r3, #31000	; 0x7918
2000367c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003680:	681b      	ldr	r3, [r3, #0]
20003682:	2b00      	cmp	r3, #0
20003684:	d017      	beq.n	200036b6 <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
20003686:	f04f 0302 	mov.w	r3, #2
2000368a:	9300      	str	r3, [sp, #0]
2000368c:	f647 131c 	movw	r3, #31004	; 0x791c
20003690:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003694:	9301      	str	r3, [sp, #4]
20003696:	f643 00d9 	movw	r0, #14553	; 0x38d9
2000369a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000369e:	f247 7108 	movw	r1, #30472	; 0x7708
200036a2:	f2c2 0100 	movt	r1, #8192	; 0x2000
200036a6:	f04f 02a0 	mov.w	r2, #160	; 0xa0
200036aa:	f04f 0300 	mov.w	r3, #0
200036ae:	f7fe fc4d 	bl	20001f4c <xTaskCreate>
200036b2:	4603      	mov	r3, r0
200036b4:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
200036b6:	683b      	ldr	r3, [r7, #0]
200036b8:	2b00      	cmp	r3, #0
200036ba:	d109      	bne.n	200036d0 <xTimerCreateTimerTask+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200036bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200036c0:	f383 8811 	msr	BASEPRI, r3
200036c4:	f3bf 8f6f 	isb	sy
200036c8:	f3bf 8f4f 	dsb	sy
200036cc:	607b      	str	r3, [r7, #4]
200036ce:	e7fe      	b.n	200036ce <xTimerCreateTimerTask+0x66>
	return xReturn;
200036d0:	683b      	ldr	r3, [r7, #0]
}
200036d2:	4618      	mov	r0, r3
200036d4:	f107 0708 	add.w	r7, r7, #8
200036d8:	46bd      	mov	sp, r7
200036da:	bd80      	pop	{r7, pc}

200036dc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
200036dc:	b580      	push	{r7, lr}
200036de:	b088      	sub	sp, #32
200036e0:	af02      	add	r7, sp, #8
200036e2:	60f8      	str	r0, [r7, #12]
200036e4:	60b9      	str	r1, [r7, #8]
200036e6:	607a      	str	r2, [r7, #4]
200036e8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
200036ea:	f04f 002c 	mov.w	r0, #44	; 0x2c
200036ee:	f000 fbaf 	bl	20003e50 <pvPortMalloc>
200036f2:	4603      	mov	r3, r0
200036f4:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
200036f6:	697b      	ldr	r3, [r7, #20]
200036f8:	2b00      	cmp	r3, #0
200036fa:	d009      	beq.n	20003710 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
200036fc:	6a3b      	ldr	r3, [r7, #32]
200036fe:	9300      	str	r3, [sp, #0]
20003700:	697b      	ldr	r3, [r7, #20]
20003702:	9301      	str	r3, [sp, #4]
20003704:	68f8      	ldr	r0, [r7, #12]
20003706:	68b9      	ldr	r1, [r7, #8]
20003708:	687a      	ldr	r2, [r7, #4]
2000370a:	683b      	ldr	r3, [r7, #0]
2000370c:	f000 f806 	bl	2000371c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
20003710:	697b      	ldr	r3, [r7, #20]
	}
20003712:	4618      	mov	r0, r3
20003714:	f107 0718 	add.w	r7, r7, #24
20003718:	46bd      	mov	sp, r7
2000371a:	bd80      	pop	{r7, pc}

2000371c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
2000371c:	b580      	push	{r7, lr}
2000371e:	b086      	sub	sp, #24
20003720:	af00      	add	r7, sp, #0
20003722:	60f8      	str	r0, [r7, #12]
20003724:	60b9      	str	r1, [r7, #8]
20003726:	607a      	str	r2, [r7, #4]
20003728:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
2000372a:	68bb      	ldr	r3, [r7, #8]
2000372c:	2b00      	cmp	r3, #0
2000372e:	d109      	bne.n	20003744 <prvInitialiseNewTimer+0x28>
20003730:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003734:	f383 8811 	msr	BASEPRI, r3
20003738:	f3bf 8f6f 	isb	sy
2000373c:	f3bf 8f4f 	dsb	sy
20003740:	617b      	str	r3, [r7, #20]
20003742:	e7fe      	b.n	20003742 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
20003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003746:	2b00      	cmp	r3, #0
20003748:	d016      	beq.n	20003778 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
2000374a:	f000 fb07 	bl	20003d5c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
2000374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003750:	68fa      	ldr	r2, [r7, #12]
20003752:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
20003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003756:	68ba      	ldr	r2, [r7, #8]
20003758:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
2000375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000375c:	687a      	ldr	r2, [r7, #4]
2000375e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
20003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003762:	683a      	ldr	r2, [r7, #0]
20003764:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
20003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003768:	6a3a      	ldr	r2, [r7, #32]
2000376a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
2000376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000376e:	f103 0304 	add.w	r3, r3, #4
20003772:	4618      	mov	r0, r3
20003774:	f7fd fdea 	bl	2000134c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
20003778:	f107 0718 	add.w	r7, r7, #24
2000377c:	46bd      	mov	sp, r7
2000377e:	bd80      	pop	{r7, pc}

20003780 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
20003780:	b580      	push	{r7, lr}
20003782:	b08a      	sub	sp, #40	; 0x28
20003784:	af00      	add	r7, sp, #0
20003786:	60f8      	str	r0, [r7, #12]
20003788:	60b9      	str	r1, [r7, #8]
2000378a:	607a      	str	r2, [r7, #4]
2000378c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
2000378e:	f04f 0300 	mov.w	r3, #0
20003792:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
20003794:	68fb      	ldr	r3, [r7, #12]
20003796:	2b00      	cmp	r3, #0
20003798:	d109      	bne.n	200037ae <xTimerGenericCommand+0x2e>
2000379a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000379e:	f383 8811 	msr	BASEPRI, r3
200037a2:	f3bf 8f6f 	isb	sy
200037a6:	f3bf 8f4f 	dsb	sy
200037aa:	627b      	str	r3, [r7, #36]	; 0x24
200037ac:	e7fe      	b.n	200037ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
200037ae:	f647 1318 	movw	r3, #31000	; 0x7918
200037b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037b6:	681b      	ldr	r3, [r3, #0]
200037b8:	2b00      	cmp	r3, #0
200037ba:	d040      	beq.n	2000383e <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
200037bc:	68bb      	ldr	r3, [r7, #8]
200037be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
200037c0:	687b      	ldr	r3, [r7, #4]
200037c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
200037c4:	68fb      	ldr	r3, [r7, #12]
200037c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
200037c8:	68bb      	ldr	r3, [r7, #8]
200037ca:	2b05      	cmp	r3, #5
200037cc:	dc27      	bgt.n	2000381e <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
200037ce:	f7ff fbb9 	bl	20002f44 <xTaskGetSchedulerState>
200037d2:	4603      	mov	r3, r0
200037d4:	2b02      	cmp	r3, #2
200037d6:	d110      	bne.n	200037fa <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
200037d8:	f647 1318 	movw	r3, #31000	; 0x7918
200037dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037e0:	681a      	ldr	r2, [r3, #0]
200037e2:	f107 0310 	add.w	r3, r7, #16
200037e6:	4610      	mov	r0, r2
200037e8:	4619      	mov	r1, r3
200037ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200037ec:	f04f 0300 	mov.w	r3, #0
200037f0:	f7fd ff58 	bl	200016a4 <xQueueGenericSend>
200037f4:	4603      	mov	r3, r0
200037f6:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
200037f8:	e021      	b.n	2000383e <xTimerGenericCommand+0xbe>
200037fa:	f647 1318 	movw	r3, #31000	; 0x7918
200037fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003802:	681a      	ldr	r2, [r3, #0]
20003804:	f107 0310 	add.w	r3, r7, #16
20003808:	4610      	mov	r0, r2
2000380a:	4619      	mov	r1, r3
2000380c:	f04f 0200 	mov.w	r2, #0
20003810:	f04f 0300 	mov.w	r3, #0
20003814:	f7fd ff46 	bl	200016a4 <xQueueGenericSend>
20003818:	4603      	mov	r3, r0
2000381a:	623b      	str	r3, [r7, #32]
2000381c:	e00f      	b.n	2000383e <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
2000381e:	f647 1318 	movw	r3, #31000	; 0x7918
20003822:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003826:	681a      	ldr	r2, [r3, #0]
20003828:	f107 0310 	add.w	r3, r7, #16
2000382c:	4610      	mov	r0, r2
2000382e:	4619      	mov	r1, r3
20003830:	683a      	ldr	r2, [r7, #0]
20003832:	f04f 0300 	mov.w	r3, #0
20003836:	f7fe f84d 	bl	200018d4 <xQueueGenericSendFromISR>
2000383a:	4603      	mov	r3, r0
2000383c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
2000383e:	6a3b      	ldr	r3, [r7, #32]
}
20003840:	4618      	mov	r0, r3
20003842:	f107 0728 	add.w	r7, r7, #40	; 0x28
20003846:	46bd      	mov	sp, r7
20003848:	bd80      	pop	{r7, pc}
2000384a:	bf00      	nop

2000384c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
2000384c:	b580      	push	{r7, lr}
2000384e:	b088      	sub	sp, #32
20003850:	af02      	add	r7, sp, #8
20003852:	6078      	str	r0, [r7, #4]
20003854:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003856:	f647 1310 	movw	r3, #30992	; 0x7910
2000385a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000385e:	681b      	ldr	r3, [r3, #0]
20003860:	68db      	ldr	r3, [r3, #12]
20003862:	68db      	ldr	r3, [r3, #12]
20003864:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003866:	693b      	ldr	r3, [r7, #16]
20003868:	f103 0304 	add.w	r3, r3, #4
2000386c:	4618      	mov	r0, r3
2000386e:	f7fd fdd9 	bl	20001424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003872:	693b      	ldr	r3, [r7, #16]
20003874:	69db      	ldr	r3, [r3, #28]
20003876:	2b01      	cmp	r3, #1
20003878:	d126      	bne.n	200038c8 <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
2000387a:	693b      	ldr	r3, [r7, #16]
2000387c:	699a      	ldr	r2, [r3, #24]
2000387e:	687b      	ldr	r3, [r7, #4]
20003880:	4413      	add	r3, r2
20003882:	6938      	ldr	r0, [r7, #16]
20003884:	4619      	mov	r1, r3
20003886:	683a      	ldr	r2, [r7, #0]
20003888:	687b      	ldr	r3, [r7, #4]
2000388a:	f000 f8df 	bl	20003a4c <prvInsertTimerInActiveList>
2000388e:	4603      	mov	r3, r0
20003890:	2b00      	cmp	r3, #0
20003892:	d019      	beq.n	200038c8 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003894:	f04f 0300 	mov.w	r3, #0
20003898:	9300      	str	r3, [sp, #0]
2000389a:	6938      	ldr	r0, [r7, #16]
2000389c:	f04f 0100 	mov.w	r1, #0
200038a0:	687a      	ldr	r2, [r7, #4]
200038a2:	f04f 0300 	mov.w	r3, #0
200038a6:	f7ff ff6b 	bl	20003780 <xTimerGenericCommand>
200038aa:	4603      	mov	r3, r0
200038ac:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
200038ae:	68fb      	ldr	r3, [r7, #12]
200038b0:	2b00      	cmp	r3, #0
200038b2:	d109      	bne.n	200038c8 <prvProcessExpiredTimer+0x7c>
200038b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200038b8:	f383 8811 	msr	BASEPRI, r3
200038bc:	f3bf 8f6f 	isb	sy
200038c0:	f3bf 8f4f 	dsb	sy
200038c4:	617b      	str	r3, [r7, #20]
200038c6:	e7fe      	b.n	200038c6 <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
200038c8:	693b      	ldr	r3, [r7, #16]
200038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200038cc:	6938      	ldr	r0, [r7, #16]
200038ce:	4798      	blx	r3
}
200038d0:	f107 0718 	add.w	r7, r7, #24
200038d4:	46bd      	mov	sp, r7
200038d6:	bd80      	pop	{r7, pc}

200038d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
200038d8:	b580      	push	{r7, lr}
200038da:	b084      	sub	sp, #16
200038dc:	af00      	add	r7, sp, #0
200038de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
200038e0:	f107 0308 	add.w	r3, r7, #8
200038e4:	4618      	mov	r0, r3
200038e6:	f000 f861 	bl	200039ac <prvGetNextExpireTime>
200038ea:	4603      	mov	r3, r0
200038ec:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
200038ee:	68bb      	ldr	r3, [r7, #8]
200038f0:	68f8      	ldr	r0, [r7, #12]
200038f2:	4619      	mov	r1, r3
200038f4:	f000 f804 	bl	20003900 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
200038f8:	f000 f8f4 	bl	20003ae4 <prvProcessReceivedCommands>
	}
200038fc:	e7f0      	b.n	200038e0 <prvTimerTask+0x8>
200038fe:	bf00      	nop

20003900 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20003900:	b580      	push	{r7, lr}
20003902:	b084      	sub	sp, #16
20003904:	af00      	add	r7, sp, #0
20003906:	6078      	str	r0, [r7, #4]
20003908:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
2000390a:	f7fe fdf3 	bl	200024f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
2000390e:	f107 0308 	add.w	r3, r7, #8
20003912:	4618      	mov	r0, r3
20003914:	f000 f872 	bl	200039fc <prvSampleTimeNow>
20003918:	4603      	mov	r3, r0
2000391a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
2000391c:	68bb      	ldr	r3, [r7, #8]
2000391e:	2b00      	cmp	r3, #0
20003920:	d13b      	bne.n	2000399a <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003922:	683b      	ldr	r3, [r7, #0]
20003924:	2b00      	cmp	r3, #0
20003926:	d10b      	bne.n	20003940 <prvProcessTimerOrBlockTask+0x40>
20003928:	687a      	ldr	r2, [r7, #4]
2000392a:	68fb      	ldr	r3, [r7, #12]
2000392c:	429a      	cmp	r2, r3
2000392e:	d807      	bhi.n	20003940 <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
20003930:	f7fe fdf2 	bl	20002518 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
20003934:	6878      	ldr	r0, [r7, #4]
20003936:	68f9      	ldr	r1, [r7, #12]
20003938:	f7ff ff88 	bl	2000384c <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
2000393c:	bf00      	nop
2000393e:	e030      	b.n	200039a2 <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
20003940:	683b      	ldr	r3, [r7, #0]
20003942:	2b00      	cmp	r3, #0
20003944:	d00a      	beq.n	2000395c <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
20003946:	f647 1314 	movw	r3, #30996	; 0x7914
2000394a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000394e:	681b      	ldr	r3, [r3, #0]
20003950:	681b      	ldr	r3, [r3, #0]
20003952:	2b00      	cmp	r3, #0
20003954:	bf14      	ite	ne
20003956:	2300      	movne	r3, #0
20003958:	2301      	moveq	r3, #1
2000395a:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
2000395c:	f647 1318 	movw	r3, #31000	; 0x7918
20003960:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003964:	681a      	ldr	r2, [r3, #0]
20003966:	6879      	ldr	r1, [r7, #4]
20003968:	68fb      	ldr	r3, [r7, #12]
2000396a:	ebc3 0301 	rsb	r3, r3, r1
2000396e:	4610      	mov	r0, r2
20003970:	4619      	mov	r1, r3
20003972:	683a      	ldr	r2, [r7, #0]
20003974:	f7fe fab0 	bl	20001ed8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
20003978:	f7fe fdce 	bl	20002518 <xTaskResumeAll>
2000397c:	4603      	mov	r3, r0
2000397e:	2b00      	cmp	r3, #0
20003980:	d10e      	bne.n	200039a0 <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003982:	f64e 5304 	movw	r3, #60676	; 0xed04
20003986:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000398a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000398e:	601a      	str	r2, [r3, #0]
20003990:	f3bf 8f4f 	dsb	sy
20003994:	f3bf 8f6f 	isb	sy
20003998:	e003      	b.n	200039a2 <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
2000399a:	f7fe fdbd 	bl	20002518 <xTaskResumeAll>
2000399e:	e000      	b.n	200039a2 <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
200039a0:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
200039a2:	f107 0710 	add.w	r7, r7, #16
200039a6:	46bd      	mov	sp, r7
200039a8:	bd80      	pop	{r7, pc}
200039aa:	bf00      	nop

200039ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
200039ac:	b480      	push	{r7}
200039ae:	b085      	sub	sp, #20
200039b0:	af00      	add	r7, sp, #0
200039b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
200039b4:	f647 1310 	movw	r3, #30992	; 0x7910
200039b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039bc:	681b      	ldr	r3, [r3, #0]
200039be:	681b      	ldr	r3, [r3, #0]
200039c0:	2b00      	cmp	r3, #0
200039c2:	bf14      	ite	ne
200039c4:	2200      	movne	r2, #0
200039c6:	2201      	moveq	r2, #1
200039c8:	687b      	ldr	r3, [r7, #4]
200039ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
200039cc:	687b      	ldr	r3, [r7, #4]
200039ce:	681b      	ldr	r3, [r3, #0]
200039d0:	2b00      	cmp	r3, #0
200039d2:	d108      	bne.n	200039e6 <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
200039d4:	f647 1310 	movw	r3, #30992	; 0x7910
200039d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039dc:	681b      	ldr	r3, [r3, #0]
200039de:	68db      	ldr	r3, [r3, #12]
200039e0:	681b      	ldr	r3, [r3, #0]
200039e2:	60fb      	str	r3, [r7, #12]
200039e4:	e002      	b.n	200039ec <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
200039e6:	f04f 0300 	mov.w	r3, #0
200039ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
200039ec:	68fb      	ldr	r3, [r7, #12]
}
200039ee:	4618      	mov	r0, r3
200039f0:	f107 0714 	add.w	r7, r7, #20
200039f4:	46bd      	mov	sp, r7
200039f6:	bc80      	pop	{r7}
200039f8:	4770      	bx	lr
200039fa:	bf00      	nop

200039fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
200039fc:	b580      	push	{r7, lr}
200039fe:	b084      	sub	sp, #16
20003a00:	af00      	add	r7, sp, #0
20003a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003a04:	f7fe fe58 	bl	200026b8 <xTaskGetTickCount>
20003a08:	4603      	mov	r3, r0
20003a0a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
20003a0c:	f647 1320 	movw	r3, #31008	; 0x7920
20003a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a14:	681b      	ldr	r3, [r3, #0]
20003a16:	68fa      	ldr	r2, [r7, #12]
20003a18:	429a      	cmp	r2, r3
20003a1a:	d206      	bcs.n	20003a2a <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
20003a1c:	f000 f924 	bl	20003c68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
20003a20:	687b      	ldr	r3, [r7, #4]
20003a22:	f04f 0201 	mov.w	r2, #1
20003a26:	601a      	str	r2, [r3, #0]
20003a28:	e003      	b.n	20003a32 <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
20003a2a:	687b      	ldr	r3, [r7, #4]
20003a2c:	f04f 0200 	mov.w	r2, #0
20003a30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
20003a32:	f647 1320 	movw	r3, #31008	; 0x7920
20003a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a3a:	68fa      	ldr	r2, [r7, #12]
20003a3c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
20003a3e:	68fb      	ldr	r3, [r7, #12]
}
20003a40:	4618      	mov	r0, r3
20003a42:	f107 0710 	add.w	r7, r7, #16
20003a46:	46bd      	mov	sp, r7
20003a48:	bd80      	pop	{r7, pc}
20003a4a:	bf00      	nop

20003a4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20003a4c:	b580      	push	{r7, lr}
20003a4e:	b086      	sub	sp, #24
20003a50:	af00      	add	r7, sp, #0
20003a52:	60f8      	str	r0, [r7, #12]
20003a54:	60b9      	str	r1, [r7, #8]
20003a56:	607a      	str	r2, [r7, #4]
20003a58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
20003a5a:	f04f 0300 	mov.w	r3, #0
20003a5e:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20003a60:	68fb      	ldr	r3, [r7, #12]
20003a62:	68ba      	ldr	r2, [r7, #8]
20003a64:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003a66:	68fb      	ldr	r3, [r7, #12]
20003a68:	68fa      	ldr	r2, [r7, #12]
20003a6a:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
20003a6c:	68ba      	ldr	r2, [r7, #8]
20003a6e:	687b      	ldr	r3, [r7, #4]
20003a70:	429a      	cmp	r2, r3
20003a72:	d818      	bhi.n	20003aa6 <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003a74:	687a      	ldr	r2, [r7, #4]
20003a76:	683b      	ldr	r3, [r7, #0]
20003a78:	ebc3 0202 	rsb	r2, r3, r2
20003a7c:	68fb      	ldr	r3, [r7, #12]
20003a7e:	699b      	ldr	r3, [r3, #24]
20003a80:	429a      	cmp	r2, r3
20003a82:	d303      	bcc.n	20003a8c <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003a84:	f04f 0301 	mov.w	r3, #1
20003a88:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
20003a8a:	e024      	b.n	20003ad6 <prvInsertTimerInActiveList+0x8a>
20003a8c:	f647 1314 	movw	r3, #30996	; 0x7914
20003a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a94:	681a      	ldr	r2, [r3, #0]
20003a96:	68fb      	ldr	r3, [r7, #12]
20003a98:	f103 0304 	add.w	r3, r3, #4
20003a9c:	4610      	mov	r0, r2
20003a9e:	4619      	mov	r1, r3
20003aa0:	f7fd fc86 	bl	200013b0 <vListInsert>
20003aa4:	e017      	b.n	20003ad6 <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003aa6:	687a      	ldr	r2, [r7, #4]
20003aa8:	683b      	ldr	r3, [r7, #0]
20003aaa:	429a      	cmp	r2, r3
20003aac:	d207      	bcs.n	20003abe <prvInsertTimerInActiveList+0x72>
20003aae:	68ba      	ldr	r2, [r7, #8]
20003ab0:	683b      	ldr	r3, [r7, #0]
20003ab2:	429a      	cmp	r2, r3
20003ab4:	d303      	bcc.n	20003abe <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
20003ab6:	f04f 0301 	mov.w	r3, #1
20003aba:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003abc:	e00b      	b.n	20003ad6 <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003abe:	f647 1310 	movw	r3, #30992	; 0x7910
20003ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ac6:	681a      	ldr	r2, [r3, #0]
20003ac8:	68fb      	ldr	r3, [r7, #12]
20003aca:	f103 0304 	add.w	r3, r3, #4
20003ace:	4610      	mov	r0, r2
20003ad0:	4619      	mov	r1, r3
20003ad2:	f7fd fc6d 	bl	200013b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
20003ad6:	697b      	ldr	r3, [r7, #20]
}
20003ad8:	4618      	mov	r0, r3
20003ada:	f107 0718 	add.w	r7, r7, #24
20003ade:	46bd      	mov	sp, r7
20003ae0:	bd80      	pop	{r7, pc}
20003ae2:	bf00      	nop

20003ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20003ae4:	b580      	push	{r7, lr}
20003ae6:	b08e      	sub	sp, #56	; 0x38
20003ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003aea:	e0a5      	b.n	20003c38 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20003aec:	687b      	ldr	r3, [r7, #4]
20003aee:	2b00      	cmp	r3, #0
20003af0:	da1a      	bge.n	20003b28 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
20003af2:	f107 0304 	add.w	r3, r7, #4
20003af6:	f103 0304 	add.w	r3, r3, #4
20003afa:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003afc:	6a3b      	ldr	r3, [r7, #32]
20003afe:	2b00      	cmp	r3, #0
20003b00:	d109      	bne.n	20003b16 <prvProcessReceivedCommands+0x32>
20003b02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003b06:	f383 8811 	msr	BASEPRI, r3
20003b0a:	f3bf 8f6f 	isb	sy
20003b0e:	f3bf 8f4f 	dsb	sy
20003b12:	627b      	str	r3, [r7, #36]	; 0x24
20003b14:	e7fe      	b.n	20003b14 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
20003b16:	6a3b      	ldr	r3, [r7, #32]
20003b18:	681b      	ldr	r3, [r3, #0]
20003b1a:	6a3a      	ldr	r2, [r7, #32]
20003b1c:	6851      	ldr	r1, [r2, #4]
20003b1e:	6a3a      	ldr	r2, [r7, #32]
20003b20:	6892      	ldr	r2, [r2, #8]
20003b22:	4608      	mov	r0, r1
20003b24:	4611      	mov	r1, r2
20003b26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
20003b28:	687b      	ldr	r3, [r7, #4]
20003b2a:	2b00      	cmp	r3, #0
20003b2c:	f2c0 8084 	blt.w	20003c38 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
20003b30:	68fb      	ldr	r3, [r7, #12]
20003b32:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
20003b34:	697b      	ldr	r3, [r7, #20]
20003b36:	695b      	ldr	r3, [r3, #20]
20003b38:	2b00      	cmp	r3, #0
20003b3a:	d005      	beq.n	20003b48 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003b3c:	697b      	ldr	r3, [r7, #20]
20003b3e:	f103 0304 	add.w	r3, r3, #4
20003b42:	4618      	mov	r0, r3
20003b44:	f7fd fc6e 	bl	20001424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003b48:	463b      	mov	r3, r7
20003b4a:	4618      	mov	r0, r3
20003b4c:	f7ff ff56 	bl	200039fc <prvSampleTimeNow>
20003b50:	4603      	mov	r3, r0
20003b52:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
20003b54:	687b      	ldr	r3, [r7, #4]
20003b56:	2b09      	cmp	r3, #9
20003b58:	d86e      	bhi.n	20003c38 <prvProcessReceivedCommands+0x154>
20003b5a:	a201      	add	r2, pc, #4	; (adr r2, 20003b60 <prvProcessReceivedCommands+0x7c>)
20003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003b60:	20003b89 	.word	0x20003b89
20003b64:	20003b89 	.word	0x20003b89
20003b68:	20003b89 	.word	0x20003b89
20003b6c:	20003c39 	.word	0x20003c39
20003b70:	20003bef 	.word	0x20003bef
20003b74:	20003c27 	.word	0x20003c27
20003b78:	20003b89 	.word	0x20003b89
20003b7c:	20003b89 	.word	0x20003b89
20003b80:	20003c39 	.word	0x20003c39
20003b84:	20003bef 	.word	0x20003bef
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003b88:	68ba      	ldr	r2, [r7, #8]
20003b8a:	697b      	ldr	r3, [r7, #20]
20003b8c:	699b      	ldr	r3, [r3, #24]
20003b8e:	441a      	add	r2, r3
20003b90:	68bb      	ldr	r3, [r7, #8]
20003b92:	6978      	ldr	r0, [r7, #20]
20003b94:	4611      	mov	r1, r2
20003b96:	69fa      	ldr	r2, [r7, #28]
20003b98:	f7ff ff58 	bl	20003a4c <prvInsertTimerInActiveList>
20003b9c:	4603      	mov	r3, r0
20003b9e:	2b00      	cmp	r3, #0
20003ba0:	d045      	beq.n	20003c2e <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003ba2:	697b      	ldr	r3, [r7, #20]
20003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003ba6:	6978      	ldr	r0, [r7, #20]
20003ba8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003baa:	697b      	ldr	r3, [r7, #20]
20003bac:	69db      	ldr	r3, [r3, #28]
20003bae:	2b01      	cmp	r3, #1
20003bb0:	d13f      	bne.n	20003c32 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
20003bb2:	68ba      	ldr	r2, [r7, #8]
20003bb4:	697b      	ldr	r3, [r7, #20]
20003bb6:	699b      	ldr	r3, [r3, #24]
20003bb8:	4413      	add	r3, r2
20003bba:	f04f 0200 	mov.w	r2, #0
20003bbe:	9200      	str	r2, [sp, #0]
20003bc0:	6978      	ldr	r0, [r7, #20]
20003bc2:	f04f 0100 	mov.w	r1, #0
20003bc6:	461a      	mov	r2, r3
20003bc8:	f04f 0300 	mov.w	r3, #0
20003bcc:	f7ff fdd8 	bl	20003780 <xTimerGenericCommand>
20003bd0:	4603      	mov	r3, r0
20003bd2:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
20003bd4:	69bb      	ldr	r3, [r7, #24]
20003bd6:	2b00      	cmp	r3, #0
20003bd8:	d12d      	bne.n	20003c36 <prvProcessReceivedCommands+0x152>
20003bda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003bde:	f383 8811 	msr	BASEPRI, r3
20003be2:	f3bf 8f6f 	isb	sy
20003be6:	f3bf 8f4f 	dsb	sy
20003bea:	62bb      	str	r3, [r7, #40]	; 0x28
20003bec:	e7fe      	b.n	20003bec <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20003bee:	68ba      	ldr	r2, [r7, #8]
20003bf0:	697b      	ldr	r3, [r7, #20]
20003bf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003bf4:	697b      	ldr	r3, [r7, #20]
20003bf6:	699b      	ldr	r3, [r3, #24]
20003bf8:	2b00      	cmp	r3, #0
20003bfa:	d109      	bne.n	20003c10 <prvProcessReceivedCommands+0x12c>
20003bfc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c00:	f383 8811 	msr	BASEPRI, r3
20003c04:	f3bf 8f6f 	isb	sy
20003c08:	f3bf 8f4f 	dsb	sy
20003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
20003c0e:	e7fe      	b.n	20003c0e <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
20003c10:	697b      	ldr	r3, [r7, #20]
20003c12:	699a      	ldr	r2, [r3, #24]
20003c14:	69fb      	ldr	r3, [r7, #28]
20003c16:	4413      	add	r3, r2
20003c18:	6978      	ldr	r0, [r7, #20]
20003c1a:	4619      	mov	r1, r3
20003c1c:	69fa      	ldr	r2, [r7, #28]
20003c1e:	69fb      	ldr	r3, [r7, #28]
20003c20:	f7ff ff14 	bl	20003a4c <prvInsertTimerInActiveList>
					break;
20003c24:	e008      	b.n	20003c38 <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
20003c26:	6978      	ldr	r0, [r7, #20]
20003c28:	f000 fa0e 	bl	20004048 <vPortFree>
20003c2c:	e004      	b.n	20003c38 <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
20003c2e:	bf00      	nop
20003c30:	e002      	b.n	20003c38 <prvProcessReceivedCommands+0x154>
20003c32:	bf00      	nop
20003c34:	e000      	b.n	20003c38 <prvProcessReceivedCommands+0x154>
20003c36:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003c38:	f647 1318 	movw	r3, #31000	; 0x7918
20003c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c40:	681a      	ldr	r2, [r3, #0]
20003c42:	f107 0304 	add.w	r3, r7, #4
20003c46:	4610      	mov	r0, r2
20003c48:	4619      	mov	r1, r3
20003c4a:	f04f 0200 	mov.w	r2, #0
20003c4e:	f04f 0300 	mov.w	r3, #0
20003c52:	f7fd fee1 	bl	20001a18 <xQueueGenericReceive>
20003c56:	4603      	mov	r3, r0
20003c58:	2b00      	cmp	r3, #0
20003c5a:	f47f af47 	bne.w	20003aec <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
20003c5e:	f107 0730 	add.w	r7, r7, #48	; 0x30
20003c62:	46bd      	mov	sp, r7
20003c64:	bd80      	pop	{r7, pc}
20003c66:	bf00      	nop

20003c68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003c68:	b580      	push	{r7, lr}
20003c6a:	b088      	sub	sp, #32
20003c6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003c6e:	e053      	b.n	20003d18 <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003c70:	f647 1310 	movw	r3, #30992	; 0x7910
20003c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c78:	681b      	ldr	r3, [r3, #0]
20003c7a:	68db      	ldr	r3, [r3, #12]
20003c7c:	681b      	ldr	r3, [r3, #0]
20003c7e:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003c80:	f647 1310 	movw	r3, #30992	; 0x7910
20003c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c88:	681b      	ldr	r3, [r3, #0]
20003c8a:	68db      	ldr	r3, [r3, #12]
20003c8c:	68db      	ldr	r3, [r3, #12]
20003c8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003c90:	68fb      	ldr	r3, [r7, #12]
20003c92:	f103 0304 	add.w	r3, r3, #4
20003c96:	4618      	mov	r0, r3
20003c98:	f7fd fbc4 	bl	20001424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003c9c:	68fb      	ldr	r3, [r7, #12]
20003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003ca0:	68f8      	ldr	r0, [r7, #12]
20003ca2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003ca4:	68fb      	ldr	r3, [r7, #12]
20003ca6:	69db      	ldr	r3, [r3, #28]
20003ca8:	2b01      	cmp	r3, #1
20003caa:	d135      	bne.n	20003d18 <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003cac:	68fb      	ldr	r3, [r7, #12]
20003cae:	699a      	ldr	r2, [r3, #24]
20003cb0:	683b      	ldr	r3, [r7, #0]
20003cb2:	4413      	add	r3, r2
20003cb4:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
20003cb6:	687a      	ldr	r2, [r7, #4]
20003cb8:	683b      	ldr	r3, [r7, #0]
20003cba:	429a      	cmp	r2, r3
20003cbc:	d912      	bls.n	20003ce4 <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20003cbe:	68fb      	ldr	r3, [r7, #12]
20003cc0:	687a      	ldr	r2, [r7, #4]
20003cc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003cc4:	68fb      	ldr	r3, [r7, #12]
20003cc6:	68fa      	ldr	r2, [r7, #12]
20003cc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003cca:	f647 1310 	movw	r3, #30992	; 0x7910
20003cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cd2:	681a      	ldr	r2, [r3, #0]
20003cd4:	68fb      	ldr	r3, [r7, #12]
20003cd6:	f103 0304 	add.w	r3, r3, #4
20003cda:	4610      	mov	r0, r2
20003cdc:	4619      	mov	r1, r3
20003cde:	f7fd fb67 	bl	200013b0 <vListInsert>
20003ce2:	e019      	b.n	20003d18 <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003ce4:	f04f 0300 	mov.w	r3, #0
20003ce8:	9300      	str	r3, [sp, #0]
20003cea:	68f8      	ldr	r0, [r7, #12]
20003cec:	f04f 0100 	mov.w	r1, #0
20003cf0:	683a      	ldr	r2, [r7, #0]
20003cf2:	f04f 0300 	mov.w	r3, #0
20003cf6:	f7ff fd43 	bl	20003780 <xTimerGenericCommand>
20003cfa:	4603      	mov	r3, r0
20003cfc:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
20003cfe:	693b      	ldr	r3, [r7, #16]
20003d00:	2b00      	cmp	r3, #0
20003d02:	d109      	bne.n	20003d18 <prvSwitchTimerLists+0xb0>
20003d04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d08:	f383 8811 	msr	BASEPRI, r3
20003d0c:	f3bf 8f6f 	isb	sy
20003d10:	f3bf 8f4f 	dsb	sy
20003d14:	617b      	str	r3, [r7, #20]
20003d16:	e7fe      	b.n	20003d16 <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003d18:	f647 1310 	movw	r3, #30992	; 0x7910
20003d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d20:	681b      	ldr	r3, [r3, #0]
20003d22:	681b      	ldr	r3, [r3, #0]
20003d24:	2b00      	cmp	r3, #0
20003d26:	d1a3      	bne.n	20003c70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
20003d28:	f647 1310 	movw	r3, #30992	; 0x7910
20003d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d30:	681b      	ldr	r3, [r3, #0]
20003d32:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
20003d34:	f647 1314 	movw	r3, #30996	; 0x7914
20003d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d3c:	681a      	ldr	r2, [r3, #0]
20003d3e:	f647 1310 	movw	r3, #30992	; 0x7910
20003d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d46:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
20003d48:	f647 1314 	movw	r3, #30996	; 0x7914
20003d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d50:	68ba      	ldr	r2, [r7, #8]
20003d52:	601a      	str	r2, [r3, #0]
}
20003d54:	f107 0718 	add.w	r7, r7, #24
20003d58:	46bd      	mov	sp, r7
20003d5a:	bd80      	pop	{r7, pc}

20003d5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003d5c:	b580      	push	{r7, lr}
20003d5e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003d60:	f000 fbc4 	bl	200044ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
20003d64:	f647 1318 	movw	r3, #31000	; 0x7918
20003d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d6c:	681b      	ldr	r3, [r3, #0]
20003d6e:	2b00      	cmp	r3, #0
20003d70:	d12b      	bne.n	20003dca <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
20003d72:	f647 00e8 	movw	r0, #30952	; 0x78e8
20003d76:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003d7a:	f7fd fac3 	bl	20001304 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003d7e:	f647 00fc 	movw	r0, #30972	; 0x78fc
20003d82:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003d86:	f7fd fabd 	bl	20001304 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003d8a:	f647 1310 	movw	r3, #30992	; 0x7910
20003d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d92:	f647 02e8 	movw	r2, #30952	; 0x78e8
20003d96:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003d9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003d9c:	f647 1314 	movw	r3, #30996	; 0x7914
20003da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003da4:	f647 02fc 	movw	r2, #30972	; 0x78fc
20003da8:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003dac:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
20003dae:	f04f 0005 	mov.w	r0, #5
20003db2:	f04f 0110 	mov.w	r1, #16
20003db6:	f04f 0200 	mov.w	r2, #0
20003dba:	f7fd fbd5 	bl	20001568 <xQueueGenericCreate>
20003dbe:	4602      	mov	r2, r0
20003dc0:	f647 1318 	movw	r3, #31000	; 0x7918
20003dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003dc8:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003dca:	f000 fbc7 	bl	2000455c <vPortExitCritical>
}
20003dce:	bd80      	pop	{r7, pc}

20003dd0 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
20003dd0:	b580      	push	{r7, lr}
20003dd2:	b086      	sub	sp, #24
20003dd4:	af00      	add	r7, sp, #0
20003dd6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
20003dd8:	687b      	ldr	r3, [r7, #4]
20003dda:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
20003ddc:	687b      	ldr	r3, [r7, #4]
20003dde:	2b00      	cmp	r3, #0
20003de0:	d109      	bne.n	20003df6 <pvTimerGetTimerID+0x26>
20003de2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003de6:	f383 8811 	msr	BASEPRI, r3
20003dea:	f3bf 8f6f 	isb	sy
20003dee:	f3bf 8f4f 	dsb	sy
20003df2:	617b      	str	r3, [r7, #20]
20003df4:	e7fe      	b.n	20003df4 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
20003df6:	f000 fb79 	bl	200044ec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
20003dfa:	68fb      	ldr	r3, [r7, #12]
20003dfc:	6a1b      	ldr	r3, [r3, #32]
20003dfe:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
20003e00:	f000 fbac 	bl	2000455c <vPortExitCritical>

	return pvReturn;
20003e04:	693b      	ldr	r3, [r7, #16]
}
20003e06:	4618      	mov	r0, r3
20003e08:	f107 0718 	add.w	r7, r7, #24
20003e0c:	46bd      	mov	sp, r7
20003e0e:	bd80      	pop	{r7, pc}

20003e10 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
20003e10:	b580      	push	{r7, lr}
20003e12:	b084      	sub	sp, #16
20003e14:	af00      	add	r7, sp, #0
20003e16:	6078      	str	r0, [r7, #4]
20003e18:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
20003e1a:	687b      	ldr	r3, [r7, #4]
20003e1c:	60bb      	str	r3, [r7, #8]

	configASSERT( xTimer );
20003e1e:	687b      	ldr	r3, [r7, #4]
20003e20:	2b00      	cmp	r3, #0
20003e22:	d109      	bne.n	20003e38 <vTimerSetTimerID+0x28>
20003e24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003e28:	f383 8811 	msr	BASEPRI, r3
20003e2c:	f3bf 8f6f 	isb	sy
20003e30:	f3bf 8f4f 	dsb	sy
20003e34:	60fb      	str	r3, [r7, #12]
20003e36:	e7fe      	b.n	20003e36 <vTimerSetTimerID+0x26>

	taskENTER_CRITICAL();
20003e38:	f000 fb58 	bl	200044ec <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
20003e3c:	68bb      	ldr	r3, [r7, #8]
20003e3e:	683a      	ldr	r2, [r7, #0]
20003e40:	621a      	str	r2, [r3, #32]
	}
	taskEXIT_CRITICAL();
20003e42:	f000 fb8b 	bl	2000455c <vPortExitCritical>
}
20003e46:	f107 0710 	add.w	r7, r7, #16
20003e4a:	46bd      	mov	sp, r7
20003e4c:	bd80      	pop	{r7, pc}
20003e4e:	bf00      	nop

20003e50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003e50:	b580      	push	{r7, lr}
20003e52:	b08a      	sub	sp, #40	; 0x28
20003e54:	af00      	add	r7, sp, #0
20003e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003e58:	f04f 0300 	mov.w	r3, #0
20003e5c:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
20003e5e:	f7fe fb49 	bl	200024f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003e62:	f64d 23d4 	movw	r3, #56020	; 0xdad4
20003e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e6a:	681b      	ldr	r3, [r3, #0]
20003e6c:	2b00      	cmp	r3, #0
20003e6e:	d101      	bne.n	20003e74 <pvPortMalloc+0x24>
		{
			prvHeapInit();
20003e70:	f000 f956 	bl	20004120 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003e74:	f64d 23e0 	movw	r3, #56032	; 0xdae0
20003e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e7c:	681a      	ldr	r2, [r3, #0]
20003e7e:	687b      	ldr	r3, [r7, #4]
20003e80:	ea02 0303 	and.w	r3, r2, r3
20003e84:	2b00      	cmp	r3, #0
20003e86:	f040 80c2 	bne.w	2000400e <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003e8a:	687b      	ldr	r3, [r7, #4]
20003e8c:	2b00      	cmp	r3, #0
20003e8e:	d021      	beq.n	20003ed4 <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
20003e90:	f247 7310 	movw	r3, #30480	; 0x7710
20003e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e98:	681b      	ldr	r3, [r3, #0]
20003e9a:	687a      	ldr	r2, [r7, #4]
20003e9c:	4413      	add	r3, r2
20003e9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003ea0:	687b      	ldr	r3, [r7, #4]
20003ea2:	f003 0307 	and.w	r3, r3, #7
20003ea6:	2b00      	cmp	r3, #0
20003ea8:	d014      	beq.n	20003ed4 <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
20003eaa:	687b      	ldr	r3, [r7, #4]
20003eac:	f023 0307 	bic.w	r3, r3, #7
20003eb0:	f103 0308 	add.w	r3, r3, #8
20003eb4:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003eb6:	687b      	ldr	r3, [r7, #4]
20003eb8:	f003 0307 	and.w	r3, r3, #7
20003ebc:	2b00      	cmp	r3, #0
20003ebe:	d009      	beq.n	20003ed4 <pvPortMalloc+0x84>
20003ec0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003ec4:	f383 8811 	msr	BASEPRI, r3
20003ec8:	f3bf 8f6f 	isb	sy
20003ecc:	f3bf 8f4f 	dsb	sy
20003ed0:	61fb      	str	r3, [r7, #28]
20003ed2:	e7fe      	b.n	20003ed2 <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
20003ed4:	687b      	ldr	r3, [r7, #4]
20003ed6:	2b00      	cmp	r3, #0
20003ed8:	f000 8099 	beq.w	2000400e <pvPortMalloc+0x1be>
20003edc:	f64d 23d8 	movw	r3, #56024	; 0xdad8
20003ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ee4:	681b      	ldr	r3, [r3, #0]
20003ee6:	687a      	ldr	r2, [r7, #4]
20003ee8:	429a      	cmp	r2, r3
20003eea:	f200 8090 	bhi.w	2000400e <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003eee:	f64d 23cc 	movw	r3, #56012	; 0xdacc
20003ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ef6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
20003ef8:	f64d 23cc 	movw	r3, #56012	; 0xdacc
20003efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f00:	681b      	ldr	r3, [r3, #0]
20003f02:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003f04:	e004      	b.n	20003f10 <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
20003f06:	68fb      	ldr	r3, [r7, #12]
20003f08:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
20003f0a:	68fb      	ldr	r3, [r7, #12]
20003f0c:	681b      	ldr	r3, [r3, #0]
20003f0e:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003f10:	68fb      	ldr	r3, [r7, #12]
20003f12:	685a      	ldr	r2, [r3, #4]
20003f14:	687b      	ldr	r3, [r7, #4]
20003f16:	429a      	cmp	r2, r3
20003f18:	d203      	bcs.n	20003f22 <pvPortMalloc+0xd2>
20003f1a:	68fb      	ldr	r3, [r7, #12]
20003f1c:	681b      	ldr	r3, [r3, #0]
20003f1e:	2b00      	cmp	r3, #0
20003f20:	d1f1      	bne.n	20003f06 <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
20003f22:	f64d 23d4 	movw	r3, #56020	; 0xdad4
20003f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f2a:	681b      	ldr	r3, [r3, #0]
20003f2c:	68fa      	ldr	r2, [r7, #12]
20003f2e:	429a      	cmp	r2, r3
20003f30:	d06d      	beq.n	2000400e <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20003f32:	693b      	ldr	r3, [r7, #16]
20003f34:	681a      	ldr	r2, [r3, #0]
20003f36:	f247 7310 	movw	r3, #30480	; 0x7710
20003f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f3e:	681b      	ldr	r3, [r3, #0]
20003f40:	4413      	add	r3, r2
20003f42:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20003f44:	68fb      	ldr	r3, [r7, #12]
20003f46:	681a      	ldr	r2, [r3, #0]
20003f48:	693b      	ldr	r3, [r7, #16]
20003f4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003f4c:	68fb      	ldr	r3, [r7, #12]
20003f4e:	685a      	ldr	r2, [r3, #4]
20003f50:	687b      	ldr	r3, [r7, #4]
20003f52:	ebc3 0202 	rsb	r2, r3, r2
20003f56:	f247 7310 	movw	r3, #30480	; 0x7710
20003f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f5e:	681b      	ldr	r3, [r3, #0]
20003f60:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003f64:	429a      	cmp	r2, r3
20003f66:	d91f      	bls.n	20003fa8 <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003f68:	68fa      	ldr	r2, [r7, #12]
20003f6a:	687b      	ldr	r3, [r7, #4]
20003f6c:	4413      	add	r3, r2
20003f6e:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20003f70:	697b      	ldr	r3, [r7, #20]
20003f72:	f003 0307 	and.w	r3, r3, #7
20003f76:	2b00      	cmp	r3, #0
20003f78:	d009      	beq.n	20003f8e <pvPortMalloc+0x13e>
20003f7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f7e:	f383 8811 	msr	BASEPRI, r3
20003f82:	f3bf 8f6f 	isb	sy
20003f86:	f3bf 8f4f 	dsb	sy
20003f8a:	623b      	str	r3, [r7, #32]
20003f8c:	e7fe      	b.n	20003f8c <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
20003f8e:	68fb      	ldr	r3, [r7, #12]
20003f90:	685a      	ldr	r2, [r3, #4]
20003f92:	687b      	ldr	r3, [r7, #4]
20003f94:	ebc3 0202 	rsb	r2, r3, r2
20003f98:	697b      	ldr	r3, [r7, #20]
20003f9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
20003f9c:	68fb      	ldr	r3, [r7, #12]
20003f9e:	687a      	ldr	r2, [r7, #4]
20003fa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
20003fa2:	6978      	ldr	r0, [r7, #20]
20003fa4:	f000 f93e 	bl	20004224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20003fa8:	f64d 23d8 	movw	r3, #56024	; 0xdad8
20003fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fb0:	681a      	ldr	r2, [r3, #0]
20003fb2:	68fb      	ldr	r3, [r7, #12]
20003fb4:	685b      	ldr	r3, [r3, #4]
20003fb6:	ebc3 0202 	rsb	r2, r3, r2
20003fba:	f64d 23d8 	movw	r3, #56024	; 0xdad8
20003fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fc2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
20003fc4:	f64d 23d8 	movw	r3, #56024	; 0xdad8
20003fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fcc:	681a      	ldr	r2, [r3, #0]
20003fce:	f64d 23dc 	movw	r3, #56028	; 0xdadc
20003fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fd6:	681b      	ldr	r3, [r3, #0]
20003fd8:	429a      	cmp	r2, r3
20003fda:	d209      	bcs.n	20003ff0 <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
20003fdc:	f64d 23d8 	movw	r3, #56024	; 0xdad8
20003fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fe4:	681a      	ldr	r2, [r3, #0]
20003fe6:	f64d 23dc 	movw	r3, #56028	; 0xdadc
20003fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fee:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
20003ff0:	68fb      	ldr	r3, [r7, #12]
20003ff2:	685a      	ldr	r2, [r3, #4]
20003ff4:	f64d 23e0 	movw	r3, #56032	; 0xdae0
20003ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ffc:	681b      	ldr	r3, [r3, #0]
20003ffe:	ea42 0203 	orr.w	r2, r2, r3
20004002:	68fb      	ldr	r3, [r7, #12]
20004004:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20004006:	68fb      	ldr	r3, [r7, #12]
20004008:	f04f 0200 	mov.w	r2, #0
2000400c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
2000400e:	f7fe fa83 	bl	20002518 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
20004012:	69bb      	ldr	r3, [r7, #24]
20004014:	2b00      	cmp	r3, #0
20004016:	d101      	bne.n	2000401c <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
20004018:	f7fc fa00 	bl	2000041c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
2000401c:	69bb      	ldr	r3, [r7, #24]
2000401e:	f003 0307 	and.w	r3, r3, #7
20004022:	2b00      	cmp	r3, #0
20004024:	d009      	beq.n	2000403a <pvPortMalloc+0x1ea>
20004026:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000402a:	f383 8811 	msr	BASEPRI, r3
2000402e:	f3bf 8f6f 	isb	sy
20004032:	f3bf 8f4f 	dsb	sy
20004036:	627b      	str	r3, [r7, #36]	; 0x24
20004038:	e7fe      	b.n	20004038 <pvPortMalloc+0x1e8>
	return pvReturn;
2000403a:	69bb      	ldr	r3, [r7, #24]
}
2000403c:	4618      	mov	r0, r3
2000403e:	f107 0728 	add.w	r7, r7, #40	; 0x28
20004042:	46bd      	mov	sp, r7
20004044:	bd80      	pop	{r7, pc}
20004046:	bf00      	nop

20004048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20004048:	b580      	push	{r7, lr}
2000404a:	b086      	sub	sp, #24
2000404c:	af00      	add	r7, sp, #0
2000404e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20004050:	687b      	ldr	r3, [r7, #4]
20004052:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
20004054:	687b      	ldr	r3, [r7, #4]
20004056:	2b00      	cmp	r3, #0
20004058:	d05e      	beq.n	20004118 <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
2000405a:	f247 7310 	movw	r3, #30480	; 0x7710
2000405e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004062:	681b      	ldr	r3, [r3, #0]
20004064:	f1c3 0300 	rsb	r3, r3, #0
20004068:	68ba      	ldr	r2, [r7, #8]
2000406a:	4413      	add	r3, r2
2000406c:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
2000406e:	68bb      	ldr	r3, [r7, #8]
20004070:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
20004072:	68fb      	ldr	r3, [r7, #12]
20004074:	685a      	ldr	r2, [r3, #4]
20004076:	f64d 23e0 	movw	r3, #56032	; 0xdae0
2000407a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000407e:	681b      	ldr	r3, [r3, #0]
20004080:	ea02 0303 	and.w	r3, r2, r3
20004084:	2b00      	cmp	r3, #0
20004086:	d109      	bne.n	2000409c <vPortFree+0x54>
20004088:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000408c:	f383 8811 	msr	BASEPRI, r3
20004090:	f3bf 8f6f 	isb	sy
20004094:	f3bf 8f4f 	dsb	sy
20004098:	613b      	str	r3, [r7, #16]
2000409a:	e7fe      	b.n	2000409a <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
2000409c:	68fb      	ldr	r3, [r7, #12]
2000409e:	681b      	ldr	r3, [r3, #0]
200040a0:	2b00      	cmp	r3, #0
200040a2:	d009      	beq.n	200040b8 <vPortFree+0x70>
200040a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200040a8:	f383 8811 	msr	BASEPRI, r3
200040ac:	f3bf 8f6f 	isb	sy
200040b0:	f3bf 8f4f 	dsb	sy
200040b4:	617b      	str	r3, [r7, #20]
200040b6:	e7fe      	b.n	200040b6 <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
200040b8:	68fb      	ldr	r3, [r7, #12]
200040ba:	685a      	ldr	r2, [r3, #4]
200040bc:	f64d 23e0 	movw	r3, #56032	; 0xdae0
200040c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040c4:	681b      	ldr	r3, [r3, #0]
200040c6:	ea02 0303 	and.w	r3, r2, r3
200040ca:	2b00      	cmp	r3, #0
200040cc:	d024      	beq.n	20004118 <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
200040ce:	68fb      	ldr	r3, [r7, #12]
200040d0:	681b      	ldr	r3, [r3, #0]
200040d2:	2b00      	cmp	r3, #0
200040d4:	d120      	bne.n	20004118 <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
200040d6:	68fb      	ldr	r3, [r7, #12]
200040d8:	685a      	ldr	r2, [r3, #4]
200040da:	f64d 23e0 	movw	r3, #56032	; 0xdae0
200040de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040e2:	681b      	ldr	r3, [r3, #0]
200040e4:	ea6f 0303 	mvn.w	r3, r3
200040e8:	ea02 0203 	and.w	r2, r2, r3
200040ec:	68fb      	ldr	r3, [r7, #12]
200040ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
200040f0:	f7fe fa00 	bl	200024f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
200040f4:	68fb      	ldr	r3, [r7, #12]
200040f6:	685a      	ldr	r2, [r3, #4]
200040f8:	f64d 23d8 	movw	r3, #56024	; 0xdad8
200040fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004100:	681b      	ldr	r3, [r3, #0]
20004102:	441a      	add	r2, r3
20004104:	f64d 23d8 	movw	r3, #56024	; 0xdad8
20004108:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000410c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
2000410e:	68f8      	ldr	r0, [r7, #12]
20004110:	f000 f888 	bl	20004224 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
20004114:	f7fe fa00 	bl	20002518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20004118:	f107 0718 	add.w	r7, r7, #24
2000411c:	46bd      	mov	sp, r7
2000411e:	bd80      	pop	{r7, pc}

20004120 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20004120:	b480      	push	{r7}
20004122:	b085      	sub	sp, #20
20004124:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20004126:	f246 13a8 	movw	r3, #25000	; 0x61a8
2000412a:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
2000412c:	f647 1324 	movw	r3, #31012	; 0x7924
20004130:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004134:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20004136:	68bb      	ldr	r3, [r7, #8]
20004138:	f003 0307 	and.w	r3, r3, #7
2000413c:	2b00      	cmp	r3, #0
2000413e:	d011      	beq.n	20004164 <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20004140:	68bb      	ldr	r3, [r7, #8]
20004142:	f103 0307 	add.w	r3, r3, #7
20004146:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20004148:	68bb      	ldr	r3, [r7, #8]
2000414a:	f023 0307 	bic.w	r3, r3, #7
2000414e:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20004150:	68fa      	ldr	r2, [r7, #12]
20004152:	68bb      	ldr	r3, [r7, #8]
20004154:	ebc3 0202 	rsb	r2, r3, r2
20004158:	f647 1324 	movw	r3, #31012	; 0x7924
2000415c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004160:	4413      	add	r3, r2
20004162:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20004164:	68bb      	ldr	r3, [r7, #8]
20004166:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
20004168:	687a      	ldr	r2, [r7, #4]
2000416a:	f64d 23cc 	movw	r3, #56012	; 0xdacc
2000416e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004172:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
20004174:	f64d 23cc 	movw	r3, #56012	; 0xdacc
20004178:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000417c:	f04f 0200 	mov.w	r2, #0
20004180:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
20004182:	687a      	ldr	r2, [r7, #4]
20004184:	68fb      	ldr	r3, [r7, #12]
20004186:	4413      	add	r3, r2
20004188:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
2000418a:	f247 7310 	movw	r3, #30480	; 0x7710
2000418e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004192:	681b      	ldr	r3, [r3, #0]
20004194:	68ba      	ldr	r2, [r7, #8]
20004196:	ebc3 0302 	rsb	r3, r3, r2
2000419a:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
2000419c:	68bb      	ldr	r3, [r7, #8]
2000419e:	f023 0307 	bic.w	r3, r3, #7
200041a2:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
200041a4:	68ba      	ldr	r2, [r7, #8]
200041a6:	f64d 23d4 	movw	r3, #56020	; 0xdad4
200041aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041ae:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
200041b0:	f64d 23d4 	movw	r3, #56020	; 0xdad4
200041b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041b8:	681b      	ldr	r3, [r3, #0]
200041ba:	f04f 0200 	mov.w	r2, #0
200041be:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
200041c0:	f64d 23d4 	movw	r3, #56020	; 0xdad4
200041c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041c8:	681b      	ldr	r3, [r3, #0]
200041ca:	f04f 0200 	mov.w	r2, #0
200041ce:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
200041d0:	687b      	ldr	r3, [r7, #4]
200041d2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
200041d4:	683b      	ldr	r3, [r7, #0]
200041d6:	68ba      	ldr	r2, [r7, #8]
200041d8:	ebc3 0202 	rsb	r2, r3, r2
200041dc:	683b      	ldr	r3, [r7, #0]
200041de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
200041e0:	f64d 23d4 	movw	r3, #56020	; 0xdad4
200041e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041e8:	681a      	ldr	r2, [r3, #0]
200041ea:	683b      	ldr	r3, [r7, #0]
200041ec:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
200041ee:	683b      	ldr	r3, [r7, #0]
200041f0:	685a      	ldr	r2, [r3, #4]
200041f2:	f64d 23dc 	movw	r3, #56028	; 0xdadc
200041f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041fa:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
200041fc:	683b      	ldr	r3, [r7, #0]
200041fe:	685a      	ldr	r2, [r3, #4]
20004200:	f64d 23d8 	movw	r3, #56024	; 0xdad8
20004204:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004208:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
2000420a:	f64d 23e0 	movw	r3, #56032	; 0xdae0
2000420e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004212:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20004216:	601a      	str	r2, [r3, #0]
}
20004218:	f107 0714 	add.w	r7, r7, #20
2000421c:	46bd      	mov	sp, r7
2000421e:	bc80      	pop	{r7}
20004220:	4770      	bx	lr
20004222:	bf00      	nop

20004224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20004224:	b480      	push	{r7}
20004226:	b085      	sub	sp, #20
20004228:	af00      	add	r7, sp, #0
2000422a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
2000422c:	f64d 23cc 	movw	r3, #56012	; 0xdacc
20004230:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004234:	60bb      	str	r3, [r7, #8]
20004236:	e002      	b.n	2000423e <prvInsertBlockIntoFreeList+0x1a>
20004238:	68bb      	ldr	r3, [r7, #8]
2000423a:	681b      	ldr	r3, [r3, #0]
2000423c:	60bb      	str	r3, [r7, #8]
2000423e:	68bb      	ldr	r3, [r7, #8]
20004240:	681a      	ldr	r2, [r3, #0]
20004242:	687b      	ldr	r3, [r7, #4]
20004244:	429a      	cmp	r2, r3
20004246:	d3f7      	bcc.n	20004238 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20004248:	68bb      	ldr	r3, [r7, #8]
2000424a:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
2000424c:	68bb      	ldr	r3, [r7, #8]
2000424e:	685a      	ldr	r2, [r3, #4]
20004250:	68fb      	ldr	r3, [r7, #12]
20004252:	441a      	add	r2, r3
20004254:	687b      	ldr	r3, [r7, #4]
20004256:	429a      	cmp	r2, r3
20004258:	d108      	bne.n	2000426c <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
2000425a:	68bb      	ldr	r3, [r7, #8]
2000425c:	685a      	ldr	r2, [r3, #4]
2000425e:	687b      	ldr	r3, [r7, #4]
20004260:	685b      	ldr	r3, [r3, #4]
20004262:	441a      	add	r2, r3
20004264:	68bb      	ldr	r3, [r7, #8]
20004266:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20004268:	68bb      	ldr	r3, [r7, #8]
2000426a:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
2000426c:	687b      	ldr	r3, [r7, #4]
2000426e:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
20004270:	687b      	ldr	r3, [r7, #4]
20004272:	685a      	ldr	r2, [r3, #4]
20004274:	68fb      	ldr	r3, [r7, #12]
20004276:	441a      	add	r2, r3
20004278:	68bb      	ldr	r3, [r7, #8]
2000427a:	681b      	ldr	r3, [r3, #0]
2000427c:	429a      	cmp	r2, r3
2000427e:	d11e      	bne.n	200042be <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
20004280:	68bb      	ldr	r3, [r7, #8]
20004282:	681a      	ldr	r2, [r3, #0]
20004284:	f64d 23d4 	movw	r3, #56020	; 0xdad4
20004288:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000428c:	681b      	ldr	r3, [r3, #0]
2000428e:	429a      	cmp	r2, r3
20004290:	d00d      	beq.n	200042ae <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
20004292:	687b      	ldr	r3, [r7, #4]
20004294:	685a      	ldr	r2, [r3, #4]
20004296:	68bb      	ldr	r3, [r7, #8]
20004298:	681b      	ldr	r3, [r3, #0]
2000429a:	685b      	ldr	r3, [r3, #4]
2000429c:	441a      	add	r2, r3
2000429e:	687b      	ldr	r3, [r7, #4]
200042a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
200042a2:	68bb      	ldr	r3, [r7, #8]
200042a4:	681b      	ldr	r3, [r3, #0]
200042a6:	681a      	ldr	r2, [r3, #0]
200042a8:	687b      	ldr	r3, [r7, #4]
200042aa:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
200042ac:	e00b      	b.n	200042c6 <prvInsertBlockIntoFreeList+0xa2>
200042ae:	f64d 23d4 	movw	r3, #56020	; 0xdad4
200042b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042b6:	681a      	ldr	r2, [r3, #0]
200042b8:	687b      	ldr	r3, [r7, #4]
200042ba:	601a      	str	r2, [r3, #0]
200042bc:	e003      	b.n	200042c6 <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
200042be:	68bb      	ldr	r3, [r7, #8]
200042c0:	681a      	ldr	r2, [r3, #0]
200042c2:	687b      	ldr	r3, [r7, #4]
200042c4:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
200042c6:	68ba      	ldr	r2, [r7, #8]
200042c8:	687b      	ldr	r3, [r7, #4]
200042ca:	429a      	cmp	r2, r3
200042cc:	d002      	beq.n	200042d4 <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
200042ce:	68bb      	ldr	r3, [r7, #8]
200042d0:	687a      	ldr	r2, [r7, #4]
200042d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
200042d4:	f107 0714 	add.w	r7, r7, #20
200042d8:	46bd      	mov	sp, r7
200042da:	bc80      	pop	{r7}
200042dc:	4770      	bx	lr
200042de:	bf00      	nop

200042e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
200042e0:	b480      	push	{r7}
200042e2:	b085      	sub	sp, #20
200042e4:	af00      	add	r7, sp, #0
200042e6:	60f8      	str	r0, [r7, #12]
200042e8:	60b9      	str	r1, [r7, #8]
200042ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
200042ec:	68fb      	ldr	r3, [r7, #12]
200042ee:	f1a3 0304 	sub.w	r3, r3, #4
200042f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
200042f4:	68fb      	ldr	r3, [r7, #12]
200042f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
200042fa:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
200042fc:	68fb      	ldr	r3, [r7, #12]
200042fe:	f1a3 0304 	sub.w	r3, r3, #4
20004302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20004304:	68bb      	ldr	r3, [r7, #8]
20004306:	f023 0201 	bic.w	r2, r3, #1
2000430a:	68fb      	ldr	r3, [r7, #12]
2000430c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
2000430e:	68fb      	ldr	r3, [r7, #12]
20004310:	f1a3 0304 	sub.w	r3, r3, #4
20004314:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
20004316:	f244 3349 	movw	r3, #17225	; 0x4349
2000431a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000431e:	68fa      	ldr	r2, [r7, #12]
20004320:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
20004322:	68fb      	ldr	r3, [r7, #12]
20004324:	f1a3 0314 	sub.w	r3, r3, #20
20004328:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
2000432a:	687a      	ldr	r2, [r7, #4]
2000432c:	68fb      	ldr	r3, [r7, #12]
2000432e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20004330:	68fb      	ldr	r3, [r7, #12]
20004332:	f1a3 0320 	sub.w	r3, r3, #32
20004336:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
20004338:	68fb      	ldr	r3, [r7, #12]
}
2000433a:	4618      	mov	r0, r3
2000433c:	f107 0714 	add.w	r7, r7, #20
20004340:	46bd      	mov	sp, r7
20004342:	bc80      	pop	{r7}
20004344:	4770      	bx	lr
20004346:	bf00      	nop

20004348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20004348:	b480      	push	{r7}
2000434a:	b083      	sub	sp, #12
2000434c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
2000434e:	f247 7374 	movw	r3, #30580	; 0x7774
20004352:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004356:	681b      	ldr	r3, [r3, #0]
20004358:	f1b3 3fff 	cmp.w	r3, #4294967295
2000435c:	d009      	beq.n	20004372 <prvTaskExitError+0x2a>
2000435e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004362:	f383 8811 	msr	BASEPRI, r3
20004366:	f3bf 8f6f 	isb	sy
2000436a:	f3bf 8f4f 	dsb	sy
2000436e:	603b      	str	r3, [r7, #0]
20004370:	e7fe      	b.n	20004370 <prvTaskExitError+0x28>
20004372:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004376:	f383 8811 	msr	BASEPRI, r3
2000437a:	f3bf 8f6f 	isb	sy
2000437e:	f3bf 8f4f 	dsb	sy
20004382:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
20004384:	e7fe      	b.n	20004384 <prvTaskExitError+0x3c>
20004386:	bf00      	nop
	...

20004390 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20004390:	4b07      	ldr	r3, [pc, #28]	; (200043b0 <pxCurrentTCBConst2>)
20004392:	6819      	ldr	r1, [r3, #0]
20004394:	6808      	ldr	r0, [r1, #0]
20004396:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
2000439a:	f380 8809 	msr	PSP, r0
2000439e:	f3bf 8f6f 	isb	sy
200043a2:	f04f 0000 	mov.w	r0, #0
200043a6:	f380 8811 	msr	BASEPRI, r0
200043aa:	f04e 0e0d 	orr.w	lr, lr, #13
200043ae:	4770      	bx	lr

200043b0 <pxCurrentTCBConst2>:
200043b0:	200077dc 	.word	0x200077dc
200043b4:	f3af 8000 	nop.w
200043b8:	f3af 8000 	nop.w
200043bc:	f3af 8000 	nop.w

200043c0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
200043c0:	4806      	ldr	r0, [pc, #24]	; (200043dc <prvPortStartFirstTask+0x1c>)
200043c2:	6800      	ldr	r0, [r0, #0]
200043c4:	6800      	ldr	r0, [r0, #0]
200043c6:	f380 8808 	msr	MSP, r0
200043ca:	b662      	cpsie	i
200043cc:	b661      	cpsie	f
200043ce:	f3bf 8f4f 	dsb	sy
200043d2:	f3bf 8f6f 	isb	sy
200043d6:	df00      	svc	0
200043d8:	bf00      	nop
200043da:	0000      	.short	0x0000
200043dc:	e000ed08 	.word	0xe000ed08

200043e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
200043e0:	b580      	push	{r7, lr}
200043e2:	b084      	sub	sp, #16
200043e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
200043e6:	f24e 4300 	movw	r3, #58368	; 0xe400
200043ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
200043ee:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
200043f0:	68fb      	ldr	r3, [r7, #12]
200043f2:	781b      	ldrb	r3, [r3, #0]
200043f4:	b2db      	uxtb	r3, r3
200043f6:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
200043f8:	68fb      	ldr	r3, [r7, #12]
200043fa:	f04f 32ff 	mov.w	r2, #4294967295
200043fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20004400:	68fb      	ldr	r3, [r7, #12]
20004402:	781b      	ldrb	r3, [r3, #0]
20004404:	b2db      	uxtb	r3, r3
20004406:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20004408:	79fb      	ldrb	r3, [r7, #7]
2000440a:	b2db      	uxtb	r3, r3
2000440c:	461a      	mov	r2, r3
2000440e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
20004412:	f64d 23e4 	movw	r3, #56036	; 0xdae4
20004416:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000441a:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
2000441c:	f64d 23e8 	movw	r3, #56040	; 0xdae8
20004420:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004424:	f04f 0207 	mov.w	r2, #7
20004428:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
2000442a:	e011      	b.n	20004450 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
2000442c:	f64d 23e8 	movw	r3, #56040	; 0xdae8
20004430:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004434:	681b      	ldr	r3, [r3, #0]
20004436:	f103 32ff 	add.w	r2, r3, #4294967295
2000443a:	f64d 23e8 	movw	r3, #56040	; 0xdae8
2000443e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004442:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20004444:	79fb      	ldrb	r3, [r7, #7]
20004446:	b2db      	uxtb	r3, r3
20004448:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000444c:	b2db      	uxtb	r3, r3
2000444e:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20004450:	79fb      	ldrb	r3, [r7, #7]
20004452:	b2db      	uxtb	r3, r3
20004454:	b25b      	sxtb	r3, r3
20004456:	2b00      	cmp	r3, #0
20004458:	dbe8      	blt.n	2000442c <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
2000445a:	f64d 23e8 	movw	r3, #56040	; 0xdae8
2000445e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004462:	681b      	ldr	r3, [r3, #0]
20004464:	ea4f 2203 	mov.w	r2, r3, lsl #8
20004468:	f64d 23e8 	movw	r3, #56040	; 0xdae8
2000446c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004470:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20004472:	f64d 23e8 	movw	r3, #56040	; 0xdae8
20004476:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000447a:	681b      	ldr	r3, [r3, #0]
2000447c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20004480:	f64d 23e8 	movw	r3, #56040	; 0xdae8
20004484:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004488:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
2000448a:	68bb      	ldr	r3, [r7, #8]
2000448c:	b2da      	uxtb	r2, r3
2000448e:	68fb      	ldr	r3, [r7, #12]
20004490:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
20004492:	f64e 5320 	movw	r3, #60704	; 0xed20
20004496:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000449a:	f64e 5220 	movw	r2, #60704	; 0xed20
2000449e:	f2ce 0200 	movt	r2, #57344	; 0xe000
200044a2:	6812      	ldr	r2, [r2, #0]
200044a4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
200044a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
200044aa:	f64e 5320 	movw	r3, #60704	; 0xed20
200044ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
200044b2:	f64e 5220 	movw	r2, #60704	; 0xed20
200044b6:	f2ce 0200 	movt	r2, #57344	; 0xe000
200044ba:	6812      	ldr	r2, [r2, #0]
200044bc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
200044c0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
200044c2:	f000 f8c7 	bl	20004654 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
200044c6:	f247 7374 	movw	r3, #30580	; 0x7774
200044ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044ce:	f04f 0200 	mov.w	r2, #0
200044d2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
200044d4:	f7ff ff74 	bl	200043c0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
200044d8:	f7ff ff36 	bl	20004348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
200044dc:	f04f 0300 	mov.w	r3, #0
}
200044e0:	4618      	mov	r0, r3
200044e2:	f107 0710 	add.w	r7, r7, #16
200044e6:	46bd      	mov	sp, r7
200044e8:	bd80      	pop	{r7, pc}
200044ea:	bf00      	nop

200044ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
200044ec:	b480      	push	{r7}
200044ee:	b083      	sub	sp, #12
200044f0:	af00      	add	r7, sp, #0
200044f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200044f6:	f383 8811 	msr	BASEPRI, r3
200044fa:	f3bf 8f6f 	isb	sy
200044fe:	f3bf 8f4f 	dsb	sy
20004502:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20004504:	f247 7374 	movw	r3, #30580	; 0x7774
20004508:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000450c:	681b      	ldr	r3, [r3, #0]
2000450e:	f103 0201 	add.w	r2, r3, #1
20004512:	f247 7374 	movw	r3, #30580	; 0x7774
20004516:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000451a:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
2000451c:	f247 7374 	movw	r3, #30580	; 0x7774
20004520:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004524:	681b      	ldr	r3, [r3, #0]
20004526:	2b01      	cmp	r3, #1
20004528:	d112      	bne.n	20004550 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
2000452a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000452e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004532:	681b      	ldr	r3, [r3, #0]
20004534:	f003 03ff 	and.w	r3, r3, #255	; 0xff
20004538:	2b00      	cmp	r3, #0
2000453a:	d009      	beq.n	20004550 <vPortEnterCritical+0x64>
2000453c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004540:	f383 8811 	msr	BASEPRI, r3
20004544:	f3bf 8f6f 	isb	sy
20004548:	f3bf 8f4f 	dsb	sy
2000454c:	607b      	str	r3, [r7, #4]
2000454e:	e7fe      	b.n	2000454e <vPortEnterCritical+0x62>
	}
}
20004550:	f107 070c 	add.w	r7, r7, #12
20004554:	46bd      	mov	sp, r7
20004556:	bc80      	pop	{r7}
20004558:	4770      	bx	lr
2000455a:	bf00      	nop

2000455c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
2000455c:	b480      	push	{r7}
2000455e:	b083      	sub	sp, #12
20004560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20004562:	f247 7374 	movw	r3, #30580	; 0x7774
20004566:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000456a:	681b      	ldr	r3, [r3, #0]
2000456c:	2b00      	cmp	r3, #0
2000456e:	d109      	bne.n	20004584 <vPortExitCritical+0x28>
20004570:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004574:	f383 8811 	msr	BASEPRI, r3
20004578:	f3bf 8f6f 	isb	sy
2000457c:	f3bf 8f4f 	dsb	sy
20004580:	603b      	str	r3, [r7, #0]
20004582:	e7fe      	b.n	20004582 <vPortExitCritical+0x26>
	uxCriticalNesting--;
20004584:	f247 7374 	movw	r3, #30580	; 0x7774
20004588:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000458c:	681b      	ldr	r3, [r3, #0]
2000458e:	f103 32ff 	add.w	r2, r3, #4294967295
20004592:	f247 7374 	movw	r3, #30580	; 0x7774
20004596:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000459a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
2000459c:	f247 7374 	movw	r3, #30580	; 0x7774
200045a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045a4:	681b      	ldr	r3, [r3, #0]
200045a6:	2b00      	cmp	r3, #0
200045a8:	d105      	bne.n	200045b6 <vPortExitCritical+0x5a>
200045aa:	f04f 0300 	mov.w	r3, #0
200045ae:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200045b0:	687b      	ldr	r3, [r7, #4]
200045b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
200045b6:	f107 070c 	add.w	r7, r7, #12
200045ba:	46bd      	mov	sp, r7
200045bc:	bc80      	pop	{r7}
200045be:	4770      	bx	lr

200045c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
200045c0:	f3ef 8009 	mrs	r0, PSP
200045c4:	f3bf 8f6f 	isb	sy
200045c8:	4b0d      	ldr	r3, [pc, #52]	; (20004600 <pxCurrentTCBConst>)
200045ca:	681a      	ldr	r2, [r3, #0]
200045cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
200045d0:	6010      	str	r0, [r2, #0]
200045d2:	e92d 4008 	stmdb	sp!, {r3, lr}
200045d6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
200045da:	f380 8811 	msr	BASEPRI, r0
200045de:	f7fe f983 	bl	200028e8 <vTaskSwitchContext>
200045e2:	f04f 0000 	mov.w	r0, #0
200045e6:	f380 8811 	msr	BASEPRI, r0
200045ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
200045ee:	6819      	ldr	r1, [r3, #0]
200045f0:	6808      	ldr	r0, [r1, #0]
200045f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
200045f6:	f380 8809 	msr	PSP, r0
200045fa:	f3bf 8f6f 	isb	sy
200045fe:	4770      	bx	lr

20004600 <pxCurrentTCBConst>:
20004600:	200077dc 	.word	0x200077dc
20004604:	f3af 8000 	nop.w
20004608:	f3af 8000 	nop.w
2000460c:	f3af 8000 	nop.w

20004610 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20004610:	b580      	push	{r7, lr}
20004612:	b082      	sub	sp, #8
20004614:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20004616:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000461a:	f383 8811 	msr	BASEPRI, r3
2000461e:	f3bf 8f6f 	isb	sy
20004622:	f3bf 8f4f 	dsb	sy
20004626:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20004628:	f7fe f856 	bl	200026d8 <xTaskIncrementTick>
2000462c:	4603      	mov	r3, r0
2000462e:	2b00      	cmp	r3, #0
20004630:	d006      	beq.n	20004640 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20004632:	f64e 5304 	movw	r3, #60676	; 0xed04
20004636:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000463e:	601a      	str	r2, [r3, #0]
20004640:	f04f 0300 	mov.w	r3, #0
20004644:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20004646:	687b      	ldr	r3, [r7, #4]
20004648:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
2000464c:	f107 0708 	add.w	r7, r7, #8
20004650:	46bd      	mov	sp, r7
20004652:	bd80      	pop	{r7, pc}

20004654 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20004654:	b480      	push	{r7}
20004656:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20004658:	f24e 0314 	movw	r3, #57364	; 0xe014
2000465c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004660:	f247 72b4 	movw	r2, #30644	; 0x77b4
20004664:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004668:	6811      	ldr	r1, [r2, #0]
2000466a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
2000466e:	f2c1 0262 	movt	r2, #4194	; 0x1062
20004672:	fba2 0201 	umull	r0, r2, r2, r1
20004676:	ea4f 1292 	mov.w	r2, r2, lsr #6
2000467a:	f102 32ff 	add.w	r2, r2, #4294967295
2000467e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20004680:	f24e 0310 	movw	r3, #57360	; 0xe010
20004684:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004688:	f04f 0207 	mov.w	r2, #7
2000468c:	601a      	str	r2, [r3, #0]
}
2000468e:	46bd      	mov	sp, r7
20004690:	bc80      	pop	{r7}
20004692:	4770      	bx	lr

20004694 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20004694:	b480      	push	{r7}
20004696:	b085      	sub	sp, #20
20004698:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
2000469a:	f3ef 8305 	mrs	r3, IPSR
2000469e:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
200046a0:	683b      	ldr	r3, [r7, #0]
200046a2:	2b0f      	cmp	r3, #15
200046a4:	d91a      	bls.n	200046dc <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
200046a6:	f247 7314 	movw	r3, #30484	; 0x7714
200046aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046ae:	681a      	ldr	r2, [r3, #0]
200046b0:	683b      	ldr	r3, [r7, #0]
200046b2:	4413      	add	r3, r2
200046b4:	781b      	ldrb	r3, [r3, #0]
200046b6:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
200046b8:	f64d 23e4 	movw	r3, #56036	; 0xdae4
200046bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046c0:	781b      	ldrb	r3, [r3, #0]
200046c2:	79fa      	ldrb	r2, [r7, #7]
200046c4:	429a      	cmp	r2, r3
200046c6:	d209      	bcs.n	200046dc <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200046c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200046cc:	f383 8811 	msr	BASEPRI, r3
200046d0:	f3bf 8f6f 	isb	sy
200046d4:	f3bf 8f4f 	dsb	sy
200046d8:	60bb      	str	r3, [r7, #8]
200046da:	e7fe      	b.n	200046da <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
200046dc:	f64e 530c 	movw	r3, #60684	; 0xed0c
200046e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200046e4:	681b      	ldr	r3, [r3, #0]
200046e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200046ea:	f64d 23e8 	movw	r3, #56040	; 0xdae8
200046ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046f2:	681b      	ldr	r3, [r3, #0]
200046f4:	429a      	cmp	r2, r3
200046f6:	d909      	bls.n	2000470c <vPortValidateInterruptPriority+0x78>
200046f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200046fc:	f383 8811 	msr	BASEPRI, r3
20004700:	f3bf 8f6f 	isb	sy
20004704:	f3bf 8f4f 	dsb	sy
20004708:	60fb      	str	r3, [r7, #12]
2000470a:	e7fe      	b.n	2000470a <vPortValidateInterruptPriority+0x76>
	}
2000470c:	f107 0714 	add.w	r7, r7, #20
20004710:	46bd      	mov	sp, r7
20004712:	bc80      	pop	{r7}
20004714:	4770      	bx	lr
20004716:	bf00      	nop

20004718 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004718:	b480      	push	{r7}
2000471a:	b083      	sub	sp, #12
2000471c:	af00      	add	r7, sp, #0
2000471e:	4603      	mov	r3, r0
20004720:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20004722:	f24e 1300 	movw	r3, #57600	; 0xe100
20004726:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000472a:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000472e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004732:	79f9      	ldrb	r1, [r7, #7]
20004734:	f001 011f 	and.w	r1, r1, #31
20004738:	f04f 0001 	mov.w	r0, #1
2000473c:	fa00 f101 	lsl.w	r1, r0, r1
20004740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004744:	f107 070c 	add.w	r7, r7, #12
20004748:	46bd      	mov	sp, r7
2000474a:	bc80      	pop	{r7}
2000474c:	4770      	bx	lr
2000474e:	bf00      	nop

20004750 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20004750:	b480      	push	{r7}
20004752:	b083      	sub	sp, #12
20004754:	af00      	add	r7, sp, #0
20004756:	4603      	mov	r3, r0
20004758:	6039      	str	r1, [r7, #0]
2000475a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
2000475c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004760:	2b00      	cmp	r3, #0
20004762:	da10      	bge.n	20004786 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
20004764:	f64e 5300 	movw	r3, #60672	; 0xed00
20004768:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000476c:	79fa      	ldrb	r2, [r7, #7]
2000476e:	f002 020f 	and.w	r2, r2, #15
20004772:	f1a2 0104 	sub.w	r1, r2, #4
20004776:	683a      	ldr	r2, [r7, #0]
20004778:	b2d2      	uxtb	r2, r2
2000477a:	ea4f 1202 	mov.w	r2, r2, lsl #4
2000477e:	b2d2      	uxtb	r2, r2
20004780:	440b      	add	r3, r1
20004782:	761a      	strb	r2, [r3, #24]
20004784:	e00d      	b.n	200047a2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
20004786:	f24e 1300 	movw	r3, #57600	; 0xe100
2000478a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000478e:	f997 1007 	ldrsb.w	r1, [r7, #7]
20004792:	683a      	ldr	r2, [r7, #0]
20004794:	b2d2      	uxtb	r2, r2
20004796:	ea4f 1202 	mov.w	r2, r2, lsl #4
2000479a:	b2d2      	uxtb	r2, r2
2000479c:	440b      	add	r3, r1
2000479e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
200047a2:	f107 070c 	add.w	r7, r7, #12
200047a6:	46bd      	mov	sp, r7
200047a8:	bc80      	pop	{r7}
200047aa:	4770      	bx	lr

200047ac <get_hk_data>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void get_hk_data(void* d){
200047ac:	b590      	push	{r4, r7, lr}
200047ae:	b089      	sub	sp, #36	; 0x24
200047b0:	af00      	add	r7, sp, #0
200047b2:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(get_pld_pkt_handle);
200047b4:	f24e 2354 	movw	r3, #57940	; 0xe254
200047b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047bc:	681b      	ldr	r3, [r3, #0]
200047be:	4618      	mov	r0, r3
200047c0:	f7fd fd42 	bl	20002248 <uxTaskPriorityGet>
200047c4:	4603      	mov	r3, r0
200047c6:	61bb      	str	r3, [r7, #24]

	if(feed_get_hk_data != pdFAIL){
200047c8:	f24e 2370 	movw	r3, #57968	; 0xe270
200047cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047d0:	681b      	ldr	r3, [r3, #0]
200047d2:	2b00      	cmp	r3, #0
200047d4:	f000 81ea 	beq.w	20004bac <get_hk_data+0x400>

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
200047d8:	f04f 0300 	mov.w	r3, #0
200047dc:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
200047de:	f04f 0300 	mov.w	r3, #0
200047e2:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
200047e4:	f64d 32d4 	movw	r2, #56276	; 0xdbd4
200047e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200047ec:	f24e 235c 	movw	r3, #57948	; 0xe25c
200047f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047f4:	601a      	str	r2, [r3, #0]


		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
200047f6:	f107 0116 	add.w	r1, r7, #22
200047fa:	f107 0214 	add.w	r2, r7, #20
200047fe:	f107 0312 	add.w	r3, r7, #18
20004802:	4608      	mov	r0, r1
20004804:	4611      	mov	r1, r2
20004806:	461a      	mov	r2, r3
20004808:	f7fb fe56 	bl	200004b8 <get_IMU_acc>
2000480c:	4603      	mov	r3, r0
2000480e:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
20004810:	f107 010e 	add.w	r1, r7, #14
20004814:	f107 020c 	add.w	r2, r7, #12
20004818:	f107 030a 	add.w	r3, r7, #10
2000481c:	4608      	mov	r0, r1
2000481e:	4611      	mov	r1, r2
20004820:	461a      	mov	r2, r3
20004822:	f7fb ffdf 	bl	200007e4 <get_IMU_gyro>
20004826:	4603      	mov	r3, r0
20004828:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;
			hk_pkt->cmd_cnt = command_cnt;
2000482a:	f24e 235c 	movw	r3, #57948	; 0xe25c
2000482e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004832:	681a      	ldr	r2, [r3, #0]
20004834:	f64d 23ec 	movw	r3, #56044	; 0xdaec
20004838:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000483c:	881b      	ldrh	r3, [r3, #0]
2000483e:	b29b      	uxth	r3, r3
20004840:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004844:	f04f 0000 	mov.w	r0, #0
20004848:	ea40 0101 	orr.w	r1, r0, r1
2000484c:	7391      	strb	r1, [r2, #14]
2000484e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004852:	b29b      	uxth	r3, r3
20004854:	f04f 0100 	mov.w	r1, #0
20004858:	ea41 0303 	orr.w	r3, r1, r3
2000485c:	73d3      	strb	r3, [r2, #15]
			hk_pkt->cmd_reject_cnt = command_reject_cnt;
2000485e:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004862:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004866:	681a      	ldr	r2, [r3, #0]
20004868:	f24e 2388 	movw	r3, #57992	; 0xe288
2000486c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004870:	881b      	ldrh	r3, [r3, #0]
20004872:	b29b      	uxth	r3, r3
20004874:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004878:	f04f 0000 	mov.w	r0, #0
2000487c:	ea40 0101 	orr.w	r1, r0, r1
20004880:	7411      	strb	r1, [r2, #16]
20004882:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004886:	b29b      	uxth	r3, r3
20004888:	f04f 0100 	mov.w	r1, #0
2000488c:	ea41 0303 	orr.w	r3, r1, r3
20004890:	7453      	strb	r3, [r2, #17]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
20004892:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004896:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000489a:	681b      	ldr	r3, [r3, #0]
2000489c:	8afa      	ldrh	r2, [r7, #22]
2000489e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200048a2:	f04f 0000 	mov.w	r0, #0
200048a6:	ea40 0101 	orr.w	r1, r0, r1
200048aa:	7499      	strb	r1, [r3, #18]
200048ac:	ea4f 2212 	mov.w	r2, r2, lsr #8
200048b0:	b292      	uxth	r2, r2
200048b2:	f04f 0100 	mov.w	r1, #0
200048b6:	ea41 0202 	orr.w	r2, r1, r2
200048ba:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
200048bc:	f24e 235c 	movw	r3, #57948	; 0xe25c
200048c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048c4:	681b      	ldr	r3, [r3, #0]
200048c6:	8aba      	ldrh	r2, [r7, #20]
200048c8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200048cc:	f04f 0000 	mov.w	r0, #0
200048d0:	ea40 0101 	orr.w	r1, r0, r1
200048d4:	7519      	strb	r1, [r3, #20]
200048d6:	ea4f 2212 	mov.w	r2, r2, lsr #8
200048da:	b292      	uxth	r2, r2
200048dc:	f04f 0100 	mov.w	r1, #0
200048e0:	ea41 0202 	orr.w	r2, r1, r2
200048e4:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Acc[2] = ((az));
200048e6:	f24e 235c 	movw	r3, #57948	; 0xe25c
200048ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048ee:	681b      	ldr	r3, [r3, #0]
200048f0:	8a7a      	ldrh	r2, [r7, #18]
200048f2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200048f6:	f04f 0000 	mov.w	r0, #0
200048fa:	ea40 0101 	orr.w	r1, r0, r1
200048fe:	7599      	strb	r1, [r3, #22]
20004900:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004904:	b292      	uxth	r2, r2
20004906:	f04f 0100 	mov.w	r1, #0
2000490a:	ea41 0202 	orr.w	r2, r1, r2
2000490e:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
20004910:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004914:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004918:	681b      	ldr	r3, [r3, #0]
2000491a:	89fa      	ldrh	r2, [r7, #14]
2000491c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004920:	f04f 0000 	mov.w	r0, #0
20004924:	ea40 0101 	orr.w	r1, r0, r1
20004928:	7619      	strb	r1, [r3, #24]
2000492a:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000492e:	b292      	uxth	r2, r2
20004930:	f04f 0100 	mov.w	r1, #0
20004934:	ea41 0202 	orr.w	r2, r1, r2
20004938:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
2000493a:	f24e 235c 	movw	r3, #57948	; 0xe25c
2000493e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004942:	681b      	ldr	r3, [r3, #0]
20004944:	89ba      	ldrh	r2, [r7, #12]
20004946:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2000494a:	f04f 0000 	mov.w	r0, #0
2000494e:	ea40 0101 	orr.w	r1, r0, r1
20004952:	7699      	strb	r1, [r3, #26]
20004954:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004958:	b292      	uxth	r2, r2
2000495a:	f04f 0100 	mov.w	r1, #0
2000495e:	ea41 0202 	orr.w	r2, r1, r2
20004962:	76da      	strb	r2, [r3, #27]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
20004964:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004968:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000496c:	681b      	ldr	r3, [r3, #0]
2000496e:	897a      	ldrh	r2, [r7, #10]
20004970:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004974:	f04f 0000 	mov.w	r0, #0
20004978:	ea40 0101 	orr.w	r1, r0, r1
2000497c:	7719      	strb	r1, [r3, #28]
2000497e:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004982:	b292      	uxth	r2, r2
20004984:	f04f 0100 	mov.w	r1, #0
20004988:	ea41 0202 	orr.w	r2, r1, r2
2000498c:	775a      	strb	r2, [r3, #29]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
2000498e:	f107 0308 	add.w	r3, r7, #8
20004992:	4618      	mov	r0, r3
20004994:	f7fc f898 	bl	20000ac8 <get_IMU_temp>
20004998:	4603      	mov	r3, r0
2000499a:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
2000499c:	f24e 235c 	movw	r3, #57948	; 0xe25c
200049a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049a4:	681b      	ldr	r3, [r3, #0]
200049a6:	893a      	ldrh	r2, [r7, #8]
200049a8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200049ac:	f04f 0000 	mov.w	r0, #0
200049b0:	ea40 0101 	orr.w	r1, r0, r1
200049b4:	7799      	strb	r1, [r3, #30]
200049b6:	ea4f 2212 	mov.w	r2, r2, lsr #8
200049ba:	b292      	uxth	r2, r2
200049bc:	f04f 0100 	mov.w	r1, #0
200049c0:	ea41 0202 	orr.w	r2, r1, r2
200049c4:	77da      	strb	r2, [r3, #31]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
200049c6:	f24e 235c 	movw	r3, #57948	; 0xe25c
200049ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049ce:	681c      	ldr	r4, [r3, #0]
200049d0:	f107 0311 	add.w	r3, r7, #17
200049d4:	f04f 0040 	mov.w	r0, #64	; 0x40
200049d8:	f04f 0101 	mov.w	r1, #1
200049dc:	461a      	mov	r2, r3
200049de:	f7fc f9a7 	bl	20000d30 <read_bus_voltage>
200049e2:	4603      	mov	r3, r0
200049e4:	b29b      	uxth	r3, r3
200049e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200049ea:	f04f 0100 	mov.w	r1, #0
200049ee:	ea41 0202 	orr.w	r2, r1, r2
200049f2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
200049f6:	ea4f 2313 	mov.w	r3, r3, lsr #8
200049fa:	b29b      	uxth	r3, r3
200049fc:	f04f 0200 	mov.w	r2, #0
20004a00:	ea42 0303 	orr.w	r3, r2, r3
20004a04:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
20004a08:	7c7a      	ldrb	r2, [r7, #17]
20004a0a:	7ffb      	ldrb	r3, [r7, #31]
20004a0c:	4413      	add	r3, r2
20004a0e:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
20004a10:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a18:	681c      	ldr	r4, [r3, #0]
20004a1a:	f107 0311 	add.w	r3, r7, #17
20004a1e:	f04f 0040 	mov.w	r0, #64	; 0x40
20004a22:	f04f 0102 	mov.w	r1, #2
20004a26:	461a      	mov	r2, r3
20004a28:	f7fc f982 	bl	20000d30 <read_bus_voltage>
20004a2c:	4603      	mov	r3, r0
20004a2e:	b29b      	uxth	r3, r3
20004a30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004a34:	f04f 0100 	mov.w	r1, #0
20004a38:	ea41 0202 	orr.w	r2, r1, r2
20004a3c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
20004a40:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004a44:	b29b      	uxth	r3, r3
20004a46:	f04f 0200 	mov.w	r2, #0
20004a4a:	ea42 0303 	orr.w	r3, r2, r3
20004a4e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
20004a52:	7c7a      	ldrb	r2, [r7, #17]
20004a54:	7ffb      	ldrb	r3, [r7, #31]
20004a56:	4413      	add	r3, r2
20004a58:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
20004a5a:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a62:	681c      	ldr	r4, [r3, #0]
20004a64:	f107 0311 	add.w	r3, r7, #17
20004a68:	f04f 0040 	mov.w	r0, #64	; 0x40
20004a6c:	f04f 0103 	mov.w	r1, #3
20004a70:	461a      	mov	r2, r3
20004a72:	f7fc f95d 	bl	20000d30 <read_bus_voltage>
20004a76:	4603      	mov	r3, r0
20004a78:	b29b      	uxth	r3, r3
20004a7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004a7e:	f04f 0100 	mov.w	r1, #0
20004a82:	ea41 0202 	orr.w	r2, r1, r2
20004a86:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
20004a8a:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004a8e:	b29b      	uxth	r3, r3
20004a90:	f04f 0200 	mov.w	r2, #0
20004a94:	ea42 0303 	orr.w	r3, r2, r3
20004a98:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
20004a9c:	7c7a      	ldrb	r2, [r7, #17]
20004a9e:	7ffb      	ldrb	r3, [r7, #31]
20004aa0:	4413      	add	r3, r2
20004aa2:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
20004aa4:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004aac:	681c      	ldr	r4, [r3, #0]
20004aae:	f107 0311 	add.w	r3, r7, #17
20004ab2:	f04f 0040 	mov.w	r0, #64	; 0x40
20004ab6:	f04f 0101 	mov.w	r1, #1
20004aba:	461a      	mov	r2, r3
20004abc:	f7fc f996 	bl	20000dec <read_shunt_voltage>
20004ac0:	4603      	mov	r3, r0
20004ac2:	b29b      	uxth	r3, r3
20004ac4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004ac8:	f04f 0100 	mov.w	r1, #0
20004acc:	ea41 0202 	orr.w	r2, r1, r2
20004ad0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
20004ad4:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004ad8:	b29b      	uxth	r3, r3
20004ada:	f04f 0200 	mov.w	r2, #0
20004ade:	ea42 0303 	orr.w	r3, r2, r3
20004ae2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
20004ae6:	7c7a      	ldrb	r2, [r7, #17]
20004ae8:	7ffb      	ldrb	r3, [r7, #31]
20004aea:	4413      	add	r3, r2
20004aec:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
20004aee:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004af6:	681c      	ldr	r4, [r3, #0]
20004af8:	f107 0311 	add.w	r3, r7, #17
20004afc:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b00:	f04f 0102 	mov.w	r1, #2
20004b04:	461a      	mov	r2, r3
20004b06:	f7fc f971 	bl	20000dec <read_shunt_voltage>
20004b0a:	4603      	mov	r3, r0
20004b0c:	b29b      	uxth	r3, r3
20004b0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b12:	f04f 0100 	mov.w	r1, #0
20004b16:	ea41 0202 	orr.w	r2, r1, r2
20004b1a:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
20004b1e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004b22:	b29b      	uxth	r3, r3
20004b24:	f04f 0200 	mov.w	r2, #0
20004b28:	ea42 0303 	orr.w	r3, r2, r3
20004b2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
20004b30:	7c7a      	ldrb	r2, [r7, #17]
20004b32:	7ffb      	ldrb	r3, [r7, #31]
20004b34:	4413      	add	r3, r2
20004b36:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
20004b38:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b40:	681c      	ldr	r4, [r3, #0]
20004b42:	f107 0311 	add.w	r3, r7, #17
20004b46:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b4a:	f04f 0103 	mov.w	r1, #3
20004b4e:	461a      	mov	r2, r3
20004b50:	f7fc f94c 	bl	20000dec <read_shunt_voltage>
20004b54:	4603      	mov	r3, r0
20004b56:	b29b      	uxth	r3, r3
20004b58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b5c:	f04f 0100 	mov.w	r1, #0
20004b60:	ea41 0202 	orr.w	r2, r1, r2
20004b64:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
20004b68:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004b6c:	b29b      	uxth	r3, r3
20004b6e:	f04f 0200 	mov.w	r2, #0
20004b72:	ea42 0303 	orr.w	r3, r2, r3
20004b76:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			loss_count+= flag;
20004b7a:	7c7a      	ldrb	r2, [r7, #17]
20004b7c:	7ffb      	ldrb	r3, [r7, #31]
20004b7e:	4413      	add	r3, r2
20004b80:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
20004b82:	f64d 33d4 	movw	r3, #56276	; 0xdbd4
20004b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b8a:	f04f 0201 	mov.w	r2, #1
20004b8e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(get_pld_pkt_handle, uxPriority + 1);
20004b92:	f24e 2354 	movw	r3, #57940	; 0xe254
20004b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b9a:	681a      	ldr	r2, [r3, #0]
20004b9c:	69bb      	ldr	r3, [r7, #24]
20004b9e:	f103 0301 	add.w	r3, r3, #1
20004ba2:	4610      	mov	r0, r2
20004ba4:	4619      	mov	r1, r3
20004ba6:	f7fd fb6b 	bl	20002280 <vTaskPrioritySet>

		}
20004baa:	e624      	b.n	200047f6 <get_hk_data+0x4a>
	}
}
20004bac:	f107 0724 	add.w	r7, r7, #36	; 0x24
20004bb0:	46bd      	mov	sp, r7
20004bb2:	bd90      	pop	{r4, r7, pc}

20004bb4 <get_pld_data>:

void get_pld_data(void* d1){
20004bb4:	b5b0      	push	{r4, r5, r7, lr}
20004bb6:	b084      	sub	sp, #16
20004bb8:	af00      	add	r7, sp, #0
20004bba:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(NULL);
20004bbc:	f04f 0000 	mov.w	r0, #0
20004bc0:	f7fd fb42 	bl	20002248 <uxTaskPriorityGet>
20004bc4:	4603      	mov	r3, r0
20004bc6:	60bb      	str	r3, [r7, #8]

	if(feed_get_payload_data != pdFAIL){
20004bc8:	f24e 237c 	movw	r3, #57980	; 0xe27c
20004bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bd0:	681b      	ldr	r3, [r3, #0]
20004bd2:	2b00      	cmp	r3, #0
20004bd4:	d04f      	beq.n	20004c76 <get_pld_data+0xc2>

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
20004bd6:	f64d 22f4 	movw	r2, #56052	; 0xdaf4
20004bda:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004bde:	f24e 2384 	movw	r3, #57988	; 0xe284
20004be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004be6:	601a      	str	r2, [r3, #0]
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004be8:	f04f 0300 	mov.w	r3, #0
20004bec:	73fb      	strb	r3, [r7, #15]
20004bee:	e02e      	b.n	20004c4e <get_pld_data+0x9a>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
20004bf0:	f24e 2384 	movw	r3, #57988	; 0xe284
20004bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bf8:	681c      	ldr	r4, [r3, #0]
20004bfa:	7bfd      	ldrb	r5, [r7, #15]
20004bfc:	7bbb      	ldrb	r3, [r7, #14]
20004bfe:	7bfa      	ldrb	r2, [r7, #15]
20004c00:	f24e 10c0 	movw	r0, #57792	; 0xe1c0
20004c04:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004c08:	f04f 0121 	mov.w	r1, #33	; 0x21
20004c0c:	f7fc f94e 	bl	20000eac <get_ADC_value>
20004c10:	4603      	mov	r3, r0
20004c12:	4619      	mov	r1, r3
20004c14:	f105 0204 	add.w	r2, r5, #4
20004c18:	f001 00ff 	and.w	r0, r1, #255	; 0xff
20004c1c:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004c20:	4423      	add	r3, r4
20004c22:	f04f 0c00 	mov.w	ip, #0
20004c26:	ea4c 0000 	orr.w	r0, ip, r0
20004c2a:	7198      	strb	r0, [r3, #6]
20004c2c:	ea4f 2311 	mov.w	r3, r1, lsr #8
20004c30:	b298      	uxth	r0, r3
20004c32:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004c36:	4423      	add	r3, r4
20004c38:	f04f 0200 	mov.w	r2, #0
20004c3c:	4611      	mov	r1, r2
20004c3e:	4602      	mov	r2, r0
20004c40:	ea41 0202 	orr.w	r2, r1, r2
20004c44:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004c46:	7bfb      	ldrb	r3, [r7, #15]
20004c48:	f103 0301 	add.w	r3, r3, #1
20004c4c:	73fb      	strb	r3, [r7, #15]
20004c4e:	7bfb      	ldrb	r3, [r7, #15]
20004c50:	2b06      	cmp	r3, #6
20004c52:	d9cd      	bls.n	20004bf0 <get_pld_data+0x3c>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
20004c54:	f64d 23f4 	movw	r3, #56052	; 0xdaf4
20004c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c5c:	f04f 0202 	mov.w	r2, #2
20004c60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(NULL, uxPriority - 2);
20004c64:	68bb      	ldr	r3, [r7, #8]
20004c66:	f1a3 0302 	sub.w	r3, r3, #2
20004c6a:	f04f 0000 	mov.w	r0, #0
20004c6e:	4619      	mov	r1, r3
20004c70:	f7fd fb06 	bl	20002280 <vTaskPrioritySet>

		}
20004c74:	e7b8      	b.n	20004be8 <get_pld_data+0x34>

	}
}
20004c76:	f107 0710 	add.w	r7, r7, #16
20004c7a:	46bd      	mov	sp, r7
20004c7c:	bdb0      	pop	{r4, r5, r7, pc}
20004c7e:	bf00      	nop

20004c80 <vGetPktStruct>:


void vGetPktStruct(pkt_name_t pktname, void* pktdata, uint8_t pktsize){
20004c80:	b580      	push	{r7, lr}
20004c82:	b088      	sub	sp, #32
20004c84:	af00      	add	r7, sp, #0
20004c86:	60b9      	str	r1, [r7, #8]
20004c88:	4613      	mov	r3, r2
20004c8a:	4602      	mov	r2, r0
20004c8c:	73fa      	strb	r2, [r7, #15]
20004c8e:	71fb      	strb	r3, [r7, #7]

	pkt_t pkt;

	pkt.pkt_type = pktname;
20004c90:	7bfb      	ldrb	r3, [r7, #15]
20004c92:	753b      	strb	r3, [r7, #20]
	pkt.pkt_data = pktdata;
20004c94:	68bb      	ldr	r3, [r7, #8]
20004c96:	61bb      	str	r3, [r7, #24]
	pkt.pkt_size = pktsize;
20004c98:	79fb      	ldrb	r3, [r7, #7]
20004c9a:	773b      	strb	r3, [r7, #28]

//	xQueueSend(Data_PKT_Queue, &pkt, 0);

	// Storing the packets
	if(pkt_stream[pktname].rate != 0){
20004c9c:	7bf9      	ldrb	r1, [r7, #15]
20004c9e:	f64d 72d8 	movw	r2, #57304	; 0xdfd8
20004ca2:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004ca6:	460b      	mov	r3, r1
20004ca8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20004cac:	ebc1 0303 	rsb	r3, r1, r3
20004cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
20004cb4:	4413      	add	r3, r2
20004cb6:	f103 0308 	add.w	r3, r3, #8
20004cba:	889b      	ldrh	r3, [r3, #4]
20004cbc:	2b00      	cmp	r3, #0
20004cbe:	d011      	beq.n	20004ce4 <vGetPktStruct+0x64>
		xQueueSend(Data_PKT_Queue, &pkt , 0);
20004cc0:	f24e 2380 	movw	r3, #57984	; 0xe280
20004cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cc8:	681a      	ldr	r2, [r3, #0]
20004cca:	f107 0314 	add.w	r3, r7, #20
20004cce:	4610      	mov	r0, r2
20004cd0:	4619      	mov	r1, r3
20004cd2:	f04f 0200 	mov.w	r2, #0
20004cd6:	f04f 0300 	mov.w	r3, #0
20004cda:	f7fc fce3 	bl	200016a4 <xQueueGenericSend>
		vtlm_sender();
20004cde:	f000 f927 	bl	20004f30 <vtlm_sender>
20004ce2:	e00e      	b.n	20004d02 <vGetPktStruct+0x82>
	}
	else{
		xQueueSend(Store_PKT_Queue, &pkt, 0);
20004ce4:	f24e 234c 	movw	r3, #57932	; 0xe24c
20004ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cec:	681a      	ldr	r2, [r3, #0]
20004cee:	f107 0314 	add.w	r3, r7, #20
20004cf2:	4610      	mov	r0, r2
20004cf4:	4619      	mov	r1, r3
20004cf6:	f04f 0200 	mov.w	r2, #0
20004cfa:	f04f 0300 	mov.w	r3, #0
20004cfe:	f7fc fcd1 	bl	200016a4 <xQueueGenericSend>
	}

}
20004d02:	f107 0720 	add.w	r7, r7, #32
20004d06:	46bd      	mov	sp, r7
20004d08:	bd80      	pop	{r7, pc}
20004d0a:	bf00      	nop

20004d0c <vtlm_task>:

void vtlm_task(TimerHandle_t exp_timer){
20004d0c:	b580      	push	{r7, lr}
20004d0e:	b084      	sub	sp, #16
20004d10:	af00      	add	r7, sp, #0
20004d12:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;  // Try to generalised this timer callback function. Also combine the tlm_task and the tlm_sender task.
20004d14:	f04f 0300 	mov.w	r3, #0
20004d18:	817b      	strh	r3, [r7, #10]
	uint16_t* t_id;
	t_id = (uint16_t*) pvTimerGetTimerID(exp_timer);
20004d1a:	6878      	ldr	r0, [r7, #4]
20004d1c:	f7ff f858 	bl	20003dd0 <pvTimerGetTimerID>
20004d20:	4603      	mov	r3, r0
20004d22:	60fb      	str	r3, [r7, #12]

	if(t_id == 0){
20004d24:	68fb      	ldr	r3, [r7, #12]
20004d26:	2b00      	cmp	r3, #0
20004d28:	d17d      	bne.n	20004e26 <vtlm_task+0x11a>
		hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
20004d2a:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d32:	681b      	ldr	r3, [r3, #0]
20004d34:	f04f 0200 	mov.w	r2, #0
20004d38:	f042 0208 	orr.w	r2, r2, #8
20004d3c:	701a      	strb	r2, [r3, #0]
20004d3e:	f04f 0200 	mov.w	r2, #0
20004d42:	f042 0201 	orr.w	r2, r2, #1
20004d46:	705a      	strb	r2, [r3, #1]
		hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004d48:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d50:	681a      	ldr	r2, [r3, #0]
20004d52:	897b      	ldrh	r3, [r7, #10]
20004d54:	f103 0301 	add.w	r3, r3, #1
20004d58:	817b      	strh	r3, [r7, #10]
20004d5a:	897b      	ldrh	r3, [r7, #10]
20004d5c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004d60:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004d64:	b29b      	uxth	r3, r3
20004d66:	b29b      	uxth	r3, r3
20004d68:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004d6c:	b299      	uxth	r1, r3
20004d6e:	897b      	ldrh	r3, [r7, #10]
20004d70:	f103 0301 	add.w	r3, r3, #1
20004d74:	817b      	strh	r3, [r7, #10]
20004d76:	897b      	ldrh	r3, [r7, #10]
20004d78:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004d7c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004d80:	b29b      	uxth	r3, r3
20004d82:	b29b      	uxth	r3, r3
20004d84:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004d88:	b29b      	uxth	r3, r3
20004d8a:	ea41 0303 	orr.w	r3, r1, r3
20004d8e:	b29b      	uxth	r3, r3
20004d90:	b29b      	uxth	r3, r3
20004d92:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004d96:	f04f 0000 	mov.w	r0, #0
20004d9a:	ea40 0101 	orr.w	r1, r0, r1
20004d9e:	7091      	strb	r1, [r2, #2]
20004da0:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004da4:	b29b      	uxth	r3, r3
20004da6:	f04f 0100 	mov.w	r1, #0
20004daa:	ea41 0303 	orr.w	r3, r1, r3
20004dae:	70d3      	strb	r3, [r2, #3]
		hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
20004db0:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004db8:	681b      	ldr	r3, [r3, #0]
20004dba:	f04f 0200 	mov.w	r2, #0
20004dbe:	711a      	strb	r2, [r3, #4]
20004dc0:	f04f 0200 	mov.w	r2, #0
20004dc4:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
20004dc8:	715a      	strb	r2, [r3, #5]
		hk_pkt->ccsds_s1 = 0;
20004dca:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dd2:	681b      	ldr	r3, [r3, #0]
20004dd4:	f04f 0200 	mov.w	r2, #0
20004dd8:	719a      	strb	r2, [r3, #6]
20004dda:	f04f 0200 	mov.w	r2, #0
20004dde:	71da      	strb	r2, [r3, #7]
20004de0:	f04f 0200 	mov.w	r2, #0
20004de4:	721a      	strb	r2, [r3, #8]
20004de6:	f04f 0200 	mov.w	r2, #0
20004dea:	725a      	strb	r2, [r3, #9]
		hk_pkt->ccsds_s2 = 0;
20004dec:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004df4:	681b      	ldr	r3, [r3, #0]
20004df6:	f04f 0200 	mov.w	r2, #0
20004dfa:	729a      	strb	r2, [r3, #10]
20004dfc:	f04f 0200 	mov.w	r2, #0
20004e00:	72da      	strb	r2, [r3, #11]
20004e02:	f04f 0200 	mov.w	r2, #0
20004e06:	731a      	strb	r2, [r3, #12]
20004e08:	f04f 0200 	mov.w	r2, #0
20004e0c:	735a      	strb	r2, [r3, #13]

		vGetPktStruct( hk, (void*) hk_pkt, HK_PKT_LENGTH);
20004e0e:	f24e 235c 	movw	r3, #57948	; 0xe25c
20004e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e16:	681b      	ldr	r3, [r3, #0]
20004e18:	f04f 0000 	mov.w	r0, #0
20004e1c:	4619      	mov	r1, r3
20004e1e:	f04f 022e 	mov.w	r2, #46	; 0x2e
20004e22:	f7ff ff2d 	bl	20004c80 <vGetPktStruct>
	}
	if(t_id == 1){
20004e26:	68fb      	ldr	r3, [r7, #12]
20004e28:	2b01      	cmp	r3, #1
20004e2a:	d17d      	bne.n	20004f28 <vtlm_task+0x21c>
		pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
20004e2c:	f24e 2384 	movw	r3, #57988	; 0xe284
20004e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e34:	681b      	ldr	r3, [r3, #0]
20004e36:	f04f 0200 	mov.w	r2, #0
20004e3a:	f042 0208 	orr.w	r2, r2, #8
20004e3e:	701a      	strb	r2, [r3, #0]
20004e40:	f04f 0200 	mov.w	r2, #0
20004e44:	f042 0202 	orr.w	r2, r2, #2
20004e48:	705a      	strb	r2, [r3, #1]
		pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004e4a:	f24e 2384 	movw	r3, #57988	; 0xe284
20004e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e52:	681a      	ldr	r2, [r3, #0]
20004e54:	897b      	ldrh	r3, [r7, #10]
20004e56:	f103 0301 	add.w	r3, r3, #1
20004e5a:	817b      	strh	r3, [r7, #10]
20004e5c:	897b      	ldrh	r3, [r7, #10]
20004e5e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004e62:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004e66:	b29b      	uxth	r3, r3
20004e68:	b29b      	uxth	r3, r3
20004e6a:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004e6e:	b299      	uxth	r1, r3
20004e70:	897b      	ldrh	r3, [r7, #10]
20004e72:	f103 0301 	add.w	r3, r3, #1
20004e76:	817b      	strh	r3, [r7, #10]
20004e78:	897b      	ldrh	r3, [r7, #10]
20004e7a:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004e7e:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004e82:	b29b      	uxth	r3, r3
20004e84:	b29b      	uxth	r3, r3
20004e86:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004e8a:	b29b      	uxth	r3, r3
20004e8c:	ea41 0303 	orr.w	r3, r1, r3
20004e90:	b29b      	uxth	r3, r3
20004e92:	b29b      	uxth	r3, r3
20004e94:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004e98:	f04f 0000 	mov.w	r0, #0
20004e9c:	ea40 0101 	orr.w	r1, r0, r1
20004ea0:	7091      	strb	r1, [r2, #2]
20004ea2:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004ea6:	b29b      	uxth	r3, r3
20004ea8:	f04f 0100 	mov.w	r1, #0
20004eac:	ea41 0303 	orr.w	r3, r1, r3
20004eb0:	70d3      	strb	r3, [r2, #3]
		pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
20004eb2:	f24e 2384 	movw	r3, #57988	; 0xe284
20004eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004eba:	681b      	ldr	r3, [r3, #0]
20004ebc:	f04f 0200 	mov.w	r2, #0
20004ec0:	711a      	strb	r2, [r3, #4]
20004ec2:	f04f 0200 	mov.w	r2, #0
20004ec6:	f042 021e 	orr.w	r2, r2, #30
20004eca:	715a      	strb	r2, [r3, #5]

		pld_pkt->ccsds_s1 = 0;
20004ecc:	f24e 2384 	movw	r3, #57988	; 0xe284
20004ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ed4:	681b      	ldr	r3, [r3, #0]
20004ed6:	f04f 0200 	mov.w	r2, #0
20004eda:	719a      	strb	r2, [r3, #6]
20004edc:	f04f 0200 	mov.w	r2, #0
20004ee0:	71da      	strb	r2, [r3, #7]
20004ee2:	f04f 0200 	mov.w	r2, #0
20004ee6:	721a      	strb	r2, [r3, #8]
20004ee8:	f04f 0200 	mov.w	r2, #0
20004eec:	725a      	strb	r2, [r3, #9]
		pld_pkt->ccsds_s2 = 0;
20004eee:	f24e 2384 	movw	r3, #57988	; 0xe284
20004ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ef6:	681b      	ldr	r3, [r3, #0]
20004ef8:	f04f 0200 	mov.w	r2, #0
20004efc:	729a      	strb	r2, [r3, #10]
20004efe:	f04f 0200 	mov.w	r2, #0
20004f02:	72da      	strb	r2, [r3, #11]
20004f04:	f04f 0200 	mov.w	r2, #0
20004f08:	731a      	strb	r2, [r3, #12]
20004f0a:	f04f 0200 	mov.w	r2, #0
20004f0e:	735a      	strb	r2, [r3, #13]

		vGetPktStruct(pld, (void* )pld_pkt, PLD_PKT_LENGTH);
20004f10:	f24e 2384 	movw	r3, #57988	; 0xe284
20004f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f18:	681b      	ldr	r3, [r3, #0]
20004f1a:	f04f 0001 	mov.w	r0, #1
20004f1e:	4619      	mov	r1, r3
20004f20:	f04f 021e 	mov.w	r2, #30
20004f24:	f7ff feac 	bl	20004c80 <vGetPktStruct>
	}
	else{

	}
}
20004f28:	f107 0710 	add.w	r7, r7, #16
20004f2c:	46bd      	mov	sp, r7
20004f2e:	bd80      	pop	{r7, pc}

20004f30 <vtlm_sender>:


void vtlm_sender(void* d){
20004f30:	b580      	push	{r7, lr}
20004f32:	b086      	sub	sp, #24
20004f34:	af00      	add	r7, sp, #0
20004f36:	6078      	str	r0, [r7, #4]

	pkt_t pkt_send;

//	pkt_stream(pkt_send);

	xQueueReceive(Data_PKT_Queue, &pkt_send, portMAX_DELAY);
20004f38:	f24e 2380 	movw	r3, #57984	; 0xe280
20004f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f40:	681a      	ldr	r2, [r3, #0]
20004f42:	f107 030c 	add.w	r3, r7, #12
20004f46:	4610      	mov	r0, r2
20004f48:	4619      	mov	r1, r3
20004f4a:	f04f 32ff 	mov.w	r2, #4294967295
20004f4e:	f04f 0300 	mov.w	r3, #0
20004f52:	f7fc fd61 	bl	20001a18 <xQueueGenericReceive>

	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);
20004f56:	693b      	ldr	r3, [r7, #16]
20004f58:	461a      	mov	r2, r3
20004f5a:	7d3b      	ldrb	r3, [r7, #20]
20004f5c:	f24e 20d0 	movw	r0, #58064	; 0xe2d0
20004f60:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004f64:	4611      	mov	r1, r2
20004f66:	461a      	mov	r2, r3
20004f68:	f000 fb0c 	bl	20005584 <MSS_UART_polled_tx>
//
//
//	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);


}
20004f6c:	f107 0718 	add.w	r7, r7, #24
20004f70:	46bd      	mov	sp, r7
20004f72:	bd80      	pop	{r7, pc}

20004f74 <irq_tsk_func>:
	}

}


void irq_tsk_func(void* f_param){
20004f74:	b580      	push	{r7, lr}
20004f76:	b084      	sub	sp, #16
20004f78:	af00      	add	r7, sp, #0
20004f7a:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue;

	while(1){

		xTaskNotifyWait(0x00, 0, &ulNotifiedValue, portMAX_DELAY);
20004f7c:	f107 0308 	add.w	r3, r7, #8
20004f80:	f04f 0000 	mov.w	r0, #0
20004f84:	f04f 0100 	mov.w	r1, #0
20004f88:	461a      	mov	r2, r3
20004f8a:	f04f 33ff 	mov.w	r3, #4294967295
20004f8e:	f7fe f9c5 	bl	2000331c <xTaskNotifyWait>
		ulTaskNotifyTake(pdTRUE, 1);
20004f92:	f04f 0001 	mov.w	r0, #1
20004f96:	f04f 0101 	mov.w	r1, #1
20004f9a:	f7fe f95f 	bl	2000325c <ulTaskNotifyTake>
		rx_cmd_t* rx_cmd;
		rx_cmd = (rx_cmd_t* ) f_param;
20004f9e:	687b      	ldr	r3, [r7, #4]
20004fa0:	60fb      	str	r3, [r7, #12]


		if(cmd_valid(rx_cmd)){
20004fa2:	68f8      	ldr	r0, [r7, #12]
20004fa4:	f7fc f838 	bl	20001018 <cmd_valid>
20004fa8:	4603      	mov	r3, r0
20004faa:	2b00      	cmp	r3, #0
20004fac:	d011      	beq.n	20004fd2 <irq_tsk_func+0x5e>
			cmd_engine(rx_cmd);
20004fae:	68f8      	ldr	r0, [r7, #12]
20004fb0:	f7fc f8ee 	bl	20001190 <cmd_engine>
			command_cnt++;
20004fb4:	f64d 23ec 	movw	r3, #56044	; 0xdaec
20004fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fbc:	881b      	ldrh	r3, [r3, #0]
20004fbe:	b29b      	uxth	r3, r3
20004fc0:	f103 0301 	add.w	r3, r3, #1
20004fc4:	b29a      	uxth	r2, r3
20004fc6:	f64d 23ec 	movw	r3, #56044	; 0xdaec
20004fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fce:	801a      	strh	r2, [r3, #0]
		else{
			command_reject_cnt++;
		}


	}
20004fd0:	e7d4      	b.n	20004f7c <irq_tsk_func+0x8>
		if(cmd_valid(rx_cmd)){
			cmd_engine(rx_cmd);
			command_cnt++;
		}
		else{
			command_reject_cnt++;
20004fd2:	f24e 2388 	movw	r3, #57992	; 0xe288
20004fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fda:	881b      	ldrh	r3, [r3, #0]
20004fdc:	b29b      	uxth	r3, r3
20004fde:	f103 0301 	add.w	r3, r3, #1
20004fe2:	b29a      	uxth	r2, r3
20004fe4:	f24e 2388 	movw	r3, #57992	; 0xe288
20004fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fec:	801a      	strh	r2, [r3, #0]
		}


	}
20004fee:	e7c5      	b.n	20004f7c <irq_tsk_func+0x8>

20004ff0 <uart0_rx_handler>:
}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
20004ff0:	b580      	push	{r7, lr}
20004ff2:	b084      	sub	sp, #16
20004ff4:	af00      	add	r7, sp, #0
20004ff6:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer, 8);
20004ff8:	6878      	ldr	r0, [r7, #4]
20004ffa:	f64d 3194 	movw	r1, #56212	; 0xdb94
20004ffe:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005002:	f04f 0208 	mov.w	r2, #8
20005006:	f000 fb2f 	bl	20005668 <MSS_UART_get_rx>
2000500a:	4602      	mov	r2, r0
2000500c:	f64d 33d0 	movw	r3, #56272	; 0xdbd0
20005010:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005014:	601a      	str	r2, [r3, #0]

	BaseType_t xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
20005016:	f04f 0300 	mov.w	r3, #0
2000501a:	60fb      	str	r3, [r7, #12]

	 vTaskNotifyGiveFromISR(uart_irq, &xHigherPriorityTaskWoken);
2000501c:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
20005020:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005024:	681a      	ldr	r2, [r3, #0]
20005026:	f107 030c 	add.w	r3, r7, #12
2000502a:	4610      	mov	r0, r2
2000502c:	4619      	mov	r1, r3
2000502e:	f7fe f9ed 	bl	2000340c <vTaskNotifyGiveFromISR>

	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
20005032:	68fb      	ldr	r3, [r7, #12]
20005034:	2b00      	cmp	r3, #0
20005036:	d00a      	beq.n	2000504e <uart0_rx_handler+0x5e>
20005038:	f64e 5304 	movw	r3, #60676	; 0xed04
2000503c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20005040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20005044:	601a      	str	r2, [r3, #0]
20005046:	f3bf 8f4f 	dsb	sy
2000504a:	f3bf 8f6f 	isb	sy

}
2000504e:	f107 0710 	add.w	r7, r7, #16
20005052:	46bd      	mov	sp, r7
20005054:	bd80      	pop	{r7, pc}
20005056:	bf00      	nop

20005058 <demo_tasks>:
//	 }
//}



void demo_tasks(void){
20005058:	b590      	push	{r4, r7, lr}
2000505a:	b08d      	sub	sp, #52	; 0x34
2000505c:	af02      	add	r7, sp, #8

		uint8_t REF_DATA[3] = {0x38, 0x00, 0x00};
2000505e:	f04f 0338 	mov.w	r3, #56	; 0x38
20005062:	743b      	strb	r3, [r7, #16]
20005064:	f04f 0300 	mov.w	r3, #0
20005068:	747b      	strb	r3, [r7, #17]
2000506a:	f04f 0300 	mov.w	r3, #0
2000506e:	74bb      	strb	r3, [r7, #18]
		uint8_t PWR[3] = {0x20, 0x00, 0x0F};
20005070:	f247 723c 	movw	r2, #30524	; 0x773c
20005074:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005078:	f107 030c 	add.w	r3, r7, #12
2000507c:	6812      	ldr	r2, [r2, #0]
2000507e:	4611      	mov	r1, r2
20005080:	8019      	strh	r1, [r3, #0]
20005082:	f103 0302 	add.w	r3, r3, #2
20005086:	ea4f 4212 	mov.w	r2, r2, lsr #16
2000508a:	701a      	strb	r2, [r3, #0]
		uint8_t config[3] = {0x30, 0x00, 0x01};
2000508c:	f247 7240 	movw	r2, #30528	; 0x7740
20005090:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005094:	f107 0308 	add.w	r3, r7, #8
20005098:	6812      	ldr	r2, [r2, #0]
2000509a:	4611      	mov	r1, r2
2000509c:	8019      	strh	r1, [r3, #0]
2000509e:	f103 0302 	add.w	r3, r3, #2
200050a2:	ea4f 4212 	mov.w	r2, r2, lsr #16
200050a6:	701a      	strb	r2, [r3, #0]
		uint8_t sw_clear[3] = {0x28, 0x00, 0x01};
200050a8:	f247 7244 	movw	r2, #30532	; 0x7744
200050ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
200050b0:	f107 0304 	add.w	r3, r7, #4
200050b4:	6812      	ldr	r2, [r2, #0]
200050b6:	4611      	mov	r1, r2
200050b8:	8019      	strh	r1, [r3, #0]
200050ba:	f103 0302 	add.w	r3, r3, #2
200050be:	ea4f 4212 	mov.w	r2, r2, lsr #16
200050c2:	701a      	strb	r2, [r3, #0]
		i2c_status_t status;

//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
200050c4:	f64d 63d4 	movw	r3, #57044	; 0xded4
200050c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050cc:	617b      	str	r3, [r7, #20]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
200050ce:	f247 7378 	movw	r3, #30584	; 0x7778
200050d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050d6:	61bb      	str	r3, [r7, #24]
		imu_ptr->init = &init;
200050d8:	697a      	ldr	r2, [r7, #20]
200050da:	f640 734d 	movw	r3, #3917	; 0xf4d
200050de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050e2:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
200050e4:	697b      	ldr	r3, [r7, #20]
200050e6:	681b      	ldr	r3, [r3, #0]
200050e8:	f04f 0000 	mov.w	r0, #0
200050ec:	69b9      	ldr	r1, [r7, #24]
200050ee:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
200050f0:	f24e 10c0 	movw	r0, #57792	; 0xe1c0
200050f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200050f8:	f244 0100 	movw	r1, #16384	; 0x4000
200050fc:	f2c5 0100 	movt	r1, #20480	; 0x5000
20005100:	f04f 0221 	mov.w	r2, #33	; 0x21
20005104:	f04f 0300 	mov.w	r3, #0
20005108:	f000 ff3e 	bl	20005f88 <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
2000510c:	f64d 63d4 	movw	r3, #57044	; 0xded4
20005110:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005114:	61fb      	str	r3, [r7, #28]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
20005116:	f247 7398 	movw	r3, #30616	; 0x7798
2000511a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000511e:	623b      	str	r3, [r7, #32]
		vc_ptr->init = &init;
20005120:	69fa      	ldr	r2, [r7, #28]
20005122:	f640 734d 	movw	r3, #3917	; 0xf4d
20005126:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000512a:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
2000512c:	69fb      	ldr	r3, [r7, #28]
2000512e:	681b      	ldr	r3, [r3, #0]
20005130:	f04f 000a 	mov.w	r0, #10
20005134:	6a39      	ldr	r1, [r7, #32]
20005136:	4798      	blx	r3

		Data_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t));  //Common queue for all packets data storage
20005138:	f04f 0003 	mov.w	r0, #3
2000513c:	f04f 010c 	mov.w	r1, #12
20005140:	f04f 0200 	mov.w	r2, #0
20005144:	f7fc fa10 	bl	20001568 <xQueueGenericCreate>
20005148:	4602      	mov	r2, r0
2000514a:	f24e 2380 	movw	r3, #57984	; 0xe280
2000514e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005152:	601a      	str	r2, [r3, #0]
		Store_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t)); // Queue from which the data will be stored to the storage
20005154:	f04f 0003 	mov.w	r0, #3
20005158:	f04f 010c 	mov.w	r1, #12
2000515c:	f04f 0200 	mov.w	r2, #0
20005160:	f7fc fa02 	bl	20001568 <xQueueGenericCreate>
20005164:	4602      	mov	r2, r0
20005166:	f24e 234c 	movw	r3, #57932	; 0xe24c
2000516a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000516e:	601a      	str	r2, [r3, #0]

		set_pktRate(hk, HK_PKT_PERIOD);   //Set all the default packet rate
20005170:	f04f 0000 	mov.w	r0, #0
20005174:	f04f 0103 	mov.w	r1, #3
20005178:	f7fb f974 	bl	20000464 <set_pktRate>
		set_pktRate(pld, PLD_PKT_PERIOD);
2000517c:	f04f 0001 	mov.w	r0, #1
20005180:	f04f 0105 	mov.w	r1, #5
20005184:	f7fb f96e 	bl	20000464 <set_pktRate>
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		NVIC_EnableIRQ(UART0_IRQn);
20005188:	f04f 000a 	mov.w	r0, #10
2000518c:	f7ff fac4 	bl	20004718 <NVIC_EnableIRQ>
		NVIC_SetPriority(UART0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1);
20005190:	f04f 000a 	mov.w	r0, #10
20005194:	f04f 019f 	mov.w	r1, #159	; 0x9f
20005198:	f7ff fada 	bl	20004750 <NVIC_SetPriority>


		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
2000519c:	f24e 20d0 	movw	r0, #58064	; 0xe2d0
200051a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200051a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
200051a8:	f04f 0203 	mov.w	r2, #3
200051ac:	f000 f9a8 	bl	20005500 <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_FIFO_EIGHT_BYTES);
200051b0:	f24e 20d0 	movw	r0, #58064	; 0xe2d0
200051b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200051b8:	f644 71f1 	movw	r1, #20465	; 0x4ff1
200051bc:	f2c2 0100 	movt	r1, #8192	; 0x2000
200051c0:	f04f 0280 	mov.w	r2, #128	; 0x80
200051c4:	f000 fabe 	bl	20005744 <MSS_UART_set_rx_handler>
//		init_demo(imu);
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;


	 xMutex = xSemaphoreCreateMutex();
200051c8:	f04f 0001 	mov.w	r0, #1
200051cc:	f7fc fa4e 	bl	2000166c <xQueueCreateMutex>
200051d0:	4602      	mov	r2, r0
200051d2:	f24e 236c 	movw	r3, #57964	; 0xe26c
200051d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051da:	601a      	str	r2, [r3, #0]
//	 xTaskCreate(get_imu_data, "IMU", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(get_vc_data, "VC", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(pktmngr, "Packet", configMINIMAL_STACK_SIZE, (void*) data, 1, NULL);


		feed_get_hk_data = xTaskCreate(get_hk_data, "HK", configMINIMAL_STACK_SIZE, (void*)data , 2, &get_hk_pkt_handle);
200051dc:	f04f 0302 	mov.w	r3, #2
200051e0:	9300      	str	r3, [sp, #0]
200051e2:	f24e 2378 	movw	r3, #57976	; 0xe278
200051e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051ea:	9301      	str	r3, [sp, #4]
200051ec:	f244 70ad 	movw	r0, #18349	; 0x47ad
200051f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200051f4:	f247 7118 	movw	r1, #30488	; 0x7718
200051f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
200051fc:	f04f 0250 	mov.w	r2, #80	; 0x50
20005200:	f64d 33d4 	movw	r3, #56276	; 0xdbd4
20005204:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005208:	f7fc fea0 	bl	20001f4c <xTaskCreate>
2000520c:	4602      	mov	r2, r0
2000520e:	f24e 2370 	movw	r3, #57968	; 0xe270
20005212:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005216:	601a      	str	r2, [r3, #0]

		feed_get_payload_data = xTaskCreate(get_pld_data, "Payload", configMINIMAL_STACK_SIZE, (void* )data, 1, &get_pld_pkt_handle);
20005218:	f04f 0301 	mov.w	r3, #1
2000521c:	9300      	str	r3, [sp, #0]
2000521e:	f24e 2354 	movw	r3, #57940	; 0xe254
20005222:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005226:	9301      	str	r3, [sp, #4]
20005228:	f644 30b5 	movw	r0, #19381	; 0x4bb5
2000522c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005230:	f247 711c 	movw	r1, #30492	; 0x771c
20005234:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005238:	f04f 0250 	mov.w	r2, #80	; 0x50
2000523c:	f64d 33d4 	movw	r3, #56276	; 0xdbd4
20005240:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005244:	f7fc fe82 	bl	20001f4c <xTaskCreate>
20005248:	4602      	mov	r2, r0
2000524a:	f24e 237c 	movw	r3, #57980	; 0xe27c
2000524e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005252:	601a      	str	r2, [r3, #0]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);
20005254:	f04f 0303 	mov.w	r3, #3
20005258:	9300      	str	r3, [sp, #0]
2000525a:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
2000525e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005262:	9301      	str	r3, [sp, #4]
20005264:	f644 7075 	movw	r0, #20341	; 0x4f75
20005268:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000526c:	f247 7124 	movw	r1, #30500	; 0x7724
20005270:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005274:	f04f 0250 	mov.w	r2, #80	; 0x50
20005278:	f64d 3394 	movw	r3, #56212	; 0xdb94
2000527c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005280:	f7fc fe64 	bl	20001f4c <xTaskCreate>

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
20005284:	f04f 0300 	mov.w	r3, #0
20005288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
2000528c:	e057      	b.n	2000533e <demo_tasks+0x2e6>

			pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )0, vtlm_task);
2000528e:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
20005292:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
20005296:	f64d 72d8 	movw	r2, #57304	; 0xdfd8
2000529a:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000529e:	460b      	mov	r3, r1
200052a0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200052a4:	ebc1 0303 	rsb	r3, r1, r3
200052a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
200052ac:	4413      	add	r3, r2
200052ae:	f103 0308 	add.w	r3, r3, #8
200052b2:	889b      	ldrh	r3, [r3, #4]
200052b4:	4618      	mov	r0, r3
200052b6:	f7fb fe97 	bl	20000fe8 <xMsToTicks>
200052ba:	4602      	mov	r2, r0
200052bc:	f644 530d 	movw	r3, #19725	; 0x4d0d
200052c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052c4:	9300      	str	r3, [sp, #0]
200052c6:	f247 7030 	movw	r0, #30512	; 0x7730
200052ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
200052ce:	4611      	mov	r1, r2
200052d0:	f04f 0201 	mov.w	r2, #1
200052d4:	f04f 0300 	mov.w	r3, #0
200052d8:	f7fe fa00 	bl	200036dc <xTimerCreate>
200052dc:	4602      	mov	r2, r0
200052de:	f64d 73f4 	movw	r3, #57332	; 0xdff4
200052e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052e6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			vTimerSetTimerID(pkt_timer[i], (void* )i);
200052ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
200052ee:	f64d 73f4 	movw	r3, #57332	; 0xdff4
200052f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
200052fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200052fe:	4610      	mov	r0, r2
20005300:	4619      	mov	r1, r3
20005302:	f7fe fd85 	bl	20003e10 <vTimerSetTimerID>
			xTimerStart(pkt_timer[i], 0);
20005306:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
2000530a:	f64d 73f4 	movw	r3, #57332	; 0xdff4
2000530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005312:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
20005316:	f7fd f9cf 	bl	200026b8 <xTaskGetTickCount>
2000531a:	4603      	mov	r3, r0
2000531c:	f04f 0200 	mov.w	r2, #0
20005320:	9200      	str	r2, [sp, #0]
20005322:	4620      	mov	r0, r4
20005324:	f04f 0101 	mov.w	r1, #1
20005328:	461a      	mov	r2, r3
2000532a:	f04f 0300 	mov.w	r3, #0
2000532e:	f7fe fa27 	bl	20003780 <xTimerGenericCommand>

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
20005332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005336:	f103 0301 	add.w	r3, r3, #1
2000533a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
2000533e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005342:	2b01      	cmp	r3, #1
20005344:	d9a3      	bls.n	2000528e <demo_tasks+0x236>
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
20005346:	f7fd f87b 	bl	20002440 <vTaskStartScheduler>

}
2000534a:	f107 072c 	add.w	r7, r7, #44	; 0x2c
2000534e:	46bd      	mov	sp, r7
20005350:	bd90      	pop	{r4, r7, pc}
20005352:	bf00      	nop

20005354 <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
20005354:	b580      	push	{r7, lr}
20005356:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
20005358:	f24e 0008 	movw	r0, #57352	; 0xe008
2000535c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005360:	f001 f838 	bl	200063d4 <I2C_isr>
}
20005364:	bd80      	pop	{r7, pc}
20005366:	bf00      	nop

20005368 <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
20005368:	b580      	push	{r7, lr}
2000536a:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
2000536c:	f24e 0074 	movw	r0, #57460	; 0xe074
20005370:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005374:	f001 f82e 	bl	200063d4 <I2C_isr>
}
20005378:	bd80      	pop	{r7, pc}
2000537a:	bf00      	nop

2000537c <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
2000537c:	b580      	push	{r7, lr}
2000537e:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
20005380:	f64d 3028 	movw	r0, #56104	; 0xdb28
20005384:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005388:	f001 f824 	bl	200063d4 <I2C_isr>
}
2000538c:	bd80      	pop	{r7, pc}
2000538e:	bf00      	nop

20005390 <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
20005390:	b580      	push	{r7, lr}
20005392:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
20005394:	f24e 104c 	movw	r0, #57676	; 0xe14c
20005398:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000539c:	f001 f81a 	bl	200063d4 <I2C_isr>
}
200053a0:	bd80      	pop	{r7, pc}
200053a2:	bf00      	nop

200053a4 <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
200053a4:	b580      	push	{r7, lr}
200053a6:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
200053a8:	f24e 10c0 	movw	r0, #57792	; 0xe1c0
200053ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
200053b0:	f001 f810 	bl	200063d4 <I2C_isr>
}
200053b4:	bd80      	pop	{r7, pc}
200053b6:	bf00      	nop

200053b8 <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
200053b8:	b580      	push	{r7, lr}
200053ba:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
200053bc:	f24e 00e0 	movw	r0, #57568	; 0xe0e0
200053c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200053c4:	f001 f806 	bl	200063d4 <I2C_isr>
}
200053c8:	bd80      	pop	{r7, pc}
200053ca:	bf00      	nop

200053cc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200053cc:	b480      	push	{r7}
200053ce:	b083      	sub	sp, #12
200053d0:	af00      	add	r7, sp, #0
200053d2:	4603      	mov	r3, r0
200053d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200053d6:	f24e 1300 	movw	r3, #57600	; 0xe100
200053da:	f2ce 0300 	movt	r3, #57344	; 0xe000
200053de:	f997 2007 	ldrsb.w	r2, [r7, #7]
200053e2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200053e6:	79f9      	ldrb	r1, [r7, #7]
200053e8:	f001 011f 	and.w	r1, r1, #31
200053ec:	f04f 0001 	mov.w	r0, #1
200053f0:	fa00 f101 	lsl.w	r1, r0, r1
200053f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200053f8:	f107 070c 	add.w	r7, r7, #12
200053fc:	46bd      	mov	sp, r7
200053fe:	bc80      	pop	{r7}
20005400:	4770      	bx	lr
20005402:	bf00      	nop

20005404 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20005404:	b480      	push	{r7}
20005406:	b083      	sub	sp, #12
20005408:	af00      	add	r7, sp, #0
2000540a:	4603      	mov	r3, r0
2000540c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000540e:	f24e 1300 	movw	r3, #57600	; 0xe100
20005412:	f2ce 0300 	movt	r3, #57344	; 0xe000
20005416:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000541a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000541e:	79f9      	ldrb	r1, [r7, #7]
20005420:	f001 011f 	and.w	r1, r1, #31
20005424:	f04f 0001 	mov.w	r0, #1
20005428:	fa00 f101 	lsl.w	r1, r0, r1
2000542c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20005430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20005434:	f107 070c 	add.w	r7, r7, #12
20005438:	46bd      	mov	sp, r7
2000543a:	bc80      	pop	{r7}
2000543c:	4770      	bx	lr
2000543e:	bf00      	nop

20005440 <set_bit_reg8>:
static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005440:	b480      	push	{r7}
20005442:	b083      	sub	sp, #12
20005444:	af00      	add	r7, sp, #0
20005446:	6078      	str	r0, [r7, #4]
20005448:	460b      	mov	r3, r1
2000544a:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x1;
2000544c:	687b      	ldr	r3, [r7, #4]
2000544e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005452:	687b      	ldr	r3, [r7, #4]
20005454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005458:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000545c:	ea4f 1343 	mov.w	r3, r3, lsl #5
20005460:	441a      	add	r2, r3
20005462:	78fb      	ldrb	r3, [r7, #3]
20005464:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005468:	4413      	add	r3, r2
2000546a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000546e:	f04f 0201 	mov.w	r2, #1
20005472:	601a      	str	r2, [r3, #0]
}
20005474:	f107 070c 	add.w	r7, r7, #12
20005478:	46bd      	mov	sp, r7
2000547a:	bc80      	pop	{r7}
2000547c:	4770      	bx	lr
2000547e:	bf00      	nop

20005480 <clear_bit_reg8>:
static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005480:	b480      	push	{r7}
20005482:	b083      	sub	sp, #12
20005484:	af00      	add	r7, sp, #0
20005486:	6078      	str	r0, [r7, #4]
20005488:	460b      	mov	r3, r1
2000548a:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x0;
2000548c:	687b      	ldr	r3, [r7, #4]
2000548e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005492:	687b      	ldr	r3, [r7, #4]
20005494:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005498:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000549c:	ea4f 1343 	mov.w	r3, r3, lsl #5
200054a0:	441a      	add	r2, r3
200054a2:	78fb      	ldrb	r3, [r7, #3]
200054a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200054a8:	4413      	add	r3, r2
200054aa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200054ae:	f04f 0200 	mov.w	r2, #0
200054b2:	601a      	str	r2, [r3, #0]
}
200054b4:	f107 070c 	add.w	r7, r7, #12
200054b8:	46bd      	mov	sp, r7
200054ba:	bc80      	pop	{r7}
200054bc:	4770      	bx	lr
200054be:	bf00      	nop

200054c0 <read_bit_reg8>:
static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
200054c0:	b480      	push	{r7}
200054c2:	b083      	sub	sp, #12
200054c4:	af00      	add	r7, sp, #0
200054c6:	6078      	str	r0, [r7, #4]
200054c8:	460b      	mov	r3, r1
200054ca:	70fb      	strb	r3, [r7, #3]
    return (HW_REG_BIT(reg,bit));
200054cc:	687b      	ldr	r3, [r7, #4]
200054ce:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200054d2:	687b      	ldr	r3, [r7, #4]
200054d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200054d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200054dc:	ea4f 1343 	mov.w	r3, r3, lsl #5
200054e0:	441a      	add	r2, r3
200054e2:	78fb      	ldrb	r3, [r7, #3]
200054e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200054e8:	4413      	add	r3, r2
200054ea:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200054ee:	681b      	ldr	r3, [r3, #0]
200054f0:	b2db      	uxtb	r3, r3
}
200054f2:	4618      	mov	r0, r3
200054f4:	f107 070c 	add.w	r7, r7, #12
200054f8:	46bd      	mov	sp, r7
200054fa:	bc80      	pop	{r7}
200054fc:	4770      	bx	lr
200054fe:	bf00      	nop

20005500 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20005500:	b580      	push	{r7, lr}
20005502:	b084      	sub	sp, #16
20005504:	af00      	add	r7, sp, #0
20005506:	60f8      	str	r0, [r7, #12]
20005508:	60b9      	str	r1, [r7, #8]
2000550a:	4613      	mov	r3, r2
2000550c:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
2000550e:	68fa      	ldr	r2, [r7, #12]
20005510:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005514:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005518:	429a      	cmp	r2, r3
2000551a:	d007      	beq.n	2000552c <MSS_UART_init+0x2c>
2000551c:	68fa      	ldr	r2, [r7, #12]
2000551e:	f24e 2390 	movw	r3, #58000	; 0xe290
20005522:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005526:	429a      	cmp	r2, r3
20005528:	d000      	beq.n	2000552c <MSS_UART_init+0x2c>
2000552a:	be00      	bkpt	0x0000

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
2000552c:	79fb      	ldrb	r3, [r7, #7]
2000552e:	68f8      	ldr	r0, [r7, #12]
20005530:	68b9      	ldr	r1, [r7, #8]
20005532:	461a      	mov	r2, r3
20005534:	f000 fa56 	bl	200059e4 <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
20005538:	68fb      	ldr	r3, [r7, #12]
2000553a:	681b      	ldr	r3, [r3, #0]
2000553c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005540:	4618      	mov	r0, r3
20005542:	f04f 0103 	mov.w	r1, #3
20005546:	f7ff ff9b 	bl	20005480 <clear_bit_reg8>

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
2000554a:	68fb      	ldr	r3, [r7, #12]
2000554c:	681b      	ldr	r3, [r3, #0]
2000554e:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005552:	4618      	mov	r0, r3
20005554:	f04f 0102 	mov.w	r1, #2
20005558:	f7ff ff92 	bl	20005480 <clear_bit_reg8>

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
2000555c:	68fb      	ldr	r3, [r7, #12]
2000555e:	681b      	ldr	r3, [r3, #0]
20005560:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005564:	4618      	mov	r0, r3
20005566:	f04f 0100 	mov.w	r1, #0
2000556a:	f7ff ff89 	bl	20005480 <clear_bit_reg8>

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
2000556e:	68fa      	ldr	r2, [r7, #12]
20005570:	f645 637d 	movw	r3, #24189	; 0x5e7d
20005574:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005578:	6253      	str	r3, [r2, #36]	; 0x24
}
2000557a:	f107 0710 	add.w	r7, r7, #16
2000557e:	46bd      	mov	sp, r7
20005580:	bd80      	pop	{r7, pc}
20005582:	bf00      	nop

20005584 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20005584:	b480      	push	{r7}
20005586:	b089      	sub	sp, #36	; 0x24
20005588:	af00      	add	r7, sp, #0
2000558a:	60f8      	str	r0, [r7, #12]
2000558c:	60b9      	str	r1, [r7, #8]
2000558e:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0u;
20005590:	f04f 0300 	mov.w	r3, #0
20005594:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005596:	68fa      	ldr	r2, [r7, #12]
20005598:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
2000559c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055a0:	429a      	cmp	r2, r3
200055a2:	d007      	beq.n	200055b4 <MSS_UART_polled_tx+0x30>
200055a4:	68fa      	ldr	r2, [r7, #12]
200055a6:	f24e 2390 	movw	r3, #58000	; 0xe290
200055aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055ae:	429a      	cmp	r2, r3
200055b0:	d000      	beq.n	200055b4 <MSS_UART_polled_tx+0x30>
200055b2:	be00      	bkpt	0x0000
    ASSERT(pbuff != ( (uint8_t *)0));
200055b4:	68bb      	ldr	r3, [r7, #8]
200055b6:	2b00      	cmp	r3, #0
200055b8:	d100      	bne.n	200055bc <MSS_UART_polled_tx+0x38>
200055ba:	be00      	bkpt	0x0000
    ASSERT(tx_size > 0u);
200055bc:	687b      	ldr	r3, [r7, #4]
200055be:	2b00      	cmp	r3, #0
200055c0:	d100      	bne.n	200055c4 <MSS_UART_polled_tx+0x40>
200055c2:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
200055c4:	68fa      	ldr	r2, [r7, #12]
200055c6:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
200055ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055ce:	429a      	cmp	r2, r3
200055d0:	d006      	beq.n	200055e0 <MSS_UART_polled_tx+0x5c>
200055d2:	68fa      	ldr	r2, [r7, #12]
200055d4:	f24e 2390 	movw	r3, #58000	; 0xe290
200055d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055dc:	429a      	cmp	r2, r3
200055de:	d13d      	bne.n	2000565c <MSS_UART_polled_tx+0xd8>
200055e0:	68bb      	ldr	r3, [r7, #8]
200055e2:	2b00      	cmp	r3, #0
200055e4:	d03a      	beq.n	2000565c <MSS_UART_polled_tx+0xd8>
200055e6:	687b      	ldr	r3, [r7, #4]
200055e8:	2b00      	cmp	r3, #0
200055ea:	d037      	beq.n	2000565c <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
200055ec:	68fb      	ldr	r3, [r7, #12]
200055ee:	681b      	ldr	r3, [r3, #0]
200055f0:	7d1b      	ldrb	r3, [r3, #20]
200055f2:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
200055f4:	68fb      	ldr	r3, [r7, #12]
200055f6:	7b5a      	ldrb	r2, [r3, #13]
200055f8:	7efb      	ldrb	r3, [r7, #27]
200055fa:	ea42 0303 	orr.w	r3, r2, r3
200055fe:	b2da      	uxtb	r2, r3
20005600:	68fb      	ldr	r3, [r7, #12]
20005602:	735a      	strb	r2, [r3, #13]

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
20005604:	7efb      	ldrb	r3, [r7, #27]
20005606:	f003 0320 	and.w	r3, r3, #32
2000560a:	2b00      	cmp	r3, #0
2000560c:	d023      	beq.n	20005656 <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
2000560e:	f04f 0310 	mov.w	r3, #16
20005612:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
20005614:	687b      	ldr	r3, [r7, #4]
20005616:	2b0f      	cmp	r3, #15
20005618:	d801      	bhi.n	2000561e <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
2000561a:	687b      	ldr	r3, [r7, #4]
2000561c:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
2000561e:	f04f 0300 	mov.w	r3, #0
20005622:	617b      	str	r3, [r7, #20]
20005624:	e00e      	b.n	20005644 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
20005626:	68fb      	ldr	r3, [r7, #12]
20005628:	681b      	ldr	r3, [r3, #0]
2000562a:	68b9      	ldr	r1, [r7, #8]
2000562c:	693a      	ldr	r2, [r7, #16]
2000562e:	440a      	add	r2, r1
20005630:	7812      	ldrb	r2, [r2, #0]
20005632:	701a      	strb	r2, [r3, #0]
                    char_idx++;
20005634:	693b      	ldr	r3, [r7, #16]
20005636:	f103 0301 	add.w	r3, r3, #1
2000563a:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
2000563c:	697b      	ldr	r3, [r7, #20]
2000563e:	f103 0301 	add.w	r3, r3, #1
20005642:	617b      	str	r3, [r7, #20]
20005644:	697a      	ldr	r2, [r7, #20]
20005646:	69fb      	ldr	r3, [r7, #28]
20005648:	429a      	cmp	r2, r3
2000564a:	d3ec      	bcc.n	20005626 <MSS_UART_polled_tx+0xa2>
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
2000564c:	687a      	ldr	r2, [r7, #4]
2000564e:	697b      	ldr	r3, [r7, #20]
20005650:	ebc3 0302 	rsb	r3, r3, r2
20005654:	607b      	str	r3, [r7, #4]
            }
        } while(tx_size);
20005656:	687b      	ldr	r3, [r7, #4]
20005658:	2b00      	cmp	r3, #0
2000565a:	d1c7      	bne.n	200055ec <MSS_UART_polled_tx+0x68>
    }
}
2000565c:	f107 0724 	add.w	r7, r7, #36	; 0x24
20005660:	46bd      	mov	sp, r7
20005662:	bc80      	pop	{r7}
20005664:	4770      	bx	lr
20005666:	bf00      	nop

20005668 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20005668:	b480      	push	{r7}
2000566a:	b087      	sub	sp, #28
2000566c:	af00      	add	r7, sp, #0
2000566e:	60f8      	str	r0, [r7, #12]
20005670:	60b9      	str	r1, [r7, #8]
20005672:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0u;
20005674:	f04f 0300 	mov.w	r3, #0
20005678:	613b      	str	r3, [r7, #16]
    uint8_t status = 0u;
2000567a:	f04f 0300 	mov.w	r3, #0
2000567e:	75fb      	strb	r3, [r7, #23]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005680:	68fa      	ldr	r2, [r7, #12]
20005682:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005686:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000568a:	429a      	cmp	r2, r3
2000568c:	d007      	beq.n	2000569e <MSS_UART_get_rx+0x36>
2000568e:	68fa      	ldr	r2, [r7, #12]
20005690:	f24e 2390 	movw	r3, #58000	; 0xe290
20005694:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005698:	429a      	cmp	r2, r3
2000569a:	d000      	beq.n	2000569e <MSS_UART_get_rx+0x36>
2000569c:	be00      	bkpt	0x0000
    ASSERT(rx_buff != ((uint8_t *)0));
2000569e:	68bb      	ldr	r3, [r7, #8]
200056a0:	2b00      	cmp	r3, #0
200056a2:	d100      	bne.n	200056a6 <MSS_UART_get_rx+0x3e>
200056a4:	be00      	bkpt	0x0000
    ASSERT(buff_size > 0u);
200056a6:	687b      	ldr	r3, [r7, #4]
200056a8:	2b00      	cmp	r3, #0
200056aa:	d100      	bne.n	200056ae <MSS_UART_get_rx+0x46>
200056ac:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
200056ae:	68fa      	ldr	r2, [r7, #12]
200056b0:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
200056b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056b8:	429a      	cmp	r2, r3
200056ba:	d006      	beq.n	200056ca <MSS_UART_get_rx+0x62>
200056bc:	68fa      	ldr	r2, [r7, #12]
200056be:	f24e 2390 	movw	r3, #58000	; 0xe290
200056c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056c6:	429a      	cmp	r2, r3
200056c8:	d134      	bne.n	20005734 <MSS_UART_get_rx+0xcc>
200056ca:	68bb      	ldr	r3, [r7, #8]
200056cc:	2b00      	cmp	r3, #0
200056ce:	d031      	beq.n	20005734 <MSS_UART_get_rx+0xcc>
200056d0:	687b      	ldr	r3, [r7, #4]
200056d2:	2b00      	cmp	r3, #0
200056d4:	d02e      	beq.n	20005734 <MSS_UART_get_rx+0xcc>
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
200056d6:	68fb      	ldr	r3, [r7, #12]
200056d8:	681b      	ldr	r3, [r3, #0]
200056da:	7d1b      	ldrb	r3, [r3, #20]
200056dc:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
200056de:	68fb      	ldr	r3, [r7, #12]
200056e0:	7b5a      	ldrb	r2, [r3, #13]
200056e2:	7dfb      	ldrb	r3, [r7, #23]
200056e4:	ea42 0303 	orr.w	r3, r2, r3
200056e8:	b2da      	uxtb	r2, r3
200056ea:	68fb      	ldr	r3, [r7, #12]
200056ec:	735a      	strb	r2, [r3, #13]

        while(((status & MSS_UART_DATA_READY) != 0u) &&
200056ee:	e017      	b.n	20005720 <MSS_UART_get_rx+0xb8>
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
200056f0:	68ba      	ldr	r2, [r7, #8]
200056f2:	693b      	ldr	r3, [r7, #16]
200056f4:	4413      	add	r3, r2
200056f6:	68fa      	ldr	r2, [r7, #12]
200056f8:	6812      	ldr	r2, [r2, #0]
200056fa:	7812      	ldrb	r2, [r2, #0]
200056fc:	b2d2      	uxtb	r2, r2
200056fe:	701a      	strb	r2, [r3, #0]
            ++rx_size;
20005700:	693b      	ldr	r3, [r7, #16]
20005702:	f103 0301 	add.w	r3, r3, #1
20005706:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
20005708:	68fb      	ldr	r3, [r7, #12]
2000570a:	681b      	ldr	r3, [r3, #0]
2000570c:	7d1b      	ldrb	r3, [r3, #20]
2000570e:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
20005710:	68fb      	ldr	r3, [r7, #12]
20005712:	7b5a      	ldrb	r2, [r3, #13]
20005714:	7dfb      	ldrb	r3, [r7, #23]
20005716:	ea42 0303 	orr.w	r3, r2, r3
2000571a:	b2da      	uxtb	r2, r3
2000571c:	68fb      	ldr	r3, [r7, #12]
2000571e:	735a      	strb	r2, [r3, #13]
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
20005720:	7dfb      	ldrb	r3, [r7, #23]
20005722:	f003 0301 	and.w	r3, r3, #1
20005726:	b2db      	uxtb	r3, r3
20005728:	2b00      	cmp	r3, #0
2000572a:	d003      	beq.n	20005734 <MSS_UART_get_rx+0xcc>
2000572c:	693a      	ldr	r2, [r7, #16]
2000572e:	687b      	ldr	r3, [r7, #4]
20005730:	429a      	cmp	r2, r3
20005732:	d3dd      	bcc.n	200056f0 <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
20005734:	693b      	ldr	r3, [r7, #16]
}
20005736:	4618      	mov	r0, r3
20005738:	f107 071c 	add.w	r7, r7, #28
2000573c:	46bd      	mov	sp, r7
2000573e:	bc80      	pop	{r7}
20005740:	4770      	bx	lr
20005742:	bf00      	nop

20005744 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20005744:	b580      	push	{r7, lr}
20005746:	b084      	sub	sp, #16
20005748:	af00      	add	r7, sp, #0
2000574a:	60f8      	str	r0, [r7, #12]
2000574c:	60b9      	str	r1, [r7, #8]
2000574e:	4613      	mov	r3, r2
20005750:	71fb      	strb	r3, [r7, #7]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005752:	68fa      	ldr	r2, [r7, #12]
20005754:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005758:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000575c:	429a      	cmp	r2, r3
2000575e:	d007      	beq.n	20005770 <MSS_UART_set_rx_handler+0x2c>
20005760:	68fa      	ldr	r2, [r7, #12]
20005762:	f24e 2390 	movw	r3, #58000	; 0xe290
20005766:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000576a:	429a      	cmp	r2, r3
2000576c:	d000      	beq.n	20005770 <MSS_UART_set_rx_handler+0x2c>
2000576e:	be00      	bkpt	0x0000
    ASSERT(handler != INVALID_IRQ_HANDLER );
20005770:	68bb      	ldr	r3, [r7, #8]
20005772:	2b00      	cmp	r3, #0
20005774:	d100      	bne.n	20005778 <MSS_UART_set_rx_handler+0x34>
20005776:	be00      	bkpt	0x0000
    ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
20005778:	79fb      	ldrb	r3, [r7, #7]
2000577a:	2bc0      	cmp	r3, #192	; 0xc0
2000577c:	d900      	bls.n	20005780 <MSS_UART_set_rx_handler+0x3c>
2000577e:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005780:	68fa      	ldr	r2, [r7, #12]
20005782:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005786:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000578a:	429a      	cmp	r2, r3
2000578c:	d006      	beq.n	2000579c <MSS_UART_set_rx_handler+0x58>
2000578e:	68fa      	ldr	r2, [r7, #12]
20005790:	f24e 2390 	movw	r3, #58000	; 0xe290
20005794:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005798:	429a      	cmp	r2, r3
2000579a:	d12e      	bne.n	200057fa <MSS_UART_set_rx_handler+0xb6>
2000579c:	68bb      	ldr	r3, [r7, #8]
2000579e:	2b00      	cmp	r3, #0
200057a0:	d02b      	beq.n	200057fa <MSS_UART_set_rx_handler+0xb6>
200057a2:	79fb      	ldrb	r3, [r7, #7]
200057a4:	2bc0      	cmp	r3, #192	; 0xc0
200057a6:	d828      	bhi.n	200057fa <MSS_UART_set_rx_handler+0xb6>
       (handler != INVALID_IRQ_HANDLER) &&
       (trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL))
    {
        this_uart->rx_handler = handler;
200057a8:	68fb      	ldr	r3, [r7, #12]
200057aa:	68ba      	ldr	r2, [r7, #8]
200057ac:	621a      	str	r2, [r3, #32]

        /* Set the receive interrupt trigger level. */
        this_uart->hw_reg->FCR = (this_uart->hw_reg->FCR &
200057ae:	68fb      	ldr	r3, [r7, #12]
200057b0:	681a      	ldr	r2, [r3, #0]
200057b2:	68fb      	ldr	r3, [r7, #12]
200057b4:	681b      	ldr	r3, [r3, #0]
200057b6:	7a1b      	ldrb	r3, [r3, #8]
200057b8:	b2db      	uxtb	r3, r3
200057ba:	b2db      	uxtb	r3, r3
200057bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200057c0:	79f8      	ldrb	r0, [r7, #7]
200057c2:	4619      	mov	r1, r3
200057c4:	4603      	mov	r3, r0
200057c6:	ea41 0303 	orr.w	r3, r1, r3
200057ca:	b2db      	uxtb	r3, r3
200057cc:	b2db      	uxtb	r3, r3
200057ce:	7213      	strb	r3, [r2, #8]
                                 (uint8_t)(~((uint8_t)FCR_TRIG_LEVEL_MASK))) |
                                 (uint8_t)trigger_level;
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
200057d0:	68fb      	ldr	r3, [r7, #12]
200057d2:	791b      	ldrb	r3, [r3, #4]
200057d4:	b25b      	sxtb	r3, r3
200057d6:	4618      	mov	r0, r3
200057d8:	f7ff fe14 	bl	20005404 <NVIC_ClearPendingIRQ>

        /* Enable receive interrupt. */
        set_bit_reg8(&this_uart->hw_reg->IER,ERBFI);
200057dc:	68fb      	ldr	r3, [r7, #12]
200057de:	681b      	ldr	r3, [r3, #0]
200057e0:	f103 0304 	add.w	r3, r3, #4
200057e4:	4618      	mov	r0, r3
200057e6:	f04f 0100 	mov.w	r1, #0
200057ea:	f7ff fe29 	bl	20005440 <set_bit_reg8>

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ(this_uart->irqn);
200057ee:	68fb      	ldr	r3, [r7, #12]
200057f0:	791b      	ldrb	r3, [r3, #4]
200057f2:	b25b      	sxtb	r3, r3
200057f4:	4618      	mov	r0, r3
200057f6:	f7ff fde9 	bl	200053cc <NVIC_EnableIRQ>
    }
}
200057fa:	f107 0710 	add.w	r7, r7, #16
200057fe:	46bd      	mov	sp, r7
20005800:	bd80      	pop	{r7, pc}
20005802:	bf00      	nop

20005804 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
20005804:	4668      	mov	r0, sp
20005806:	f020 0107 	bic.w	r1, r0, #7
2000580a:	468d      	mov	sp, r1
2000580c:	b589      	push	{r0, r3, r7, lr}
2000580e:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart0);
20005810:	f24e 20d0 	movw	r0, #58064	; 0xe2d0
20005814:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005818:	f000 fa1a 	bl	20005c50 <MSS_UART_isr>
}
2000581c:	46bd      	mov	sp, r7
2000581e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20005822:	4685      	mov	sp, r0
20005824:	4770      	bx	lr
20005826:	bf00      	nop

20005828 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
20005828:	4668      	mov	r0, sp
2000582a:	f020 0107 	bic.w	r1, r0, #7
2000582e:	468d      	mov	sp, r1
20005830:	b589      	push	{r0, r3, r7, lr}
20005832:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart1);
20005834:	f24e 2090 	movw	r0, #58000	; 0xe290
20005838:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000583c:	f000 fa08 	bl	20005c50 <MSS_UART_isr>
}
20005840:	46bd      	mov	sp, r7
20005842:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20005846:	4685      	mov	sp, r0
20005848:	4770      	bx	lr
2000584a:	bf00      	nop

2000584c <config_baud_divisors>:
config_baud_divisors
(
    mss_uart_instance_t * this_uart,
    uint32_t baudrate
)
{
2000584c:	b580      	push	{r7, lr}
2000584e:	b088      	sub	sp, #32
20005850:	af00      	add	r7, sp, #0
20005852:	6078      	str	r0, [r7, #4]
20005854:	6039      	str	r1, [r7, #0]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005856:	687a      	ldr	r2, [r7, #4]
20005858:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
2000585c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005860:	429a      	cmp	r2, r3
20005862:	d007      	beq.n	20005874 <config_baud_divisors+0x28>
20005864:	687a      	ldr	r2, [r7, #4]
20005866:	f24e 2390 	movw	r3, #58000	; 0xe290
2000586a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000586e:	429a      	cmp	r2, r3
20005870:	d000      	beq.n	20005874 <config_baud_divisors+0x28>
20005872:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20005874:	687a      	ldr	r2, [r7, #4]
20005876:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
2000587a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000587e:	429a      	cmp	r2, r3
20005880:	d007      	beq.n	20005892 <config_baud_divisors+0x46>
20005882:	687a      	ldr	r2, [r7, #4]
20005884:	f24e 2390 	movw	r3, #58000	; 0xe290
20005888:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000588c:	429a      	cmp	r2, r3
2000588e:	f040 80a4 	bne.w	200059da <config_baud_divisors+0x18e>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
20005892:	687b      	ldr	r3, [r7, #4]
20005894:	683a      	ldr	r2, [r7, #0]
20005896:	609a      	str	r2, [r3, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
20005898:	f001 fbca 	bl	20007030 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
2000589c:	687a      	ldr	r2, [r7, #4]
2000589e:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
200058a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200058a6:	429a      	cmp	r2, r3
200058a8:	d106      	bne.n	200058b8 <config_baud_divisors+0x6c>
        {
            pclk_freq = g_FrequencyPCLK0;
200058aa:	f247 73b8 	movw	r3, #30648	; 0x77b8
200058ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200058b2:	681b      	ldr	r3, [r3, #0]
200058b4:	61fb      	str	r3, [r7, #28]
200058b6:	e005      	b.n	200058c4 <config_baud_divisors+0x78>
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
200058b8:	f247 73bc 	movw	r3, #30652	; 0x77bc
200058bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200058c0:	681b      	ldr	r3, [r3, #0]
200058c2:	61fb      	str	r3, [r7, #28]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
200058c4:	69fb      	ldr	r3, [r7, #28]
200058c6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
200058ca:	683b      	ldr	r3, [r7, #0]
200058cc:	fbb2 f3f3 	udiv	r3, r2, r3
200058d0:	617b      	str	r3, [r7, #20]
        baud_value_by_64 = baud_value_by_128 / 2u;
200058d2:	697b      	ldr	r3, [r7, #20]
200058d4:	ea4f 0353 	mov.w	r3, r3, lsr #1
200058d8:	613b      	str	r3, [r7, #16]
        baud_value = baud_value_by_64 / 64u;
200058da:	693b      	ldr	r3, [r7, #16]
200058dc:	ea4f 1393 	mov.w	r3, r3, lsr #6
200058e0:	60fb      	str	r3, [r7, #12]
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
200058e2:	68fb      	ldr	r3, [r7, #12]
200058e4:	ea4f 1383 	mov.w	r3, r3, lsl #6
200058e8:	693a      	ldr	r2, [r7, #16]
200058ea:	ebc3 0302 	rsb	r3, r3, r2
200058ee:	61bb      	str	r3, [r7, #24]
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
200058f0:	68fb      	ldr	r3, [r7, #12]
200058f2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
200058f6:	697a      	ldr	r2, [r7, #20]
200058f8:	ebc3 0202 	rsb	r2, r3, r2
200058fc:	69bb      	ldr	r3, [r7, #24]
200058fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005902:	ebc3 0302 	rsb	r3, r3, r2
20005906:	69ba      	ldr	r2, [r7, #24]
20005908:	4413      	add	r3, r2
2000590a:	61bb      	str	r3, [r7, #24]

        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
2000590c:	68fa      	ldr	r2, [r7, #12]
2000590e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005912:	429a      	cmp	r2, r3
20005914:	d900      	bls.n	20005918 <config_baud_divisors+0xcc>
20005916:	be00      	bkpt	0x0000

        if(baud_value <= (uint32_t)UINT16_MAX)
20005918:	68fa      	ldr	r2, [r7, #12]
2000591a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000591e:	429a      	cmp	r2, r3
20005920:	d85b      	bhi.n	200059da <config_baud_divisors+0x18e>
        {
            if(baud_value > 1u)
20005922:	68fb      	ldr	r3, [r7, #12]
20005924:	2b01      	cmp	r3, #1
20005926:	d931      	bls.n	2000598c <config_baud_divisors+0x140>
            {
                /*
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005928:	687b      	ldr	r3, [r7, #4]
2000592a:	681b      	ldr	r3, [r3, #0]
2000592c:	f103 030c 	add.w	r3, r3, #12
20005930:	4618      	mov	r0, r3
20005932:	f04f 0107 	mov.w	r1, #7
20005936:	f7ff fd83 	bl	20005440 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
2000593a:	687b      	ldr	r3, [r7, #4]
2000593c:	681b      	ldr	r3, [r3, #0]
2000593e:	68fa      	ldr	r2, [r7, #12]
20005940:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005944:	b2d2      	uxtb	r2, r2
20005946:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20005948:	687b      	ldr	r3, [r7, #4]
2000594a:	681b      	ldr	r3, [r3, #0]
2000594c:	68fa      	ldr	r2, [r7, #12]
2000594e:	b2d2      	uxtb	r2, r2
20005950:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005952:	687b      	ldr	r3, [r7, #4]
20005954:	681b      	ldr	r3, [r3, #0]
20005956:	f103 030c 	add.w	r3, r3, #12
2000595a:	4618      	mov	r0, r3
2000595c:	f04f 0107 	mov.w	r1, #7
20005960:	f7ff fd8e 	bl	20005480 <clear_bit_reg8>

                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005964:	687b      	ldr	r3, [r7, #4]
20005966:	681b      	ldr	r3, [r3, #0]
20005968:	f103 0330 	add.w	r3, r3, #48	; 0x30
2000596c:	4618      	mov	r0, r3
2000596e:	f04f 0107 	mov.w	r1, #7
20005972:	f7ff fd65 	bl	20005440 <set_bit_reg8>

                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
20005976:	69bb      	ldr	r3, [r7, #24]
20005978:	2bff      	cmp	r3, #255	; 0xff
2000597a:	d900      	bls.n	2000597e <config_baud_divisors+0x132>
2000597c:	be00      	bkpt	0x0000
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
2000597e:	687b      	ldr	r3, [r7, #4]
20005980:	681b      	ldr	r3, [r3, #0]
20005982:	69ba      	ldr	r2, [r7, #24]
20005984:	b2d2      	uxtb	r2, r2
20005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
2000598a:	e026      	b.n	200059da <config_baud_divisors+0x18e>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
2000598c:	687b      	ldr	r3, [r7, #4]
2000598e:	681b      	ldr	r3, [r3, #0]
20005990:	f103 030c 	add.w	r3, r3, #12
20005994:	4618      	mov	r0, r3
20005996:	f04f 0107 	mov.w	r1, #7
2000599a:	f7ff fd51 	bl	20005440 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
2000599e:	687b      	ldr	r3, [r7, #4]
200059a0:	681b      	ldr	r3, [r3, #0]
200059a2:	68fa      	ldr	r2, [r7, #12]
200059a4:	ea4f 2212 	mov.w	r2, r2, lsr #8
200059a8:	b2d2      	uxtb	r2, r2
200059aa:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
200059ac:	687b      	ldr	r3, [r7, #4]
200059ae:	681b      	ldr	r3, [r3, #0]
200059b0:	68fa      	ldr	r2, [r7, #12]
200059b2:	b2d2      	uxtb	r2, r2
200059b4:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
200059b6:	687b      	ldr	r3, [r7, #4]
200059b8:	681b      	ldr	r3, [r3, #0]
200059ba:	f103 030c 	add.w	r3, r3, #12
200059be:	4618      	mov	r0, r3
200059c0:	f04f 0107 	mov.w	r1, #7
200059c4:	f7ff fd5c 	bl	20005480 <clear_bit_reg8>

                /* Disable Fractional baud rate */
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
200059c8:	687b      	ldr	r3, [r7, #4]
200059ca:	681b      	ldr	r3, [r3, #0]
200059cc:	f103 0330 	add.w	r3, r3, #48	; 0x30
200059d0:	4618      	mov	r0, r3
200059d2:	f04f 0107 	mov.w	r1, #7
200059d6:	f7ff fd53 	bl	20005480 <clear_bit_reg8>
            }
        }
    }
}
200059da:	f107 0720 	add.w	r7, r7, #32
200059de:	46bd      	mov	sp, r7
200059e0:	bd80      	pop	{r7, pc}
200059e2:	bf00      	nop

200059e4 <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
200059e4:	b580      	push	{r7, lr}
200059e6:	b084      	sub	sp, #16
200059e8:	af00      	add	r7, sp, #0
200059ea:	60f8      	str	r0, [r7, #12]
200059ec:	60b9      	str	r1, [r7, #8]
200059ee:	4613      	mov	r3, r2
200059f0:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200059f2:	68fa      	ldr	r2, [r7, #12]
200059f4:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
200059f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200059fc:	429a      	cmp	r2, r3
200059fe:	d007      	beq.n	20005a10 <global_init+0x2c>
20005a00:	68fa      	ldr	r2, [r7, #12]
20005a02:	f24e 2390 	movw	r3, #58000	; 0xe290
20005a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a0a:	429a      	cmp	r2, r3
20005a0c:	d000      	beq.n	20005a10 <global_init+0x2c>
20005a0e:	be00      	bkpt	0x0000

    if(this_uart == &g_mss_uart0)
20005a10:	68fa      	ldr	r2, [r7, #12]
20005a12:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a1a:	429a      	cmp	r2, r3
20005a1c:	d124      	bne.n	20005a68 <global_init+0x84>
    {
        this_uart->hw_reg = UART0;
20005a1e:	68fb      	ldr	r3, [r7, #12]
20005a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20005a24:	601a      	str	r2, [r3, #0]
        this_uart->irqn = UART0_IRQn;
20005a26:	68fb      	ldr	r3, [r7, #12]
20005a28:	f04f 020a 	mov.w	r2, #10
20005a2c:	711a      	strb	r2, [r3, #4]
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
20005a2e:	f248 0300 	movw	r3, #32768	; 0x8000
20005a32:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005a36:	f248 0200 	movw	r2, #32768	; 0x8000
20005a3a:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005a3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005a40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20005a44:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
20005a46:	f04f 000a 	mov.w	r0, #10
20005a4a:	f7ff fcdb 	bl	20005404 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
20005a4e:	f248 0300 	movw	r3, #32768	; 0x8000
20005a52:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005a56:	f248 0200 	movw	r2, #32768	; 0x8000
20005a5a:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005a5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20005a64:	649a      	str	r2, [r3, #72]	; 0x48
20005a66:	e025      	b.n	20005ab4 <global_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20005a68:	68fa      	ldr	r2, [r7, #12]
20005a6a:	f240 0300 	movw	r3, #0
20005a6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
20005a72:	6013      	str	r3, [r2, #0]
        this_uart->irqn = UART1_IRQn;
20005a74:	68fb      	ldr	r3, [r7, #12]
20005a76:	f04f 020b 	mov.w	r2, #11
20005a7a:	711a      	strb	r2, [r3, #4]
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
20005a7c:	f248 0300 	movw	r3, #32768	; 0x8000
20005a80:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005a84:	f248 0200 	movw	r2, #32768	; 0x8000
20005a88:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005a8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20005a92:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
20005a94:	f04f 000b 	mov.w	r0, #11
20005a98:	f7ff fcb4 	bl	20005404 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
20005a9c:	f248 0300 	movw	r3, #32768	; 0x8000
20005aa0:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005aa4:	f248 0200 	movw	r2, #32768	; 0x8000
20005aa8:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005aac:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005aae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20005ab2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
20005ab4:	68fb      	ldr	r3, [r7, #12]
20005ab6:	681b      	ldr	r3, [r3, #0]
20005ab8:	f04f 0200 	mov.w	r2, #0
20005abc:	711a      	strb	r2, [r3, #4]

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
20005abe:	68fb      	ldr	r3, [r7, #12]
20005ac0:	681b      	ldr	r3, [r3, #0]
20005ac2:	f04f 0200 	mov.w	r2, #0
20005ac6:	721a      	strb	r2, [r3, #8]
    /* clear receiver FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
20005ac8:	68fb      	ldr	r3, [r7, #12]
20005aca:	681b      	ldr	r3, [r3, #0]
20005acc:	f103 0308 	add.w	r3, r3, #8
20005ad0:	4618      	mov	r0, r3
20005ad2:	f04f 0101 	mov.w	r1, #1
20005ad6:	f7ff fcb3 	bl	20005440 <set_bit_reg8>
    /* clear transmitter FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
20005ada:	68fb      	ldr	r3, [r7, #12]
20005adc:	681b      	ldr	r3, [r3, #0]
20005ade:	f103 0308 	add.w	r3, r3, #8
20005ae2:	4618      	mov	r0, r3
20005ae4:	f04f 0102 	mov.w	r1, #2
20005ae8:	f7ff fcaa 	bl	20005440 <set_bit_reg8>

    /* set default READY mode : Mode 0*/
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
20005aec:	68fb      	ldr	r3, [r7, #12]
20005aee:	681b      	ldr	r3, [r3, #0]
20005af0:	f103 0308 	add.w	r3, r3, #8
20005af4:	4618      	mov	r0, r3
20005af6:	f04f 0100 	mov.w	r1, #0
20005afa:	f7ff fca1 	bl	20005440 <set_bit_reg8>

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
20005afe:	68fb      	ldr	r3, [r7, #12]
20005b00:	681b      	ldr	r3, [r3, #0]
20005b02:	f103 0310 	add.w	r3, r3, #16
20005b06:	4618      	mov	r0, r3
20005b08:	f04f 0104 	mov.w	r1, #4
20005b0c:	f7ff fcb8 	bl	20005480 <clear_bit_reg8>
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
20005b10:	68fb      	ldr	r3, [r7, #12]
20005b12:	681b      	ldr	r3, [r3, #0]
20005b14:	f103 0310 	add.w	r3, r3, #16
20005b18:	4618      	mov	r0, r3
20005b1a:	f04f 0105 	mov.w	r1, #5
20005b1e:	f7ff fcaf 	bl	20005480 <clear_bit_reg8>

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
20005b22:	68fb      	ldr	r3, [r7, #12]
20005b24:	681b      	ldr	r3, [r3, #0]
20005b26:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005b2a:	4618      	mov	r0, r3
20005b2c:	f04f 0101 	mov.w	r1, #1
20005b30:	f7ff fca6 	bl	20005480 <clear_bit_reg8>
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
20005b34:	68fb      	ldr	r3, [r7, #12]
20005b36:	681b      	ldr	r3, [r3, #0]
20005b38:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005b3c:	4618      	mov	r0, r3
20005b3e:	f04f 0100 	mov.w	r1, #0
20005b42:	f7ff fc9d 	bl	20005480 <clear_bit_reg8>

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
20005b46:	68fb      	ldr	r3, [r7, #12]
20005b48:	681b      	ldr	r3, [r3, #0]
20005b4a:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005b4e:	4618      	mov	r0, r3
20005b50:	f04f 0101 	mov.w	r1, #1
20005b54:	f7ff fc94 	bl	20005480 <clear_bit_reg8>

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG);
20005b58:	68fb      	ldr	r3, [r7, #12]
20005b5a:	681b      	ldr	r3, [r3, #0]
20005b5c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005b60:	4618      	mov	r0, r3
20005b62:	f04f 0105 	mov.w	r1, #5
20005b66:	f7ff fc8b 	bl	20005480 <clear_bit_reg8>

    /* set default RX timeout */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO);
20005b6a:	68fb      	ldr	r3, [r7, #12]
20005b6c:	681b      	ldr	r3, [r3, #0]
20005b6e:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005b72:	4618      	mov	r0, r3
20005b74:	f04f 0106 	mov.w	r1, #6
20005b78:	f7ff fc82 	bl	20005480 <clear_bit_reg8>

    /* disable fractional baud-rate */
    clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005b7c:	68fb      	ldr	r3, [r7, #12]
20005b7e:	681b      	ldr	r3, [r3, #0]
20005b80:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005b84:	4618      	mov	r0, r3
20005b86:	f04f 0107 	mov.w	r1, #7
20005b8a:	f7ff fc79 	bl	20005480 <clear_bit_reg8>

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
20005b8e:	68fb      	ldr	r3, [r7, #12]
20005b90:	681b      	ldr	r3, [r3, #0]
20005b92:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005b96:	4618      	mov	r0, r3
20005b98:	f04f 0103 	mov.w	r1, #3
20005b9c:	f7ff fc70 	bl	20005480 <clear_bit_reg8>

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
20005ba0:	68fb      	ldr	r3, [r7, #12]
20005ba2:	681b      	ldr	r3, [r3, #0]
20005ba4:	f04f 0200 	mov.w	r2, #0
20005ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
20005bac:	68fb      	ldr	r3, [r7, #12]
20005bae:	681b      	ldr	r3, [r3, #0]
20005bb0:	f04f 0200 	mov.w	r2, #0
20005bb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
20005bb8:	68fb      	ldr	r3, [r7, #12]
20005bba:	681b      	ldr	r3, [r3, #0]
20005bbc:	f04f 0200 	mov.w	r2, #0
20005bc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*
     * Configure baud rate divisors. This uses the frational baud rate divisor
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);
20005bc4:	68f8      	ldr	r0, [r7, #12]
20005bc6:	68b9      	ldr	r1, [r7, #8]
20005bc8:	f7ff fe40 	bl	2000584c <config_baud_divisors>

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20005bcc:	68fb      	ldr	r3, [r7, #12]
20005bce:	681b      	ldr	r3, [r3, #0]
20005bd0:	79fa      	ldrb	r2, [r7, #7]
20005bd2:	731a      	strb	r2, [r3, #12]

    /* Instance setup */
    this_uart->baudrate = baud_rate;
20005bd4:	68fb      	ldr	r3, [r7, #12]
20005bd6:	68ba      	ldr	r2, [r7, #8]
20005bd8:	609a      	str	r2, [r3, #8]
    this_uart->lineconfig = line_config;
20005bda:	68fb      	ldr	r3, [r7, #12]
20005bdc:	79fa      	ldrb	r2, [r7, #7]
20005bde:	731a      	strb	r2, [r3, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
20005be0:	68fb      	ldr	r3, [r7, #12]
20005be2:	f04f 0200 	mov.w	r2, #0
20005be6:	615a      	str	r2, [r3, #20]
    this_uart->tx_buffer = (const uint8_t *)0;
20005be8:	68fb      	ldr	r3, [r7, #12]
20005bea:	f04f 0200 	mov.w	r2, #0
20005bee:	611a      	str	r2, [r3, #16]
    this_uart->tx_idx = 0u;
20005bf0:	68fb      	ldr	r3, [r7, #12]
20005bf2:	f04f 0200 	mov.w	r2, #0
20005bf6:	619a      	str	r2, [r3, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20005bf8:	68fb      	ldr	r3, [r7, #12]
20005bfa:	f04f 0200 	mov.w	r2, #0
20005bfe:	621a      	str	r2, [r3, #32]
    this_uart->tx_handler       = NULL_HANDLER;
20005c00:	68fb      	ldr	r3, [r7, #12]
20005c02:	f04f 0200 	mov.w	r2, #0
20005c06:	625a      	str	r2, [r3, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
20005c08:	68fb      	ldr	r3, [r7, #12]
20005c0a:	f04f 0200 	mov.w	r2, #0
20005c0e:	61da      	str	r2, [r3, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
20005c10:	68fb      	ldr	r3, [r7, #12]
20005c12:	f04f 0200 	mov.w	r2, #0
20005c16:	629a      	str	r2, [r3, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;
20005c18:	68fb      	ldr	r3, [r7, #12]
20005c1a:	f04f 0200 	mov.w	r2, #0
20005c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;
20005c20:	68fb      	ldr	r3, [r7, #12]
20005c22:	f04f 0200 	mov.w	r2, #0
20005c26:	631a      	str	r2, [r3, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
20005c28:	68fb      	ldr	r3, [r7, #12]
20005c2a:	f04f 0200 	mov.w	r2, #0
20005c2e:	635a      	str	r2, [r3, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;
20005c30:	68fb      	ldr	r3, [r7, #12]
20005c32:	f04f 0200 	mov.w	r2, #0
20005c36:	639a      	str	r2, [r3, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;
20005c38:	68fb      	ldr	r3, [r7, #12]
20005c3a:	f04f 0200 	mov.w	r2, #0
20005c3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
20005c40:	68fb      	ldr	r3, [r7, #12]
20005c42:	f04f 0200 	mov.w	r2, #0
20005c46:	735a      	strb	r2, [r3, #13]
}
20005c48:	f107 0710 	add.w	r7, r7, #16
20005c4c:	46bd      	mov	sp, r7
20005c4e:	bd80      	pop	{r7, pc}

20005c50 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20005c50:	b580      	push	{r7, lr}
20005c52:	b084      	sub	sp, #16
20005c54:	af00      	add	r7, sp, #0
20005c56:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005c58:	687a      	ldr	r2, [r7, #4]
20005c5a:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005c62:	429a      	cmp	r2, r3
20005c64:	d007      	beq.n	20005c76 <MSS_UART_isr+0x26>
20005c66:	687a      	ldr	r2, [r7, #4]
20005c68:	f24e 2390 	movw	r3, #58000	; 0xe290
20005c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005c70:	429a      	cmp	r2, r3
20005c72:	d000      	beq.n	20005c76 <MSS_UART_isr+0x26>
20005c74:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20005c76:	687a      	ldr	r2, [r7, #4]
20005c78:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005c80:	429a      	cmp	r2, r3
20005c82:	d007      	beq.n	20005c94 <MSS_UART_isr+0x44>
20005c84:	687a      	ldr	r2, [r7, #4]
20005c86:	f24e 2390 	movw	r3, #58000	; 0xe290
20005c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005c8e:	429a      	cmp	r2, r3
20005c90:	f040 80ef 	bne.w	20005e72 <MSS_UART_isr+0x222>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20005c94:	687b      	ldr	r3, [r7, #4]
20005c96:	681b      	ldr	r3, [r3, #0]
20005c98:	7a1b      	ldrb	r3, [r3, #8]
20005c9a:	b2db      	uxtb	r3, r3
20005c9c:	f003 030f 	and.w	r3, r3, #15
20005ca0:	73fb      	strb	r3, [r7, #15]

        switch (iirf)
20005ca2:	7bfb      	ldrb	r3, [r7, #15]
20005ca4:	2b0c      	cmp	r3, #12
20005ca6:	f200 80d7 	bhi.w	20005e58 <MSS_UART_isr+0x208>
20005caa:	a201      	add	r2, pc, #4	; (adr r2, 20005cb0 <MSS_UART_isr+0x60>)
20005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005cb0:	20005ce5 	.word	0x20005ce5
20005cb4:	20005e59 	.word	0x20005e59
20005cb8:	20005d03 	.word	0x20005d03
20005cbc:	20005d5d 	.word	0x20005d5d
20005cc0:	20005d21 	.word	0x20005d21
20005cc4:	20005e59 	.word	0x20005e59
20005cc8:	20005d3f 	.word	0x20005d3f
20005ccc:	20005e59 	.word	0x20005e59
20005cd0:	20005e59 	.word	0x20005e59
20005cd4:	20005e59 	.word	0x20005e59
20005cd8:	20005e59 	.word	0x20005e59
20005cdc:	20005e59 	.word	0x20005e59
20005ce0:	20005d21 	.word	0x20005d21
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
20005ce4:	687b      	ldr	r3, [r7, #4]
20005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005ce8:	2b00      	cmp	r3, #0
20005cea:	d100      	bne.n	20005cee <MSS_UART_isr+0x9e>
20005cec:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->modemsts_handler)
20005cee:	687b      	ldr	r3, [r7, #4]
20005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005cf2:	2b00      	cmp	r3, #0
20005cf4:	f000 80b2 	beq.w	20005e5c <MSS_UART_isr+0x20c>
                {
                   (*(this_uart->modemsts_handler))(this_uart);
20005cf8:	687b      	ldr	r3, [r7, #4]
20005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005cfc:	6878      	ldr	r0, [r7, #4]
20005cfe:	4798      	blx	r3
                }
            }
            break;
20005d00:	e0b7      	b.n	20005e72 <MSS_UART_isr+0x222>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
20005d02:	687b      	ldr	r3, [r7, #4]
20005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005d06:	2b00      	cmp	r3, #0
20005d08:	d100      	bne.n	20005d0c <MSS_UART_isr+0xbc>
20005d0a:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->tx_handler)
20005d0c:	687b      	ldr	r3, [r7, #4]
20005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005d10:	2b00      	cmp	r3, #0
20005d12:	f000 80a5 	beq.w	20005e60 <MSS_UART_isr+0x210>
                {
                    (*(this_uart->tx_handler))(this_uart);
20005d16:	687b      	ldr	r3, [r7, #4]
20005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005d1a:	6878      	ldr	r0, [r7, #4]
20005d1c:	4798      	blx	r3
                }
            }
            break;
20005d1e:	e0a8      	b.n	20005e72 <MSS_UART_isr+0x222>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
20005d20:	687b      	ldr	r3, [r7, #4]
20005d22:	6a1b      	ldr	r3, [r3, #32]
20005d24:	2b00      	cmp	r3, #0
20005d26:	d100      	bne.n	20005d2a <MSS_UART_isr+0xda>
20005d28:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->rx_handler)
20005d2a:	687b      	ldr	r3, [r7, #4]
20005d2c:	6a1b      	ldr	r3, [r3, #32]
20005d2e:	2b00      	cmp	r3, #0
20005d30:	f000 8098 	beq.w	20005e64 <MSS_UART_isr+0x214>
                {
                    (*(this_uart->rx_handler))(this_uart);
20005d34:	687b      	ldr	r3, [r7, #4]
20005d36:	6a1b      	ldr	r3, [r3, #32]
20005d38:	6878      	ldr	r0, [r7, #4]
20005d3a:	4798      	blx	r3
                }
            }
            break;
20005d3c:	e099      	b.n	20005e72 <MSS_UART_isr+0x222>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
20005d3e:	687b      	ldr	r3, [r7, #4]
20005d40:	69db      	ldr	r3, [r3, #28]
20005d42:	2b00      	cmp	r3, #0
20005d44:	d100      	bne.n	20005d48 <MSS_UART_isr+0xf8>
20005d46:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->linests_handler)
20005d48:	687b      	ldr	r3, [r7, #4]
20005d4a:	69db      	ldr	r3, [r3, #28]
20005d4c:	2b00      	cmp	r3, #0
20005d4e:	f000 808b 	beq.w	20005e68 <MSS_UART_isr+0x218>
                {
                   (*(this_uart->linests_handler))(this_uart);
20005d52:	687b      	ldr	r3, [r7, #4]
20005d54:	69db      	ldr	r3, [r3, #28]
20005d56:	6878      	ldr	r0, [r7, #4]
20005d58:	4798      	blx	r3
                }
            }
            break;
20005d5a:	e08a      	b.n	20005e72 <MSS_UART_isr+0x222>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
20005d5c:	687b      	ldr	r3, [r7, #4]
20005d5e:	681b      	ldr	r3, [r3, #0]
20005d60:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005d64:	4618      	mov	r0, r3
20005d66:	f04f 0100 	mov.w	r1, #0
20005d6a:	f7ff fba9 	bl	200054c0 <read_bit_reg8>
20005d6e:	4603      	mov	r3, r0
20005d70:	2b00      	cmp	r3, #0
20005d72:	d00c      	beq.n	20005d8e <MSS_UART_isr+0x13e>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
20005d74:	687b      	ldr	r3, [r7, #4]
20005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005d78:	2b00      	cmp	r3, #0
20005d7a:	d100      	bne.n	20005d7e <MSS_UART_isr+0x12e>
20005d7c:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->rto_handler)
20005d7e:	687b      	ldr	r3, [r7, #4]
20005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005d82:	2b00      	cmp	r3, #0
20005d84:	d003      	beq.n	20005d8e <MSS_UART_isr+0x13e>
                    {
                        (*(this_uart->rto_handler))(this_uart);
20005d86:	687b      	ldr	r3, [r7, #4]
20005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005d8a:	6878      	ldr	r0, [r7, #4]
20005d8c:	4798      	blx	r3
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
20005d8e:	687b      	ldr	r3, [r7, #4]
20005d90:	681b      	ldr	r3, [r3, #0]
20005d92:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005d96:	4618      	mov	r0, r3
20005d98:	f04f 0101 	mov.w	r1, #1
20005d9c:	f7ff fb90 	bl	200054c0 <read_bit_reg8>
20005da0:	4603      	mov	r3, r0
20005da2:	2b00      	cmp	r3, #0
20005da4:	d00c      	beq.n	20005dc0 <MSS_UART_isr+0x170>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
20005da6:	687b      	ldr	r3, [r7, #4]
20005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005daa:	2b00      	cmp	r3, #0
20005dac:	d100      	bne.n	20005db0 <MSS_UART_isr+0x160>
20005dae:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->nack_handler)
20005db0:	687b      	ldr	r3, [r7, #4]
20005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005db4:	2b00      	cmp	r3, #0
20005db6:	d003      	beq.n	20005dc0 <MSS_UART_isr+0x170>
                    {
                        (*(this_uart->nack_handler))(this_uart);
20005db8:	687b      	ldr	r3, [r7, #4]
20005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005dbc:	6878      	ldr	r0, [r7, #4]
20005dbe:	4798      	blx	r3
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
20005dc0:	687b      	ldr	r3, [r7, #4]
20005dc2:	681b      	ldr	r3, [r3, #0]
20005dc4:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005dc8:	4618      	mov	r0, r3
20005dca:	f04f 0102 	mov.w	r1, #2
20005dce:	f7ff fb77 	bl	200054c0 <read_bit_reg8>
20005dd2:	4603      	mov	r3, r0
20005dd4:	2b00      	cmp	r3, #0
20005dd6:	d00c      	beq.n	20005df2 <MSS_UART_isr+0x1a2>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
20005dd8:	687b      	ldr	r3, [r7, #4]
20005dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005ddc:	2b00      	cmp	r3, #0
20005dde:	d100      	bne.n	20005de2 <MSS_UART_isr+0x192>
20005de0:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
20005de2:	687b      	ldr	r3, [r7, #4]
20005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005de6:	2b00      	cmp	r3, #0
20005de8:	d003      	beq.n	20005df2 <MSS_UART_isr+0x1a2>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
20005dea:	687b      	ldr	r3, [r7, #4]
20005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005dee:	6878      	ldr	r0, [r7, #4]
20005df0:	4798      	blx	r3
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
20005df2:	687b      	ldr	r3, [r7, #4]
20005df4:	681b      	ldr	r3, [r3, #0]
20005df6:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005dfa:	4618      	mov	r0, r3
20005dfc:	f04f 0103 	mov.w	r1, #3
20005e00:	f7ff fb5e 	bl	200054c0 <read_bit_reg8>
20005e04:	4603      	mov	r3, r0
20005e06:	2b00      	cmp	r3, #0
20005e08:	d00c      	beq.n	20005e24 <MSS_UART_isr+0x1d4>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
20005e0a:	687b      	ldr	r3, [r7, #4]
20005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005e0e:	2b00      	cmp	r3, #0
20005e10:	d100      	bne.n	20005e14 <MSS_UART_isr+0x1c4>
20005e12:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->break_handler)
20005e14:	687b      	ldr	r3, [r7, #4]
20005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005e18:	2b00      	cmp	r3, #0
20005e1a:	d003      	beq.n	20005e24 <MSS_UART_isr+0x1d4>
                    {
                        (*(this_uart->break_handler))(this_uart);
20005e1c:	687b      	ldr	r3, [r7, #4]
20005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005e20:	6878      	ldr	r0, [r7, #4]
20005e22:	4798      	blx	r3
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
20005e24:	687b      	ldr	r3, [r7, #4]
20005e26:	681b      	ldr	r3, [r3, #0]
20005e28:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005e2c:	4618      	mov	r0, r3
20005e2e:	f04f 0104 	mov.w	r1, #4
20005e32:	f7ff fb45 	bl	200054c0 <read_bit_reg8>
20005e36:	4603      	mov	r3, r0
20005e38:	2b00      	cmp	r3, #0
20005e3a:	d017      	beq.n	20005e6c <MSS_UART_isr+0x21c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
20005e3c:	687b      	ldr	r3, [r7, #4]
20005e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005e40:	2b00      	cmp	r3, #0
20005e42:	d100      	bne.n	20005e46 <MSS_UART_isr+0x1f6>
20005e44:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->sync_handler)
20005e46:	687b      	ldr	r3, [r7, #4]
20005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005e4a:	2b00      	cmp	r3, #0
20005e4c:	d010      	beq.n	20005e70 <MSS_UART_isr+0x220>
                    {
                        (*(this_uart->sync_handler))(this_uart);
20005e4e:	687b      	ldr	r3, [r7, #4]
20005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005e52:	6878      	ldr	r0, [r7, #4]
20005e54:	4798      	blx	r3
                    }
                }
                break;
20005e56:	e00c      	b.n	20005e72 <MSS_UART_isr+0x222>
            }

            default:
            {
                ASSERT(INVALID_INTERRUPT);
20005e58:	be00      	bkpt	0x0000
20005e5a:	e00a      	b.n	20005e72 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->modemsts_handler)
                {
                   (*(this_uart->modemsts_handler))(this_uart);
                }
            }
            break;
20005e5c:	bf00      	nop
20005e5e:	e008      	b.n	20005e72 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->tx_handler)
                {
                    (*(this_uart->tx_handler))(this_uart);
                }
            }
            break;
20005e60:	bf00      	nop
20005e62:	e006      	b.n	20005e72 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->rx_handler)
                {
                    (*(this_uart->rx_handler))(this_uart);
                }
            }
            break;
20005e64:	bf00      	nop
20005e66:	e004      	b.n	20005e72 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->linests_handler)
                {
                   (*(this_uart->linests_handler))(this_uart);
                }
            }
            break;
20005e68:	bf00      	nop
20005e6a:	e002      	b.n	20005e72 <MSS_UART_isr+0x222>
                    if(NULL_HANDLER != this_uart->sync_handler)
                    {
                        (*(this_uart->sync_handler))(this_uart);
                    }
                }
                break;
20005e6c:	bf00      	nop
20005e6e:	e000      	b.n	20005e72 <MSS_UART_isr+0x222>
20005e70:	bf00      	nop
                ASSERT(INVALID_INTERRUPT);
            }
            break;
        }
    }
}
20005e72:	f107 0710 	add.w	r7, r7, #16
20005e76:	46bd      	mov	sp, r7
20005e78:	bd80      	pop	{r7, pc}
20005e7a:	bf00      	nop

20005e7c <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20005e7c:	b580      	push	{r7, lr}
20005e7e:	b086      	sub	sp, #24
20005e80:	af00      	add	r7, sp, #0
20005e82:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005e84:	687a      	ldr	r2, [r7, #4]
20005e86:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e8e:	429a      	cmp	r2, r3
20005e90:	d007      	beq.n	20005ea2 <default_tx_handler+0x26>
20005e92:	687a      	ldr	r2, [r7, #4]
20005e94:	f24e 2390 	movw	r3, #58000	; 0xe290
20005e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e9c:	429a      	cmp	r2, r3
20005e9e:	d000      	beq.n	20005ea2 <default_tx_handler+0x26>
20005ea0:	be00      	bkpt	0x0000
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
20005ea2:	687b      	ldr	r3, [r7, #4]
20005ea4:	691b      	ldr	r3, [r3, #16]
20005ea6:	2b00      	cmp	r3, #0
20005ea8:	d100      	bne.n	20005eac <default_tx_handler+0x30>
20005eaa:	be00      	bkpt	0x0000
    ASSERT(0u < this_uart->tx_buff_size);
20005eac:	687b      	ldr	r3, [r7, #4]
20005eae:	695b      	ldr	r3, [r3, #20]
20005eb0:	2b00      	cmp	r3, #0
20005eb2:	d100      	bne.n	20005eb6 <default_tx_handler+0x3a>
20005eb4:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005eb6:	687a      	ldr	r2, [r7, #4]
20005eb8:	f24e 23d0 	movw	r3, #58064	; 0xe2d0
20005ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005ec0:	429a      	cmp	r2, r3
20005ec2:	d006      	beq.n	20005ed2 <default_tx_handler+0x56>
20005ec4:	687a      	ldr	r2, [r7, #4]
20005ec6:	f24e 2390 	movw	r3, #58000	; 0xe290
20005eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005ece:	429a      	cmp	r2, r3
20005ed0:	d155      	bne.n	20005f7e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
20005ed2:	687b      	ldr	r3, [r7, #4]
20005ed4:	691b      	ldr	r3, [r3, #16]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005ed6:	2b00      	cmp	r3, #0
20005ed8:	d051      	beq.n	20005f7e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
20005eda:	687b      	ldr	r3, [r7, #4]
20005edc:	695b      	ldr	r3, [r3, #20]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005ede:	2b00      	cmp	r3, #0
20005ee0:	d04d      	beq.n	20005f7e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20005ee2:	687b      	ldr	r3, [r7, #4]
20005ee4:	681b      	ldr	r3, [r3, #0]
20005ee6:	7d1b      	ldrb	r3, [r3, #20]
20005ee8:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
20005eea:	687b      	ldr	r3, [r7, #4]
20005eec:	7b5a      	ldrb	r2, [r3, #13]
20005eee:	7afb      	ldrb	r3, [r7, #11]
20005ef0:	ea42 0303 	orr.w	r3, r2, r3
20005ef4:	b2da      	uxtb	r2, r3
20005ef6:	687b      	ldr	r3, [r7, #4]
20005ef8:	735a      	strb	r2, [r3, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
20005efa:	7afb      	ldrb	r3, [r7, #11]
20005efc:	f003 0320 	and.w	r3, r3, #32
20005f00:	2b00      	cmp	r3, #0
20005f02:	d029      	beq.n	20005f58 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
20005f04:	f04f 0310 	mov.w	r3, #16
20005f08:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20005f0a:	687b      	ldr	r3, [r7, #4]
20005f0c:	695a      	ldr	r2, [r3, #20]
20005f0e:	687b      	ldr	r3, [r7, #4]
20005f10:	699b      	ldr	r3, [r3, #24]
20005f12:	ebc3 0302 	rsb	r3, r3, r2
20005f16:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
20005f18:	697b      	ldr	r3, [r7, #20]
20005f1a:	2b0f      	cmp	r3, #15
20005f1c:	d801      	bhi.n	20005f22 <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
20005f1e:	697b      	ldr	r3, [r7, #20]
20005f20:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20005f22:	f04f 0300 	mov.w	r3, #0
20005f26:	60fb      	str	r3, [r7, #12]
20005f28:	e012      	b.n	20005f50 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20005f2a:	687b      	ldr	r3, [r7, #4]
20005f2c:	681b      	ldr	r3, [r3, #0]
20005f2e:	687a      	ldr	r2, [r7, #4]
20005f30:	6911      	ldr	r1, [r2, #16]
20005f32:	687a      	ldr	r2, [r7, #4]
20005f34:	6992      	ldr	r2, [r2, #24]
20005f36:	440a      	add	r2, r1
20005f38:	7812      	ldrb	r2, [r2, #0]
20005f3a:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
20005f3c:	687b      	ldr	r3, [r7, #4]
20005f3e:	699b      	ldr	r3, [r3, #24]
20005f40:	f103 0201 	add.w	r2, r3, #1
20005f44:	687b      	ldr	r3, [r7, #4]
20005f46:	619a      	str	r2, [r3, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20005f48:	68fb      	ldr	r3, [r7, #12]
20005f4a:	f103 0301 	add.w	r3, r3, #1
20005f4e:	60fb      	str	r3, [r7, #12]
20005f50:	68fa      	ldr	r2, [r7, #12]
20005f52:	693b      	ldr	r3, [r7, #16]
20005f54:	429a      	cmp	r2, r3
20005f56:	d3e8      	bcc.n	20005f2a <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
20005f58:	687b      	ldr	r3, [r7, #4]
20005f5a:	699a      	ldr	r2, [r3, #24]
20005f5c:	687b      	ldr	r3, [r7, #4]
20005f5e:	695b      	ldr	r3, [r3, #20]
20005f60:	429a      	cmp	r2, r3
20005f62:	d10c      	bne.n	20005f7e <default_tx_handler+0x102>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20005f64:	687b      	ldr	r3, [r7, #4]
20005f66:	f04f 0200 	mov.w	r2, #0
20005f6a:	615a      	str	r2, [r3, #20]
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
20005f6c:	687b      	ldr	r3, [r7, #4]
20005f6e:	681b      	ldr	r3, [r3, #0]
20005f70:	f103 0304 	add.w	r3, r3, #4
20005f74:	4618      	mov	r0, r3
20005f76:	f04f 0101 	mov.w	r1, #1
20005f7a:	f7ff fa81 	bl	20005480 <clear_bit_reg8>
        }
    }
}
20005f7e:	f107 0718 	add.w	r7, r7, #24
20005f82:	46bd      	mov	sp, r7
20005f84:	bd80      	pop	{r7, pc}
20005f86:	bf00      	nop

20005f88 <I2C_init>:
    i2c_instance_t * this_i2c,
    addr_t base_address,
    uint8_t ser_address,
    i2c_clock_divider_t ser_clock_speed
)
{
20005f88:	b580      	push	{r7, lr}
20005f8a:	b086      	sub	sp, #24
20005f8c:	af00      	add	r7, sp, #0
20005f8e:	60f8      	str	r0, [r7, #12]
20005f90:	60b9      	str	r1, [r7, #8]
20005f92:	71fa      	strb	r2, [r7, #7]
20005f94:	71bb      	strb	r3, [r7, #6]
    psr_t saved_psr;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
20005f96:	79bb      	ldrb	r3, [r7, #6]
20005f98:	617b      	str	r3, [r7, #20]
    
    /*
     * We need to disable ints while doing this as there is no guarantee we
     * have not been called already and the ISR is active.
     */
    saved_psr = HAL_disable_interrupts();
20005f9a:	f001 f9e9 	bl	20007370 <HAL_disable_interrupts>
20005f9e:	4603      	mov	r3, r0
20005fa0:	613b      	str	r3, [r7, #16]
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    memset(this_i2c, 0, sizeof(i2c_instance_t));
20005fa2:	68f8      	ldr	r0, [r7, #12]
20005fa4:	f04f 0100 	mov.w	r1, #0
20005fa8:	f04f 026c 	mov.w	r2, #108	; 0x6c
20005fac:	f001 fb20 	bl	200075f0 <memset>
    
    /*
     * Set base address of I2C hardware used by this instance.
     */
    this_i2c->base_address = base_address;
20005fb0:	68fb      	ldr	r3, [r7, #12]
20005fb2:	68ba      	ldr	r2, [r7, #8]
20005fb4:	601a      	str	r2, [r3, #0]

    /*
     * Update Serial address of the device
     */
    this_i2c->ser_address = ((uint_fast8_t)ser_address << 1u);
20005fb6:	79fb      	ldrb	r3, [r7, #7]
20005fb8:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005fbc:	68fb      	ldr	r3, [r7, #12]
20005fbe:	605a      	str	r2, [r3, #4]
    
    /*
     * Configure hardware.
     */
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x00); /* Reset I2C hardware. */
20005fc0:	68fb      	ldr	r3, [r7, #12]
20005fc2:	681b      	ldr	r3, [r3, #0]
20005fc4:	4618      	mov	r0, r3
20005fc6:	f04f 0106 	mov.w	r1, #6
20005fca:	f04f 0240 	mov.w	r2, #64	; 0x40
20005fce:	f04f 0300 	mov.w	r3, #0
20005fd2:	f001 fa08 	bl	200073e6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x01); /* set enable bit */
20005fd6:	68fb      	ldr	r3, [r7, #12]
20005fd8:	681b      	ldr	r3, [r3, #0]
20005fda:	4618      	mov	r0, r3
20005fdc:	f04f 0106 	mov.w	r1, #6
20005fe0:	f04f 0240 	mov.w	r2, #64	; 0x40
20005fe4:	f04f 0301 	mov.w	r3, #1
20005fe8:	f001 f9fd 	bl	200073e6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR2, ( (clock_speed >> 2) & 0x01) );
20005fec:	68fb      	ldr	r3, [r7, #12]
20005fee:	681a      	ldr	r2, [r3, #0]
20005ff0:	697b      	ldr	r3, [r7, #20]
20005ff2:	ea4f 0393 	mov.w	r3, r3, lsr #2
20005ff6:	f003 0301 	and.w	r3, r3, #1
20005ffa:	4610      	mov	r0, r2
20005ffc:	f04f 0107 	mov.w	r1, #7
20006000:	f04f 0280 	mov.w	r2, #128	; 0x80
20006004:	f001 f9ef 	bl	200073e6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR1, ( (clock_speed >> 1) & 0x01) );
20006008:	68fb      	ldr	r3, [r7, #12]
2000600a:	681a      	ldr	r2, [r3, #0]
2000600c:	697b      	ldr	r3, [r7, #20]
2000600e:	ea4f 0353 	mov.w	r3, r3, lsr #1
20006012:	f003 0301 	and.w	r3, r3, #1
20006016:	4610      	mov	r0, r2
20006018:	f04f 0101 	mov.w	r1, #1
2000601c:	f04f 0202 	mov.w	r2, #2
20006020:	f001 f9e1 	bl	200073e6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR0, ( clock_speed & 0x01) );
20006024:	68fb      	ldr	r3, [r7, #12]
20006026:	681a      	ldr	r2, [r3, #0]
20006028:	697b      	ldr	r3, [r7, #20]
2000602a:	f003 0301 	and.w	r3, r3, #1
2000602e:	4610      	mov	r0, r2
20006030:	f04f 0100 	mov.w	r1, #0
20006034:	f04f 0201 	mov.w	r2, #1
20006038:	f001 f9d5 	bl	200073e6 <HW_set_8bit_reg_field>

    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS, this_i2c->ser_address);
2000603c:	68fb      	ldr	r3, [r7, #12]
2000603e:	681b      	ldr	r3, [r3, #0]
20006040:	f103 020c 	add.w	r2, r3, #12
20006044:	68fb      	ldr	r3, [r7, #12]
20006046:	685b      	ldr	r3, [r3, #4]
20006048:	4610      	mov	r0, r2
2000604a:	4619      	mov	r1, r3
2000604c:	f001 f9c7 	bl	200073de <HW_set_8bit_reg>
    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS1, this_i2c->ser_address);
20006050:	68fb      	ldr	r3, [r7, #12]
20006052:	681b      	ldr	r3, [r3, #0]
20006054:	f103 021c 	add.w	r2, r3, #28
20006058:	68fb      	ldr	r3, [r7, #12]
2000605a:	685b      	ldr	r3, [r3, #4]
2000605c:	4610      	mov	r0, r2
2000605e:	4619      	mov	r1, r3
20006060:	f001 f9bd 	bl	200073de <HW_set_8bit_reg>
    
    /*
     * Finally safe to enable interrupts.
     */
    HAL_restore_interrupts( saved_psr );
20006064:	6938      	ldr	r0, [r7, #16]
20006066:	f001 f987 	bl	20007378 <HAL_restore_interrupts>
}
2000606a:	f107 0718 	add.w	r7, r7, #24
2000606e:	46bd      	mov	sp, r7
20006070:	bd80      	pop	{r7, pc}
20006072:	bf00      	nop

20006074 <I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20006074:	b580      	push	{r7, lr}
20006076:	b086      	sub	sp, #24
20006078:	af00      	add	r7, sp, #0
2000607a:	60f8      	str	r0, [r7, #12]
2000607c:	607a      	str	r2, [r7, #4]
2000607e:	460a      	mov	r2, r1
20006080:	72fa      	strb	r2, [r7, #11]
20006082:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
20006084:	f001 f974 	bl	20007370 <HAL_disable_interrupts>
20006088:	4603      	mov	r3, r0
2000608a:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
2000608c:	68fb      	ldr	r3, [r7, #12]
2000608e:	7b1b      	ldrb	r3, [r3, #12]
20006090:	2b00      	cmp	r3, #0
20006092:	d103      	bne.n	2000609c <I2C_write+0x28>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20006094:	68fb      	ldr	r3, [r7, #12]
20006096:	f04f 0201 	mov.w	r2, #1
2000609a:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
2000609c:	68fb      	ldr	r3, [r7, #12]
2000609e:	f04f 0201 	mov.w	r2, #1
200060a2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200060a6:	7afb      	ldrb	r3, [r7, #11]
200060a8:	ea4f 0243 	mov.w	r2, r3, lsl #1
200060ac:	68fb      	ldr	r3, [r7, #12]
200060ae:	609a      	str	r2, [r3, #8]
    this_i2c->dir = WRITE_DIR;
200060b0:	68fb      	ldr	r3, [r7, #12]
200060b2:	f04f 0200 	mov.w	r2, #0
200060b6:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_buffer = write_buffer;
200060b8:	68fb      	ldr	r3, [r7, #12]
200060ba:	687a      	ldr	r2, [r7, #4]
200060bc:	619a      	str	r2, [r3, #24]
    this_i2c->master_tx_size = write_size;
200060be:	887a      	ldrh	r2, [r7, #2]
200060c0:	68fb      	ldr	r3, [r7, #12]
200060c2:	61da      	str	r2, [r3, #28]
    this_i2c->master_tx_idx = 0u;
200060c4:	68fb      	ldr	r3, [r7, #12]
200060c6:	f04f 0200 	mov.w	r2, #0
200060ca:	621a      	str	r2, [r3, #32]

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
200060cc:	68fb      	ldr	r3, [r7, #12]
200060ce:	f04f 0201 	mov.w	r2, #1
200060d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    this_i2c->options = options;
200060d6:	68fb      	ldr	r3, [r7, #12]
200060d8:	f897 2020 	ldrb.w	r2, [r7, #32]
200060dc:	751a      	strb	r2, [r3, #20]

    if(I2C_IN_PROGRESS == this_i2c->slave_status)
200060de:	68fb      	ldr	r3, [r7, #12]
200060e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200060e4:	b2db      	uxtb	r3, r3
200060e6:	2b01      	cmp	r3, #1
200060e8:	d105      	bne.n	200060f6 <I2C_write+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
200060ea:	68fb      	ldr	r3, [r7, #12]
200060ec:	f04f 0201 	mov.w	r2, #1
200060f0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
200060f4:	e00a      	b.n	2000610c <I2C_write+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200060f6:	68fb      	ldr	r3, [r7, #12]
200060f8:	681b      	ldr	r3, [r3, #0]
200060fa:	4618      	mov	r0, r3
200060fc:	f04f 0105 	mov.w	r1, #5
20006100:	f04f 0220 	mov.w	r2, #32
20006104:	f04f 0301 	mov.w	r3, #1
20006108:	f001 f96d 	bl	200073e6 <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
2000610c:	68fb      	ldr	r3, [r7, #12]
2000610e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20006112:	2b01      	cmp	r3, #1
20006114:	d10a      	bne.n	2000612c <I2C_write+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006116:	68fb      	ldr	r3, [r7, #12]
20006118:	681b      	ldr	r3, [r3, #0]
2000611a:	4618      	mov	r0, r3
2000611c:	f04f 0103 	mov.w	r1, #3
20006120:	f04f 0208 	mov.w	r2, #8
20006124:	f04f 0300 	mov.w	r3, #0
20006128:	f001 f95d 	bl	200073e6 <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
2000612c:	68fb      	ldr	r3, [r7, #12]
2000612e:	681b      	ldr	r3, [r3, #0]
20006130:	f103 0304 	add.w	r3, r3, #4
20006134:	4618      	mov	r0, r3
20006136:	f001 f954 	bl	200073e2 <HW_get_8bit_reg>
2000613a:	4603      	mov	r3, r0
2000613c:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
2000613e:	7cfb      	ldrb	r3, [r7, #19]
20006140:	b2db      	uxtb	r3, r3
20006142:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
20006144:	68f8      	ldr	r0, [r7, #12]
20006146:	f000 fec9 	bl	20006edc <I2C_enable_irq>

    HAL_restore_interrupts( saved_psr );
2000614a:	6978      	ldr	r0, [r7, #20]
2000614c:	f001 f914 	bl	20007378 <HAL_restore_interrupts>
}
20006150:	f107 0718 	add.w	r7, r7, #24
20006154:	46bd      	mov	sp, r7
20006156:	bd80      	pop	{r7, pc}

20006158 <I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20006158:	b580      	push	{r7, lr}
2000615a:	b086      	sub	sp, #24
2000615c:	af00      	add	r7, sp, #0
2000615e:	60f8      	str	r0, [r7, #12]
20006160:	607a      	str	r2, [r7, #4]
20006162:	460a      	mov	r2, r1
20006164:	72fa      	strb	r2, [r7, #11]
20006166:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
20006168:	f001 f902 	bl	20007370 <HAL_disable_interrupts>
2000616c:	4603      	mov	r3, r0
2000616e:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20006170:	68fb      	ldr	r3, [r7, #12]
20006172:	7b1b      	ldrb	r3, [r3, #12]
20006174:	2b00      	cmp	r3, #0
20006176:	d103      	bne.n	20006180 <I2C_read+0x28>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20006178:	68fb      	ldr	r3, [r7, #12]
2000617a:	f04f 0202 	mov.w	r2, #2
2000617e:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20006180:	68fb      	ldr	r3, [r7, #12]
20006182:	f04f 0202 	mov.w	r2, #2
20006186:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
2000618a:	7afb      	ldrb	r3, [r7, #11]
2000618c:	ea4f 0243 	mov.w	r2, r3, lsl #1
20006190:	68fb      	ldr	r3, [r7, #12]
20006192:	609a      	str	r2, [r3, #8]

    this_i2c->dir = READ_DIR;
20006194:	68fb      	ldr	r3, [r7, #12]
20006196:	f04f 0201 	mov.w	r2, #1
2000619a:	625a      	str	r2, [r3, #36]	; 0x24

    this_i2c->master_rx_buffer = read_buffer;
2000619c:	68fb      	ldr	r3, [r7, #12]
2000619e:	687a      	ldr	r2, [r7, #4]
200061a0:	629a      	str	r2, [r3, #40]	; 0x28
    this_i2c->master_rx_size = read_size;
200061a2:	887a      	ldrh	r2, [r7, #2]
200061a4:	68fb      	ldr	r3, [r7, #12]
200061a6:	62da      	str	r2, [r3, #44]	; 0x2c
    this_i2c->master_rx_idx = 0u;
200061a8:	68fb      	ldr	r3, [r7, #12]
200061aa:	f04f 0200 	mov.w	r2, #0
200061ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
200061b0:	68fb      	ldr	r3, [r7, #12]
200061b2:	f04f 0201 	mov.w	r2, #1
200061b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    this_i2c->options = options;
200061ba:	68fb      	ldr	r3, [r7, #12]
200061bc:	f897 2020 	ldrb.w	r2, [r7, #32]
200061c0:	751a      	strb	r2, [r3, #20]
    
    if(I2C_IN_PROGRESS == this_i2c->slave_status)
200061c2:	68fb      	ldr	r3, [r7, #12]
200061c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200061c8:	b2db      	uxtb	r3, r3
200061ca:	2b01      	cmp	r3, #1
200061cc:	d105      	bne.n	200061da <I2C_read+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
200061ce:	68fb      	ldr	r3, [r7, #12]
200061d0:	f04f 0201 	mov.w	r2, #1
200061d4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
200061d8:	e00a      	b.n	200061f0 <I2C_read+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200061da:	68fb      	ldr	r3, [r7, #12]
200061dc:	681b      	ldr	r3, [r3, #0]
200061de:	4618      	mov	r0, r3
200061e0:	f04f 0105 	mov.w	r1, #5
200061e4:	f04f 0220 	mov.w	r2, #32
200061e8:	f04f 0301 	mov.w	r3, #1
200061ec:	f001 f8fb 	bl	200073e6 <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
200061f0:	68fb      	ldr	r3, [r7, #12]
200061f2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
200061f6:	2b01      	cmp	r3, #1
200061f8:	d10a      	bne.n	20006210 <I2C_read+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
200061fa:	68fb      	ldr	r3, [r7, #12]
200061fc:	681b      	ldr	r3, [r3, #0]
200061fe:	4618      	mov	r0, r3
20006200:	f04f 0103 	mov.w	r1, #3
20006204:	f04f 0208 	mov.w	r2, #8
20006208:	f04f 0300 	mov.w	r3, #0
2000620c:	f001 f8eb 	bl	200073e6 <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20006210:	68fb      	ldr	r3, [r7, #12]
20006212:	681b      	ldr	r3, [r3, #0]
20006214:	f103 0304 	add.w	r3, r3, #4
20006218:	4618      	mov	r0, r3
2000621a:	f001 f8e2 	bl	200073e2 <HW_get_8bit_reg>
2000621e:	4603      	mov	r3, r0
20006220:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20006222:	7cfb      	ldrb	r3, [r7, #19]
20006224:	b2db      	uxtb	r3, r3
20006226:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
20006228:	68f8      	ldr	r0, [r7, #12]
2000622a:	f000 fe57 	bl	20006edc <I2C_enable_irq>
    HAL_restore_interrupts( saved_psr );
2000622e:	6978      	ldr	r0, [r7, #20]
20006230:	f001 f8a2 	bl	20007378 <HAL_restore_interrupts>
}
20006234:	f107 0718 	add.w	r7, r7, #24
20006238:	46bd      	mov	sp, r7
2000623a:	bd80      	pop	{r7, pc}

2000623c <I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
2000623c:	b580      	push	{r7, lr}
2000623e:	b086      	sub	sp, #24
20006240:	af00      	add	r7, sp, #0
20006242:	60f8      	str	r0, [r7, #12]
20006244:	607a      	str	r2, [r7, #4]
20006246:	460a      	mov	r2, r1
20006248:	72fa      	strb	r2, [r7, #11]
2000624a:	807b      	strh	r3, [r7, #2]
    HAL_ASSERT(offset_size > 0u);
2000624c:	887b      	ldrh	r3, [r7, #2]
2000624e:	2b00      	cmp	r3, #0
20006250:	d100      	bne.n	20006254 <I2C_write_read+0x18>
20006252:	be00      	bkpt	0x0000
    HAL_ASSERT(addr_offset != (uint8_t *)0);
20006254:	687b      	ldr	r3, [r7, #4]
20006256:	2b00      	cmp	r3, #0
20006258:	d100      	bne.n	2000625c <I2C_write_read+0x20>
2000625a:	be00      	bkpt	0x0000
    HAL_ASSERT(read_size > 0u);
2000625c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2000625e:	2b00      	cmp	r3, #0
20006260:	d100      	bne.n	20006264 <I2C_write_read+0x28>
20006262:	be00      	bkpt	0x0000
    HAL_ASSERT(read_buffer != (uint8_t *)0);
20006264:	6a3b      	ldr	r3, [r7, #32]
20006266:	2b00      	cmp	r3, #0
20006268:	d100      	bne.n	2000626c <I2C_write_read+0x30>
2000626a:	be00      	bkpt	0x0000
    
    this_i2c->master_status = I2C_FAILED;
2000626c:	68fb      	ldr	r3, [r7, #12]
2000626e:	f04f 0202 	mov.w	r2, #2
20006272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if((read_size > 0u) && (offset_size > 0u))
20006276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20006278:	2b00      	cmp	r3, #0
2000627a:	d072      	beq.n	20006362 <I2C_write_read+0x126>
2000627c:	887b      	ldrh	r3, [r7, #2]
2000627e:	2b00      	cmp	r3, #0
20006280:	d06f      	beq.n	20006362 <I2C_write_read+0x126>
    {
        psr_t saved_psr;
        volatile uint8_t stat_ctrl;

        saved_psr = HAL_disable_interrupts();
20006282:	f001 f875 	bl	20007370 <HAL_disable_interrupts>
20006286:	4603      	mov	r3, r0
20006288:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
2000628a:	68fb      	ldr	r3, [r7, #12]
2000628c:	7b1b      	ldrb	r3, [r3, #12]
2000628e:	2b00      	cmp	r3, #0
20006290:	d103      	bne.n	2000629a <I2C_write_read+0x5e>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
20006292:	68fb      	ldr	r3, [r7, #12]
20006294:	f04f 0203 	mov.w	r2, #3
20006298:	731a      	strb	r2, [r3, #12]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
2000629a:	68fb      	ldr	r3, [r7, #12]
2000629c:	f04f 0203 	mov.w	r2, #3
200062a0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200062a4:	7afb      	ldrb	r3, [r7, #11]
200062a6:	ea4f 0243 	mov.w	r2, r3, lsl #1
200062aa:	68fb      	ldr	r3, [r7, #12]
200062ac:	609a      	str	r2, [r3, #8]

        this_i2c->dir = WRITE_DIR;
200062ae:	68fb      	ldr	r3, [r7, #12]
200062b0:	f04f 0200 	mov.w	r2, #0
200062b4:	625a      	str	r2, [r3, #36]	; 0x24

        this_i2c->master_tx_buffer = addr_offset;
200062b6:	68fb      	ldr	r3, [r7, #12]
200062b8:	687a      	ldr	r2, [r7, #4]
200062ba:	619a      	str	r2, [r3, #24]
        this_i2c->master_tx_size = offset_size;
200062bc:	887a      	ldrh	r2, [r7, #2]
200062be:	68fb      	ldr	r3, [r7, #12]
200062c0:	61da      	str	r2, [r3, #28]
        this_i2c->master_tx_idx = 0u;
200062c2:	68fb      	ldr	r3, [r7, #12]
200062c4:	f04f 0200 	mov.w	r2, #0
200062c8:	621a      	str	r2, [r3, #32]

        this_i2c->master_rx_buffer = read_buffer;
200062ca:	68fb      	ldr	r3, [r7, #12]
200062cc:	6a3a      	ldr	r2, [r7, #32]
200062ce:	629a      	str	r2, [r3, #40]	; 0x28
        this_i2c->master_rx_size = read_size;
200062d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
200062d2:	68fb      	ldr	r3, [r7, #12]
200062d4:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_rx_idx = 0u;
200062d6:	68fb      	ldr	r3, [r7, #12]
200062d8:	f04f 0200 	mov.w	r2, #0
200062dc:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Set I2C status in progress */
        this_i2c->master_status = I2C_IN_PROGRESS;
200062de:	68fb      	ldr	r3, [r7, #12]
200062e0:	f04f 0201 	mov.w	r2, #1
200062e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        this_i2c->options = options;
200062e8:	68fb      	ldr	r3, [r7, #12]
200062ea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
200062ee:	751a      	strb	r2, [r3, #20]
        
        if(I2C_IN_PROGRESS == this_i2c->slave_status)
200062f0:	68fb      	ldr	r3, [r7, #12]
200062f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200062f6:	b2db      	uxtb	r3, r3
200062f8:	2b01      	cmp	r3, #1
200062fa:	d105      	bne.n	20006308 <I2C_write_read+0xcc>
        {
            this_i2c->is_transaction_pending = 1u;
200062fc:	68fb      	ldr	r3, [r7, #12]
200062fe:	f04f 0201 	mov.w	r2, #1
20006302:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006306:	e00a      	b.n	2000631e <I2C_write_read+0xe2>
        }
        else
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006308:	68fb      	ldr	r3, [r7, #12]
2000630a:	681b      	ldr	r3, [r3, #0]
2000630c:	4618      	mov	r0, r3
2000630e:	f04f 0105 	mov.w	r1, #5
20006312:	f04f 0220 	mov.w	r2, #32
20006316:	f04f 0301 	mov.w	r3, #1
2000631a:	f001 f864 	bl	200073e6 <HW_set_8bit_reg_field>
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( I2C_HOLD_BUS == this_i2c->bus_status )
2000631e:	68fb      	ldr	r3, [r7, #12]
20006320:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20006324:	2b01      	cmp	r3, #1
20006326:	d10a      	bne.n	2000633e <I2C_write_read+0x102>
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006328:	68fb      	ldr	r3, [r7, #12]
2000632a:	681b      	ldr	r3, [r3, #0]
2000632c:	4618      	mov	r0, r3
2000632e:	f04f 0103 	mov.w	r1, #3
20006332:	f04f 0208 	mov.w	r2, #8
20006336:	f04f 0300 	mov.w	r3, #0
2000633a:	f001 f854 	bl	200073e6 <HW_set_8bit_reg_field>
        }

        stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
2000633e:	68fb      	ldr	r3, [r7, #12]
20006340:	681b      	ldr	r3, [r3, #0]
20006342:	f103 0304 	add.w	r3, r3, #4
20006346:	4618      	mov	r0, r3
20006348:	f001 f84b 	bl	200073e2 <HW_get_8bit_reg>
2000634c:	4603      	mov	r3, r0
2000634e:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20006350:	7cfb      	ldrb	r3, [r7, #19]
20006352:	b2db      	uxtb	r3, r3
20006354:	74fb      	strb	r3, [r7, #19]
            
        /* Enable the interrupt. ( Re-enable) */
        I2C_enable_irq( this_i2c );
20006356:	68f8      	ldr	r0, [r7, #12]
20006358:	f000 fdc0 	bl	20006edc <I2C_enable_irq>

        HAL_restore_interrupts( saved_psr );
2000635c:	6978      	ldr	r0, [r7, #20]
2000635e:	f001 f80b 	bl	20007378 <HAL_restore_interrupts>
    }
}
20006362:	f107 0718 	add.w	r7, r7, #24
20006366:	46bd      	mov	sp, r7
20006368:	bd80      	pop	{r7, pc}
2000636a:	bf00      	nop

2000636c <I2C_wait_complete>:
i2c_status_t I2C_wait_complete
(
    i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
2000636c:	b580      	push	{r7, lr}
2000636e:	b084      	sub	sp, #16
20006370:	af00      	add	r7, sp, #0
20006372:	6078      	str	r0, [r7, #4]
20006374:	6039      	str	r1, [r7, #0]
     * Because we have no idea of what CPU we are supposed to be running on
     * we need to guard this write to the timeout value to avoid ISR/user code
     * interaction issues. Checking the status below should be fine as only a
     * single byte should change in that.
     */
    saved_psr = HAL_disable_interrupts();
20006376:	f000 fffb 	bl	20007370 <HAL_disable_interrupts>
2000637a:	4603      	mov	r3, r0
2000637c:	60fb      	str	r3, [r7, #12]
    this_i2c->master_timeout_ms = timeout_ms;
2000637e:	687b      	ldr	r3, [r7, #4]
20006380:	683a      	ldr	r2, [r7, #0]
20006382:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_restore_interrupts( saved_psr );
20006384:	68f8      	ldr	r0, [r7, #12]
20006386:	f000 fff7 	bl	20007378 <HAL_restore_interrupts>

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
2000638a:	687b      	ldr	r3, [r7, #4]
2000638c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006390:	72fb      	strb	r3, [r7, #11]
    } while(I2C_IN_PROGRESS == i2c_status);
20006392:	7afb      	ldrb	r3, [r7, #11]
20006394:	2b01      	cmp	r3, #1
20006396:	d0f8      	beq.n	2000638a <I2C_wait_complete+0x1e>
    return i2c_status;
20006398:	7afb      	ldrb	r3, [r7, #11]
}
2000639a:	4618      	mov	r0, r3
2000639c:	f107 0710 	add.w	r7, r7, #16
200063a0:	46bd      	mov	sp, r7
200063a2:	bd80      	pop	{r7, pc}

200063a4 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    i2c_instance_t * this_i2c
)
{
200063a4:	b580      	push	{r7, lr}
200063a6:	b082      	sub	sp, #8
200063a8:	af00      	add	r7, sp, #0
200063aa:	6078      	str	r0, [r7, #4]
    /*
     * This function is only called from within the ISR and so does not need
     * guarding on the register access.
     */
    if( 0 != this_i2c->is_slave_enabled )
200063ac:	687b      	ldr	r3, [r7, #4]
200063ae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
200063b2:	2b00      	cmp	r3, #0
200063b4:	d00a      	beq.n	200063cc <enable_slave_if_required+0x28>
    {
        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
200063b6:	687b      	ldr	r3, [r7, #4]
200063b8:	681b      	ldr	r3, [r3, #0]
200063ba:	4618      	mov	r0, r3
200063bc:	f04f 0102 	mov.w	r1, #2
200063c0:	f04f 0204 	mov.w	r2, #4
200063c4:	f04f 0301 	mov.w	r3, #1
200063c8:	f001 f80d 	bl	200073e6 <HW_set_8bit_reg_field>
    }
}
200063cc:	f107 0708 	add.w	r7, r7, #8
200063d0:	46bd      	mov	sp, r7
200063d2:	bd80      	pop	{r7, pc}

200063d4 <I2C_isr>:
 */
void I2C_isr
(
    i2c_instance_t * this_i2c
)
{
200063d4:	b5b0      	push	{r4, r5, r7, lr}
200063d6:	b084      	sub	sp, #16
200063d8:	af00      	add	r7, sp, #0
200063da:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
200063dc:	f04f 0301 	mov.w	r3, #1
200063e0:	73bb      	strb	r3, [r7, #14]

    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
200063e2:	687b      	ldr	r3, [r7, #4]
200063e4:	681b      	ldr	r3, [r3, #0]
200063e6:	f103 0304 	add.w	r3, r3, #4
200063ea:	4618      	mov	r0, r3
200063ec:	f000 fff9 	bl	200073e2 <HW_get_8bit_reg>
200063f0:	4603      	mov	r3, r0
200063f2:	72fb      	strb	r3, [r7, #11]
    
    switch( status )
200063f4:	7afb      	ldrb	r3, [r7, #11]
200063f6:	b2db      	uxtb	r3, r3
200063f8:	f1a3 0308 	sub.w	r3, r3, #8
200063fc:	2bd8      	cmp	r3, #216	; 0xd8
200063fe:	f200 84e3 	bhi.w	20006dc8 <I2C_isr+0x9f4>
20006402:	a201      	add	r2, pc, #4	; (adr r2, 20006408 <I2C_isr+0x34>)
20006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20006408:	2000676d 	.word	0x2000676d
2000640c:	20006dc9 	.word	0x20006dc9
20006410:	20006dc9 	.word	0x20006dc9
20006414:	20006dc9 	.word	0x20006dc9
20006418:	20006dc9 	.word	0x20006dc9
2000641c:	20006dc9 	.word	0x20006dc9
20006420:	20006dc9 	.word	0x20006dc9
20006424:	20006dc9 	.word	0x20006dc9
20006428:	2000676d 	.word	0x2000676d
2000642c:	20006dc9 	.word	0x20006dc9
20006430:	20006dc9 	.word	0x20006dc9
20006434:	20006dc9 	.word	0x20006dc9
20006438:	20006dc9 	.word	0x20006dc9
2000643c:	20006dc9 	.word	0x20006dc9
20006440:	20006dc9 	.word	0x20006dc9
20006444:	20006dc9 	.word	0x20006dc9
20006448:	20006843 	.word	0x20006843
2000644c:	20006dc9 	.word	0x20006dc9
20006450:	20006dc9 	.word	0x20006dc9
20006454:	20006dc9 	.word	0x20006dc9
20006458:	20006dc9 	.word	0x20006dc9
2000645c:	20006dc9 	.word	0x20006dc9
20006460:	20006dc9 	.word	0x20006dc9
20006464:	20006dc9 	.word	0x20006dc9
20006468:	20006813 	.word	0x20006813
2000646c:	20006dc9 	.word	0x20006dc9
20006470:	20006dc9 	.word	0x20006dc9
20006474:	20006dc9 	.word	0x20006dc9
20006478:	20006dc9 	.word	0x20006dc9
2000647c:	20006dc9 	.word	0x20006dc9
20006480:	20006dc9 	.word	0x20006dc9
20006484:	20006dc9 	.word	0x20006dc9
20006488:	20006843 	.word	0x20006843
2000648c:	20006dc9 	.word	0x20006dc9
20006490:	20006dc9 	.word	0x20006dc9
20006494:	20006dc9 	.word	0x20006dc9
20006498:	20006dc9 	.word	0x20006dc9
2000649c:	20006dc9 	.word	0x20006dc9
200064a0:	20006dc9 	.word	0x20006dc9
200064a4:	20006dc9 	.word	0x20006dc9
200064a8:	200068f3 	.word	0x200068f3
200064ac:	20006dc9 	.word	0x20006dc9
200064b0:	20006dc9 	.word	0x20006dc9
200064b4:	20006dc9 	.word	0x20006dc9
200064b8:	20006dc9 	.word	0x20006dc9
200064bc:	20006dc9 	.word	0x20006dc9
200064c0:	20006dc9 	.word	0x20006dc9
200064c4:	20006dc9 	.word	0x20006dc9
200064c8:	200067fb 	.word	0x200067fb
200064cc:	20006dc9 	.word	0x20006dc9
200064d0:	20006dc9 	.word	0x20006dc9
200064d4:	20006dc9 	.word	0x20006dc9
200064d8:	20006dc9 	.word	0x20006dc9
200064dc:	20006dc9 	.word	0x20006dc9
200064e0:	20006dc9 	.word	0x20006dc9
200064e4:	20006dc9 	.word	0x20006dc9
200064e8:	20006923 	.word	0x20006923
200064ec:	20006dc9 	.word	0x20006dc9
200064f0:	20006dc9 	.word	0x20006dc9
200064f4:	20006dc9 	.word	0x20006dc9
200064f8:	20006dc9 	.word	0x20006dc9
200064fc:	20006dc9 	.word	0x20006dc9
20006500:	20006dc9 	.word	0x20006dc9
20006504:	20006dc9 	.word	0x20006dc9
20006508:	200069a3 	.word	0x200069a3
2000650c:	20006dc9 	.word	0x20006dc9
20006510:	20006dc9 	.word	0x20006dc9
20006514:	20006dc9 	.word	0x20006dc9
20006518:	20006dc9 	.word	0x20006dc9
2000651c:	20006dc9 	.word	0x20006dc9
20006520:	20006dc9 	.word	0x20006dc9
20006524:	20006dc9 	.word	0x20006dc9
20006528:	200069d3 	.word	0x200069d3
2000652c:	20006dc9 	.word	0x20006dc9
20006530:	20006dc9 	.word	0x20006dc9
20006534:	20006dc9 	.word	0x20006dc9
20006538:	20006dc9 	.word	0x20006dc9
2000653c:	20006dc9 	.word	0x20006dc9
20006540:	20006dc9 	.word	0x20006dc9
20006544:	20006dc9 	.word	0x20006dc9
20006548:	20006a23 	.word	0x20006a23
2000654c:	20006dc9 	.word	0x20006dc9
20006550:	20006dc9 	.word	0x20006dc9
20006554:	20006dc9 	.word	0x20006dc9
20006558:	20006dc9 	.word	0x20006dc9
2000655c:	20006dc9 	.word	0x20006dc9
20006560:	20006dc9 	.word	0x20006dc9
20006564:	20006dc9 	.word	0x20006dc9
20006568:	20006aed 	.word	0x20006aed
2000656c:	20006dc9 	.word	0x20006dc9
20006570:	20006dc9 	.word	0x20006dc9
20006574:	20006dc9 	.word	0x20006dc9
20006578:	20006dc9 	.word	0x20006dc9
2000657c:	20006dc9 	.word	0x20006dc9
20006580:	20006dc9 	.word	0x20006dc9
20006584:	20006dc9 	.word	0x20006dc9
20006588:	20006ae3 	.word	0x20006ae3
2000658c:	20006dc9 	.word	0x20006dc9
20006590:	20006dc9 	.word	0x20006dc9
20006594:	20006dc9 	.word	0x20006dc9
20006598:	20006dc9 	.word	0x20006dc9
2000659c:	20006dc9 	.word	0x20006dc9
200065a0:	20006dc9 	.word	0x20006dc9
200065a4:	20006dc9 	.word	0x20006dc9
200065a8:	20006aed 	.word	0x20006aed
200065ac:	20006dc9 	.word	0x20006dc9
200065b0:	20006dc9 	.word	0x20006dc9
200065b4:	20006dc9 	.word	0x20006dc9
200065b8:	20006dc9 	.word	0x20006dc9
200065bc:	20006dc9 	.word	0x20006dc9
200065c0:	20006dc9 	.word	0x20006dc9
200065c4:	20006dc9 	.word	0x20006dc9
200065c8:	20006ae3 	.word	0x20006ae3
200065cc:	20006dc9 	.word	0x20006dc9
200065d0:	20006dc9 	.word	0x20006dc9
200065d4:	20006dc9 	.word	0x20006dc9
200065d8:	20006dc9 	.word	0x20006dc9
200065dc:	20006dc9 	.word	0x20006dc9
200065e0:	20006dc9 	.word	0x20006dc9
200065e4:	20006dc9 	.word	0x20006dc9
200065e8:	20006b49 	.word	0x20006b49
200065ec:	20006dc9 	.word	0x20006dc9
200065f0:	20006dc9 	.word	0x20006dc9
200065f4:	20006dc9 	.word	0x20006dc9
200065f8:	20006dc9 	.word	0x20006dc9
200065fc:	20006dc9 	.word	0x20006dc9
20006600:	20006dc9 	.word	0x20006dc9
20006604:	20006dc9 	.word	0x20006dc9
20006608:	20006a97 	.word	0x20006a97
2000660c:	20006dc9 	.word	0x20006dc9
20006610:	20006dc9 	.word	0x20006dc9
20006614:	20006dc9 	.word	0x20006dc9
20006618:	20006dc9 	.word	0x20006dc9
2000661c:	20006dc9 	.word	0x20006dc9
20006620:	20006dc9 	.word	0x20006dc9
20006624:	20006dc9 	.word	0x20006dc9
20006628:	20006b49 	.word	0x20006b49
2000662c:	20006dc9 	.word	0x20006dc9
20006630:	20006dc9 	.word	0x20006dc9
20006634:	20006dc9 	.word	0x20006dc9
20006638:	20006dc9 	.word	0x20006dc9
2000663c:	20006dc9 	.word	0x20006dc9
20006640:	20006dc9 	.word	0x20006dc9
20006644:	20006dc9 	.word	0x20006dc9
20006648:	20006a97 	.word	0x20006a97
2000664c:	20006dc9 	.word	0x20006dc9
20006650:	20006dc9 	.word	0x20006dc9
20006654:	20006dc9 	.word	0x20006dc9
20006658:	20006dc9 	.word	0x20006dc9
2000665c:	20006dc9 	.word	0x20006dc9
20006660:	20006dc9 	.word	0x20006dc9
20006664:	20006dc9 	.word	0x20006dc9
20006668:	20006bbb 	.word	0x20006bbb
2000666c:	20006dc9 	.word	0x20006dc9
20006670:	20006dc9 	.word	0x20006dc9
20006674:	20006dc9 	.word	0x20006dc9
20006678:	20006dc9 	.word	0x20006dc9
2000667c:	20006dc9 	.word	0x20006dc9
20006680:	20006dc9 	.word	0x20006dc9
20006684:	20006dc9 	.word	0x20006dc9
20006688:	20006cad 	.word	0x20006cad
2000668c:	20006dc9 	.word	0x20006dc9
20006690:	20006dc9 	.word	0x20006dc9
20006694:	20006dc9 	.word	0x20006dc9
20006698:	20006dc9 	.word	0x20006dc9
2000669c:	20006dc9 	.word	0x20006dc9
200066a0:	20006dc9 	.word	0x20006dc9
200066a4:	20006dc9 	.word	0x20006dc9
200066a8:	20006cad 	.word	0x20006cad
200066ac:	20006dc9 	.word	0x20006dc9
200066b0:	20006dc9 	.word	0x20006dc9
200066b4:	20006dc9 	.word	0x20006dc9
200066b8:	20006dc9 	.word	0x20006dc9
200066bc:	20006dc9 	.word	0x20006dc9
200066c0:	20006dc9 	.word	0x20006dc9
200066c4:	20006dc9 	.word	0x20006dc9
200066c8:	20006cad 	.word	0x20006cad
200066cc:	20006dc9 	.word	0x20006dc9
200066d0:	20006dc9 	.word	0x20006dc9
200066d4:	20006dc9 	.word	0x20006dc9
200066d8:	20006dc9 	.word	0x20006dc9
200066dc:	20006dc9 	.word	0x20006dc9
200066e0:	20006dc9 	.word	0x20006dc9
200066e4:	20006dc9 	.word	0x20006dc9
200066e8:	20006d77 	.word	0x20006d77
200066ec:	20006dc9 	.word	0x20006dc9
200066f0:	20006dc9 	.word	0x20006dc9
200066f4:	20006dc9 	.word	0x20006dc9
200066f8:	20006dc9 	.word	0x20006dc9
200066fc:	20006dc9 	.word	0x20006dc9
20006700:	20006dc9 	.word	0x20006dc9
20006704:	20006dc9 	.word	0x20006dc9
20006708:	20006d77 	.word	0x20006d77
2000670c:	20006dc9 	.word	0x20006dc9
20006710:	20006dc9 	.word	0x20006dc9
20006714:	20006dc9 	.word	0x20006dc9
20006718:	20006dc9 	.word	0x20006dc9
2000671c:	20006dc9 	.word	0x20006dc9
20006720:	20006dc9 	.word	0x20006dc9
20006724:	20006dc9 	.word	0x20006dc9
20006728:	20006dc9 	.word	0x20006dc9
2000672c:	20006dc9 	.word	0x20006dc9
20006730:	20006dc9 	.word	0x20006dc9
20006734:	20006dc9 	.word	0x20006dc9
20006738:	20006dc9 	.word	0x20006dc9
2000673c:	20006dc9 	.word	0x20006dc9
20006740:	20006dc9 	.word	0x20006dc9
20006744:	20006dc9 	.word	0x20006dc9
20006748:	20006c7f 	.word	0x20006c7f
2000674c:	20006dc9 	.word	0x20006dc9
20006750:	20006dc9 	.word	0x20006dc9
20006754:	20006dc9 	.word	0x20006dc9
20006758:	20006dc9 	.word	0x20006dc9
2000675c:	20006dc9 	.word	0x20006dc9
20006760:	20006dc9 	.word	0x20006dc9
20006764:	20006dc9 	.word	0x20006dc9
20006768:	20006e1d 	.word	0x20006e1d
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            HAL_set_8bit_reg_field( this_i2c->base_address, STA, 0x00u);
2000676c:	687b      	ldr	r3, [r7, #4]
2000676e:	681b      	ldr	r3, [r3, #0]
20006770:	4618      	mov	r0, r3
20006772:	f04f 0105 	mov.w	r1, #5
20006776:	f04f 0220 	mov.w	r2, #32
2000677a:	f04f 0300 	mov.w	r3, #0
2000677e:	f000 fe32 	bl	200073e6 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg( this_i2c->base_address, DATA, this_i2c->target_addr); /* write call address */
20006782:	687b      	ldr	r3, [r7, #4]
20006784:	681b      	ldr	r3, [r3, #0]
20006786:	f103 0208 	add.w	r2, r3, #8
2000678a:	687b      	ldr	r3, [r7, #4]
2000678c:	689b      	ldr	r3, [r3, #8]
2000678e:	4610      	mov	r0, r2
20006790:	4619      	mov	r1, r3
20006792:	f000 fe24 	bl	200073de <HW_set_8bit_reg>
            HAL_set_8bit_reg_field( this_i2c->base_address, DIR, this_i2c->dir); /* set direction bit */
20006796:	687b      	ldr	r3, [r7, #4]
20006798:	681b      	ldr	r3, [r3, #0]
2000679a:	f103 0208 	add.w	r2, r3, #8
2000679e:	687b      	ldr	r3, [r7, #4]
200067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200067a2:	4610      	mov	r0, r2
200067a4:	f04f 0100 	mov.w	r1, #0
200067a8:	f04f 0201 	mov.w	r2, #1
200067ac:	f000 fe1b 	bl	200073e6 <HW_set_8bit_reg_field>
            if(this_i2c->dir == WRITE_DIR)
200067b0:	687b      	ldr	r3, [r7, #4]
200067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200067b4:	2b00      	cmp	r3, #0
200067b6:	d104      	bne.n	200067c2 <I2C_isr+0x3ee>
            {
                 this_i2c->master_tx_idx = 0u;
200067b8:	687b      	ldr	r3, [r7, #4]
200067ba:	f04f 0200 	mov.w	r2, #0
200067be:	621a      	str	r2, [r3, #32]
200067c0:	e003      	b.n	200067ca <I2C_isr+0x3f6>
            }
            else
            {
                 this_i2c->master_rx_idx = 0u;
200067c2:	687b      	ldr	r3, [r7, #4]
200067c4:	f04f 0200 	mov.w	r2, #0
200067c8:	631a      	str	r2, [r3, #48]	; 0x30
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
200067ca:	687b      	ldr	r3, [r7, #4]
200067cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200067d0:	2b00      	cmp	r3, #0
200067d2:	d004      	beq.n	200067de <I2C_isr+0x40a>
            {
                this_i2c->is_transaction_pending = 0u;
200067d4:	687b      	ldr	r3, [r7, #4]
200067d6:	f04f 0200 	mov.w	r2, #0
200067da:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
200067de:	687b      	ldr	r3, [r7, #4]
200067e0:	7b1a      	ldrb	r2, [r3, #12]
200067e2:	687b      	ldr	r3, [r7, #4]
200067e4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
200067e8:	429a      	cmp	r2, r3
200067ea:	f000 8319 	beq.w	20006e20 <I2C_isr+0xa4c>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
200067ee:	687b      	ldr	r3, [r7, #4]
200067f0:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
200067f4:	687b      	ldr	r3, [r7, #4]
200067f6:	731a      	strb	r2, [r3, #12]
            }
            break;
200067f8:	e31b      	b.n	20006e32 <I2C_isr+0xa5e>
            
        case ST_LOST_ARB:
              /* Set start bit.  Let's keep trying!  Don't give up! */
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200067fa:	687b      	ldr	r3, [r7, #4]
200067fc:	681b      	ldr	r3, [r3, #0]
200067fe:	4618      	mov	r0, r3
20006800:	f04f 0105 	mov.w	r1, #5
20006804:	f04f 0220 	mov.w	r2, #32
20006808:	f04f 0301 	mov.w	r3, #1
2000680c:	f000 fdeb 	bl	200073e6 <HW_set_8bit_reg_field>
              break;
20006810:	e30f      	b.n	20006e32 <I2C_isr+0xa5e>
              break;

        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20006812:	687b      	ldr	r3, [r7, #4]
20006814:	681b      	ldr	r3, [r3, #0]
20006816:	4618      	mov	r0, r3
20006818:	f04f 0104 	mov.w	r1, #4
2000681c:	f04f 0210 	mov.w	r2, #16
20006820:	f04f 0301 	mov.w	r3, #1
20006824:	f000 fddf 	bl	200073e6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20006828:	687b      	ldr	r3, [r7, #4]
2000682a:	f04f 0202 	mov.w	r2, #2
2000682e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            this_i2c->transaction = NO_TRANSACTION;
20006832:	687b      	ldr	r3, [r7, #4]
20006834:	f04f 0200 	mov.w	r2, #0
20006838:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
2000683a:	6878      	ldr	r0, [r7, #4]
2000683c:	f7ff fdb2 	bl	200063a4 <enable_slave_if_required>
            break;
20006840:	e2f7      	b.n	20006e32 <I2C_isr+0xa5e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20006842:	687b      	ldr	r3, [r7, #4]
20006844:	6a1a      	ldr	r2, [r3, #32]
20006846:	687b      	ldr	r3, [r7, #4]
20006848:	69db      	ldr	r3, [r3, #28]
2000684a:	429a      	cmp	r2, r3
2000684c:	d212      	bcs.n	20006874 <I2C_isr+0x4a0>
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
2000684e:	687b      	ldr	r3, [r7, #4]
20006850:	681b      	ldr	r3, [r3, #0]
20006852:	f103 0108 	add.w	r1, r3, #8
20006856:	687b      	ldr	r3, [r7, #4]
20006858:	699a      	ldr	r2, [r3, #24]
2000685a:	687b      	ldr	r3, [r7, #4]
2000685c:	6a1b      	ldr	r3, [r3, #32]
2000685e:	441a      	add	r2, r3
20006860:	7812      	ldrb	r2, [r2, #0]
20006862:	f103 0001 	add.w	r0, r3, #1
20006866:	687b      	ldr	r3, [r7, #4]
20006868:	6218      	str	r0, [r3, #32]
2000686a:	4608      	mov	r0, r1
2000686c:	4611      	mov	r1, r2
2000686e:	f000 fdb6 	bl	200073de <HW_set_8bit_reg>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
20006872:	e2de      	b.n	20006e32 <I2C_isr+0xa5e>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20006874:	687b      	ldr	r3, [r7, #4]
20006876:	7b1b      	ldrb	r3, [r3, #12]
20006878:	2b03      	cmp	r3, #3
2000687a:	d10f      	bne.n	2000689c <I2C_isr+0x4c8>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
2000687c:	687b      	ldr	r3, [r7, #4]
2000687e:	f04f 0201 	mov.w	r2, #1
20006882:	625a      	str	r2, [r3, #36]	; 0x24
                 HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006884:	687b      	ldr	r3, [r7, #4]
20006886:	681b      	ldr	r3, [r3, #0]
20006888:	4618      	mov	r0, r3
2000688a:	f04f 0105 	mov.w	r1, #5
2000688e:	f04f 0220 	mov.w	r2, #32
20006892:	f04f 0301 	mov.w	r3, #1
20006896:	f000 fda6 	bl	200073e6 <HW_set_8bit_reg_field>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
2000689a:	e2ca      	b.n	20006e32 <I2C_isr+0xa5e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
2000689c:	687b      	ldr	r3, [r7, #4]
2000689e:	f04f 0200 	mov.w	r2, #0
200068a2:	731a      	strb	r2, [r3, #12]
                hold_bus = this_i2c->options & I2C_HOLD_BUS;
200068a4:	687b      	ldr	r3, [r7, #4]
200068a6:	7d1b      	ldrb	r3, [r3, #20]
200068a8:	f003 0301 	and.w	r3, r3, #1
200068ac:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
200068ae:	687b      	ldr	r3, [r7, #4]
200068b0:	7b7a      	ldrb	r2, [r7, #13]
200068b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                if ( hold_bus == 0u )
200068b6:	7b7b      	ldrb	r3, [r7, #13]
200068b8:	2b00      	cmp	r3, #0
200068ba:	d10e      	bne.n	200068da <I2C_isr+0x506>
                { 
                    HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
200068bc:	687b      	ldr	r3, [r7, #4]
200068be:	681b      	ldr	r3, [r3, #0]
200068c0:	4618      	mov	r0, r3
200068c2:	f04f 0104 	mov.w	r1, #4
200068c6:	f04f 0210 	mov.w	r2, #16
200068ca:	f04f 0301 	mov.w	r3, #1
200068ce:	f000 fd8a 	bl	200073e6 <HW_set_8bit_reg_field>
                    enable_slave_if_required(this_i2c);
200068d2:	6878      	ldr	r0, [r7, #4]
200068d4:	f7ff fd66 	bl	200063a4 <enable_slave_if_required>
200068d8:	e005      	b.n	200068e6 <I2C_isr+0x512>
                }
                else
                {
                    I2C_disable_irq( this_i2c );
200068da:	6878      	ldr	r0, [r7, #4]
200068dc:	f000 fb48 	bl	20006f70 <I2C_disable_irq>
                    clear_irq = 0u;
200068e0:	f04f 0300 	mov.w	r3, #0
200068e4:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = I2C_SUCCESS;
200068e6:	687b      	ldr	r3, [r7, #4]
200068e8:	f04f 0200 	mov.w	r2, #0
200068ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }
            break;
200068f0:	e29f      	b.n	20006e32 <I2C_isr+0xa5e>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);/* xmt stop condition */
200068f2:	687b      	ldr	r3, [r7, #4]
200068f4:	681b      	ldr	r3, [r3, #0]
200068f6:	4618      	mov	r0, r3
200068f8:	f04f 0104 	mov.w	r1, #4
200068fc:	f04f 0210 	mov.w	r2, #16
20006900:	f04f 0301 	mov.w	r3, #1
20006904:	f000 fd6f 	bl	200073e6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20006908:	687b      	ldr	r3, [r7, #4]
2000690a:	f04f 0202 	mov.w	r2, #2
2000690e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006912:	687b      	ldr	r3, [r7, #4]
20006914:	f04f 0200 	mov.w	r2, #0
20006918:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
2000691a:	6878      	ldr	r0, [r7, #4]
2000691c:	f7ff fd42 	bl	200063a4 <enable_slave_if_required>
            break;
20006920:	e287      	b.n	20006e32 <I2C_isr+0xa5e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20006922:	687b      	ldr	r3, [r7, #4]
20006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006926:	2b01      	cmp	r3, #1
20006928:	d90b      	bls.n	20006942 <I2C_isr+0x56e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
2000692a:	687b      	ldr	r3, [r7, #4]
2000692c:	681b      	ldr	r3, [r3, #0]
2000692e:	4618      	mov	r0, r3
20006930:	f04f 0102 	mov.w	r1, #2
20006934:	f04f 0204 	mov.w	r2, #4
20006938:	f04f 0301 	mov.w	r3, #1
2000693c:	f000 fd53 	bl	200073e6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20006940:	e277      	b.n	20006e32 <I2C_isr+0xa5e>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
            }
            else if(1u == this_i2c->master_rx_size)
20006942:	687b      	ldr	r3, [r7, #4]
20006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006946:	2b01      	cmp	r3, #1
20006948:	d10b      	bne.n	20006962 <I2C_isr+0x58e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
2000694a:	687b      	ldr	r3, [r7, #4]
2000694c:	681b      	ldr	r3, [r3, #0]
2000694e:	4618      	mov	r0, r3
20006950:	f04f 0102 	mov.w	r1, #2
20006954:	f04f 0204 	mov.w	r2, #4
20006958:	f04f 0300 	mov.w	r3, #0
2000695c:	f000 fd43 	bl	200073e6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20006960:	e267      	b.n	20006e32 <I2C_isr+0xa5e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20006962:	687b      	ldr	r3, [r7, #4]
20006964:	681b      	ldr	r3, [r3, #0]
20006966:	4618      	mov	r0, r3
20006968:	f04f 0102 	mov.w	r1, #2
2000696c:	f04f 0204 	mov.w	r2, #4
20006970:	f04f 0301 	mov.w	r3, #1
20006974:	f000 fd37 	bl	200073e6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20006978:	687b      	ldr	r3, [r7, #4]
2000697a:	681b      	ldr	r3, [r3, #0]
2000697c:	4618      	mov	r0, r3
2000697e:	f04f 0104 	mov.w	r1, #4
20006982:	f04f 0210 	mov.w	r2, #16
20006986:	f04f 0301 	mov.w	r3, #1
2000698a:	f000 fd2c 	bl	200073e6 <HW_set_8bit_reg_field>
                this_i2c->master_status = I2C_SUCCESS;
2000698e:	687b      	ldr	r3, [r7, #4]
20006990:	f04f 0200 	mov.w	r2, #0
20006994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                this_i2c->transaction = NO_TRANSACTION;
20006998:	687b      	ldr	r3, [r7, #4]
2000699a:	f04f 0200 	mov.w	r2, #0
2000699e:	731a      	strb	r2, [r3, #12]
            }
            break;
200069a0:	e247      	b.n	20006e32 <I2C_isr+0xa5e>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
200069a2:	687b      	ldr	r3, [r7, #4]
200069a4:	681b      	ldr	r3, [r3, #0]
200069a6:	4618      	mov	r0, r3
200069a8:	f04f 0104 	mov.w	r1, #4
200069ac:	f04f 0210 	mov.w	r2, #16
200069b0:	f04f 0301 	mov.w	r3, #1
200069b4:	f000 fd17 	bl	200073e6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
200069b8:	687b      	ldr	r3, [r7, #4]
200069ba:	f04f 0202 	mov.w	r2, #2
200069be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200069c2:	687b      	ldr	r3, [r7, #4]
200069c4:	f04f 0200 	mov.w	r2, #0
200069c8:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
200069ca:	6878      	ldr	r0, [r7, #4]
200069cc:	f7ff fcea 	bl	200063a4 <enable_slave_if_required>
            break;
200069d0:	e22f      	b.n	20006e32 <I2C_isr+0xa5e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
200069d2:	687b      	ldr	r3, [r7, #4]
200069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200069d6:	687a      	ldr	r2, [r7, #4]
200069d8:	6b14      	ldr	r4, [r2, #48]	; 0x30
200069da:	eb03 0504 	add.w	r5, r3, r4
200069de:	687b      	ldr	r3, [r7, #4]
200069e0:	681b      	ldr	r3, [r3, #0]
200069e2:	f103 0308 	add.w	r3, r3, #8
200069e6:	4618      	mov	r0, r3
200069e8:	f000 fcfb 	bl	200073e2 <HW_get_8bit_reg>
200069ec:	4603      	mov	r3, r0
200069ee:	702b      	strb	r3, [r5, #0]
200069f0:	f104 0201 	add.w	r2, r4, #1
200069f4:	687b      	ldr	r3, [r7, #4]
200069f6:	631a      	str	r2, [r3, #48]	; 0x30
            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
200069f8:	687b      	ldr	r3, [r7, #4]
200069fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200069fc:	687b      	ldr	r3, [r7, #4]
200069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006a00:	f103 33ff 	add.w	r3, r3, #4294967295
20006a04:	429a      	cmp	r2, r3
20006a06:	f0c0 820d 	bcc.w	20006e24 <I2C_isr+0xa50>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
20006a0a:	687b      	ldr	r3, [r7, #4]
20006a0c:	681b      	ldr	r3, [r3, #0]
20006a0e:	4618      	mov	r0, r3
20006a10:	f04f 0102 	mov.w	r1, #2
20006a14:	f04f 0204 	mov.w	r2, #4
20006a18:	f04f 0300 	mov.w	r3, #0
20006a1c:	f000 fce3 	bl	200073e6 <HW_set_8bit_reg_field>
            }
            break;
20006a20:	e207      	b.n	20006e32 <I2C_isr+0xa5e>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20006a22:	687b      	ldr	r3, [r7, #4]
20006a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20006a26:	687b      	ldr	r3, [r7, #4]
20006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006a2a:	eb02 0403 	add.w	r4, r2, r3
20006a2e:	687b      	ldr	r3, [r7, #4]
20006a30:	681b      	ldr	r3, [r3, #0]
20006a32:	f103 0308 	add.w	r3, r3, #8
20006a36:	4618      	mov	r0, r3
20006a38:	f000 fcd3 	bl	200073e2 <HW_get_8bit_reg>
20006a3c:	4603      	mov	r3, r0
20006a3e:	7023      	strb	r3, [r4, #0]
          
            hold_bus = this_i2c->options & I2C_HOLD_BUS; 
20006a40:	687b      	ldr	r3, [r7, #4]
20006a42:	7d1b      	ldrb	r3, [r3, #20]
20006a44:	f003 0301 	and.w	r3, r3, #1
20006a48:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20006a4a:	687b      	ldr	r3, [r7, #4]
20006a4c:	7b7a      	ldrb	r2, [r7, #13]
20006a4e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            if ( hold_bus == 0u )
20006a52:	7b7b      	ldrb	r3, [r7, #13]
20006a54:	2b00      	cmp	r3, #0
20006a56:	d10e      	bne.n	20006a76 <I2C_isr+0x6a2>
            { 
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
20006a58:	687b      	ldr	r3, [r7, #4]
20006a5a:	681b      	ldr	r3, [r3, #0]
20006a5c:	4618      	mov	r0, r3
20006a5e:	f04f 0104 	mov.w	r1, #4
20006a62:	f04f 0210 	mov.w	r2, #16
20006a66:	f04f 0301 	mov.w	r3, #1
20006a6a:	f000 fcbc 	bl	200073e6 <HW_set_8bit_reg_field>

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20006a6e:	6878      	ldr	r0, [r7, #4]
20006a70:	f7ff fc98 	bl	200063a4 <enable_slave_if_required>
20006a74:	e005      	b.n	20006a82 <I2C_isr+0x6ae>
            }
            else
            {
                I2C_disable_irq( this_i2c );
20006a76:	6878      	ldr	r0, [r7, #4]
20006a78:	f000 fa7a 	bl	20006f70 <I2C_disable_irq>
                clear_irq = 0u;
20006a7c:	f04f 0300 	mov.w	r3, #0
20006a80:	73bb      	strb	r3, [r7, #14]
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006a82:	687b      	ldr	r3, [r7, #4]
20006a84:	f04f 0200 	mov.w	r2, #0
20006a88:	731a      	strb	r2, [r3, #12]
            this_i2c->master_status = I2C_SUCCESS;
20006a8a:	687b      	ldr	r3, [r7, #4]
20006a8c:	f04f 0200 	mov.w	r2, #0
20006a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            break;
20006a94:	e1cd      	b.n	20006e32 <I2C_isr+0xa5e>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20006a96:	687b      	ldr	r3, [r7, #4]
20006a98:	681b      	ldr	r3, [r3, #0]
20006a9a:	4618      	mov	r0, r3
20006a9c:	f04f 0102 	mov.w	r1, #2
20006aa0:	f04f 0204 	mov.w	r2, #4
20006aa4:	f04f 0301 	mov.w	r3, #1
20006aa8:	f000 fc9d 	bl	200073e6 <HW_set_8bit_reg_field>

            this_i2c->transaction = NO_TRANSACTION;
20006aac:	687b      	ldr	r3, [r7, #4]
20006aae:	f04f 0200 	mov.w	r2, #0
20006ab2:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_status = I2C_SUCCESS;
20006ab4:	687b      	ldr	r3, [r7, #4]
20006ab6:	f04f 0200 	mov.w	r2, #0
20006aba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006abe:	687b      	ldr	r3, [r7, #4]
20006ac0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006ac4:	2b00      	cmp	r3, #0
20006ac6:	f000 81af 	beq.w	20006e28 <I2C_isr+0xa54>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006aca:	687b      	ldr	r3, [r7, #4]
20006acc:	681b      	ldr	r3, [r3, #0]
20006ace:	4618      	mov	r0, r3
20006ad0:	f04f 0105 	mov.w	r1, #5
20006ad4:	f04f 0220 	mov.w	r2, #32
20006ad8:	f04f 0301 	mov.w	r3, #1
20006adc:	f000 fc83 	bl	200073e6 <HW_set_8bit_reg_field>
            }
            break;
20006ae0:	e1a7      	b.n	20006e32 <I2C_isr+0xa5e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20006ae2:	687b      	ldr	r3, [r7, #4]
20006ae4:	f04f 0201 	mov.w	r2, #1
20006ae8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20006aec:	687b      	ldr	r3, [r7, #4]
20006aee:	f04f 0204 	mov.w	r2, #4
20006af2:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_rx_idx = 0u;
20006af4:	687b      	ldr	r3, [r7, #4]
20006af6:	f04f 0200 	mov.w	r2, #0
20006afa:	651a      	str	r2, [r3, #80]	; 0x50
            this_i2c->random_read_addr = 0u;
20006afc:	687b      	ldr	r3, [r7, #4]
20006afe:	f04f 0200 	mov.w	r2, #0
20006b02:	611a      	str	r2, [r3, #16]
            /*
             * If Start Bit is set clear it, but store that information since it is because of
             * pending transaction
             */
            if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20006b04:	687b      	ldr	r3, [r7, #4]
20006b06:	681b      	ldr	r3, [r3, #0]
20006b08:	4618      	mov	r0, r3
20006b0a:	f04f 0105 	mov.w	r1, #5
20006b0e:	f04f 0220 	mov.w	r2, #32
20006b12:	f000 fc76 	bl	20007402 <HW_get_8bit_reg_field>
20006b16:	4603      	mov	r3, r0
20006b18:	2b00      	cmp	r3, #0
20006b1a:	d00f      	beq.n	20006b3c <I2C_isr+0x768>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006b1c:	687b      	ldr	r3, [r7, #4]
20006b1e:	681b      	ldr	r3, [r3, #0]
20006b20:	4618      	mov	r0, r3
20006b22:	f04f 0105 	mov.w	r1, #5
20006b26:	f04f 0220 	mov.w	r2, #32
20006b2a:	f04f 0300 	mov.w	r3, #0
20006b2e:	f000 fc5a 	bl	200073e6 <HW_set_8bit_reg_field>
                this_i2c->is_transaction_pending = 1u;
20006b32:	687b      	ldr	r3, [r7, #4]
20006b34:	f04f 0201 	mov.w	r2, #1
20006b38:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }
            this_i2c->slave_status = I2C_IN_PROGRESS;
20006b3c:	687b      	ldr	r3, [r7, #4]
20006b3e:	f04f 0201 	mov.w	r2, #1
20006b42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20006b46:	e174      	b.n	20006e32 <I2C_isr+0xa5e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20006b48:	687b      	ldr	r3, [r7, #4]
20006b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20006b4c:	2b00      	cmp	r3, #0
20006b4e:	d021      	beq.n	20006b94 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20006b50:	687b      	ldr	r3, [r7, #4]
20006b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006b54:	687b      	ldr	r3, [r7, #4]
20006b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20006b58:	429a      	cmp	r2, r3
20006b5a:	d21b      	bcs.n	20006b94 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20006b5c:	687b      	ldr	r3, [r7, #4]
20006b5e:	681b      	ldr	r3, [r3, #0]
20006b60:	f103 0308 	add.w	r3, r3, #8
20006b64:	4618      	mov	r0, r3
20006b66:	f000 fc3c 	bl	200073e2 <HW_get_8bit_reg>
20006b6a:	4603      	mov	r3, r0
20006b6c:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20006b6e:	687b      	ldr	r3, [r7, #4]
20006b70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20006b72:	687b      	ldr	r3, [r7, #4]
20006b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20006b76:	441a      	add	r2, r3
20006b78:	7b39      	ldrb	r1, [r7, #12]
20006b7a:	7011      	strb	r1, [r2, #0]
20006b7c:	f103 0201 	add.w	r2, r3, #1
20006b80:	687b      	ldr	r3, [r7, #4]
20006b82:	651a      	str	r2, [r3, #80]	; 0x50
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20006b84:	687b      	ldr	r3, [r7, #4]
20006b86:	691b      	ldr	r3, [r3, #16]
20006b88:	ea4f 2203 	mov.w	r2, r3, lsl #8
20006b8c:	7b3b      	ldrb	r3, [r7, #12]
20006b8e:	441a      	add	r2, r3
20006b90:	687b      	ldr	r3, [r7, #4]
20006b92:	611a      	str	r2, [r3, #16]
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20006b94:	687b      	ldr	r3, [r7, #4]
20006b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006b98:	687b      	ldr	r3, [r7, #4]
20006b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20006b9c:	429a      	cmp	r2, r3
20006b9e:	f0c0 8145 	bcc.w	20006e2c <I2C_isr+0xa58>
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
20006ba2:	687b      	ldr	r3, [r7, #4]
20006ba4:	681b      	ldr	r3, [r3, #0]
20006ba6:	4618      	mov	r0, r3
20006ba8:	f04f 0102 	mov.w	r1, #2
20006bac:	f04f 0204 	mov.w	r2, #4
20006bb0:	f04f 0300 	mov.w	r3, #0
20006bb4:	f000 fc17 	bl	200073e6 <HW_set_8bit_reg_field>
            }
            break;
20006bb8:	e13b      	b.n	20006e32 <I2C_isr+0xa5e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20006bba:	687b      	ldr	r3, [r7, #4]
20006bbc:	7b1b      	ldrb	r3, [r3, #12]
20006bbe:	2b04      	cmp	r3, #4
20006bc0:	d13c      	bne.n	20006c3c <I2C_isr+0x868>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20006bc2:	687b      	ldr	r3, [r7, #4]
20006bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006bc6:	687b      	ldr	r3, [r7, #4]
20006bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20006bca:	429a      	cmp	r2, r3
20006bcc:	d103      	bne.n	20006bd6 <I2C_isr+0x802>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20006bce:	687b      	ldr	r3, [r7, #4]
20006bd0:	691a      	ldr	r2, [r3, #16]
20006bd2:	687b      	ldr	r3, [r7, #4]
20006bd4:	645a      	str	r2, [r3, #68]	; 0x44
                }
                /* Call the slave's write transaction handler if it exists. */
                if ( this_i2c->slave_write_handler != 0u )
20006bd6:	687b      	ldr	r3, [r7, #4]
20006bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006bda:	2b00      	cmp	r3, #0
20006bdc:	d022      	beq.n	20006c24 <I2C_isr+0x850>
                {
                    i2c_slave_handler_ret_t h_ret;
                    h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20006bde:	687b      	ldr	r3, [r7, #4]
20006be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006be2:	687a      	ldr	r2, [r7, #4]
20006be4:	6c91      	ldr	r1, [r2, #72]	; 0x48
20006be6:	687a      	ldr	r2, [r7, #4]
20006be8:	6d12      	ldr	r2, [r2, #80]	; 0x50
20006bea:	b292      	uxth	r2, r2
20006bec:	6878      	ldr	r0, [r7, #4]
20006bee:	4798      	blx	r3
20006bf0:	4603      	mov	r3, r0
20006bf2:	73fb      	strb	r3, [r7, #15]
                    if ( I2C_REENABLE_SLAVE_RX == h_ret )
20006bf4:	7bfb      	ldrb	r3, [r7, #15]
20006bf6:	2b00      	cmp	r3, #0
20006bf8:	d103      	bne.n	20006c02 <I2C_isr+0x82e>
                    {
                        /* There is a small risk that the write handler could
                         * call I2C_disable_slave() but return
                         * I2C_REENABLE_SLAVE_RX in error so we only enable
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
20006bfa:	6878      	ldr	r0, [r7, #4]
20006bfc:	f7ff fbd2 	bl	200063a4 <enable_slave_if_required>
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006c00:	e023      	b.n	20006c4a <I2C_isr+0x876>
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
                    }
                    else
                    {
                        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x0u );
20006c02:	687b      	ldr	r3, [r7, #4]
20006c04:	681b      	ldr	r3, [r3, #0]
20006c06:	4618      	mov	r0, r3
20006c08:	f04f 0102 	mov.w	r1, #2
20006c0c:	f04f 0204 	mov.w	r2, #4
20006c10:	f04f 0300 	mov.w	r3, #0
20006c14:	f000 fbe7 	bl	200073e6 <HW_set_8bit_reg_field>
                        /* Clear slave mode flag as well otherwise in mixed
                         * master/slave applications, the AA bit will get set by
                         * subsequent master operations. */
                        this_i2c->is_slave_enabled = 0u;
20006c18:	687b      	ldr	r3, [r7, #4]
20006c1a:	f04f 0200 	mov.w	r2, #0
20006c1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006c22:	e012      	b.n	20006c4a <I2C_isr+0x876>
20006c24:	687b      	ldr	r3, [r7, #4]
20006c26:	681b      	ldr	r3, [r3, #0]
20006c28:	4618      	mov	r0, r3
20006c2a:	f04f 0102 	mov.w	r1, #2
20006c2e:	f04f 0204 	mov.w	r2, #4
20006c32:	f04f 0301 	mov.w	r3, #1
20006c36:	f000 fbd6 	bl	200073e6 <HW_set_8bit_reg_field>
20006c3a:	e006      	b.n	20006c4a <I2C_isr+0x876>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20006c3c:	687b      	ldr	r3, [r7, #4]
20006c3e:	f04f 0200 	mov.w	r2, #0
20006c42:	645a      	str	r2, [r3, #68]	; 0x44
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20006c44:	6878      	ldr	r0, [r7, #4]
20006c46:	f7ff fbad 	bl	200063a4 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = I2C_SUCCESS;
20006c4a:	687b      	ldr	r3, [r7, #4]
20006c4c:	f04f 0200 	mov.w	r2, #0
20006c50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006c54:	687b      	ldr	r3, [r7, #4]
20006c56:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006c5a:	2b00      	cmp	r3, #0
20006c5c:	d00a      	beq.n	20006c74 <I2C_isr+0x8a0>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006c5e:	687b      	ldr	r3, [r7, #4]
20006c60:	681b      	ldr	r3, [r3, #0]
20006c62:	4618      	mov	r0, r3
20006c64:	f04f 0105 	mov.w	r1, #5
20006c68:	f04f 0220 	mov.w	r2, #32
20006c6c:	f04f 0301 	mov.w	r3, #1
20006c70:	f000 fbb9 	bl	200073e6 <HW_set_8bit_reg_field>

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006c74:	687b      	ldr	r3, [r7, #4]
20006c76:	f04f 0200 	mov.w	r2, #0
20006c7a:	731a      	strb	r2, [r3, #12]

            break;
20006c7c:	e0d9      	b.n	20006e32 <I2C_isr+0xa5e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20006c7e:	687b      	ldr	r3, [r7, #4]
20006c80:	f04f 0200 	mov.w	r2, #0
20006c84:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20006c86:	687b      	ldr	r3, [r7, #4]
20006c88:	f04f 0200 	mov.w	r2, #0
20006c8c:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006c8e:	687b      	ldr	r3, [r7, #4]
20006c90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006c94:	b2db      	uxtb	r3, r3
20006c96:	2b01      	cmp	r3, #1
20006c98:	d104      	bne.n	20006ca4 <I2C_isr+0x8d0>
            {
                this_i2c->slave_status = I2C_FAILED;
20006c9a:	687b      	ldr	r3, [r7, #4]
20006c9c:	f04f 0202 	mov.w	r2, #2
20006ca0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20006ca4:	6878      	ldr	r0, [r7, #4]
20006ca6:	f7ff fb7d 	bl	200063a4 <enable_slave_if_required>

            break;
20006caa:	e0c2      	b.n	20006e32 <I2C_isr+0xa5e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:       /* Arbitration lost, and: */
        case ST_RACK:           /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20006cac:	7afb      	ldrb	r3, [r7, #11]
20006cae:	b2db      	uxtb	r3, r3
20006cb0:	2ba8      	cmp	r3, #168	; 0xa8
20006cb2:	d128      	bne.n	20006d06 <I2C_isr+0x932>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20006cb4:	687b      	ldr	r3, [r7, #4]
20006cb6:	f04f 0205 	mov.w	r2, #5
20006cba:	731a      	strb	r2, [r3, #12]
                this_i2c->random_read_addr = 0u;
20006cbc:	687b      	ldr	r3, [r7, #4]
20006cbe:	f04f 0200 	mov.w	r2, #0
20006cc2:	611a      	str	r2, [r3, #16]
                this_i2c->slave_status = I2C_IN_PROGRESS;
20006cc4:	687b      	ldr	r3, [r7, #4]
20006cc6:	f04f 0201 	mov.w	r2, #1
20006cca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
                /* If Start Bit is set clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20006cce:	687b      	ldr	r3, [r7, #4]
20006cd0:	681b      	ldr	r3, [r3, #0]
20006cd2:	4618      	mov	r0, r3
20006cd4:	f04f 0105 	mov.w	r1, #5
20006cd8:	f04f 0220 	mov.w	r2, #32
20006cdc:	f000 fb91 	bl	20007402 <HW_get_8bit_reg_field>
20006ce0:	4603      	mov	r3, r0
20006ce2:	2b00      	cmp	r3, #0
20006ce4:	d00f      	beq.n	20006d06 <I2C_isr+0x932>
                {
                    HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006ce6:	687b      	ldr	r3, [r7, #4]
20006ce8:	681b      	ldr	r3, [r3, #0]
20006cea:	4618      	mov	r0, r3
20006cec:	f04f 0105 	mov.w	r1, #5
20006cf0:	f04f 0220 	mov.w	r2, #32
20006cf4:	f04f 0300 	mov.w	r3, #0
20006cf8:	f000 fb75 	bl	200073e6 <HW_set_8bit_reg_field>
                    this_i2c->is_transaction_pending = 1u;
20006cfc:	687b      	ldr	r3, [r7, #4]
20006cfe:	f04f 0201 	mov.w	r2, #1
20006d02:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                 }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20006d06:	687b      	ldr	r3, [r7, #4]
20006d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006d0a:	687b      	ldr	r3, [r7, #4]
20006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006d0e:	429a      	cmp	r2, r3
20006d10:	d309      	bcc.n	20006d26 <I2C_isr+0x952>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, 0xFFu);
20006d12:	687b      	ldr	r3, [r7, #4]
20006d14:	681b      	ldr	r3, [r3, #0]
20006d16:	f103 0308 	add.w	r3, r3, #8
20006d1a:	4618      	mov	r0, r3
20006d1c:	f04f 01ff 	mov.w	r1, #255	; 0xff
20006d20:	f000 fb5d 	bl	200073de <HW_set_8bit_reg>
20006d24:	e011      	b.n	20006d4a <I2C_isr+0x976>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++]);
20006d26:	687b      	ldr	r3, [r7, #4]
20006d28:	681b      	ldr	r3, [r3, #0]
20006d2a:	f103 0108 	add.w	r1, r3, #8
20006d2e:	687b      	ldr	r3, [r7, #4]
20006d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
20006d32:	687b      	ldr	r3, [r7, #4]
20006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006d36:	441a      	add	r2, r3
20006d38:	7812      	ldrb	r2, [r2, #0]
20006d3a:	f103 0001 	add.w	r0, r3, #1
20006d3e:	687b      	ldr	r3, [r7, #4]
20006d40:	6458      	str	r0, [r3, #68]	; 0x44
20006d42:	4608      	mov	r0, r1
20006d44:	4611      	mov	r1, r2
20006d46:	f000 fb4a 	bl	200073de <HW_set_8bit_reg>
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20006d4a:	687b      	ldr	r3, [r7, #4]
20006d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006d4e:	687b      	ldr	r3, [r7, #4]
20006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006d52:	429a      	cmp	r2, r3
20006d54:	d36c      	bcc.n	20006e30 <I2C_isr+0xa5c>
            {
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
20006d56:	687b      	ldr	r3, [r7, #4]
20006d58:	681b      	ldr	r3, [r3, #0]
20006d5a:	4618      	mov	r0, r3
20006d5c:	f04f 0102 	mov.w	r1, #2
20006d60:	f04f 0204 	mov.w	r2, #4
20006d64:	f04f 0300 	mov.w	r3, #0
20006d68:	f000 fb3d 	bl	200073e6 <HW_set_8bit_reg_field>
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20006d6c:	687b      	ldr	r3, [r7, #4]
20006d6e:	f04f 0200 	mov.w	r2, #0
20006d72:	645a      	str	r2, [r3, #68]	; 0x44
            }
            break;
20006d74:	e05d      	b.n	20006e32 <I2C_isr+0xa5e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20006d76:	687b      	ldr	r3, [r7, #4]
20006d78:	f04f 0200 	mov.w	r2, #0
20006d7c:	645a      	str	r2, [r3, #68]	; 0x44
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u); 
20006d7e:	687b      	ldr	r3, [r7, #4]
20006d80:	681b      	ldr	r3, [r3, #0]
20006d82:	4618      	mov	r0, r3
20006d84:	f04f 0102 	mov.w	r1, #2
20006d88:	f04f 0204 	mov.w	r2, #4
20006d8c:	f04f 0301 	mov.w	r3, #1
20006d90:	f000 fb29 	bl	200073e6 <HW_set_8bit_reg_field>

            /*  Mark previous state as complete */
            this_i2c->slave_status = I2C_SUCCESS;
20006d94:	687b      	ldr	r3, [r7, #4]
20006d96:	f04f 0200 	mov.w	r2, #0
20006d9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006d9e:	687b      	ldr	r3, [r7, #4]
20006da0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006da4:	2b00      	cmp	r3, #0
20006da6:	d00a      	beq.n	20006dbe <I2C_isr+0x9ea>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006da8:	687b      	ldr	r3, [r7, #4]
20006daa:	681b      	ldr	r3, [r3, #0]
20006dac:	4618      	mov	r0, r3
20006dae:	f04f 0105 	mov.w	r1, #5
20006db2:	f04f 0220 	mov.w	r2, #32
20006db6:	f04f 0301 	mov.w	r3, #1
20006dba:	f000 fb14 	bl	200073e6 <HW_set_8bit_reg_field>
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006dbe:	687b      	ldr	r3, [r7, #4]
20006dc0:	f04f 0200 	mov.w	r2, #0
20006dc4:	731a      	strb	r2, [r3, #12]

            break;
20006dc6:	e034      	b.n	20006e32 <I2C_isr+0xa5e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006dc8:	687b      	ldr	r3, [r7, #4]
20006dca:	681b      	ldr	r3, [r3, #0]
20006dcc:	4618      	mov	r0, r3
20006dce:	f04f 0105 	mov.w	r1, #5
20006dd2:	f04f 0220 	mov.w	r2, #32
20006dd6:	f04f 0300 	mov.w	r3, #0
20006dda:	f000 fb04 	bl	200073e6 <HW_set_8bit_reg_field>
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20006dde:	687b      	ldr	r3, [r7, #4]
20006de0:	f04f 0200 	mov.w	r2, #0
20006de4:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20006de6:	687b      	ldr	r3, [r7, #4]
20006de8:	f04f 0200 	mov.w	r2, #0
20006dec:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->master_status)
20006dee:	687b      	ldr	r3, [r7, #4]
20006df0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006df4:	b2db      	uxtb	r3, r3
20006df6:	2b01      	cmp	r3, #1
20006df8:	d104      	bne.n	20006e04 <I2C_isr+0xa30>
            {
                this_i2c->master_status = I2C_FAILED;
20006dfa:	687b      	ldr	r3, [r7, #4]
20006dfc:	f04f 0202 	mov.w	r2, #2
20006e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }

            if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006e04:	687b      	ldr	r3, [r7, #4]
20006e06:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006e0a:	b2db      	uxtb	r3, r3
20006e0c:	2b01      	cmp	r3, #1
20006e0e:	d110      	bne.n	20006e32 <I2C_isr+0xa5e>
            {
                this_i2c->slave_status = I2C_FAILED;
20006e10:	687b      	ldr	r3, [r7, #4]
20006e12:	f04f 0202 	mov.w	r2, #2
20006e16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006e1a:	e00a      	b.n	20006e32 <I2C_isr+0xa5e>
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
              break;

        case ST_STOP_TRANSMIT:
             /* Stop has been transmitted. Do nothing */
              break;
20006e1c:	bf00      	nop
20006e1e:	e008      	b.n	20006e32 <I2C_isr+0xa5e>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20006e20:	bf00      	nop
20006e22:	e006      	b.n	20006e32 <I2C_isr+0xa5e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            break;
20006e24:	bf00      	nop
20006e26:	e004      	b.n	20006e32 <I2C_isr+0xa5e>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
            }
            break;
20006e28:	bf00      	nop
20006e2a:	e002      	b.n	20006e32 <I2C_isr+0xa5e>
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
            }
            break;
20006e2c:	bf00      	nop
20006e2e:	e000      	b.n	20006e32 <I2C_isr+0xa5e>
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20006e30:	bf00      	nop
            }

            break;
    }
    
    if ( clear_irq )
20006e32:	7bbb      	ldrb	r3, [r7, #14]
20006e34:	2b00      	cmp	r3, #0
20006e36:	d00a      	beq.n	20006e4e <I2C_isr+0xa7a>
    {
        /* clear interrupt. */
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006e38:	687b      	ldr	r3, [r7, #4]
20006e3a:	681b      	ldr	r3, [r3, #0]
20006e3c:	4618      	mov	r0, r3
20006e3e:	f04f 0103 	mov.w	r1, #3
20006e42:	f04f 0208 	mov.w	r2, #8
20006e46:	f04f 0300 	mov.w	r3, #0
20006e4a:	f000 facc 	bl	200073e6 <HW_set_8bit_reg_field>
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20006e4e:	687b      	ldr	r3, [r7, #4]
20006e50:	681b      	ldr	r3, [r3, #0]
20006e52:	f103 0304 	add.w	r3, r3, #4
20006e56:	4618      	mov	r0, r3
20006e58:	f000 fac3 	bl	200073e2 <HW_get_8bit_reg>
20006e5c:	4603      	mov	r3, r0
20006e5e:	72fb      	strb	r3, [r7, #11]
}
20006e60:	f107 0710 	add.w	r7, r7, #16
20006e64:	46bd      	mov	sp, r7
20006e66:	bdb0      	pop	{r4, r5, r7, pc}

20006e68 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20006e68:	b480      	push	{r7}
20006e6a:	b083      	sub	sp, #12
20006e6c:	af00      	add	r7, sp, #0
20006e6e:	4603      	mov	r3, r0
20006e70:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20006e72:	f24e 1300 	movw	r3, #57600	; 0xe100
20006e76:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006e7a:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006e7e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006e82:	79f9      	ldrb	r1, [r7, #7]
20006e84:	f001 011f 	and.w	r1, r1, #31
20006e88:	f04f 0001 	mov.w	r0, #1
20006e8c:	fa00 f101 	lsl.w	r1, r0, r1
20006e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006e94:	f107 070c 	add.w	r7, r7, #12
20006e98:	46bd      	mov	sp, r7
20006e9a:	bc80      	pop	{r7}
20006e9c:	4770      	bx	lr
20006e9e:	bf00      	nop

20006ea0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20006ea0:	b480      	push	{r7}
20006ea2:	b083      	sub	sp, #12
20006ea4:	af00      	add	r7, sp, #0
20006ea6:	4603      	mov	r3, r0
20006ea8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20006eaa:	f24e 1300 	movw	r3, #57600	; 0xe100
20006eae:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006eb2:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006eb6:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006eba:	79f9      	ldrb	r1, [r7, #7]
20006ebc:	f001 011f 	and.w	r1, r1, #31
20006ec0:	f04f 0001 	mov.w	r0, #1
20006ec4:	fa00 f101 	lsl.w	r1, r0, r1
20006ec8:	f102 0220 	add.w	r2, r2, #32
20006ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006ed0:	f107 070c 	add.w	r7, r7, #12
20006ed4:	46bd      	mov	sp, r7
20006ed6:	bc80      	pop	{r7}
20006ed8:	4770      	bx	lr
20006eda:	bf00      	nop

20006edc <I2C_enable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to enable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_enable_irq( i2c_instance_t * this_i2c )
{
20006edc:	b580      	push	{r7, lr}
20006ede:	b082      	sub	sp, #8
20006ee0:	af00      	add	r7, sp, #0
20006ee2:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
20006ee4:	687a      	ldr	r2, [r7, #4]
20006ee6:	f24e 0308 	movw	r3, #57352	; 0xe008
20006eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006eee:	429a      	cmp	r2, r3
20006ef0:	d103      	bne.n	20006efa <I2C_enable_irq+0x1e>
	{
		NVIC_EnableIRQ( FabricIrq0_IRQn );
20006ef2:	f04f 0022 	mov.w	r0, #34	; 0x22
20006ef6:	f7ff ffb7 	bl	20006e68 <NVIC_EnableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
20006efa:	687a      	ldr	r2, [r7, #4]
20006efc:	f24e 0374 	movw	r3, #57460	; 0xe074
20006f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006f04:	429a      	cmp	r2, r3
20006f06:	d103      	bne.n	20006f10 <I2C_enable_irq+0x34>
	{
		NVIC_EnableIRQ( FabricIrq1_IRQn );
20006f08:	f04f 0023 	mov.w	r0, #35	; 0x23
20006f0c:	f7ff ffac 	bl	20006e68 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c2)
20006f10:	687a      	ldr	r2, [r7, #4]
20006f12:	f64d 3328 	movw	r3, #56104	; 0xdb28
20006f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006f1a:	429a      	cmp	r2, r3
20006f1c:	d103      	bne.n	20006f26 <I2C_enable_irq+0x4a>
	{
		NVIC_EnableIRQ( FabricIrq2_IRQn );
20006f1e:	f04f 0024 	mov.w	r0, #36	; 0x24
20006f22:	f7ff ffa1 	bl	20006e68 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c3)
20006f26:	687a      	ldr	r2, [r7, #4]
20006f28:	f24e 134c 	movw	r3, #57676	; 0xe14c
20006f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006f30:	429a      	cmp	r2, r3
20006f32:	d103      	bne.n	20006f3c <I2C_enable_irq+0x60>
	{
		NVIC_EnableIRQ( FabricIrq3_IRQn );
20006f34:	f04f 0025 	mov.w	r0, #37	; 0x25
20006f38:	f7ff ff96 	bl	20006e68 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c4)
20006f3c:	687a      	ldr	r2, [r7, #4]
20006f3e:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
20006f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006f46:	429a      	cmp	r2, r3
20006f48:	d103      	bne.n	20006f52 <I2C_enable_irq+0x76>
	{
		NVIC_EnableIRQ( FabricIrq4_IRQn );
20006f4a:	f04f 0026 	mov.w	r0, #38	; 0x26
20006f4e:	f7ff ff8b 	bl	20006e68 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c5)
20006f52:	687a      	ldr	r2, [r7, #4]
20006f54:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
20006f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006f5c:	429a      	cmp	r2, r3
20006f5e:	d103      	bne.n	20006f68 <I2C_enable_irq+0x8c>
	{
		NVIC_EnableIRQ( FabricIrq5_IRQn );
20006f60:	f04f 0027 	mov.w	r0, #39	; 0x27
20006f64:	f7ff ff80 	bl	20006e68 <NVIC_EnableIRQ>
	}
}
20006f68:	f107 0708 	add.w	r7, r7, #8
20006f6c:	46bd      	mov	sp, r7
20006f6e:	bd80      	pop	{r7, pc}

20006f70 <I2C_disable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to disable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_disable_irq( i2c_instance_t * this_i2c )
{
20006f70:	b580      	push	{r7, lr}
20006f72:	b082      	sub	sp, #8
20006f74:	af00      	add	r7, sp, #0
20006f76:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
20006f78:	687a      	ldr	r2, [r7, #4]
20006f7a:	f24e 0308 	movw	r3, #57352	; 0xe008
20006f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006f82:	429a      	cmp	r2, r3
20006f84:	d103      	bne.n	20006f8e <I2C_disable_irq+0x1e>
	{
		NVIC_DisableIRQ( FabricIrq0_IRQn );
20006f86:	f04f 0022 	mov.w	r0, #34	; 0x22
20006f8a:	f7ff ff89 	bl	20006ea0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
20006f8e:	687a      	ldr	r2, [r7, #4]
20006f90:	f24e 0374 	movw	r3, #57460	; 0xe074
20006f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006f98:	429a      	cmp	r2, r3
20006f9a:	d103      	bne.n	20006fa4 <I2C_disable_irq+0x34>
	{
		NVIC_DisableIRQ( FabricIrq1_IRQn );
20006f9c:	f04f 0023 	mov.w	r0, #35	; 0x23
20006fa0:	f7ff ff7e 	bl	20006ea0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c2)
20006fa4:	687a      	ldr	r2, [r7, #4]
20006fa6:	f64d 3328 	movw	r3, #56104	; 0xdb28
20006faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006fae:	429a      	cmp	r2, r3
20006fb0:	d103      	bne.n	20006fba <I2C_disable_irq+0x4a>
	{
		NVIC_DisableIRQ( FabricIrq2_IRQn );
20006fb2:	f04f 0024 	mov.w	r0, #36	; 0x24
20006fb6:	f7ff ff73 	bl	20006ea0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c3)
20006fba:	687a      	ldr	r2, [r7, #4]
20006fbc:	f24e 134c 	movw	r3, #57676	; 0xe14c
20006fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006fc4:	429a      	cmp	r2, r3
20006fc6:	d103      	bne.n	20006fd0 <I2C_disable_irq+0x60>
	{
		NVIC_DisableIRQ( FabricIrq3_IRQn );
20006fc8:	f04f 0025 	mov.w	r0, #37	; 0x25
20006fcc:	f7ff ff68 	bl	20006ea0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c4)
20006fd0:	687a      	ldr	r2, [r7, #4]
20006fd2:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
20006fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006fda:	429a      	cmp	r2, r3
20006fdc:	d103      	bne.n	20006fe6 <I2C_disable_irq+0x76>
	{
		NVIC_DisableIRQ( FabricIrq4_IRQn );
20006fde:	f04f 0026 	mov.w	r0, #38	; 0x26
20006fe2:	f7ff ff5d 	bl	20006ea0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c5)
20006fe6:	687a      	ldr	r2, [r7, #4]
20006fe8:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
20006fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ff0:	429a      	cmp	r2, r3
20006ff2:	d103      	bne.n	20006ffc <I2C_disable_irq+0x8c>
	{
		NVIC_DisableIRQ( FabricIrq5_IRQn );
20006ff4:	f04f 0027 	mov.w	r0, #39	; 0x27
20006ff8:	f7ff ff52 	bl	20006ea0 <NVIC_DisableIRQ>
	}
}
20006ffc:	f107 0708 	add.w	r7, r7, #8
20007000:	46bd      	mov	sp, r7
20007002:	bd80      	pop	{r7, pc}

20007004 <SystemInit>:

/***************************************************************************//**
 * See system_m2sxxx.h for details.
 */
void SystemInit(void)
{
20007004:	b580      	push	{r7, lr}
20007006:	af00      	add	r7, sp, #0
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
    complete_clock_config();
20007008:	f000 f96a 	bl	200072e0 <complete_clock_config>
#endif

    silicon_workarounds();
2000700c:	f000 f936 	bl	2000727c <silicon_workarounds>
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
20007010:	f64e 5300 	movw	r3, #60672	; 0xed00
20007014:	f2ce 0300 	movt	r3, #57344	; 0xe000
20007018:	f64e 5200 	movw	r2, #60672	; 0xed00
2000701c:	f2ce 0200 	movt	r2, #57344	; 0xe000
20007020:	6952      	ldr	r2, [r2, #20]
20007022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20007026:	615a      	str	r2, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
20007028:	f7f9 f941 	bl	200002ae <mscc_post_hw_cfg_init>
    while(!CORE_SF2_CFG->INIT_DONE)
    {
        ;   /* Wait for INIT_DONE from CoreSF2Reset. */
    }
#endif
}
2000702c:	bd80      	pop	{r7, pc}
2000702e:	bf00      	nop

20007030 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
20007030:	b580      	push	{r7, lr}
20007032:	b088      	sub	sp, #32
20007034:	af00      	add	r7, sp, #0
#if 1
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
20007036:	f248 0300 	movw	r3, #32768	; 0x8000
2000703a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000703e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20007042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20007046:	60fb      	str	r3, [r7, #12]
    
    if(0u == controller_pll_init)
20007048:	68fb      	ldr	r3, [r7, #12]
2000704a:	2b00      	cmp	r3, #0
2000704c:	f040 808b 	bne.w	20007166 <SystemCoreClockUpdate+0x136>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;
        
        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
20007050:	f248 0300 	movw	r3, #32768	; 0x8000
20007054:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2000705c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20007060:	617b      	str	r3, [r7, #20]
        if(0u == global_mux_sel)
20007062:	697b      	ldr	r3, [r7, #20]
20007064:	2b00      	cmp	r3, #0
20007066:	d13f      	bne.n	200070e8 <SystemCoreClockUpdate+0xb8>
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
20007068:	f247 73b4 	movw	r3, #30644	; 0x77b4
2000706c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007070:	f24e 1200 	movw	r2, #57600	; 0xe100
20007074:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007078:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
2000707a:	f247 73b8 	movw	r3, #30648	; 0x77b8
2000707e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007082:	f24e 1200 	movw	r2, #57600	; 0xe100
20007086:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
2000708a:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
2000708c:	f247 73bc 	movw	r3, #30652	; 0x77bc
20007090:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007094:	f24e 1200 	movw	r2, #57600	; 0xe100
20007098:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
2000709c:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
2000709e:	f247 73c0 	movw	r3, #30656	; 0x77c0
200070a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070a6:	f24f 0280 	movw	r2, #61568	; 0xf080
200070aa:	f2c0 22fa 	movt	r2, #762	; 0x2fa
200070ae:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
200070b0:	f247 73c4 	movw	r3, #30660	; 0x77c4
200070b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070b8:	f24e 1200 	movw	r2, #57600	; 0xe100
200070bc:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200070c0:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
200070c2:	f247 73c8 	movw	r3, #30664	; 0x77c8
200070c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070ca:	f24e 1200 	movw	r2, #57600	; 0xe100
200070ce:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200070d2:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
200070d4:	f247 73cc 	movw	r3, #30668	; 0x77cc
200070d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070dc:	f24e 1200 	movw	r2, #57600	; 0xe100
200070e0:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200070e4:	601a      	str	r2, [r3, #0]
                break;
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
200070e6:	e045      	b.n	20007174 <SystemCoreClockUpdate+0x144>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
200070e8:	f247 7348 	movw	r3, #30536	; 0x7748
200070ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070f0:	f107 0204 	add.w	r2, r7, #4
200070f4:	e893 0003 	ldmia.w	r3, {r0, r1}
200070f8:	e882 0003 	stmia.w	r2, {r0, r1}
            
            uint32_t standby_sel;
            uint8_t clock_source;
            
            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
200070fc:	f248 0300 	movw	r3, #32768	; 0x8000
20007100:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
20007108:	ea4f 1393 	mov.w	r3, r3, lsr #6
2000710c:	f003 0307 	and.w	r3, r3, #7
20007110:	61bb      	str	r3, [r7, #24]
            clock_source = standby_clock_lut[standby_sel];
20007112:	69bb      	ldr	r3, [r7, #24]
20007114:	f107 0220 	add.w	r2, r7, #32
20007118:	4413      	add	r3, r2
2000711a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
2000711e:	77fb      	strb	r3, [r7, #31]
            switch(clock_source)
20007120:	7ffb      	ldrb	r3, [r7, #31]
20007122:	2b01      	cmp	r3, #1
20007124:	d00b      	beq.n	2000713e <SystemCoreClockUpdate+0x10e>
20007126:	2b02      	cmp	r3, #2
20007128:	d00e      	beq.n	20007148 <SystemCoreClockUpdate+0x118>
2000712a:	2b00      	cmp	r3, #0
2000712c:	d114      	bne.n	20007158 <SystemCoreClockUpdate+0x128>
            {
                case RCOSC_25_50MHZ_CLK_SRC:
                    clk_src = get_rcosc_25_50mhz_frequency();
2000712e:	f000 f825 	bl	2000717c <get_rcosc_25_50mhz_frequency>
20007132:	4603      	mov	r3, r0
20007134:	613b      	str	r3, [r7, #16]
                    set_clock_frequency_globals(clk_src);
20007136:	6938      	ldr	r0, [r7, #16]
20007138:	f000 f842 	bl	200071c0 <set_clock_frequency_globals>
                break;
2000713c:	e01a      	b.n	20007174 <SystemCoreClockUpdate+0x144>
                
                case CLK_XTAL_CLK_SRC:
                    set_clock_frequency_globals(FREQ_32KHZ);
2000713e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20007142:	f000 f83d 	bl	200071c0 <set_clock_frequency_globals>
                break;
20007146:	e015      	b.n	20007174 <SystemCoreClockUpdate+0x144>
                
                case RCOSC_1_MHZ_CLK_SRC:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007148:	f244 2040 	movw	r0, #16960	; 0x4240
2000714c:	f2c0 000f 	movt	r0, #15
20007150:	f000 f836 	bl	200071c0 <set_clock_frequency_globals>
                break;
20007154:	bf00      	nop
20007156:	e00d      	b.n	20007174 <SystemCoreClockUpdate+0x144>
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007158:	f244 2040 	movw	r0, #16960	; 0x4240
2000715c:	f2c0 000f 	movt	r0, #15
20007160:	f000 f82e 	bl	200071c0 <set_clock_frequency_globals>
20007164:	e006      	b.n	20007174 <SystemCoreClockUpdate+0x144>
        }
    }
    else
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
20007166:	f000 f809 	bl	2000717c <get_rcosc_25_50mhz_frequency>
2000716a:	4603      	mov	r3, r0
2000716c:	613b      	str	r3, [r7, #16]
        set_clock_frequency_globals(clk_src);
2000716e:	6938      	ldr	r0, [r7, #16]
20007170:	f000 f826 	bl	200071c0 <set_clock_frequency_globals>
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
#endif
}
20007174:	f107 0720 	add.w	r7, r7, #32
20007178:	46bd      	mov	sp, r7
2000717a:	bd80      	pop	{r7, pc}

2000717c <get_rcosc_25_50mhz_frequency>:

/***************************************************************************//**
 * Find out frequency generated by the 25_50mhz RC osciallator.
 */
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
2000717c:	b480      	push	{r7}
2000717e:	b083      	sub	sp, #12
20007180:	af00      	add	r7, sp, #0
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;
    
    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
20007182:	f248 0300 	movw	r3, #32768	; 0x8000
20007186:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000718a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2000718e:	f003 0304 	and.w	r3, r3, #4
20007192:	603b      	str	r3, [r7, #0]
    if(0u == rcosc_div2)
20007194:	683b      	ldr	r3, [r7, #0]
20007196:	2b00      	cmp	r3, #0
20007198:	d105      	bne.n	200071a6 <get_rcosc_25_50mhz_frequency+0x2a>
    {
        /* 25_50mhz oscillator is configured for 25 MHz operations. */
        rcosc_frequency = FREQ_25MHZ;
2000719a:	f647 0340 	movw	r3, #30784	; 0x7840
2000719e:	f2c0 137d 	movt	r3, #381	; 0x17d
200071a2:	607b      	str	r3, [r7, #4]
200071a4:	e004      	b.n	200071b0 <get_rcosc_25_50mhz_frequency+0x34>
    }
    else
    {
        /* 25_50mhz oscillator is configured for 50 MHz operations. */
        rcosc_frequency = FREQ_50MHZ;
200071a6:	f24f 0380 	movw	r3, #61568	; 0xf080
200071aa:	f2c0 23fa 	movt	r3, #762	; 0x2fa
200071ae:	607b      	str	r3, [r7, #4]
    }
    
    return rcosc_frequency;
200071b0:	687b      	ldr	r3, [r7, #4]
}
200071b2:	4618      	mov	r0, r3
200071b4:	f107 070c 	add.w	r7, r7, #12
200071b8:	46bd      	mov	sp, r7
200071ba:	bc80      	pop	{r7}
200071bc:	4770      	bx	lr
200071be:	bf00      	nop

200071c0 <set_clock_frequency_globals>:
        - g_FrequencyFIC0
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
200071c0:	b480      	push	{r7}
200071c2:	b083      	sub	sp, #12
200071c4:	af00      	add	r7, sp, #0
200071c6:	6078      	str	r0, [r7, #4]
    SystemCoreClock = standby_clk;
200071c8:	f247 73b4 	movw	r3, #30644	; 0x77b4
200071cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071d0:	687a      	ldr	r2, [r7, #4]
200071d2:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = standby_clk;
200071d4:	f247 73b8 	movw	r3, #30648	; 0x77b8
200071d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071dc:	687a      	ldr	r2, [r7, #4]
200071de:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = standby_clk;
200071e0:	f247 73bc 	movw	r3, #30652	; 0x77bc
200071e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071e8:	687a      	ldr	r2, [r7, #4]
200071ea:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
200071ec:	f247 73c0 	movw	r3, #30656	; 0x77c0
200071f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071f4:	f24f 0280 	movw	r2, #61568	; 0xf080
200071f8:	f2c0 22fa 	movt	r2, #762	; 0x2fa
200071fc:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC0 = standby_clk;
200071fe:	f247 73c4 	movw	r3, #30660	; 0x77c4
20007202:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007206:	687a      	ldr	r2, [r7, #4]
20007208:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC1 = standby_clk;
2000720a:	f247 73c8 	movw	r3, #30664	; 0x77c8
2000720e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007212:	687a      	ldr	r2, [r7, #4]
20007214:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC64 = standby_clk;
20007216:	f247 73cc 	movw	r3, #30668	; 0x77cc
2000721a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000721e:	687a      	ldr	r2, [r7, #4]
20007220:	601a      	str	r2, [r3, #0]
}
20007222:	f107 070c 	add.w	r7, r7, #12
20007226:	46bd      	mov	sp, r7
20007228:	bc80      	pop	{r7}
2000722a:	4770      	bx	lr

2000722c <get_silicon_revision>:

/*------------------------------------------------------------------------------
  Retrieve silicon revision from system registers.
 */
static uint32_t get_silicon_revision(void)
{
2000722c:	b480      	push	{r7}
2000722e:	b083      	sub	sp, #12
20007230:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    uint32_t device_version;
    
    device_version = SYSREG->DEVICE_VERSION;
20007232:	f248 0300 	movw	r3, #32768	; 0x8000
20007236:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000723a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
2000723e:	607b      	str	r3, [r7, #4]
    switch(device_version)
20007240:	687a      	ldr	r2, [r7, #4]
20007242:	f64f 0302 	movw	r3, #63490	; 0xf802
20007246:	429a      	cmp	r2, r3
20007248:	d006      	beq.n	20007258 <get_silicon_revision+0x2c>
2000724a:	f64f 0302 	movw	r3, #63490	; 0xf802
2000724e:	f2c0 0301 	movt	r3, #1
20007252:	429a      	cmp	r2, r3
20007254:	d004      	beq.n	20007260 <get_silicon_revision+0x34>
20007256:	e007      	b.n	20007268 <get_silicon_revision+0x3c>
    {
        case 0x0000F802:
            silicon_revision = M2S050_REV_A_SILICON;
20007258:	f04f 0301 	mov.w	r3, #1
2000725c:	603b      	str	r3, [r7, #0]
            break;
2000725e:	e006      	b.n	2000726e <get_silicon_revision+0x42>
            
        case 0x0001F802:
            silicon_revision = M2S050_REV_B_SILICON;
20007260:	f04f 0302 	mov.w	r3, #2
20007264:	603b      	str	r3, [r7, #0]
            break;
20007266:	e002      	b.n	2000726e <get_silicon_revision+0x42>
            
        default:
            silicon_revision = UNKNOWN_SILICON_REV;
20007268:	f04f 0300 	mov.w	r3, #0
2000726c:	603b      	str	r3, [r7, #0]
            break;
    }
    
    return silicon_revision;
2000726e:	683b      	ldr	r3, [r7, #0]
}
20007270:	4618      	mov	r0, r3
20007272:	f107 070c 	add.w	r7, r7, #12
20007276:	46bd      	mov	sp, r7
20007278:	bc80      	pop	{r7}
2000727a:	4770      	bx	lr

2000727c <silicon_workarounds>:

/*------------------------------------------------------------------------------
  Workarounds for various silicon versions.
 */
static void silicon_workarounds(void)
{
2000727c:	b580      	push	{r7, lr}
2000727e:	b082      	sub	sp, #8
20007280:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    
    silicon_revision = get_silicon_revision();
20007282:	f7ff ffd3 	bl	2000722c <get_silicon_revision>
20007286:	4603      	mov	r3, r0
20007288:	607b      	str	r3, [r7, #4]
    
    switch(silicon_revision)
2000728a:	687b      	ldr	r3, [r7, #4]
2000728c:	2b01      	cmp	r3, #1
2000728e:	d101      	bne.n	20007294 <silicon_workarounds+0x18>
    {
        case M2S050_REV_A_SILICON:
            m2s050_rev_a_workarounds();
20007290:	f000 f804 	bl	2000729c <m2s050_rev_a_workarounds>
        case UNKNOWN_SILICON_REV:
            /* Fall through. */
        default:
            break;
    }
}
20007294:	f107 0708 	add.w	r7, r7, #8
20007298:	46bd      	mov	sp, r7
2000729a:	bd80      	pop	{r7, pc}

2000729c <m2s050_rev_a_workarounds>:

/*------------------------------------------------------------------------------
  Silicon workarounds for M2S050 rev A.
 */
static void m2s050_rev_a_workarounds(void)
{
2000729c:	b480      	push	{r7}
2000729e:	af00      	add	r7, sp, #0
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
200072a0:	f248 0300 	movw	r3, #32768	; 0x8000
200072a4:	f2c4 0303 	movt	r3, #16387	; 0x4003
200072a8:	f248 0200 	movw	r2, #32768	; 0x8000
200072ac:	f2c4 0203 	movt	r2, #16387	; 0x4003
200072b0:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
200072b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200072b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
200072bc:	f248 0300 	movw	r3, #32768	; 0x8000
200072c0:	f2c4 0303 	movt	r3, #16387	; 0x4003
200072c4:	f248 0200 	movw	r2, #32768	; 0x8000
200072c8:	f2c4 0203 	movt	r2, #16387	; 0x4003
200072cc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
200072d0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
200072d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
200072d8:	46bd      	mov	sp, r7
200072da:	bc80      	pop	{r7}
200072dc:	4770      	bx	lr
200072de:	bf00      	nop

200072e0 <complete_clock_config>:
/*------------------------------------------------------------------------------
  Complete clock configuration if requested by Libero.
 */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
static void complete_clock_config(void)
{
200072e0:	b480      	push	{r7}
200072e2:	b083      	sub	sp, #12
200072e4:	af00      	add	r7, sp, #0
    uint32_t pll_locked;
    
    /* Wait for fabric PLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & FAB_PLL_LOCK_MASK;
200072e6:	f248 0300 	movw	r3, #32768	; 0x8000
200072ea:	f2c4 0303 	movt	r3, #16387	; 0x4003
200072ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
200072f2:	f003 0301 	and.w	r3, r3, #1
200072f6:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
200072f8:	687b      	ldr	r3, [r7, #4]
200072fa:	2b00      	cmp	r3, #0
200072fc:	d0f3      	beq.n	200072e6 <complete_clock_config+0x6>
    
    /* Negate MPLL bypass. */
    SYSREG->MSSDDR_PLL_STATUS_HIGH_CR &= ~FACC_PLL_BYPASS_MASK;
200072fe:	f248 0300 	movw	r3, #32768	; 0x8000
20007302:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007306:	f248 0200 	movw	r2, #32768	; 0x8000
2000730a:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000730e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
20007312:	f022 0201 	bic.w	r2, r2, #1
20007316:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    
    /* Wait for MPLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & MPLL_LOCK_MASK;
2000731a:	f248 0300 	movw	r3, #32768	; 0x8000
2000731e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007322:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20007326:	f003 0302 	and.w	r3, r3, #2
2000732a:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
2000732c:	687b      	ldr	r3, [r7, #4]
2000732e:	2b00      	cmp	r3, #0
20007330:	d0f3      	beq.n	2000731a <complete_clock_config+0x3a>
    
    /* Switch FACC from standby to run mode. */
    SYSREG->MSSDDR_FACC1_CR &= ~FACC_GLMUX_SEL_MASK;
20007332:	f248 0300 	movw	r3, #32768	; 0x8000
20007336:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000733a:	f248 0200 	movw	r2, #32768	; 0x8000
2000733e:	f2c4 0203 	movt	r2, #16387	; 0x4003
20007342:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20007346:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2000734a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* Negate FPGA_SOFTRESET to de-assert MSS_RESET_N_M2F in the fabric */
    SYSREG->SOFT_RST_CR &= ~SYSREG_FPGA_SOFTRESET_MASK;
2000734e:	f248 0300 	movw	r3, #32768	; 0x8000
20007352:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007356:	f248 0200 	movw	r2, #32768	; 0x8000
2000735a:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000735e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20007360:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20007364:	649a      	str	r2, [r3, #72]	; 0x48
}
20007366:	f107 070c 	add.w	r7, r7, #12
2000736a:	46bd      	mov	sp, r7
2000736c:	bc80      	pop	{r7}
2000736e:	4770      	bx	lr

20007370 <HAL_disable_interrupts>:
20007370:	f3ef 8010 	mrs	r0, PRIMASK
20007374:	b672      	cpsid	i
20007376:	4770      	bx	lr

20007378 <HAL_restore_interrupts>:
20007378:	f380 8810 	msr	PRIMASK, r0
2000737c:	4770      	bx	lr

2000737e <HW_set_32bit_reg>:
2000737e:	6001      	str	r1, [r0, #0]
20007380:	4770      	bx	lr

20007382 <HW_get_32bit_reg>:
20007382:	6800      	ldr	r0, [r0, #0]
20007384:	4770      	bx	lr

20007386 <HW_set_32bit_reg_field>:
20007386:	b50e      	push	{r1, r2, r3, lr}
20007388:	fa03 f301 	lsl.w	r3, r3, r1
2000738c:	ea03 0302 	and.w	r3, r3, r2
20007390:	6801      	ldr	r1, [r0, #0]
20007392:	ea6f 0202 	mvn.w	r2, r2
20007396:	ea01 0102 	and.w	r1, r1, r2
2000739a:	ea41 0103 	orr.w	r1, r1, r3
2000739e:	6001      	str	r1, [r0, #0]
200073a0:	bd0e      	pop	{r1, r2, r3, pc}

200073a2 <HW_get_32bit_reg_field>:
200073a2:	6800      	ldr	r0, [r0, #0]
200073a4:	ea00 0002 	and.w	r0, r0, r2
200073a8:	fa20 f001 	lsr.w	r0, r0, r1
200073ac:	4770      	bx	lr

200073ae <HW_set_16bit_reg>:
200073ae:	8001      	strh	r1, [r0, #0]
200073b0:	4770      	bx	lr

200073b2 <HW_get_16bit_reg>:
200073b2:	8800      	ldrh	r0, [r0, #0]
200073b4:	4770      	bx	lr

200073b6 <HW_set_16bit_reg_field>:
200073b6:	b50e      	push	{r1, r2, r3, lr}
200073b8:	fa03 f301 	lsl.w	r3, r3, r1
200073bc:	ea03 0302 	and.w	r3, r3, r2
200073c0:	8801      	ldrh	r1, [r0, #0]
200073c2:	ea6f 0202 	mvn.w	r2, r2
200073c6:	ea01 0102 	and.w	r1, r1, r2
200073ca:	ea41 0103 	orr.w	r1, r1, r3
200073ce:	8001      	strh	r1, [r0, #0]
200073d0:	bd0e      	pop	{r1, r2, r3, pc}

200073d2 <HW_get_16bit_reg_field>:
200073d2:	8800      	ldrh	r0, [r0, #0]
200073d4:	ea00 0002 	and.w	r0, r0, r2
200073d8:	fa20 f001 	lsr.w	r0, r0, r1
200073dc:	4770      	bx	lr

200073de <HW_set_8bit_reg>:
200073de:	7001      	strb	r1, [r0, #0]
200073e0:	4770      	bx	lr

200073e2 <HW_get_8bit_reg>:
200073e2:	7800      	ldrb	r0, [r0, #0]
200073e4:	4770      	bx	lr

200073e6 <HW_set_8bit_reg_field>:
200073e6:	b50e      	push	{r1, r2, r3, lr}
200073e8:	fa03 f301 	lsl.w	r3, r3, r1
200073ec:	ea03 0302 	and.w	r3, r3, r2
200073f0:	7801      	ldrb	r1, [r0, #0]
200073f2:	ea6f 0202 	mvn.w	r2, r2
200073f6:	ea01 0102 	and.w	r1, r1, r2
200073fa:	ea41 0103 	orr.w	r1, r1, r3
200073fe:	7001      	strb	r1, [r0, #0]
20007400:	bd0e      	pop	{r1, r2, r3, pc}

20007402 <HW_get_8bit_reg_field>:
20007402:	7800      	ldrb	r0, [r0, #0]
20007404:	ea00 0002 	and.w	r0, r0, r2
20007408:	fa20 f001 	lsr.w	r0, r0, r1
2000740c:	4770      	bx	lr
	...

20007410 <__libc_init_array>:
20007410:	b570      	push	{r4, r5, r6, lr}
20007412:	f247 7668 	movw	r6, #30568	; 0x7768
20007416:	f247 7568 	movw	r5, #30568	; 0x7768
2000741a:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000741e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20007422:	1b76      	subs	r6, r6, r5
20007424:	10b6      	asrs	r6, r6, #2
20007426:	d006      	beq.n	20007436 <__libc_init_array+0x26>
20007428:	2400      	movs	r4, #0
2000742a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000742e:	3401      	adds	r4, #1
20007430:	4798      	blx	r3
20007432:	42a6      	cmp	r6, r4
20007434:	d8f9      	bhi.n	2000742a <__libc_init_array+0x1a>
20007436:	f247 7568 	movw	r5, #30568	; 0x7768
2000743a:	f247 766c 	movw	r6, #30572	; 0x776c
2000743e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20007442:	f2c2 0600 	movt	r6, #8192	; 0x2000
20007446:	1b76      	subs	r6, r6, r5
20007448:	f000 f982 	bl	20007750 <_init>
2000744c:	10b6      	asrs	r6, r6, #2
2000744e:	d006      	beq.n	2000745e <__libc_init_array+0x4e>
20007450:	2400      	movs	r4, #0
20007452:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20007456:	3401      	adds	r4, #1
20007458:	4798      	blx	r3
2000745a:	42a6      	cmp	r6, r4
2000745c:	d8f9      	bhi.n	20007452 <__libc_init_array+0x42>
2000745e:	bd70      	pop	{r4, r5, r6, pc}

20007460 <memcpy>:
20007460:	2a03      	cmp	r2, #3
20007462:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
20007466:	d80b      	bhi.n	20007480 <memcpy+0x20>
20007468:	b13a      	cbz	r2, 2000747a <memcpy+0x1a>
2000746a:	2300      	movs	r3, #0
2000746c:	f811 c003 	ldrb.w	ip, [r1, r3]
20007470:	f800 c003 	strb.w	ip, [r0, r3]
20007474:	3301      	adds	r3, #1
20007476:	4293      	cmp	r3, r2
20007478:	d1f8      	bne.n	2000746c <memcpy+0xc>
2000747a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
2000747e:	4770      	bx	lr
20007480:	1882      	adds	r2, r0, r2
20007482:	460c      	mov	r4, r1
20007484:	4603      	mov	r3, r0
20007486:	e003      	b.n	20007490 <memcpy+0x30>
20007488:	f814 1c01 	ldrb.w	r1, [r4, #-1]
2000748c:	f803 1c01 	strb.w	r1, [r3, #-1]
20007490:	f003 0603 	and.w	r6, r3, #3
20007494:	4619      	mov	r1, r3
20007496:	46a4      	mov	ip, r4
20007498:	3301      	adds	r3, #1
2000749a:	3401      	adds	r4, #1
2000749c:	2e00      	cmp	r6, #0
2000749e:	d1f3      	bne.n	20007488 <memcpy+0x28>
200074a0:	f01c 0403 	ands.w	r4, ip, #3
200074a4:	4663      	mov	r3, ip
200074a6:	bf08      	it	eq
200074a8:	ebc1 0c02 	rsbeq	ip, r1, r2
200074ac:	d068      	beq.n	20007580 <memcpy+0x120>
200074ae:	4265      	negs	r5, r4
200074b0:	f1c4 0a04 	rsb	sl, r4, #4
200074b4:	eb0c 0705 	add.w	r7, ip, r5
200074b8:	4633      	mov	r3, r6
200074ba:	ea4f 0aca 	mov.w	sl, sl, lsl #3
200074be:	f85c 6005 	ldr.w	r6, [ip, r5]
200074c2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
200074c6:	1a55      	subs	r5, r2, r1
200074c8:	e008      	b.n	200074dc <memcpy+0x7c>
200074ca:	f857 4f04 	ldr.w	r4, [r7, #4]!
200074ce:	4626      	mov	r6, r4
200074d0:	fa04 f40a 	lsl.w	r4, r4, sl
200074d4:	ea49 0404 	orr.w	r4, r9, r4
200074d8:	50cc      	str	r4, [r1, r3]
200074da:	3304      	adds	r3, #4
200074dc:	185c      	adds	r4, r3, r1
200074de:	2d03      	cmp	r5, #3
200074e0:	fa26 f908 	lsr.w	r9, r6, r8
200074e4:	f1a5 0504 	sub.w	r5, r5, #4
200074e8:	eb0c 0603 	add.w	r6, ip, r3
200074ec:	dced      	bgt.n	200074ca <memcpy+0x6a>
200074ee:	2300      	movs	r3, #0
200074f0:	e002      	b.n	200074f8 <memcpy+0x98>
200074f2:	5cf1      	ldrb	r1, [r6, r3]
200074f4:	54e1      	strb	r1, [r4, r3]
200074f6:	3301      	adds	r3, #1
200074f8:	1919      	adds	r1, r3, r4
200074fa:	4291      	cmp	r1, r2
200074fc:	d3f9      	bcc.n	200074f2 <memcpy+0x92>
200074fe:	e7bc      	b.n	2000747a <memcpy+0x1a>
20007500:	f853 4c40 	ldr.w	r4, [r3, #-64]
20007504:	f841 4c40 	str.w	r4, [r1, #-64]
20007508:	f853 4c3c 	ldr.w	r4, [r3, #-60]
2000750c:	f841 4c3c 	str.w	r4, [r1, #-60]
20007510:	f853 4c38 	ldr.w	r4, [r3, #-56]
20007514:	f841 4c38 	str.w	r4, [r1, #-56]
20007518:	f853 4c34 	ldr.w	r4, [r3, #-52]
2000751c:	f841 4c34 	str.w	r4, [r1, #-52]
20007520:	f853 4c30 	ldr.w	r4, [r3, #-48]
20007524:	f841 4c30 	str.w	r4, [r1, #-48]
20007528:	f853 4c2c 	ldr.w	r4, [r3, #-44]
2000752c:	f841 4c2c 	str.w	r4, [r1, #-44]
20007530:	f853 4c28 	ldr.w	r4, [r3, #-40]
20007534:	f841 4c28 	str.w	r4, [r1, #-40]
20007538:	f853 4c24 	ldr.w	r4, [r3, #-36]
2000753c:	f841 4c24 	str.w	r4, [r1, #-36]
20007540:	f853 4c20 	ldr.w	r4, [r3, #-32]
20007544:	f841 4c20 	str.w	r4, [r1, #-32]
20007548:	f853 4c1c 	ldr.w	r4, [r3, #-28]
2000754c:	f841 4c1c 	str.w	r4, [r1, #-28]
20007550:	f853 4c18 	ldr.w	r4, [r3, #-24]
20007554:	f841 4c18 	str.w	r4, [r1, #-24]
20007558:	f853 4c14 	ldr.w	r4, [r3, #-20]
2000755c:	f841 4c14 	str.w	r4, [r1, #-20]
20007560:	f853 4c10 	ldr.w	r4, [r3, #-16]
20007564:	f841 4c10 	str.w	r4, [r1, #-16]
20007568:	f853 4c0c 	ldr.w	r4, [r3, #-12]
2000756c:	f841 4c0c 	str.w	r4, [r1, #-12]
20007570:	f853 4c08 	ldr.w	r4, [r3, #-8]
20007574:	f841 4c08 	str.w	r4, [r1, #-8]
20007578:	f853 4c04 	ldr.w	r4, [r3, #-4]
2000757c:	f841 4c04 	str.w	r4, [r1, #-4]
20007580:	461c      	mov	r4, r3
20007582:	460d      	mov	r5, r1
20007584:	3340      	adds	r3, #64	; 0x40
20007586:	3140      	adds	r1, #64	; 0x40
20007588:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2000758c:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
20007590:	dcb6      	bgt.n	20007500 <memcpy+0xa0>
20007592:	4621      	mov	r1, r4
20007594:	462b      	mov	r3, r5
20007596:	1b54      	subs	r4, r2, r5
20007598:	e00f      	b.n	200075ba <memcpy+0x15a>
2000759a:	f851 5c10 	ldr.w	r5, [r1, #-16]
2000759e:	f843 5c10 	str.w	r5, [r3, #-16]
200075a2:	f851 5c0c 	ldr.w	r5, [r1, #-12]
200075a6:	f843 5c0c 	str.w	r5, [r3, #-12]
200075aa:	f851 5c08 	ldr.w	r5, [r1, #-8]
200075ae:	f843 5c08 	str.w	r5, [r3, #-8]
200075b2:	f851 5c04 	ldr.w	r5, [r1, #-4]
200075b6:	f843 5c04 	str.w	r5, [r3, #-4]
200075ba:	2c0f      	cmp	r4, #15
200075bc:	460d      	mov	r5, r1
200075be:	469c      	mov	ip, r3
200075c0:	f101 0110 	add.w	r1, r1, #16
200075c4:	f103 0310 	add.w	r3, r3, #16
200075c8:	f1a4 0410 	sub.w	r4, r4, #16
200075cc:	dce5      	bgt.n	2000759a <memcpy+0x13a>
200075ce:	ebcc 0102 	rsb	r1, ip, r2
200075d2:	2300      	movs	r3, #0
200075d4:	e003      	b.n	200075de <memcpy+0x17e>
200075d6:	58ec      	ldr	r4, [r5, r3]
200075d8:	f84c 4003 	str.w	r4, [ip, r3]
200075dc:	3304      	adds	r3, #4
200075de:	195e      	adds	r6, r3, r5
200075e0:	2903      	cmp	r1, #3
200075e2:	eb03 040c 	add.w	r4, r3, ip
200075e6:	f1a1 0104 	sub.w	r1, r1, #4
200075ea:	dcf4      	bgt.n	200075d6 <memcpy+0x176>
200075ec:	e77f      	b.n	200074ee <memcpy+0x8e>
200075ee:	bf00      	nop

200075f0 <memset>:
200075f0:	2a03      	cmp	r2, #3
200075f2:	b2c9      	uxtb	r1, r1
200075f4:	b430      	push	{r4, r5}
200075f6:	d807      	bhi.n	20007608 <memset+0x18>
200075f8:	b122      	cbz	r2, 20007604 <memset+0x14>
200075fa:	2300      	movs	r3, #0
200075fc:	54c1      	strb	r1, [r0, r3]
200075fe:	3301      	adds	r3, #1
20007600:	4293      	cmp	r3, r2
20007602:	d1fb      	bne.n	200075fc <memset+0xc>
20007604:	bc30      	pop	{r4, r5}
20007606:	4770      	bx	lr
20007608:	eb00 0c02 	add.w	ip, r0, r2
2000760c:	4603      	mov	r3, r0
2000760e:	e001      	b.n	20007614 <memset+0x24>
20007610:	f803 1c01 	strb.w	r1, [r3, #-1]
20007614:	f003 0403 	and.w	r4, r3, #3
20007618:	461a      	mov	r2, r3
2000761a:	3301      	adds	r3, #1
2000761c:	2c00      	cmp	r4, #0
2000761e:	d1f7      	bne.n	20007610 <memset+0x20>
20007620:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20007624:	ebc2 040c 	rsb	r4, r2, ip
20007628:	fb03 f301 	mul.w	r3, r3, r1
2000762c:	e01f      	b.n	2000766e <memset+0x7e>
2000762e:	f842 3c40 	str.w	r3, [r2, #-64]
20007632:	f842 3c3c 	str.w	r3, [r2, #-60]
20007636:	f842 3c38 	str.w	r3, [r2, #-56]
2000763a:	f842 3c34 	str.w	r3, [r2, #-52]
2000763e:	f842 3c30 	str.w	r3, [r2, #-48]
20007642:	f842 3c2c 	str.w	r3, [r2, #-44]
20007646:	f842 3c28 	str.w	r3, [r2, #-40]
2000764a:	f842 3c24 	str.w	r3, [r2, #-36]
2000764e:	f842 3c20 	str.w	r3, [r2, #-32]
20007652:	f842 3c1c 	str.w	r3, [r2, #-28]
20007656:	f842 3c18 	str.w	r3, [r2, #-24]
2000765a:	f842 3c14 	str.w	r3, [r2, #-20]
2000765e:	f842 3c10 	str.w	r3, [r2, #-16]
20007662:	f842 3c0c 	str.w	r3, [r2, #-12]
20007666:	f842 3c08 	str.w	r3, [r2, #-8]
2000766a:	f842 3c04 	str.w	r3, [r2, #-4]
2000766e:	4615      	mov	r5, r2
20007670:	3240      	adds	r2, #64	; 0x40
20007672:	2c3f      	cmp	r4, #63	; 0x3f
20007674:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20007678:	dcd9      	bgt.n	2000762e <memset+0x3e>
2000767a:	462a      	mov	r2, r5
2000767c:	ebc5 040c 	rsb	r4, r5, ip
20007680:	e007      	b.n	20007692 <memset+0xa2>
20007682:	f842 3c10 	str.w	r3, [r2, #-16]
20007686:	f842 3c0c 	str.w	r3, [r2, #-12]
2000768a:	f842 3c08 	str.w	r3, [r2, #-8]
2000768e:	f842 3c04 	str.w	r3, [r2, #-4]
20007692:	4615      	mov	r5, r2
20007694:	3210      	adds	r2, #16
20007696:	2c0f      	cmp	r4, #15
20007698:	f1a4 0410 	sub.w	r4, r4, #16
2000769c:	dcf1      	bgt.n	20007682 <memset+0x92>
2000769e:	462a      	mov	r2, r5
200076a0:	ebc5 050c 	rsb	r5, r5, ip
200076a4:	e001      	b.n	200076aa <memset+0xba>
200076a6:	f842 3c04 	str.w	r3, [r2, #-4]
200076aa:	4614      	mov	r4, r2
200076ac:	3204      	adds	r2, #4
200076ae:	2d03      	cmp	r5, #3
200076b0:	f1a5 0504 	sub.w	r5, r5, #4
200076b4:	dcf7      	bgt.n	200076a6 <memset+0xb6>
200076b6:	e001      	b.n	200076bc <memset+0xcc>
200076b8:	f804 1b01 	strb.w	r1, [r4], #1
200076bc:	4564      	cmp	r4, ip
200076be:	d3fb      	bcc.n	200076b8 <memset+0xc8>
200076c0:	e7a0      	b.n	20007604 <memset+0x14>
200076c2:	bf00      	nop

200076c4 <C.48.4660>:
200076c4:	6a10 0000                                   .j..

200076c8 <C.40.4595>:
200076c8:	6020 0000 6d63 5f64 6974 656d 0072 0000      `..cmd_timer...
200076d8:	4449 454c 0000 0000 2509 0963 7525 2509     IDLE.....%c.%u.%
200076e8:	0975 7525 0a0d 0000 2509 0975 2509 2575     u.%u.....%u..%u%
200076f8:	0d25 000a 2509 0975 3c09 2531 0d25 000a     %....%u..<1%%...
20007708:	6d54 2072 7653 0063                         Tmr Svc.

20007710 <xHeapStructSize>:
20007710:	0008 0000                                   ....

20007714 <pcInterruptPriorityRegisters>:
20007714:	e3f0 e000 4b48 0000 6150 6c79 616f 0064     ....HK..Payload.
20007724:	6175 7472 695f 7172 0000 0000 4b50 5f54     uart_irq....PKT_
20007734:	6954 656d 0072 0000                         Timer...

2000773c <C.135.6382>:
2000773c:	0020 000f                                    ...

20007740 <C.136.6383>:
20007740:	0030 0001                                   0...

20007744 <C.137.6384>:
20007744:	0028 0001                                   (...

20007748 <C.18.3459>:
20007748:	0100 0100 0202 0303                         ........

20007750 <_init>:
20007750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20007752:	bf00      	nop
20007754:	bcf8      	pop	{r3, r4, r5, r6, r7}
20007756:	bc08      	pop	{r3}
20007758:	469e      	mov	lr, r3
2000775a:	4770      	bx	lr

2000775c <_fini>:
2000775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000775e:	bf00      	nop
20007760:	bcf8      	pop	{r3, r4, r5, r6, r7}
20007762:	bc08      	pop	{r3}
20007764:	469e      	mov	lr, r3
20007766:	4770      	bx	lr

20007768 <__frame_dummy_init_array_entry>:
20007768:	0305 2000                                   ... 

2000776c <__do_global_dtors_aux_fini_array_entry>:
2000776c:	02f1 2000                                   ... 
