
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006cc0  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  20006cc0  20006cc0  0000ecc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006b00  20006d20  20006d20  0000ed20  2**2
                  ALLOC
  3 .stack        00000400  2000d820  2000d820  0000ed20  2**0
                  ALLOC
  4 .comment      00000408  00000000  00000000  0000ed20  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000b50  00000000  00000000  0000f128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001bca  00000000  00000000  0000fc78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d625  00000000  00000000  00011842  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002130  00000000  00000000  0001ee67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000e5b9  00000000  00000000  00020f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000025d4  00000000  00000000  0002f550  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000049e5  00000000  00000000  00031b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e98  00000000  00000000  00036509  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000b3025  00000000  00000000  0003a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  000ed3c6  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000ad8  00000000  00000000  000ed3eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	20003ab1 	.word	0x20003ab1
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	20003ce1 	.word	0x20003ce1
2000003c:	20003d31 	.word	0x20003d31
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20000213 	.word	0x20000213
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20000219 	.word	0x20000219
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	20004d59 	.word	0x20004d59
2000006c:	20004d7d 	.word	0x20004d7d
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	200048a9 	.word	0x200048a9
200000cc:	200048bd 	.word	0x200048bd
200000d0:	200048d1 	.word	0x200048d1
200000d4:	200048e5 	.word	0x200048e5
200000d8:	200048f9 	.word	0x200048f9
200000dc:	2000490d 	.word	0x2000490d
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>

20000212 <I2C0_IRQHandler>:
20000212:	e7fe      	b.n	20000212 <I2C0_IRQHandler>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>

20000218 <I2C1_IRQHandler>:
20000218:	e7fe      	b.n	20000218 <I2C1_IRQHandler>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	20006559 	.word	0x20006559
200002b4:	00000000 	.word	0x00000000
200002b8:	20000000 	.word	0x20000000
200002bc:	20000000 	.word	0x20000000
200002c0:	20006cc0 	.word	0x20006cc0
200002c4:	20006cc0 	.word	0x20006cc0
200002c8:	20006cc0 	.word	0x20006cc0
200002cc:	20006d20 	.word	0x20006d20
200002d0:	00000000 	.word	0x00000000
200002d4:	20006d20 	.word	0x20006d20
200002d8:	2000d820 	.word	0x2000d820
200002dc:	20006965 	.word	0x20006965
200002e0:	2000040d 	.word	0x2000040d
	...

200002f0 <__do_global_dtors_aux>:
200002f0:	f646 5320 	movw	r3, #27936	; 0x6d20
200002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	b90a      	cbnz	r2, 20000300 <__do_global_dtors_aux+0x10>
200002fc:	2001      	movs	r0, #1
200002fe:	7018      	strb	r0, [r3, #0]
20000300:	4770      	bx	lr
20000302:	bf00      	nop

20000304 <frame_dummy>:
20000304:	f646 40c0 	movw	r0, #27840	; 0x6cc0
20000308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000030c:	b508      	push	{r3, lr}
2000030e:	6803      	ldr	r3, [r0, #0]
20000310:	b12b      	cbz	r3, 2000031e <frame_dummy+0x1a>
20000312:	f240 0300 	movw	r3, #0
20000316:	f2c0 0300 	movt	r3, #0
2000031a:	b103      	cbz	r3, 2000031e <frame_dummy+0x1a>
2000031c:	4798      	blx	r3
2000031e:	bd08      	pop	{r3, pc}

20000320 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
20000320:	b480      	push	{r7}
20000322:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
20000324:	f64e 53fc 	movw	r3, #60924	; 0xedfc
20000328:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000032c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
20000330:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000334:	6812      	ldr	r2, [r2, #0]
20000336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2000033a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
2000033c:	f241 0304 	movw	r3, #4100	; 0x1004
20000340:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000344:	f04f 0200 	mov.w	r2, #0
20000348:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
2000034a:	f241 0300 	movw	r3, #4096	; 0x1000
2000034e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000352:	f241 0200 	movw	r2, #4096	; 0x1000
20000356:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000035a:	6812      	ldr	r2, [r2, #0]
2000035c:	f042 0201 	orr.w	r2, r2, #1
20000360:	601a      	str	r2, [r3, #0]
}
20000362:	46bd      	mov	sp, r7
20000364:	bc80      	pop	{r7}
20000366:	4770      	bx	lr

20000368 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
20000368:	b480      	push	{r7}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
2000036e:	f241 0304 	movw	r3, #4100	; 0x1004
20000372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
2000037a:	f646 5324 	movw	r3, #27940	; 0x6d24
2000037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	687a      	ldr	r2, [r7, #4]
20000386:	429a      	cmp	r2, r3
20000388:	d20b      	bcs.n	200003a2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
2000038a:	f646 5328 	movw	r3, #27944	; 0x6d28
2000038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	f103 0201 	add.w	r2, r3, #1
20000398:	f646 5328 	movw	r3, #27944	; 0x6d28
2000039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003a0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
200003a2:	f646 5324 	movw	r3, #27940	; 0x6d24
200003a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003aa:	687a      	ldr	r2, [r7, #4]
200003ac:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
200003ae:	f646 5304 	movw	r3, #27908	; 0x6d04
200003b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003b6:	681a      	ldr	r2, [r3, #0]
200003b8:	f641 537f 	movw	r3, #7551	; 0x1d7f
200003bc:	f2c0 432c 	movt	r3, #1068	; 0x42c
200003c0:	429a      	cmp	r2, r3
200003c2:	d80e      	bhi.n	200003e2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	ea4f 3353 	mov.w	r3, r3, lsr #13
200003ca:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
200003cc:	f646 5328 	movw	r3, #27944	; 0x6d28
200003d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
200003da:	687a      	ldr	r2, [r7, #4]
200003dc:	4413      	add	r3, r2
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e00d      	b.n	200003fe <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	ea4f 3393 	mov.w	r3, r3, lsr #14
200003e8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
200003ea:	f646 5328 	movw	r3, #27944	; 0x6d28
200003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	ea4f 4383 	mov.w	r3, r3, lsl #18
200003f8:	687a      	ldr	r2, [r7, #4]
200003fa:	4413      	add	r3, r2
200003fc:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
200003fe:	687b      	ldr	r3, [r7, #4]
}
20000400:	4618      	mov	r0, r3
20000402:	f107 070c 	add.w	r7, r7, #12
20000406:	46bd      	mov	sp, r7
20000408:	bc80      	pop	{r7}
2000040a:	4770      	bx	lr

2000040c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	of this file. */
	#if configCREATE_SIMPLE_BLINKY_DEMO_ONLY == 1
	{
		//main_blinky();

		demo();
20000410:	f004 f922 	bl	20004658 <demo>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
20000414:	f04f 0300 	mov.w	r3, #0
}
20000418:	4618      	mov	r0, r3
2000041a:	bd80      	pop	{r7, pc}

2000041c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
2000041c:	b480      	push	{r7}
2000041e:	b083      	sub	sp, #12
20000420:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000426:	f383 8811 	msr	BASEPRI, r3
2000042a:	f3bf 8f6f 	isb	sy
2000042e:	f3bf 8f4f 	dsb	sy
20000432:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000434:	e7fe      	b.n	20000434 <vApplicationMallocFailedHook+0x18>
20000436:	bf00      	nop

20000438 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
20000438:	b480      	push	{r7}
2000043a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
2000043c:	46bd      	mov	sp, r7
2000043e:	bc80      	pop	{r7}
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
20000444:	b480      	push	{r7}
20000446:	b085      	sub	sp, #20
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
2000044c:	6039      	str	r1, [r7, #0]
2000044e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000452:	f383 8811 	msr	BASEPRI, r3
20000456:	f3bf 8f6f 	isb	sy
2000045a:	f3bf 8f4f 	dsb	sy
2000045e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000460:	e7fe      	b.n	20000460 <vApplicationStackOverflowHook+0x1c>
20000462:	bf00      	nop

20000464 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
20000464:	b580      	push	{r7, lr}
20000466:	b092      	sub	sp, #72	; 0x48
20000468:	af04      	add	r7, sp, #16
2000046a:	60f8      	str	r0, [r7, #12]
2000046c:	60b9      	str	r1, [r7, #8]
2000046e:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
20000470:	f646 431c 	movw	r3, #27676	; 0x6c1c
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	881b      	ldrh	r3, [r3, #0]
2000047a:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
2000047c:	f04f 0328 	mov.w	r3, #40	; 0x28
20000480:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
20000484:	f04f 032a 	mov.w	r3, #42	; 0x2a
20000488:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
2000048c:	f04f 032c 	mov.w	r3, #44	; 0x2c
20000490:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
20000494:	f04f 0329 	mov.w	r3, #41	; 0x29
20000498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
2000049c:	f04f 032b 	mov.w	r3, #43	; 0x2b
200004a0:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
200004a4:	f04f 032d 	mov.w	r3, #45	; 0x2d
200004a8:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
200004aa:	f04f 0300 	mov.w	r3, #0
200004ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
200004b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
200004b6:	f04f 0200 	mov.w	r2, #0
200004ba:	9200      	str	r2, [sp, #0]
200004bc:	f24d 6004 	movw	r0, #54788	; 0xd604
200004c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004c4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200004c8:	461a      	mov	r2, r3
200004ca:	f04f 0302 	mov.w	r3, #2
200004ce:	f005 f87b 	bl	200055c8 <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
200004d2:	f107 0318 	add.w	r3, r7, #24
200004d6:	f04f 0200 	mov.w	r2, #0
200004da:	9200      	str	r2, [sp, #0]
200004dc:	f24d 6004 	movw	r0, #54788	; 0xd604
200004e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004e4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200004e8:	461a      	mov	r2, r3
200004ea:	f04f 0301 	mov.w	r3, #1
200004ee:	f005 f8dd 	bl	200056ac <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200004f2:	f24d 6004 	movw	r0, #54788	; 0xd604
200004f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004fa:	f04f 0100 	mov.w	r1, #0
200004fe:	f005 f9df 	bl	200058c0 <I2C_wait_complete>
20000502:	4603      	mov	r3, r0
20000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000508:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000050c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000510:	4413      	add	r3, r2
20000512:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
20000516:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000051a:	f107 0218 	add.w	r2, r7, #24
2000051e:	9200      	str	r2, [sp, #0]
20000520:	f04f 0201 	mov.w	r2, #1
20000524:	9201      	str	r2, [sp, #4]
20000526:	f04f 0200 	mov.w	r2, #0
2000052a:	9202      	str	r2, [sp, #8]
2000052c:	f24d 6004 	movw	r0, #54788	; 0xd604
20000530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000534:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000538:	461a      	mov	r2, r3
2000053a:	f04f 0301 	mov.w	r3, #1
2000053e:	f005 f927 	bl	20005790 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000542:	f24d 6004 	movw	r0, #54788	; 0xd604
20000546:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054a:	f04f 0100 	mov.w	r1, #0
2000054e:	f005 f9b7 	bl	200058c0 <I2C_wait_complete>
20000552:	4603      	mov	r3, r0
20000554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000558:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000560:	4413      	add	r3, r2
20000562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
20000566:	f107 031c 	add.w	r3, r7, #28
2000056a:	f107 0214 	add.w	r2, r7, #20
2000056e:	9200      	str	r2, [sp, #0]
20000570:	f04f 0201 	mov.w	r2, #1
20000574:	9201      	str	r2, [sp, #4]
20000576:	f04f 0200 	mov.w	r2, #0
2000057a:	9202      	str	r2, [sp, #8]
2000057c:	f24d 6004 	movw	r0, #54788	; 0xd604
20000580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000584:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000588:	461a      	mov	r2, r3
2000058a:	f04f 0301 	mov.w	r3, #1
2000058e:	f005 f8ff 	bl	20005790 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000592:	f24d 6004 	movw	r0, #54788	; 0xd604
20000596:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059a:	f04f 0100 	mov.w	r1, #0
2000059e:	f005 f98f 	bl	200058c0 <I2C_wait_complete>
200005a2:	4603      	mov	r3, r0
200005a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200005b0:	4413      	add	r3, r2
200005b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200005b6:	7d3b      	ldrb	r3, [r7, #20]
200005b8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200005bc:	b29a      	uxth	r2, r3
200005be:	7e3b      	ldrb	r3, [r7, #24]
200005c0:	ea42 0303 	orr.w	r3, r2, r3
200005c4:	b29b      	uxth	r3, r3
200005c6:	b29a      	uxth	r2, r3
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	881b      	ldrh	r3, [r3, #0]
200005d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200005d4:	d906      	bls.n	200005e4 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
200005d6:	687b      	ldr	r3, [r7, #4]
200005d8:	881b      	ldrh	r3, [r3, #0]
200005da:	ea6f 0303 	mvn.w	r3, r3
200005de:	b29a      	uxth	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
200005e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200005e8:	f107 0218 	add.w	r2, r7, #24
200005ec:	9200      	str	r2, [sp, #0]
200005ee:	f04f 0201 	mov.w	r2, #1
200005f2:	9201      	str	r2, [sp, #4]
200005f4:	f04f 0200 	mov.w	r2, #0
200005f8:	9202      	str	r2, [sp, #8]
200005fa:	f24d 6004 	movw	r0, #54788	; 0xd604
200005fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000602:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000606:	461a      	mov	r2, r3
20000608:	f04f 0301 	mov.w	r3, #1
2000060c:	f005 f8c0 	bl	20005790 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000610:	f24d 6004 	movw	r0, #54788	; 0xd604
20000614:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000618:	f04f 0100 	mov.w	r1, #0
2000061c:	f005 f950 	bl	200058c0 <I2C_wait_complete>
20000620:	4603      	mov	r3, r0
20000622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000626:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000062a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000062e:	4413      	add	r3, r2
20000630:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
20000634:	f107 0320 	add.w	r3, r7, #32
20000638:	f107 0214 	add.w	r2, r7, #20
2000063c:	9200      	str	r2, [sp, #0]
2000063e:	f04f 0201 	mov.w	r2, #1
20000642:	9201      	str	r2, [sp, #4]
20000644:	f04f 0200 	mov.w	r2, #0
20000648:	9202      	str	r2, [sp, #8]
2000064a:	f24d 6004 	movw	r0, #54788	; 0xd604
2000064e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000652:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000656:	461a      	mov	r2, r3
20000658:	f04f 0301 	mov.w	r3, #1
2000065c:	f005 f898 	bl	20005790 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000660:	f24d 6004 	movw	r0, #54788	; 0xd604
20000664:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000668:	f04f 0100 	mov.w	r1, #0
2000066c:	f005 f928 	bl	200058c0 <I2C_wait_complete>
20000670:	4603      	mov	r3, r0
20000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000676:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000067a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000067e:	4413      	add	r3, r2
20000680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000684:	7d3b      	ldrb	r3, [r7, #20]
20000686:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000068a:	b29a      	uxth	r2, r3
2000068c:	7e3b      	ldrb	r3, [r7, #24]
2000068e:	ea42 0303 	orr.w	r3, r2, r3
20000692:	b29b      	uxth	r3, r3
20000694:	b29a      	uxth	r2, r3
20000696:	68bb      	ldr	r3, [r7, #8]
20000698:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
2000069a:	68bb      	ldr	r3, [r7, #8]
2000069c:	881b      	ldrh	r3, [r3, #0]
2000069e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200006a2:	d906      	bls.n	200006b2 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
200006a4:	68bb      	ldr	r3, [r7, #8]
200006a6:	881b      	ldrh	r3, [r3, #0]
200006a8:	ea6f 0303 	mvn.w	r3, r3
200006ac:	b29a      	uxth	r2, r3
200006ae:	68bb      	ldr	r3, [r7, #8]
200006b0:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
200006b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
200006b6:	f107 0218 	add.w	r2, r7, #24
200006ba:	9200      	str	r2, [sp, #0]
200006bc:	f04f 0201 	mov.w	r2, #1
200006c0:	9201      	str	r2, [sp, #4]
200006c2:	f04f 0200 	mov.w	r2, #0
200006c6:	9202      	str	r2, [sp, #8]
200006c8:	f24d 6004 	movw	r0, #54788	; 0xd604
200006cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006d0:	f04f 016a 	mov.w	r1, #106	; 0x6a
200006d4:	461a      	mov	r2, r3
200006d6:	f04f 0301 	mov.w	r3, #1
200006da:	f005 f859 	bl	20005790 <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200006de:	f24d 6004 	movw	r0, #54788	; 0xd604
200006e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006e6:	f04f 0100 	mov.w	r1, #0
200006ea:	f005 f8e9 	bl	200058c0 <I2C_wait_complete>
200006ee:	4603      	mov	r3, r0
200006f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200006f4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200006f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200006fc:	4413      	add	r3, r2
200006fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
20000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000706:	f107 0214 	add.w	r2, r7, #20
2000070a:	9200      	str	r2, [sp, #0]
2000070c:	f04f 0201 	mov.w	r2, #1
20000710:	9201      	str	r2, [sp, #4]
20000712:	f04f 0200 	mov.w	r2, #0
20000716:	9202      	str	r2, [sp, #8]
20000718:	f24d 6004 	movw	r0, #54788	; 0xd604
2000071c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000720:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000724:	461a      	mov	r2, r3
20000726:	f04f 0301 	mov.w	r3, #1
2000072a:	f005 f831 	bl	20005790 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000072e:	f24d 6004 	movw	r0, #54788	; 0xd604
20000732:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000736:	f04f 0100 	mov.w	r1, #0
2000073a:	f005 f8c1 	bl	200058c0 <I2C_wait_complete>
2000073e:	4603      	mov	r3, r0
20000740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000744:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000074c:	4413      	add	r3, r2
2000074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000752:	7d3b      	ldrb	r3, [r7, #20]
20000754:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000758:	b29a      	uxth	r2, r3
2000075a:	7e3b      	ldrb	r3, [r7, #24]
2000075c:	ea42 0303 	orr.w	r3, r2, r3
20000760:	b29b      	uxth	r3, r3
20000762:	b29a      	uxth	r2, r3
20000764:	68fb      	ldr	r3, [r7, #12]
20000766:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
20000768:	68fb      	ldr	r3, [r7, #12]
2000076a:	881b      	ldrh	r3, [r3, #0]
2000076c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000770:	d906      	bls.n	20000780 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
20000772:	68fb      	ldr	r3, [r7, #12]
20000774:	881b      	ldrh	r3, [r3, #0]
20000776:	ea6f 0303 	mvn.w	r3, r3
2000077a:	b29a      	uxth	r2, r3
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	801a      	strh	r2, [r3, #0]
	}

	return status;
20000780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
20000784:	4618      	mov	r0, r3
20000786:	f107 0738 	add.w	r7, r7, #56	; 0x38
2000078a:	46bd      	mov	sp, r7
2000078c:	bd80      	pop	{r7, pc}
2000078e:	bf00      	nop

20000790 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
20000790:	b580      	push	{r7, lr}
20000792:	b092      	sub	sp, #72	; 0x48
20000794:	af04      	add	r7, sp, #16
20000796:	60f8      	str	r0, [r7, #12]
20000798:	60b9      	str	r1, [r7, #8]
2000079a:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
2000079c:	f646 4318 	movw	r3, #27672	; 0x6c18
200007a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007a4:	881b      	ldrh	r3, [r3, #0]
200007a6:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
200007a8:	f04f 0318 	mov.w	r3, #24
200007ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
200007b0:	f04f 031a 	mov.w	r3, #26
200007b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
200007b8:	f04f 031c 	mov.w	r3, #28
200007bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
200007c0:	f04f 0319 	mov.w	r3, #25
200007c4:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
200007c8:	f04f 031b 	mov.w	r3, #27
200007cc:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
200007ce:	f04f 031d 	mov.w	r3, #29
200007d2:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
200007d4:	f04f 036a 	mov.w	r3, #106	; 0x6a
200007d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
200007dc:	f04f 0300 	mov.w	r3, #0
200007e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
200007e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
200007ec:	f107 0114 	add.w	r1, r7, #20
200007f0:	9100      	str	r1, [sp, #0]
200007f2:	f04f 0101 	mov.w	r1, #1
200007f6:	9101      	str	r1, [sp, #4]
200007f8:	f04f 0100 	mov.w	r1, #0
200007fc:	9102      	str	r1, [sp, #8]
200007fe:	f24d 6004 	movw	r0, #54788	; 0xd604
20000802:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000806:	4611      	mov	r1, r2
20000808:	461a      	mov	r2, r3
2000080a:	f04f 0302 	mov.w	r3, #2
2000080e:	f004 ffbf 	bl	20005790 <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000812:	f24d 6004 	movw	r0, #54788	; 0xd604
20000816:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000081a:	f04f 0100 	mov.w	r1, #0
2000081e:	f005 f84f 	bl	200058c0 <I2C_wait_complete>
20000822:	4603      	mov	r3, r0
20000824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000828:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000082c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000830:	4413      	add	r3, r2
20000832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
20000836:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000083e:	f107 0114 	add.w	r1, r7, #20
20000842:	9100      	str	r1, [sp, #0]
20000844:	f04f 0101 	mov.w	r1, #1
20000848:	9101      	str	r1, [sp, #4]
2000084a:	f04f 0100 	mov.w	r1, #0
2000084e:	9102      	str	r1, [sp, #8]
20000850:	f24d 6004 	movw	r0, #54788	; 0xd604
20000854:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000858:	4611      	mov	r1, r2
2000085a:	461a      	mov	r2, r3
2000085c:	f04f 0301 	mov.w	r3, #1
20000860:	f004 ff96 	bl	20005790 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000864:	f24d 6004 	movw	r0, #54788	; 0xd604
20000868:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086c:	f04f 0100 	mov.w	r1, #0
20000870:	f005 f826 	bl	200058c0 <I2C_wait_complete>
20000874:	4603      	mov	r3, r0
20000876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
2000087a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000087e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000882:	4413      	add	r3, r2
20000884:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
20000888:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000088c:	f107 0318 	add.w	r3, r7, #24
20000890:	f107 0110 	add.w	r1, r7, #16
20000894:	9100      	str	r1, [sp, #0]
20000896:	f04f 0101 	mov.w	r1, #1
2000089a:	9101      	str	r1, [sp, #4]
2000089c:	f04f 0100 	mov.w	r1, #0
200008a0:	9102      	str	r1, [sp, #8]
200008a2:	f24d 6004 	movw	r0, #54788	; 0xd604
200008a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008aa:	4611      	mov	r1, r2
200008ac:	461a      	mov	r2, r3
200008ae:	f04f 0301 	mov.w	r3, #1
200008b2:	f004 ff6d 	bl	20005790 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200008b6:	f24d 6004 	movw	r0, #54788	; 0xd604
200008ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008be:	f04f 0100 	mov.w	r1, #0
200008c2:	f004 fffd 	bl	200058c0 <I2C_wait_complete>
200008c6:	4603      	mov	r3, r0
200008c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200008cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200008d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200008d4:	4413      	add	r3, r2
200008d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200008da:	7c3b      	ldrb	r3, [r7, #16]
200008dc:	ea4f 2303 	mov.w	r3, r3, lsl #8
200008e0:	b29a      	uxth	r2, r3
200008e2:	7d3b      	ldrb	r3, [r7, #20]
200008e4:	ea42 0303 	orr.w	r3, r2, r3
200008e8:	b29b      	uxth	r3, r3
200008ea:	b29a      	uxth	r2, r3
200008ec:	68fb      	ldr	r3, [r7, #12]
200008ee:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
200008f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200008f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
200008f8:	f107 0114 	add.w	r1, r7, #20
200008fc:	9100      	str	r1, [sp, #0]
200008fe:	f04f 0101 	mov.w	r1, #1
20000902:	9101      	str	r1, [sp, #4]
20000904:	f04f 0100 	mov.w	r1, #0
20000908:	9102      	str	r1, [sp, #8]
2000090a:	f24d 6004 	movw	r0, #54788	; 0xd604
2000090e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000912:	4611      	mov	r1, r2
20000914:	461a      	mov	r2, r3
20000916:	f04f 0301 	mov.w	r3, #1
2000091a:	f004 ff39 	bl	20005790 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000091e:	f24d 6004 	movw	r0, #54788	; 0xd604
20000922:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000926:	f04f 0100 	mov.w	r1, #0
2000092a:	f004 ffc9 	bl	200058c0 <I2C_wait_complete>
2000092e:	4603      	mov	r3, r0
20000930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000934:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000093c:	4413      	add	r3, r2
2000093e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
20000942:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000946:	f107 031c 	add.w	r3, r7, #28
2000094a:	f107 0110 	add.w	r1, r7, #16
2000094e:	9100      	str	r1, [sp, #0]
20000950:	f04f 0101 	mov.w	r1, #1
20000954:	9101      	str	r1, [sp, #4]
20000956:	f04f 0100 	mov.w	r1, #0
2000095a:	9102      	str	r1, [sp, #8]
2000095c:	f24d 6004 	movw	r0, #54788	; 0xd604
20000960:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000964:	4611      	mov	r1, r2
20000966:	461a      	mov	r2, r3
20000968:	f04f 0301 	mov.w	r3, #1
2000096c:	f004 ff10 	bl	20005790 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000970:	f24d 6004 	movw	r0, #54788	; 0xd604
20000974:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000978:	f04f 0100 	mov.w	r1, #0
2000097c:	f004 ffa0 	bl	200058c0 <I2C_wait_complete>
20000980:	4603      	mov	r3, r0
20000982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000986:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000098a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000098e:	4413      	add	r3, r2
20000990:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000994:	7c3b      	ldrb	r3, [r7, #16]
20000996:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000099a:	b29a      	uxth	r2, r3
2000099c:	7d3b      	ldrb	r3, [r7, #20]
2000099e:	ea42 0303 	orr.w	r3, r2, r3
200009a2:	b29b      	uxth	r3, r3
200009a4:	b29a      	uxth	r2, r3
200009a6:	68bb      	ldr	r3, [r7, #8]
200009a8:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
200009aa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200009b2:	f107 0114 	add.w	r1, r7, #20
200009b6:	9100      	str	r1, [sp, #0]
200009b8:	f04f 0101 	mov.w	r1, #1
200009bc:	9101      	str	r1, [sp, #4]
200009be:	f04f 0100 	mov.w	r1, #0
200009c2:	9102      	str	r1, [sp, #8]
200009c4:	f24d 6004 	movw	r0, #54788	; 0xd604
200009c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009cc:	4611      	mov	r1, r2
200009ce:	461a      	mov	r2, r3
200009d0:	f04f 0301 	mov.w	r3, #1
200009d4:	f004 fedc 	bl	20005790 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200009d8:	f24d 6004 	movw	r0, #54788	; 0xd604
200009dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009e0:	f04f 0100 	mov.w	r1, #0
200009e4:	f004 ff6c 	bl	200058c0 <I2C_wait_complete>
200009e8:	4603      	mov	r3, r0
200009ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200009ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200009f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200009f6:	4413      	add	r3, r2
200009f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
200009fc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a00:	f107 0320 	add.w	r3, r7, #32
20000a04:	f107 0110 	add.w	r1, r7, #16
20000a08:	9100      	str	r1, [sp, #0]
20000a0a:	f04f 0101 	mov.w	r1, #1
20000a0e:	9101      	str	r1, [sp, #4]
20000a10:	f04f 0100 	mov.w	r1, #0
20000a14:	9102      	str	r1, [sp, #8]
20000a16:	f24d 6004 	movw	r0, #54788	; 0xd604
20000a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a1e:	4611      	mov	r1, r2
20000a20:	461a      	mov	r2, r3
20000a22:	f04f 0301 	mov.w	r3, #1
20000a26:	f004 feb3 	bl	20005790 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a2a:	f24d 6004 	movw	r0, #54788	; 0xd604
20000a2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a32:	f04f 0100 	mov.w	r1, #0
20000a36:	f004 ff43 	bl	200058c0 <I2C_wait_complete>
20000a3a:	4603      	mov	r3, r0
20000a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a40:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a48:	4413      	add	r3, r2
20000a4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000a4e:	7c3b      	ldrb	r3, [r7, #16]
20000a50:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000a54:	b29a      	uxth	r2, r3
20000a56:	7d3b      	ldrb	r3, [r7, #20]
20000a58:	ea42 0303 	orr.w	r3, r2, r3
20000a5c:	b29b      	uxth	r3, r3
20000a5e:	b29a      	uxth	r2, r3
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	801a      	strh	r2, [r3, #0]

		return status;
20000a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
20000a68:	4618      	mov	r0, r3
20000a6a:	f107 0738 	add.w	r7, r7, #56	; 0x38
20000a6e:	46bd      	mov	sp, r7
20000a70:	bd80      	pop	{r7, pc}
20000a72:	bf00      	nop

20000a74 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
20000a74:	b580      	push	{r7, lr}
20000a76:	b08a      	sub	sp, #40	; 0x28
20000a78:	af04      	add	r7, sp, #16
20000a7a:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
20000a7c:	f04f 0315 	mov.w	r3, #21
20000a80:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
20000a82:	f04f 0316 	mov.w	r3, #22
20000a86:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
20000a88:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000a8c:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
20000a8e:	7dba      	ldrb	r2, [r7, #22]
20000a90:	f107 0314 	add.w	r3, r7, #20
20000a94:	f107 010c 	add.w	r1, r7, #12
20000a98:	9100      	str	r1, [sp, #0]
20000a9a:	f04f 0101 	mov.w	r1, #1
20000a9e:	9101      	str	r1, [sp, #4]
20000aa0:	f04f 0100 	mov.w	r1, #0
20000aa4:	9102      	str	r1, [sp, #8]
20000aa6:	f24d 6004 	movw	r0, #54788	; 0xd604
20000aaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aae:	4611      	mov	r1, r2
20000ab0:	461a      	mov	r2, r3
20000ab2:	f04f 0301 	mov.w	r3, #1
20000ab6:	f004 fe6b 	bl	20005790 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000aba:	f24d 6004 	movw	r0, #54788	; 0xd604
20000abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ac2:	f04f 0100 	mov.w	r1, #0
20000ac6:	f004 fefb 	bl	200058c0 <I2C_wait_complete>
20000aca:	4603      	mov	r3, r0
20000acc:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
20000ace:	7dba      	ldrb	r2, [r7, #22]
20000ad0:	f107 0310 	add.w	r3, r7, #16
20000ad4:	f107 0108 	add.w	r1, r7, #8
20000ad8:	9100      	str	r1, [sp, #0]
20000ada:	f04f 0101 	mov.w	r1, #1
20000ade:	9101      	str	r1, [sp, #4]
20000ae0:	f04f 0100 	mov.w	r1, #0
20000ae4:	9102      	str	r1, [sp, #8]
20000ae6:	f24d 6004 	movw	r0, #54788	; 0xd604
20000aea:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aee:	4611      	mov	r1, r2
20000af0:	461a      	mov	r2, r3
20000af2:	f04f 0301 	mov.w	r3, #1
20000af6:	f004 fe4b 	bl	20005790 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000afa:	f24d 6004 	movw	r0, #54788	; 0xd604
20000afe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b02:	f04f 0100 	mov.w	r1, #0
20000b06:	f004 fedb 	bl	200058c0 <I2C_wait_complete>
20000b0a:	4603      	mov	r3, r0
20000b0c:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
20000b0e:	7b3b      	ldrb	r3, [r7, #12]
20000b10:	461a      	mov	r2, r3
20000b12:	7a3b      	ldrb	r3, [r7, #8]
20000b14:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b18:	b29b      	uxth	r3, r3
20000b1a:	ea42 0303 	orr.w	r3, r2, r3
20000b1e:	b29b      	uxth	r3, r3
20000b20:	b29a      	uxth	r2, r3
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	801a      	strh	r2, [r3, #0]

		return 0;
20000b26:	f04f 0300 	mov.w	r3, #0

}
20000b2a:	4618      	mov	r0, r3
20000b2c:	f107 0718 	add.w	r7, r7, #24
20000b30:	46bd      	mov	sp, r7
20000b32:	bd80      	pop	{r7, pc}

20000b34 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
20000b34:	b580      	push	{r7, lr}
20000b36:	b086      	sub	sp, #24
20000b38:	af02      	add	r7, sp, #8
20000b3a:	60b9      	str	r1, [r7, #8]
20000b3c:	4613      	mov	r3, r2
20000b3e:	4602      	mov	r2, r0
20000b40:	73fa      	strb	r2, [r7, #15]
20000b42:	71fb      	strb	r3, [r7, #7]
     count = 0;
20000b44:	f24d 5328 	movw	r3, #54568	; 0xd528
20000b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b4c:	f04f 0200 	mov.w	r2, #0
20000b50:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000b52:	e032      	b.n	20000bba <vc_write+0x86>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
20000b54:	79fb      	ldrb	r3, [r7, #7]
20000b56:	7bfa      	ldrb	r2, [r7, #15]
20000b58:	f04f 0100 	mov.w	r1, #0
20000b5c:	9100      	str	r1, [sp, #0]
20000b5e:	f24d 0070 	movw	r0, #53360	; 0xd070
20000b62:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b66:	4611      	mov	r1, r2
20000b68:	68ba      	ldr	r2, [r7, #8]
20000b6a:	f004 fd2d 	bl	200055c8 <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000b6e:	f24d 0070 	movw	r0, #53360	; 0xd070
20000b72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b76:	f04f 0100 	mov.w	r1, #0
20000b7a:	f004 fea1 	bl	200058c0 <I2C_wait_complete>
20000b7e:	4603      	mov	r3, r0
20000b80:	461a      	mov	r2, r3
20000b82:	f24d 532a 	movw	r3, #54570	; 0xd52a
20000b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b8a:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000b8c:	f24d 532a 	movw	r3, #54570	; 0xd52a
20000b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b94:	781b      	ldrb	r3, [r3, #0]
20000b96:	2b00      	cmp	r3, #0
20000b98:	d102      	bne.n	20000ba0 <vc_write+0x6c>
            return 0;
20000b9a:	f04f 0300 	mov.w	r3, #0
20000b9e:	e018      	b.n	20000bd2 <vc_write+0x9e>
        }
        count++;
20000ba0:	f24d 5328 	movw	r3, #54568	; 0xd528
20000ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	f103 0301 	add.w	r3, r3, #1
20000bae:	b2da      	uxtb	r2, r3
20000bb0:	f24d 5328 	movw	r3, #54568	; 0xd528
20000bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bb8:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
20000bba:	f24d 5328 	movw	r3, #54568	; 0xd528
20000bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bc2:	781b      	ldrb	r3, [r3, #0]
20000bc4:	2b09      	cmp	r3, #9
20000bc6:	d9c5      	bls.n	20000b54 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000bc8:	f24d 5328 	movw	r3, #54568	; 0xd528
20000bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bd0:	781b      	ldrb	r3, [r3, #0]

}
20000bd2:	4618      	mov	r0, r3
20000bd4:	f107 0710 	add.w	r7, r7, #16
20000bd8:	46bd      	mov	sp, r7
20000bda:	bd80      	pop	{r7, pc}

20000bdc <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
20000bdc:	b580      	push	{r7, lr}
20000bde:	b086      	sub	sp, #24
20000be0:	af02      	add	r7, sp, #8
20000be2:	60b9      	str	r1, [r7, #8]
20000be4:	4613      	mov	r3, r2
20000be6:	4602      	mov	r2, r0
20000be8:	73fa      	strb	r2, [r7, #15]
20000bea:	71fb      	strb	r3, [r7, #7]
    count = 0;
20000bec:	f24d 5328 	movw	r3, #54568	; 0xd528
20000bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bf4:	f04f 0200 	mov.w	r2, #0
20000bf8:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000bfa:	e032      	b.n	20000c62 <vc_read+0x86>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
20000bfc:	79fb      	ldrb	r3, [r7, #7]
20000bfe:	7bfa      	ldrb	r2, [r7, #15]
20000c00:	f04f 0100 	mov.w	r1, #0
20000c04:	9100      	str	r1, [sp, #0]
20000c06:	f24d 0070 	movw	r0, #53360	; 0xd070
20000c0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c0e:	4611      	mov	r1, r2
20000c10:	68ba      	ldr	r2, [r7, #8]
20000c12:	f004 fd4b 	bl	200056ac <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000c16:	f24d 0070 	movw	r0, #53360	; 0xd070
20000c1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c1e:	f04f 0100 	mov.w	r1, #0
20000c22:	f004 fe4d 	bl	200058c0 <I2C_wait_complete>
20000c26:	4603      	mov	r3, r0
20000c28:	461a      	mov	r2, r3
20000c2a:	f24d 532a 	movw	r3, #54570	; 0xd52a
20000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c32:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000c34:	f24d 532a 	movw	r3, #54570	; 0xd52a
20000c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c3c:	781b      	ldrb	r3, [r3, #0]
20000c3e:	2b00      	cmp	r3, #0
20000c40:	d102      	bne.n	20000c48 <vc_read+0x6c>
            return 0;
20000c42:	f04f 0300 	mov.w	r3, #0
20000c46:	e018      	b.n	20000c7a <vc_read+0x9e>
        }
        count++;
20000c48:	f24d 5328 	movw	r3, #54568	; 0xd528
20000c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c50:	781b      	ldrb	r3, [r3, #0]
20000c52:	f103 0301 	add.w	r3, r3, #1
20000c56:	b2da      	uxtb	r2, r3
20000c58:	f24d 5328 	movw	r3, #54568	; 0xd528
20000c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c60:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
20000c62:	f24d 5328 	movw	r3, #54568	; 0xd528
20000c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c6a:	781b      	ldrb	r3, [r3, #0]
20000c6c:	2b09      	cmp	r3, #9
20000c6e:	d9c5      	bls.n	20000bfc <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000c70:	f24d 5328 	movw	r3, #54568	; 0xd528
20000c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c78:	781b      	ldrb	r3, [r3, #0]

}
20000c7a:	4618      	mov	r0, r3
20000c7c:	f107 0710 	add.w	r7, r7, #16
20000c80:	46bd      	mov	sp, r7
20000c82:	bd80      	pop	{r7, pc}

20000c84 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
20000c84:	b580      	push	{r7, lr}
20000c86:	b082      	sub	sp, #8
20000c88:	af00      	add	r7, sp, #0
20000c8a:	460b      	mov	r3, r1
20000c8c:	603a      	str	r2, [r7, #0]
20000c8e:	4602      	mov	r2, r0
20000c90:	71fa      	strb	r2, [r7, #7]
20000c92:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
20000c94:	79fa      	ldrb	r2, [r7, #7]
20000c96:	f107 0306 	add.w	r3, r7, #6
20000c9a:	4610      	mov	r0, r2
20000c9c:	4619      	mov	r1, r3
20000c9e:	f04f 0201 	mov.w	r2, #1
20000ca2:	f7ff ff47 	bl	20000b34 <vc_write>
20000ca6:	4603      	mov	r3, r0
20000ca8:	2b09      	cmp	r3, #9
20000caa:	d902      	bls.n	20000cb2 <vc_read_reg+0x2e>
        return 1;
20000cac:	f04f 0301 	mov.w	r3, #1
20000cb0:	e00e      	b.n	20000cd0 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
20000cb2:	79fb      	ldrb	r3, [r7, #7]
20000cb4:	4618      	mov	r0, r3
20000cb6:	6839      	ldr	r1, [r7, #0]
20000cb8:	f04f 0202 	mov.w	r2, #2
20000cbc:	f7ff ff8e 	bl	20000bdc <vc_read>
20000cc0:	4603      	mov	r3, r0
20000cc2:	2b09      	cmp	r3, #9
20000cc4:	d902      	bls.n	20000ccc <vc_read_reg+0x48>
        return 1;
20000cc6:	f04f 0301 	mov.w	r3, #1
20000cca:	e001      	b.n	20000cd0 <vc_read_reg+0x4c>
    }

    return 0;
20000ccc:	f04f 0300 	mov.w	r3, #0
}
20000cd0:	4618      	mov	r0, r3
20000cd2:	f107 0708 	add.w	r7, r7, #8
20000cd6:	46bd      	mov	sp, r7
20000cd8:	bd80      	pop	{r7, pc}
20000cda:	bf00      	nop

20000cdc <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000cdc:	b580      	push	{r7, lr}
20000cde:	b082      	sub	sp, #8
20000ce0:	af00      	add	r7, sp, #0
20000ce2:	460b      	mov	r3, r1
20000ce4:	603a      	str	r2, [r7, #0]
20000ce6:	4602      	mov	r2, r0
20000ce8:	71fa      	strb	r2, [r7, #7]
20000cea:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000cec:	f24d 5324 	movw	r3, #54564	; 0xd524
20000cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cf4:	f04f 0200 	mov.w	r2, #0
20000cf8:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000cfa:	f24d 5324 	movw	r3, #54564	; 0xd524
20000cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d02:	f04f 0200 	mov.w	r2, #0
20000d06:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000d08:	f24d 5326 	movw	r3, #54566	; 0xd526
20000d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d10:	f04f 0200 	mov.w	r2, #0
20000d14:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
20000d16:	79bb      	ldrb	r3, [r7, #6]
20000d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d1c:	b2db      	uxtb	r3, r3
20000d1e:	79fa      	ldrb	r2, [r7, #7]
20000d20:	4610      	mov	r0, r2
20000d22:	4619      	mov	r1, r3
20000d24:	f24d 5224 	movw	r2, #54564	; 0xd524
20000d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000d2c:	f7ff ffaa 	bl	20000c84 <vc_read_reg>
20000d30:	4603      	mov	r3, r0
20000d32:	2b00      	cmp	r3, #0
20000d34:	d11a      	bne.n	20000d6c <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
20000d36:	f24d 5324 	movw	r3, #54564	; 0xd524
20000d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d3e:	781b      	ldrb	r3, [r3, #0]
20000d40:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000d44:	b29a      	uxth	r2, r3
20000d46:	f24d 5324 	movw	r3, #54564	; 0xd524
20000d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d4e:	785b      	ldrb	r3, [r3, #1]
20000d50:	ea42 0303 	orr.w	r3, r2, r3
20000d54:	b29b      	uxth	r3, r3
20000d56:	b29a      	uxth	r2, r3
20000d58:	f24d 5326 	movw	r3, #54566	; 0xd526
20000d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d60:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000d62:	683b      	ldr	r3, [r7, #0]
20000d64:	f04f 0200 	mov.w	r2, #0
20000d68:	701a      	strb	r2, [r3, #0]
20000d6a:	e00a      	b.n	20000d82 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
20000d6c:	683b      	ldr	r3, [r7, #0]
20000d6e:	f04f 0201 	mov.w	r2, #1
20000d72:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000d74:	f24d 5326 	movw	r3, #54566	; 0xd526
20000d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d7c:	f04f 0200 	mov.w	r2, #0
20000d80:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000d82:	f24d 5326 	movw	r3, #54566	; 0xd526
20000d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d8a:	881b      	ldrh	r3, [r3, #0]
}
20000d8c:	4618      	mov	r0, r3
20000d8e:	f107 0708 	add.w	r7, r7, #8
20000d92:	46bd      	mov	sp, r7
20000d94:	bd80      	pop	{r7, pc}
20000d96:	bf00      	nop

20000d98 <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000d98:	b580      	push	{r7, lr}
20000d9a:	b082      	sub	sp, #8
20000d9c:	af00      	add	r7, sp, #0
20000d9e:	460b      	mov	r3, r1
20000da0:	603a      	str	r2, [r7, #0]
20000da2:	4602      	mov	r2, r0
20000da4:	71fa      	strb	r2, [r7, #7]
20000da6:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000da8:	f24d 5324 	movw	r3, #54564	; 0xd524
20000dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db0:	f04f 0200 	mov.w	r2, #0
20000db4:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000db6:	f24d 5324 	movw	r3, #54564	; 0xd524
20000dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dbe:	f04f 0200 	mov.w	r2, #0
20000dc2:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000dc4:	f24d 5326 	movw	r3, #54566	; 0xd526
20000dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dcc:	f04f 0200 	mov.w	r2, #0
20000dd0:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
20000dd2:	79bb      	ldrb	r3, [r7, #6]
20000dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000dd8:	b2db      	uxtb	r3, r3
20000dda:	f103 33ff 	add.w	r3, r3, #4294967295
20000dde:	b2db      	uxtb	r3, r3
20000de0:	79fa      	ldrb	r2, [r7, #7]
20000de2:	4610      	mov	r0, r2
20000de4:	4619      	mov	r1, r3
20000de6:	f24d 5224 	movw	r2, #54564	; 0xd524
20000dea:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000dee:	f7ff ff49 	bl	20000c84 <vc_read_reg>
20000df2:	4603      	mov	r3, r0
20000df4:	2b00      	cmp	r3, #0
20000df6:	d11a      	bne.n	20000e2e <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
20000df8:	f24d 5324 	movw	r3, #54564	; 0xd524
20000dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e00:	781b      	ldrb	r3, [r3, #0]
20000e02:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e06:	b29a      	uxth	r2, r3
20000e08:	f24d 5324 	movw	r3, #54564	; 0xd524
20000e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e10:	785b      	ldrb	r3, [r3, #1]
20000e12:	ea42 0303 	orr.w	r3, r2, r3
20000e16:	b29b      	uxth	r3, r3
20000e18:	b29a      	uxth	r2, r3
20000e1a:	f24d 5326 	movw	r3, #54566	; 0xd526
20000e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e22:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000e24:	683b      	ldr	r3, [r7, #0]
20000e26:	f04f 0200 	mov.w	r2, #0
20000e2a:	701a      	strb	r2, [r3, #0]
20000e2c:	e00a      	b.n	20000e44 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
20000e2e:	683b      	ldr	r3, [r7, #0]
20000e30:	f04f 0201 	mov.w	r2, #1
20000e34:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000e36:	f24d 5326 	movw	r3, #54566	; 0xd526
20000e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e3e:	f04f 0200 	mov.w	r2, #0
20000e42:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000e44:	f24d 5326 	movw	r3, #54566	; 0xd526
20000e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e4c:	881b      	ldrh	r3, [r3, #0]
}
20000e4e:	4618      	mov	r0, r3
20000e50:	f107 0708 	add.w	r7, r7, #8
20000e54:	46bd      	mov	sp, r7
20000e56:	bd80      	pop	{r7, pc}

20000e58 <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
20000e58:	b580      	push	{r7, lr}
20000e5a:	b08c      	sub	sp, #48	; 0x30
20000e5c:	af04      	add	r7, sp, #16
20000e5e:	60f8      	str	r0, [r7, #12]
20000e60:	607b      	str	r3, [r7, #4]
20000e62:	460b      	mov	r3, r1
20000e64:	72fb      	strb	r3, [r7, #11]
20000e66:	4613      	mov	r3, r2
20000e68:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
20000e6a:	7abb      	ldrb	r3, [r7, #10]
20000e6c:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
20000e6e:	7d3b      	ldrb	r3, [r7, #20]
20000e70:	f043 0308 	orr.w	r3, r3, #8
20000e74:	b2db      	uxtb	r3, r3
20000e76:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
20000e78:	7d3b      	ldrb	r3, [r7, #20]
20000e7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000e7e:	b2db      	uxtb	r3, r3
20000e80:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
20000e82:	7afa      	ldrb	r2, [r7, #11]
20000e84:	f107 0314 	add.w	r3, r7, #20
20000e88:	f107 0118 	add.w	r1, r7, #24
20000e8c:	9100      	str	r1, [sp, #0]
20000e8e:	f04f 0102 	mov.w	r1, #2
20000e92:	9101      	str	r1, [sp, #4]
20000e94:	f04f 0100 	mov.w	r1, #0
20000e98:	9102      	str	r1, [sp, #8]
20000e9a:	68f8      	ldr	r0, [r7, #12]
20000e9c:	4611      	mov	r1, r2
20000e9e:	461a      	mov	r2, r3
20000ea0:	f04f 0301 	mov.w	r3, #1
20000ea4:	f004 fc74 	bl	20005790 <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
20000ea8:	68f8      	ldr	r0, [r7, #12]
20000eaa:	f04f 0100 	mov.w	r1, #0
20000eae:	f004 fd07 	bl	200058c0 <I2C_wait_complete>
20000eb2:	4603      	mov	r3, r0
20000eb4:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
20000eb6:	7f7b      	ldrb	r3, [r7, #29]
20000eb8:	2b00      	cmp	r3, #0
20000eba:	d004      	beq.n	20000ec6 <get_ADC_value+0x6e>
		*flag = 1;
20000ebc:	687b      	ldr	r3, [r7, #4]
20000ebe:	f04f 0201 	mov.w	r2, #1
20000ec2:	701a      	strb	r2, [r3, #0]
20000ec4:	e012      	b.n	20000eec <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
20000ec6:	7e3b      	ldrb	r3, [r7, #24]
20000ec8:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000ecc:	b29a      	uxth	r2, r3
20000ece:	7e7b      	ldrb	r3, [r7, #25]
20000ed0:	ea42 0303 	orr.w	r3, r2, r3
20000ed4:	b29b      	uxth	r3, r3
20000ed6:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
20000ed8:	8bfb      	ldrh	r3, [r7, #30]
20000eda:	ea4f 5303 	mov.w	r3, r3, lsl #20
20000ede:	ea4f 5313 	mov.w	r3, r3, lsr #20
20000ee2:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
20000ee4:	687b      	ldr	r3, [r7, #4]
20000ee6:	f04f 0200 	mov.w	r2, #0
20000eea:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
20000eec:	8bfb      	ldrh	r3, [r7, #30]
}
20000eee:	4618      	mov	r0, r3
20000ef0:	f107 0720 	add.w	r7, r7, #32
20000ef4:	46bd      	mov	sp, r7
20000ef6:	bd80      	pop	{r7, pc}

20000ef8 <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
20000ef8:	b580      	push	{r7, lr}
20000efa:	b084      	sub	sp, #16
20000efc:	af00      	add	r7, sp, #0
20000efe:	4603      	mov	r3, r0
20000f00:	6039      	str	r1, [r7, #0]
20000f02:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
20000f04:	79fb      	ldrb	r3, [r7, #7]
20000f06:	2b00      	cmp	r3, #0
20000f08:	d10e      	bne.n	20000f28 <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
20000f0a:	683b      	ldr	r3, [r7, #0]
20000f0c:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
20000f0e:	68bb      	ldr	r3, [r7, #8]
20000f10:	6859      	ldr	r1, [r3, #4]
20000f12:	68bb      	ldr	r3, [r7, #8]
20000f14:	689a      	ldr	r2, [r3, #8]
20000f16:	68bb      	ldr	r3, [r7, #8]
20000f18:	7b1b      	ldrb	r3, [r3, #12]
20000f1a:	4608      	mov	r0, r1
20000f1c:	4611      	mov	r1, r2
20000f1e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f22:	f004 fadb 	bl	200054dc <I2C_init>
20000f26:	e030      	b.n	20000f8a <init+0x92>
	}
	else if(d == vc_sensor){
20000f28:	79fb      	ldrb	r3, [r7, #7]
20000f2a:	2b0a      	cmp	r3, #10
20000f2c:	d10e      	bne.n	20000f4c <init+0x54>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
20000f2e:	683b      	ldr	r3, [r7, #0]
20000f30:	60fb      	str	r3, [r7, #12]
		I2C_init(vc_pkt->g_core_i2c2, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
20000f32:	68fb      	ldr	r3, [r7, #12]
20000f34:	6859      	ldr	r1, [r3, #4]
20000f36:	68fb      	ldr	r3, [r7, #12]
20000f38:	689a      	ldr	r2, [r3, #8]
20000f3a:	68fb      	ldr	r3, [r7, #12]
20000f3c:	7b1b      	ldrb	r3, [r3, #12]
20000f3e:	4608      	mov	r0, r1
20000f40:	4611      	mov	r1, r2
20000f42:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f46:	f004 fac9 	bl	200054dc <I2C_init>
20000f4a:	e01e      	b.n	20000f8a <init+0x92>
	}
	else if(d == all){
20000f4c:	79fb      	ldrb	r3, [r7, #7]
20000f4e:	2b0b      	cmp	r3, #11
20000f50:	d11b      	bne.n	20000f8a <init+0x92>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f52:	f24d 6004 	movw	r0, #54788	; 0xd604
20000f56:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f5a:	f245 0100 	movw	r1, #20480	; 0x5000
20000f5e:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000f62:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f66:	f04f 0300 	mov.w	r3, #0
20000f6a:	f004 fab7 	bl	200054dc <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f6e:	f24d 0070 	movw	r0, #53360	; 0xd070
20000f72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f76:	f242 0100 	movw	r1, #8192	; 0x2000
20000f7a:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000f7e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f82:	f04f 0300 	mov.w	r3, #0
20000f86:	f004 faa9 	bl	200054dc <I2C_init>
	}
	else{

	}

}
20000f8a:	f107 0710 	add.w	r7, r7, #16
20000f8e:	46bd      	mov	sp, r7
20000f90:	bd80      	pop	{r7, pc}
20000f92:	bf00      	nop

20000f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20000f94:	b480      	push	{r7}
20000f96:	b083      	sub	sp, #12
20000f98:	af00      	add	r7, sp, #0
20000f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	f103 0308 	add.w	r3, r3, #8
20000fa2:	461a      	mov	r2, r3
20000fa4:	687b      	ldr	r3, [r7, #4]
20000fa6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20000fa8:	687b      	ldr	r3, [r7, #4]
20000faa:	f04f 32ff 	mov.w	r2, #4294967295
20000fae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fb0:	687b      	ldr	r3, [r7, #4]
20000fb2:	f103 0308 	add.w	r3, r3, #8
20000fb6:	461a      	mov	r2, r3
20000fb8:	687b      	ldr	r3, [r7, #4]
20000fba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	f103 0308 	add.w	r3, r3, #8
20000fc2:	461a      	mov	r2, r3
20000fc4:	687b      	ldr	r3, [r7, #4]
20000fc6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20000fc8:	687b      	ldr	r3, [r7, #4]
20000fca:	f04f 0200 	mov.w	r2, #0
20000fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20000fd0:	f107 070c 	add.w	r7, r7, #12
20000fd4:	46bd      	mov	sp, r7
20000fd6:	bc80      	pop	{r7}
20000fd8:	4770      	bx	lr
20000fda:	bf00      	nop

20000fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20000fdc:	b480      	push	{r7}
20000fde:	b083      	sub	sp, #12
20000fe0:	af00      	add	r7, sp, #0
20000fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	f04f 0200 	mov.w	r2, #0
20000fea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20000fec:	f107 070c 	add.w	r7, r7, #12
20000ff0:	46bd      	mov	sp, r7
20000ff2:	bc80      	pop	{r7}
20000ff4:	4770      	bx	lr
20000ff6:	bf00      	nop

20000ff8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20000ff8:	b480      	push	{r7}
20000ffa:	b085      	sub	sp, #20
20000ffc:	af00      	add	r7, sp, #0
20000ffe:	6078      	str	r0, [r7, #4]
20001000:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
20001002:	687b      	ldr	r3, [r7, #4]
20001004:	685b      	ldr	r3, [r3, #4]
20001006:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20001008:	683b      	ldr	r3, [r7, #0]
2000100a:	68fa      	ldr	r2, [r7, #12]
2000100c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
2000100e:	68fb      	ldr	r3, [r7, #12]
20001010:	689a      	ldr	r2, [r3, #8]
20001012:	683b      	ldr	r3, [r7, #0]
20001014:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20001016:	68fb      	ldr	r3, [r7, #12]
20001018:	689b      	ldr	r3, [r3, #8]
2000101a:	683a      	ldr	r2, [r7, #0]
2000101c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
2000101e:	68fb      	ldr	r3, [r7, #12]
20001020:	683a      	ldr	r2, [r7, #0]
20001022:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001024:	683b      	ldr	r3, [r7, #0]
20001026:	687a      	ldr	r2, [r7, #4]
20001028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000102a:	687b      	ldr	r3, [r7, #4]
2000102c:	681b      	ldr	r3, [r3, #0]
2000102e:	f103 0201 	add.w	r2, r3, #1
20001032:	687b      	ldr	r3, [r7, #4]
20001034:	601a      	str	r2, [r3, #0]
}
20001036:	f107 0714 	add.w	r7, r7, #20
2000103a:	46bd      	mov	sp, r7
2000103c:	bc80      	pop	{r7}
2000103e:	4770      	bx	lr

20001040 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001040:	b480      	push	{r7}
20001042:	b085      	sub	sp, #20
20001044:	af00      	add	r7, sp, #0
20001046:	6078      	str	r0, [r7, #4]
20001048:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
2000104a:	683b      	ldr	r3, [r7, #0]
2000104c:	681b      	ldr	r3, [r3, #0]
2000104e:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
20001050:	68fb      	ldr	r3, [r7, #12]
20001052:	f1b3 3fff 	cmp.w	r3, #4294967295
20001056:	d103      	bne.n	20001060 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
20001058:	687b      	ldr	r3, [r7, #4]
2000105a:	691b      	ldr	r3, [r3, #16]
2000105c:	60bb      	str	r3, [r7, #8]
2000105e:	e00d      	b.n	2000107c <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001060:	687b      	ldr	r3, [r7, #4]
20001062:	f103 0308 	add.w	r3, r3, #8
20001066:	60bb      	str	r3, [r7, #8]
20001068:	e002      	b.n	20001070 <vListInsert+0x30>
2000106a:	68bb      	ldr	r3, [r7, #8]
2000106c:	685b      	ldr	r3, [r3, #4]
2000106e:	60bb      	str	r3, [r7, #8]
20001070:	68bb      	ldr	r3, [r7, #8]
20001072:	685b      	ldr	r3, [r3, #4]
20001074:	681a      	ldr	r2, [r3, #0]
20001076:	68fb      	ldr	r3, [r7, #12]
20001078:	429a      	cmp	r2, r3
2000107a:	d9f6      	bls.n	2000106a <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
2000107c:	68bb      	ldr	r3, [r7, #8]
2000107e:	685a      	ldr	r2, [r3, #4]
20001080:	683b      	ldr	r3, [r7, #0]
20001082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20001084:	683b      	ldr	r3, [r7, #0]
20001086:	685b      	ldr	r3, [r3, #4]
20001088:	683a      	ldr	r2, [r7, #0]
2000108a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
2000108c:	683b      	ldr	r3, [r7, #0]
2000108e:	68ba      	ldr	r2, [r7, #8]
20001090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20001092:	68bb      	ldr	r3, [r7, #8]
20001094:	683a      	ldr	r2, [r7, #0]
20001096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001098:	683b      	ldr	r3, [r7, #0]
2000109a:	687a      	ldr	r2, [r7, #4]
2000109c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000109e:	687b      	ldr	r3, [r7, #4]
200010a0:	681b      	ldr	r3, [r3, #0]
200010a2:	f103 0201 	add.w	r2, r3, #1
200010a6:	687b      	ldr	r3, [r7, #4]
200010a8:	601a      	str	r2, [r3, #0]
}
200010aa:	f107 0714 	add.w	r7, r7, #20
200010ae:	46bd      	mov	sp, r7
200010b0:	bc80      	pop	{r7}
200010b2:	4770      	bx	lr

200010b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
200010b4:	b480      	push	{r7}
200010b6:	b085      	sub	sp, #20
200010b8:	af00      	add	r7, sp, #0
200010ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
200010bc:	687b      	ldr	r3, [r7, #4]
200010be:	691b      	ldr	r3, [r3, #16]
200010c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
200010c2:	687b      	ldr	r3, [r7, #4]
200010c4:	685b      	ldr	r3, [r3, #4]
200010c6:	687a      	ldr	r2, [r7, #4]
200010c8:	6892      	ldr	r2, [r2, #8]
200010ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	689b      	ldr	r3, [r3, #8]
200010d0:	687a      	ldr	r2, [r7, #4]
200010d2:	6852      	ldr	r2, [r2, #4]
200010d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
200010d6:	68fb      	ldr	r3, [r7, #12]
200010d8:	685a      	ldr	r2, [r3, #4]
200010da:	687b      	ldr	r3, [r7, #4]
200010dc:	429a      	cmp	r2, r3
200010de:	d103      	bne.n	200010e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
200010e0:	687b      	ldr	r3, [r7, #4]
200010e2:	689a      	ldr	r2, [r3, #8]
200010e4:	68fb      	ldr	r3, [r7, #12]
200010e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
200010e8:	687b      	ldr	r3, [r7, #4]
200010ea:	f04f 0200 	mov.w	r2, #0
200010ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
200010f0:	68fb      	ldr	r3, [r7, #12]
200010f2:	681b      	ldr	r3, [r3, #0]
200010f4:	f103 32ff 	add.w	r2, r3, #4294967295
200010f8:	68fb      	ldr	r3, [r7, #12]
200010fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
200010fc:	68fb      	ldr	r3, [r7, #12]
200010fe:	681b      	ldr	r3, [r3, #0]
}
20001100:	4618      	mov	r0, r3
20001102:	f107 0714 	add.w	r7, r7, #20
20001106:	46bd      	mov	sp, r7
20001108:	bc80      	pop	{r7}
2000110a:	4770      	bx	lr

2000110c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
2000110c:	b580      	push	{r7, lr}
2000110e:	b084      	sub	sp, #16
20001110:	af00      	add	r7, sp, #0
20001112:	6078      	str	r0, [r7, #4]
20001114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
2000111a:	68bb      	ldr	r3, [r7, #8]
2000111c:	2b00      	cmp	r3, #0
2000111e:	d109      	bne.n	20001134 <xQueueGenericReset+0x28>
20001120:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001124:	f383 8811 	msr	BASEPRI, r3
20001128:	f3bf 8f6f 	isb	sy
2000112c:	f3bf 8f4f 	dsb	sy
20001130:	60fb      	str	r3, [r7, #12]
20001132:	e7fe      	b.n	20001132 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
20001134:	f002 fd6a 	bl	20003c0c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
20001138:	68bb      	ldr	r3, [r7, #8]
2000113a:	681a      	ldr	r2, [r3, #0]
2000113c:	68bb      	ldr	r3, [r7, #8]
2000113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001140:	68b9      	ldr	r1, [r7, #8]
20001142:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001144:	fb01 f303 	mul.w	r3, r1, r3
20001148:	441a      	add	r2, r3
2000114a:	68bb      	ldr	r3, [r7, #8]
2000114c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
2000114e:	68bb      	ldr	r3, [r7, #8]
20001150:	f04f 0200 	mov.w	r2, #0
20001154:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
20001156:	68bb      	ldr	r3, [r7, #8]
20001158:	681a      	ldr	r2, [r3, #0]
2000115a:	68bb      	ldr	r3, [r7, #8]
2000115c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
2000115e:	68bb      	ldr	r3, [r7, #8]
20001160:	681a      	ldr	r2, [r3, #0]
20001162:	68bb      	ldr	r3, [r7, #8]
20001164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001166:	f103 33ff 	add.w	r3, r3, #4294967295
2000116a:	68b9      	ldr	r1, [r7, #8]
2000116c:	6c09      	ldr	r1, [r1, #64]	; 0x40
2000116e:	fb01 f303 	mul.w	r3, r1, r3
20001172:	441a      	add	r2, r3
20001174:	68bb      	ldr	r3, [r7, #8]
20001176:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
20001178:	68bb      	ldr	r3, [r7, #8]
2000117a:	f04f 32ff 	mov.w	r2, #4294967295
2000117e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
20001182:	68bb      	ldr	r3, [r7, #8]
20001184:	f04f 32ff 	mov.w	r2, #4294967295
20001188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
2000118c:	683b      	ldr	r3, [r7, #0]
2000118e:	2b00      	cmp	r3, #0
20001190:	d118      	bne.n	200011c4 <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001192:	68bb      	ldr	r3, [r7, #8]
20001194:	691b      	ldr	r3, [r3, #16]
20001196:	2b00      	cmp	r3, #0
20001198:	d021      	beq.n	200011de <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000119a:	68bb      	ldr	r3, [r7, #8]
2000119c:	f103 0310 	add.w	r3, r3, #16
200011a0:	4618      	mov	r0, r3
200011a2:	f001 fa13 	bl	200025cc <xTaskRemoveFromEventList>
200011a6:	4603      	mov	r3, r0
200011a8:	2b00      	cmp	r3, #0
200011aa:	d01a      	beq.n	200011e2 <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
200011ac:	f64e 5304 	movw	r3, #60676	; 0xed04
200011b0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200011b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200011b8:	601a      	str	r2, [r3, #0]
200011ba:	f3bf 8f4f 	dsb	sy
200011be:	f3bf 8f6f 	isb	sy
200011c2:	e00f      	b.n	200011e4 <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
200011c4:	68bb      	ldr	r3, [r7, #8]
200011c6:	f103 0310 	add.w	r3, r3, #16
200011ca:	4618      	mov	r0, r3
200011cc:	f7ff fee2 	bl	20000f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
200011d0:	68bb      	ldr	r3, [r7, #8]
200011d2:	f103 0324 	add.w	r3, r3, #36	; 0x24
200011d6:	4618      	mov	r0, r3
200011d8:	f7ff fedc 	bl	20000f94 <vListInitialise>
200011dc:	e002      	b.n	200011e4 <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
200011de:	bf00      	nop
200011e0:	e000      	b.n	200011e4 <xQueueGenericReset+0xd8>
200011e2:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
200011e4:	f002 fd4a 	bl	20003c7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
200011e8:	f04f 0301 	mov.w	r3, #1
}
200011ec:	4618      	mov	r0, r3
200011ee:	f107 0710 	add.w	r7, r7, #16
200011f2:	46bd      	mov	sp, r7
200011f4:	bd80      	pop	{r7, pc}
200011f6:	bf00      	nop

200011f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
200011f8:	b580      	push	{r7, lr}
200011fa:	b08a      	sub	sp, #40	; 0x28
200011fc:	af02      	add	r7, sp, #8
200011fe:	60f8      	str	r0, [r7, #12]
20001200:	60b9      	str	r1, [r7, #8]
20001202:	4613      	mov	r3, r2
20001204:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
20001206:	68fb      	ldr	r3, [r7, #12]
20001208:	2b00      	cmp	r3, #0
2000120a:	d109      	bne.n	20001220 <xQueueGenericCreate+0x28>
2000120c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001210:	f383 8811 	msr	BASEPRI, r3
20001214:	f3bf 8f6f 	isb	sy
20001218:	f3bf 8f4f 	dsb	sy
2000121c:	61fb      	str	r3, [r7, #28]
2000121e:	e7fe      	b.n	2000121e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
20001220:	68bb      	ldr	r3, [r7, #8]
20001222:	2b00      	cmp	r3, #0
20001224:	d103      	bne.n	2000122e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
20001226:	f04f 0300 	mov.w	r3, #0
2000122a:	617b      	str	r3, [r7, #20]
2000122c:	e004      	b.n	20001238 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000122e:	68fb      	ldr	r3, [r7, #12]
20001230:	68ba      	ldr	r2, [r7, #8]
20001232:	fb02 f303 	mul.w	r3, r2, r3
20001236:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
20001238:	697b      	ldr	r3, [r7, #20]
2000123a:	f103 0350 	add.w	r3, r3, #80	; 0x50
2000123e:	4618      	mov	r0, r3
20001240:	f002 f994 	bl	2000356c <pvPortMalloc>
20001244:	4603      	mov	r3, r0
20001246:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
20001248:	693b      	ldr	r3, [r7, #16]
2000124a:	2b00      	cmp	r3, #0
2000124c:	d00b      	beq.n	20001266 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
2000124e:	693b      	ldr	r3, [r7, #16]
20001250:	f103 0350 	add.w	r3, r3, #80	; 0x50
20001254:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
20001256:	79fb      	ldrb	r3, [r7, #7]
20001258:	693a      	ldr	r2, [r7, #16]
2000125a:	9200      	str	r2, [sp, #0]
2000125c:	68f8      	ldr	r0, [r7, #12]
2000125e:	68b9      	ldr	r1, [r7, #8]
20001260:	69ba      	ldr	r2, [r7, #24]
20001262:	f000 f807 	bl	20001274 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
20001266:	693b      	ldr	r3, [r7, #16]
	}
20001268:	4618      	mov	r0, r3
2000126a:	f107 0720 	add.w	r7, r7, #32
2000126e:	46bd      	mov	sp, r7
20001270:	bd80      	pop	{r7, pc}
20001272:	bf00      	nop

20001274 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
20001274:	b580      	push	{r7, lr}
20001276:	b084      	sub	sp, #16
20001278:	af00      	add	r7, sp, #0
2000127a:	60f8      	str	r0, [r7, #12]
2000127c:	60b9      	str	r1, [r7, #8]
2000127e:	607a      	str	r2, [r7, #4]
20001280:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
20001282:	68bb      	ldr	r3, [r7, #8]
20001284:	2b00      	cmp	r3, #0
20001286:	d103      	bne.n	20001290 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
20001288:	69ba      	ldr	r2, [r7, #24]
2000128a:	69bb      	ldr	r3, [r7, #24]
2000128c:	601a      	str	r2, [r3, #0]
2000128e:	e002      	b.n	20001296 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001290:	687a      	ldr	r2, [r7, #4]
20001292:	69bb      	ldr	r3, [r7, #24]
20001294:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
20001296:	69bb      	ldr	r3, [r7, #24]
20001298:	68fa      	ldr	r2, [r7, #12]
2000129a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
2000129c:	69bb      	ldr	r3, [r7, #24]
2000129e:	68ba      	ldr	r2, [r7, #8]
200012a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
200012a2:	69b8      	ldr	r0, [r7, #24]
200012a4:	f04f 0101 	mov.w	r1, #1
200012a8:	f7ff ff30 	bl	2000110c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
200012ac:	69bb      	ldr	r3, [r7, #24]
200012ae:	78fa      	ldrb	r2, [r7, #3]
200012b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
200012b4:	f107 0710 	add.w	r7, r7, #16
200012b8:	46bd      	mov	sp, r7
200012ba:	bd80      	pop	{r7, pc}

200012bc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
200012bc:	b580      	push	{r7, lr}
200012be:	b082      	sub	sp, #8
200012c0:	af00      	add	r7, sp, #0
200012c2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	2b00      	cmp	r3, #0
200012c8:	d014      	beq.n	200012f4 <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	f04f 0200 	mov.w	r2, #0
200012d0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
200012d2:	687b      	ldr	r3, [r7, #4]
200012d4:	f04f 0200 	mov.w	r2, #0
200012d8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
200012da:	687b      	ldr	r3, [r7, #4]
200012dc:	f04f 0200 	mov.w	r2, #0
200012e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
200012e2:	6878      	ldr	r0, [r7, #4]
200012e4:	f04f 0100 	mov.w	r1, #0
200012e8:	f04f 0200 	mov.w	r2, #0
200012ec:	f04f 0300 	mov.w	r3, #0
200012f0:	f000 f820 	bl	20001334 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
200012f4:	f107 0708 	add.w	r7, r7, #8
200012f8:	46bd      	mov	sp, r7
200012fa:	bd80      	pop	{r7, pc}

200012fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
200012fc:	b580      	push	{r7, lr}
200012fe:	b086      	sub	sp, #24
20001300:	af00      	add	r7, sp, #0
20001302:	4603      	mov	r3, r0
20001304:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
20001306:	f04f 0301 	mov.w	r3, #1
2000130a:	613b      	str	r3, [r7, #16]
2000130c:	f04f 0300 	mov.w	r3, #0
20001310:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
20001312:	79fb      	ldrb	r3, [r7, #7]
20001314:	6938      	ldr	r0, [r7, #16]
20001316:	6979      	ldr	r1, [r7, #20]
20001318:	461a      	mov	r2, r3
2000131a:	f7ff ff6d 	bl	200011f8 <xQueueGenericCreate>
2000131e:	4603      	mov	r3, r0
20001320:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
20001322:	68f8      	ldr	r0, [r7, #12]
20001324:	f7ff ffca 	bl	200012bc <prvInitialiseMutex>

		return pxNewQueue;
20001328:	68fb      	ldr	r3, [r7, #12]
	}
2000132a:	4618      	mov	r0, r3
2000132c:	f107 0718 	add.w	r7, r7, #24
20001330:	46bd      	mov	sp, r7
20001332:	bd80      	pop	{r7, pc}

20001334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
20001334:	b580      	push	{r7, lr}
20001336:	b08e      	sub	sp, #56	; 0x38
20001338:	af00      	add	r7, sp, #0
2000133a:	60f8      	str	r0, [r7, #12]
2000133c:	60b9      	str	r1, [r7, #8]
2000133e:	607a      	str	r2, [r7, #4]
20001340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
20001342:	f04f 0300 	mov.w	r3, #0
20001346:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001348:	68fb      	ldr	r3, [r7, #12]
2000134a:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
2000134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000134e:	2b00      	cmp	r3, #0
20001350:	d109      	bne.n	20001366 <xQueueGenericSend+0x32>
20001352:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001356:	f383 8811 	msr	BASEPRI, r3
2000135a:	f3bf 8f6f 	isb	sy
2000135e:	f3bf 8f4f 	dsb	sy
20001362:	62bb      	str	r3, [r7, #40]	; 0x28
20001364:	e7fe      	b.n	20001364 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001366:	68bb      	ldr	r3, [r7, #8]
20001368:	2b00      	cmp	r3, #0
2000136a:	d103      	bne.n	20001374 <xQueueGenericSend+0x40>
2000136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001370:	2b00      	cmp	r3, #0
20001372:	d102      	bne.n	2000137a <xQueueGenericSend+0x46>
20001374:	f04f 0301 	mov.w	r3, #1
20001378:	e001      	b.n	2000137e <xQueueGenericSend+0x4a>
2000137a:	f04f 0300 	mov.w	r3, #0
2000137e:	2b00      	cmp	r3, #0
20001380:	d109      	bne.n	20001396 <xQueueGenericSend+0x62>
20001382:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001386:	f383 8811 	msr	BASEPRI, r3
2000138a:	f3bf 8f6f 	isb	sy
2000138e:	f3bf 8f4f 	dsb	sy
20001392:	62fb      	str	r3, [r7, #44]	; 0x2c
20001394:	e7fe      	b.n	20001394 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001396:	683b      	ldr	r3, [r7, #0]
20001398:	2b02      	cmp	r3, #2
2000139a:	d103      	bne.n	200013a4 <xQueueGenericSend+0x70>
2000139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200013a0:	2b01      	cmp	r3, #1
200013a2:	d102      	bne.n	200013aa <xQueueGenericSend+0x76>
200013a4:	f04f 0301 	mov.w	r3, #1
200013a8:	e001      	b.n	200013ae <xQueueGenericSend+0x7a>
200013aa:	f04f 0300 	mov.w	r3, #0
200013ae:	2b00      	cmp	r3, #0
200013b0:	d109      	bne.n	200013c6 <xQueueGenericSend+0x92>
200013b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200013b6:	f383 8811 	msr	BASEPRI, r3
200013ba:	f3bf 8f6f 	isb	sy
200013be:	f3bf 8f4f 	dsb	sy
200013c2:	633b      	str	r3, [r7, #48]	; 0x30
200013c4:	e7fe      	b.n	200013c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200013c6:	f001 fb09 	bl	200029dc <xTaskGetSchedulerState>
200013ca:	4603      	mov	r3, r0
200013cc:	2b00      	cmp	r3, #0
200013ce:	d102      	bne.n	200013d6 <xQueueGenericSend+0xa2>
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	2b00      	cmp	r3, #0
200013d4:	d102      	bne.n	200013dc <xQueueGenericSend+0xa8>
200013d6:	f04f 0301 	mov.w	r3, #1
200013da:	e001      	b.n	200013e0 <xQueueGenericSend+0xac>
200013dc:	f04f 0300 	mov.w	r3, #0
200013e0:	2b00      	cmp	r3, #0
200013e2:	d10a      	bne.n	200013fa <xQueueGenericSend+0xc6>
200013e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200013e8:	f383 8811 	msr	BASEPRI, r3
200013ec:	f3bf 8f6f 	isb	sy
200013f0:	f3bf 8f4f 	dsb	sy
200013f4:	637b      	str	r3, [r7, #52]	; 0x34
200013f6:	e7fe      	b.n	200013f6 <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200013f8:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
200013fa:	f002 fc07 	bl	20003c0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001406:	429a      	cmp	r2, r3
20001408:	d302      	bcc.n	20001410 <xQueueGenericSend+0xdc>
2000140a:	683b      	ldr	r3, [r7, #0]
2000140c:	2b02      	cmp	r3, #2
2000140e:	d134      	bne.n	2000147a <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001410:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001412:	68b9      	ldr	r1, [r7, #8]
20001414:	683a      	ldr	r2, [r7, #0]
20001416:	f000 fa7b 	bl	20001910 <prvCopyDataToQueue>
2000141a:	4603      	mov	r3, r0
2000141c:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001422:	2b00      	cmp	r3, #0
20001424:	d014      	beq.n	20001450 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001428:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000142c:	4618      	mov	r0, r3
2000142e:	f001 f8cd 	bl	200025cc <xTaskRemoveFromEventList>
20001432:	4603      	mov	r3, r0
20001434:	2b00      	cmp	r3, #0
20001436:	d01a      	beq.n	2000146e <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001438:	f64e 5304 	movw	r3, #60676	; 0xed04
2000143c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001444:	601a      	str	r2, [r3, #0]
20001446:	f3bf 8f4f 	dsb	sy
2000144a:	f3bf 8f6f 	isb	sy
2000144e:	e00f      	b.n	20001470 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
20001450:	6a3b      	ldr	r3, [r7, #32]
20001452:	2b00      	cmp	r3, #0
20001454:	d00c      	beq.n	20001470 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
20001456:	f64e 5304 	movw	r3, #60676	; 0xed04
2000145a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000145e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001462:	601a      	str	r2, [r3, #0]
20001464:	f3bf 8f4f 	dsb	sy
20001468:	f3bf 8f6f 	isb	sy
2000146c:	e000      	b.n	20001470 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
2000146e:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
20001470:	f002 fc04 	bl	20003c7c <vPortExitCritical>
				return pdPASS;
20001474:	f04f 0301 	mov.w	r3, #1
20001478:	e06f      	b.n	2000155a <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
2000147a:	687b      	ldr	r3, [r7, #4]
2000147c:	2b00      	cmp	r3, #0
2000147e:	d104      	bne.n	2000148a <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001480:	f002 fbfc 	bl	20003c7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
20001484:	f04f 0300 	mov.w	r3, #0
20001488:	e067      	b.n	2000155a <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
2000148a:	69fb      	ldr	r3, [r7, #28]
2000148c:	2b00      	cmp	r3, #0
2000148e:	d107      	bne.n	200014a0 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001490:	f107 0314 	add.w	r3, r7, #20
20001494:	4618      	mov	r0, r3
20001496:	f001 f911 	bl	200026bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000149a:	f04f 0301 	mov.w	r3, #1
2000149e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
200014a0:	f002 fbec 	bl	20003c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
200014a4:	f000 fd72 	bl	20001f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
200014a8:	f002 fbb0 	bl	20003c0c <vPortEnterCritical>
200014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200014b2:	b2db      	uxtb	r3, r3
200014b4:	b25b      	sxtb	r3, r3
200014b6:	f1b3 3fff 	cmp.w	r3, #4294967295
200014ba:	d104      	bne.n	200014c6 <xQueueGenericSend+0x192>
200014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014be:	f04f 0200 	mov.w	r2, #0
200014c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200014cc:	b2db      	uxtb	r3, r3
200014ce:	b25b      	sxtb	r3, r3
200014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
200014d4:	d104      	bne.n	200014e0 <xQueueGenericSend+0x1ac>
200014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014d8:	f04f 0200 	mov.w	r2, #0
200014dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200014e0:	f002 fbcc 	bl	20003c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200014e4:	f107 0214 	add.w	r2, r7, #20
200014e8:	f107 0304 	add.w	r3, r7, #4
200014ec:	4610      	mov	r0, r2
200014ee:	4619      	mov	r1, r3
200014f0:	f001 f908 	bl	20002704 <xTaskCheckForTimeOut>
200014f4:	4603      	mov	r3, r0
200014f6:	2b00      	cmp	r3, #0
200014f8:	d128      	bne.n	2000154c <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
200014fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
200014fc:	f000 fb18 	bl	20001b30 <prvIsQueueFull>
20001500:	4603      	mov	r3, r0
20001502:	2b00      	cmp	r3, #0
20001504:	d01c      	beq.n	20001540 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
20001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001508:	f103 0210 	add.w	r2, r3, #16
2000150c:	687b      	ldr	r3, [r7, #4]
2000150e:	4610      	mov	r0, r2
20001510:	4619      	mov	r1, r3
20001512:	f001 f809 	bl	20002528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
20001516:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001518:	f000 fa9a 	bl	20001a50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
2000151c:	f000 fd48 	bl	20001fb0 <xTaskResumeAll>
20001520:	4603      	mov	r3, r0
20001522:	2b00      	cmp	r3, #0
20001524:	f47f af68 	bne.w	200013f8 <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
20001528:	f64e 5304 	movw	r3, #60676	; 0xed04
2000152c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001534:	601a      	str	r2, [r3, #0]
20001536:	f3bf 8f4f 	dsb	sy
2000153a:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
2000153e:	e75c      	b.n	200013fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001540:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001542:	f000 fa85 	bl	20001a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001546:	f000 fd33 	bl	20001fb0 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
2000154a:	e756      	b.n	200013fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
2000154c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000154e:	f000 fa7f 	bl	20001a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001552:	f000 fd2d 	bl	20001fb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
20001556:	f04f 0300 	mov.w	r3, #0
		}
	}
}
2000155a:	4618      	mov	r0, r3
2000155c:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001560:	46bd      	mov	sp, r7
20001562:	bd80      	pop	{r7, pc}

20001564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001564:	b580      	push	{r7, lr}
20001566:	b08e      	sub	sp, #56	; 0x38
20001568:	af00      	add	r7, sp, #0
2000156a:	60f8      	str	r0, [r7, #12]
2000156c:	60b9      	str	r1, [r7, #8]
2000156e:	607a      	str	r2, [r7, #4]
20001570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001572:	68fb      	ldr	r3, [r7, #12]
20001574:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
20001576:	69bb      	ldr	r3, [r7, #24]
20001578:	2b00      	cmp	r3, #0
2000157a:	d109      	bne.n	20001590 <xQueueGenericSendFromISR+0x2c>
2000157c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001580:	f383 8811 	msr	BASEPRI, r3
20001584:	f3bf 8f6f 	isb	sy
20001588:	f3bf 8f4f 	dsb	sy
2000158c:	623b      	str	r3, [r7, #32]
2000158e:	e7fe      	b.n	2000158e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001590:	68bb      	ldr	r3, [r7, #8]
20001592:	2b00      	cmp	r3, #0
20001594:	d103      	bne.n	2000159e <xQueueGenericSendFromISR+0x3a>
20001596:	69bb      	ldr	r3, [r7, #24]
20001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000159a:	2b00      	cmp	r3, #0
2000159c:	d102      	bne.n	200015a4 <xQueueGenericSendFromISR+0x40>
2000159e:	f04f 0301 	mov.w	r3, #1
200015a2:	e001      	b.n	200015a8 <xQueueGenericSendFromISR+0x44>
200015a4:	f04f 0300 	mov.w	r3, #0
200015a8:	2b00      	cmp	r3, #0
200015aa:	d109      	bne.n	200015c0 <xQueueGenericSendFromISR+0x5c>
200015ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015b0:	f383 8811 	msr	BASEPRI, r3
200015b4:	f3bf 8f6f 	isb	sy
200015b8:	f3bf 8f4f 	dsb	sy
200015bc:	627b      	str	r3, [r7, #36]	; 0x24
200015be:	e7fe      	b.n	200015be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
200015c0:	683b      	ldr	r3, [r7, #0]
200015c2:	2b02      	cmp	r3, #2
200015c4:	d103      	bne.n	200015ce <xQueueGenericSendFromISR+0x6a>
200015c6:	69bb      	ldr	r3, [r7, #24]
200015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015ca:	2b01      	cmp	r3, #1
200015cc:	d102      	bne.n	200015d4 <xQueueGenericSendFromISR+0x70>
200015ce:	f04f 0301 	mov.w	r3, #1
200015d2:	e001      	b.n	200015d8 <xQueueGenericSendFromISR+0x74>
200015d4:	f04f 0300 	mov.w	r3, #0
200015d8:	2b00      	cmp	r3, #0
200015da:	d109      	bne.n	200015f0 <xQueueGenericSendFromISR+0x8c>
200015dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015e0:	f383 8811 	msr	BASEPRI, r3
200015e4:	f3bf 8f6f 	isb	sy
200015e8:	f3bf 8f4f 	dsb	sy
200015ec:	62bb      	str	r3, [r7, #40]	; 0x28
200015ee:	e7fe      	b.n	200015ee <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200015f0:	f002 fbe0 	bl	20003db4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200015f4:	f3ef 8211 	mrs	r2, BASEPRI
200015f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015fc:	f383 8811 	msr	BASEPRI, r3
20001600:	f3bf 8f6f 	isb	sy
20001604:	f3bf 8f4f 	dsb	sy
20001608:	633a      	str	r2, [r7, #48]	; 0x30
2000160a:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
2000160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2000160e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001610:	69bb      	ldr	r3, [r7, #24]
20001612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001614:	69bb      	ldr	r3, [r7, #24]
20001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001618:	429a      	cmp	r2, r3
2000161a:	d302      	bcc.n	20001622 <xQueueGenericSendFromISR+0xbe>
2000161c:	683b      	ldr	r3, [r7, #0]
2000161e:	2b02      	cmp	r3, #2
20001620:	d134      	bne.n	2000168c <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001622:	69bb      	ldr	r3, [r7, #24]
20001624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001628:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
2000162a:	69b8      	ldr	r0, [r7, #24]
2000162c:	68b9      	ldr	r1, [r7, #8]
2000162e:	683a      	ldr	r2, [r7, #0]
20001630:	f000 f96e 	bl	20001910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001634:	f997 301f 	ldrsb.w	r3, [r7, #31]
20001638:	f1b3 3fff 	cmp.w	r3, #4294967295
2000163c:	d114      	bne.n	20001668 <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000163e:	69bb      	ldr	r3, [r7, #24]
20001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001642:	2b00      	cmp	r3, #0
20001644:	d019      	beq.n	2000167a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001646:	69bb      	ldr	r3, [r7, #24]
20001648:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000164c:	4618      	mov	r0, r3
2000164e:	f000 ffbd 	bl	200025cc <xTaskRemoveFromEventList>
20001652:	4603      	mov	r3, r0
20001654:	2b00      	cmp	r3, #0
20001656:	d012      	beq.n	2000167e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001658:	687b      	ldr	r3, [r7, #4]
2000165a:	2b00      	cmp	r3, #0
2000165c:	d011      	beq.n	20001682 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
2000165e:	687b      	ldr	r3, [r7, #4]
20001660:	f04f 0201 	mov.w	r2, #1
20001664:	601a      	str	r2, [r3, #0]
20001666:	e00d      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001668:	7ffb      	ldrb	r3, [r7, #31]
2000166a:	f103 0301 	add.w	r3, r3, #1
2000166e:	b2db      	uxtb	r3, r3
20001670:	461a      	mov	r2, r3
20001672:	69bb      	ldr	r3, [r7, #24]
20001674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001678:	e004      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
2000167a:	bf00      	nop
2000167c:	e002      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
2000167e:	bf00      	nop
20001680:	e000      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
20001682:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
20001684:	f04f 0301 	mov.w	r3, #1
20001688:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
2000168a:	e002      	b.n	20001692 <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
2000168c:	f04f 0300 	mov.w	r3, #0
20001690:	613b      	str	r3, [r7, #16]
20001692:	697b      	ldr	r3, [r7, #20]
20001694:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001698:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
2000169c:	693b      	ldr	r3, [r7, #16]
}
2000169e:	4618      	mov	r0, r3
200016a0:	f107 0738 	add.w	r7, r7, #56	; 0x38
200016a4:	46bd      	mov	sp, r7
200016a6:	bd80      	pop	{r7, pc}

200016a8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
200016a8:	b580      	push	{r7, lr}
200016aa:	b08e      	sub	sp, #56	; 0x38
200016ac:	af00      	add	r7, sp, #0
200016ae:	60f8      	str	r0, [r7, #12]
200016b0:	60b9      	str	r1, [r7, #8]
200016b2:	607a      	str	r2, [r7, #4]
200016b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
200016b6:	f04f 0300 	mov.w	r3, #0
200016ba:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200016bc:	68fb      	ldr	r3, [r7, #12]
200016be:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
200016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016c2:	2b00      	cmp	r3, #0
200016c4:	d109      	bne.n	200016da <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200016c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200016ca:	f383 8811 	msr	BASEPRI, r3
200016ce:	f3bf 8f6f 	isb	sy
200016d2:	f3bf 8f4f 	dsb	sy
200016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
200016d8:	e7fe      	b.n	200016d8 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
200016da:	68bb      	ldr	r3, [r7, #8]
200016dc:	2b00      	cmp	r3, #0
200016de:	d103      	bne.n	200016e8 <xQueueGenericReceive+0x40>
200016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200016e4:	2b00      	cmp	r3, #0
200016e6:	d102      	bne.n	200016ee <xQueueGenericReceive+0x46>
200016e8:	f04f 0301 	mov.w	r3, #1
200016ec:	e001      	b.n	200016f2 <xQueueGenericReceive+0x4a>
200016ee:	f04f 0300 	mov.w	r3, #0
200016f2:	2b00      	cmp	r3, #0
200016f4:	d109      	bne.n	2000170a <xQueueGenericReceive+0x62>
200016f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200016fa:	f383 8811 	msr	BASEPRI, r3
200016fe:	f3bf 8f6f 	isb	sy
20001702:	f3bf 8f4f 	dsb	sy
20001706:	633b      	str	r3, [r7, #48]	; 0x30
20001708:	e7fe      	b.n	20001708 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
2000170a:	f001 f967 	bl	200029dc <xTaskGetSchedulerState>
2000170e:	4603      	mov	r3, r0
20001710:	2b00      	cmp	r3, #0
20001712:	d102      	bne.n	2000171a <xQueueGenericReceive+0x72>
20001714:	687b      	ldr	r3, [r7, #4]
20001716:	2b00      	cmp	r3, #0
20001718:	d102      	bne.n	20001720 <xQueueGenericReceive+0x78>
2000171a:	f04f 0301 	mov.w	r3, #1
2000171e:	e001      	b.n	20001724 <xQueueGenericReceive+0x7c>
20001720:	f04f 0300 	mov.w	r3, #0
20001724:	2b00      	cmp	r3, #0
20001726:	d10c      	bne.n	20001742 <xQueueGenericReceive+0x9a>
20001728:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000172c:	f383 8811 	msr	BASEPRI, r3
20001730:	f3bf 8f6f 	isb	sy
20001734:	f3bf 8f4f 	dsb	sy
20001738:	637b      	str	r3, [r7, #52]	; 0x34
2000173a:	e7fe      	b.n	2000173a <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
2000173c:	bf00      	nop
2000173e:	e000      	b.n	20001742 <xQueueGenericReceive+0x9a>
20001740:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
20001742:	f002 fa63 	bl	20003c0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000174a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2000174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000174e:	2b00      	cmp	r3, #0
20001750:	d055      	beq.n	200017fe <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
20001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001754:	68db      	ldr	r3, [r3, #12]
20001756:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001758:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000175a:	68b9      	ldr	r1, [r7, #8]
2000175c:	f000 f950 	bl	20001a00 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
20001760:	683b      	ldr	r3, [r7, #0]
20001762:	2b00      	cmp	r3, #0
20001764:	d127      	bne.n	200017b6 <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
20001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001768:	f103 32ff 	add.w	r2, r3, #4294967295
2000176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000176e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001772:	681b      	ldr	r3, [r3, #0]
20001774:	2b00      	cmp	r3, #0
20001776:	d105      	bne.n	20001784 <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
20001778:	f001 faa0 	bl	20002cbc <pvTaskIncrementMutexHeldCount>
2000177c:	4603      	mov	r3, r0
2000177e:	461a      	mov	r2, r3
20001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001782:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001786:	691b      	ldr	r3, [r3, #16]
20001788:	2b00      	cmp	r3, #0
2000178a:	d030      	beq.n	200017ee <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000178e:	f103 0310 	add.w	r3, r3, #16
20001792:	4618      	mov	r0, r3
20001794:	f000 ff1a 	bl	200025cc <xTaskRemoveFromEventList>
20001798:	4603      	mov	r3, r0
2000179a:	2b00      	cmp	r3, #0
2000179c:	d029      	beq.n	200017f2 <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
2000179e:	f64e 5304 	movw	r3, #60676	; 0xed04
200017a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017aa:	601a      	str	r2, [r3, #0]
200017ac:	f3bf 8f4f 	dsb	sy
200017b0:	f3bf 8f6f 	isb	sy
200017b4:	e01e      	b.n	200017f4 <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
200017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017b8:	6a3a      	ldr	r2, [r7, #32]
200017ba:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
200017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200017c0:	2b00      	cmp	r3, #0
200017c2:	d017      	beq.n	200017f4 <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
200017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017c6:	f103 0324 	add.w	r3, r3, #36	; 0x24
200017ca:	4618      	mov	r0, r3
200017cc:	f000 fefe 	bl	200025cc <xTaskRemoveFromEventList>
200017d0:	4603      	mov	r3, r0
200017d2:	2b00      	cmp	r3, #0
200017d4:	d00e      	beq.n	200017f4 <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
200017d6:	f64e 5304 	movw	r3, #60676	; 0xed04
200017da:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017e2:	601a      	str	r2, [r3, #0]
200017e4:	f3bf 8f4f 	dsb	sy
200017e8:	f3bf 8f6f 	isb	sy
200017ec:	e002      	b.n	200017f4 <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
200017ee:	bf00      	nop
200017f0:	e000      	b.n	200017f4 <xQueueGenericReceive+0x14c>
200017f2:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
200017f4:	f002 fa42 	bl	20003c7c <vPortExitCritical>
				return pdPASS;
200017f8:	f04f 0301 	mov.w	r3, #1
200017fc:	e083      	b.n	20001906 <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
200017fe:	687b      	ldr	r3, [r7, #4]
20001800:	2b00      	cmp	r3, #0
20001802:	d104      	bne.n	2000180e <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001804:	f002 fa3a 	bl	20003c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001808:	f04f 0300 	mov.w	r3, #0
2000180c:	e07b      	b.n	20001906 <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
2000180e:	69fb      	ldr	r3, [r7, #28]
20001810:	2b00      	cmp	r3, #0
20001812:	d107      	bne.n	20001824 <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001814:	f107 0314 	add.w	r3, r7, #20
20001818:	4618      	mov	r0, r3
2000181a:	f000 ff4f 	bl	200026bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000181e:	f04f 0301 	mov.w	r3, #1
20001822:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001824:	f002 fa2a 	bl	20003c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001828:	f000 fbb0 	bl	20001f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
2000182c:	f002 f9ee 	bl	20003c0c <vPortEnterCritical>
20001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001836:	b2db      	uxtb	r3, r3
20001838:	b25b      	sxtb	r3, r3
2000183a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000183e:	d104      	bne.n	2000184a <xQueueGenericReceive+0x1a2>
20001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001842:	f04f 0200 	mov.w	r2, #0
20001846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2000184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000184c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001850:	b2db      	uxtb	r3, r3
20001852:	b25b      	sxtb	r3, r3
20001854:	f1b3 3fff 	cmp.w	r3, #4294967295
20001858:	d104      	bne.n	20001864 <xQueueGenericReceive+0x1bc>
2000185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000185c:	f04f 0200 	mov.w	r2, #0
20001860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001864:	f002 fa0a 	bl	20003c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001868:	f107 0214 	add.w	r2, r7, #20
2000186c:	f107 0304 	add.w	r3, r7, #4
20001870:	4610      	mov	r0, r2
20001872:	4619      	mov	r1, r3
20001874:	f000 ff46 	bl	20002704 <xTaskCheckForTimeOut>
20001878:	4603      	mov	r3, r0
2000187a:	2b00      	cmp	r3, #0
2000187c:	d135      	bne.n	200018ea <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
2000187e:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001880:	f000 f93c 	bl	20001afc <prvIsQueueEmpty>
20001884:	4603      	mov	r3, r0
20001886:	2b00      	cmp	r3, #0
20001888:	d029      	beq.n	200018de <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2000188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000188c:	681b      	ldr	r3, [r3, #0]
2000188e:	2b00      	cmp	r3, #0
20001890:	d108      	bne.n	200018a4 <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
20001892:	f002 f9bb 	bl	20003c0c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
20001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001898:	685b      	ldr	r3, [r3, #4]
2000189a:	4618      	mov	r0, r3
2000189c:	f001 f8c2 	bl	20002a24 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
200018a0:	f002 f9ec 	bl	20003c7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
200018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200018a6:	f103 0224 	add.w	r2, r3, #36	; 0x24
200018aa:	687b      	ldr	r3, [r7, #4]
200018ac:	4610      	mov	r0, r2
200018ae:	4619      	mov	r1, r3
200018b0:	f000 fe3a 	bl	20002528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
200018b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018b6:	f000 f8cb 	bl	20001a50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
200018ba:	f000 fb79 	bl	20001fb0 <xTaskResumeAll>
200018be:	4603      	mov	r3, r0
200018c0:	2b00      	cmp	r3, #0
200018c2:	f47f af3b 	bne.w	2000173c <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
200018c6:	f64e 5304 	movw	r3, #60676	; 0xed04
200018ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
200018ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200018d2:	601a      	str	r2, [r3, #0]
200018d4:	f3bf 8f4f 	dsb	sy
200018d8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
200018dc:	e731      	b.n	20001742 <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
200018de:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018e0:	f000 f8b6 	bl	20001a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
200018e4:	f000 fb64 	bl	20001fb0 <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
200018e8:	e72b      	b.n	20001742 <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
200018ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018ec:	f000 f8b0 	bl	20001a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
200018f0:	f000 fb5e 	bl	20001fb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
200018f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018f6:	f000 f901 	bl	20001afc <prvIsQueueEmpty>
200018fa:	4603      	mov	r3, r0
200018fc:	2b00      	cmp	r3, #0
200018fe:	f43f af1f 	beq.w	20001740 <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001902:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
20001906:	4618      	mov	r0, r3
20001908:	f107 0738 	add.w	r7, r7, #56	; 0x38
2000190c:	46bd      	mov	sp, r7
2000190e:	bd80      	pop	{r7, pc}

20001910 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001910:	b580      	push	{r7, lr}
20001912:	b086      	sub	sp, #24
20001914:	af00      	add	r7, sp, #0
20001916:	60f8      	str	r0, [r7, #12]
20001918:	60b9      	str	r1, [r7, #8]
2000191a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
2000191c:	f04f 0300 	mov.w	r3, #0
20001920:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001922:	68fb      	ldr	r3, [r7, #12]
20001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001926:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001928:	68fb      	ldr	r3, [r7, #12]
2000192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000192c:	2b00      	cmp	r3, #0
2000192e:	d10f      	bne.n	20001950 <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001930:	68fb      	ldr	r3, [r7, #12]
20001932:	681b      	ldr	r3, [r3, #0]
20001934:	2b00      	cmp	r3, #0
20001936:	d155      	bne.n	200019e4 <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
20001938:	68fb      	ldr	r3, [r7, #12]
2000193a:	685b      	ldr	r3, [r3, #4]
2000193c:	4618      	mov	r0, r3
2000193e:	f001 f917 	bl	20002b70 <xTaskPriorityDisinherit>
20001942:	4603      	mov	r3, r0
20001944:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
20001946:	68fb      	ldr	r3, [r7, #12]
20001948:	f04f 0200 	mov.w	r2, #0
2000194c:	605a      	str	r2, [r3, #4]
2000194e:	e04c      	b.n	200019ea <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001950:	687b      	ldr	r3, [r7, #4]
20001952:	2b00      	cmp	r3, #0
20001954:	d11a      	bne.n	2000198c <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
20001956:	68fb      	ldr	r3, [r7, #12]
20001958:	689a      	ldr	r2, [r3, #8]
2000195a:	68fb      	ldr	r3, [r7, #12]
2000195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000195e:	4610      	mov	r0, r2
20001960:	68b9      	ldr	r1, [r7, #8]
20001962:	461a      	mov	r2, r3
20001964:	f005 f826 	bl	200069b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
20001968:	68fb      	ldr	r3, [r7, #12]
2000196a:	689a      	ldr	r2, [r3, #8]
2000196c:	68fb      	ldr	r3, [r7, #12]
2000196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001970:	441a      	add	r2, r3
20001972:	68fb      	ldr	r3, [r7, #12]
20001974:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001976:	68fb      	ldr	r3, [r7, #12]
20001978:	689a      	ldr	r2, [r3, #8]
2000197a:	68fb      	ldr	r3, [r7, #12]
2000197c:	685b      	ldr	r3, [r3, #4]
2000197e:	429a      	cmp	r2, r3
20001980:	d332      	bcc.n	200019e8 <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001982:	68fb      	ldr	r3, [r7, #12]
20001984:	681a      	ldr	r2, [r3, #0]
20001986:	68fb      	ldr	r3, [r7, #12]
20001988:	609a      	str	r2, [r3, #8]
2000198a:	e02e      	b.n	200019ea <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000198c:	68fb      	ldr	r3, [r7, #12]
2000198e:	68da      	ldr	r2, [r3, #12]
20001990:	68fb      	ldr	r3, [r7, #12]
20001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001994:	4610      	mov	r0, r2
20001996:	68b9      	ldr	r1, [r7, #8]
20001998:	461a      	mov	r2, r3
2000199a:	f005 f80b 	bl	200069b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2000199e:	68fb      	ldr	r3, [r7, #12]
200019a0:	68da      	ldr	r2, [r3, #12]
200019a2:	68fb      	ldr	r3, [r7, #12]
200019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200019a6:	f1c3 0300 	rsb	r3, r3, #0
200019aa:	441a      	add	r2, r3
200019ac:	68fb      	ldr	r3, [r7, #12]
200019ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
200019b0:	68fb      	ldr	r3, [r7, #12]
200019b2:	68da      	ldr	r2, [r3, #12]
200019b4:	68fb      	ldr	r3, [r7, #12]
200019b6:	681b      	ldr	r3, [r3, #0]
200019b8:	429a      	cmp	r2, r3
200019ba:	d208      	bcs.n	200019ce <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
200019bc:	68fb      	ldr	r3, [r7, #12]
200019be:	685a      	ldr	r2, [r3, #4]
200019c0:	68fb      	ldr	r3, [r7, #12]
200019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200019c4:	f1c3 0300 	rsb	r3, r3, #0
200019c8:	441a      	add	r2, r3
200019ca:	68fb      	ldr	r3, [r7, #12]
200019cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
200019ce:	687b      	ldr	r3, [r7, #4]
200019d0:	2b02      	cmp	r3, #2
200019d2:	d10a      	bne.n	200019ea <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
200019d4:	697b      	ldr	r3, [r7, #20]
200019d6:	2b00      	cmp	r3, #0
200019d8:	d007      	beq.n	200019ea <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
200019da:	697b      	ldr	r3, [r7, #20]
200019dc:	f103 33ff 	add.w	r3, r3, #4294967295
200019e0:	617b      	str	r3, [r7, #20]
200019e2:	e002      	b.n	200019ea <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
200019e4:	bf00      	nop
200019e6:	e000      	b.n	200019ea <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
200019e8:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
200019ea:	697b      	ldr	r3, [r7, #20]
200019ec:	f103 0201 	add.w	r2, r3, #1
200019f0:	68fb      	ldr	r3, [r7, #12]
200019f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
200019f4:	693b      	ldr	r3, [r7, #16]
}
200019f6:	4618      	mov	r0, r3
200019f8:	f107 0718 	add.w	r7, r7, #24
200019fc:	46bd      	mov	sp, r7
200019fe:	bd80      	pop	{r7, pc}

20001a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001a00:	b580      	push	{r7, lr}
20001a02:	b082      	sub	sp, #8
20001a04:	af00      	add	r7, sp, #0
20001a06:	6078      	str	r0, [r7, #4]
20001a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001a0a:	687b      	ldr	r3, [r7, #4]
20001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a0e:	2b00      	cmp	r3, #0
20001a10:	d019      	beq.n	20001a46 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
20001a12:	687b      	ldr	r3, [r7, #4]
20001a14:	68da      	ldr	r2, [r3, #12]
20001a16:	687b      	ldr	r3, [r7, #4]
20001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a1a:	441a      	add	r2, r3
20001a1c:	687b      	ldr	r3, [r7, #4]
20001a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001a20:	687b      	ldr	r3, [r7, #4]
20001a22:	68da      	ldr	r2, [r3, #12]
20001a24:	687b      	ldr	r3, [r7, #4]
20001a26:	685b      	ldr	r3, [r3, #4]
20001a28:	429a      	cmp	r2, r3
20001a2a:	d303      	bcc.n	20001a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
20001a2c:	687b      	ldr	r3, [r7, #4]
20001a2e:	681a      	ldr	r2, [r3, #0]
20001a30:	687b      	ldr	r3, [r7, #4]
20001a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
20001a34:	687b      	ldr	r3, [r7, #4]
20001a36:	68da      	ldr	r2, [r3, #12]
20001a38:	687b      	ldr	r3, [r7, #4]
20001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a3c:	6838      	ldr	r0, [r7, #0]
20001a3e:	4611      	mov	r1, r2
20001a40:	461a      	mov	r2, r3
20001a42:	f004 ffb7 	bl	200069b4 <memcpy>
	}
}
20001a46:	f107 0708 	add.w	r7, r7, #8
20001a4a:	46bd      	mov	sp, r7
20001a4c:	bd80      	pop	{r7, pc}
20001a4e:	bf00      	nop

20001a50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001a50:	b580      	push	{r7, lr}
20001a52:	b084      	sub	sp, #16
20001a54:	af00      	add	r7, sp, #0
20001a56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001a58:	f002 f8d8 	bl	20003c0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001a5c:	687b      	ldr	r3, [r7, #4]
20001a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001a62:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001a64:	e012      	b.n	20001a8c <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001a66:	687b      	ldr	r3, [r7, #4]
20001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001a6a:	2b00      	cmp	r3, #0
20001a6c:	d013      	beq.n	20001a96 <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001a6e:	687b      	ldr	r3, [r7, #4]
20001a70:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001a74:	4618      	mov	r0, r3
20001a76:	f000 fda9 	bl	200025cc <xTaskRemoveFromEventList>
20001a7a:	4603      	mov	r3, r0
20001a7c:	2b00      	cmp	r3, #0
20001a7e:	d001      	beq.n	20001a84 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001a80:	f000 fea8 	bl	200027d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001a84:	7bbb      	ldrb	r3, [r7, #14]
20001a86:	f103 33ff 	add.w	r3, r3, #4294967295
20001a8a:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001a90:	2b00      	cmp	r3, #0
20001a92:	dce8      	bgt.n	20001a66 <prvUnlockQueue+0x16>
20001a94:	e000      	b.n	20001a98 <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
20001a96:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001a98:	687b      	ldr	r3, [r7, #4]
20001a9a:	f04f 32ff 	mov.w	r2, #4294967295
20001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001aa2:	f002 f8eb 	bl	20003c7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001aa6:	f002 f8b1 	bl	20003c0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001aaa:	687b      	ldr	r3, [r7, #4]
20001aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ab0:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001ab2:	e012      	b.n	20001ada <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001ab4:	687b      	ldr	r3, [r7, #4]
20001ab6:	691b      	ldr	r3, [r3, #16]
20001ab8:	2b00      	cmp	r3, #0
20001aba:	d013      	beq.n	20001ae4 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001abc:	687b      	ldr	r3, [r7, #4]
20001abe:	f103 0310 	add.w	r3, r3, #16
20001ac2:	4618      	mov	r0, r3
20001ac4:	f000 fd82 	bl	200025cc <xTaskRemoveFromEventList>
20001ac8:	4603      	mov	r3, r0
20001aca:	2b00      	cmp	r3, #0
20001acc:	d001      	beq.n	20001ad2 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
20001ace:	f000 fe81 	bl	200027d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001ad2:	7bfb      	ldrb	r3, [r7, #15]
20001ad4:	f103 33ff 	add.w	r3, r3, #4294967295
20001ad8:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001ade:	2b00      	cmp	r3, #0
20001ae0:	dce8      	bgt.n	20001ab4 <prvUnlockQueue+0x64>
20001ae2:	e000      	b.n	20001ae6 <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
20001ae4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001ae6:	687b      	ldr	r3, [r7, #4]
20001ae8:	f04f 32ff 	mov.w	r2, #4294967295
20001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001af0:	f002 f8c4 	bl	20003c7c <vPortExitCritical>
}
20001af4:	f107 0710 	add.w	r7, r7, #16
20001af8:	46bd      	mov	sp, r7
20001afa:	bd80      	pop	{r7, pc}

20001afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001afc:	b580      	push	{r7, lr}
20001afe:	b084      	sub	sp, #16
20001b00:	af00      	add	r7, sp, #0
20001b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001b04:	f002 f882 	bl	20003c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001b08:	687b      	ldr	r3, [r7, #4]
20001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001b0c:	2b00      	cmp	r3, #0
20001b0e:	d103      	bne.n	20001b18 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
20001b10:	f04f 0301 	mov.w	r3, #1
20001b14:	60fb      	str	r3, [r7, #12]
20001b16:	e002      	b.n	20001b1e <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001b18:	f04f 0300 	mov.w	r3, #0
20001b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001b1e:	f002 f8ad 	bl	20003c7c <vPortExitCritical>

	return xReturn;
20001b22:	68fb      	ldr	r3, [r7, #12]
}
20001b24:	4618      	mov	r0, r3
20001b26:	f107 0710 	add.w	r7, r7, #16
20001b2a:	46bd      	mov	sp, r7
20001b2c:	bd80      	pop	{r7, pc}
20001b2e:	bf00      	nop

20001b30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001b30:	b580      	push	{r7, lr}
20001b32:	b084      	sub	sp, #16
20001b34:	af00      	add	r7, sp, #0
20001b36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001b38:	f002 f868 	bl	20003c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001b3c:	687b      	ldr	r3, [r7, #4]
20001b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001b40:	687b      	ldr	r3, [r7, #4]
20001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001b44:	429a      	cmp	r2, r3
20001b46:	d103      	bne.n	20001b50 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
20001b48:	f04f 0301 	mov.w	r3, #1
20001b4c:	60fb      	str	r3, [r7, #12]
20001b4e:	e002      	b.n	20001b56 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
20001b50:	f04f 0300 	mov.w	r3, #0
20001b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001b56:	f002 f891 	bl	20003c7c <vPortExitCritical>

	return xReturn;
20001b5a:	68fb      	ldr	r3, [r7, #12]
}
20001b5c:	4618      	mov	r0, r3
20001b5e:	f107 0710 	add.w	r7, r7, #16
20001b62:	46bd      	mov	sp, r7
20001b64:	bd80      	pop	{r7, pc}
20001b66:	bf00      	nop

20001b68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001b68:	b580      	push	{r7, lr}
20001b6a:	b086      	sub	sp, #24
20001b6c:	af00      	add	r7, sp, #0
20001b6e:	60f8      	str	r0, [r7, #12]
20001b70:	60b9      	str	r1, [r7, #8]
20001b72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001b74:	68fb      	ldr	r3, [r7, #12]
20001b76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001b78:	f002 f848 	bl	20003c0c <vPortEnterCritical>
20001b7c:	697b      	ldr	r3, [r7, #20]
20001b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001b82:	b2db      	uxtb	r3, r3
20001b84:	b25b      	sxtb	r3, r3
20001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
20001b8a:	d104      	bne.n	20001b96 <vQueueWaitForMessageRestricted+0x2e>
20001b8c:	697b      	ldr	r3, [r7, #20]
20001b8e:	f04f 0200 	mov.w	r2, #0
20001b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001b96:	697b      	ldr	r3, [r7, #20]
20001b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001b9c:	b2db      	uxtb	r3, r3
20001b9e:	b25b      	sxtb	r3, r3
20001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
20001ba4:	d104      	bne.n	20001bb0 <vQueueWaitForMessageRestricted+0x48>
20001ba6:	697b      	ldr	r3, [r7, #20]
20001ba8:	f04f 0200 	mov.w	r2, #0
20001bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001bb0:	f002 f864 	bl	20003c7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20001bb4:	697b      	ldr	r3, [r7, #20]
20001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001bb8:	2b00      	cmp	r3, #0
20001bba:	d107      	bne.n	20001bcc <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20001bbc:	697b      	ldr	r3, [r7, #20]
20001bbe:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001bc2:	4618      	mov	r0, r3
20001bc4:	68b9      	ldr	r1, [r7, #8]
20001bc6:	687a      	ldr	r2, [r7, #4]
20001bc8:	f000 fcd4 	bl	20002574 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20001bcc:	6978      	ldr	r0, [r7, #20]
20001bce:	f7ff ff3f 	bl	20001a50 <prvUnlockQueue>
	}
20001bd2:	f107 0718 	add.w	r7, r7, #24
20001bd6:	46bd      	mov	sp, r7
20001bd8:	bd80      	pop	{r7, pc}
20001bda:	bf00      	nop

20001bdc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20001bdc:	b580      	push	{r7, lr}
20001bde:	b08c      	sub	sp, #48	; 0x30
20001be0:	af04      	add	r7, sp, #16
20001be2:	60f8      	str	r0, [r7, #12]
20001be4:	60b9      	str	r1, [r7, #8]
20001be6:	603b      	str	r3, [r7, #0]
20001be8:	4613      	mov	r3, r2
20001bea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001bec:	88fb      	ldrh	r3, [r7, #6]
20001bee:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001bf2:	4618      	mov	r0, r3
20001bf4:	f001 fcba 	bl	2000356c <pvPortMalloc>
20001bf8:	4603      	mov	r3, r0
20001bfa:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
20001bfc:	69fb      	ldr	r3, [r7, #28]
20001bfe:	2b00      	cmp	r3, #0
20001c00:	d010      	beq.n	20001c24 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
20001c02:	f04f 005c 	mov.w	r0, #92	; 0x5c
20001c06:	f001 fcb1 	bl	2000356c <pvPortMalloc>
20001c0a:	4603      	mov	r3, r0
20001c0c:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
20001c0e:	697b      	ldr	r3, [r7, #20]
20001c10:	2b00      	cmp	r3, #0
20001c12:	d003      	beq.n	20001c1c <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20001c14:	697b      	ldr	r3, [r7, #20]
20001c16:	69fa      	ldr	r2, [r7, #28]
20001c18:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20001c1a:	e006      	b.n	20001c2a <xTaskCreate+0x4e>
20001c1c:	69f8      	ldr	r0, [r7, #28]
20001c1e:	f001 fda1 	bl	20003764 <vPortFree>
20001c22:	e002      	b.n	20001c2a <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
20001c24:	f04f 0300 	mov.w	r3, #0
20001c28:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20001c2a:	697b      	ldr	r3, [r7, #20]
20001c2c:	2b00      	cmp	r3, #0
20001c2e:	d016      	beq.n	20001c5e <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
20001c30:	88fb      	ldrh	r3, [r7, #6]
20001c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001c34:	9200      	str	r2, [sp, #0]
20001c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001c38:	9201      	str	r2, [sp, #4]
20001c3a:	697a      	ldr	r2, [r7, #20]
20001c3c:	9202      	str	r2, [sp, #8]
20001c3e:	f04f 0200 	mov.w	r2, #0
20001c42:	9203      	str	r2, [sp, #12]
20001c44:	68f8      	ldr	r0, [r7, #12]
20001c46:	68b9      	ldr	r1, [r7, #8]
20001c48:	461a      	mov	r2, r3
20001c4a:	683b      	ldr	r3, [r7, #0]
20001c4c:	f000 f810 	bl	20001c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001c50:	6978      	ldr	r0, [r7, #20]
20001c52:	f000 f8a3 	bl	20001d9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20001c56:	f04f 0301 	mov.w	r3, #1
20001c5a:	61bb      	str	r3, [r7, #24]
20001c5c:	e002      	b.n	20001c64 <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
20001c5e:	f04f 33ff 	mov.w	r3, #4294967295
20001c62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
20001c64:	69bb      	ldr	r3, [r7, #24]
	}
20001c66:	4618      	mov	r0, r3
20001c68:	f107 0720 	add.w	r7, r7, #32
20001c6c:	46bd      	mov	sp, r7
20001c6e:	bd80      	pop	{r7, pc}

20001c70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
20001c70:	b580      	push	{r7, lr}
20001c72:	b088      	sub	sp, #32
20001c74:	af00      	add	r7, sp, #0
20001c76:	60f8      	str	r0, [r7, #12]
20001c78:	60b9      	str	r1, [r7, #8]
20001c7a:	607a      	str	r2, [r7, #4]
20001c7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
20001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c82:	687b      	ldr	r3, [r7, #4]
20001c84:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001c88:	4610      	mov	r0, r2
20001c8a:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20001c8e:	461a      	mov	r2, r3
20001c90:	f004 ff58 	bl	20006b44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
20001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c98:	687b      	ldr	r3, [r7, #4]
20001c9a:	f103 33ff 	add.w	r3, r3, #4294967295
20001c9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001ca2:	4413      	add	r3, r2
20001ca4:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
20001ca6:	697b      	ldr	r3, [r7, #20]
20001ca8:	f023 0307 	bic.w	r3, r3, #7
20001cac:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20001cae:	697b      	ldr	r3, [r7, #20]
20001cb0:	f003 0307 	and.w	r3, r3, #7
20001cb4:	2b00      	cmp	r3, #0
20001cb6:	d009      	beq.n	20001ccc <prvInitialiseNewTask+0x5c>
20001cb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001cbc:	f383 8811 	msr	BASEPRI, r3
20001cc0:	f3bf 8f6f 	isb	sy
20001cc4:	f3bf 8f4f 	dsb	sy
20001cc8:	61fb      	str	r3, [r7, #28]
20001cca:	e7fe      	b.n	20001cca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001ccc:	f04f 0300 	mov.w	r3, #0
20001cd0:	61bb      	str	r3, [r7, #24]
20001cd2:	e012      	b.n	20001cfa <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20001cd4:	69b9      	ldr	r1, [r7, #24]
20001cd6:	68ba      	ldr	r2, [r7, #8]
20001cd8:	69bb      	ldr	r3, [r7, #24]
20001cda:	4413      	add	r3, r2
20001cdc:	781a      	ldrb	r2, [r3, #0]
20001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ce0:	440b      	add	r3, r1
20001ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
20001ce6:	68ba      	ldr	r2, [r7, #8]
20001ce8:	69bb      	ldr	r3, [r7, #24]
20001cea:	4413      	add	r3, r2
20001cec:	781b      	ldrb	r3, [r3, #0]
20001cee:	2b00      	cmp	r3, #0
20001cf0:	d007      	beq.n	20001d02 <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001cf2:	69bb      	ldr	r3, [r7, #24]
20001cf4:	f103 0301 	add.w	r3, r3, #1
20001cf8:	61bb      	str	r3, [r7, #24]
20001cfa:	69bb      	ldr	r3, [r7, #24]
20001cfc:	2b09      	cmp	r3, #9
20001cfe:	d9e9      	bls.n	20001cd4 <prvInitialiseNewTask+0x64>
20001d00:	e000      	b.n	20001d04 <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
20001d02:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d06:	f04f 0200 	mov.w	r2, #0
20001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d10:	2b04      	cmp	r3, #4
20001d12:	d902      	bls.n	20001d1a <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20001d14:	f04f 0304 	mov.w	r3, #4
20001d18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001d24:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
20001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d28:	f04f 0200 	mov.w	r2, #0
20001d2c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
20001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d30:	f103 0304 	add.w	r3, r3, #4
20001d34:	4618      	mov	r0, r3
20001d36:	f7ff f951 	bl	20000fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d3c:	f103 0318 	add.w	r3, r3, #24
20001d40:	4618      	mov	r0, r3
20001d42:	f7ff f94b 	bl	20000fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
20001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d4e:	f1c3 0205 	rsb	r2, r3, #5
20001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
20001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
20001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d5e:	f04f 0200 	mov.w	r2, #0
20001d62:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
20001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d66:	f04f 0200 	mov.w	r2, #0
20001d6a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d6e:	f04f 0200 	mov.w	r2, #0
20001d72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
20001d76:	6978      	ldr	r0, [r7, #20]
20001d78:	68f9      	ldr	r1, [r7, #12]
20001d7a:	683a      	ldr	r2, [r7, #0]
20001d7c:	f001 fe3e 	bl	200039fc <pxPortInitialiseStack>
20001d80:	4603      	mov	r3, r0
20001d82:	461a      	mov	r2, r3
20001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
20001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001d8a:	2b00      	cmp	r3, #0
20001d8c:	d002      	beq.n	20001d94 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
20001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001d94:	f107 0720 	add.w	r7, r7, #32
20001d98:	46bd      	mov	sp, r7
20001d9a:	bd80      	pop	{r7, pc}

20001d9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20001d9c:	b580      	push	{r7, lr}
20001d9e:	b082      	sub	sp, #8
20001da0:	af00      	add	r7, sp, #0
20001da2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
20001da4:	f001 ff32 	bl	20003c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20001da8:	f646 6304 	movw	r3, #28164	; 0x6e04
20001dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001db0:	681b      	ldr	r3, [r3, #0]
20001db2:	f103 0201 	add.w	r2, r3, #1
20001db6:	f646 6304 	movw	r3, #28164	; 0x6e04
20001dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dbe:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
20001dc0:	f646 532c 	movw	r3, #27948	; 0x6d2c
20001dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dc8:	681b      	ldr	r3, [r3, #0]
20001dca:	2b00      	cmp	r3, #0
20001dcc:	d10f      	bne.n	20001dee <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
20001dce:	f646 532c 	movw	r3, #27948	; 0x6d2c
20001dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dd6:	687a      	ldr	r2, [r7, #4]
20001dd8:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20001dda:	f646 6304 	movw	r3, #28164	; 0x6e04
20001dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001de2:	681b      	ldr	r3, [r3, #0]
20001de4:	2b01      	cmp	r3, #1
20001de6:	d11a      	bne.n	20001e1e <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20001de8:	f000 fd1c 	bl	20002824 <prvInitialiseTaskLists>
20001dec:	e018      	b.n	20001e20 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
20001dee:	f646 6310 	movw	r3, #28176	; 0x6e10
20001df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001df6:	681b      	ldr	r3, [r3, #0]
20001df8:	2b00      	cmp	r3, #0
20001dfa:	d111      	bne.n	20001e20 <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
20001dfc:	f646 532c 	movw	r3, #27948	; 0x6d2c
20001e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e04:	681b      	ldr	r3, [r3, #0]
20001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e08:	687b      	ldr	r3, [r7, #4]
20001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001e0c:	429a      	cmp	r2, r3
20001e0e:	d807      	bhi.n	20001e20 <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
20001e10:	f646 532c 	movw	r3, #27948	; 0x6d2c
20001e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e18:	687a      	ldr	r2, [r7, #4]
20001e1a:	601a      	str	r2, [r3, #0]
20001e1c:	e000      	b.n	20001e20 <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20001e1e:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20001e20:	f646 6320 	movw	r3, #28192	; 0x6e20
20001e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e28:	681b      	ldr	r3, [r3, #0]
20001e2a:	f103 0201 	add.w	r2, r3, #1
20001e2e:	f646 6320 	movw	r3, #28192	; 0x6e20
20001e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e36:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
20001e38:	f646 6320 	movw	r3, #28192	; 0x6e20
20001e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e40:	681a      	ldr	r2, [r3, #0]
20001e42:	687b      	ldr	r3, [r7, #4]
20001e44:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
20001e46:	687b      	ldr	r3, [r7, #4]
20001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001e4a:	f04f 0201 	mov.w	r2, #1
20001e4e:	fa02 f203 	lsl.w	r2, r2, r3
20001e52:	f646 630c 	movw	r3, #28172	; 0x6e0c
20001e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e5a:	681b      	ldr	r3, [r3, #0]
20001e5c:	ea42 0203 	orr.w	r2, r2, r3
20001e60:	f646 630c 	movw	r3, #28172	; 0x6e0c
20001e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e68:	601a      	str	r2, [r3, #0]
20001e6a:	687b      	ldr	r3, [r7, #4]
20001e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e6e:	4613      	mov	r3, r2
20001e70:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001e74:	4413      	add	r3, r2
20001e76:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001e7a:	461a      	mov	r2, r3
20001e7c:	f646 5330 	movw	r3, #27952	; 0x6d30
20001e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e84:	441a      	add	r2, r3
20001e86:	687b      	ldr	r3, [r7, #4]
20001e88:	f103 0304 	add.w	r3, r3, #4
20001e8c:	4610      	mov	r0, r2
20001e8e:	4619      	mov	r1, r3
20001e90:	f7ff f8b2 	bl	20000ff8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20001e94:	f001 fef2 	bl	20003c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
20001e98:	f646 6310 	movw	r3, #28176	; 0x6e10
20001e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ea0:	681b      	ldr	r3, [r3, #0]
20001ea2:	2b00      	cmp	r3, #0
20001ea4:	d014      	beq.n	20001ed0 <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20001ea6:	f646 532c 	movw	r3, #27948	; 0x6d2c
20001eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001eae:	681b      	ldr	r3, [r3, #0]
20001eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001eb2:	687b      	ldr	r3, [r7, #4]
20001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001eb6:	429a      	cmp	r2, r3
20001eb8:	d20a      	bcs.n	20001ed0 <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
20001eba:	f64e 5304 	movw	r3, #60676	; 0xed04
20001ebe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001ec6:	601a      	str	r2, [r3, #0]
20001ec8:	f3bf 8f4f 	dsb	sy
20001ecc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001ed0:	f107 0708 	add.w	r7, r7, #8
20001ed4:	46bd      	mov	sp, r7
20001ed6:	bd80      	pop	{r7, pc}

20001ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
20001ed8:	b580      	push	{r7, lr}
20001eda:	b086      	sub	sp, #24
20001edc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
20001ede:	f04f 0300 	mov.w	r3, #0
20001ee2:	9300      	str	r3, [sp, #0]
20001ee4:	f646 6328 	movw	r3, #28200	; 0x6e28
20001ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001eec:	9301      	str	r3, [sp, #4]
20001eee:	f242 70ed 	movw	r0, #10221	; 0x27ed
20001ef2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001ef6:	f646 4120 	movw	r1, #27680	; 0x6c20
20001efa:	f2c2 0100 	movt	r1, #8192	; 0x2000
20001efe:	f04f 0250 	mov.w	r2, #80	; 0x50
20001f02:	f04f 0300 	mov.w	r3, #0
20001f06:	f7ff fe69 	bl	20001bdc <xTaskCreate>
20001f0a:	4603      	mov	r3, r0
20001f0c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
20001f0e:	687b      	ldr	r3, [r7, #4]
20001f10:	2b01      	cmp	r3, #1
20001f12:	d103      	bne.n	20001f1c <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
20001f14:	f000 ff76 	bl	20002e04 <xTimerCreateTimerTask>
20001f18:	4603      	mov	r3, r0
20001f1a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
20001f1c:	687b      	ldr	r3, [r7, #4]
20001f1e:	2b01      	cmp	r3, #1
20001f20:	d122      	bne.n	20001f68 <vTaskStartScheduler+0x90>
20001f22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001f26:	f383 8811 	msr	BASEPRI, r3
20001f2a:	f3bf 8f6f 	isb	sy
20001f2e:	f3bf 8f4f 	dsb	sy
20001f32:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
20001f34:	f646 6324 	movw	r3, #28196	; 0x6e24
20001f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f3c:	f04f 32ff 	mov.w	r2, #4294967295
20001f40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
20001f42:	f646 6310 	movw	r3, #28176	; 0x6e10
20001f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f4a:	f04f 0201 	mov.w	r2, #1
20001f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
20001f50:	f646 6308 	movw	r3, #28168	; 0x6e08
20001f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f58:	f04f 0200 	mov.w	r2, #0
20001f5c:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
20001f5e:	f7fe f9df 	bl	20000320 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
20001f62:	f001 fdcd 	bl	20003b00 <xPortStartScheduler>
20001f66:	e00d      	b.n	20001f84 <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20001f68:	687b      	ldr	r3, [r7, #4]
20001f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
20001f6e:	d109      	bne.n	20001f84 <vTaskStartScheduler+0xac>
20001f70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001f74:	f383 8811 	msr	BASEPRI, r3
20001f78:	f3bf 8f6f 	isb	sy
20001f7c:	f3bf 8f4f 	dsb	sy
20001f80:	60fb      	str	r3, [r7, #12]
20001f82:	e7fe      	b.n	20001f82 <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
20001f84:	f107 0710 	add.w	r7, r7, #16
20001f88:	46bd      	mov	sp, r7
20001f8a:	bd80      	pop	{r7, pc}

20001f8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
20001f8c:	b480      	push	{r7}
20001f8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
20001f90:	f646 632c 	movw	r3, #28204	; 0x6e2c
20001f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f98:	681b      	ldr	r3, [r3, #0]
20001f9a:	f103 0201 	add.w	r2, r3, #1
20001f9e:	f646 632c 	movw	r3, #28204	; 0x6e2c
20001fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001fa6:	601a      	str	r2, [r3, #0]
}
20001fa8:	46bd      	mov	sp, r7
20001faa:	bc80      	pop	{r7}
20001fac:	4770      	bx	lr
20001fae:	bf00      	nop

20001fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
20001fb0:	b580      	push	{r7, lr}
20001fb2:	b084      	sub	sp, #16
20001fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
20001fb6:	f04f 0300 	mov.w	r3, #0
20001fba:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
20001fbc:	f04f 0300 	mov.w	r3, #0
20001fc0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
20001fc2:	f646 632c 	movw	r3, #28204	; 0x6e2c
20001fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001fca:	681b      	ldr	r3, [r3, #0]
20001fcc:	2b00      	cmp	r3, #0
20001fce:	d109      	bne.n	20001fe4 <xTaskResumeAll+0x34>
20001fd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001fd4:	f383 8811 	msr	BASEPRI, r3
20001fd8:	f3bf 8f6f 	isb	sy
20001fdc:	f3bf 8f4f 	dsb	sy
20001fe0:	60fb      	str	r3, [r7, #12]
20001fe2:	e7fe      	b.n	20001fe2 <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20001fe4:	f001 fe12 	bl	20003c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
20001fe8:	f646 632c 	movw	r3, #28204	; 0x6e2c
20001fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ff0:	681b      	ldr	r3, [r3, #0]
20001ff2:	f103 32ff 	add.w	r2, r3, #4294967295
20001ff6:	f646 632c 	movw	r3, #28204	; 0x6e2c
20001ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ffe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002000:	f646 632c 	movw	r3, #28204	; 0x6e2c
20002004:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002008:	681b      	ldr	r3, [r3, #0]
2000200a:	2b00      	cmp	r3, #0
2000200c:	f040 8098 	bne.w	20002140 <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
20002010:	f646 6304 	movw	r3, #28164	; 0x6e04
20002014:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002018:	681b      	ldr	r3, [r3, #0]
2000201a:	2b00      	cmp	r3, #0
2000201c:	f000 8090 	beq.w	20002140 <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002020:	e04a      	b.n	200020b8 <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
20002022:	f646 53c4 	movw	r3, #28100	; 0x6dc4
20002026:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000202a:	68db      	ldr	r3, [r3, #12]
2000202c:	68db      	ldr	r3, [r3, #12]
2000202e:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002030:	683b      	ldr	r3, [r7, #0]
20002032:	f103 0318 	add.w	r3, r3, #24
20002036:	4618      	mov	r0, r3
20002038:	f7ff f83c 	bl	200010b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2000203c:	683b      	ldr	r3, [r7, #0]
2000203e:	f103 0304 	add.w	r3, r3, #4
20002042:	4618      	mov	r0, r3
20002044:	f7ff f836 	bl	200010b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20002048:	683b      	ldr	r3, [r7, #0]
2000204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000204c:	f04f 0201 	mov.w	r2, #1
20002050:	fa02 f203 	lsl.w	r2, r2, r3
20002054:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002058:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000205c:	681b      	ldr	r3, [r3, #0]
2000205e:	ea42 0203 	orr.w	r2, r2, r3
20002062:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002066:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000206a:	601a      	str	r2, [r3, #0]
2000206c:	683b      	ldr	r3, [r7, #0]
2000206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002070:	4613      	mov	r3, r2
20002072:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002076:	4413      	add	r3, r2
20002078:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000207c:	461a      	mov	r2, r3
2000207e:	f646 5330 	movw	r3, #27952	; 0x6d30
20002082:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002086:	441a      	add	r2, r3
20002088:	683b      	ldr	r3, [r7, #0]
2000208a:	f103 0304 	add.w	r3, r3, #4
2000208e:	4610      	mov	r0, r2
20002090:	4619      	mov	r1, r3
20002092:	f7fe ffb1 	bl	20000ff8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002096:	683b      	ldr	r3, [r7, #0]
20002098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000209a:	f646 532c 	movw	r3, #27948	; 0x6d2c
2000209e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020a2:	681b      	ldr	r3, [r3, #0]
200020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200020a6:	429a      	cmp	r2, r3
200020a8:	d306      	bcc.n	200020b8 <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
200020aa:	f646 6318 	movw	r3, #28184	; 0x6e18
200020ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020b2:	f04f 0201 	mov.w	r2, #1
200020b6:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200020b8:	f646 53c4 	movw	r3, #28100	; 0x6dc4
200020bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020c0:	681b      	ldr	r3, [r3, #0]
200020c2:	2b00      	cmp	r3, #0
200020c4:	d1ad      	bne.n	20002022 <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
200020c6:	683b      	ldr	r3, [r7, #0]
200020c8:	2b00      	cmp	r3, #0
200020ca:	d001      	beq.n	200020d0 <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
200020cc:	f000 fc58 	bl	20002980 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
200020d0:	f646 6314 	movw	r3, #28180	; 0x6e14
200020d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020d8:	681b      	ldr	r3, [r3, #0]
200020da:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
200020dc:	68bb      	ldr	r3, [r7, #8]
200020de:	2b00      	cmp	r3, #0
200020e0:	d019      	beq.n	20002116 <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
200020e2:	f000 f845 	bl	20002170 <xTaskIncrementTick>
200020e6:	4603      	mov	r3, r0
200020e8:	2b00      	cmp	r3, #0
200020ea:	d006      	beq.n	200020fa <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
200020ec:	f646 6318 	movw	r3, #28184	; 0x6e18
200020f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020f4:	f04f 0201 	mov.w	r2, #1
200020f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
200020fa:	68bb      	ldr	r3, [r7, #8]
200020fc:	f103 33ff 	add.w	r3, r3, #4294967295
20002100:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
20002102:	68bb      	ldr	r3, [r7, #8]
20002104:	2b00      	cmp	r3, #0
20002106:	d1ec      	bne.n	200020e2 <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
20002108:	f646 6314 	movw	r3, #28180	; 0x6e14
2000210c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002110:	f04f 0200 	mov.w	r2, #0
20002114:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
20002116:	f646 6318 	movw	r3, #28184	; 0x6e18
2000211a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000211e:	681b      	ldr	r3, [r3, #0]
20002120:	2b00      	cmp	r3, #0
20002122:	d00d      	beq.n	20002140 <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
20002124:	f04f 0301 	mov.w	r3, #1
20002128:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
2000212a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000212e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002136:	601a      	str	r2, [r3, #0]
20002138:	f3bf 8f4f 	dsb	sy
2000213c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002140:	f001 fd9c 	bl	20003c7c <vPortExitCritical>

	return xAlreadyYielded;
20002144:	687b      	ldr	r3, [r7, #4]
}
20002146:	4618      	mov	r0, r3
20002148:	f107 0710 	add.w	r7, r7, #16
2000214c:	46bd      	mov	sp, r7
2000214e:	bd80      	pop	{r7, pc}

20002150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002150:	b480      	push	{r7}
20002152:	b083      	sub	sp, #12
20002154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
20002156:	f646 6308 	movw	r3, #28168	; 0x6e08
2000215a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000215e:	681b      	ldr	r3, [r3, #0]
20002160:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
20002162:	687b      	ldr	r3, [r7, #4]
}
20002164:	4618      	mov	r0, r3
20002166:	f107 070c 	add.w	r7, r7, #12
2000216a:	46bd      	mov	sp, r7
2000216c:	bc80      	pop	{r7}
2000216e:	4770      	bx	lr

20002170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
20002170:	b580      	push	{r7, lr}
20002172:	b086      	sub	sp, #24
20002174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
20002176:	f04f 0300 	mov.w	r3, #0
2000217a:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000217c:	f646 632c 	movw	r3, #28204	; 0x6e2c
20002180:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002184:	681b      	ldr	r3, [r3, #0]
20002186:	2b00      	cmp	r3, #0
20002188:	f040 80dc 	bne.w	20002344 <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
2000218c:	f646 6308 	movw	r3, #28168	; 0x6e08
20002190:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002194:	681b      	ldr	r3, [r3, #0]
20002196:	f103 0301 	add.w	r3, r3, #1
2000219a:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
2000219c:	f646 6308 	movw	r3, #28168	; 0x6e08
200021a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021a4:	68fa      	ldr	r2, [r7, #12]
200021a6:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
200021a8:	68fb      	ldr	r3, [r7, #12]
200021aa:	2b00      	cmp	r3, #0
200021ac:	d135      	bne.n	2000221a <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
200021ae:	f646 53bc 	movw	r3, #28092	; 0x6dbc
200021b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021b6:	681b      	ldr	r3, [r3, #0]
200021b8:	681b      	ldr	r3, [r3, #0]
200021ba:	2b00      	cmp	r3, #0
200021bc:	d009      	beq.n	200021d2 <xTaskIncrementTick+0x62>
200021be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200021c2:	f383 8811 	msr	BASEPRI, r3
200021c6:	f3bf 8f6f 	isb	sy
200021ca:	f3bf 8f4f 	dsb	sy
200021ce:	617b      	str	r3, [r7, #20]
200021d0:	e7fe      	b.n	200021d0 <xTaskIncrementTick+0x60>
200021d2:	f646 53bc 	movw	r3, #28092	; 0x6dbc
200021d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021da:	681b      	ldr	r3, [r3, #0]
200021dc:	613b      	str	r3, [r7, #16]
200021de:	f646 53c0 	movw	r3, #28096	; 0x6dc0
200021e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021e6:	681a      	ldr	r2, [r3, #0]
200021e8:	f646 53bc 	movw	r3, #28092	; 0x6dbc
200021ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021f0:	601a      	str	r2, [r3, #0]
200021f2:	f646 53c0 	movw	r3, #28096	; 0x6dc0
200021f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021fa:	693a      	ldr	r2, [r7, #16]
200021fc:	601a      	str	r2, [r3, #0]
200021fe:	f646 631c 	movw	r3, #28188	; 0x6e1c
20002202:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002206:	681b      	ldr	r3, [r3, #0]
20002208:	f103 0201 	add.w	r2, r3, #1
2000220c:	f646 631c 	movw	r3, #28188	; 0x6e1c
20002210:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002214:	601a      	str	r2, [r3, #0]
20002216:	f000 fbb3 	bl	20002980 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
2000221a:	f646 6324 	movw	r3, #28196	; 0x6e24
2000221e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002222:	681b      	ldr	r3, [r3, #0]
20002224:	68fa      	ldr	r2, [r7, #12]
20002226:	429a      	cmp	r2, r3
20002228:	d373      	bcc.n	20002312 <xTaskIncrementTick+0x1a2>
2000222a:	e000      	b.n	2000222e <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
2000222c:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2000222e:	f646 53bc 	movw	r3, #28092	; 0x6dbc
20002232:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002236:	681b      	ldr	r3, [r3, #0]
20002238:	681b      	ldr	r3, [r3, #0]
2000223a:	2b00      	cmp	r3, #0
2000223c:	d102      	bne.n	20002244 <xTaskIncrementTick+0xd4>
2000223e:	f04f 0301 	mov.w	r3, #1
20002242:	e001      	b.n	20002248 <xTaskIncrementTick+0xd8>
20002244:	f04f 0300 	mov.w	r3, #0
20002248:	2b00      	cmp	r3, #0
2000224a:	d007      	beq.n	2000225c <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000224c:	f646 6324 	movw	r3, #28196	; 0x6e24
20002250:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002254:	f04f 32ff 	mov.w	r2, #4294967295
20002258:	601a      	str	r2, [r3, #0]
					break;
2000225a:	e05a      	b.n	20002312 <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2000225c:	f646 53bc 	movw	r3, #28092	; 0x6dbc
20002260:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002264:	681b      	ldr	r3, [r3, #0]
20002266:	68db      	ldr	r3, [r3, #12]
20002268:	68db      	ldr	r3, [r3, #12]
2000226a:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2000226c:	683b      	ldr	r3, [r7, #0]
2000226e:	685b      	ldr	r3, [r3, #4]
20002270:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
20002272:	68fa      	ldr	r2, [r7, #12]
20002274:	687b      	ldr	r3, [r7, #4]
20002276:	429a      	cmp	r2, r3
20002278:	d206      	bcs.n	20002288 <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
2000227a:	f646 6324 	movw	r3, #28196	; 0x6e24
2000227e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002282:	687a      	ldr	r2, [r7, #4]
20002284:	601a      	str	r2, [r3, #0]
						break;
20002286:	e044      	b.n	20002312 <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002288:	683b      	ldr	r3, [r7, #0]
2000228a:	f103 0304 	add.w	r3, r3, #4
2000228e:	4618      	mov	r0, r3
20002290:	f7fe ff10 	bl	200010b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20002294:	683b      	ldr	r3, [r7, #0]
20002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002298:	2b00      	cmp	r3, #0
2000229a:	d005      	beq.n	200022a8 <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2000229c:	683b      	ldr	r3, [r7, #0]
2000229e:	f103 0318 	add.w	r3, r3, #24
200022a2:	4618      	mov	r0, r3
200022a4:	f7fe ff06 	bl	200010b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
200022a8:	683b      	ldr	r3, [r7, #0]
200022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200022ac:	f04f 0201 	mov.w	r2, #1
200022b0:	fa02 f203 	lsl.w	r2, r2, r3
200022b4:	f646 630c 	movw	r3, #28172	; 0x6e0c
200022b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022bc:	681b      	ldr	r3, [r3, #0]
200022be:	ea42 0203 	orr.w	r2, r2, r3
200022c2:	f646 630c 	movw	r3, #28172	; 0x6e0c
200022c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022ca:	601a      	str	r2, [r3, #0]
200022cc:	683b      	ldr	r3, [r7, #0]
200022ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022d0:	4613      	mov	r3, r2
200022d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022d6:	4413      	add	r3, r2
200022d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022dc:	461a      	mov	r2, r3
200022de:	f646 5330 	movw	r3, #27952	; 0x6d30
200022e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022e6:	441a      	add	r2, r3
200022e8:	683b      	ldr	r3, [r7, #0]
200022ea:	f103 0304 	add.w	r3, r3, #4
200022ee:	4610      	mov	r0, r2
200022f0:	4619      	mov	r1, r3
200022f2:	f7fe fe81 	bl	20000ff8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
200022f6:	683b      	ldr	r3, [r7, #0]
200022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022fa:	f646 532c 	movw	r3, #27948	; 0x6d2c
200022fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002302:	681b      	ldr	r3, [r3, #0]
20002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002306:	429a      	cmp	r2, r3
20002308:	d390      	bcc.n	2000222c <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
2000230a:	f04f 0301 	mov.w	r3, #1
2000230e:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002310:	e78d      	b.n	2000222e <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
20002312:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002316:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000231a:	681b      	ldr	r3, [r3, #0]
2000231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000231e:	4613      	mov	r3, r2
20002320:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002324:	4413      	add	r3, r2
20002326:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000232a:	461a      	mov	r2, r3
2000232c:	f646 5330 	movw	r3, #27952	; 0x6d30
20002330:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002334:	4413      	add	r3, r2
20002336:	681b      	ldr	r3, [r3, #0]
20002338:	2b01      	cmp	r3, #1
2000233a:	d910      	bls.n	2000235e <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
2000233c:	f04f 0301 	mov.w	r3, #1
20002340:	60bb      	str	r3, [r7, #8]
20002342:	e00d      	b.n	20002360 <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
20002344:	f646 6314 	movw	r3, #28180	; 0x6e14
20002348:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000234c:	681b      	ldr	r3, [r3, #0]
2000234e:	f103 0201 	add.w	r2, r3, #1
20002352:	f646 6314 	movw	r3, #28180	; 0x6e14
20002356:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000235a:	601a      	str	r2, [r3, #0]
2000235c:	e000      	b.n	20002360 <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
2000235e:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
20002360:	f646 6318 	movw	r3, #28184	; 0x6e18
20002364:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002368:	681b      	ldr	r3, [r3, #0]
2000236a:	2b00      	cmp	r3, #0
2000236c:	d002      	beq.n	20002374 <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
2000236e:	f04f 0301 	mov.w	r3, #1
20002372:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
20002374:	68bb      	ldr	r3, [r7, #8]
}
20002376:	4618      	mov	r0, r3
20002378:	f107 0718 	add.w	r7, r7, #24
2000237c:	46bd      	mov	sp, r7
2000237e:	bd80      	pop	{r7, pc}

20002380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
20002380:	b580      	push	{r7, lr}
20002382:	b088      	sub	sp, #32
20002384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
20002386:	f646 632c 	movw	r3, #28204	; 0x6e2c
2000238a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000238e:	681b      	ldr	r3, [r3, #0]
20002390:	2b00      	cmp	r3, #0
20002392:	d007      	beq.n	200023a4 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
20002394:	f646 6318 	movw	r3, #28184	; 0x6e18
20002398:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000239c:	f04f 0201 	mov.w	r2, #1
200023a0:	601a      	str	r2, [r3, #0]
200023a2:	e0bc      	b.n	2000251e <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
200023a4:	f646 6318 	movw	r3, #28184	; 0x6e18
200023a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023ac:	f04f 0200 	mov.w	r2, #0
200023b0:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
200023b2:	f7fd ffd9 	bl	20000368 <ulGetRunTimeCounterValue>
200023b6:	4602      	mov	r2, r0
200023b8:	f646 6334 	movw	r3, #28212	; 0x6e34
200023bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023c0:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
200023c2:	f646 6334 	movw	r3, #28212	; 0x6e34
200023c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023ca:	681a      	ldr	r2, [r3, #0]
200023cc:	f646 6330 	movw	r3, #28208	; 0x6e30
200023d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023d4:	681b      	ldr	r3, [r3, #0]
200023d6:	429a      	cmp	r2, r3
200023d8:	d913      	bls.n	20002402 <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
200023da:	f646 532c 	movw	r3, #27948	; 0x6d2c
200023de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023e2:	681a      	ldr	r2, [r3, #0]
200023e4:	6d11      	ldr	r1, [r2, #80]	; 0x50
200023e6:	f646 6334 	movw	r3, #28212	; 0x6e34
200023ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023ee:	6818      	ldr	r0, [r3, #0]
200023f0:	f646 6330 	movw	r3, #28208	; 0x6e30
200023f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023f8:	681b      	ldr	r3, [r3, #0]
200023fa:	ebc3 0300 	rsb	r3, r3, r0
200023fe:	440b      	add	r3, r1
20002400:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
20002402:	f646 6334 	movw	r3, #28212	; 0x6e34
20002406:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000240a:	681a      	ldr	r2, [r3, #0]
2000240c:	f646 6330 	movw	r3, #28208	; 0x6e30
20002410:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002414:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
20002416:	f646 532c 	movw	r3, #27948	; 0x6d2c
2000241a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000241e:	681b      	ldr	r3, [r3, #0]
20002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002422:	607b      	str	r3, [r7, #4]
20002424:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
20002428:	60bb      	str	r3, [r7, #8]
2000242a:	687b      	ldr	r3, [r7, #4]
2000242c:	681a      	ldr	r2, [r3, #0]
2000242e:	68bb      	ldr	r3, [r7, #8]
20002430:	429a      	cmp	r2, r3
20002432:	d114      	bne.n	2000245e <vTaskSwitchContext+0xde>
20002434:	687b      	ldr	r3, [r7, #4]
20002436:	f103 0304 	add.w	r3, r3, #4
2000243a:	681a      	ldr	r2, [r3, #0]
2000243c:	68bb      	ldr	r3, [r7, #8]
2000243e:	429a      	cmp	r2, r3
20002440:	d10d      	bne.n	2000245e <vTaskSwitchContext+0xde>
20002442:	687b      	ldr	r3, [r7, #4]
20002444:	f103 0308 	add.w	r3, r3, #8
20002448:	681a      	ldr	r2, [r3, #0]
2000244a:	68bb      	ldr	r3, [r7, #8]
2000244c:	429a      	cmp	r2, r3
2000244e:	d106      	bne.n	2000245e <vTaskSwitchContext+0xde>
20002450:	687b      	ldr	r3, [r7, #4]
20002452:	f103 030c 	add.w	r3, r3, #12
20002456:	681a      	ldr	r2, [r3, #0]
20002458:	68bb      	ldr	r3, [r7, #8]
2000245a:	429a      	cmp	r2, r3
2000245c:	d00f      	beq.n	2000247e <vTaskSwitchContext+0xfe>
2000245e:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002462:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002466:	681a      	ldr	r2, [r3, #0]
20002468:	f646 532c 	movw	r3, #27948	; 0x6d2c
2000246c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002470:	681b      	ldr	r3, [r3, #0]
20002472:	f103 0334 	add.w	r3, r3, #52	; 0x34
20002476:	4610      	mov	r0, r2
20002478:	4619      	mov	r1, r3
2000247a:	f7fd ffe3 	bl	20000444 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
2000247e:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002482:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002486:	681b      	ldr	r3, [r3, #0]
20002488:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
2000248a:	697b      	ldr	r3, [r7, #20]
2000248c:	fab3 f383 	clz	r3, r3
20002490:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
20002492:	7efb      	ldrb	r3, [r7, #27]
20002494:	f1c3 031f 	rsb	r3, r3, #31
20002498:	60fb      	str	r3, [r7, #12]
2000249a:	68fa      	ldr	r2, [r7, #12]
2000249c:	4613      	mov	r3, r2
2000249e:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024a2:	4413      	add	r3, r2
200024a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024a8:	461a      	mov	r2, r3
200024aa:	f646 5330 	movw	r3, #27952	; 0x6d30
200024ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024b2:	4413      	add	r3, r2
200024b4:	681b      	ldr	r3, [r3, #0]
200024b6:	2b00      	cmp	r3, #0
200024b8:	d109      	bne.n	200024ce <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200024ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200024be:	f383 8811 	msr	BASEPRI, r3
200024c2:	f3bf 8f6f 	isb	sy
200024c6:	f3bf 8f4f 	dsb	sy
200024ca:	61fb      	str	r3, [r7, #28]
200024cc:	e7fe      	b.n	200024cc <vTaskSwitchContext+0x14c>
200024ce:	68fa      	ldr	r2, [r7, #12]
200024d0:	4613      	mov	r3, r2
200024d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024d6:	4413      	add	r3, r2
200024d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024dc:	461a      	mov	r2, r3
200024de:	f646 5330 	movw	r3, #27952	; 0x6d30
200024e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024e6:	4413      	add	r3, r2
200024e8:	613b      	str	r3, [r7, #16]
200024ea:	693b      	ldr	r3, [r7, #16]
200024ec:	685b      	ldr	r3, [r3, #4]
200024ee:	685a      	ldr	r2, [r3, #4]
200024f0:	693b      	ldr	r3, [r7, #16]
200024f2:	605a      	str	r2, [r3, #4]
200024f4:	693b      	ldr	r3, [r7, #16]
200024f6:	685a      	ldr	r2, [r3, #4]
200024f8:	693b      	ldr	r3, [r7, #16]
200024fa:	f103 0308 	add.w	r3, r3, #8
200024fe:	429a      	cmp	r2, r3
20002500:	d104      	bne.n	2000250c <vTaskSwitchContext+0x18c>
20002502:	693b      	ldr	r3, [r7, #16]
20002504:	685b      	ldr	r3, [r3, #4]
20002506:	685a      	ldr	r2, [r3, #4]
20002508:	693b      	ldr	r3, [r7, #16]
2000250a:	605a      	str	r2, [r3, #4]
2000250c:	693b      	ldr	r3, [r7, #16]
2000250e:	685b      	ldr	r3, [r3, #4]
20002510:	68db      	ldr	r3, [r3, #12]
20002512:	461a      	mov	r2, r3
20002514:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002518:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000251c:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
2000251e:	f107 0720 	add.w	r7, r7, #32
20002522:	46bd      	mov	sp, r7
20002524:	bd80      	pop	{r7, pc}
20002526:	bf00      	nop

20002528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002528:	b580      	push	{r7, lr}
2000252a:	b084      	sub	sp, #16
2000252c:	af00      	add	r7, sp, #0
2000252e:	6078      	str	r0, [r7, #4]
20002530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002532:	687b      	ldr	r3, [r7, #4]
20002534:	2b00      	cmp	r3, #0
20002536:	d109      	bne.n	2000254c <vTaskPlaceOnEventList+0x24>
20002538:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000253c:	f383 8811 	msr	BASEPRI, r3
20002540:	f3bf 8f6f 	isb	sy
20002544:	f3bf 8f4f 	dsb	sy
20002548:	60fb      	str	r3, [r7, #12]
2000254a:	e7fe      	b.n	2000254a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2000254c:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002550:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002554:	681b      	ldr	r3, [r3, #0]
20002556:	f103 0318 	add.w	r3, r3, #24
2000255a:	6878      	ldr	r0, [r7, #4]
2000255c:	4619      	mov	r1, r3
2000255e:	f7fe fd6f 	bl	20001040 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002562:	6838      	ldr	r0, [r7, #0]
20002564:	f04f 0101 	mov.w	r1, #1
20002568:	f000 fbc4 	bl	20002cf4 <prvAddCurrentTaskToDelayedList>
}
2000256c:	f107 0710 	add.w	r7, r7, #16
20002570:	46bd      	mov	sp, r7
20002572:	bd80      	pop	{r7, pc}

20002574 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002574:	b580      	push	{r7, lr}
20002576:	b086      	sub	sp, #24
20002578:	af00      	add	r7, sp, #0
2000257a:	60f8      	str	r0, [r7, #12]
2000257c:	60b9      	str	r1, [r7, #8]
2000257e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002580:	68fb      	ldr	r3, [r7, #12]
20002582:	2b00      	cmp	r3, #0
20002584:	d109      	bne.n	2000259a <vTaskPlaceOnEventListRestricted+0x26>
20002586:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000258a:	f383 8811 	msr	BASEPRI, r3
2000258e:	f3bf 8f6f 	isb	sy
20002592:	f3bf 8f4f 	dsb	sy
20002596:	617b      	str	r3, [r7, #20]
20002598:	e7fe      	b.n	20002598 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2000259a:	f646 532c 	movw	r3, #27948	; 0x6d2c
2000259e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025a2:	681b      	ldr	r3, [r3, #0]
200025a4:	f103 0318 	add.w	r3, r3, #24
200025a8:	68f8      	ldr	r0, [r7, #12]
200025aa:	4619      	mov	r1, r3
200025ac:	f7fe fd24 	bl	20000ff8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
200025b0:	687b      	ldr	r3, [r7, #4]
200025b2:	2b00      	cmp	r3, #0
200025b4:	d002      	beq.n	200025bc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
200025b6:	f04f 33ff 	mov.w	r3, #4294967295
200025ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
200025bc:	68b8      	ldr	r0, [r7, #8]
200025be:	6879      	ldr	r1, [r7, #4]
200025c0:	f000 fb98 	bl	20002cf4 <prvAddCurrentTaskToDelayedList>
	}
200025c4:	f107 0718 	add.w	r7, r7, #24
200025c8:	46bd      	mov	sp, r7
200025ca:	bd80      	pop	{r7, pc}

200025cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
200025cc:	b580      	push	{r7, lr}
200025ce:	b086      	sub	sp, #24
200025d0:	af00      	add	r7, sp, #0
200025d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
200025d4:	687b      	ldr	r3, [r7, #4]
200025d6:	68db      	ldr	r3, [r3, #12]
200025d8:	68db      	ldr	r3, [r3, #12]
200025da:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
200025dc:	68fb      	ldr	r3, [r7, #12]
200025de:	2b00      	cmp	r3, #0
200025e0:	d109      	bne.n	200025f6 <xTaskRemoveFromEventList+0x2a>
200025e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200025e6:	f383 8811 	msr	BASEPRI, r3
200025ea:	f3bf 8f6f 	isb	sy
200025ee:	f3bf 8f4f 	dsb	sy
200025f2:	617b      	str	r3, [r7, #20]
200025f4:	e7fe      	b.n	200025f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
200025f6:	68fb      	ldr	r3, [r7, #12]
200025f8:	f103 0318 	add.w	r3, r3, #24
200025fc:	4618      	mov	r0, r3
200025fe:	f7fe fd59 	bl	200010b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002602:	f646 632c 	movw	r3, #28204	; 0x6e2c
20002606:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000260a:	681b      	ldr	r3, [r3, #0]
2000260c:	2b00      	cmp	r3, #0
2000260e:	d12d      	bne.n	2000266c <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002610:	68fb      	ldr	r3, [r7, #12]
20002612:	f103 0304 	add.w	r3, r3, #4
20002616:	4618      	mov	r0, r3
20002618:	f7fe fd4c 	bl	200010b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
2000261c:	68fb      	ldr	r3, [r7, #12]
2000261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002620:	f04f 0201 	mov.w	r2, #1
20002624:	fa02 f203 	lsl.w	r2, r2, r3
20002628:	f646 630c 	movw	r3, #28172	; 0x6e0c
2000262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002630:	681b      	ldr	r3, [r3, #0]
20002632:	ea42 0203 	orr.w	r2, r2, r3
20002636:	f646 630c 	movw	r3, #28172	; 0x6e0c
2000263a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000263e:	601a      	str	r2, [r3, #0]
20002640:	68fb      	ldr	r3, [r7, #12]
20002642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002644:	4613      	mov	r3, r2
20002646:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000264a:	4413      	add	r3, r2
2000264c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002650:	461a      	mov	r2, r3
20002652:	f646 5330 	movw	r3, #27952	; 0x6d30
20002656:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000265a:	441a      	add	r2, r3
2000265c:	68fb      	ldr	r3, [r7, #12]
2000265e:	f103 0304 	add.w	r3, r3, #4
20002662:	4610      	mov	r0, r2
20002664:	4619      	mov	r1, r3
20002666:	f7fe fcc7 	bl	20000ff8 <vListInsertEnd>
2000266a:	e009      	b.n	20002680 <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2000266c:	68fb      	ldr	r3, [r7, #12]
2000266e:	f103 0318 	add.w	r3, r3, #24
20002672:	f646 50c4 	movw	r0, #28100	; 0x6dc4
20002676:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000267a:	4619      	mov	r1, r3
2000267c:	f7fe fcbc 	bl	20000ff8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002680:	68fb      	ldr	r3, [r7, #12]
20002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002684:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002688:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000268c:	681b      	ldr	r3, [r3, #0]
2000268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002690:	429a      	cmp	r2, r3
20002692:	d90a      	bls.n	200026aa <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002694:	f04f 0301 	mov.w	r3, #1
20002698:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
2000269a:	f646 6318 	movw	r3, #28184	; 0x6e18
2000269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026a2:	f04f 0201 	mov.w	r2, #1
200026a6:	601a      	str	r2, [r3, #0]
200026a8:	e002      	b.n	200026b0 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
200026aa:	f04f 0300 	mov.w	r3, #0
200026ae:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
200026b0:	693b      	ldr	r3, [r7, #16]
}
200026b2:	4618      	mov	r0, r3
200026b4:	f107 0718 	add.w	r7, r7, #24
200026b8:	46bd      	mov	sp, r7
200026ba:	bd80      	pop	{r7, pc}

200026bc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
200026bc:	b480      	push	{r7}
200026be:	b085      	sub	sp, #20
200026c0:	af00      	add	r7, sp, #0
200026c2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
200026c4:	687b      	ldr	r3, [r7, #4]
200026c6:	2b00      	cmp	r3, #0
200026c8:	d109      	bne.n	200026de <vTaskSetTimeOutState+0x22>
200026ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200026ce:	f383 8811 	msr	BASEPRI, r3
200026d2:	f3bf 8f6f 	isb	sy
200026d6:	f3bf 8f4f 	dsb	sy
200026da:	60fb      	str	r3, [r7, #12]
200026dc:	e7fe      	b.n	200026dc <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
200026de:	f646 631c 	movw	r3, #28188	; 0x6e1c
200026e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026e6:	681a      	ldr	r2, [r3, #0]
200026e8:	687b      	ldr	r3, [r7, #4]
200026ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
200026ec:	f646 6308 	movw	r3, #28168	; 0x6e08
200026f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026f4:	681a      	ldr	r2, [r3, #0]
200026f6:	687b      	ldr	r3, [r7, #4]
200026f8:	605a      	str	r2, [r3, #4]
}
200026fa:	f107 0714 	add.w	r7, r7, #20
200026fe:	46bd      	mov	sp, r7
20002700:	bc80      	pop	{r7}
20002702:	4770      	bx	lr

20002704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002704:	b580      	push	{r7, lr}
20002706:	b086      	sub	sp, #24
20002708:	af00      	add	r7, sp, #0
2000270a:	6078      	str	r0, [r7, #4]
2000270c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
2000270e:	687b      	ldr	r3, [r7, #4]
20002710:	2b00      	cmp	r3, #0
20002712:	d109      	bne.n	20002728 <xTaskCheckForTimeOut+0x24>
20002714:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002718:	f383 8811 	msr	BASEPRI, r3
2000271c:	f3bf 8f6f 	isb	sy
20002720:	f3bf 8f4f 	dsb	sy
20002724:	613b      	str	r3, [r7, #16]
20002726:	e7fe      	b.n	20002726 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
20002728:	683b      	ldr	r3, [r7, #0]
2000272a:	2b00      	cmp	r3, #0
2000272c:	d109      	bne.n	20002742 <xTaskCheckForTimeOut+0x3e>
2000272e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002732:	f383 8811 	msr	BASEPRI, r3
20002736:	f3bf 8f6f 	isb	sy
2000273a:	f3bf 8f4f 	dsb	sy
2000273e:	617b      	str	r3, [r7, #20]
20002740:	e7fe      	b.n	20002740 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
20002742:	f001 fa63 	bl	20003c0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002746:	f646 6308 	movw	r3, #28168	; 0x6e08
2000274a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000274e:	681b      	ldr	r3, [r3, #0]
20002750:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002752:	683b      	ldr	r3, [r7, #0]
20002754:	681b      	ldr	r3, [r3, #0]
20002756:	f1b3 3fff 	cmp.w	r3, #4294967295
2000275a:	d103      	bne.n	20002764 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
2000275c:	f04f 0300 	mov.w	r3, #0
20002760:	60bb      	str	r3, [r7, #8]
20002762:	e02e      	b.n	200027c2 <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002764:	687b      	ldr	r3, [r7, #4]
20002766:	681a      	ldr	r2, [r3, #0]
20002768:	f646 631c 	movw	r3, #28188	; 0x6e1c
2000276c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002770:	681b      	ldr	r3, [r3, #0]
20002772:	429a      	cmp	r2, r3
20002774:	d008      	beq.n	20002788 <xTaskCheckForTimeOut+0x84>
20002776:	687b      	ldr	r3, [r7, #4]
20002778:	685a      	ldr	r2, [r3, #4]
2000277a:	68fb      	ldr	r3, [r7, #12]
2000277c:	429a      	cmp	r2, r3
2000277e:	d803      	bhi.n	20002788 <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002780:	f04f 0301 	mov.w	r3, #1
20002784:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002786:	e01c      	b.n	200027c2 <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002788:	687b      	ldr	r3, [r7, #4]
2000278a:	685b      	ldr	r3, [r3, #4]
2000278c:	68fa      	ldr	r2, [r7, #12]
2000278e:	ebc3 0202 	rsb	r2, r3, r2
20002792:	683b      	ldr	r3, [r7, #0]
20002794:	681b      	ldr	r3, [r3, #0]
20002796:	429a      	cmp	r2, r3
20002798:	d210      	bcs.n	200027bc <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
2000279a:	683b      	ldr	r3, [r7, #0]
2000279c:	681a      	ldr	r2, [r3, #0]
2000279e:	687b      	ldr	r3, [r7, #4]
200027a0:	6859      	ldr	r1, [r3, #4]
200027a2:	68fb      	ldr	r3, [r7, #12]
200027a4:	ebc3 0301 	rsb	r3, r3, r1
200027a8:	441a      	add	r2, r3
200027aa:	683b      	ldr	r3, [r7, #0]
200027ac:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
200027ae:	6878      	ldr	r0, [r7, #4]
200027b0:	f7ff ff84 	bl	200026bc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
200027b4:	f04f 0300 	mov.w	r3, #0
200027b8:	60bb      	str	r3, [r7, #8]
200027ba:	e002      	b.n	200027c2 <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
200027bc:	f04f 0301 	mov.w	r3, #1
200027c0:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
200027c2:	f001 fa5b 	bl	20003c7c <vPortExitCritical>

	return xReturn;
200027c6:	68bb      	ldr	r3, [r7, #8]
}
200027c8:	4618      	mov	r0, r3
200027ca:	f107 0718 	add.w	r7, r7, #24
200027ce:	46bd      	mov	sp, r7
200027d0:	bd80      	pop	{r7, pc}
200027d2:	bf00      	nop

200027d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
200027d4:	b480      	push	{r7}
200027d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
200027d8:	f646 6318 	movw	r3, #28184	; 0x6e18
200027dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027e0:	f04f 0201 	mov.w	r2, #1
200027e4:	601a      	str	r2, [r3, #0]
}
200027e6:	46bd      	mov	sp, r7
200027e8:	bc80      	pop	{r7}
200027ea:	4770      	bx	lr

200027ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
200027ec:	b580      	push	{r7, lr}
200027ee:	b082      	sub	sp, #8
200027f0:	af00      	add	r7, sp, #0
200027f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
200027f4:	f000 f868 	bl	200028c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
200027f8:	f646 5330 	movw	r3, #27952	; 0x6d30
200027fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002800:	681b      	ldr	r3, [r3, #0]
20002802:	2b01      	cmp	r3, #1
20002804:	d90a      	bls.n	2000281c <prvIdleTask+0x30>
			{
				taskYIELD();
20002806:	f64e 5304 	movw	r3, #60676	; 0xed04
2000280a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000280e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002812:	601a      	str	r2, [r3, #0]
20002814:	f3bf 8f4f 	dsb	sy
20002818:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
2000281c:	f7fd fe0c 	bl	20000438 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
20002820:	e7e8      	b.n	200027f4 <prvIdleTask+0x8>
20002822:	bf00      	nop

20002824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002824:	b580      	push	{r7, lr}
20002826:	b082      	sub	sp, #8
20002828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
2000282a:	f04f 0300 	mov.w	r3, #0
2000282e:	607b      	str	r3, [r7, #4]
20002830:	e013      	b.n	2000285a <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002832:	687a      	ldr	r2, [r7, #4]
20002834:	4613      	mov	r3, r2
20002836:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000283a:	4413      	add	r3, r2
2000283c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002840:	461a      	mov	r2, r3
20002842:	f646 5330 	movw	r3, #27952	; 0x6d30
20002846:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000284a:	4413      	add	r3, r2
2000284c:	4618      	mov	r0, r3
2000284e:	f7fe fba1 	bl	20000f94 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002852:	687b      	ldr	r3, [r7, #4]
20002854:	f103 0301 	add.w	r3, r3, #1
20002858:	607b      	str	r3, [r7, #4]
2000285a:	687b      	ldr	r3, [r7, #4]
2000285c:	2b04      	cmp	r3, #4
2000285e:	d9e8      	bls.n	20002832 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
20002860:	f646 5094 	movw	r0, #28052	; 0x6d94
20002864:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002868:	f7fe fb94 	bl	20000f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
2000286c:	f646 50a8 	movw	r0, #28072	; 0x6da8
20002870:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002874:	f7fe fb8e 	bl	20000f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002878:	f646 50c4 	movw	r0, #28100	; 0x6dc4
2000287c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002880:	f7fe fb88 	bl	20000f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002884:	f646 50d8 	movw	r0, #28120	; 0x6dd8
20002888:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000288c:	f7fe fb82 	bl	20000f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002890:	f646 50f0 	movw	r0, #28144	; 0x6df0
20002894:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002898:	f7fe fb7c 	bl	20000f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
2000289c:	f646 53bc 	movw	r3, #28092	; 0x6dbc
200028a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028a4:	f646 5294 	movw	r2, #28052	; 0x6d94
200028a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200028ac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
200028ae:	f646 53c0 	movw	r3, #28096	; 0x6dc0
200028b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028b6:	f646 52a8 	movw	r2, #28072	; 0x6da8
200028ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
200028be:	601a      	str	r2, [r3, #0]
}
200028c0:	f107 0708 	add.w	r7, r7, #8
200028c4:	46bd      	mov	sp, r7
200028c6:	bd80      	pop	{r7, pc}

200028c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
200028c8:	b580      	push	{r7, lr}
200028ca:	b082      	sub	sp, #8
200028cc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
200028ce:	e03c      	b.n	2000294a <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
200028d0:	f7ff fb5c 	bl	20001f8c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
200028d4:	f646 53d8 	movw	r3, #28120	; 0x6dd8
200028d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028dc:	681b      	ldr	r3, [r3, #0]
200028de:	2b00      	cmp	r3, #0
200028e0:	bf14      	ite	ne
200028e2:	2300      	movne	r3, #0
200028e4:	2301      	moveq	r3, #1
200028e6:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
200028e8:	f7ff fb62 	bl	20001fb0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
200028ec:	683b      	ldr	r3, [r7, #0]
200028ee:	2b00      	cmp	r3, #0
200028f0:	d12b      	bne.n	2000294a <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
200028f2:	f001 f98b 	bl	20003c0c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
200028f6:	f646 53d8 	movw	r3, #28120	; 0x6dd8
200028fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028fe:	68db      	ldr	r3, [r3, #12]
20002900:	68db      	ldr	r3, [r3, #12]
20002902:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002904:	687b      	ldr	r3, [r7, #4]
20002906:	f103 0304 	add.w	r3, r3, #4
2000290a:	4618      	mov	r0, r3
2000290c:	f7fe fbd2 	bl	200010b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
20002910:	f646 6304 	movw	r3, #28164	; 0x6e04
20002914:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002918:	681b      	ldr	r3, [r3, #0]
2000291a:	f103 32ff 	add.w	r2, r3, #4294967295
2000291e:	f646 6304 	movw	r3, #28164	; 0x6e04
20002922:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002926:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
20002928:	f646 53ec 	movw	r3, #28140	; 0x6dec
2000292c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002930:	681b      	ldr	r3, [r3, #0]
20002932:	f103 32ff 	add.w	r2, r3, #4294967295
20002936:	f646 53ec 	movw	r3, #28140	; 0x6dec
2000293a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000293e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
20002940:	f001 f99c 	bl	20003c7c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
20002944:	6878      	ldr	r0, [r7, #4]
20002946:	f000 f80b 	bl	20002960 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
2000294a:	f646 53ec 	movw	r3, #28140	; 0x6dec
2000294e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002952:	681b      	ldr	r3, [r3, #0]
20002954:	2b00      	cmp	r3, #0
20002956:	d1bb      	bne.n	200028d0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002958:	f107 0708 	add.w	r7, r7, #8
2000295c:	46bd      	mov	sp, r7
2000295e:	bd80      	pop	{r7, pc}

20002960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20002960:	b580      	push	{r7, lr}
20002962:	b082      	sub	sp, #8
20002964:	af00      	add	r7, sp, #0
20002966:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
20002968:	687b      	ldr	r3, [r7, #4]
2000296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000296c:	4618      	mov	r0, r3
2000296e:	f000 fef9 	bl	20003764 <vPortFree>
			vPortFree( pxTCB );
20002972:	6878      	ldr	r0, [r7, #4]
20002974:	f000 fef6 	bl	20003764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20002978:	f107 0708 	add.w	r7, r7, #8
2000297c:	46bd      	mov	sp, r7
2000297e:	bd80      	pop	{r7, pc}

20002980 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002980:	b480      	push	{r7}
20002982:	b083      	sub	sp, #12
20002984:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002986:	f646 53bc 	movw	r3, #28092	; 0x6dbc
2000298a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000298e:	681b      	ldr	r3, [r3, #0]
20002990:	681b      	ldr	r3, [r3, #0]
20002992:	2b00      	cmp	r3, #0
20002994:	d102      	bne.n	2000299c <prvResetNextTaskUnblockTime+0x1c>
20002996:	f04f 0301 	mov.w	r3, #1
2000299a:	e001      	b.n	200029a0 <prvResetNextTaskUnblockTime+0x20>
2000299c:	f04f 0300 	mov.w	r3, #0
200029a0:	2b00      	cmp	r3, #0
200029a2:	d007      	beq.n	200029b4 <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
200029a4:	f646 6324 	movw	r3, #28196	; 0x6e24
200029a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029ac:	f04f 32ff 	mov.w	r2, #4294967295
200029b0:	601a      	str	r2, [r3, #0]
200029b2:	e00e      	b.n	200029d2 <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
200029b4:	f646 53bc 	movw	r3, #28092	; 0x6dbc
200029b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029bc:	681b      	ldr	r3, [r3, #0]
200029be:	68db      	ldr	r3, [r3, #12]
200029c0:	68db      	ldr	r3, [r3, #12]
200029c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
200029c4:	687b      	ldr	r3, [r7, #4]
200029c6:	685a      	ldr	r2, [r3, #4]
200029c8:	f646 6324 	movw	r3, #28196	; 0x6e24
200029cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029d0:	601a      	str	r2, [r3, #0]
	}
}
200029d2:	f107 070c 	add.w	r7, r7, #12
200029d6:	46bd      	mov	sp, r7
200029d8:	bc80      	pop	{r7}
200029da:	4770      	bx	lr

200029dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
200029dc:	b480      	push	{r7}
200029de:	b083      	sub	sp, #12
200029e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
200029e2:	f646 6310 	movw	r3, #28176	; 0x6e10
200029e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029ea:	681b      	ldr	r3, [r3, #0]
200029ec:	2b00      	cmp	r3, #0
200029ee:	d103      	bne.n	200029f8 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
200029f0:	f04f 0301 	mov.w	r3, #1
200029f4:	607b      	str	r3, [r7, #4]
200029f6:	e00d      	b.n	20002a14 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200029f8:	f646 632c 	movw	r3, #28204	; 0x6e2c
200029fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a00:	681b      	ldr	r3, [r3, #0]
20002a02:	2b00      	cmp	r3, #0
20002a04:	d103      	bne.n	20002a0e <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
20002a06:	f04f 0302 	mov.w	r3, #2
20002a0a:	607b      	str	r3, [r7, #4]
20002a0c:	e002      	b.n	20002a14 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20002a0e:	f04f 0300 	mov.w	r3, #0
20002a12:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
20002a14:	687b      	ldr	r3, [r7, #4]
	}
20002a16:	4618      	mov	r0, r3
20002a18:	f107 070c 	add.w	r7, r7, #12
20002a1c:	46bd      	mov	sp, r7
20002a1e:	bc80      	pop	{r7}
20002a20:	4770      	bx	lr
20002a22:	bf00      	nop

20002a24 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
20002a24:	b580      	push	{r7, lr}
20002a26:	b084      	sub	sp, #16
20002a28:	af00      	add	r7, sp, #0
20002a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20002a2c:	687b      	ldr	r3, [r7, #4]
20002a2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
20002a30:	687b      	ldr	r3, [r7, #4]
20002a32:	2b00      	cmp	r3, #0
20002a34:	f000 8098 	beq.w	20002b68 <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
20002a38:	68fb      	ldr	r3, [r7, #12]
20002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a3c:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a44:	681b      	ldr	r3, [r3, #0]
20002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a48:	429a      	cmp	r2, r3
20002a4a:	f080 808d 	bcs.w	20002b68 <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20002a4e:	68fb      	ldr	r3, [r7, #12]
20002a50:	699b      	ldr	r3, [r3, #24]
20002a52:	2b00      	cmp	r3, #0
20002a54:	db09      	blt.n	20002a6a <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002a56:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a5e:	681b      	ldr	r3, [r3, #0]
20002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a62:	f1c3 0205 	rsb	r2, r3, #5
20002a66:	68fb      	ldr	r3, [r7, #12]
20002a68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20002a6a:	68fb      	ldr	r3, [r7, #12]
20002a6c:	6959      	ldr	r1, [r3, #20]
20002a6e:	68fb      	ldr	r3, [r7, #12]
20002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a72:	4613      	mov	r3, r2
20002a74:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a78:	4413      	add	r3, r2
20002a7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a7e:	461a      	mov	r2, r3
20002a80:	f646 5330 	movw	r3, #27952	; 0x6d30
20002a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a88:	4413      	add	r3, r2
20002a8a:	4299      	cmp	r1, r3
20002a8c:	d102      	bne.n	20002a94 <vTaskPriorityInherit+0x70>
20002a8e:	f04f 0301 	mov.w	r3, #1
20002a92:	e001      	b.n	20002a98 <vTaskPriorityInherit+0x74>
20002a94:	f04f 0300 	mov.w	r3, #0
20002a98:	2b00      	cmp	r3, #0
20002a9a:	d05d      	beq.n	20002b58 <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002a9c:	68fb      	ldr	r3, [r7, #12]
20002a9e:	f103 0304 	add.w	r3, r3, #4
20002aa2:	4618      	mov	r0, r3
20002aa4:	f7fe fb06 	bl	200010b4 <uxListRemove>
20002aa8:	4603      	mov	r3, r0
20002aaa:	2b00      	cmp	r3, #0
20002aac:	d124      	bne.n	20002af8 <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20002aae:	68fb      	ldr	r3, [r7, #12]
20002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002ab2:	4613      	mov	r3, r2
20002ab4:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002ab8:	4413      	add	r3, r2
20002aba:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002abe:	461a      	mov	r2, r3
20002ac0:	f646 5330 	movw	r3, #27952	; 0x6d30
20002ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ac8:	4413      	add	r3, r2
20002aca:	681b      	ldr	r3, [r3, #0]
20002acc:	2b00      	cmp	r3, #0
20002ace:	d113      	bne.n	20002af8 <vTaskPriorityInherit+0xd4>
20002ad0:	68fb      	ldr	r3, [r7, #12]
20002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002ad4:	f04f 0201 	mov.w	r2, #1
20002ad8:	fa02 f303 	lsl.w	r3, r2, r3
20002adc:	ea6f 0203 	mvn.w	r2, r3
20002ae0:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ae8:	681b      	ldr	r3, [r3, #0]
20002aea:	ea02 0203 	and.w	r2, r2, r3
20002aee:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002af6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20002af8:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b00:	681b      	ldr	r3, [r3, #0]
20002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b04:	68fb      	ldr	r3, [r7, #12]
20002b06:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
20002b08:	68fb      	ldr	r3, [r7, #12]
20002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002b0c:	f04f 0201 	mov.w	r2, #1
20002b10:	fa02 f203 	lsl.w	r2, r2, r3
20002b14:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b1c:	681b      	ldr	r3, [r3, #0]
20002b1e:	ea42 0203 	orr.w	r2, r2, r3
20002b22:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b2a:	601a      	str	r2, [r3, #0]
20002b2c:	68fb      	ldr	r3, [r7, #12]
20002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b30:	4613      	mov	r3, r2
20002b32:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b36:	4413      	add	r3, r2
20002b38:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b3c:	461a      	mov	r2, r3
20002b3e:	f646 5330 	movw	r3, #27952	; 0x6d30
20002b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b46:	441a      	add	r2, r3
20002b48:	68fb      	ldr	r3, [r7, #12]
20002b4a:	f103 0304 	add.w	r3, r3, #4
20002b4e:	4610      	mov	r0, r2
20002b50:	4619      	mov	r1, r3
20002b52:	f7fe fa51 	bl	20000ff8 <vListInsertEnd>
20002b56:	e007      	b.n	20002b68 <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20002b58:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b60:	681b      	ldr	r3, [r3, #0]
20002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b64:	68fb      	ldr	r3, [r7, #12]
20002b66:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20002b68:	f107 0710 	add.w	r7, r7, #16
20002b6c:	46bd      	mov	sp, r7
20002b6e:	bd80      	pop	{r7, pc}

20002b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20002b70:	b580      	push	{r7, lr}
20002b72:	b086      	sub	sp, #24
20002b74:	af00      	add	r7, sp, #0
20002b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20002b78:	687b      	ldr	r3, [r7, #4]
20002b7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
20002b7c:	f04f 0300 	mov.w	r3, #0
20002b80:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
20002b82:	687b      	ldr	r3, [r7, #4]
20002b84:	2b00      	cmp	r3, #0
20002b86:	f000 8092 	beq.w	20002cae <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20002b8a:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b92:	681b      	ldr	r3, [r3, #0]
20002b94:	68ba      	ldr	r2, [r7, #8]
20002b96:	429a      	cmp	r2, r3
20002b98:	d009      	beq.n	20002bae <xTaskPriorityDisinherit+0x3e>
20002b9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002b9e:	f383 8811 	msr	BASEPRI, r3
20002ba2:	f3bf 8f6f 	isb	sy
20002ba6:	f3bf 8f4f 	dsb	sy
20002baa:	613b      	str	r3, [r7, #16]
20002bac:	e7fe      	b.n	20002bac <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
20002bae:	68bb      	ldr	r3, [r7, #8]
20002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002bb2:	2b00      	cmp	r3, #0
20002bb4:	d109      	bne.n	20002bca <xTaskPriorityDisinherit+0x5a>
20002bb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002bba:	f383 8811 	msr	BASEPRI, r3
20002bbe:	f3bf 8f6f 	isb	sy
20002bc2:	f3bf 8f4f 	dsb	sy
20002bc6:	617b      	str	r3, [r7, #20]
20002bc8:	e7fe      	b.n	20002bc8 <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
20002bca:	68bb      	ldr	r3, [r7, #8]
20002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002bce:	f103 32ff 	add.w	r2, r3, #4294967295
20002bd2:	68bb      	ldr	r3, [r7, #8]
20002bd4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
20002bd6:	68bb      	ldr	r3, [r7, #8]
20002bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002bda:	68bb      	ldr	r3, [r7, #8]
20002bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002bde:	429a      	cmp	r2, r3
20002be0:	d065      	beq.n	20002cae <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
20002be2:	68bb      	ldr	r3, [r7, #8]
20002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002be6:	2b00      	cmp	r3, #0
20002be8:	d161      	bne.n	20002cae <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002bea:	68bb      	ldr	r3, [r7, #8]
20002bec:	f103 0304 	add.w	r3, r3, #4
20002bf0:	4618      	mov	r0, r3
20002bf2:	f7fe fa5f 	bl	200010b4 <uxListRemove>
20002bf6:	4603      	mov	r3, r0
20002bf8:	2b00      	cmp	r3, #0
20002bfa:	d124      	bne.n	20002c46 <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20002bfc:	68bb      	ldr	r3, [r7, #8]
20002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c00:	4613      	mov	r3, r2
20002c02:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c06:	4413      	add	r3, r2
20002c08:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c0c:	461a      	mov	r2, r3
20002c0e:	f646 5330 	movw	r3, #27952	; 0x6d30
20002c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c16:	4413      	add	r3, r2
20002c18:	681b      	ldr	r3, [r3, #0]
20002c1a:	2b00      	cmp	r3, #0
20002c1c:	d113      	bne.n	20002c46 <xTaskPriorityDisinherit+0xd6>
20002c1e:	68bb      	ldr	r3, [r7, #8]
20002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c22:	f04f 0201 	mov.w	r2, #1
20002c26:	fa02 f303 	lsl.w	r3, r2, r3
20002c2a:	ea6f 0203 	mvn.w	r2, r3
20002c2e:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c36:	681b      	ldr	r3, [r3, #0]
20002c38:	ea02 0203 	and.w	r2, r2, r3
20002c3c:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c44:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
20002c46:	68bb      	ldr	r3, [r7, #8]
20002c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20002c4a:	68bb      	ldr	r3, [r7, #8]
20002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002c4e:	68bb      	ldr	r3, [r7, #8]
20002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c52:	f1c3 0205 	rsb	r2, r3, #5
20002c56:	68bb      	ldr	r3, [r7, #8]
20002c58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
20002c5a:	68bb      	ldr	r3, [r7, #8]
20002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c5e:	f04f 0201 	mov.w	r2, #1
20002c62:	fa02 f203 	lsl.w	r2, r2, r3
20002c66:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c6e:	681b      	ldr	r3, [r3, #0]
20002c70:	ea42 0203 	orr.w	r2, r2, r3
20002c74:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c7c:	601a      	str	r2, [r3, #0]
20002c7e:	68bb      	ldr	r3, [r7, #8]
20002c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c82:	4613      	mov	r3, r2
20002c84:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c88:	4413      	add	r3, r2
20002c8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c8e:	461a      	mov	r2, r3
20002c90:	f646 5330 	movw	r3, #27952	; 0x6d30
20002c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c98:	441a      	add	r2, r3
20002c9a:	68bb      	ldr	r3, [r7, #8]
20002c9c:	f103 0304 	add.w	r3, r3, #4
20002ca0:	4610      	mov	r0, r2
20002ca2:	4619      	mov	r1, r3
20002ca4:	f7fe f9a8 	bl	20000ff8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20002ca8:	f04f 0301 	mov.w	r3, #1
20002cac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20002cae:	68fb      	ldr	r3, [r7, #12]
	}
20002cb0:	4618      	mov	r0, r3
20002cb2:	f107 0718 	add.w	r7, r7, #24
20002cb6:	46bd      	mov	sp, r7
20002cb8:	bd80      	pop	{r7, pc}
20002cba:	bf00      	nop

20002cbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
20002cbc:	b480      	push	{r7}
20002cbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
20002cc0:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cc8:	681b      	ldr	r3, [r3, #0]
20002cca:	2b00      	cmp	r3, #0
20002ccc:	d008      	beq.n	20002ce0 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
20002cce:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cd6:	681b      	ldr	r3, [r3, #0]
20002cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002cda:	f102 0201 	add.w	r2, r2, #1
20002cde:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
20002ce0:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ce8:	681b      	ldr	r3, [r3, #0]
	}
20002cea:	4618      	mov	r0, r3
20002cec:	46bd      	mov	sp, r7
20002cee:	bc80      	pop	{r7}
20002cf0:	4770      	bx	lr
20002cf2:	bf00      	nop

20002cf4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
20002cf4:	b580      	push	{r7, lr}
20002cf6:	b084      	sub	sp, #16
20002cf8:	af00      	add	r7, sp, #0
20002cfa:	6078      	str	r0, [r7, #4]
20002cfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
20002cfe:	f646 6308 	movw	r3, #28168	; 0x6e08
20002d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d06:	681b      	ldr	r3, [r3, #0]
20002d08:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002d0a:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d12:	681b      	ldr	r3, [r3, #0]
20002d14:	f103 0304 	add.w	r3, r3, #4
20002d18:	4618      	mov	r0, r3
20002d1a:	f7fe f9cb 	bl	200010b4 <uxListRemove>
20002d1e:	4603      	mov	r3, r0
20002d20:	2b00      	cmp	r3, #0
20002d22:	d117      	bne.n	20002d54 <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
20002d24:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d2c:	681b      	ldr	r3, [r3, #0]
20002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002d30:	f04f 0201 	mov.w	r2, #1
20002d34:	fa02 f303 	lsl.w	r3, r2, r3
20002d38:	ea6f 0203 	mvn.w	r2, r3
20002d3c:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d44:	681b      	ldr	r3, [r3, #0]
20002d46:	ea02 0203 	and.w	r2, r2, r3
20002d4a:	f646 630c 	movw	r3, #28172	; 0x6e0c
20002d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d52:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20002d54:	687b      	ldr	r3, [r7, #4]
20002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
20002d5a:	d111      	bne.n	20002d80 <prvAddCurrentTaskToDelayedList+0x8c>
20002d5c:	683b      	ldr	r3, [r7, #0]
20002d5e:	2b00      	cmp	r3, #0
20002d60:	d00e      	beq.n	20002d80 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
20002d62:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d6a:	681b      	ldr	r3, [r3, #0]
20002d6c:	f103 0304 	add.w	r3, r3, #4
20002d70:	f646 50f0 	movw	r0, #28144	; 0x6df0
20002d74:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d78:	4619      	mov	r1, r3
20002d7a:	f7fe f93d 	bl	20000ff8 <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20002d7e:	e03d      	b.n	20002dfc <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
20002d80:	68fa      	ldr	r2, [r7, #12]
20002d82:	687b      	ldr	r3, [r7, #4]
20002d84:	4413      	add	r3, r2
20002d86:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
20002d88:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d90:	681b      	ldr	r3, [r3, #0]
20002d92:	68ba      	ldr	r2, [r7, #8]
20002d94:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
20002d96:	68ba      	ldr	r2, [r7, #8]
20002d98:	68fb      	ldr	r3, [r7, #12]
20002d9a:	429a      	cmp	r2, r3
20002d9c:	d210      	bcs.n	20002dc0 <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20002d9e:	f646 53c0 	movw	r3, #28096	; 0x6dc0
20002da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002da6:	681a      	ldr	r2, [r3, #0]
20002da8:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002db0:	681b      	ldr	r3, [r3, #0]
20002db2:	f103 0304 	add.w	r3, r3, #4
20002db6:	4610      	mov	r0, r2
20002db8:	4619      	mov	r1, r3
20002dba:	f7fe f941 	bl	20001040 <vListInsert>
20002dbe:	e01d      	b.n	20002dfc <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20002dc0:	f646 53bc 	movw	r3, #28092	; 0x6dbc
20002dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dc8:	681a      	ldr	r2, [r3, #0]
20002dca:	f646 532c 	movw	r3, #27948	; 0x6d2c
20002dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dd2:	681b      	ldr	r3, [r3, #0]
20002dd4:	f103 0304 	add.w	r3, r3, #4
20002dd8:	4610      	mov	r0, r2
20002dda:	4619      	mov	r1, r3
20002ddc:	f7fe f930 	bl	20001040 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
20002de0:	f646 6324 	movw	r3, #28196	; 0x6e24
20002de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002de8:	681b      	ldr	r3, [r3, #0]
20002dea:	68ba      	ldr	r2, [r7, #8]
20002dec:	429a      	cmp	r2, r3
20002dee:	d205      	bcs.n	20002dfc <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
20002df0:	f646 6324 	movw	r3, #28196	; 0x6e24
20002df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002df8:	68ba      	ldr	r2, [r7, #8]
20002dfa:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
20002dfc:	f107 0710 	add.w	r7, r7, #16
20002e00:	46bd      	mov	sp, r7
20002e02:	bd80      	pop	{r7, pc}

20002e04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
20002e04:	b580      	push	{r7, lr}
20002e06:	b084      	sub	sp, #16
20002e08:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
20002e0a:	f04f 0300 	mov.w	r3, #0
20002e0e:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
20002e10:	f000 fb72 	bl	200034f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
20002e14:	f646 6368 	movw	r3, #28264	; 0x6e68
20002e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e1c:	681b      	ldr	r3, [r3, #0]
20002e1e:	2b00      	cmp	r3, #0
20002e20:	d017      	beq.n	20002e52 <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
20002e22:	f04f 0302 	mov.w	r3, #2
20002e26:	9300      	str	r3, [sp, #0]
20002e28:	f646 636c 	movw	r3, #28268	; 0x6e6c
20002e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e30:	9301      	str	r3, [sp, #4]
20002e32:	f243 0075 	movw	r0, #12405	; 0x3075
20002e36:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002e3a:	f646 4150 	movw	r1, #27728	; 0x6c50
20002e3e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20002e42:	f04f 02a0 	mov.w	r2, #160	; 0xa0
20002e46:	f04f 0300 	mov.w	r3, #0
20002e4a:	f7fe fec7 	bl	20001bdc <xTaskCreate>
20002e4e:	4603      	mov	r3, r0
20002e50:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
20002e52:	683b      	ldr	r3, [r7, #0]
20002e54:	2b00      	cmp	r3, #0
20002e56:	d109      	bne.n	20002e6c <xTimerCreateTimerTask+0x68>
20002e58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002e5c:	f383 8811 	msr	BASEPRI, r3
20002e60:	f3bf 8f6f 	isb	sy
20002e64:	f3bf 8f4f 	dsb	sy
20002e68:	607b      	str	r3, [r7, #4]
20002e6a:	e7fe      	b.n	20002e6a <xTimerCreateTimerTask+0x66>
	return xReturn;
20002e6c:	683b      	ldr	r3, [r7, #0]
}
20002e6e:	4618      	mov	r0, r3
20002e70:	f107 0708 	add.w	r7, r7, #8
20002e74:	46bd      	mov	sp, r7
20002e76:	bd80      	pop	{r7, pc}

20002e78 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20002e78:	b580      	push	{r7, lr}
20002e7a:	b088      	sub	sp, #32
20002e7c:	af02      	add	r7, sp, #8
20002e7e:	60f8      	str	r0, [r7, #12]
20002e80:	60b9      	str	r1, [r7, #8]
20002e82:	607a      	str	r2, [r7, #4]
20002e84:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
20002e86:	f04f 002c 	mov.w	r0, #44	; 0x2c
20002e8a:	f000 fb6f 	bl	2000356c <pvPortMalloc>
20002e8e:	4603      	mov	r3, r0
20002e90:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
20002e92:	697b      	ldr	r3, [r7, #20]
20002e94:	2b00      	cmp	r3, #0
20002e96:	d009      	beq.n	20002eac <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
20002e98:	6a3b      	ldr	r3, [r7, #32]
20002e9a:	9300      	str	r3, [sp, #0]
20002e9c:	697b      	ldr	r3, [r7, #20]
20002e9e:	9301      	str	r3, [sp, #4]
20002ea0:	68f8      	ldr	r0, [r7, #12]
20002ea2:	68b9      	ldr	r1, [r7, #8]
20002ea4:	687a      	ldr	r2, [r7, #4]
20002ea6:	683b      	ldr	r3, [r7, #0]
20002ea8:	f000 f806 	bl	20002eb8 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
20002eac:	697b      	ldr	r3, [r7, #20]
	}
20002eae:	4618      	mov	r0, r3
20002eb0:	f107 0718 	add.w	r7, r7, #24
20002eb4:	46bd      	mov	sp, r7
20002eb6:	bd80      	pop	{r7, pc}

20002eb8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
20002eb8:	b580      	push	{r7, lr}
20002eba:	b086      	sub	sp, #24
20002ebc:	af00      	add	r7, sp, #0
20002ebe:	60f8      	str	r0, [r7, #12]
20002ec0:	60b9      	str	r1, [r7, #8]
20002ec2:	607a      	str	r2, [r7, #4]
20002ec4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
20002ec6:	68bb      	ldr	r3, [r7, #8]
20002ec8:	2b00      	cmp	r3, #0
20002eca:	d109      	bne.n	20002ee0 <prvInitialiseNewTimer+0x28>
20002ecc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002ed0:	f383 8811 	msr	BASEPRI, r3
20002ed4:	f3bf 8f6f 	isb	sy
20002ed8:	f3bf 8f4f 	dsb	sy
20002edc:	617b      	str	r3, [r7, #20]
20002ede:	e7fe      	b.n	20002ede <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
20002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ee2:	2b00      	cmp	r3, #0
20002ee4:	d016      	beq.n	20002f14 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
20002ee6:	f000 fb07 	bl	200034f8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
20002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002eec:	68fa      	ldr	r2, [r7, #12]
20002eee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
20002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ef2:	68ba      	ldr	r2, [r7, #8]
20002ef4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
20002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ef8:	687a      	ldr	r2, [r7, #4]
20002efa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
20002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002efe:	683a      	ldr	r2, [r7, #0]
20002f00:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
20002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002f04:	6a3a      	ldr	r2, [r7, #32]
20002f06:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
20002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002f0a:	f103 0304 	add.w	r3, r3, #4
20002f0e:	4618      	mov	r0, r3
20002f10:	f7fe f864 	bl	20000fdc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
20002f14:	f107 0718 	add.w	r7, r7, #24
20002f18:	46bd      	mov	sp, r7
20002f1a:	bd80      	pop	{r7, pc}

20002f1c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
20002f1c:	b580      	push	{r7, lr}
20002f1e:	b08a      	sub	sp, #40	; 0x28
20002f20:	af00      	add	r7, sp, #0
20002f22:	60f8      	str	r0, [r7, #12]
20002f24:	60b9      	str	r1, [r7, #8]
20002f26:	607a      	str	r2, [r7, #4]
20002f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
20002f2a:	f04f 0300 	mov.w	r3, #0
20002f2e:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
20002f30:	68fb      	ldr	r3, [r7, #12]
20002f32:	2b00      	cmp	r3, #0
20002f34:	d109      	bne.n	20002f4a <xTimerGenericCommand+0x2e>
20002f36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002f3a:	f383 8811 	msr	BASEPRI, r3
20002f3e:	f3bf 8f6f 	isb	sy
20002f42:	f3bf 8f4f 	dsb	sy
20002f46:	627b      	str	r3, [r7, #36]	; 0x24
20002f48:	e7fe      	b.n	20002f48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
20002f4a:	f646 6368 	movw	r3, #28264	; 0x6e68
20002f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f52:	681b      	ldr	r3, [r3, #0]
20002f54:	2b00      	cmp	r3, #0
20002f56:	d040      	beq.n	20002fda <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
20002f58:	68bb      	ldr	r3, [r7, #8]
20002f5a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
20002f5c:	687b      	ldr	r3, [r7, #4]
20002f5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
20002f60:	68fb      	ldr	r3, [r7, #12]
20002f62:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20002f64:	68bb      	ldr	r3, [r7, #8]
20002f66:	2b05      	cmp	r3, #5
20002f68:	dc27      	bgt.n	20002fba <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
20002f6a:	f7ff fd37 	bl	200029dc <xTaskGetSchedulerState>
20002f6e:	4603      	mov	r3, r0
20002f70:	2b02      	cmp	r3, #2
20002f72:	d110      	bne.n	20002f96 <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
20002f74:	f646 6368 	movw	r3, #28264	; 0x6e68
20002f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f7c:	681a      	ldr	r2, [r3, #0]
20002f7e:	f107 0310 	add.w	r3, r7, #16
20002f82:	4610      	mov	r0, r2
20002f84:	4619      	mov	r1, r3
20002f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002f88:	f04f 0300 	mov.w	r3, #0
20002f8c:	f7fe f9d2 	bl	20001334 <xQueueGenericSend>
20002f90:	4603      	mov	r3, r0
20002f92:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
20002f94:	e021      	b.n	20002fda <xTimerGenericCommand+0xbe>
20002f96:	f646 6368 	movw	r3, #28264	; 0x6e68
20002f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f9e:	681a      	ldr	r2, [r3, #0]
20002fa0:	f107 0310 	add.w	r3, r7, #16
20002fa4:	4610      	mov	r0, r2
20002fa6:	4619      	mov	r1, r3
20002fa8:	f04f 0200 	mov.w	r2, #0
20002fac:	f04f 0300 	mov.w	r3, #0
20002fb0:	f7fe f9c0 	bl	20001334 <xQueueGenericSend>
20002fb4:	4603      	mov	r3, r0
20002fb6:	623b      	str	r3, [r7, #32]
20002fb8:	e00f      	b.n	20002fda <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
20002fba:	f646 6368 	movw	r3, #28264	; 0x6e68
20002fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fc2:	681a      	ldr	r2, [r3, #0]
20002fc4:	f107 0310 	add.w	r3, r7, #16
20002fc8:	4610      	mov	r0, r2
20002fca:	4619      	mov	r1, r3
20002fcc:	683a      	ldr	r2, [r7, #0]
20002fce:	f04f 0300 	mov.w	r3, #0
20002fd2:	f7fe fac7 	bl	20001564 <xQueueGenericSendFromISR>
20002fd6:	4603      	mov	r3, r0
20002fd8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
20002fda:	6a3b      	ldr	r3, [r7, #32]
}
20002fdc:	4618      	mov	r0, r3
20002fde:	f107 0728 	add.w	r7, r7, #40	; 0x28
20002fe2:	46bd      	mov	sp, r7
20002fe4:	bd80      	pop	{r7, pc}
20002fe6:	bf00      	nop

20002fe8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
20002fe8:	b580      	push	{r7, lr}
20002fea:	b088      	sub	sp, #32
20002fec:	af02      	add	r7, sp, #8
20002fee:	6078      	str	r0, [r7, #4]
20002ff0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20002ff2:	f646 6360 	movw	r3, #28256	; 0x6e60
20002ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ffa:	681b      	ldr	r3, [r3, #0]
20002ffc:	68db      	ldr	r3, [r3, #12]
20002ffe:	68db      	ldr	r3, [r3, #12]
20003000:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003002:	693b      	ldr	r3, [r7, #16]
20003004:	f103 0304 	add.w	r3, r3, #4
20003008:	4618      	mov	r0, r3
2000300a:	f7fe f853 	bl	200010b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
2000300e:	693b      	ldr	r3, [r7, #16]
20003010:	69db      	ldr	r3, [r3, #28]
20003012:	2b01      	cmp	r3, #1
20003014:	d126      	bne.n	20003064 <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
20003016:	693b      	ldr	r3, [r7, #16]
20003018:	699a      	ldr	r2, [r3, #24]
2000301a:	687b      	ldr	r3, [r7, #4]
2000301c:	4413      	add	r3, r2
2000301e:	6938      	ldr	r0, [r7, #16]
20003020:	4619      	mov	r1, r3
20003022:	683a      	ldr	r2, [r7, #0]
20003024:	687b      	ldr	r3, [r7, #4]
20003026:	f000 f8df 	bl	200031e8 <prvInsertTimerInActiveList>
2000302a:	4603      	mov	r3, r0
2000302c:	2b00      	cmp	r3, #0
2000302e:	d019      	beq.n	20003064 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003030:	f04f 0300 	mov.w	r3, #0
20003034:	9300      	str	r3, [sp, #0]
20003036:	6938      	ldr	r0, [r7, #16]
20003038:	f04f 0100 	mov.w	r1, #0
2000303c:	687a      	ldr	r2, [r7, #4]
2000303e:	f04f 0300 	mov.w	r3, #0
20003042:	f7ff ff6b 	bl	20002f1c <xTimerGenericCommand>
20003046:	4603      	mov	r3, r0
20003048:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
2000304a:	68fb      	ldr	r3, [r7, #12]
2000304c:	2b00      	cmp	r3, #0
2000304e:	d109      	bne.n	20003064 <prvProcessExpiredTimer+0x7c>
20003050:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003054:	f383 8811 	msr	BASEPRI, r3
20003058:	f3bf 8f6f 	isb	sy
2000305c:	f3bf 8f4f 	dsb	sy
20003060:	617b      	str	r3, [r7, #20]
20003062:	e7fe      	b.n	20003062 <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003064:	693b      	ldr	r3, [r7, #16]
20003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003068:	6938      	ldr	r0, [r7, #16]
2000306a:	4798      	blx	r3
}
2000306c:	f107 0718 	add.w	r7, r7, #24
20003070:	46bd      	mov	sp, r7
20003072:	bd80      	pop	{r7, pc}

20003074 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
20003074:	b580      	push	{r7, lr}
20003076:	b084      	sub	sp, #16
20003078:	af00      	add	r7, sp, #0
2000307a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
2000307c:	f107 0308 	add.w	r3, r7, #8
20003080:	4618      	mov	r0, r3
20003082:	f000 f861 	bl	20003148 <prvGetNextExpireTime>
20003086:	4603      	mov	r3, r0
20003088:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
2000308a:	68bb      	ldr	r3, [r7, #8]
2000308c:	68f8      	ldr	r0, [r7, #12]
2000308e:	4619      	mov	r1, r3
20003090:	f000 f804 	bl	2000309c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
20003094:	f000 f8f4 	bl	20003280 <prvProcessReceivedCommands>
	}
20003098:	e7f0      	b.n	2000307c <prvTimerTask+0x8>
2000309a:	bf00      	nop

2000309c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
2000309c:	b580      	push	{r7, lr}
2000309e:	b084      	sub	sp, #16
200030a0:	af00      	add	r7, sp, #0
200030a2:	6078      	str	r0, [r7, #4]
200030a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
200030a6:	f7fe ff71 	bl	20001f8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
200030aa:	f107 0308 	add.w	r3, r7, #8
200030ae:	4618      	mov	r0, r3
200030b0:	f000 f872 	bl	20003198 <prvSampleTimeNow>
200030b4:	4603      	mov	r3, r0
200030b6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
200030b8:	68bb      	ldr	r3, [r7, #8]
200030ba:	2b00      	cmp	r3, #0
200030bc:	d13b      	bne.n	20003136 <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
200030be:	683b      	ldr	r3, [r7, #0]
200030c0:	2b00      	cmp	r3, #0
200030c2:	d10b      	bne.n	200030dc <prvProcessTimerOrBlockTask+0x40>
200030c4:	687a      	ldr	r2, [r7, #4]
200030c6:	68fb      	ldr	r3, [r7, #12]
200030c8:	429a      	cmp	r2, r3
200030ca:	d807      	bhi.n	200030dc <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
200030cc:	f7fe ff70 	bl	20001fb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
200030d0:	6878      	ldr	r0, [r7, #4]
200030d2:	68f9      	ldr	r1, [r7, #12]
200030d4:	f7ff ff88 	bl	20002fe8 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
200030d8:	bf00      	nop
200030da:	e030      	b.n	2000313e <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
200030dc:	683b      	ldr	r3, [r7, #0]
200030de:	2b00      	cmp	r3, #0
200030e0:	d00a      	beq.n	200030f8 <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
200030e2:	f646 6364 	movw	r3, #28260	; 0x6e64
200030e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030ea:	681b      	ldr	r3, [r3, #0]
200030ec:	681b      	ldr	r3, [r3, #0]
200030ee:	2b00      	cmp	r3, #0
200030f0:	bf14      	ite	ne
200030f2:	2300      	movne	r3, #0
200030f4:	2301      	moveq	r3, #1
200030f6:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
200030f8:	f646 6368 	movw	r3, #28264	; 0x6e68
200030fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003100:	681a      	ldr	r2, [r3, #0]
20003102:	6879      	ldr	r1, [r7, #4]
20003104:	68fb      	ldr	r3, [r7, #12]
20003106:	ebc3 0301 	rsb	r3, r3, r1
2000310a:	4610      	mov	r0, r2
2000310c:	4619      	mov	r1, r3
2000310e:	683a      	ldr	r2, [r7, #0]
20003110:	f7fe fd2a 	bl	20001b68 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
20003114:	f7fe ff4c 	bl	20001fb0 <xTaskResumeAll>
20003118:	4603      	mov	r3, r0
2000311a:	2b00      	cmp	r3, #0
2000311c:	d10e      	bne.n	2000313c <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
2000311e:	f64e 5304 	movw	r3, #60676	; 0xed04
20003122:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000312a:	601a      	str	r2, [r3, #0]
2000312c:	f3bf 8f4f 	dsb	sy
20003130:	f3bf 8f6f 	isb	sy
20003134:	e003      	b.n	2000313e <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
20003136:	f7fe ff3b 	bl	20001fb0 <xTaskResumeAll>
2000313a:	e000      	b.n	2000313e <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
2000313c:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
2000313e:	f107 0710 	add.w	r7, r7, #16
20003142:	46bd      	mov	sp, r7
20003144:	bd80      	pop	{r7, pc}
20003146:	bf00      	nop

20003148 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
20003148:	b480      	push	{r7}
2000314a:	b085      	sub	sp, #20
2000314c:	af00      	add	r7, sp, #0
2000314e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
20003150:	f646 6360 	movw	r3, #28256	; 0x6e60
20003154:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003158:	681b      	ldr	r3, [r3, #0]
2000315a:	681b      	ldr	r3, [r3, #0]
2000315c:	2b00      	cmp	r3, #0
2000315e:	bf14      	ite	ne
20003160:	2200      	movne	r2, #0
20003162:	2201      	moveq	r2, #1
20003164:	687b      	ldr	r3, [r7, #4]
20003166:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20003168:	687b      	ldr	r3, [r7, #4]
2000316a:	681b      	ldr	r3, [r3, #0]
2000316c:	2b00      	cmp	r3, #0
2000316e:	d108      	bne.n	20003182 <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003170:	f646 6360 	movw	r3, #28256	; 0x6e60
20003174:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003178:	681b      	ldr	r3, [r3, #0]
2000317a:	68db      	ldr	r3, [r3, #12]
2000317c:	681b      	ldr	r3, [r3, #0]
2000317e:	60fb      	str	r3, [r7, #12]
20003180:	e002      	b.n	20003188 <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003182:	f04f 0300 	mov.w	r3, #0
20003186:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
20003188:	68fb      	ldr	r3, [r7, #12]
}
2000318a:	4618      	mov	r0, r3
2000318c:	f107 0714 	add.w	r7, r7, #20
20003190:	46bd      	mov	sp, r7
20003192:	bc80      	pop	{r7}
20003194:	4770      	bx	lr
20003196:	bf00      	nop

20003198 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003198:	b580      	push	{r7, lr}
2000319a:	b084      	sub	sp, #16
2000319c:	af00      	add	r7, sp, #0
2000319e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
200031a0:	f7fe ffd6 	bl	20002150 <xTaskGetTickCount>
200031a4:	4603      	mov	r3, r0
200031a6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
200031a8:	f646 6370 	movw	r3, #28272	; 0x6e70
200031ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031b0:	681b      	ldr	r3, [r3, #0]
200031b2:	68fa      	ldr	r2, [r7, #12]
200031b4:	429a      	cmp	r2, r3
200031b6:	d206      	bcs.n	200031c6 <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
200031b8:	f000 f924 	bl	20003404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
200031bc:	687b      	ldr	r3, [r7, #4]
200031be:	f04f 0201 	mov.w	r2, #1
200031c2:	601a      	str	r2, [r3, #0]
200031c4:	e003      	b.n	200031ce <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
200031c6:	687b      	ldr	r3, [r7, #4]
200031c8:	f04f 0200 	mov.w	r2, #0
200031cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
200031ce:	f646 6370 	movw	r3, #28272	; 0x6e70
200031d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031d6:	68fa      	ldr	r2, [r7, #12]
200031d8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
200031da:	68fb      	ldr	r3, [r7, #12]
}
200031dc:	4618      	mov	r0, r3
200031de:	f107 0710 	add.w	r7, r7, #16
200031e2:	46bd      	mov	sp, r7
200031e4:	bd80      	pop	{r7, pc}
200031e6:	bf00      	nop

200031e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
200031e8:	b580      	push	{r7, lr}
200031ea:	b086      	sub	sp, #24
200031ec:	af00      	add	r7, sp, #0
200031ee:	60f8      	str	r0, [r7, #12]
200031f0:	60b9      	str	r1, [r7, #8]
200031f2:	607a      	str	r2, [r7, #4]
200031f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
200031f6:	f04f 0300 	mov.w	r3, #0
200031fa:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
200031fc:	68fb      	ldr	r3, [r7, #12]
200031fe:	68ba      	ldr	r2, [r7, #8]
20003200:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003202:	68fb      	ldr	r3, [r7, #12]
20003204:	68fa      	ldr	r2, [r7, #12]
20003206:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
20003208:	68ba      	ldr	r2, [r7, #8]
2000320a:	687b      	ldr	r3, [r7, #4]
2000320c:	429a      	cmp	r2, r3
2000320e:	d818      	bhi.n	20003242 <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003210:	687a      	ldr	r2, [r7, #4]
20003212:	683b      	ldr	r3, [r7, #0]
20003214:	ebc3 0202 	rsb	r2, r3, r2
20003218:	68fb      	ldr	r3, [r7, #12]
2000321a:	699b      	ldr	r3, [r3, #24]
2000321c:	429a      	cmp	r2, r3
2000321e:	d303      	bcc.n	20003228 <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003220:	f04f 0301 	mov.w	r3, #1
20003224:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
20003226:	e024      	b.n	20003272 <prvInsertTimerInActiveList+0x8a>
20003228:	f646 6364 	movw	r3, #28260	; 0x6e64
2000322c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003230:	681a      	ldr	r2, [r3, #0]
20003232:	68fb      	ldr	r3, [r7, #12]
20003234:	f103 0304 	add.w	r3, r3, #4
20003238:	4610      	mov	r0, r2
2000323a:	4619      	mov	r1, r3
2000323c:	f7fd ff00 	bl	20001040 <vListInsert>
20003240:	e017      	b.n	20003272 <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003242:	687a      	ldr	r2, [r7, #4]
20003244:	683b      	ldr	r3, [r7, #0]
20003246:	429a      	cmp	r2, r3
20003248:	d207      	bcs.n	2000325a <prvInsertTimerInActiveList+0x72>
2000324a:	68ba      	ldr	r2, [r7, #8]
2000324c:	683b      	ldr	r3, [r7, #0]
2000324e:	429a      	cmp	r2, r3
20003250:	d303      	bcc.n	2000325a <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
20003252:	f04f 0301 	mov.w	r3, #1
20003256:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003258:	e00b      	b.n	20003272 <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
2000325a:	f646 6360 	movw	r3, #28256	; 0x6e60
2000325e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003262:	681a      	ldr	r2, [r3, #0]
20003264:	68fb      	ldr	r3, [r7, #12]
20003266:	f103 0304 	add.w	r3, r3, #4
2000326a:	4610      	mov	r0, r2
2000326c:	4619      	mov	r1, r3
2000326e:	f7fd fee7 	bl	20001040 <vListInsert>
		}
	}

	return xProcessTimerNow;
20003272:	697b      	ldr	r3, [r7, #20]
}
20003274:	4618      	mov	r0, r3
20003276:	f107 0718 	add.w	r7, r7, #24
2000327a:	46bd      	mov	sp, r7
2000327c:	bd80      	pop	{r7, pc}
2000327e:	bf00      	nop

20003280 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20003280:	b580      	push	{r7, lr}
20003282:	b08e      	sub	sp, #56	; 0x38
20003284:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003286:	e0a5      	b.n	200033d4 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20003288:	687b      	ldr	r3, [r7, #4]
2000328a:	2b00      	cmp	r3, #0
2000328c:	da1a      	bge.n	200032c4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
2000328e:	f107 0304 	add.w	r3, r7, #4
20003292:	f103 0304 	add.w	r3, r3, #4
20003296:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003298:	6a3b      	ldr	r3, [r7, #32]
2000329a:	2b00      	cmp	r3, #0
2000329c:	d109      	bne.n	200032b2 <prvProcessReceivedCommands+0x32>
2000329e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200032a2:	f383 8811 	msr	BASEPRI, r3
200032a6:	f3bf 8f6f 	isb	sy
200032aa:	f3bf 8f4f 	dsb	sy
200032ae:	627b      	str	r3, [r7, #36]	; 0x24
200032b0:	e7fe      	b.n	200032b0 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
200032b2:	6a3b      	ldr	r3, [r7, #32]
200032b4:	681b      	ldr	r3, [r3, #0]
200032b6:	6a3a      	ldr	r2, [r7, #32]
200032b8:	6851      	ldr	r1, [r2, #4]
200032ba:	6a3a      	ldr	r2, [r7, #32]
200032bc:	6892      	ldr	r2, [r2, #8]
200032be:	4608      	mov	r0, r1
200032c0:	4611      	mov	r1, r2
200032c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
200032c4:	687b      	ldr	r3, [r7, #4]
200032c6:	2b00      	cmp	r3, #0
200032c8:	f2c0 8084 	blt.w	200033d4 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
200032cc:	68fb      	ldr	r3, [r7, #12]
200032ce:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
200032d0:	697b      	ldr	r3, [r7, #20]
200032d2:	695b      	ldr	r3, [r3, #20]
200032d4:	2b00      	cmp	r3, #0
200032d6:	d005      	beq.n	200032e4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200032d8:	697b      	ldr	r3, [r7, #20]
200032da:	f103 0304 	add.w	r3, r3, #4
200032de:	4618      	mov	r0, r3
200032e0:	f7fd fee8 	bl	200010b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
200032e4:	463b      	mov	r3, r7
200032e6:	4618      	mov	r0, r3
200032e8:	f7ff ff56 	bl	20003198 <prvSampleTimeNow>
200032ec:	4603      	mov	r3, r0
200032ee:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
200032f0:	687b      	ldr	r3, [r7, #4]
200032f2:	2b09      	cmp	r3, #9
200032f4:	d86e      	bhi.n	200033d4 <prvProcessReceivedCommands+0x154>
200032f6:	a201      	add	r2, pc, #4	; (adr r2, 200032fc <prvProcessReceivedCommands+0x7c>)
200032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200032fc:	20003325 	.word	0x20003325
20003300:	20003325 	.word	0x20003325
20003304:	20003325 	.word	0x20003325
20003308:	200033d5 	.word	0x200033d5
2000330c:	2000338b 	.word	0x2000338b
20003310:	200033c3 	.word	0x200033c3
20003314:	20003325 	.word	0x20003325
20003318:	20003325 	.word	0x20003325
2000331c:	200033d5 	.word	0x200033d5
20003320:	2000338b 	.word	0x2000338b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003324:	68ba      	ldr	r2, [r7, #8]
20003326:	697b      	ldr	r3, [r7, #20]
20003328:	699b      	ldr	r3, [r3, #24]
2000332a:	441a      	add	r2, r3
2000332c:	68bb      	ldr	r3, [r7, #8]
2000332e:	6978      	ldr	r0, [r7, #20]
20003330:	4611      	mov	r1, r2
20003332:	69fa      	ldr	r2, [r7, #28]
20003334:	f7ff ff58 	bl	200031e8 <prvInsertTimerInActiveList>
20003338:	4603      	mov	r3, r0
2000333a:	2b00      	cmp	r3, #0
2000333c:	d045      	beq.n	200033ca <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
2000333e:	697b      	ldr	r3, [r7, #20]
20003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003342:	6978      	ldr	r0, [r7, #20]
20003344:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003346:	697b      	ldr	r3, [r7, #20]
20003348:	69db      	ldr	r3, [r3, #28]
2000334a:	2b01      	cmp	r3, #1
2000334c:	d13f      	bne.n	200033ce <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
2000334e:	68ba      	ldr	r2, [r7, #8]
20003350:	697b      	ldr	r3, [r7, #20]
20003352:	699b      	ldr	r3, [r3, #24]
20003354:	4413      	add	r3, r2
20003356:	f04f 0200 	mov.w	r2, #0
2000335a:	9200      	str	r2, [sp, #0]
2000335c:	6978      	ldr	r0, [r7, #20]
2000335e:	f04f 0100 	mov.w	r1, #0
20003362:	461a      	mov	r2, r3
20003364:	f04f 0300 	mov.w	r3, #0
20003368:	f7ff fdd8 	bl	20002f1c <xTimerGenericCommand>
2000336c:	4603      	mov	r3, r0
2000336e:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
20003370:	69bb      	ldr	r3, [r7, #24]
20003372:	2b00      	cmp	r3, #0
20003374:	d12d      	bne.n	200033d2 <prvProcessReceivedCommands+0x152>
20003376:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000337a:	f383 8811 	msr	BASEPRI, r3
2000337e:	f3bf 8f6f 	isb	sy
20003382:	f3bf 8f4f 	dsb	sy
20003386:	62bb      	str	r3, [r7, #40]	; 0x28
20003388:	e7fe      	b.n	20003388 <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
2000338a:	68ba      	ldr	r2, [r7, #8]
2000338c:	697b      	ldr	r3, [r7, #20]
2000338e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003390:	697b      	ldr	r3, [r7, #20]
20003392:	699b      	ldr	r3, [r3, #24]
20003394:	2b00      	cmp	r3, #0
20003396:	d109      	bne.n	200033ac <prvProcessReceivedCommands+0x12c>
20003398:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000339c:	f383 8811 	msr	BASEPRI, r3
200033a0:	f3bf 8f6f 	isb	sy
200033a4:	f3bf 8f4f 	dsb	sy
200033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
200033aa:	e7fe      	b.n	200033aa <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
200033ac:	697b      	ldr	r3, [r7, #20]
200033ae:	699a      	ldr	r2, [r3, #24]
200033b0:	69fb      	ldr	r3, [r7, #28]
200033b2:	4413      	add	r3, r2
200033b4:	6978      	ldr	r0, [r7, #20]
200033b6:	4619      	mov	r1, r3
200033b8:	69fa      	ldr	r2, [r7, #28]
200033ba:	69fb      	ldr	r3, [r7, #28]
200033bc:	f7ff ff14 	bl	200031e8 <prvInsertTimerInActiveList>
					break;
200033c0:	e008      	b.n	200033d4 <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
200033c2:	6978      	ldr	r0, [r7, #20]
200033c4:	f000 f9ce 	bl	20003764 <vPortFree>
200033c8:	e004      	b.n	200033d4 <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
200033ca:	bf00      	nop
200033cc:	e002      	b.n	200033d4 <prvProcessReceivedCommands+0x154>
200033ce:	bf00      	nop
200033d0:	e000      	b.n	200033d4 <prvProcessReceivedCommands+0x154>
200033d2:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
200033d4:	f646 6368 	movw	r3, #28264	; 0x6e68
200033d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033dc:	681a      	ldr	r2, [r3, #0]
200033de:	f107 0304 	add.w	r3, r7, #4
200033e2:	4610      	mov	r0, r2
200033e4:	4619      	mov	r1, r3
200033e6:	f04f 0200 	mov.w	r2, #0
200033ea:	f04f 0300 	mov.w	r3, #0
200033ee:	f7fe f95b 	bl	200016a8 <xQueueGenericReceive>
200033f2:	4603      	mov	r3, r0
200033f4:	2b00      	cmp	r3, #0
200033f6:	f47f af47 	bne.w	20003288 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
200033fa:	f107 0730 	add.w	r7, r7, #48	; 0x30
200033fe:	46bd      	mov	sp, r7
20003400:	bd80      	pop	{r7, pc}
20003402:	bf00      	nop

20003404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003404:	b580      	push	{r7, lr}
20003406:	b088      	sub	sp, #32
20003408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
2000340a:	e053      	b.n	200034b4 <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
2000340c:	f646 6360 	movw	r3, #28256	; 0x6e60
20003410:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003414:	681b      	ldr	r3, [r3, #0]
20003416:	68db      	ldr	r3, [r3, #12]
20003418:	681b      	ldr	r3, [r3, #0]
2000341a:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
2000341c:	f646 6360 	movw	r3, #28256	; 0x6e60
20003420:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003424:	681b      	ldr	r3, [r3, #0]
20003426:	68db      	ldr	r3, [r3, #12]
20003428:	68db      	ldr	r3, [r3, #12]
2000342a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
2000342c:	68fb      	ldr	r3, [r7, #12]
2000342e:	f103 0304 	add.w	r3, r3, #4
20003432:	4618      	mov	r0, r3
20003434:	f7fd fe3e 	bl	200010b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003438:	68fb      	ldr	r3, [r7, #12]
2000343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000343c:	68f8      	ldr	r0, [r7, #12]
2000343e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003440:	68fb      	ldr	r3, [r7, #12]
20003442:	69db      	ldr	r3, [r3, #28]
20003444:	2b01      	cmp	r3, #1
20003446:	d135      	bne.n	200034b4 <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003448:	68fb      	ldr	r3, [r7, #12]
2000344a:	699a      	ldr	r2, [r3, #24]
2000344c:	683b      	ldr	r3, [r7, #0]
2000344e:	4413      	add	r3, r2
20003450:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
20003452:	687a      	ldr	r2, [r7, #4]
20003454:	683b      	ldr	r3, [r7, #0]
20003456:	429a      	cmp	r2, r3
20003458:	d912      	bls.n	20003480 <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
2000345a:	68fb      	ldr	r3, [r7, #12]
2000345c:	687a      	ldr	r2, [r7, #4]
2000345e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003460:	68fb      	ldr	r3, [r7, #12]
20003462:	68fa      	ldr	r2, [r7, #12]
20003464:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003466:	f646 6360 	movw	r3, #28256	; 0x6e60
2000346a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000346e:	681a      	ldr	r2, [r3, #0]
20003470:	68fb      	ldr	r3, [r7, #12]
20003472:	f103 0304 	add.w	r3, r3, #4
20003476:	4610      	mov	r0, r2
20003478:	4619      	mov	r1, r3
2000347a:	f7fd fde1 	bl	20001040 <vListInsert>
2000347e:	e019      	b.n	200034b4 <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003480:	f04f 0300 	mov.w	r3, #0
20003484:	9300      	str	r3, [sp, #0]
20003486:	68f8      	ldr	r0, [r7, #12]
20003488:	f04f 0100 	mov.w	r1, #0
2000348c:	683a      	ldr	r2, [r7, #0]
2000348e:	f04f 0300 	mov.w	r3, #0
20003492:	f7ff fd43 	bl	20002f1c <xTimerGenericCommand>
20003496:	4603      	mov	r3, r0
20003498:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
2000349a:	693b      	ldr	r3, [r7, #16]
2000349c:	2b00      	cmp	r3, #0
2000349e:	d109      	bne.n	200034b4 <prvSwitchTimerLists+0xb0>
200034a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200034a4:	f383 8811 	msr	BASEPRI, r3
200034a8:	f3bf 8f6f 	isb	sy
200034ac:	f3bf 8f4f 	dsb	sy
200034b0:	617b      	str	r3, [r7, #20]
200034b2:	e7fe      	b.n	200034b2 <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
200034b4:	f646 6360 	movw	r3, #28256	; 0x6e60
200034b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034bc:	681b      	ldr	r3, [r3, #0]
200034be:	681b      	ldr	r3, [r3, #0]
200034c0:	2b00      	cmp	r3, #0
200034c2:	d1a3      	bne.n	2000340c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
200034c4:	f646 6360 	movw	r3, #28256	; 0x6e60
200034c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034cc:	681b      	ldr	r3, [r3, #0]
200034ce:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
200034d0:	f646 6364 	movw	r3, #28260	; 0x6e64
200034d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034d8:	681a      	ldr	r2, [r3, #0]
200034da:	f646 6360 	movw	r3, #28256	; 0x6e60
200034de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034e2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
200034e4:	f646 6364 	movw	r3, #28260	; 0x6e64
200034e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034ec:	68ba      	ldr	r2, [r7, #8]
200034ee:	601a      	str	r2, [r3, #0]
}
200034f0:	f107 0718 	add.w	r7, r7, #24
200034f4:	46bd      	mov	sp, r7
200034f6:	bd80      	pop	{r7, pc}

200034f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
200034f8:	b580      	push	{r7, lr}
200034fa:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
200034fc:	f000 fb86 	bl	20003c0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
20003500:	f646 6368 	movw	r3, #28264	; 0x6e68
20003504:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003508:	681b      	ldr	r3, [r3, #0]
2000350a:	2b00      	cmp	r3, #0
2000350c:	d12b      	bne.n	20003566 <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
2000350e:	f646 6038 	movw	r0, #28216	; 0x6e38
20003512:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003516:	f7fd fd3d 	bl	20000f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
2000351a:	f646 604c 	movw	r0, #28236	; 0x6e4c
2000351e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003522:	f7fd fd37 	bl	20000f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003526:	f646 6360 	movw	r3, #28256	; 0x6e60
2000352a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000352e:	f646 6238 	movw	r2, #28216	; 0x6e38
20003532:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003538:	f646 6364 	movw	r3, #28260	; 0x6e64
2000353c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003540:	f646 624c 	movw	r2, #28236	; 0x6e4c
20003544:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003548:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
2000354a:	f04f 0005 	mov.w	r0, #5
2000354e:	f04f 0110 	mov.w	r1, #16
20003552:	f04f 0200 	mov.w	r2, #0
20003556:	f7fd fe4f 	bl	200011f8 <xQueueGenericCreate>
2000355a:	4602      	mov	r2, r0
2000355c:	f646 6368 	movw	r3, #28264	; 0x6e68
20003560:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003564:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003566:	f000 fb89 	bl	20003c7c <vPortExitCritical>
}
2000356a:	bd80      	pop	{r7, pc}

2000356c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
2000356c:	b580      	push	{r7, lr}
2000356e:	b08a      	sub	sp, #40	; 0x28
20003570:	af00      	add	r7, sp, #0
20003572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003574:	f04f 0300 	mov.w	r3, #0
20003578:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
2000357a:	f7fe fd07 	bl	20001f8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
2000357e:	f24d 0324 	movw	r3, #53284	; 0xd024
20003582:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003586:	681b      	ldr	r3, [r3, #0]
20003588:	2b00      	cmp	r3, #0
2000358a:	d101      	bne.n	20003590 <pvPortMalloc+0x24>
		{
			prvHeapInit();
2000358c:	f000 f956 	bl	2000383c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003590:	f24d 0330 	movw	r3, #53296	; 0xd030
20003594:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003598:	681a      	ldr	r2, [r3, #0]
2000359a:	687b      	ldr	r3, [r7, #4]
2000359c:	ea02 0303 	and.w	r3, r2, r3
200035a0:	2b00      	cmp	r3, #0
200035a2:	f040 80c2 	bne.w	2000372a <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
200035a6:	687b      	ldr	r3, [r7, #4]
200035a8:	2b00      	cmp	r3, #0
200035aa:	d021      	beq.n	200035f0 <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
200035ac:	f646 4358 	movw	r3, #27736	; 0x6c58
200035b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035b4:	681b      	ldr	r3, [r3, #0]
200035b6:	687a      	ldr	r2, [r7, #4]
200035b8:	4413      	add	r3, r2
200035ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
200035bc:	687b      	ldr	r3, [r7, #4]
200035be:	f003 0307 	and.w	r3, r3, #7
200035c2:	2b00      	cmp	r3, #0
200035c4:	d014      	beq.n	200035f0 <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
200035c6:	687b      	ldr	r3, [r7, #4]
200035c8:	f023 0307 	bic.w	r3, r3, #7
200035cc:	f103 0308 	add.w	r3, r3, #8
200035d0:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
200035d2:	687b      	ldr	r3, [r7, #4]
200035d4:	f003 0307 	and.w	r3, r3, #7
200035d8:	2b00      	cmp	r3, #0
200035da:	d009      	beq.n	200035f0 <pvPortMalloc+0x84>
200035dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200035e0:	f383 8811 	msr	BASEPRI, r3
200035e4:	f3bf 8f6f 	isb	sy
200035e8:	f3bf 8f4f 	dsb	sy
200035ec:	61fb      	str	r3, [r7, #28]
200035ee:	e7fe      	b.n	200035ee <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
200035f0:	687b      	ldr	r3, [r7, #4]
200035f2:	2b00      	cmp	r3, #0
200035f4:	f000 8099 	beq.w	2000372a <pvPortMalloc+0x1be>
200035f8:	f24d 0328 	movw	r3, #53288	; 0xd028
200035fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003600:	681b      	ldr	r3, [r3, #0]
20003602:	687a      	ldr	r2, [r7, #4]
20003604:	429a      	cmp	r2, r3
20003606:	f200 8090 	bhi.w	2000372a <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
2000360a:	f24d 031c 	movw	r3, #53276	; 0xd01c
2000360e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003612:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
20003614:	f24d 031c 	movw	r3, #53276	; 0xd01c
20003618:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000361c:	681b      	ldr	r3, [r3, #0]
2000361e:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003620:	e004      	b.n	2000362c <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
20003622:	68fb      	ldr	r3, [r7, #12]
20003624:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
20003626:	68fb      	ldr	r3, [r7, #12]
20003628:	681b      	ldr	r3, [r3, #0]
2000362a:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
2000362c:	68fb      	ldr	r3, [r7, #12]
2000362e:	685a      	ldr	r2, [r3, #4]
20003630:	687b      	ldr	r3, [r7, #4]
20003632:	429a      	cmp	r2, r3
20003634:	d203      	bcs.n	2000363e <pvPortMalloc+0xd2>
20003636:	68fb      	ldr	r3, [r7, #12]
20003638:	681b      	ldr	r3, [r3, #0]
2000363a:	2b00      	cmp	r3, #0
2000363c:	d1f1      	bne.n	20003622 <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
2000363e:	f24d 0324 	movw	r3, #53284	; 0xd024
20003642:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003646:	681b      	ldr	r3, [r3, #0]
20003648:	68fa      	ldr	r2, [r7, #12]
2000364a:	429a      	cmp	r2, r3
2000364c:	d06d      	beq.n	2000372a <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
2000364e:	693b      	ldr	r3, [r7, #16]
20003650:	681a      	ldr	r2, [r3, #0]
20003652:	f646 4358 	movw	r3, #27736	; 0x6c58
20003656:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000365a:	681b      	ldr	r3, [r3, #0]
2000365c:	4413      	add	r3, r2
2000365e:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20003660:	68fb      	ldr	r3, [r7, #12]
20003662:	681a      	ldr	r2, [r3, #0]
20003664:	693b      	ldr	r3, [r7, #16]
20003666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003668:	68fb      	ldr	r3, [r7, #12]
2000366a:	685a      	ldr	r2, [r3, #4]
2000366c:	687b      	ldr	r3, [r7, #4]
2000366e:	ebc3 0202 	rsb	r2, r3, r2
20003672:	f646 4358 	movw	r3, #27736	; 0x6c58
20003676:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000367a:	681b      	ldr	r3, [r3, #0]
2000367c:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003680:	429a      	cmp	r2, r3
20003682:	d91f      	bls.n	200036c4 <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003684:	68fa      	ldr	r2, [r7, #12]
20003686:	687b      	ldr	r3, [r7, #4]
20003688:	4413      	add	r3, r2
2000368a:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
2000368c:	697b      	ldr	r3, [r7, #20]
2000368e:	f003 0307 	and.w	r3, r3, #7
20003692:	2b00      	cmp	r3, #0
20003694:	d009      	beq.n	200036aa <pvPortMalloc+0x13e>
20003696:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000369a:	f383 8811 	msr	BASEPRI, r3
2000369e:	f3bf 8f6f 	isb	sy
200036a2:	f3bf 8f4f 	dsb	sy
200036a6:	623b      	str	r3, [r7, #32]
200036a8:	e7fe      	b.n	200036a8 <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
200036aa:	68fb      	ldr	r3, [r7, #12]
200036ac:	685a      	ldr	r2, [r3, #4]
200036ae:	687b      	ldr	r3, [r7, #4]
200036b0:	ebc3 0202 	rsb	r2, r3, r2
200036b4:	697b      	ldr	r3, [r7, #20]
200036b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
200036b8:	68fb      	ldr	r3, [r7, #12]
200036ba:	687a      	ldr	r2, [r7, #4]
200036bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
200036be:	6978      	ldr	r0, [r7, #20]
200036c0:	f000 f93e 	bl	20003940 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
200036c4:	f24d 0328 	movw	r3, #53288	; 0xd028
200036c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036cc:	681a      	ldr	r2, [r3, #0]
200036ce:	68fb      	ldr	r3, [r7, #12]
200036d0:	685b      	ldr	r3, [r3, #4]
200036d2:	ebc3 0202 	rsb	r2, r3, r2
200036d6:	f24d 0328 	movw	r3, #53288	; 0xd028
200036da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036de:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
200036e0:	f24d 0328 	movw	r3, #53288	; 0xd028
200036e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036e8:	681a      	ldr	r2, [r3, #0]
200036ea:	f24d 032c 	movw	r3, #53292	; 0xd02c
200036ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036f2:	681b      	ldr	r3, [r3, #0]
200036f4:	429a      	cmp	r2, r3
200036f6:	d209      	bcs.n	2000370c <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
200036f8:	f24d 0328 	movw	r3, #53288	; 0xd028
200036fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003700:	681a      	ldr	r2, [r3, #0]
20003702:	f24d 032c 	movw	r3, #53292	; 0xd02c
20003706:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000370a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
2000370c:	68fb      	ldr	r3, [r7, #12]
2000370e:	685a      	ldr	r2, [r3, #4]
20003710:	f24d 0330 	movw	r3, #53296	; 0xd030
20003714:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003718:	681b      	ldr	r3, [r3, #0]
2000371a:	ea42 0203 	orr.w	r2, r2, r3
2000371e:	68fb      	ldr	r3, [r7, #12]
20003720:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20003722:	68fb      	ldr	r3, [r7, #12]
20003724:	f04f 0200 	mov.w	r2, #0
20003728:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
2000372a:	f7fe fc41 	bl	20001fb0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
2000372e:	69bb      	ldr	r3, [r7, #24]
20003730:	2b00      	cmp	r3, #0
20003732:	d101      	bne.n	20003738 <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
20003734:	f7fc fe72 	bl	2000041c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
20003738:	69bb      	ldr	r3, [r7, #24]
2000373a:	f003 0307 	and.w	r3, r3, #7
2000373e:	2b00      	cmp	r3, #0
20003740:	d009      	beq.n	20003756 <pvPortMalloc+0x1ea>
20003742:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003746:	f383 8811 	msr	BASEPRI, r3
2000374a:	f3bf 8f6f 	isb	sy
2000374e:	f3bf 8f4f 	dsb	sy
20003752:	627b      	str	r3, [r7, #36]	; 0x24
20003754:	e7fe      	b.n	20003754 <pvPortMalloc+0x1e8>
	return pvReturn;
20003756:	69bb      	ldr	r3, [r7, #24]
}
20003758:	4618      	mov	r0, r3
2000375a:	f107 0728 	add.w	r7, r7, #40	; 0x28
2000375e:	46bd      	mov	sp, r7
20003760:	bd80      	pop	{r7, pc}
20003762:	bf00      	nop

20003764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20003764:	b580      	push	{r7, lr}
20003766:	b086      	sub	sp, #24
20003768:	af00      	add	r7, sp, #0
2000376a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
2000376c:	687b      	ldr	r3, [r7, #4]
2000376e:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
20003770:	687b      	ldr	r3, [r7, #4]
20003772:	2b00      	cmp	r3, #0
20003774:	d05e      	beq.n	20003834 <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20003776:	f646 4358 	movw	r3, #27736	; 0x6c58
2000377a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000377e:	681b      	ldr	r3, [r3, #0]
20003780:	f1c3 0300 	rsb	r3, r3, #0
20003784:	68ba      	ldr	r2, [r7, #8]
20003786:	4413      	add	r3, r2
20003788:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
2000378a:	68bb      	ldr	r3, [r7, #8]
2000378c:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
2000378e:	68fb      	ldr	r3, [r7, #12]
20003790:	685a      	ldr	r2, [r3, #4]
20003792:	f24d 0330 	movw	r3, #53296	; 0xd030
20003796:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000379a:	681b      	ldr	r3, [r3, #0]
2000379c:	ea02 0303 	and.w	r3, r2, r3
200037a0:	2b00      	cmp	r3, #0
200037a2:	d109      	bne.n	200037b8 <vPortFree+0x54>
200037a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200037a8:	f383 8811 	msr	BASEPRI, r3
200037ac:	f3bf 8f6f 	isb	sy
200037b0:	f3bf 8f4f 	dsb	sy
200037b4:	613b      	str	r3, [r7, #16]
200037b6:	e7fe      	b.n	200037b6 <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
200037b8:	68fb      	ldr	r3, [r7, #12]
200037ba:	681b      	ldr	r3, [r3, #0]
200037bc:	2b00      	cmp	r3, #0
200037be:	d009      	beq.n	200037d4 <vPortFree+0x70>
200037c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200037c4:	f383 8811 	msr	BASEPRI, r3
200037c8:	f3bf 8f6f 	isb	sy
200037cc:	f3bf 8f4f 	dsb	sy
200037d0:	617b      	str	r3, [r7, #20]
200037d2:	e7fe      	b.n	200037d2 <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
200037d4:	68fb      	ldr	r3, [r7, #12]
200037d6:	685a      	ldr	r2, [r3, #4]
200037d8:	f24d 0330 	movw	r3, #53296	; 0xd030
200037dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037e0:	681b      	ldr	r3, [r3, #0]
200037e2:	ea02 0303 	and.w	r3, r2, r3
200037e6:	2b00      	cmp	r3, #0
200037e8:	d024      	beq.n	20003834 <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
200037ea:	68fb      	ldr	r3, [r7, #12]
200037ec:	681b      	ldr	r3, [r3, #0]
200037ee:	2b00      	cmp	r3, #0
200037f0:	d120      	bne.n	20003834 <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
200037f2:	68fb      	ldr	r3, [r7, #12]
200037f4:	685a      	ldr	r2, [r3, #4]
200037f6:	f24d 0330 	movw	r3, #53296	; 0xd030
200037fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037fe:	681b      	ldr	r3, [r3, #0]
20003800:	ea6f 0303 	mvn.w	r3, r3
20003804:	ea02 0203 	and.w	r2, r2, r3
20003808:	68fb      	ldr	r3, [r7, #12]
2000380a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
2000380c:	f7fe fbbe 	bl	20001f8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20003810:	68fb      	ldr	r3, [r7, #12]
20003812:	685a      	ldr	r2, [r3, #4]
20003814:	f24d 0328 	movw	r3, #53288	; 0xd028
20003818:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000381c:	681b      	ldr	r3, [r3, #0]
2000381e:	441a      	add	r2, r3
20003820:	f24d 0328 	movw	r3, #53288	; 0xd028
20003824:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003828:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
2000382a:	68f8      	ldr	r0, [r7, #12]
2000382c:	f000 f888 	bl	20003940 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
20003830:	f7fe fbbe 	bl	20001fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20003834:	f107 0718 	add.w	r7, r7, #24
20003838:	46bd      	mov	sp, r7
2000383a:	bd80      	pop	{r7, pc}

2000383c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
2000383c:	b480      	push	{r7}
2000383e:	b085      	sub	sp, #20
20003840:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20003842:	f246 13a8 	movw	r3, #25000	; 0x61a8
20003846:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20003848:	f646 6374 	movw	r3, #28276	; 0x6e74
2000384c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003850:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20003852:	68bb      	ldr	r3, [r7, #8]
20003854:	f003 0307 	and.w	r3, r3, #7
20003858:	2b00      	cmp	r3, #0
2000385a:	d011      	beq.n	20003880 <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
2000385c:	68bb      	ldr	r3, [r7, #8]
2000385e:	f103 0307 	add.w	r3, r3, #7
20003862:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003864:	68bb      	ldr	r3, [r7, #8]
20003866:	f023 0307 	bic.w	r3, r3, #7
2000386a:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
2000386c:	68fa      	ldr	r2, [r7, #12]
2000386e:	68bb      	ldr	r3, [r7, #8]
20003870:	ebc3 0202 	rsb	r2, r3, r2
20003874:	f646 6374 	movw	r3, #28276	; 0x6e74
20003878:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000387c:	4413      	add	r3, r2
2000387e:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20003880:	68bb      	ldr	r3, [r7, #8]
20003882:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
20003884:	687a      	ldr	r2, [r7, #4]
20003886:	f24d 031c 	movw	r3, #53276	; 0xd01c
2000388a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000388e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
20003890:	f24d 031c 	movw	r3, #53276	; 0xd01c
20003894:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003898:	f04f 0200 	mov.w	r2, #0
2000389c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
2000389e:	687a      	ldr	r2, [r7, #4]
200038a0:	68fb      	ldr	r3, [r7, #12]
200038a2:	4413      	add	r3, r2
200038a4:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
200038a6:	f646 4358 	movw	r3, #27736	; 0x6c58
200038aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038ae:	681b      	ldr	r3, [r3, #0]
200038b0:	68ba      	ldr	r2, [r7, #8]
200038b2:	ebc3 0302 	rsb	r3, r3, r2
200038b6:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
200038b8:	68bb      	ldr	r3, [r7, #8]
200038ba:	f023 0307 	bic.w	r3, r3, #7
200038be:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
200038c0:	68ba      	ldr	r2, [r7, #8]
200038c2:	f24d 0324 	movw	r3, #53284	; 0xd024
200038c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
200038cc:	f24d 0324 	movw	r3, #53284	; 0xd024
200038d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038d4:	681b      	ldr	r3, [r3, #0]
200038d6:	f04f 0200 	mov.w	r2, #0
200038da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
200038dc:	f24d 0324 	movw	r3, #53284	; 0xd024
200038e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038e4:	681b      	ldr	r3, [r3, #0]
200038e6:	f04f 0200 	mov.w	r2, #0
200038ea:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
200038ec:	687b      	ldr	r3, [r7, #4]
200038ee:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
200038f0:	683b      	ldr	r3, [r7, #0]
200038f2:	68ba      	ldr	r2, [r7, #8]
200038f4:	ebc3 0202 	rsb	r2, r3, r2
200038f8:	683b      	ldr	r3, [r7, #0]
200038fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
200038fc:	f24d 0324 	movw	r3, #53284	; 0xd024
20003900:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003904:	681a      	ldr	r2, [r3, #0]
20003906:	683b      	ldr	r3, [r7, #0]
20003908:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
2000390a:	683b      	ldr	r3, [r7, #0]
2000390c:	685a      	ldr	r2, [r3, #4]
2000390e:	f24d 032c 	movw	r3, #53292	; 0xd02c
20003912:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003916:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003918:	683b      	ldr	r3, [r7, #0]
2000391a:	685a      	ldr	r2, [r3, #4]
2000391c:	f24d 0328 	movw	r3, #53288	; 0xd028
20003920:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003924:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
20003926:	f24d 0330 	movw	r3, #53296	; 0xd030
2000392a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000392e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20003932:	601a      	str	r2, [r3, #0]
}
20003934:	f107 0714 	add.w	r7, r7, #20
20003938:	46bd      	mov	sp, r7
2000393a:	bc80      	pop	{r7}
2000393c:	4770      	bx	lr
2000393e:	bf00      	nop

20003940 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20003940:	b480      	push	{r7}
20003942:	b085      	sub	sp, #20
20003944:	af00      	add	r7, sp, #0
20003946:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
20003948:	f24d 031c 	movw	r3, #53276	; 0xd01c
2000394c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003950:	60bb      	str	r3, [r7, #8]
20003952:	e002      	b.n	2000395a <prvInsertBlockIntoFreeList+0x1a>
20003954:	68bb      	ldr	r3, [r7, #8]
20003956:	681b      	ldr	r3, [r3, #0]
20003958:	60bb      	str	r3, [r7, #8]
2000395a:	68bb      	ldr	r3, [r7, #8]
2000395c:	681a      	ldr	r2, [r3, #0]
2000395e:	687b      	ldr	r3, [r7, #4]
20003960:	429a      	cmp	r2, r3
20003962:	d3f7      	bcc.n	20003954 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20003964:	68bb      	ldr	r3, [r7, #8]
20003966:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
20003968:	68bb      	ldr	r3, [r7, #8]
2000396a:	685a      	ldr	r2, [r3, #4]
2000396c:	68fb      	ldr	r3, [r7, #12]
2000396e:	441a      	add	r2, r3
20003970:	687b      	ldr	r3, [r7, #4]
20003972:	429a      	cmp	r2, r3
20003974:	d108      	bne.n	20003988 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
20003976:	68bb      	ldr	r3, [r7, #8]
20003978:	685a      	ldr	r2, [r3, #4]
2000397a:	687b      	ldr	r3, [r7, #4]
2000397c:	685b      	ldr	r3, [r3, #4]
2000397e:	441a      	add	r2, r3
20003980:	68bb      	ldr	r3, [r7, #8]
20003982:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20003984:	68bb      	ldr	r3, [r7, #8]
20003986:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
20003988:	687b      	ldr	r3, [r7, #4]
2000398a:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
2000398c:	687b      	ldr	r3, [r7, #4]
2000398e:	685a      	ldr	r2, [r3, #4]
20003990:	68fb      	ldr	r3, [r7, #12]
20003992:	441a      	add	r2, r3
20003994:	68bb      	ldr	r3, [r7, #8]
20003996:	681b      	ldr	r3, [r3, #0]
20003998:	429a      	cmp	r2, r3
2000399a:	d11e      	bne.n	200039da <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
2000399c:	68bb      	ldr	r3, [r7, #8]
2000399e:	681a      	ldr	r2, [r3, #0]
200039a0:	f24d 0324 	movw	r3, #53284	; 0xd024
200039a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039a8:	681b      	ldr	r3, [r3, #0]
200039aa:	429a      	cmp	r2, r3
200039ac:	d00d      	beq.n	200039ca <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
200039ae:	687b      	ldr	r3, [r7, #4]
200039b0:	685a      	ldr	r2, [r3, #4]
200039b2:	68bb      	ldr	r3, [r7, #8]
200039b4:	681b      	ldr	r3, [r3, #0]
200039b6:	685b      	ldr	r3, [r3, #4]
200039b8:	441a      	add	r2, r3
200039ba:	687b      	ldr	r3, [r7, #4]
200039bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
200039be:	68bb      	ldr	r3, [r7, #8]
200039c0:	681b      	ldr	r3, [r3, #0]
200039c2:	681a      	ldr	r2, [r3, #0]
200039c4:	687b      	ldr	r3, [r7, #4]
200039c6:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
200039c8:	e00b      	b.n	200039e2 <prvInsertBlockIntoFreeList+0xa2>
200039ca:	f24d 0324 	movw	r3, #53284	; 0xd024
200039ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039d2:	681a      	ldr	r2, [r3, #0]
200039d4:	687b      	ldr	r3, [r7, #4]
200039d6:	601a      	str	r2, [r3, #0]
200039d8:	e003      	b.n	200039e2 <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
200039da:	68bb      	ldr	r3, [r7, #8]
200039dc:	681a      	ldr	r2, [r3, #0]
200039de:	687b      	ldr	r3, [r7, #4]
200039e0:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
200039e2:	68ba      	ldr	r2, [r7, #8]
200039e4:	687b      	ldr	r3, [r7, #4]
200039e6:	429a      	cmp	r2, r3
200039e8:	d002      	beq.n	200039f0 <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
200039ea:	68bb      	ldr	r3, [r7, #8]
200039ec:	687a      	ldr	r2, [r7, #4]
200039ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
200039f0:	f107 0714 	add.w	r7, r7, #20
200039f4:	46bd      	mov	sp, r7
200039f6:	bc80      	pop	{r7}
200039f8:	4770      	bx	lr
200039fa:	bf00      	nop

200039fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
200039fc:	b480      	push	{r7}
200039fe:	b085      	sub	sp, #20
20003a00:	af00      	add	r7, sp, #0
20003a02:	60f8      	str	r0, [r7, #12]
20003a04:	60b9      	str	r1, [r7, #8]
20003a06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
20003a08:	68fb      	ldr	r3, [r7, #12]
20003a0a:	f1a3 0304 	sub.w	r3, r3, #4
20003a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20003a10:	68fb      	ldr	r3, [r7, #12]
20003a12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20003a16:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003a18:	68fb      	ldr	r3, [r7, #12]
20003a1a:	f1a3 0304 	sub.w	r3, r3, #4
20003a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20003a20:	68bb      	ldr	r3, [r7, #8]
20003a22:	f023 0201 	bic.w	r2, r3, #1
20003a26:	68fb      	ldr	r3, [r7, #12]
20003a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003a2a:	68fb      	ldr	r3, [r7, #12]
20003a2c:	f1a3 0304 	sub.w	r3, r3, #4
20003a30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
20003a32:	f643 2365 	movw	r3, #14949	; 0x3a65
20003a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a3a:	68fa      	ldr	r2, [r7, #12]
20003a3c:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
20003a3e:	68fb      	ldr	r3, [r7, #12]
20003a40:	f1a3 0314 	sub.w	r3, r3, #20
20003a44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
20003a46:	687a      	ldr	r2, [r7, #4]
20003a48:	68fb      	ldr	r3, [r7, #12]
20003a4a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20003a4c:	68fb      	ldr	r3, [r7, #12]
20003a4e:	f1a3 0320 	sub.w	r3, r3, #32
20003a52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
20003a54:	68fb      	ldr	r3, [r7, #12]
}
20003a56:	4618      	mov	r0, r3
20003a58:	f107 0714 	add.w	r7, r7, #20
20003a5c:	46bd      	mov	sp, r7
20003a5e:	bc80      	pop	{r7}
20003a60:	4770      	bx	lr
20003a62:	bf00      	nop

20003a64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20003a64:	b480      	push	{r7}
20003a66:	b083      	sub	sp, #12
20003a68:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
20003a6a:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a72:	681b      	ldr	r3, [r3, #0]
20003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
20003a78:	d009      	beq.n	20003a8e <prvTaskExitError+0x2a>
20003a7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003a7e:	f383 8811 	msr	BASEPRI, r3
20003a82:	f3bf 8f6f 	isb	sy
20003a86:	f3bf 8f4f 	dsb	sy
20003a8a:	603b      	str	r3, [r7, #0]
20003a8c:	e7fe      	b.n	20003a8c <prvTaskExitError+0x28>
20003a8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003a92:	f383 8811 	msr	BASEPRI, r3
20003a96:	f3bf 8f6f 	isb	sy
20003a9a:	f3bf 8f4f 	dsb	sy
20003a9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
20003aa0:	e7fe      	b.n	20003aa0 <prvTaskExitError+0x3c>
20003aa2:	bf00      	nop
	...

20003ab0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20003ab0:	4b07      	ldr	r3, [pc, #28]	; (20003ad0 <pxCurrentTCBConst2>)
20003ab2:	6819      	ldr	r1, [r3, #0]
20003ab4:	6808      	ldr	r0, [r1, #0]
20003ab6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20003aba:	f380 8809 	msr	PSP, r0
20003abe:	f3bf 8f6f 	isb	sy
20003ac2:	f04f 0000 	mov.w	r0, #0
20003ac6:	f380 8811 	msr	BASEPRI, r0
20003aca:	f04e 0e0d 	orr.w	lr, lr, #13
20003ace:	4770      	bx	lr

20003ad0 <pxCurrentTCBConst2>:
20003ad0:	20006d2c 	.word	0x20006d2c
20003ad4:	f3af 8000 	nop.w
20003ad8:	f3af 8000 	nop.w
20003adc:	f3af 8000 	nop.w

20003ae0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
20003ae0:	4806      	ldr	r0, [pc, #24]	; (20003afc <prvPortStartFirstTask+0x1c>)
20003ae2:	6800      	ldr	r0, [r0, #0]
20003ae4:	6800      	ldr	r0, [r0, #0]
20003ae6:	f380 8808 	msr	MSP, r0
20003aea:	b662      	cpsie	i
20003aec:	b661      	cpsie	f
20003aee:	f3bf 8f4f 	dsb	sy
20003af2:	f3bf 8f6f 	isb	sy
20003af6:	df00      	svc	0
20003af8:	bf00      	nop
20003afa:	0000      	.short	0x0000
20003afc:	e000ed08 	.word	0xe000ed08

20003b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20003b00:	b580      	push	{r7, lr}
20003b02:	b084      	sub	sp, #16
20003b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20003b06:	f24e 4300 	movw	r3, #58368	; 0xe400
20003b0a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003b0e:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
20003b10:	68fb      	ldr	r3, [r7, #12]
20003b12:	781b      	ldrb	r3, [r3, #0]
20003b14:	b2db      	uxtb	r3, r3
20003b16:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20003b18:	68fb      	ldr	r3, [r7, #12]
20003b1a:	f04f 32ff 	mov.w	r2, #4294967295
20003b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20003b20:	68fb      	ldr	r3, [r7, #12]
20003b22:	781b      	ldrb	r3, [r3, #0]
20003b24:	b2db      	uxtb	r3, r3
20003b26:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20003b28:	79fb      	ldrb	r3, [r7, #7]
20003b2a:	b2db      	uxtb	r3, r3
20003b2c:	461a      	mov	r2, r3
20003b2e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
20003b32:	f24d 0334 	movw	r3, #53300	; 0xd034
20003b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b3a:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
20003b3c:	f24d 0338 	movw	r3, #53304	; 0xd038
20003b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b44:	f04f 0207 	mov.w	r2, #7
20003b48:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003b4a:	e011      	b.n	20003b70 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
20003b4c:	f24d 0338 	movw	r3, #53304	; 0xd038
20003b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b54:	681b      	ldr	r3, [r3, #0]
20003b56:	f103 32ff 	add.w	r2, r3, #4294967295
20003b5a:	f24d 0338 	movw	r3, #53304	; 0xd038
20003b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b62:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20003b64:	79fb      	ldrb	r3, [r7, #7]
20003b66:	b2db      	uxtb	r3, r3
20003b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003b6c:	b2db      	uxtb	r3, r3
20003b6e:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003b70:	79fb      	ldrb	r3, [r7, #7]
20003b72:	b2db      	uxtb	r3, r3
20003b74:	b25b      	sxtb	r3, r3
20003b76:	2b00      	cmp	r3, #0
20003b78:	dbe8      	blt.n	20003b4c <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
20003b7a:	f24d 0338 	movw	r3, #53304	; 0xd038
20003b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b82:	681b      	ldr	r3, [r3, #0]
20003b84:	ea4f 2203 	mov.w	r2, r3, lsl #8
20003b88:	f24d 0338 	movw	r3, #53304	; 0xd038
20003b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b90:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20003b92:	f24d 0338 	movw	r3, #53304	; 0xd038
20003b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b9a:	681b      	ldr	r3, [r3, #0]
20003b9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20003ba0:	f24d 0338 	movw	r3, #53304	; 0xd038
20003ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ba8:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
20003baa:	68bb      	ldr	r3, [r7, #8]
20003bac:	b2da      	uxtb	r2, r3
20003bae:	68fb      	ldr	r3, [r7, #12]
20003bb0:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
20003bb2:	f64e 5320 	movw	r3, #60704	; 0xed20
20003bb6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003bba:	f64e 5220 	movw	r2, #60704	; 0xed20
20003bbe:	f2ce 0200 	movt	r2, #57344	; 0xe000
20003bc2:	6812      	ldr	r2, [r2, #0]
20003bc4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
20003bc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
20003bca:	f64e 5320 	movw	r3, #60704	; 0xed20
20003bce:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003bd2:	f64e 5220 	movw	r2, #60704	; 0xed20
20003bd6:	f2ce 0200 	movt	r2, #57344	; 0xe000
20003bda:	6812      	ldr	r2, [r2, #0]
20003bdc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
20003be0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
20003be2:	f000 f8c7 	bl	20003d74 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
20003be6:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bee:	f04f 0200 	mov.w	r2, #0
20003bf2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20003bf4:	f7ff ff74 	bl	20003ae0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
20003bf8:	f7ff ff34 	bl	20003a64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
20003bfc:	f04f 0300 	mov.w	r3, #0
}
20003c00:	4618      	mov	r0, r3
20003c02:	f107 0710 	add.w	r7, r7, #16
20003c06:	46bd      	mov	sp, r7
20003c08:	bd80      	pop	{r7, pc}
20003c0a:	bf00      	nop

20003c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
20003c0c:	b480      	push	{r7}
20003c0e:	b083      	sub	sp, #12
20003c10:	af00      	add	r7, sp, #0
20003c12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c16:	f383 8811 	msr	BASEPRI, r3
20003c1a:	f3bf 8f6f 	isb	sy
20003c1e:	f3bf 8f4f 	dsb	sy
20003c22:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20003c24:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c2c:	681b      	ldr	r3, [r3, #0]
20003c2e:	f103 0201 	add.w	r2, r3, #1
20003c32:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c3a:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
20003c3c:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c44:	681b      	ldr	r3, [r3, #0]
20003c46:	2b01      	cmp	r3, #1
20003c48:	d112      	bne.n	20003c70 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
20003c4a:	f64e 5304 	movw	r3, #60676	; 0xed04
20003c4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003c52:	681b      	ldr	r3, [r3, #0]
20003c54:	f003 03ff 	and.w	r3, r3, #255	; 0xff
20003c58:	2b00      	cmp	r3, #0
20003c5a:	d009      	beq.n	20003c70 <vPortEnterCritical+0x64>
20003c5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c60:	f383 8811 	msr	BASEPRI, r3
20003c64:	f3bf 8f6f 	isb	sy
20003c68:	f3bf 8f4f 	dsb	sy
20003c6c:	607b      	str	r3, [r7, #4]
20003c6e:	e7fe      	b.n	20003c6e <vPortEnterCritical+0x62>
	}
}
20003c70:	f107 070c 	add.w	r7, r7, #12
20003c74:	46bd      	mov	sp, r7
20003c76:	bc80      	pop	{r7}
20003c78:	4770      	bx	lr
20003c7a:	bf00      	nop

20003c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
20003c7c:	b480      	push	{r7}
20003c7e:	b083      	sub	sp, #12
20003c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20003c82:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c8a:	681b      	ldr	r3, [r3, #0]
20003c8c:	2b00      	cmp	r3, #0
20003c8e:	d109      	bne.n	20003ca4 <vPortExitCritical+0x28>
20003c90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c94:	f383 8811 	msr	BASEPRI, r3
20003c98:	f3bf 8f6f 	isb	sy
20003c9c:	f3bf 8f4f 	dsb	sy
20003ca0:	603b      	str	r3, [r7, #0]
20003ca2:	e7fe      	b.n	20003ca2 <vPortExitCritical+0x26>
	uxCriticalNesting--;
20003ca4:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cac:	681b      	ldr	r3, [r3, #0]
20003cae:	f103 32ff 	add.w	r2, r3, #4294967295
20003cb2:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cba:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
20003cbc:	f646 43c4 	movw	r3, #27844	; 0x6cc4
20003cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cc4:	681b      	ldr	r3, [r3, #0]
20003cc6:	2b00      	cmp	r3, #0
20003cc8:	d105      	bne.n	20003cd6 <vPortExitCritical+0x5a>
20003cca:	f04f 0300 	mov.w	r3, #0
20003cce:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20003cd0:	687b      	ldr	r3, [r7, #4]
20003cd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
20003cd6:	f107 070c 	add.w	r7, r7, #12
20003cda:	46bd      	mov	sp, r7
20003cdc:	bc80      	pop	{r7}
20003cde:	4770      	bx	lr

20003ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20003ce0:	f3ef 8009 	mrs	r0, PSP
20003ce4:	f3bf 8f6f 	isb	sy
20003ce8:	4b0d      	ldr	r3, [pc, #52]	; (20003d20 <pxCurrentTCBConst>)
20003cea:	681a      	ldr	r2, [r3, #0]
20003cec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20003cf0:	6010      	str	r0, [r2, #0]
20003cf2:	e92d 4008 	stmdb	sp!, {r3, lr}
20003cf6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
20003cfa:	f380 8811 	msr	BASEPRI, r0
20003cfe:	f7fe fb3f 	bl	20002380 <vTaskSwitchContext>
20003d02:	f04f 0000 	mov.w	r0, #0
20003d06:	f380 8811 	msr	BASEPRI, r0
20003d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20003d0e:	6819      	ldr	r1, [r3, #0]
20003d10:	6808      	ldr	r0, [r1, #0]
20003d12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20003d16:	f380 8809 	msr	PSP, r0
20003d1a:	f3bf 8f6f 	isb	sy
20003d1e:	4770      	bx	lr

20003d20 <pxCurrentTCBConst>:
20003d20:	20006d2c 	.word	0x20006d2c
20003d24:	f3af 8000 	nop.w
20003d28:	f3af 8000 	nop.w
20003d2c:	f3af 8000 	nop.w

20003d30 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20003d30:	b580      	push	{r7, lr}
20003d32:	b082      	sub	sp, #8
20003d34:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20003d36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d3a:	f383 8811 	msr	BASEPRI, r3
20003d3e:	f3bf 8f6f 	isb	sy
20003d42:	f3bf 8f4f 	dsb	sy
20003d46:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20003d48:	f7fe fa12 	bl	20002170 <xTaskIncrementTick>
20003d4c:	4603      	mov	r3, r0
20003d4e:	2b00      	cmp	r3, #0
20003d50:	d006      	beq.n	20003d60 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20003d52:	f64e 5304 	movw	r3, #60676	; 0xed04
20003d56:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003d5e:	601a      	str	r2, [r3, #0]
20003d60:	f04f 0300 	mov.w	r3, #0
20003d64:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20003d66:	687b      	ldr	r3, [r7, #4]
20003d68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
20003d6c:	f107 0708 	add.w	r7, r7, #8
20003d70:	46bd      	mov	sp, r7
20003d72:	bd80      	pop	{r7, pc}

20003d74 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20003d74:	b480      	push	{r7}
20003d76:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20003d78:	f24e 0314 	movw	r3, #57364	; 0xe014
20003d7c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003d80:	f646 5204 	movw	r2, #27908	; 0x6d04
20003d84:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003d88:	6811      	ldr	r1, [r2, #0]
20003d8a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
20003d8e:	f2c1 0262 	movt	r2, #4194	; 0x1062
20003d92:	fba2 0201 	umull	r0, r2, r2, r1
20003d96:	ea4f 1292 	mov.w	r2, r2, lsr #6
20003d9a:	f102 32ff 	add.w	r2, r2, #4294967295
20003d9e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20003da0:	f24e 0310 	movw	r3, #57360	; 0xe010
20003da4:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003da8:	f04f 0207 	mov.w	r2, #7
20003dac:	601a      	str	r2, [r3, #0]
}
20003dae:	46bd      	mov	sp, r7
20003db0:	bc80      	pop	{r7}
20003db2:	4770      	bx	lr

20003db4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20003db4:	b480      	push	{r7}
20003db6:	b085      	sub	sp, #20
20003db8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
20003dba:	f3ef 8305 	mrs	r3, IPSR
20003dbe:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
20003dc0:	683b      	ldr	r3, [r7, #0]
20003dc2:	2b0f      	cmp	r3, #15
20003dc4:	d91a      	bls.n	20003dfc <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
20003dc6:	f646 435c 	movw	r3, #27740	; 0x6c5c
20003dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003dce:	681a      	ldr	r2, [r3, #0]
20003dd0:	683b      	ldr	r3, [r7, #0]
20003dd2:	4413      	add	r3, r2
20003dd4:	781b      	ldrb	r3, [r3, #0]
20003dd6:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
20003dd8:	f24d 0334 	movw	r3, #53300	; 0xd034
20003ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003de0:	781b      	ldrb	r3, [r3, #0]
20003de2:	79fa      	ldrb	r2, [r7, #7]
20003de4:	429a      	cmp	r2, r3
20003de6:	d209      	bcs.n	20003dfc <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20003de8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003dec:	f383 8811 	msr	BASEPRI, r3
20003df0:	f3bf 8f6f 	isb	sy
20003df4:	f3bf 8f4f 	dsb	sy
20003df8:	60bb      	str	r3, [r7, #8]
20003dfa:	e7fe      	b.n	20003dfa <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
20003dfc:	f64e 530c 	movw	r3, #60684	; 0xed0c
20003e00:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003e04:	681b      	ldr	r3, [r3, #0]
20003e06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20003e0a:	f24d 0338 	movw	r3, #53304	; 0xd038
20003e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e12:	681b      	ldr	r3, [r3, #0]
20003e14:	429a      	cmp	r2, r3
20003e16:	d909      	bls.n	20003e2c <vPortValidateInterruptPriority+0x78>
20003e18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003e1c:	f383 8811 	msr	BASEPRI, r3
20003e20:	f3bf 8f6f 	isb	sy
20003e24:	f3bf 8f4f 	dsb	sy
20003e28:	60fb      	str	r3, [r7, #12]
20003e2a:	e7fe      	b.n	20003e2a <vPortValidateInterruptPriority+0x76>
	}
20003e2c:	f107 0714 	add.w	r7, r7, #20
20003e30:	46bd      	mov	sp, r7
20003e32:	bc80      	pop	{r7}
20003e34:	4770      	bx	lr
20003e36:	bf00      	nop

20003e38 <vhk_callback>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void vhk_callback(void* d){
20003e38:	b590      	push	{r4, r7, lr}
20003e3a:	b089      	sub	sp, #36	; 0x24
20003e3c:	af00      	add	r7, sp, #0
20003e3e:	6078      	str	r0, [r7, #4]

//	if(feed_get_hk_data != pdFAIL){

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
20003e40:	f04f 0300 	mov.w	r3, #0
20003e44:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
20003e46:	f04f 0300 	mov.w	r3, #0
20003e4a:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
20003e4c:	f24d 121c 	movw	r2, #53532	; 0xd11c
20003e50:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003e54:	f24d 7370 	movw	r3, #55152	; 0xd770
20003e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e5c:	601a      	str	r2, [r3, #0]


//		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
20003e5e:	f107 011c 	add.w	r1, r7, #28
20003e62:	f107 021a 	add.w	r2, r7, #26
20003e66:	f107 0318 	add.w	r3, r7, #24
20003e6a:	4608      	mov	r0, r1
20003e6c:	4611      	mov	r1, r2
20003e6e:	461a      	mov	r2, r3
20003e70:	f7fc faf8 	bl	20000464 <get_IMU_acc>
20003e74:	4603      	mov	r3, r0
20003e76:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
20003e78:	f107 0114 	add.w	r1, r7, #20
20003e7c:	f107 0212 	add.w	r2, r7, #18
20003e80:	f107 0310 	add.w	r3, r7, #16
20003e84:	4608      	mov	r0, r1
20003e86:	4611      	mov	r1, r2
20003e88:	461a      	mov	r2, r3
20003e8a:	f7fc fc81 	bl	20000790 <get_IMU_gyro>
20003e8e:	4603      	mov	r3, r0
20003e90:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;

			hk_pkt->cmd_cnt = command_cnt;
20003e92:	f24d 7370 	movw	r3, #55152	; 0xd770
20003e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e9a:	681a      	ldr	r2, [r3, #0]
20003e9c:	f24d 7360 	movw	r3, #55136	; 0xd760
20003ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ea4:	881b      	ldrh	r3, [r3, #0]
20003ea6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20003eaa:	f04f 0000 	mov.w	r0, #0
20003eae:	ea40 0101 	orr.w	r1, r0, r1
20003eb2:	7391      	strb	r1, [r2, #14]
20003eb4:	ea4f 2313 	mov.w	r3, r3, lsr #8
20003eb8:	b29b      	uxth	r3, r3
20003eba:	f04f 0100 	mov.w	r1, #0
20003ebe:	ea41 0303 	orr.w	r3, r1, r3
20003ec2:	73d3      	strb	r3, [r2, #15]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
20003ec4:	f24d 7370 	movw	r3, #55152	; 0xd770
20003ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ecc:	681b      	ldr	r3, [r3, #0]
20003ece:	8bba      	ldrh	r2, [r7, #28]
20003ed0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20003ed4:	f04f 0000 	mov.w	r0, #0
20003ed8:	ea40 0101 	orr.w	r1, r0, r1
20003edc:	7419      	strb	r1, [r3, #16]
20003ede:	ea4f 2212 	mov.w	r2, r2, lsr #8
20003ee2:	b292      	uxth	r2, r2
20003ee4:	f04f 0100 	mov.w	r1, #0
20003ee8:	ea41 0202 	orr.w	r2, r1, r2
20003eec:	745a      	strb	r2, [r3, #17]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
20003eee:	f24d 7370 	movw	r3, #55152	; 0xd770
20003ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ef6:	681b      	ldr	r3, [r3, #0]
20003ef8:	8b7a      	ldrh	r2, [r7, #26]
20003efa:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20003efe:	f04f 0000 	mov.w	r0, #0
20003f02:	ea40 0101 	orr.w	r1, r0, r1
20003f06:	7499      	strb	r1, [r3, #18]
20003f08:	ea4f 2212 	mov.w	r2, r2, lsr #8
20003f0c:	b292      	uxth	r2, r2
20003f0e:	f04f 0100 	mov.w	r1, #0
20003f12:	ea41 0202 	orr.w	r2, r1, r2
20003f16:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[2] = ((az));
20003f18:	f24d 7370 	movw	r3, #55152	; 0xd770
20003f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f20:	681b      	ldr	r3, [r3, #0]
20003f22:	8b3a      	ldrh	r2, [r7, #24]
20003f24:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20003f28:	f04f 0000 	mov.w	r0, #0
20003f2c:	ea40 0101 	orr.w	r1, r0, r1
20003f30:	7519      	strb	r1, [r3, #20]
20003f32:	ea4f 2212 	mov.w	r2, r2, lsr #8
20003f36:	b292      	uxth	r2, r2
20003f38:	f04f 0100 	mov.w	r1, #0
20003f3c:	ea41 0202 	orr.w	r2, r1, r2
20003f40:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
20003f42:	f24d 7370 	movw	r3, #55152	; 0xd770
20003f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f4a:	681b      	ldr	r3, [r3, #0]
20003f4c:	8aba      	ldrh	r2, [r7, #20]
20003f4e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20003f52:	f04f 0000 	mov.w	r0, #0
20003f56:	ea40 0101 	orr.w	r1, r0, r1
20003f5a:	7599      	strb	r1, [r3, #22]
20003f5c:	ea4f 2212 	mov.w	r2, r2, lsr #8
20003f60:	b292      	uxth	r2, r2
20003f62:	f04f 0100 	mov.w	r1, #0
20003f66:	ea41 0202 	orr.w	r2, r1, r2
20003f6a:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
20003f6c:	f24d 7370 	movw	r3, #55152	; 0xd770
20003f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f74:	681b      	ldr	r3, [r3, #0]
20003f76:	8a7a      	ldrh	r2, [r7, #18]
20003f78:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20003f7c:	f04f 0000 	mov.w	r0, #0
20003f80:	ea40 0101 	orr.w	r1, r0, r1
20003f84:	7619      	strb	r1, [r3, #24]
20003f86:	ea4f 2212 	mov.w	r2, r2, lsr #8
20003f8a:	b292      	uxth	r2, r2
20003f8c:	f04f 0100 	mov.w	r1, #0
20003f90:	ea41 0202 	orr.w	r2, r1, r2
20003f94:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
20003f96:	f24d 7370 	movw	r3, #55152	; 0xd770
20003f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f9e:	681b      	ldr	r3, [r3, #0]
20003fa0:	8a3a      	ldrh	r2, [r7, #16]
20003fa2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20003fa6:	f04f 0000 	mov.w	r0, #0
20003faa:	ea40 0101 	orr.w	r1, r0, r1
20003fae:	7699      	strb	r1, [r3, #26]
20003fb0:	ea4f 2212 	mov.w	r2, r2, lsr #8
20003fb4:	b292      	uxth	r2, r2
20003fb6:	f04f 0100 	mov.w	r1, #0
20003fba:	ea41 0202 	orr.w	r2, r1, r2
20003fbe:	76da      	strb	r2, [r3, #27]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
20003fc0:	f107 030e 	add.w	r3, r7, #14
20003fc4:	4618      	mov	r0, r3
20003fc6:	f7fc fd55 	bl	20000a74 <get_IMU_temp>
20003fca:	4603      	mov	r3, r0
20003fcc:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
20003fce:	f24d 7370 	movw	r3, #55152	; 0xd770
20003fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fd6:	681b      	ldr	r3, [r3, #0]
20003fd8:	89fa      	ldrh	r2, [r7, #14]
20003fda:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20003fde:	f04f 0000 	mov.w	r0, #0
20003fe2:	ea40 0101 	orr.w	r1, r0, r1
20003fe6:	7719      	strb	r1, [r3, #28]
20003fe8:	ea4f 2212 	mov.w	r2, r2, lsr #8
20003fec:	b292      	uxth	r2, r2
20003fee:	f04f 0100 	mov.w	r1, #0
20003ff2:	ea41 0202 	orr.w	r2, r1, r2
20003ff6:	775a      	strb	r2, [r3, #29]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
20003ff8:	f24d 7370 	movw	r3, #55152	; 0xd770
20003ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004000:	681c      	ldr	r4, [r3, #0]
20004002:	f107 0317 	add.w	r3, r7, #23
20004006:	f04f 0040 	mov.w	r0, #64	; 0x40
2000400a:	f04f 0101 	mov.w	r1, #1
2000400e:	461a      	mov	r2, r3
20004010:	f7fc fe64 	bl	20000cdc <read_bus_voltage>
20004014:	4603      	mov	r3, r0
20004016:	b29b      	uxth	r3, r3
20004018:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2000401c:	f04f 0100 	mov.w	r1, #0
20004020:	ea41 0202 	orr.w	r2, r1, r2
20004024:	77e2      	strb	r2, [r4, #31]
20004026:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000402a:	b29b      	uxth	r3, r3
2000402c:	f04f 0200 	mov.w	r2, #0
20004030:	ea42 0303 	orr.w	r3, r2, r3
20004034:	f884 3020 	strb.w	r3, [r4, #32]
			loss_count+= flag;
20004038:	7dfa      	ldrb	r2, [r7, #23]
2000403a:	7ffb      	ldrb	r3, [r7, #31]
2000403c:	4413      	add	r3, r2
2000403e:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
20004040:	f24d 7370 	movw	r3, #55152	; 0xd770
20004044:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004048:	681c      	ldr	r4, [r3, #0]
2000404a:	f107 0317 	add.w	r3, r7, #23
2000404e:	f04f 0040 	mov.w	r0, #64	; 0x40
20004052:	f04f 0102 	mov.w	r1, #2
20004056:	461a      	mov	r2, r3
20004058:	f7fc fe40 	bl	20000cdc <read_bus_voltage>
2000405c:	4603      	mov	r3, r0
2000405e:	b29b      	uxth	r3, r3
20004060:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004064:	f04f 0100 	mov.w	r1, #0
20004068:	ea41 0202 	orr.w	r2, r1, r2
2000406c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
20004070:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004074:	b29b      	uxth	r3, r3
20004076:	f04f 0200 	mov.w	r2, #0
2000407a:	ea42 0303 	orr.w	r3, r2, r3
2000407e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
20004082:	7dfa      	ldrb	r2, [r7, #23]
20004084:	7ffb      	ldrb	r3, [r7, #31]
20004086:	4413      	add	r3, r2
20004088:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
2000408a:	f24d 7370 	movw	r3, #55152	; 0xd770
2000408e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004092:	681c      	ldr	r4, [r3, #0]
20004094:	f107 0317 	add.w	r3, r7, #23
20004098:	f04f 0040 	mov.w	r0, #64	; 0x40
2000409c:	f04f 0103 	mov.w	r1, #3
200040a0:	461a      	mov	r2, r3
200040a2:	f7fc fe1b 	bl	20000cdc <read_bus_voltage>
200040a6:	4603      	mov	r3, r0
200040a8:	b29b      	uxth	r3, r3
200040aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200040ae:	f04f 0100 	mov.w	r1, #0
200040b2:	ea41 0202 	orr.w	r2, r1, r2
200040b6:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
200040ba:	ea4f 2313 	mov.w	r3, r3, lsr #8
200040be:	b29b      	uxth	r3, r3
200040c0:	f04f 0200 	mov.w	r2, #0
200040c4:	ea42 0303 	orr.w	r3, r2, r3
200040c8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
200040cc:	7dfa      	ldrb	r2, [r7, #23]
200040ce:	7ffb      	ldrb	r3, [r7, #31]
200040d0:	4413      	add	r3, r2
200040d2:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
200040d4:	f24d 7370 	movw	r3, #55152	; 0xd770
200040d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040dc:	681c      	ldr	r4, [r3, #0]
200040de:	f107 0317 	add.w	r3, r7, #23
200040e2:	f04f 0040 	mov.w	r0, #64	; 0x40
200040e6:	f04f 0101 	mov.w	r1, #1
200040ea:	461a      	mov	r2, r3
200040ec:	f7fc fe54 	bl	20000d98 <read_shunt_voltage>
200040f0:	4603      	mov	r3, r0
200040f2:	b29b      	uxth	r3, r3
200040f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200040f8:	f04f 0100 	mov.w	r1, #0
200040fc:	ea41 0202 	orr.w	r2, r1, r2
20004100:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
20004104:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004108:	b29b      	uxth	r3, r3
2000410a:	f04f 0200 	mov.w	r2, #0
2000410e:	ea42 0303 	orr.w	r3, r2, r3
20004112:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
20004116:	7dfa      	ldrb	r2, [r7, #23]
20004118:	7ffb      	ldrb	r3, [r7, #31]
2000411a:	4413      	add	r3, r2
2000411c:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
2000411e:	f24d 7370 	movw	r3, #55152	; 0xd770
20004122:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004126:	681c      	ldr	r4, [r3, #0]
20004128:	f107 0317 	add.w	r3, r7, #23
2000412c:	f04f 0040 	mov.w	r0, #64	; 0x40
20004130:	f04f 0102 	mov.w	r1, #2
20004134:	461a      	mov	r2, r3
20004136:	f7fc fe2f 	bl	20000d98 <read_shunt_voltage>
2000413a:	4603      	mov	r3, r0
2000413c:	b29b      	uxth	r3, r3
2000413e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004142:	f04f 0100 	mov.w	r1, #0
20004146:	ea41 0202 	orr.w	r2, r1, r2
2000414a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
2000414e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004152:	b29b      	uxth	r3, r3
20004154:	f04f 0200 	mov.w	r2, #0
20004158:	ea42 0303 	orr.w	r3, r2, r3
2000415c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
20004160:	7dfa      	ldrb	r2, [r7, #23]
20004162:	7ffb      	ldrb	r3, [r7, #31]
20004164:	4413      	add	r3, r2
20004166:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
20004168:	f24d 7370 	movw	r3, #55152	; 0xd770
2000416c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004170:	681c      	ldr	r4, [r3, #0]
20004172:	f107 0317 	add.w	r3, r7, #23
20004176:	f04f 0040 	mov.w	r0, #64	; 0x40
2000417a:	f04f 0103 	mov.w	r1, #3
2000417e:	461a      	mov	r2, r3
20004180:	f7fc fe0a 	bl	20000d98 <read_shunt_voltage>
20004184:	4603      	mov	r3, r0
20004186:	b29b      	uxth	r3, r3
20004188:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2000418c:	f04f 0100 	mov.w	r1, #0
20004190:	ea41 0202 	orr.w	r2, r1, r2
20004194:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
20004198:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000419c:	b29b      	uxth	r3, r3
2000419e:	f04f 0200 	mov.w	r2, #0
200041a2:	ea42 0303 	orr.w	r3, r2, r3
200041a6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
200041aa:	7dfa      	ldrb	r2, [r7, #23]
200041ac:	7ffb      	ldrb	r3, [r7, #31]
200041ae:	4413      	add	r3, r2
200041b0:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
200041b2:	f24d 131c 	movw	r3, #53532	; 0xd11c
200041b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041ba:	f04f 0201 	mov.w	r2, #1
200041be:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);

//		}

//	}
}
200041c2:	f107 0724 	add.w	r7, r7, #36	; 0x24
200041c6:	46bd      	mov	sp, r7
200041c8:	bd90      	pop	{r4, r7, pc}
200041ca:	bf00      	nop

200041cc <vpld_callback>:

void vpld_callback(void* d1){
200041cc:	b5b0      	push	{r4, r5, r7, lr}
200041ce:	b084      	sub	sp, #16
200041d0:	af00      	add	r7, sp, #0
200041d2:	6078      	str	r0, [r7, #4]

//	if(feed_get_payload_data != pdFAIL){

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
200041d4:	f24d 023c 	movw	r2, #53308	; 0xd03c
200041d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200041dc:	f24d 7398 	movw	r3, #55192	; 0xd798
200041e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041e4:	601a      	str	r2, [r3, #0]
		uint8_t i;
//		while(1){
			for(i=0;i<7;i++){
200041e6:	f04f 0300 	mov.w	r3, #0
200041ea:	73fb      	strb	r3, [r7, #15]
200041ec:	e02e      	b.n	2000424c <vpld_callback+0x80>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
200041ee:	f24d 7398 	movw	r3, #55192	; 0xd798
200041f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041f6:	681c      	ldr	r4, [r3, #0]
200041f8:	7bfd      	ldrb	r5, [r7, #15]
200041fa:	7bbb      	ldrb	r3, [r7, #14]
200041fc:	7bfa      	ldrb	r2, [r7, #15]
200041fe:	f24d 60e4 	movw	r0, #55012	; 0xd6e4
20004202:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004206:	f04f 0121 	mov.w	r1, #33	; 0x21
2000420a:	f7fc fe25 	bl	20000e58 <get_ADC_value>
2000420e:	4603      	mov	r3, r0
20004210:	4619      	mov	r1, r3
20004212:	f105 0204 	add.w	r2, r5, #4
20004216:	f001 00ff 	and.w	r0, r1, #255	; 0xff
2000421a:	ea4f 0342 	mov.w	r3, r2, lsl #1
2000421e:	4423      	add	r3, r4
20004220:	f04f 0c00 	mov.w	ip, #0
20004224:	ea4c 0000 	orr.w	r0, ip, r0
20004228:	7198      	strb	r0, [r3, #6]
2000422a:	ea4f 2311 	mov.w	r3, r1, lsr #8
2000422e:	b298      	uxth	r0, r3
20004230:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004234:	4423      	add	r3, r4
20004236:	f04f 0200 	mov.w	r2, #0
2000423a:	4611      	mov	r1, r2
2000423c:	4602      	mov	r2, r0
2000423e:	ea41 0202 	orr.w	r2, r1, r2
20004242:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
//		while(1){
			for(i=0;i<7;i++){
20004244:	7bfb      	ldrb	r3, [r7, #15]
20004246:	f103 0301 	add.w	r3, r3, #1
2000424a:	73fb      	strb	r3, [r7, #15]
2000424c:	7bfb      	ldrb	r3, [r7, #15]
2000424e:	2b06      	cmp	r3, #6
20004250:	d9cd      	bls.n	200041ee <vpld_callback+0x22>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
20004252:	f24d 033c 	movw	r3, #53308	; 0xd03c
20004256:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000425a:	f04f 0202 	mov.w	r2, #2
2000425e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);

//		}

//	}
}
20004262:	f107 0710 	add.w	r7, r7, #16
20004266:	46bd      	mov	sp, r7
20004268:	bdb0      	pop	{r4, r5, r7, pc}
2000426a:	bf00      	nop

2000426c <vtlm_task>:


void vtlm_task(void* d){
2000426c:	b480      	push	{r7}
2000426e:	b085      	sub	sp, #20
20004270:	af00      	add	r7, sp, #0
20004272:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;
20004274:	f04f 0300 	mov.w	r3, #0
20004278:	81fb      	strh	r3, [r7, #14]

//	xQueueReceive(Data_Queue, data, 10);

//	if(feed_tlm_task != pdFAIL){
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		if(data[511] == HK_API_ID){
2000427a:	f24d 131c 	movw	r3, #53532	; 0xd11c
2000427e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004282:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
20004286:	2b01      	cmp	r3, #1
20004288:	d17b      	bne.n	20004382 <vtlm_task+0x116>
//			while(1){
				hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
2000428a:	f24d 7370 	movw	r3, #55152	; 0xd770
2000428e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004292:	681b      	ldr	r3, [r3, #0]
20004294:	f04f 0200 	mov.w	r2, #0
20004298:	f042 0208 	orr.w	r2, r2, #8
2000429c:	701a      	strb	r2, [r3, #0]
2000429e:	f04f 0200 	mov.w	r2, #0
200042a2:	f042 0201 	orr.w	r2, r2, #1
200042a6:	705a      	strb	r2, [r3, #1]
				hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
200042a8:	f24d 7370 	movw	r3, #55152	; 0xd770
200042ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042b0:	681a      	ldr	r2, [r3, #0]
200042b2:	89fb      	ldrh	r3, [r7, #14]
200042b4:	f103 0301 	add.w	r3, r3, #1
200042b8:	81fb      	strh	r3, [r7, #14]
200042ba:	89fb      	ldrh	r3, [r7, #14]
200042bc:	ea6f 4383 	mvn.w	r3, r3, lsl #18
200042c0:	ea6f 4393 	mvn.w	r3, r3, lsr #18
200042c4:	b29b      	uxth	r3, r3
200042c6:	b29b      	uxth	r3, r3
200042c8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200042cc:	b299      	uxth	r1, r3
200042ce:	89fb      	ldrh	r3, [r7, #14]
200042d0:	f103 0301 	add.w	r3, r3, #1
200042d4:	81fb      	strh	r3, [r7, #14]
200042d6:	89fb      	ldrh	r3, [r7, #14]
200042d8:	ea6f 4383 	mvn.w	r3, r3, lsl #18
200042dc:	ea6f 4393 	mvn.w	r3, r3, lsr #18
200042e0:	b29b      	uxth	r3, r3
200042e2:	b29b      	uxth	r3, r3
200042e4:	ea4f 2313 	mov.w	r3, r3, lsr #8
200042e8:	b29b      	uxth	r3, r3
200042ea:	ea41 0303 	orr.w	r3, r1, r3
200042ee:	b29b      	uxth	r3, r3
200042f0:	b29b      	uxth	r3, r3
200042f2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200042f6:	f04f 0000 	mov.w	r0, #0
200042fa:	ea40 0101 	orr.w	r1, r0, r1
200042fe:	7091      	strb	r1, [r2, #2]
20004300:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004304:	b29b      	uxth	r3, r3
20004306:	f04f 0100 	mov.w	r1, #0
2000430a:	ea41 0303 	orr.w	r3, r1, r3
2000430e:	70d3      	strb	r3, [r2, #3]
				hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
20004310:	f24d 7370 	movw	r3, #55152	; 0xd770
20004314:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004318:	681b      	ldr	r3, [r3, #0]
2000431a:	f04f 0200 	mov.w	r2, #0
2000431e:	711a      	strb	r2, [r3, #4]
20004320:	f04f 0200 	mov.w	r2, #0
20004324:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
20004328:	715a      	strb	r2, [r3, #5]
				hk_pkt->ccsds_s1 = 0;
2000432a:	f24d 7370 	movw	r3, #55152	; 0xd770
2000432e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004332:	681b      	ldr	r3, [r3, #0]
20004334:	f04f 0200 	mov.w	r2, #0
20004338:	719a      	strb	r2, [r3, #6]
2000433a:	f04f 0200 	mov.w	r2, #0
2000433e:	71da      	strb	r2, [r3, #7]
20004340:	f04f 0200 	mov.w	r2, #0
20004344:	721a      	strb	r2, [r3, #8]
20004346:	f04f 0200 	mov.w	r2, #0
2000434a:	725a      	strb	r2, [r3, #9]
				hk_pkt->ccsds_s2 = 0;
2000434c:	f24d 7370 	movw	r3, #55152	; 0xd770
20004350:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004354:	681b      	ldr	r3, [r3, #0]
20004356:	f04f 0200 	mov.w	r2, #0
2000435a:	729a      	strb	r2, [r3, #10]
2000435c:	f04f 0200 	mov.w	r2, #0
20004360:	72da      	strb	r2, [r3, #11]
20004362:	f04f 0200 	mov.w	r2, #0
20004366:	731a      	strb	r2, [r3, #12]
20004368:	f04f 0200 	mov.w	r2, #0
2000436c:	735a      	strb	r2, [r3, #13]
				Data_HK_Queue = hk_pkt;
2000436e:	f24d 7370 	movw	r3, #55152	; 0xd770
20004372:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004376:	681a      	ldr	r2, [r3, #0]
20004378:	f24d 7380 	movw	r3, #55168	; 0xd780
2000437c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004380:	601a      	str	r2, [r3, #0]

//			}
		}


		if(data_pld[49] == PLD_API_ID){
20004382:	f24d 033c 	movw	r3, #53308	; 0xd03c
20004386:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000438a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
2000438e:	2b02      	cmp	r3, #2
20004390:	d17b      	bne.n	2000448a <vtlm_task+0x21e>
//			while(1){

				pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
20004392:	f24d 7398 	movw	r3, #55192	; 0xd798
20004396:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000439a:	681b      	ldr	r3, [r3, #0]
2000439c:	f04f 0200 	mov.w	r2, #0
200043a0:	f042 0208 	orr.w	r2, r2, #8
200043a4:	701a      	strb	r2, [r3, #0]
200043a6:	f04f 0200 	mov.w	r2, #0
200043aa:	f042 0202 	orr.w	r2, r2, #2
200043ae:	705a      	strb	r2, [r3, #1]
				pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
200043b0:	f24d 7398 	movw	r3, #55192	; 0xd798
200043b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043b8:	681a      	ldr	r2, [r3, #0]
200043ba:	89fb      	ldrh	r3, [r7, #14]
200043bc:	f103 0301 	add.w	r3, r3, #1
200043c0:	81fb      	strh	r3, [r7, #14]
200043c2:	89fb      	ldrh	r3, [r7, #14]
200043c4:	ea6f 4383 	mvn.w	r3, r3, lsl #18
200043c8:	ea6f 4393 	mvn.w	r3, r3, lsr #18
200043cc:	b29b      	uxth	r3, r3
200043ce:	b29b      	uxth	r3, r3
200043d0:	ea4f 2303 	mov.w	r3, r3, lsl #8
200043d4:	b299      	uxth	r1, r3
200043d6:	89fb      	ldrh	r3, [r7, #14]
200043d8:	f103 0301 	add.w	r3, r3, #1
200043dc:	81fb      	strh	r3, [r7, #14]
200043de:	89fb      	ldrh	r3, [r7, #14]
200043e0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
200043e4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
200043e8:	b29b      	uxth	r3, r3
200043ea:	b29b      	uxth	r3, r3
200043ec:	ea4f 2313 	mov.w	r3, r3, lsr #8
200043f0:	b29b      	uxth	r3, r3
200043f2:	ea41 0303 	orr.w	r3, r1, r3
200043f6:	b29b      	uxth	r3, r3
200043f8:	b29b      	uxth	r3, r3
200043fa:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200043fe:	f04f 0000 	mov.w	r0, #0
20004402:	ea40 0101 	orr.w	r1, r0, r1
20004406:	7091      	strb	r1, [r2, #2]
20004408:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000440c:	b29b      	uxth	r3, r3
2000440e:	f04f 0100 	mov.w	r1, #0
20004412:	ea41 0303 	orr.w	r3, r1, r3
20004416:	70d3      	strb	r3, [r2, #3]
				pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
20004418:	f24d 7398 	movw	r3, #55192	; 0xd798
2000441c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004420:	681b      	ldr	r3, [r3, #0]
20004422:	f04f 0200 	mov.w	r2, #0
20004426:	711a      	strb	r2, [r3, #4]
20004428:	f04f 0200 	mov.w	r2, #0
2000442c:	f042 021e 	orr.w	r2, r2, #30
20004430:	715a      	strb	r2, [r3, #5]

				pld_pkt->ccsds_s1 = 0;
20004432:	f24d 7398 	movw	r3, #55192	; 0xd798
20004436:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000443a:	681b      	ldr	r3, [r3, #0]
2000443c:	f04f 0200 	mov.w	r2, #0
20004440:	719a      	strb	r2, [r3, #6]
20004442:	f04f 0200 	mov.w	r2, #0
20004446:	71da      	strb	r2, [r3, #7]
20004448:	f04f 0200 	mov.w	r2, #0
2000444c:	721a      	strb	r2, [r3, #8]
2000444e:	f04f 0200 	mov.w	r2, #0
20004452:	725a      	strb	r2, [r3, #9]
				pld_pkt->ccsds_s2 = 0;
20004454:	f24d 7398 	movw	r3, #55192	; 0xd798
20004458:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000445c:	681b      	ldr	r3, [r3, #0]
2000445e:	f04f 0200 	mov.w	r2, #0
20004462:	729a      	strb	r2, [r3, #10]
20004464:	f04f 0200 	mov.w	r2, #0
20004468:	72da      	strb	r2, [r3, #11]
2000446a:	f04f 0200 	mov.w	r2, #0
2000446e:	731a      	strb	r2, [r3, #12]
20004470:	f04f 0200 	mov.w	r2, #0
20004474:	735a      	strb	r2, [r3, #13]
				Data_PLD_Queue  = pld_pkt ;
20004476:	f24d 7398 	movw	r3, #55192	; 0xd798
2000447a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000447e:	681a      	ldr	r2, [r3, #0]
20004480:	f24d 7390 	movw	r3, #55184	; 0xd790
20004484:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004488:	601a      	str	r2, [r3, #0]
		else{

		}
//	}

}
2000448a:	f107 0714 	add.w	r7, r7, #20
2000448e:	46bd      	mov	sp, r7
20004490:	bc80      	pop	{r7}
20004492:	4770      	bx	lr

20004494 <vtlm_sender>:


void vtlm_sender(void* d){
20004494:	b580      	push	{r7, lr}
20004496:	b082      	sub	sp, #8
20004498:	af00      	add	r7, sp, #0
2000449a:	6078      	str	r0, [r7, #4]
//	Queue_Data = (QueueHandle_t*) d1;
//	uint8_t a;

//	if(feed_tlm_sender != pdFAIL){
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		if(data[511] == HK_API_ID){
2000449c:	f24d 131c 	movw	r3, #53532	; 0xd11c
200044a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044a4:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
200044a8:	2b01      	cmp	r3, #1
200044aa:	d10d      	bne.n	200044c8 <vtlm_sender+0x34>
//			while(1){

				MSS_UART_polled_tx(&g_mss_uart0, Data_HK_Queue, sizeof(pkt_hk_t));
200044ac:	f24d 7380 	movw	r3, #55168	; 0xd780
200044b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044b4:	681b      	ldr	r3, [r3, #0]
200044b6:	f24d 70dc 	movw	r0, #55260	; 0xd7dc
200044ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
200044be:	4619      	mov	r1, r3
200044c0:	f04f 022c 	mov.w	r2, #44	; 0x2c
200044c4:	f000 fb08 	bl	20004ad8 <MSS_UART_polled_tx>
//				vTaskResume(get_hk_pkt_handle);
//				xTaskNotifyGive(get_pld_pkt_handle);
//				vTask_Delay(1000);
//			}
		}
		if(data_pld[49] == PLD_API_ID){
200044c8:	f24d 033c 	movw	r3, #53308	; 0xd03c
200044cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
200044d4:	2b02      	cmp	r3, #2
200044d6:	d10d      	bne.n	200044f4 <vtlm_sender+0x60>
//			while(1){

				MSS_UART_polled_tx(&g_mss_uart0, Data_PLD_Queue , sizeof(pkt_pld_t));
200044d8:	f24d 7390 	movw	r3, #55184	; 0xd790
200044dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044e0:	681b      	ldr	r3, [r3, #0]
200044e2:	f24d 70dc 	movw	r0, #55260	; 0xd7dc
200044e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200044ea:	4619      	mov	r1, r3
200044ec:	f04f 021e 	mov.w	r2, #30
200044f0:	f000 faf2 	bl	20004ad8 <MSS_UART_polled_tx>
//				vTask_Delay(1000);
//			}
		}
//	}
}
200044f4:	f107 0708 	add.w	r7, r7, #8
200044f8:	46bd      	mov	sp, r7
200044fa:	bd80      	pop	{r7, pc}

200044fc <uart0_rx_handler>:
//			}
//	}
//
//}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
200044fc:	b580      	push	{r7, lr}
200044fe:	b082      	sub	sp, #8
20004500:	af00      	add	r7, sp, #0
20004502:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer,1);
20004504:	6878      	ldr	r0, [r7, #4]
20004506:	f24d 01dc 	movw	r1, #53468	; 0xd0dc
2000450a:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000450e:	f04f 0201 	mov.w	r2, #1
20004512:	f000 fb53 	bl	20004bbc <MSS_UART_get_rx>
20004516:	4602      	mov	r2, r0
20004518:	f24d 1318 	movw	r3, #53528	; 0xd118
2000451c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004520:	601a      	str	r2, [r3, #0]
	command_cnt = 0;
20004522:	f24d 7360 	movw	r3, #55136	; 0xd760
20004526:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000452a:	f04f 0200 	mov.w	r2, #0
2000452e:	801a      	strh	r2, [r3, #0]
	 if(uart0_irq_rx_buffer[0] == 127){
20004530:	f24d 03dc 	movw	r3, #53468	; 0xd0dc
20004534:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004538:	781b      	ldrb	r3, [r3, #0]
2000453a:	2b7f      	cmp	r3, #127	; 0x7f
2000453c:	d14a      	bne.n	200045d4 <uart0_rx_handler+0xd8>
	        c[command_index] = '\0';
2000453e:	f24d 531c 	movw	r3, #54556	; 0xd51c
20004542:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004546:	781b      	ldrb	r3, [r3, #0]
20004548:	461a      	mov	r2, r3
2000454a:	f24d 03fc 	movw	r3, #53500	; 0xd0fc
2000454e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004552:	f04f 0100 	mov.w	r1, #0
20004556:	5499      	strb	r1, [r3, r2]
	        c[command_index - 1] = 127;
20004558:	f24d 531c 	movw	r3, #54556	; 0xd51c
2000455c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004560:	781b      	ldrb	r3, [r3, #0]
20004562:	f103 32ff 	add.w	r2, r3, #4294967295
20004566:	f24d 03fc 	movw	r3, #53500	; 0xd0fc
2000456a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000456e:	f04f 017f 	mov.w	r1, #127	; 0x7f
20004572:	5499      	strb	r1, [r3, r2]
	        command_cnt = command_cnt + 1;
20004574:	f24d 7360 	movw	r3, #55136	; 0xd760
20004578:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000457c:	881b      	ldrh	r3, [r3, #0]
2000457e:	f103 0301 	add.w	r3, r3, #1
20004582:	b29a      	uxth	r2, r3
20004584:	f24d 7360 	movw	r3, #55136	; 0xd760
20004588:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000458c:	801a      	strh	r2, [r3, #0]
	        MSS_UART_polled_tx(&g_mss_uart0, &c[command_index - 1], 1);
2000458e:	f24d 531c 	movw	r3, #54556	; 0xd51c
20004592:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004596:	781b      	ldrb	r3, [r3, #0]
20004598:	f103 32ff 	add.w	r2, r3, #4294967295
2000459c:	f24d 03fc 	movw	r3, #53500	; 0xd0fc
200045a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045a4:	4413      	add	r3, r2
200045a6:	f24d 70dc 	movw	r0, #55260	; 0xd7dc
200045aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200045ae:	4619      	mov	r1, r3
200045b0:	f04f 0201 	mov.w	r2, #1
200045b4:	f000 fa90 	bl	20004ad8 <MSS_UART_polled_tx>
	        command_index = command_index - 1;
200045b8:	f24d 531c 	movw	r3, #54556	; 0xd51c
200045bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045c0:	781b      	ldrb	r3, [r3, #0]
200045c2:	f103 33ff 	add.w	r3, r3, #4294967295
200045c6:	b2da      	uxtb	r2, r3
200045c8:	f24d 531c 	movw	r3, #54556	; 0xd51c
200045cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045d0:	701a      	strb	r2, [r3, #0]
200045d2:	e03d      	b.n	20004650 <uart0_rx_handler+0x154>
	    }
	    else{
	        c[command_index] =  uart0_irq_rx_buffer[0];
200045d4:	f24d 531c 	movw	r3, #54556	; 0xd51c
200045d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045dc:	781b      	ldrb	r3, [r3, #0]
200045de:	461a      	mov	r2, r3
200045e0:	f24d 03dc 	movw	r3, #53468	; 0xd0dc
200045e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045e8:	7819      	ldrb	r1, [r3, #0]
200045ea:	f24d 03fc 	movw	r3, #53500	; 0xd0fc
200045ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045f2:	5499      	strb	r1, [r3, r2]
	        command_cnt = command_cnt + 1;
200045f4:	f24d 7360 	movw	r3, #55136	; 0xd760
200045f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045fc:	881b      	ldrh	r3, [r3, #0]
200045fe:	f103 0301 	add.w	r3, r3, #1
20004602:	b29a      	uxth	r2, r3
20004604:	f24d 7360 	movw	r3, #55136	; 0xd760
20004608:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000460c:	801a      	strh	r2, [r3, #0]
	        MSS_UART_polled_tx(&g_mss_uart0, &c[command_index], 1);
2000460e:	f24d 531c 	movw	r3, #54556	; 0xd51c
20004612:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004616:	781b      	ldrb	r3, [r3, #0]
20004618:	461a      	mov	r2, r3
2000461a:	f24d 03fc 	movw	r3, #53500	; 0xd0fc
2000461e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004622:	4413      	add	r3, r2
20004624:	f24d 70dc 	movw	r0, #55260	; 0xd7dc
20004628:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000462c:	4619      	mov	r1, r3
2000462e:	f04f 0201 	mov.w	r2, #1
20004632:	f000 fa51 	bl	20004ad8 <MSS_UART_polled_tx>
	        command_index = command_index + 1;
20004636:	f24d 531c 	movw	r3, #54556	; 0xd51c
2000463a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000463e:	781b      	ldrb	r3, [r3, #0]
20004640:	f103 0301 	add.w	r3, r3, #1
20004644:	b2da      	uxtb	r2, r3
20004646:	f24d 531c 	movw	r3, #54556	; 0xd51c
2000464a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000464e:	701a      	strb	r2, [r3, #0]
//	BaseType_t checkIfYieldRequired;
//	checkIfYieldRequired = xTaskResumeFromISR(uart_irq_function);
//	portYIELD_FROM_ISR(checkIfYieldRequired);
//	 xTaskNotifyFromISR(irq_pro, (uint32_t) c, eSetValueWithOverwrite, pdTRUE);

}
20004650:	f107 0708 	add.w	r7, r7, #8
20004654:	46bd      	mov	sp, r7
20004656:	bd80      	pop	{r7, pc}

20004658 <demo>:
//	 }
//}



void demo(void){
20004658:	b590      	push	{r4, r7, lr}
2000465a:	b087      	sub	sp, #28
2000465c:	af02      	add	r7, sp, #8
//		 msg[0] = 3;


//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
2000465e:	f24d 431c 	movw	r3, #54300	; 0xd41c
20004662:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004666:	603b      	str	r3, [r7, #0]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
20004668:	f646 43c8 	movw	r3, #27848	; 0x6cc8
2000466c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004670:	607b      	str	r3, [r7, #4]
		imu_ptr->init = &init;
20004672:	683a      	ldr	r2, [r7, #0]
20004674:	f640 63f9 	movw	r3, #3833	; 0xef9
20004678:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000467c:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
2000467e:	683b      	ldr	r3, [r7, #0]
20004680:	681b      	ldr	r3, [r3, #0]
20004682:	f04f 0000 	mov.w	r0, #0
20004686:	6879      	ldr	r1, [r7, #4]
20004688:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
2000468a:	f24d 60e4 	movw	r0, #55012	; 0xd6e4
2000468e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004692:	f244 0100 	movw	r1, #16384	; 0x4000
20004696:	f2c5 0100 	movt	r1, #20480	; 0x5000
2000469a:	f04f 0221 	mov.w	r2, #33	; 0x21
2000469e:	f04f 0300 	mov.w	r3, #0
200046a2:	f000 ff1b 	bl	200054dc <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
200046a6:	f24d 431c 	movw	r3, #54300	; 0xd41c
200046aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046ae:	60bb      	str	r3, [r7, #8]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
200046b0:	f646 43e8 	movw	r3, #27880	; 0x6ce8
200046b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046b8:	60fb      	str	r3, [r7, #12]
		vc_ptr->init = &init;
200046ba:	68ba      	ldr	r2, [r7, #8]
200046bc:	f640 63f9 	movw	r3, #3833	; 0xef9
200046c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046c4:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
200046c6:	68bb      	ldr	r3, [r7, #8]
200046c8:	681b      	ldr	r3, [r3, #0]
200046ca:	f04f 000a 	mov.w	r0, #10
200046ce:	68f9      	ldr	r1, [r7, #12]
200046d0:	4798      	blx	r3

		Data_HK_Queue = xQueueCreate(HK_QUEUE_LENGTH, SIZE_QUEUE);
200046d2:	f04f 0001 	mov.w	r0, #1
200046d6:	f04f 012c 	mov.w	r1, #44	; 0x2c
200046da:	f04f 0200 	mov.w	r2, #0
200046de:	f7fc fd8b 	bl	200011f8 <xQueueGenericCreate>
200046e2:	4602      	mov	r2, r0
200046e4:	f24d 7380 	movw	r3, #55168	; 0xd780
200046e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046ec:	601a      	str	r2, [r3, #0]
		Data_PLD_Queue = xQueueCreate(PLD_QUEUE_LENGTH, SIZE_PLD_QUEUE);
200046ee:	f04f 0001 	mov.w	r0, #1
200046f2:	f04f 011e 	mov.w	r1, #30
200046f6:	f04f 0200 	mov.w	r2, #0
200046fa:	f7fc fd7d 	bl	200011f8 <xQueueGenericCreate>
200046fe:	4602      	mov	r2, r0
20004700:	f24d 7390 	movw	r3, #55184	; 0xd790
20004704:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004708:	601a      	str	r2, [r3, #0]

		pkt_timer[0] = xTimerCreate("Hk_Timer", pdMS_TO_TICKS(2000), pdTRUE, (void* )0, vhk_callback);
2000470a:	f643 6339 	movw	r3, #15929	; 0x3e39
2000470e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004712:	9300      	str	r3, [sp, #0]
20004714:	f646 4060 	movw	r0, #27744	; 0x6c60
20004718:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000471c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
20004720:	f04f 0201 	mov.w	r2, #1
20004724:	f04f 0300 	mov.w	r3, #0
20004728:	f7fe fba6 	bl	20002e78 <xTimerCreate>
2000472c:	4602      	mov	r2, r0
2000472e:	f24d 7350 	movw	r3, #55120	; 0xd750
20004732:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004736:	601a      	str	r2, [r3, #0]
		xTimerStart(pkt_timer[0], 0);
20004738:	f24d 7350 	movw	r3, #55120	; 0xd750
2000473c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004740:	681c      	ldr	r4, [r3, #0]
20004742:	f7fd fd05 	bl	20002150 <xTaskGetTickCount>
20004746:	4603      	mov	r3, r0
20004748:	f04f 0200 	mov.w	r2, #0
2000474c:	9200      	str	r2, [sp, #0]
2000474e:	4620      	mov	r0, r4
20004750:	f04f 0101 	mov.w	r1, #1
20004754:	461a      	mov	r2, r3
20004756:	f04f 0300 	mov.w	r3, #0
2000475a:	f7fe fbdf 	bl	20002f1c <xTimerGenericCommand>
		pkt_timer[3] = xTimerCreate("PLD_Timer", pdMS_TO_TICKS(4000), pdTRUE, (void* )0, vpld_callback);
2000475e:	f244 13cd 	movw	r3, #16845	; 0x41cd
20004762:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004766:	9300      	str	r3, [sp, #0]
20004768:	f646 406c 	movw	r0, #27756	; 0x6c6c
2000476c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004770:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
20004774:	f04f 0201 	mov.w	r2, #1
20004778:	f04f 0300 	mov.w	r3, #0
2000477c:	f7fe fb7c 	bl	20002e78 <xTimerCreate>
20004780:	4602      	mov	r2, r0
20004782:	f24d 7350 	movw	r3, #55120	; 0xd750
20004786:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000478a:	60da      	str	r2, [r3, #12]
		xTimerStart(pkt_timer[3], 0);
2000478c:	f24d 7350 	movw	r3, #55120	; 0xd750
20004790:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004794:	68dc      	ldr	r4, [r3, #12]
20004796:	f7fd fcdb 	bl	20002150 <xTaskGetTickCount>
2000479a:	4603      	mov	r3, r0
2000479c:	f04f 0200 	mov.w	r2, #0
200047a0:	9200      	str	r2, [sp, #0]
200047a2:	4620      	mov	r0, r4
200047a4:	f04f 0101 	mov.w	r1, #1
200047a8:	461a      	mov	r2, r3
200047aa:	f04f 0300 	mov.w	r3, #0
200047ae:	f7fe fbb5 	bl	20002f1c <xTimerGenericCommand>
		pkt_timer[1] = xTimerCreate("TLM_Task_Timer", pdMS_TO_TICKS(5010),pdTRUE, (void* )0, vtlm_task);
200047b2:	f244 236d 	movw	r3, #17005	; 0x426d
200047b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047ba:	9300      	str	r3, [sp, #0]
200047bc:	f646 4078 	movw	r0, #27768	; 0x6c78
200047c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200047c4:	f241 3192 	movw	r1, #5010	; 0x1392
200047c8:	f04f 0201 	mov.w	r2, #1
200047cc:	f04f 0300 	mov.w	r3, #0
200047d0:	f7fe fb52 	bl	20002e78 <xTimerCreate>
200047d4:	4602      	mov	r2, r0
200047d6:	f24d 7350 	movw	r3, #55120	; 0xd750
200047da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047de:	605a      	str	r2, [r3, #4]
		xTimerStart(pkt_timer[1], 0);
200047e0:	f24d 7350 	movw	r3, #55120	; 0xd750
200047e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047e8:	685c      	ldr	r4, [r3, #4]
200047ea:	f7fd fcb1 	bl	20002150 <xTaskGetTickCount>
200047ee:	4603      	mov	r3, r0
200047f0:	f04f 0200 	mov.w	r2, #0
200047f4:	9200      	str	r2, [sp, #0]
200047f6:	4620      	mov	r0, r4
200047f8:	f04f 0101 	mov.w	r1, #1
200047fc:	461a      	mov	r2, r3
200047fe:	f04f 0300 	mov.w	r3, #0
20004802:	f7fe fb8b 	bl	20002f1c <xTimerGenericCommand>
		pkt_timer[2] = xTimerCreate("Sender_Timer", pdMS_TO_TICKS(5015), pdTRUE, (void* )0, vtlm_sender);
20004806:	f244 4395 	movw	r3, #17557	; 0x4495
2000480a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000480e:	9300      	str	r3, [sp, #0]
20004810:	f646 4088 	movw	r0, #27784	; 0x6c88
20004814:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004818:	f241 3197 	movw	r1, #5015	; 0x1397
2000481c:	f04f 0201 	mov.w	r2, #1
20004820:	f04f 0300 	mov.w	r3, #0
20004824:	f7fe fb28 	bl	20002e78 <xTimerCreate>
20004828:	4602      	mov	r2, r0
2000482a:	f24d 7350 	movw	r3, #55120	; 0xd750
2000482e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004832:	609a      	str	r2, [r3, #8]
		xTimerStart(pkt_timer[2], 0);
20004834:	f24d 7350 	movw	r3, #55120	; 0xd750
20004838:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000483c:	689c      	ldr	r4, [r3, #8]
2000483e:	f7fd fc87 	bl	20002150 <xTaskGetTickCount>
20004842:	4603      	mov	r3, r0
20004844:	f04f 0200 	mov.w	r2, #0
20004848:	9200      	str	r2, [sp, #0]
2000484a:	4620      	mov	r0, r4
2000484c:	f04f 0101 	mov.w	r1, #1
20004850:	461a      	mov	r2, r3
20004852:	f04f 0300 	mov.w	r3, #0
20004856:	f7fe fb61 	bl	20002f1c <xTimerGenericCommand>
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
2000485a:	f24d 70dc 	movw	r0, #55260	; 0xd7dc
2000485e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004862:	f44f 5116 	mov.w	r1, #9600	; 0x2580
20004866:	f04f 0203 	mov.w	r2, #3
2000486a:	f000 f8f3 	bl	20004a54 <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_ONE_STOP_BIT);
2000486e:	f24d 70dc 	movw	r0, #55260	; 0xd7dc
20004872:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004876:	f244 41fd 	movw	r1, #17661	; 0x44fd
2000487a:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000487e:	f04f 0200 	mov.w	r2, #0
20004882:	f000 fa09 	bl	20004c98 <MSS_UART_set_rx_handler>
//		init_demo(imu);
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;


	 xMutex = xSemaphoreCreateMutex();
20004886:	f04f 0001 	mov.w	r0, #1
2000488a:	f7fc fd37 	bl	200012fc <xQueueCreateMutex>
2000488e:	4602      	mov	r2, r0
20004890:	f24d 737c 	movw	r3, #55164	; 0xd77c
20004894:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004898:	601a      	str	r2, [r3, #0]
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
2000489a:	f7fd fb1d 	bl	20001ed8 <vTaskStartScheduler>

}
2000489e:	f107 0714 	add.w	r7, r7, #20
200048a2:	46bd      	mov	sp, r7
200048a4:	bd90      	pop	{r4, r7, pc}
200048a6:	bf00      	nop

200048a8 <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
200048a8:	b580      	push	{r7, lr}
200048aa:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
200048ac:	f24d 502c 	movw	r0, #54572	; 0xd52c
200048b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200048b4:	f001 f838 	bl	20005928 <I2C_isr>
}
200048b8:	bd80      	pop	{r7, pc}
200048ba:	bf00      	nop

200048bc <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
200048bc:	b580      	push	{r7, lr}
200048be:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
200048c0:	f24d 5098 	movw	r0, #54680	; 0xd598
200048c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200048c8:	f001 f82e 	bl	20005928 <I2C_isr>
}
200048cc:	bd80      	pop	{r7, pc}
200048ce:	bf00      	nop

200048d0 <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
200048d0:	b580      	push	{r7, lr}
200048d2:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
200048d4:	f24d 0070 	movw	r0, #53360	; 0xd070
200048d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200048dc:	f001 f824 	bl	20005928 <I2C_isr>
}
200048e0:	bd80      	pop	{r7, pc}
200048e2:	bf00      	nop

200048e4 <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
200048e4:	b580      	push	{r7, lr}
200048e6:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
200048e8:	f24d 6070 	movw	r0, #54896	; 0xd670
200048ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
200048f0:	f001 f81a 	bl	20005928 <I2C_isr>
}
200048f4:	bd80      	pop	{r7, pc}
200048f6:	bf00      	nop

200048f8 <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
200048f8:	b580      	push	{r7, lr}
200048fa:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
200048fc:	f24d 60e4 	movw	r0, #55012	; 0xd6e4
20004900:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004904:	f001 f810 	bl	20005928 <I2C_isr>
}
20004908:	bd80      	pop	{r7, pc}
2000490a:	bf00      	nop

2000490c <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
2000490c:	b580      	push	{r7, lr}
2000490e:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
20004910:	f24d 6004 	movw	r0, #54788	; 0xd604
20004914:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004918:	f001 f806 	bl	20005928 <I2C_isr>
}
2000491c:	bd80      	pop	{r7, pc}
2000491e:	bf00      	nop

20004920 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004920:	b480      	push	{r7}
20004922:	b083      	sub	sp, #12
20004924:	af00      	add	r7, sp, #0
20004926:	4603      	mov	r3, r0
20004928:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000492a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000492e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004932:	f997 2007 	ldrsb.w	r2, [r7, #7]
20004936:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000493a:	79f9      	ldrb	r1, [r7, #7]
2000493c:	f001 011f 	and.w	r1, r1, #31
20004940:	f04f 0001 	mov.w	r0, #1
20004944:	fa00 f101 	lsl.w	r1, r0, r1
20004948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000494c:	f107 070c 	add.w	r7, r7, #12
20004950:	46bd      	mov	sp, r7
20004952:	bc80      	pop	{r7}
20004954:	4770      	bx	lr
20004956:	bf00      	nop

20004958 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20004958:	b480      	push	{r7}
2000495a:	b083      	sub	sp, #12
2000495c:	af00      	add	r7, sp, #0
2000495e:	4603      	mov	r3, r0
20004960:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20004962:	f24e 1300 	movw	r3, #57600	; 0xe100
20004966:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000496a:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000496e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004972:	79f9      	ldrb	r1, [r7, #7]
20004974:	f001 011f 	and.w	r1, r1, #31
20004978:	f04f 0001 	mov.w	r0, #1
2000497c:	fa00 f101 	lsl.w	r1, r0, r1
20004980:	f102 0260 	add.w	r2, r2, #96	; 0x60
20004984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004988:	f107 070c 	add.w	r7, r7, #12
2000498c:	46bd      	mov	sp, r7
2000498e:	bc80      	pop	{r7}
20004990:	4770      	bx	lr
20004992:	bf00      	nop

20004994 <set_bit_reg8>:
static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20004994:	b480      	push	{r7}
20004996:	b083      	sub	sp, #12
20004998:	af00      	add	r7, sp, #0
2000499a:	6078      	str	r0, [r7, #4]
2000499c:	460b      	mov	r3, r1
2000499e:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x1;
200049a0:	687b      	ldr	r3, [r7, #4]
200049a2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200049a6:	687b      	ldr	r3, [r7, #4]
200049a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200049ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200049b0:	ea4f 1343 	mov.w	r3, r3, lsl #5
200049b4:	441a      	add	r2, r3
200049b6:	78fb      	ldrb	r3, [r7, #3]
200049b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200049bc:	4413      	add	r3, r2
200049be:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200049c2:	f04f 0201 	mov.w	r2, #1
200049c6:	601a      	str	r2, [r3, #0]
}
200049c8:	f107 070c 	add.w	r7, r7, #12
200049cc:	46bd      	mov	sp, r7
200049ce:	bc80      	pop	{r7}
200049d0:	4770      	bx	lr
200049d2:	bf00      	nop

200049d4 <clear_bit_reg8>:
static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
200049d4:	b480      	push	{r7}
200049d6:	b083      	sub	sp, #12
200049d8:	af00      	add	r7, sp, #0
200049da:	6078      	str	r0, [r7, #4]
200049dc:	460b      	mov	r3, r1
200049de:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x0;
200049e0:	687b      	ldr	r3, [r7, #4]
200049e2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200049e6:	687b      	ldr	r3, [r7, #4]
200049e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200049ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200049f0:	ea4f 1343 	mov.w	r3, r3, lsl #5
200049f4:	441a      	add	r2, r3
200049f6:	78fb      	ldrb	r3, [r7, #3]
200049f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200049fc:	4413      	add	r3, r2
200049fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
20004a02:	f04f 0200 	mov.w	r2, #0
20004a06:	601a      	str	r2, [r3, #0]
}
20004a08:	f107 070c 	add.w	r7, r7, #12
20004a0c:	46bd      	mov	sp, r7
20004a0e:	bc80      	pop	{r7}
20004a10:	4770      	bx	lr
20004a12:	bf00      	nop

20004a14 <read_bit_reg8>:
static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20004a14:	b480      	push	{r7}
20004a16:	b083      	sub	sp, #12
20004a18:	af00      	add	r7, sp, #0
20004a1a:	6078      	str	r0, [r7, #4]
20004a1c:	460b      	mov	r3, r1
20004a1e:	70fb      	strb	r3, [r7, #3]
    return (HW_REG_BIT(reg,bit));
20004a20:	687b      	ldr	r3, [r7, #4]
20004a22:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20004a26:	687b      	ldr	r3, [r7, #4]
20004a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20004a2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20004a30:	ea4f 1343 	mov.w	r3, r3, lsl #5
20004a34:	441a      	add	r2, r3
20004a36:	78fb      	ldrb	r3, [r7, #3]
20004a38:	ea4f 0383 	mov.w	r3, r3, lsl #2
20004a3c:	4413      	add	r3, r2
20004a3e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
20004a42:	681b      	ldr	r3, [r3, #0]
20004a44:	b2db      	uxtb	r3, r3
}
20004a46:	4618      	mov	r0, r3
20004a48:	f107 070c 	add.w	r7, r7, #12
20004a4c:	46bd      	mov	sp, r7
20004a4e:	bc80      	pop	{r7}
20004a50:	4770      	bx	lr
20004a52:	bf00      	nop

20004a54 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20004a54:	b580      	push	{r7, lr}
20004a56:	b084      	sub	sp, #16
20004a58:	af00      	add	r7, sp, #0
20004a5a:	60f8      	str	r0, [r7, #12]
20004a5c:	60b9      	str	r1, [r7, #8]
20004a5e:	4613      	mov	r3, r2
20004a60:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20004a62:	68fa      	ldr	r2, [r7, #12]
20004a64:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a6c:	429a      	cmp	r2, r3
20004a6e:	d007      	beq.n	20004a80 <MSS_UART_init+0x2c>
20004a70:	68fa      	ldr	r2, [r7, #12]
20004a72:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a7a:	429a      	cmp	r2, r3
20004a7c:	d000      	beq.n	20004a80 <MSS_UART_init+0x2c>
20004a7e:	be00      	bkpt	0x0000

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
20004a80:	79fb      	ldrb	r3, [r7, #7]
20004a82:	68f8      	ldr	r0, [r7, #12]
20004a84:	68b9      	ldr	r1, [r7, #8]
20004a86:	461a      	mov	r2, r3
20004a88:	f000 fa56 	bl	20004f38 <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
20004a8c:	68fb      	ldr	r3, [r7, #12]
20004a8e:	681b      	ldr	r3, [r3, #0]
20004a90:	f103 0330 	add.w	r3, r3, #48	; 0x30
20004a94:	4618      	mov	r0, r3
20004a96:	f04f 0103 	mov.w	r1, #3
20004a9a:	f7ff ff9b 	bl	200049d4 <clear_bit_reg8>

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
20004a9e:	68fb      	ldr	r3, [r7, #12]
20004aa0:	681b      	ldr	r3, [r3, #0]
20004aa2:	f103 0334 	add.w	r3, r3, #52	; 0x34
20004aa6:	4618      	mov	r0, r3
20004aa8:	f04f 0102 	mov.w	r1, #2
20004aac:	f7ff ff92 	bl	200049d4 <clear_bit_reg8>

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
20004ab0:	68fb      	ldr	r3, [r7, #12]
20004ab2:	681b      	ldr	r3, [r3, #0]
20004ab4:	f103 0338 	add.w	r3, r3, #56	; 0x38
20004ab8:	4618      	mov	r0, r3
20004aba:	f04f 0100 	mov.w	r1, #0
20004abe:	f7ff ff89 	bl	200049d4 <clear_bit_reg8>

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
20004ac2:	68fa      	ldr	r2, [r7, #12]
20004ac4:	f245 33d1 	movw	r3, #21457	; 0x53d1
20004ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004acc:	6253      	str	r3, [r2, #36]	; 0x24
}
20004ace:	f107 0710 	add.w	r7, r7, #16
20004ad2:	46bd      	mov	sp, r7
20004ad4:	bd80      	pop	{r7, pc}
20004ad6:	bf00      	nop

20004ad8 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20004ad8:	b480      	push	{r7}
20004ada:	b089      	sub	sp, #36	; 0x24
20004adc:	af00      	add	r7, sp, #0
20004ade:	60f8      	str	r0, [r7, #12]
20004ae0:	60b9      	str	r1, [r7, #8]
20004ae2:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0u;
20004ae4:	f04f 0300 	mov.w	r3, #0
20004ae8:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20004aea:	68fa      	ldr	r2, [r7, #12]
20004aec:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004af4:	429a      	cmp	r2, r3
20004af6:	d007      	beq.n	20004b08 <MSS_UART_polled_tx+0x30>
20004af8:	68fa      	ldr	r2, [r7, #12]
20004afa:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b02:	429a      	cmp	r2, r3
20004b04:	d000      	beq.n	20004b08 <MSS_UART_polled_tx+0x30>
20004b06:	be00      	bkpt	0x0000
    ASSERT(pbuff != ( (uint8_t *)0));
20004b08:	68bb      	ldr	r3, [r7, #8]
20004b0a:	2b00      	cmp	r3, #0
20004b0c:	d100      	bne.n	20004b10 <MSS_UART_polled_tx+0x38>
20004b0e:	be00      	bkpt	0x0000
    ASSERT(tx_size > 0u);
20004b10:	687b      	ldr	r3, [r7, #4]
20004b12:	2b00      	cmp	r3, #0
20004b14:	d100      	bne.n	20004b18 <MSS_UART_polled_tx+0x40>
20004b16:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20004b18:	68fa      	ldr	r2, [r7, #12]
20004b1a:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b22:	429a      	cmp	r2, r3
20004b24:	d006      	beq.n	20004b34 <MSS_UART_polled_tx+0x5c>
20004b26:	68fa      	ldr	r2, [r7, #12]
20004b28:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b30:	429a      	cmp	r2, r3
20004b32:	d13d      	bne.n	20004bb0 <MSS_UART_polled_tx+0xd8>
20004b34:	68bb      	ldr	r3, [r7, #8]
20004b36:	2b00      	cmp	r3, #0
20004b38:	d03a      	beq.n	20004bb0 <MSS_UART_polled_tx+0xd8>
20004b3a:	687b      	ldr	r3, [r7, #4]
20004b3c:	2b00      	cmp	r3, #0
20004b3e:	d037      	beq.n	20004bb0 <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
20004b40:	68fb      	ldr	r3, [r7, #12]
20004b42:	681b      	ldr	r3, [r3, #0]
20004b44:	7d1b      	ldrb	r3, [r3, #20]
20004b46:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
20004b48:	68fb      	ldr	r3, [r7, #12]
20004b4a:	7b5a      	ldrb	r2, [r3, #13]
20004b4c:	7efb      	ldrb	r3, [r7, #27]
20004b4e:	ea42 0303 	orr.w	r3, r2, r3
20004b52:	b2da      	uxtb	r2, r3
20004b54:	68fb      	ldr	r3, [r7, #12]
20004b56:	735a      	strb	r2, [r3, #13]

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
20004b58:	7efb      	ldrb	r3, [r7, #27]
20004b5a:	f003 0320 	and.w	r3, r3, #32
20004b5e:	2b00      	cmp	r3, #0
20004b60:	d023      	beq.n	20004baa <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
20004b62:	f04f 0310 	mov.w	r3, #16
20004b66:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
20004b68:	687b      	ldr	r3, [r7, #4]
20004b6a:	2b0f      	cmp	r3, #15
20004b6c:	d801      	bhi.n	20004b72 <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
20004b6e:	687b      	ldr	r3, [r7, #4]
20004b70:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
20004b72:	f04f 0300 	mov.w	r3, #0
20004b76:	617b      	str	r3, [r7, #20]
20004b78:	e00e      	b.n	20004b98 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
20004b7a:	68fb      	ldr	r3, [r7, #12]
20004b7c:	681b      	ldr	r3, [r3, #0]
20004b7e:	68b9      	ldr	r1, [r7, #8]
20004b80:	693a      	ldr	r2, [r7, #16]
20004b82:	440a      	add	r2, r1
20004b84:	7812      	ldrb	r2, [r2, #0]
20004b86:	701a      	strb	r2, [r3, #0]
                    char_idx++;
20004b88:	693b      	ldr	r3, [r7, #16]
20004b8a:	f103 0301 	add.w	r3, r3, #1
20004b8e:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
20004b90:	697b      	ldr	r3, [r7, #20]
20004b92:	f103 0301 	add.w	r3, r3, #1
20004b96:	617b      	str	r3, [r7, #20]
20004b98:	697a      	ldr	r2, [r7, #20]
20004b9a:	69fb      	ldr	r3, [r7, #28]
20004b9c:	429a      	cmp	r2, r3
20004b9e:	d3ec      	bcc.n	20004b7a <MSS_UART_polled_tx+0xa2>
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
20004ba0:	687a      	ldr	r2, [r7, #4]
20004ba2:	697b      	ldr	r3, [r7, #20]
20004ba4:	ebc3 0302 	rsb	r3, r3, r2
20004ba8:	607b      	str	r3, [r7, #4]
            }
        } while(tx_size);
20004baa:	687b      	ldr	r3, [r7, #4]
20004bac:	2b00      	cmp	r3, #0
20004bae:	d1c7      	bne.n	20004b40 <MSS_UART_polled_tx+0x68>
    }
}
20004bb0:	f107 0724 	add.w	r7, r7, #36	; 0x24
20004bb4:	46bd      	mov	sp, r7
20004bb6:	bc80      	pop	{r7}
20004bb8:	4770      	bx	lr
20004bba:	bf00      	nop

20004bbc <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20004bbc:	b480      	push	{r7}
20004bbe:	b087      	sub	sp, #28
20004bc0:	af00      	add	r7, sp, #0
20004bc2:	60f8      	str	r0, [r7, #12]
20004bc4:	60b9      	str	r1, [r7, #8]
20004bc6:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0u;
20004bc8:	f04f 0300 	mov.w	r3, #0
20004bcc:	613b      	str	r3, [r7, #16]
    uint8_t status = 0u;
20004bce:	f04f 0300 	mov.w	r3, #0
20004bd2:	75fb      	strb	r3, [r7, #23]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20004bd4:	68fa      	ldr	r2, [r7, #12]
20004bd6:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bde:	429a      	cmp	r2, r3
20004be0:	d007      	beq.n	20004bf2 <MSS_UART_get_rx+0x36>
20004be2:	68fa      	ldr	r2, [r7, #12]
20004be4:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bec:	429a      	cmp	r2, r3
20004bee:	d000      	beq.n	20004bf2 <MSS_UART_get_rx+0x36>
20004bf0:	be00      	bkpt	0x0000
    ASSERT(rx_buff != ((uint8_t *)0));
20004bf2:	68bb      	ldr	r3, [r7, #8]
20004bf4:	2b00      	cmp	r3, #0
20004bf6:	d100      	bne.n	20004bfa <MSS_UART_get_rx+0x3e>
20004bf8:	be00      	bkpt	0x0000
    ASSERT(buff_size > 0u);
20004bfa:	687b      	ldr	r3, [r7, #4]
20004bfc:	2b00      	cmp	r3, #0
20004bfe:	d100      	bne.n	20004c02 <MSS_UART_get_rx+0x46>
20004c00:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20004c02:	68fa      	ldr	r2, [r7, #12]
20004c04:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c0c:	429a      	cmp	r2, r3
20004c0e:	d006      	beq.n	20004c1e <MSS_UART_get_rx+0x62>
20004c10:	68fa      	ldr	r2, [r7, #12]
20004c12:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c1a:	429a      	cmp	r2, r3
20004c1c:	d134      	bne.n	20004c88 <MSS_UART_get_rx+0xcc>
20004c1e:	68bb      	ldr	r3, [r7, #8]
20004c20:	2b00      	cmp	r3, #0
20004c22:	d031      	beq.n	20004c88 <MSS_UART_get_rx+0xcc>
20004c24:	687b      	ldr	r3, [r7, #4]
20004c26:	2b00      	cmp	r3, #0
20004c28:	d02e      	beq.n	20004c88 <MSS_UART_get_rx+0xcc>
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
20004c2a:	68fb      	ldr	r3, [r7, #12]
20004c2c:	681b      	ldr	r3, [r3, #0]
20004c2e:	7d1b      	ldrb	r3, [r3, #20]
20004c30:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
20004c32:	68fb      	ldr	r3, [r7, #12]
20004c34:	7b5a      	ldrb	r2, [r3, #13]
20004c36:	7dfb      	ldrb	r3, [r7, #23]
20004c38:	ea42 0303 	orr.w	r3, r2, r3
20004c3c:	b2da      	uxtb	r2, r3
20004c3e:	68fb      	ldr	r3, [r7, #12]
20004c40:	735a      	strb	r2, [r3, #13]

        while(((status & MSS_UART_DATA_READY) != 0u) &&
20004c42:	e017      	b.n	20004c74 <MSS_UART_get_rx+0xb8>
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20004c44:	68ba      	ldr	r2, [r7, #8]
20004c46:	693b      	ldr	r3, [r7, #16]
20004c48:	4413      	add	r3, r2
20004c4a:	68fa      	ldr	r2, [r7, #12]
20004c4c:	6812      	ldr	r2, [r2, #0]
20004c4e:	7812      	ldrb	r2, [r2, #0]
20004c50:	b2d2      	uxtb	r2, r2
20004c52:	701a      	strb	r2, [r3, #0]
            ++rx_size;
20004c54:	693b      	ldr	r3, [r7, #16]
20004c56:	f103 0301 	add.w	r3, r3, #1
20004c5a:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
20004c5c:	68fb      	ldr	r3, [r7, #12]
20004c5e:	681b      	ldr	r3, [r3, #0]
20004c60:	7d1b      	ldrb	r3, [r3, #20]
20004c62:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
20004c64:	68fb      	ldr	r3, [r7, #12]
20004c66:	7b5a      	ldrb	r2, [r3, #13]
20004c68:	7dfb      	ldrb	r3, [r7, #23]
20004c6a:	ea42 0303 	orr.w	r3, r2, r3
20004c6e:	b2da      	uxtb	r2, r3
20004c70:	68fb      	ldr	r3, [r7, #12]
20004c72:	735a      	strb	r2, [r3, #13]
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
20004c74:	7dfb      	ldrb	r3, [r7, #23]
20004c76:	f003 0301 	and.w	r3, r3, #1
20004c7a:	b2db      	uxtb	r3, r3
20004c7c:	2b00      	cmp	r3, #0
20004c7e:	d003      	beq.n	20004c88 <MSS_UART_get_rx+0xcc>
20004c80:	693a      	ldr	r2, [r7, #16]
20004c82:	687b      	ldr	r3, [r7, #4]
20004c84:	429a      	cmp	r2, r3
20004c86:	d3dd      	bcc.n	20004c44 <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
20004c88:	693b      	ldr	r3, [r7, #16]
}
20004c8a:	4618      	mov	r0, r3
20004c8c:	f107 071c 	add.w	r7, r7, #28
20004c90:	46bd      	mov	sp, r7
20004c92:	bc80      	pop	{r7}
20004c94:	4770      	bx	lr
20004c96:	bf00      	nop

20004c98 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20004c98:	b580      	push	{r7, lr}
20004c9a:	b084      	sub	sp, #16
20004c9c:	af00      	add	r7, sp, #0
20004c9e:	60f8      	str	r0, [r7, #12]
20004ca0:	60b9      	str	r1, [r7, #8]
20004ca2:	4613      	mov	r3, r2
20004ca4:	71fb      	strb	r3, [r7, #7]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20004ca6:	68fa      	ldr	r2, [r7, #12]
20004ca8:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cb0:	429a      	cmp	r2, r3
20004cb2:	d007      	beq.n	20004cc4 <MSS_UART_set_rx_handler+0x2c>
20004cb4:	68fa      	ldr	r2, [r7, #12]
20004cb6:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cbe:	429a      	cmp	r2, r3
20004cc0:	d000      	beq.n	20004cc4 <MSS_UART_set_rx_handler+0x2c>
20004cc2:	be00      	bkpt	0x0000
    ASSERT(handler != INVALID_IRQ_HANDLER );
20004cc4:	68bb      	ldr	r3, [r7, #8]
20004cc6:	2b00      	cmp	r3, #0
20004cc8:	d100      	bne.n	20004ccc <MSS_UART_set_rx_handler+0x34>
20004cca:	be00      	bkpt	0x0000
    ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
20004ccc:	79fb      	ldrb	r3, [r7, #7]
20004cce:	2bc0      	cmp	r3, #192	; 0xc0
20004cd0:	d900      	bls.n	20004cd4 <MSS_UART_set_rx_handler+0x3c>
20004cd2:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20004cd4:	68fa      	ldr	r2, [r7, #12]
20004cd6:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cde:	429a      	cmp	r2, r3
20004ce0:	d006      	beq.n	20004cf0 <MSS_UART_set_rx_handler+0x58>
20004ce2:	68fa      	ldr	r2, [r7, #12]
20004ce4:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cec:	429a      	cmp	r2, r3
20004cee:	d12e      	bne.n	20004d4e <MSS_UART_set_rx_handler+0xb6>
20004cf0:	68bb      	ldr	r3, [r7, #8]
20004cf2:	2b00      	cmp	r3, #0
20004cf4:	d02b      	beq.n	20004d4e <MSS_UART_set_rx_handler+0xb6>
20004cf6:	79fb      	ldrb	r3, [r7, #7]
20004cf8:	2bc0      	cmp	r3, #192	; 0xc0
20004cfa:	d828      	bhi.n	20004d4e <MSS_UART_set_rx_handler+0xb6>
       (handler != INVALID_IRQ_HANDLER) &&
       (trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL))
    {
        this_uart->rx_handler = handler;
20004cfc:	68fb      	ldr	r3, [r7, #12]
20004cfe:	68ba      	ldr	r2, [r7, #8]
20004d00:	621a      	str	r2, [r3, #32]

        /* Set the receive interrupt trigger level. */
        this_uart->hw_reg->FCR = (this_uart->hw_reg->FCR &
20004d02:	68fb      	ldr	r3, [r7, #12]
20004d04:	681a      	ldr	r2, [r3, #0]
20004d06:	68fb      	ldr	r3, [r7, #12]
20004d08:	681b      	ldr	r3, [r3, #0]
20004d0a:	7a1b      	ldrb	r3, [r3, #8]
20004d0c:	b2db      	uxtb	r3, r3
20004d0e:	b2db      	uxtb	r3, r3
20004d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20004d14:	79f8      	ldrb	r0, [r7, #7]
20004d16:	4619      	mov	r1, r3
20004d18:	4603      	mov	r3, r0
20004d1a:	ea41 0303 	orr.w	r3, r1, r3
20004d1e:	b2db      	uxtb	r3, r3
20004d20:	b2db      	uxtb	r3, r3
20004d22:	7213      	strb	r3, [r2, #8]
                                 (uint8_t)(~((uint8_t)FCR_TRIG_LEVEL_MASK))) |
                                 (uint8_t)trigger_level;
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
20004d24:	68fb      	ldr	r3, [r7, #12]
20004d26:	791b      	ldrb	r3, [r3, #4]
20004d28:	b25b      	sxtb	r3, r3
20004d2a:	4618      	mov	r0, r3
20004d2c:	f7ff fe14 	bl	20004958 <NVIC_ClearPendingIRQ>

        /* Enable receive interrupt. */
        set_bit_reg8(&this_uart->hw_reg->IER,ERBFI);
20004d30:	68fb      	ldr	r3, [r7, #12]
20004d32:	681b      	ldr	r3, [r3, #0]
20004d34:	f103 0304 	add.w	r3, r3, #4
20004d38:	4618      	mov	r0, r3
20004d3a:	f04f 0100 	mov.w	r1, #0
20004d3e:	f7ff fe29 	bl	20004994 <set_bit_reg8>

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ(this_uart->irqn);
20004d42:	68fb      	ldr	r3, [r7, #12]
20004d44:	791b      	ldrb	r3, [r3, #4]
20004d46:	b25b      	sxtb	r3, r3
20004d48:	4618      	mov	r0, r3
20004d4a:	f7ff fde9 	bl	20004920 <NVIC_EnableIRQ>
    }
}
20004d4e:	f107 0710 	add.w	r7, r7, #16
20004d52:	46bd      	mov	sp, r7
20004d54:	bd80      	pop	{r7, pc}
20004d56:	bf00      	nop

20004d58 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
20004d58:	4668      	mov	r0, sp
20004d5a:	f020 0107 	bic.w	r1, r0, #7
20004d5e:	468d      	mov	sp, r1
20004d60:	b589      	push	{r0, r3, r7, lr}
20004d62:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart0);
20004d64:	f24d 70dc 	movw	r0, #55260	; 0xd7dc
20004d68:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d6c:	f000 fa1a 	bl	200051a4 <MSS_UART_isr>
}
20004d70:	46bd      	mov	sp, r7
20004d72:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20004d76:	4685      	mov	sp, r0
20004d78:	4770      	bx	lr
20004d7a:	bf00      	nop

20004d7c <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
20004d7c:	4668      	mov	r0, sp
20004d7e:	f020 0107 	bic.w	r1, r0, #7
20004d82:	468d      	mov	sp, r1
20004d84:	b589      	push	{r0, r3, r7, lr}
20004d86:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart1);
20004d88:	f24d 709c 	movw	r0, #55196	; 0xd79c
20004d8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d90:	f000 fa08 	bl	200051a4 <MSS_UART_isr>
}
20004d94:	46bd      	mov	sp, r7
20004d96:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20004d9a:	4685      	mov	sp, r0
20004d9c:	4770      	bx	lr
20004d9e:	bf00      	nop

20004da0 <config_baud_divisors>:
config_baud_divisors
(
    mss_uart_instance_t * this_uart,
    uint32_t baudrate
)
{
20004da0:	b580      	push	{r7, lr}
20004da2:	b088      	sub	sp, #32
20004da4:	af00      	add	r7, sp, #0
20004da6:	6078      	str	r0, [r7, #4]
20004da8:	6039      	str	r1, [r7, #0]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20004daa:	687a      	ldr	r2, [r7, #4]
20004dac:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004db4:	429a      	cmp	r2, r3
20004db6:	d007      	beq.n	20004dc8 <config_baud_divisors+0x28>
20004db8:	687a      	ldr	r2, [r7, #4]
20004dba:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dc2:	429a      	cmp	r2, r3
20004dc4:	d000      	beq.n	20004dc8 <config_baud_divisors+0x28>
20004dc6:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20004dc8:	687a      	ldr	r2, [r7, #4]
20004dca:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dd2:	429a      	cmp	r2, r3
20004dd4:	d007      	beq.n	20004de6 <config_baud_divisors+0x46>
20004dd6:	687a      	ldr	r2, [r7, #4]
20004dd8:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004de0:	429a      	cmp	r2, r3
20004de2:	f040 80a4 	bne.w	20004f2e <config_baud_divisors+0x18e>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
20004de6:	687b      	ldr	r3, [r7, #4]
20004de8:	683a      	ldr	r2, [r7, #0]
20004dea:	609a      	str	r2, [r3, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
20004dec:	f001 fbca 	bl	20006584 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
20004df0:	687a      	ldr	r2, [r7, #4]
20004df2:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dfa:	429a      	cmp	r2, r3
20004dfc:	d106      	bne.n	20004e0c <config_baud_divisors+0x6c>
        {
            pclk_freq = g_FrequencyPCLK0;
20004dfe:	f646 5308 	movw	r3, #27912	; 0x6d08
20004e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e06:	681b      	ldr	r3, [r3, #0]
20004e08:	61fb      	str	r3, [r7, #28]
20004e0a:	e005      	b.n	20004e18 <config_baud_divisors+0x78>
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
20004e0c:	f646 530c 	movw	r3, #27916	; 0x6d0c
20004e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e14:	681b      	ldr	r3, [r3, #0]
20004e16:	61fb      	str	r3, [r7, #28]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
20004e18:	69fb      	ldr	r3, [r7, #28]
20004e1a:	ea4f 02c3 	mov.w	r2, r3, lsl #3
20004e1e:	683b      	ldr	r3, [r7, #0]
20004e20:	fbb2 f3f3 	udiv	r3, r2, r3
20004e24:	617b      	str	r3, [r7, #20]
        baud_value_by_64 = baud_value_by_128 / 2u;
20004e26:	697b      	ldr	r3, [r7, #20]
20004e28:	ea4f 0353 	mov.w	r3, r3, lsr #1
20004e2c:	613b      	str	r3, [r7, #16]
        baud_value = baud_value_by_64 / 64u;
20004e2e:	693b      	ldr	r3, [r7, #16]
20004e30:	ea4f 1393 	mov.w	r3, r3, lsr #6
20004e34:	60fb      	str	r3, [r7, #12]
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
20004e36:	68fb      	ldr	r3, [r7, #12]
20004e38:	ea4f 1383 	mov.w	r3, r3, lsl #6
20004e3c:	693a      	ldr	r2, [r7, #16]
20004e3e:	ebc3 0302 	rsb	r3, r3, r2
20004e42:	61bb      	str	r3, [r7, #24]
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
20004e44:	68fb      	ldr	r3, [r7, #12]
20004e46:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20004e4a:	697a      	ldr	r2, [r7, #20]
20004e4c:	ebc3 0202 	rsb	r2, r3, r2
20004e50:	69bb      	ldr	r3, [r7, #24]
20004e52:	ea4f 0343 	mov.w	r3, r3, lsl #1
20004e56:	ebc3 0302 	rsb	r3, r3, r2
20004e5a:	69ba      	ldr	r2, [r7, #24]
20004e5c:	4413      	add	r3, r2
20004e5e:	61bb      	str	r3, [r7, #24]

        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
20004e60:	68fa      	ldr	r2, [r7, #12]
20004e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
20004e66:	429a      	cmp	r2, r3
20004e68:	d900      	bls.n	20004e6c <config_baud_divisors+0xcc>
20004e6a:	be00      	bkpt	0x0000

        if(baud_value <= (uint32_t)UINT16_MAX)
20004e6c:	68fa      	ldr	r2, [r7, #12]
20004e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20004e72:	429a      	cmp	r2, r3
20004e74:	d85b      	bhi.n	20004f2e <config_baud_divisors+0x18e>
        {
            if(baud_value > 1u)
20004e76:	68fb      	ldr	r3, [r7, #12]
20004e78:	2b01      	cmp	r3, #1
20004e7a:	d931      	bls.n	20004ee0 <config_baud_divisors+0x140>
            {
                /*
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20004e7c:	687b      	ldr	r3, [r7, #4]
20004e7e:	681b      	ldr	r3, [r3, #0]
20004e80:	f103 030c 	add.w	r3, r3, #12
20004e84:	4618      	mov	r0, r3
20004e86:	f04f 0107 	mov.w	r1, #7
20004e8a:	f7ff fd83 	bl	20004994 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20004e8e:	687b      	ldr	r3, [r7, #4]
20004e90:	681b      	ldr	r3, [r3, #0]
20004e92:	68fa      	ldr	r2, [r7, #12]
20004e94:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004e98:	b2d2      	uxtb	r2, r2
20004e9a:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20004e9c:	687b      	ldr	r3, [r7, #4]
20004e9e:	681b      	ldr	r3, [r3, #0]
20004ea0:	68fa      	ldr	r2, [r7, #12]
20004ea2:	b2d2      	uxtb	r2, r2
20004ea4:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20004ea6:	687b      	ldr	r3, [r7, #4]
20004ea8:	681b      	ldr	r3, [r3, #0]
20004eaa:	f103 030c 	add.w	r3, r3, #12
20004eae:	4618      	mov	r0, r3
20004eb0:	f04f 0107 	mov.w	r1, #7
20004eb4:	f7ff fd8e 	bl	200049d4 <clear_bit_reg8>

                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20004eb8:	687b      	ldr	r3, [r7, #4]
20004eba:	681b      	ldr	r3, [r3, #0]
20004ebc:	f103 0330 	add.w	r3, r3, #48	; 0x30
20004ec0:	4618      	mov	r0, r3
20004ec2:	f04f 0107 	mov.w	r1, #7
20004ec6:	f7ff fd65 	bl	20004994 <set_bit_reg8>

                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
20004eca:	69bb      	ldr	r3, [r7, #24]
20004ecc:	2bff      	cmp	r3, #255	; 0xff
20004ece:	d900      	bls.n	20004ed2 <config_baud_divisors+0x132>
20004ed0:	be00      	bkpt	0x0000
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
20004ed2:	687b      	ldr	r3, [r7, #4]
20004ed4:	681b      	ldr	r3, [r3, #0]
20004ed6:	69ba      	ldr	r2, [r7, #24]
20004ed8:	b2d2      	uxtb	r2, r2
20004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
20004ede:	e026      	b.n	20004f2e <config_baud_divisors+0x18e>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20004ee0:	687b      	ldr	r3, [r7, #4]
20004ee2:	681b      	ldr	r3, [r3, #0]
20004ee4:	f103 030c 	add.w	r3, r3, #12
20004ee8:	4618      	mov	r0, r3
20004eea:	f04f 0107 	mov.w	r1, #7
20004eee:	f7ff fd51 	bl	20004994 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
20004ef2:	687b      	ldr	r3, [r7, #4]
20004ef4:	681b      	ldr	r3, [r3, #0]
20004ef6:	68fa      	ldr	r2, [r7, #12]
20004ef8:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004efc:	b2d2      	uxtb	r2, r2
20004efe:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20004f00:	687b      	ldr	r3, [r7, #4]
20004f02:	681b      	ldr	r3, [r3, #0]
20004f04:	68fa      	ldr	r2, [r7, #12]
20004f06:	b2d2      	uxtb	r2, r2
20004f08:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20004f0a:	687b      	ldr	r3, [r7, #4]
20004f0c:	681b      	ldr	r3, [r3, #0]
20004f0e:	f103 030c 	add.w	r3, r3, #12
20004f12:	4618      	mov	r0, r3
20004f14:	f04f 0107 	mov.w	r1, #7
20004f18:	f7ff fd5c 	bl	200049d4 <clear_bit_reg8>

                /* Disable Fractional baud rate */
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20004f1c:	687b      	ldr	r3, [r7, #4]
20004f1e:	681b      	ldr	r3, [r3, #0]
20004f20:	f103 0330 	add.w	r3, r3, #48	; 0x30
20004f24:	4618      	mov	r0, r3
20004f26:	f04f 0107 	mov.w	r1, #7
20004f2a:	f7ff fd53 	bl	200049d4 <clear_bit_reg8>
            }
        }
    }
}
20004f2e:	f107 0720 	add.w	r7, r7, #32
20004f32:	46bd      	mov	sp, r7
20004f34:	bd80      	pop	{r7, pc}
20004f36:	bf00      	nop

20004f38 <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20004f38:	b580      	push	{r7, lr}
20004f3a:	b084      	sub	sp, #16
20004f3c:	af00      	add	r7, sp, #0
20004f3e:	60f8      	str	r0, [r7, #12]
20004f40:	60b9      	str	r1, [r7, #8]
20004f42:	4613      	mov	r3, r2
20004f44:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20004f46:	68fa      	ldr	r2, [r7, #12]
20004f48:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f50:	429a      	cmp	r2, r3
20004f52:	d007      	beq.n	20004f64 <global_init+0x2c>
20004f54:	68fa      	ldr	r2, [r7, #12]
20004f56:	f24d 739c 	movw	r3, #55196	; 0xd79c
20004f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f5e:	429a      	cmp	r2, r3
20004f60:	d000      	beq.n	20004f64 <global_init+0x2c>
20004f62:	be00      	bkpt	0x0000

    if(this_uart == &g_mss_uart0)
20004f64:	68fa      	ldr	r2, [r7, #12]
20004f66:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20004f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f6e:	429a      	cmp	r2, r3
20004f70:	d124      	bne.n	20004fbc <global_init+0x84>
    {
        this_uart->hw_reg = UART0;
20004f72:	68fb      	ldr	r3, [r7, #12]
20004f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20004f78:	601a      	str	r2, [r3, #0]
        this_uart->irqn = UART0_IRQn;
20004f7a:	68fb      	ldr	r3, [r7, #12]
20004f7c:	f04f 020a 	mov.w	r2, #10
20004f80:	711a      	strb	r2, [r3, #4]
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
20004f82:	f248 0300 	movw	r3, #32768	; 0x8000
20004f86:	f2c4 0303 	movt	r3, #16387	; 0x4003
20004f8a:	f248 0200 	movw	r2, #32768	; 0x8000
20004f8e:	f2c4 0203 	movt	r2, #16387	; 0x4003
20004f92:	6c92      	ldr	r2, [r2, #72]	; 0x48
20004f94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20004f98:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
20004f9a:	f04f 000a 	mov.w	r0, #10
20004f9e:	f7ff fcdb 	bl	20004958 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
20004fa2:	f248 0300 	movw	r3, #32768	; 0x8000
20004fa6:	f2c4 0303 	movt	r3, #16387	; 0x4003
20004faa:	f248 0200 	movw	r2, #32768	; 0x8000
20004fae:	f2c4 0203 	movt	r2, #16387	; 0x4003
20004fb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
20004fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20004fb8:	649a      	str	r2, [r3, #72]	; 0x48
20004fba:	e025      	b.n	20005008 <global_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20004fbc:	68fa      	ldr	r2, [r7, #12]
20004fbe:	f240 0300 	movw	r3, #0
20004fc2:	f2c4 0301 	movt	r3, #16385	; 0x4001
20004fc6:	6013      	str	r3, [r2, #0]
        this_uart->irqn = UART1_IRQn;
20004fc8:	68fb      	ldr	r3, [r7, #12]
20004fca:	f04f 020b 	mov.w	r2, #11
20004fce:	711a      	strb	r2, [r3, #4]
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
20004fd0:	f248 0300 	movw	r3, #32768	; 0x8000
20004fd4:	f2c4 0303 	movt	r3, #16387	; 0x4003
20004fd8:	f248 0200 	movw	r2, #32768	; 0x8000
20004fdc:	f2c4 0203 	movt	r2, #16387	; 0x4003
20004fe0:	6c92      	ldr	r2, [r2, #72]	; 0x48
20004fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20004fe6:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
20004fe8:	f04f 000b 	mov.w	r0, #11
20004fec:	f7ff fcb4 	bl	20004958 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
20004ff0:	f248 0300 	movw	r3, #32768	; 0x8000
20004ff4:	f2c4 0303 	movt	r3, #16387	; 0x4003
20004ff8:	f248 0200 	movw	r2, #32768	; 0x8000
20004ffc:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005000:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005002:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20005006:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
20005008:	68fb      	ldr	r3, [r7, #12]
2000500a:	681b      	ldr	r3, [r3, #0]
2000500c:	f04f 0200 	mov.w	r2, #0
20005010:	711a      	strb	r2, [r3, #4]

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
20005012:	68fb      	ldr	r3, [r7, #12]
20005014:	681b      	ldr	r3, [r3, #0]
20005016:	f04f 0200 	mov.w	r2, #0
2000501a:	721a      	strb	r2, [r3, #8]
    /* clear receiver FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
2000501c:	68fb      	ldr	r3, [r7, #12]
2000501e:	681b      	ldr	r3, [r3, #0]
20005020:	f103 0308 	add.w	r3, r3, #8
20005024:	4618      	mov	r0, r3
20005026:	f04f 0101 	mov.w	r1, #1
2000502a:	f7ff fcb3 	bl	20004994 <set_bit_reg8>
    /* clear transmitter FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
2000502e:	68fb      	ldr	r3, [r7, #12]
20005030:	681b      	ldr	r3, [r3, #0]
20005032:	f103 0308 	add.w	r3, r3, #8
20005036:	4618      	mov	r0, r3
20005038:	f04f 0102 	mov.w	r1, #2
2000503c:	f7ff fcaa 	bl	20004994 <set_bit_reg8>

    /* set default READY mode : Mode 0*/
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
20005040:	68fb      	ldr	r3, [r7, #12]
20005042:	681b      	ldr	r3, [r3, #0]
20005044:	f103 0308 	add.w	r3, r3, #8
20005048:	4618      	mov	r0, r3
2000504a:	f04f 0100 	mov.w	r1, #0
2000504e:	f7ff fca1 	bl	20004994 <set_bit_reg8>

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
20005052:	68fb      	ldr	r3, [r7, #12]
20005054:	681b      	ldr	r3, [r3, #0]
20005056:	f103 0310 	add.w	r3, r3, #16
2000505a:	4618      	mov	r0, r3
2000505c:	f04f 0104 	mov.w	r1, #4
20005060:	f7ff fcb8 	bl	200049d4 <clear_bit_reg8>
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
20005064:	68fb      	ldr	r3, [r7, #12]
20005066:	681b      	ldr	r3, [r3, #0]
20005068:	f103 0310 	add.w	r3, r3, #16
2000506c:	4618      	mov	r0, r3
2000506e:	f04f 0105 	mov.w	r1, #5
20005072:	f7ff fcaf 	bl	200049d4 <clear_bit_reg8>

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
20005076:	68fb      	ldr	r3, [r7, #12]
20005078:	681b      	ldr	r3, [r3, #0]
2000507a:	f103 0334 	add.w	r3, r3, #52	; 0x34
2000507e:	4618      	mov	r0, r3
20005080:	f04f 0101 	mov.w	r1, #1
20005084:	f7ff fca6 	bl	200049d4 <clear_bit_reg8>
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
20005088:	68fb      	ldr	r3, [r7, #12]
2000508a:	681b      	ldr	r3, [r3, #0]
2000508c:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005090:	4618      	mov	r0, r3
20005092:	f04f 0100 	mov.w	r1, #0
20005096:	f7ff fc9d 	bl	200049d4 <clear_bit_reg8>

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
2000509a:	68fb      	ldr	r3, [r7, #12]
2000509c:	681b      	ldr	r3, [r3, #0]
2000509e:	f103 0338 	add.w	r3, r3, #56	; 0x38
200050a2:	4618      	mov	r0, r3
200050a4:	f04f 0101 	mov.w	r1, #1
200050a8:	f7ff fc94 	bl	200049d4 <clear_bit_reg8>

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG);
200050ac:	68fb      	ldr	r3, [r7, #12]
200050ae:	681b      	ldr	r3, [r3, #0]
200050b0:	f103 0330 	add.w	r3, r3, #48	; 0x30
200050b4:	4618      	mov	r0, r3
200050b6:	f04f 0105 	mov.w	r1, #5
200050ba:	f7ff fc8b 	bl	200049d4 <clear_bit_reg8>

    /* set default RX timeout */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO);
200050be:	68fb      	ldr	r3, [r7, #12]
200050c0:	681b      	ldr	r3, [r3, #0]
200050c2:	f103 0330 	add.w	r3, r3, #48	; 0x30
200050c6:	4618      	mov	r0, r3
200050c8:	f04f 0106 	mov.w	r1, #6
200050cc:	f7ff fc82 	bl	200049d4 <clear_bit_reg8>

    /* disable fractional baud-rate */
    clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
200050d0:	68fb      	ldr	r3, [r7, #12]
200050d2:	681b      	ldr	r3, [r3, #0]
200050d4:	f103 0330 	add.w	r3, r3, #48	; 0x30
200050d8:	4618      	mov	r0, r3
200050da:	f04f 0107 	mov.w	r1, #7
200050de:	f7ff fc79 	bl	200049d4 <clear_bit_reg8>

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
200050e2:	68fb      	ldr	r3, [r7, #12]
200050e4:	681b      	ldr	r3, [r3, #0]
200050e6:	f103 0338 	add.w	r3, r3, #56	; 0x38
200050ea:	4618      	mov	r0, r3
200050ec:	f04f 0103 	mov.w	r1, #3
200050f0:	f7ff fc70 	bl	200049d4 <clear_bit_reg8>

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
200050f4:	68fb      	ldr	r3, [r7, #12]
200050f6:	681b      	ldr	r3, [r3, #0]
200050f8:	f04f 0200 	mov.w	r2, #0
200050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
20005100:	68fb      	ldr	r3, [r7, #12]
20005102:	681b      	ldr	r3, [r3, #0]
20005104:	f04f 0200 	mov.w	r2, #0
20005108:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
2000510c:	68fb      	ldr	r3, [r7, #12]
2000510e:	681b      	ldr	r3, [r3, #0]
20005110:	f04f 0200 	mov.w	r2, #0
20005114:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*
     * Configure baud rate divisors. This uses the frational baud rate divisor
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);
20005118:	68f8      	ldr	r0, [r7, #12]
2000511a:	68b9      	ldr	r1, [r7, #8]
2000511c:	f7ff fe40 	bl	20004da0 <config_baud_divisors>

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20005120:	68fb      	ldr	r3, [r7, #12]
20005122:	681b      	ldr	r3, [r3, #0]
20005124:	79fa      	ldrb	r2, [r7, #7]
20005126:	731a      	strb	r2, [r3, #12]

    /* Instance setup */
    this_uart->baudrate = baud_rate;
20005128:	68fb      	ldr	r3, [r7, #12]
2000512a:	68ba      	ldr	r2, [r7, #8]
2000512c:	609a      	str	r2, [r3, #8]
    this_uart->lineconfig = line_config;
2000512e:	68fb      	ldr	r3, [r7, #12]
20005130:	79fa      	ldrb	r2, [r7, #7]
20005132:	731a      	strb	r2, [r3, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
20005134:	68fb      	ldr	r3, [r7, #12]
20005136:	f04f 0200 	mov.w	r2, #0
2000513a:	615a      	str	r2, [r3, #20]
    this_uart->tx_buffer = (const uint8_t *)0;
2000513c:	68fb      	ldr	r3, [r7, #12]
2000513e:	f04f 0200 	mov.w	r2, #0
20005142:	611a      	str	r2, [r3, #16]
    this_uart->tx_idx = 0u;
20005144:	68fb      	ldr	r3, [r7, #12]
20005146:	f04f 0200 	mov.w	r2, #0
2000514a:	619a      	str	r2, [r3, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
2000514c:	68fb      	ldr	r3, [r7, #12]
2000514e:	f04f 0200 	mov.w	r2, #0
20005152:	621a      	str	r2, [r3, #32]
    this_uart->tx_handler       = NULL_HANDLER;
20005154:	68fb      	ldr	r3, [r7, #12]
20005156:	f04f 0200 	mov.w	r2, #0
2000515a:	625a      	str	r2, [r3, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
2000515c:	68fb      	ldr	r3, [r7, #12]
2000515e:	f04f 0200 	mov.w	r2, #0
20005162:	61da      	str	r2, [r3, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
20005164:	68fb      	ldr	r3, [r7, #12]
20005166:	f04f 0200 	mov.w	r2, #0
2000516a:	629a      	str	r2, [r3, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;
2000516c:	68fb      	ldr	r3, [r7, #12]
2000516e:	f04f 0200 	mov.w	r2, #0
20005172:	62da      	str	r2, [r3, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;
20005174:	68fb      	ldr	r3, [r7, #12]
20005176:	f04f 0200 	mov.w	r2, #0
2000517a:	631a      	str	r2, [r3, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
2000517c:	68fb      	ldr	r3, [r7, #12]
2000517e:	f04f 0200 	mov.w	r2, #0
20005182:	635a      	str	r2, [r3, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;
20005184:	68fb      	ldr	r3, [r7, #12]
20005186:	f04f 0200 	mov.w	r2, #0
2000518a:	639a      	str	r2, [r3, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;
2000518c:	68fb      	ldr	r3, [r7, #12]
2000518e:	f04f 0200 	mov.w	r2, #0
20005192:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
20005194:	68fb      	ldr	r3, [r7, #12]
20005196:	f04f 0200 	mov.w	r2, #0
2000519a:	735a      	strb	r2, [r3, #13]
}
2000519c:	f107 0710 	add.w	r7, r7, #16
200051a0:	46bd      	mov	sp, r7
200051a2:	bd80      	pop	{r7, pc}

200051a4 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
200051a4:	b580      	push	{r7, lr}
200051a6:	b084      	sub	sp, #16
200051a8:	af00      	add	r7, sp, #0
200051aa:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200051ac:	687a      	ldr	r2, [r7, #4]
200051ae:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
200051b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051b6:	429a      	cmp	r2, r3
200051b8:	d007      	beq.n	200051ca <MSS_UART_isr+0x26>
200051ba:	687a      	ldr	r2, [r7, #4]
200051bc:	f24d 739c 	movw	r3, #55196	; 0xd79c
200051c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051c4:	429a      	cmp	r2, r3
200051c6:	d000      	beq.n	200051ca <MSS_UART_isr+0x26>
200051c8:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
200051ca:	687a      	ldr	r2, [r7, #4]
200051cc:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
200051d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051d4:	429a      	cmp	r2, r3
200051d6:	d007      	beq.n	200051e8 <MSS_UART_isr+0x44>
200051d8:	687a      	ldr	r2, [r7, #4]
200051da:	f24d 739c 	movw	r3, #55196	; 0xd79c
200051de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051e2:	429a      	cmp	r2, r3
200051e4:	f040 80ef 	bne.w	200053c6 <MSS_UART_isr+0x222>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
200051e8:	687b      	ldr	r3, [r7, #4]
200051ea:	681b      	ldr	r3, [r3, #0]
200051ec:	7a1b      	ldrb	r3, [r3, #8]
200051ee:	b2db      	uxtb	r3, r3
200051f0:	f003 030f 	and.w	r3, r3, #15
200051f4:	73fb      	strb	r3, [r7, #15]

        switch (iirf)
200051f6:	7bfb      	ldrb	r3, [r7, #15]
200051f8:	2b0c      	cmp	r3, #12
200051fa:	f200 80d7 	bhi.w	200053ac <MSS_UART_isr+0x208>
200051fe:	a201      	add	r2, pc, #4	; (adr r2, 20005204 <MSS_UART_isr+0x60>)
20005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005204:	20005239 	.word	0x20005239
20005208:	200053ad 	.word	0x200053ad
2000520c:	20005257 	.word	0x20005257
20005210:	200052b1 	.word	0x200052b1
20005214:	20005275 	.word	0x20005275
20005218:	200053ad 	.word	0x200053ad
2000521c:	20005293 	.word	0x20005293
20005220:	200053ad 	.word	0x200053ad
20005224:	200053ad 	.word	0x200053ad
20005228:	200053ad 	.word	0x200053ad
2000522c:	200053ad 	.word	0x200053ad
20005230:	200053ad 	.word	0x200053ad
20005234:	20005275 	.word	0x20005275
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
20005238:	687b      	ldr	r3, [r7, #4]
2000523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000523c:	2b00      	cmp	r3, #0
2000523e:	d100      	bne.n	20005242 <MSS_UART_isr+0x9e>
20005240:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->modemsts_handler)
20005242:	687b      	ldr	r3, [r7, #4]
20005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005246:	2b00      	cmp	r3, #0
20005248:	f000 80b2 	beq.w	200053b0 <MSS_UART_isr+0x20c>
                {
                   (*(this_uart->modemsts_handler))(this_uart);
2000524c:	687b      	ldr	r3, [r7, #4]
2000524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005250:	6878      	ldr	r0, [r7, #4]
20005252:	4798      	blx	r3
                }
            }
            break;
20005254:	e0b7      	b.n	200053c6 <MSS_UART_isr+0x222>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
20005256:	687b      	ldr	r3, [r7, #4]
20005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000525a:	2b00      	cmp	r3, #0
2000525c:	d100      	bne.n	20005260 <MSS_UART_isr+0xbc>
2000525e:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->tx_handler)
20005260:	687b      	ldr	r3, [r7, #4]
20005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005264:	2b00      	cmp	r3, #0
20005266:	f000 80a5 	beq.w	200053b4 <MSS_UART_isr+0x210>
                {
                    (*(this_uart->tx_handler))(this_uart);
2000526a:	687b      	ldr	r3, [r7, #4]
2000526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000526e:	6878      	ldr	r0, [r7, #4]
20005270:	4798      	blx	r3
                }
            }
            break;
20005272:	e0a8      	b.n	200053c6 <MSS_UART_isr+0x222>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
20005274:	687b      	ldr	r3, [r7, #4]
20005276:	6a1b      	ldr	r3, [r3, #32]
20005278:	2b00      	cmp	r3, #0
2000527a:	d100      	bne.n	2000527e <MSS_UART_isr+0xda>
2000527c:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->rx_handler)
2000527e:	687b      	ldr	r3, [r7, #4]
20005280:	6a1b      	ldr	r3, [r3, #32]
20005282:	2b00      	cmp	r3, #0
20005284:	f000 8098 	beq.w	200053b8 <MSS_UART_isr+0x214>
                {
                    (*(this_uart->rx_handler))(this_uart);
20005288:	687b      	ldr	r3, [r7, #4]
2000528a:	6a1b      	ldr	r3, [r3, #32]
2000528c:	6878      	ldr	r0, [r7, #4]
2000528e:	4798      	blx	r3
                }
            }
            break;
20005290:	e099      	b.n	200053c6 <MSS_UART_isr+0x222>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
20005292:	687b      	ldr	r3, [r7, #4]
20005294:	69db      	ldr	r3, [r3, #28]
20005296:	2b00      	cmp	r3, #0
20005298:	d100      	bne.n	2000529c <MSS_UART_isr+0xf8>
2000529a:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->linests_handler)
2000529c:	687b      	ldr	r3, [r7, #4]
2000529e:	69db      	ldr	r3, [r3, #28]
200052a0:	2b00      	cmp	r3, #0
200052a2:	f000 808b 	beq.w	200053bc <MSS_UART_isr+0x218>
                {
                   (*(this_uart->linests_handler))(this_uart);
200052a6:	687b      	ldr	r3, [r7, #4]
200052a8:	69db      	ldr	r3, [r3, #28]
200052aa:	6878      	ldr	r0, [r7, #4]
200052ac:	4798      	blx	r3
                }
            }
            break;
200052ae:	e08a      	b.n	200053c6 <MSS_UART_isr+0x222>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
200052b0:	687b      	ldr	r3, [r7, #4]
200052b2:	681b      	ldr	r3, [r3, #0]
200052b4:	f103 0328 	add.w	r3, r3, #40	; 0x28
200052b8:	4618      	mov	r0, r3
200052ba:	f04f 0100 	mov.w	r1, #0
200052be:	f7ff fba9 	bl	20004a14 <read_bit_reg8>
200052c2:	4603      	mov	r3, r0
200052c4:	2b00      	cmp	r3, #0
200052c6:	d00c      	beq.n	200052e2 <MSS_UART_isr+0x13e>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
200052c8:	687b      	ldr	r3, [r7, #4]
200052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200052cc:	2b00      	cmp	r3, #0
200052ce:	d100      	bne.n	200052d2 <MSS_UART_isr+0x12e>
200052d0:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->rto_handler)
200052d2:	687b      	ldr	r3, [r7, #4]
200052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200052d6:	2b00      	cmp	r3, #0
200052d8:	d003      	beq.n	200052e2 <MSS_UART_isr+0x13e>
                    {
                        (*(this_uart->rto_handler))(this_uart);
200052da:	687b      	ldr	r3, [r7, #4]
200052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200052de:	6878      	ldr	r0, [r7, #4]
200052e0:	4798      	blx	r3
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
200052e2:	687b      	ldr	r3, [r7, #4]
200052e4:	681b      	ldr	r3, [r3, #0]
200052e6:	f103 0328 	add.w	r3, r3, #40	; 0x28
200052ea:	4618      	mov	r0, r3
200052ec:	f04f 0101 	mov.w	r1, #1
200052f0:	f7ff fb90 	bl	20004a14 <read_bit_reg8>
200052f4:	4603      	mov	r3, r0
200052f6:	2b00      	cmp	r3, #0
200052f8:	d00c      	beq.n	20005314 <MSS_UART_isr+0x170>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
200052fa:	687b      	ldr	r3, [r7, #4]
200052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200052fe:	2b00      	cmp	r3, #0
20005300:	d100      	bne.n	20005304 <MSS_UART_isr+0x160>
20005302:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->nack_handler)
20005304:	687b      	ldr	r3, [r7, #4]
20005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005308:	2b00      	cmp	r3, #0
2000530a:	d003      	beq.n	20005314 <MSS_UART_isr+0x170>
                    {
                        (*(this_uart->nack_handler))(this_uart);
2000530c:	687b      	ldr	r3, [r7, #4]
2000530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005310:	6878      	ldr	r0, [r7, #4]
20005312:	4798      	blx	r3
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
20005314:	687b      	ldr	r3, [r7, #4]
20005316:	681b      	ldr	r3, [r3, #0]
20005318:	f103 0328 	add.w	r3, r3, #40	; 0x28
2000531c:	4618      	mov	r0, r3
2000531e:	f04f 0102 	mov.w	r1, #2
20005322:	f7ff fb77 	bl	20004a14 <read_bit_reg8>
20005326:	4603      	mov	r3, r0
20005328:	2b00      	cmp	r3, #0
2000532a:	d00c      	beq.n	20005346 <MSS_UART_isr+0x1a2>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
2000532c:	687b      	ldr	r3, [r7, #4]
2000532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005330:	2b00      	cmp	r3, #0
20005332:	d100      	bne.n	20005336 <MSS_UART_isr+0x192>
20005334:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
20005336:	687b      	ldr	r3, [r7, #4]
20005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000533a:	2b00      	cmp	r3, #0
2000533c:	d003      	beq.n	20005346 <MSS_UART_isr+0x1a2>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
2000533e:	687b      	ldr	r3, [r7, #4]
20005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005342:	6878      	ldr	r0, [r7, #4]
20005344:	4798      	blx	r3
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
20005346:	687b      	ldr	r3, [r7, #4]
20005348:	681b      	ldr	r3, [r3, #0]
2000534a:	f103 0328 	add.w	r3, r3, #40	; 0x28
2000534e:	4618      	mov	r0, r3
20005350:	f04f 0103 	mov.w	r1, #3
20005354:	f7ff fb5e 	bl	20004a14 <read_bit_reg8>
20005358:	4603      	mov	r3, r0
2000535a:	2b00      	cmp	r3, #0
2000535c:	d00c      	beq.n	20005378 <MSS_UART_isr+0x1d4>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
2000535e:	687b      	ldr	r3, [r7, #4]
20005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005362:	2b00      	cmp	r3, #0
20005364:	d100      	bne.n	20005368 <MSS_UART_isr+0x1c4>
20005366:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->break_handler)
20005368:	687b      	ldr	r3, [r7, #4]
2000536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000536c:	2b00      	cmp	r3, #0
2000536e:	d003      	beq.n	20005378 <MSS_UART_isr+0x1d4>
                    {
                        (*(this_uart->break_handler))(this_uart);
20005370:	687b      	ldr	r3, [r7, #4]
20005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005374:	6878      	ldr	r0, [r7, #4]
20005376:	4798      	blx	r3
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
20005378:	687b      	ldr	r3, [r7, #4]
2000537a:	681b      	ldr	r3, [r3, #0]
2000537c:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005380:	4618      	mov	r0, r3
20005382:	f04f 0104 	mov.w	r1, #4
20005386:	f7ff fb45 	bl	20004a14 <read_bit_reg8>
2000538a:	4603      	mov	r3, r0
2000538c:	2b00      	cmp	r3, #0
2000538e:	d017      	beq.n	200053c0 <MSS_UART_isr+0x21c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
20005390:	687b      	ldr	r3, [r7, #4]
20005392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005394:	2b00      	cmp	r3, #0
20005396:	d100      	bne.n	2000539a <MSS_UART_isr+0x1f6>
20005398:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->sync_handler)
2000539a:	687b      	ldr	r3, [r7, #4]
2000539c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000539e:	2b00      	cmp	r3, #0
200053a0:	d010      	beq.n	200053c4 <MSS_UART_isr+0x220>
                    {
                        (*(this_uart->sync_handler))(this_uart);
200053a2:	687b      	ldr	r3, [r7, #4]
200053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200053a6:	6878      	ldr	r0, [r7, #4]
200053a8:	4798      	blx	r3
                    }
                }
                break;
200053aa:	e00c      	b.n	200053c6 <MSS_UART_isr+0x222>
            }

            default:
            {
                ASSERT(INVALID_INTERRUPT);
200053ac:	be00      	bkpt	0x0000
200053ae:	e00a      	b.n	200053c6 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->modemsts_handler)
                {
                   (*(this_uart->modemsts_handler))(this_uart);
                }
            }
            break;
200053b0:	bf00      	nop
200053b2:	e008      	b.n	200053c6 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->tx_handler)
                {
                    (*(this_uart->tx_handler))(this_uart);
                }
            }
            break;
200053b4:	bf00      	nop
200053b6:	e006      	b.n	200053c6 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->rx_handler)
                {
                    (*(this_uart->rx_handler))(this_uart);
                }
            }
            break;
200053b8:	bf00      	nop
200053ba:	e004      	b.n	200053c6 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->linests_handler)
                {
                   (*(this_uart->linests_handler))(this_uart);
                }
            }
            break;
200053bc:	bf00      	nop
200053be:	e002      	b.n	200053c6 <MSS_UART_isr+0x222>
                    if(NULL_HANDLER != this_uart->sync_handler)
                    {
                        (*(this_uart->sync_handler))(this_uart);
                    }
                }
                break;
200053c0:	bf00      	nop
200053c2:	e000      	b.n	200053c6 <MSS_UART_isr+0x222>
200053c4:	bf00      	nop
                ASSERT(INVALID_INTERRUPT);
            }
            break;
        }
    }
}
200053c6:	f107 0710 	add.w	r7, r7, #16
200053ca:	46bd      	mov	sp, r7
200053cc:	bd80      	pop	{r7, pc}
200053ce:	bf00      	nop

200053d0 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
200053d0:	b580      	push	{r7, lr}
200053d2:	b086      	sub	sp, #24
200053d4:	af00      	add	r7, sp, #0
200053d6:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200053d8:	687a      	ldr	r2, [r7, #4]
200053da:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
200053de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053e2:	429a      	cmp	r2, r3
200053e4:	d007      	beq.n	200053f6 <default_tx_handler+0x26>
200053e6:	687a      	ldr	r2, [r7, #4]
200053e8:	f24d 739c 	movw	r3, #55196	; 0xd79c
200053ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053f0:	429a      	cmp	r2, r3
200053f2:	d000      	beq.n	200053f6 <default_tx_handler+0x26>
200053f4:	be00      	bkpt	0x0000
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
200053f6:	687b      	ldr	r3, [r7, #4]
200053f8:	691b      	ldr	r3, [r3, #16]
200053fa:	2b00      	cmp	r3, #0
200053fc:	d100      	bne.n	20005400 <default_tx_handler+0x30>
200053fe:	be00      	bkpt	0x0000
    ASSERT(0u < this_uart->tx_buff_size);
20005400:	687b      	ldr	r3, [r7, #4]
20005402:	695b      	ldr	r3, [r3, #20]
20005404:	2b00      	cmp	r3, #0
20005406:	d100      	bne.n	2000540a <default_tx_handler+0x3a>
20005408:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
2000540a:	687a      	ldr	r2, [r7, #4]
2000540c:	f24d 73dc 	movw	r3, #55260	; 0xd7dc
20005410:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005414:	429a      	cmp	r2, r3
20005416:	d006      	beq.n	20005426 <default_tx_handler+0x56>
20005418:	687a      	ldr	r2, [r7, #4]
2000541a:	f24d 739c 	movw	r3, #55196	; 0xd79c
2000541e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005422:	429a      	cmp	r2, r3
20005424:	d155      	bne.n	200054d2 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
20005426:	687b      	ldr	r3, [r7, #4]
20005428:	691b      	ldr	r3, [r3, #16]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
2000542a:	2b00      	cmp	r3, #0
2000542c:	d051      	beq.n	200054d2 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
2000542e:	687b      	ldr	r3, [r7, #4]
20005430:	695b      	ldr	r3, [r3, #20]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005432:	2b00      	cmp	r3, #0
20005434:	d04d      	beq.n	200054d2 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20005436:	687b      	ldr	r3, [r7, #4]
20005438:	681b      	ldr	r3, [r3, #0]
2000543a:	7d1b      	ldrb	r3, [r3, #20]
2000543c:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
2000543e:	687b      	ldr	r3, [r7, #4]
20005440:	7b5a      	ldrb	r2, [r3, #13]
20005442:	7afb      	ldrb	r3, [r7, #11]
20005444:	ea42 0303 	orr.w	r3, r2, r3
20005448:	b2da      	uxtb	r2, r3
2000544a:	687b      	ldr	r3, [r7, #4]
2000544c:	735a      	strb	r2, [r3, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
2000544e:	7afb      	ldrb	r3, [r7, #11]
20005450:	f003 0320 	and.w	r3, r3, #32
20005454:	2b00      	cmp	r3, #0
20005456:	d029      	beq.n	200054ac <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
20005458:	f04f 0310 	mov.w	r3, #16
2000545c:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
2000545e:	687b      	ldr	r3, [r7, #4]
20005460:	695a      	ldr	r2, [r3, #20]
20005462:	687b      	ldr	r3, [r7, #4]
20005464:	699b      	ldr	r3, [r3, #24]
20005466:	ebc3 0302 	rsb	r3, r3, r2
2000546a:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
2000546c:	697b      	ldr	r3, [r7, #20]
2000546e:	2b0f      	cmp	r3, #15
20005470:	d801      	bhi.n	20005476 <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
20005472:	697b      	ldr	r3, [r7, #20]
20005474:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20005476:	f04f 0300 	mov.w	r3, #0
2000547a:	60fb      	str	r3, [r7, #12]
2000547c:	e012      	b.n	200054a4 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
2000547e:	687b      	ldr	r3, [r7, #4]
20005480:	681b      	ldr	r3, [r3, #0]
20005482:	687a      	ldr	r2, [r7, #4]
20005484:	6911      	ldr	r1, [r2, #16]
20005486:	687a      	ldr	r2, [r7, #4]
20005488:	6992      	ldr	r2, [r2, #24]
2000548a:	440a      	add	r2, r1
2000548c:	7812      	ldrb	r2, [r2, #0]
2000548e:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
20005490:	687b      	ldr	r3, [r7, #4]
20005492:	699b      	ldr	r3, [r3, #24]
20005494:	f103 0201 	add.w	r2, r3, #1
20005498:	687b      	ldr	r3, [r7, #4]
2000549a:	619a      	str	r2, [r3, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
2000549c:	68fb      	ldr	r3, [r7, #12]
2000549e:	f103 0301 	add.w	r3, r3, #1
200054a2:	60fb      	str	r3, [r7, #12]
200054a4:	68fa      	ldr	r2, [r7, #12]
200054a6:	693b      	ldr	r3, [r7, #16]
200054a8:	429a      	cmp	r2, r3
200054aa:	d3e8      	bcc.n	2000547e <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
200054ac:	687b      	ldr	r3, [r7, #4]
200054ae:	699a      	ldr	r2, [r3, #24]
200054b0:	687b      	ldr	r3, [r7, #4]
200054b2:	695b      	ldr	r3, [r3, #20]
200054b4:	429a      	cmp	r2, r3
200054b6:	d10c      	bne.n	200054d2 <default_tx_handler+0x102>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
200054b8:	687b      	ldr	r3, [r7, #4]
200054ba:	f04f 0200 	mov.w	r2, #0
200054be:	615a      	str	r2, [r3, #20]
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
200054c0:	687b      	ldr	r3, [r7, #4]
200054c2:	681b      	ldr	r3, [r3, #0]
200054c4:	f103 0304 	add.w	r3, r3, #4
200054c8:	4618      	mov	r0, r3
200054ca:	f04f 0101 	mov.w	r1, #1
200054ce:	f7ff fa81 	bl	200049d4 <clear_bit_reg8>
        }
    }
}
200054d2:	f107 0718 	add.w	r7, r7, #24
200054d6:	46bd      	mov	sp, r7
200054d8:	bd80      	pop	{r7, pc}
200054da:	bf00      	nop

200054dc <I2C_init>:
    i2c_instance_t * this_i2c,
    addr_t base_address,
    uint8_t ser_address,
    i2c_clock_divider_t ser_clock_speed
)
{
200054dc:	b580      	push	{r7, lr}
200054de:	b086      	sub	sp, #24
200054e0:	af00      	add	r7, sp, #0
200054e2:	60f8      	str	r0, [r7, #12]
200054e4:	60b9      	str	r1, [r7, #8]
200054e6:	71fa      	strb	r2, [r7, #7]
200054e8:	71bb      	strb	r3, [r7, #6]
    psr_t saved_psr;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
200054ea:	79bb      	ldrb	r3, [r7, #6]
200054ec:	617b      	str	r3, [r7, #20]
    
    /*
     * We need to disable ints while doing this as there is no guarantee we
     * have not been called already and the ISR is active.
     */
    saved_psr = HAL_disable_interrupts();
200054ee:	f001 f9e9 	bl	200068c4 <HAL_disable_interrupts>
200054f2:	4603      	mov	r3, r0
200054f4:	613b      	str	r3, [r7, #16]
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    memset(this_i2c, 0, sizeof(i2c_instance_t));
200054f6:	68f8      	ldr	r0, [r7, #12]
200054f8:	f04f 0100 	mov.w	r1, #0
200054fc:	f04f 026c 	mov.w	r2, #108	; 0x6c
20005500:	f001 fb20 	bl	20006b44 <memset>
    
    /*
     * Set base address of I2C hardware used by this instance.
     */
    this_i2c->base_address = base_address;
20005504:	68fb      	ldr	r3, [r7, #12]
20005506:	68ba      	ldr	r2, [r7, #8]
20005508:	601a      	str	r2, [r3, #0]

    /*
     * Update Serial address of the device
     */
    this_i2c->ser_address = ((uint_fast8_t)ser_address << 1u);
2000550a:	79fb      	ldrb	r3, [r7, #7]
2000550c:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005510:	68fb      	ldr	r3, [r7, #12]
20005512:	605a      	str	r2, [r3, #4]
    
    /*
     * Configure hardware.
     */
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x00); /* Reset I2C hardware. */
20005514:	68fb      	ldr	r3, [r7, #12]
20005516:	681b      	ldr	r3, [r3, #0]
20005518:	4618      	mov	r0, r3
2000551a:	f04f 0106 	mov.w	r1, #6
2000551e:	f04f 0240 	mov.w	r2, #64	; 0x40
20005522:	f04f 0300 	mov.w	r3, #0
20005526:	f001 fa08 	bl	2000693a <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x01); /* set enable bit */
2000552a:	68fb      	ldr	r3, [r7, #12]
2000552c:	681b      	ldr	r3, [r3, #0]
2000552e:	4618      	mov	r0, r3
20005530:	f04f 0106 	mov.w	r1, #6
20005534:	f04f 0240 	mov.w	r2, #64	; 0x40
20005538:	f04f 0301 	mov.w	r3, #1
2000553c:	f001 f9fd 	bl	2000693a <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR2, ( (clock_speed >> 2) & 0x01) );
20005540:	68fb      	ldr	r3, [r7, #12]
20005542:	681a      	ldr	r2, [r3, #0]
20005544:	697b      	ldr	r3, [r7, #20]
20005546:	ea4f 0393 	mov.w	r3, r3, lsr #2
2000554a:	f003 0301 	and.w	r3, r3, #1
2000554e:	4610      	mov	r0, r2
20005550:	f04f 0107 	mov.w	r1, #7
20005554:	f04f 0280 	mov.w	r2, #128	; 0x80
20005558:	f001 f9ef 	bl	2000693a <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR1, ( (clock_speed >> 1) & 0x01) );
2000555c:	68fb      	ldr	r3, [r7, #12]
2000555e:	681a      	ldr	r2, [r3, #0]
20005560:	697b      	ldr	r3, [r7, #20]
20005562:	ea4f 0353 	mov.w	r3, r3, lsr #1
20005566:	f003 0301 	and.w	r3, r3, #1
2000556a:	4610      	mov	r0, r2
2000556c:	f04f 0101 	mov.w	r1, #1
20005570:	f04f 0202 	mov.w	r2, #2
20005574:	f001 f9e1 	bl	2000693a <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR0, ( clock_speed & 0x01) );
20005578:	68fb      	ldr	r3, [r7, #12]
2000557a:	681a      	ldr	r2, [r3, #0]
2000557c:	697b      	ldr	r3, [r7, #20]
2000557e:	f003 0301 	and.w	r3, r3, #1
20005582:	4610      	mov	r0, r2
20005584:	f04f 0100 	mov.w	r1, #0
20005588:	f04f 0201 	mov.w	r2, #1
2000558c:	f001 f9d5 	bl	2000693a <HW_set_8bit_reg_field>

    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS, this_i2c->ser_address);
20005590:	68fb      	ldr	r3, [r7, #12]
20005592:	681b      	ldr	r3, [r3, #0]
20005594:	f103 020c 	add.w	r2, r3, #12
20005598:	68fb      	ldr	r3, [r7, #12]
2000559a:	685b      	ldr	r3, [r3, #4]
2000559c:	4610      	mov	r0, r2
2000559e:	4619      	mov	r1, r3
200055a0:	f001 f9c7 	bl	20006932 <HW_set_8bit_reg>
    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS1, this_i2c->ser_address);
200055a4:	68fb      	ldr	r3, [r7, #12]
200055a6:	681b      	ldr	r3, [r3, #0]
200055a8:	f103 021c 	add.w	r2, r3, #28
200055ac:	68fb      	ldr	r3, [r7, #12]
200055ae:	685b      	ldr	r3, [r3, #4]
200055b0:	4610      	mov	r0, r2
200055b2:	4619      	mov	r1, r3
200055b4:	f001 f9bd 	bl	20006932 <HW_set_8bit_reg>
    
    /*
     * Finally safe to enable interrupts.
     */
    HAL_restore_interrupts( saved_psr );
200055b8:	6938      	ldr	r0, [r7, #16]
200055ba:	f001 f987 	bl	200068cc <HAL_restore_interrupts>
}
200055be:	f107 0718 	add.w	r7, r7, #24
200055c2:	46bd      	mov	sp, r7
200055c4:	bd80      	pop	{r7, pc}
200055c6:	bf00      	nop

200055c8 <I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
200055c8:	b580      	push	{r7, lr}
200055ca:	b086      	sub	sp, #24
200055cc:	af00      	add	r7, sp, #0
200055ce:	60f8      	str	r0, [r7, #12]
200055d0:	607a      	str	r2, [r7, #4]
200055d2:	460a      	mov	r2, r1
200055d4:	72fa      	strb	r2, [r7, #11]
200055d6:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
200055d8:	f001 f974 	bl	200068c4 <HAL_disable_interrupts>
200055dc:	4603      	mov	r3, r0
200055de:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
200055e0:	68fb      	ldr	r3, [r7, #12]
200055e2:	7b1b      	ldrb	r3, [r3, #12]
200055e4:	2b00      	cmp	r3, #0
200055e6:	d103      	bne.n	200055f0 <I2C_write+0x28>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
200055e8:	68fb      	ldr	r3, [r7, #12]
200055ea:	f04f 0201 	mov.w	r2, #1
200055ee:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
200055f0:	68fb      	ldr	r3, [r7, #12]
200055f2:	f04f 0201 	mov.w	r2, #1
200055f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200055fa:	7afb      	ldrb	r3, [r7, #11]
200055fc:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005600:	68fb      	ldr	r3, [r7, #12]
20005602:	609a      	str	r2, [r3, #8]
    this_i2c->dir = WRITE_DIR;
20005604:	68fb      	ldr	r3, [r7, #12]
20005606:	f04f 0200 	mov.w	r2, #0
2000560a:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_buffer = write_buffer;
2000560c:	68fb      	ldr	r3, [r7, #12]
2000560e:	687a      	ldr	r2, [r7, #4]
20005610:	619a      	str	r2, [r3, #24]
    this_i2c->master_tx_size = write_size;
20005612:	887a      	ldrh	r2, [r7, #2]
20005614:	68fb      	ldr	r3, [r7, #12]
20005616:	61da      	str	r2, [r3, #28]
    this_i2c->master_tx_idx = 0u;
20005618:	68fb      	ldr	r3, [r7, #12]
2000561a:	f04f 0200 	mov.w	r2, #0
2000561e:	621a      	str	r2, [r3, #32]

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
20005620:	68fb      	ldr	r3, [r7, #12]
20005622:	f04f 0201 	mov.w	r2, #1
20005626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    this_i2c->options = options;
2000562a:	68fb      	ldr	r3, [r7, #12]
2000562c:	f897 2020 	ldrb.w	r2, [r7, #32]
20005630:	751a      	strb	r2, [r3, #20]

    if(I2C_IN_PROGRESS == this_i2c->slave_status)
20005632:	68fb      	ldr	r3, [r7, #12]
20005634:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005638:	b2db      	uxtb	r3, r3
2000563a:	2b01      	cmp	r3, #1
2000563c:	d105      	bne.n	2000564a <I2C_write+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
2000563e:	68fb      	ldr	r3, [r7, #12]
20005640:	f04f 0201 	mov.w	r2, #1
20005644:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005648:	e00a      	b.n	20005660 <I2C_write+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
2000564a:	68fb      	ldr	r3, [r7, #12]
2000564c:	681b      	ldr	r3, [r3, #0]
2000564e:	4618      	mov	r0, r3
20005650:	f04f 0105 	mov.w	r1, #5
20005654:	f04f 0220 	mov.w	r2, #32
20005658:	f04f 0301 	mov.w	r3, #1
2000565c:	f001 f96d 	bl	2000693a <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
20005660:	68fb      	ldr	r3, [r7, #12]
20005662:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005666:	2b01      	cmp	r3, #1
20005668:	d10a      	bne.n	20005680 <I2C_write+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
2000566a:	68fb      	ldr	r3, [r7, #12]
2000566c:	681b      	ldr	r3, [r3, #0]
2000566e:	4618      	mov	r0, r3
20005670:	f04f 0103 	mov.w	r1, #3
20005674:	f04f 0208 	mov.w	r2, #8
20005678:	f04f 0300 	mov.w	r3, #0
2000567c:	f001 f95d 	bl	2000693a <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20005680:	68fb      	ldr	r3, [r7, #12]
20005682:	681b      	ldr	r3, [r3, #0]
20005684:	f103 0304 	add.w	r3, r3, #4
20005688:	4618      	mov	r0, r3
2000568a:	f001 f954 	bl	20006936 <HW_get_8bit_reg>
2000568e:	4603      	mov	r3, r0
20005690:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20005692:	7cfb      	ldrb	r3, [r7, #19]
20005694:	b2db      	uxtb	r3, r3
20005696:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
20005698:	68f8      	ldr	r0, [r7, #12]
2000569a:	f000 fec9 	bl	20006430 <I2C_enable_irq>

    HAL_restore_interrupts( saved_psr );
2000569e:	6978      	ldr	r0, [r7, #20]
200056a0:	f001 f914 	bl	200068cc <HAL_restore_interrupts>
}
200056a4:	f107 0718 	add.w	r7, r7, #24
200056a8:	46bd      	mov	sp, r7
200056aa:	bd80      	pop	{r7, pc}

200056ac <I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
200056ac:	b580      	push	{r7, lr}
200056ae:	b086      	sub	sp, #24
200056b0:	af00      	add	r7, sp, #0
200056b2:	60f8      	str	r0, [r7, #12]
200056b4:	607a      	str	r2, [r7, #4]
200056b6:	460a      	mov	r2, r1
200056b8:	72fa      	strb	r2, [r7, #11]
200056ba:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
200056bc:	f001 f902 	bl	200068c4 <HAL_disable_interrupts>
200056c0:	4603      	mov	r3, r0
200056c2:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
200056c4:	68fb      	ldr	r3, [r7, #12]
200056c6:	7b1b      	ldrb	r3, [r3, #12]
200056c8:	2b00      	cmp	r3, #0
200056ca:	d103      	bne.n	200056d4 <I2C_read+0x28>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
200056cc:	68fb      	ldr	r3, [r7, #12]
200056ce:	f04f 0202 	mov.w	r2, #2
200056d2:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
200056d4:	68fb      	ldr	r3, [r7, #12]
200056d6:	f04f 0202 	mov.w	r2, #2
200056da:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200056de:	7afb      	ldrb	r3, [r7, #11]
200056e0:	ea4f 0243 	mov.w	r2, r3, lsl #1
200056e4:	68fb      	ldr	r3, [r7, #12]
200056e6:	609a      	str	r2, [r3, #8]

    this_i2c->dir = READ_DIR;
200056e8:	68fb      	ldr	r3, [r7, #12]
200056ea:	f04f 0201 	mov.w	r2, #1
200056ee:	625a      	str	r2, [r3, #36]	; 0x24

    this_i2c->master_rx_buffer = read_buffer;
200056f0:	68fb      	ldr	r3, [r7, #12]
200056f2:	687a      	ldr	r2, [r7, #4]
200056f4:	629a      	str	r2, [r3, #40]	; 0x28
    this_i2c->master_rx_size = read_size;
200056f6:	887a      	ldrh	r2, [r7, #2]
200056f8:	68fb      	ldr	r3, [r7, #12]
200056fa:	62da      	str	r2, [r3, #44]	; 0x2c
    this_i2c->master_rx_idx = 0u;
200056fc:	68fb      	ldr	r3, [r7, #12]
200056fe:	f04f 0200 	mov.w	r2, #0
20005702:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
20005704:	68fb      	ldr	r3, [r7, #12]
20005706:	f04f 0201 	mov.w	r2, #1
2000570a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    this_i2c->options = options;
2000570e:	68fb      	ldr	r3, [r7, #12]
20005710:	f897 2020 	ldrb.w	r2, [r7, #32]
20005714:	751a      	strb	r2, [r3, #20]
    
    if(I2C_IN_PROGRESS == this_i2c->slave_status)
20005716:	68fb      	ldr	r3, [r7, #12]
20005718:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
2000571c:	b2db      	uxtb	r3, r3
2000571e:	2b01      	cmp	r3, #1
20005720:	d105      	bne.n	2000572e <I2C_read+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
20005722:	68fb      	ldr	r3, [r7, #12]
20005724:	f04f 0201 	mov.w	r2, #1
20005728:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
2000572c:	e00a      	b.n	20005744 <I2C_read+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
2000572e:	68fb      	ldr	r3, [r7, #12]
20005730:	681b      	ldr	r3, [r3, #0]
20005732:	4618      	mov	r0, r3
20005734:	f04f 0105 	mov.w	r1, #5
20005738:	f04f 0220 	mov.w	r2, #32
2000573c:	f04f 0301 	mov.w	r3, #1
20005740:	f001 f8fb 	bl	2000693a <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
20005744:	68fb      	ldr	r3, [r7, #12]
20005746:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
2000574a:	2b01      	cmp	r3, #1
2000574c:	d10a      	bne.n	20005764 <I2C_read+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
2000574e:	68fb      	ldr	r3, [r7, #12]
20005750:	681b      	ldr	r3, [r3, #0]
20005752:	4618      	mov	r0, r3
20005754:	f04f 0103 	mov.w	r1, #3
20005758:	f04f 0208 	mov.w	r2, #8
2000575c:	f04f 0300 	mov.w	r3, #0
20005760:	f001 f8eb 	bl	2000693a <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20005764:	68fb      	ldr	r3, [r7, #12]
20005766:	681b      	ldr	r3, [r3, #0]
20005768:	f103 0304 	add.w	r3, r3, #4
2000576c:	4618      	mov	r0, r3
2000576e:	f001 f8e2 	bl	20006936 <HW_get_8bit_reg>
20005772:	4603      	mov	r3, r0
20005774:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20005776:	7cfb      	ldrb	r3, [r7, #19]
20005778:	b2db      	uxtb	r3, r3
2000577a:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
2000577c:	68f8      	ldr	r0, [r7, #12]
2000577e:	f000 fe57 	bl	20006430 <I2C_enable_irq>
    HAL_restore_interrupts( saved_psr );
20005782:	6978      	ldr	r0, [r7, #20]
20005784:	f001 f8a2 	bl	200068cc <HAL_restore_interrupts>
}
20005788:	f107 0718 	add.w	r7, r7, #24
2000578c:	46bd      	mov	sp, r7
2000578e:	bd80      	pop	{r7, pc}

20005790 <I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20005790:	b580      	push	{r7, lr}
20005792:	b086      	sub	sp, #24
20005794:	af00      	add	r7, sp, #0
20005796:	60f8      	str	r0, [r7, #12]
20005798:	607a      	str	r2, [r7, #4]
2000579a:	460a      	mov	r2, r1
2000579c:	72fa      	strb	r2, [r7, #11]
2000579e:	807b      	strh	r3, [r7, #2]
    HAL_ASSERT(offset_size > 0u);
200057a0:	887b      	ldrh	r3, [r7, #2]
200057a2:	2b00      	cmp	r3, #0
200057a4:	d100      	bne.n	200057a8 <I2C_write_read+0x18>
200057a6:	be00      	bkpt	0x0000
    HAL_ASSERT(addr_offset != (uint8_t *)0);
200057a8:	687b      	ldr	r3, [r7, #4]
200057aa:	2b00      	cmp	r3, #0
200057ac:	d100      	bne.n	200057b0 <I2C_write_read+0x20>
200057ae:	be00      	bkpt	0x0000
    HAL_ASSERT(read_size > 0u);
200057b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
200057b2:	2b00      	cmp	r3, #0
200057b4:	d100      	bne.n	200057b8 <I2C_write_read+0x28>
200057b6:	be00      	bkpt	0x0000
    HAL_ASSERT(read_buffer != (uint8_t *)0);
200057b8:	6a3b      	ldr	r3, [r7, #32]
200057ba:	2b00      	cmp	r3, #0
200057bc:	d100      	bne.n	200057c0 <I2C_write_read+0x30>
200057be:	be00      	bkpt	0x0000
    
    this_i2c->master_status = I2C_FAILED;
200057c0:	68fb      	ldr	r3, [r7, #12]
200057c2:	f04f 0202 	mov.w	r2, #2
200057c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if((read_size > 0u) && (offset_size > 0u))
200057ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
200057cc:	2b00      	cmp	r3, #0
200057ce:	d072      	beq.n	200058b6 <I2C_write_read+0x126>
200057d0:	887b      	ldrh	r3, [r7, #2]
200057d2:	2b00      	cmp	r3, #0
200057d4:	d06f      	beq.n	200058b6 <I2C_write_read+0x126>
    {
        psr_t saved_psr;
        volatile uint8_t stat_ctrl;

        saved_psr = HAL_disable_interrupts();
200057d6:	f001 f875 	bl	200068c4 <HAL_disable_interrupts>
200057da:	4603      	mov	r3, r0
200057dc:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
200057de:	68fb      	ldr	r3, [r7, #12]
200057e0:	7b1b      	ldrb	r3, [r3, #12]
200057e2:	2b00      	cmp	r3, #0
200057e4:	d103      	bne.n	200057ee <I2C_write_read+0x5e>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
200057e6:	68fb      	ldr	r3, [r7, #12]
200057e8:	f04f 0203 	mov.w	r2, #3
200057ec:	731a      	strb	r2, [r3, #12]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
200057ee:	68fb      	ldr	r3, [r7, #12]
200057f0:	f04f 0203 	mov.w	r2, #3
200057f4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200057f8:	7afb      	ldrb	r3, [r7, #11]
200057fa:	ea4f 0243 	mov.w	r2, r3, lsl #1
200057fe:	68fb      	ldr	r3, [r7, #12]
20005800:	609a      	str	r2, [r3, #8]

        this_i2c->dir = WRITE_DIR;
20005802:	68fb      	ldr	r3, [r7, #12]
20005804:	f04f 0200 	mov.w	r2, #0
20005808:	625a      	str	r2, [r3, #36]	; 0x24

        this_i2c->master_tx_buffer = addr_offset;
2000580a:	68fb      	ldr	r3, [r7, #12]
2000580c:	687a      	ldr	r2, [r7, #4]
2000580e:	619a      	str	r2, [r3, #24]
        this_i2c->master_tx_size = offset_size;
20005810:	887a      	ldrh	r2, [r7, #2]
20005812:	68fb      	ldr	r3, [r7, #12]
20005814:	61da      	str	r2, [r3, #28]
        this_i2c->master_tx_idx = 0u;
20005816:	68fb      	ldr	r3, [r7, #12]
20005818:	f04f 0200 	mov.w	r2, #0
2000581c:	621a      	str	r2, [r3, #32]

        this_i2c->master_rx_buffer = read_buffer;
2000581e:	68fb      	ldr	r3, [r7, #12]
20005820:	6a3a      	ldr	r2, [r7, #32]
20005822:	629a      	str	r2, [r3, #40]	; 0x28
        this_i2c->master_rx_size = read_size;
20005824:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20005826:	68fb      	ldr	r3, [r7, #12]
20005828:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_rx_idx = 0u;
2000582a:	68fb      	ldr	r3, [r7, #12]
2000582c:	f04f 0200 	mov.w	r2, #0
20005830:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Set I2C status in progress */
        this_i2c->master_status = I2C_IN_PROGRESS;
20005832:	68fb      	ldr	r3, [r7, #12]
20005834:	f04f 0201 	mov.w	r2, #1
20005838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        this_i2c->options = options;
2000583c:	68fb      	ldr	r3, [r7, #12]
2000583e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
20005842:	751a      	strb	r2, [r3, #20]
        
        if(I2C_IN_PROGRESS == this_i2c->slave_status)
20005844:	68fb      	ldr	r3, [r7, #12]
20005846:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
2000584a:	b2db      	uxtb	r3, r3
2000584c:	2b01      	cmp	r3, #1
2000584e:	d105      	bne.n	2000585c <I2C_write_read+0xcc>
        {
            this_i2c->is_transaction_pending = 1u;
20005850:	68fb      	ldr	r3, [r7, #12]
20005852:	f04f 0201 	mov.w	r2, #1
20005856:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
2000585a:	e00a      	b.n	20005872 <I2C_write_read+0xe2>
        }
        else
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
2000585c:	68fb      	ldr	r3, [r7, #12]
2000585e:	681b      	ldr	r3, [r3, #0]
20005860:	4618      	mov	r0, r3
20005862:	f04f 0105 	mov.w	r1, #5
20005866:	f04f 0220 	mov.w	r2, #32
2000586a:	f04f 0301 	mov.w	r3, #1
2000586e:	f001 f864 	bl	2000693a <HW_set_8bit_reg_field>
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( I2C_HOLD_BUS == this_i2c->bus_status )
20005872:	68fb      	ldr	r3, [r7, #12]
20005874:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005878:	2b01      	cmp	r3, #1
2000587a:	d10a      	bne.n	20005892 <I2C_write_read+0x102>
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
2000587c:	68fb      	ldr	r3, [r7, #12]
2000587e:	681b      	ldr	r3, [r3, #0]
20005880:	4618      	mov	r0, r3
20005882:	f04f 0103 	mov.w	r1, #3
20005886:	f04f 0208 	mov.w	r2, #8
2000588a:	f04f 0300 	mov.w	r3, #0
2000588e:	f001 f854 	bl	2000693a <HW_set_8bit_reg_field>
        }

        stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20005892:	68fb      	ldr	r3, [r7, #12]
20005894:	681b      	ldr	r3, [r3, #0]
20005896:	f103 0304 	add.w	r3, r3, #4
2000589a:	4618      	mov	r0, r3
2000589c:	f001 f84b 	bl	20006936 <HW_get_8bit_reg>
200058a0:	4603      	mov	r3, r0
200058a2:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
200058a4:	7cfb      	ldrb	r3, [r7, #19]
200058a6:	b2db      	uxtb	r3, r3
200058a8:	74fb      	strb	r3, [r7, #19]
            
        /* Enable the interrupt. ( Re-enable) */
        I2C_enable_irq( this_i2c );
200058aa:	68f8      	ldr	r0, [r7, #12]
200058ac:	f000 fdc0 	bl	20006430 <I2C_enable_irq>

        HAL_restore_interrupts( saved_psr );
200058b0:	6978      	ldr	r0, [r7, #20]
200058b2:	f001 f80b 	bl	200068cc <HAL_restore_interrupts>
    }
}
200058b6:	f107 0718 	add.w	r7, r7, #24
200058ba:	46bd      	mov	sp, r7
200058bc:	bd80      	pop	{r7, pc}
200058be:	bf00      	nop

200058c0 <I2C_wait_complete>:
i2c_status_t I2C_wait_complete
(
    i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
200058c0:	b580      	push	{r7, lr}
200058c2:	b084      	sub	sp, #16
200058c4:	af00      	add	r7, sp, #0
200058c6:	6078      	str	r0, [r7, #4]
200058c8:	6039      	str	r1, [r7, #0]
     * Because we have no idea of what CPU we are supposed to be running on
     * we need to guard this write to the timeout value to avoid ISR/user code
     * interaction issues. Checking the status below should be fine as only a
     * single byte should change in that.
     */
    saved_psr = HAL_disable_interrupts();
200058ca:	f000 fffb 	bl	200068c4 <HAL_disable_interrupts>
200058ce:	4603      	mov	r3, r0
200058d0:	60fb      	str	r3, [r7, #12]
    this_i2c->master_timeout_ms = timeout_ms;
200058d2:	687b      	ldr	r3, [r7, #4]
200058d4:	683a      	ldr	r2, [r7, #0]
200058d6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_restore_interrupts( saved_psr );
200058d8:	68f8      	ldr	r0, [r7, #12]
200058da:	f000 fff7 	bl	200068cc <HAL_restore_interrupts>

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
200058de:	687b      	ldr	r3, [r7, #4]
200058e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200058e4:	72fb      	strb	r3, [r7, #11]
    } while(I2C_IN_PROGRESS == i2c_status);
200058e6:	7afb      	ldrb	r3, [r7, #11]
200058e8:	2b01      	cmp	r3, #1
200058ea:	d0f8      	beq.n	200058de <I2C_wait_complete+0x1e>
    return i2c_status;
200058ec:	7afb      	ldrb	r3, [r7, #11]
}
200058ee:	4618      	mov	r0, r3
200058f0:	f107 0710 	add.w	r7, r7, #16
200058f4:	46bd      	mov	sp, r7
200058f6:	bd80      	pop	{r7, pc}

200058f8 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    i2c_instance_t * this_i2c
)
{
200058f8:	b580      	push	{r7, lr}
200058fa:	b082      	sub	sp, #8
200058fc:	af00      	add	r7, sp, #0
200058fe:	6078      	str	r0, [r7, #4]
    /*
     * This function is only called from within the ISR and so does not need
     * guarding on the register access.
     */
    if( 0 != this_i2c->is_slave_enabled )
20005900:	687b      	ldr	r3, [r7, #4]
20005902:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
20005906:	2b00      	cmp	r3, #0
20005908:	d00a      	beq.n	20005920 <enable_slave_if_required+0x28>
    {
        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
2000590a:	687b      	ldr	r3, [r7, #4]
2000590c:	681b      	ldr	r3, [r3, #0]
2000590e:	4618      	mov	r0, r3
20005910:	f04f 0102 	mov.w	r1, #2
20005914:	f04f 0204 	mov.w	r2, #4
20005918:	f04f 0301 	mov.w	r3, #1
2000591c:	f001 f80d 	bl	2000693a <HW_set_8bit_reg_field>
    }
}
20005920:	f107 0708 	add.w	r7, r7, #8
20005924:	46bd      	mov	sp, r7
20005926:	bd80      	pop	{r7, pc}

20005928 <I2C_isr>:
 */
void I2C_isr
(
    i2c_instance_t * this_i2c
)
{
20005928:	b5b0      	push	{r4, r5, r7, lr}
2000592a:	b084      	sub	sp, #16
2000592c:	af00      	add	r7, sp, #0
2000592e:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
20005930:	f04f 0301 	mov.w	r3, #1
20005934:	73bb      	strb	r3, [r7, #14]

    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20005936:	687b      	ldr	r3, [r7, #4]
20005938:	681b      	ldr	r3, [r3, #0]
2000593a:	f103 0304 	add.w	r3, r3, #4
2000593e:	4618      	mov	r0, r3
20005940:	f000 fff9 	bl	20006936 <HW_get_8bit_reg>
20005944:	4603      	mov	r3, r0
20005946:	72fb      	strb	r3, [r7, #11]
    
    switch( status )
20005948:	7afb      	ldrb	r3, [r7, #11]
2000594a:	b2db      	uxtb	r3, r3
2000594c:	f1a3 0308 	sub.w	r3, r3, #8
20005950:	2bd8      	cmp	r3, #216	; 0xd8
20005952:	f200 84e3 	bhi.w	2000631c <I2C_isr+0x9f4>
20005956:	a201      	add	r2, pc, #4	; (adr r2, 2000595c <I2C_isr+0x34>)
20005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000595c:	20005cc1 	.word	0x20005cc1
20005960:	2000631d 	.word	0x2000631d
20005964:	2000631d 	.word	0x2000631d
20005968:	2000631d 	.word	0x2000631d
2000596c:	2000631d 	.word	0x2000631d
20005970:	2000631d 	.word	0x2000631d
20005974:	2000631d 	.word	0x2000631d
20005978:	2000631d 	.word	0x2000631d
2000597c:	20005cc1 	.word	0x20005cc1
20005980:	2000631d 	.word	0x2000631d
20005984:	2000631d 	.word	0x2000631d
20005988:	2000631d 	.word	0x2000631d
2000598c:	2000631d 	.word	0x2000631d
20005990:	2000631d 	.word	0x2000631d
20005994:	2000631d 	.word	0x2000631d
20005998:	2000631d 	.word	0x2000631d
2000599c:	20005d97 	.word	0x20005d97
200059a0:	2000631d 	.word	0x2000631d
200059a4:	2000631d 	.word	0x2000631d
200059a8:	2000631d 	.word	0x2000631d
200059ac:	2000631d 	.word	0x2000631d
200059b0:	2000631d 	.word	0x2000631d
200059b4:	2000631d 	.word	0x2000631d
200059b8:	2000631d 	.word	0x2000631d
200059bc:	20005d67 	.word	0x20005d67
200059c0:	2000631d 	.word	0x2000631d
200059c4:	2000631d 	.word	0x2000631d
200059c8:	2000631d 	.word	0x2000631d
200059cc:	2000631d 	.word	0x2000631d
200059d0:	2000631d 	.word	0x2000631d
200059d4:	2000631d 	.word	0x2000631d
200059d8:	2000631d 	.word	0x2000631d
200059dc:	20005d97 	.word	0x20005d97
200059e0:	2000631d 	.word	0x2000631d
200059e4:	2000631d 	.word	0x2000631d
200059e8:	2000631d 	.word	0x2000631d
200059ec:	2000631d 	.word	0x2000631d
200059f0:	2000631d 	.word	0x2000631d
200059f4:	2000631d 	.word	0x2000631d
200059f8:	2000631d 	.word	0x2000631d
200059fc:	20005e47 	.word	0x20005e47
20005a00:	2000631d 	.word	0x2000631d
20005a04:	2000631d 	.word	0x2000631d
20005a08:	2000631d 	.word	0x2000631d
20005a0c:	2000631d 	.word	0x2000631d
20005a10:	2000631d 	.word	0x2000631d
20005a14:	2000631d 	.word	0x2000631d
20005a18:	2000631d 	.word	0x2000631d
20005a1c:	20005d4f 	.word	0x20005d4f
20005a20:	2000631d 	.word	0x2000631d
20005a24:	2000631d 	.word	0x2000631d
20005a28:	2000631d 	.word	0x2000631d
20005a2c:	2000631d 	.word	0x2000631d
20005a30:	2000631d 	.word	0x2000631d
20005a34:	2000631d 	.word	0x2000631d
20005a38:	2000631d 	.word	0x2000631d
20005a3c:	20005e77 	.word	0x20005e77
20005a40:	2000631d 	.word	0x2000631d
20005a44:	2000631d 	.word	0x2000631d
20005a48:	2000631d 	.word	0x2000631d
20005a4c:	2000631d 	.word	0x2000631d
20005a50:	2000631d 	.word	0x2000631d
20005a54:	2000631d 	.word	0x2000631d
20005a58:	2000631d 	.word	0x2000631d
20005a5c:	20005ef7 	.word	0x20005ef7
20005a60:	2000631d 	.word	0x2000631d
20005a64:	2000631d 	.word	0x2000631d
20005a68:	2000631d 	.word	0x2000631d
20005a6c:	2000631d 	.word	0x2000631d
20005a70:	2000631d 	.word	0x2000631d
20005a74:	2000631d 	.word	0x2000631d
20005a78:	2000631d 	.word	0x2000631d
20005a7c:	20005f27 	.word	0x20005f27
20005a80:	2000631d 	.word	0x2000631d
20005a84:	2000631d 	.word	0x2000631d
20005a88:	2000631d 	.word	0x2000631d
20005a8c:	2000631d 	.word	0x2000631d
20005a90:	2000631d 	.word	0x2000631d
20005a94:	2000631d 	.word	0x2000631d
20005a98:	2000631d 	.word	0x2000631d
20005a9c:	20005f77 	.word	0x20005f77
20005aa0:	2000631d 	.word	0x2000631d
20005aa4:	2000631d 	.word	0x2000631d
20005aa8:	2000631d 	.word	0x2000631d
20005aac:	2000631d 	.word	0x2000631d
20005ab0:	2000631d 	.word	0x2000631d
20005ab4:	2000631d 	.word	0x2000631d
20005ab8:	2000631d 	.word	0x2000631d
20005abc:	20006041 	.word	0x20006041
20005ac0:	2000631d 	.word	0x2000631d
20005ac4:	2000631d 	.word	0x2000631d
20005ac8:	2000631d 	.word	0x2000631d
20005acc:	2000631d 	.word	0x2000631d
20005ad0:	2000631d 	.word	0x2000631d
20005ad4:	2000631d 	.word	0x2000631d
20005ad8:	2000631d 	.word	0x2000631d
20005adc:	20006037 	.word	0x20006037
20005ae0:	2000631d 	.word	0x2000631d
20005ae4:	2000631d 	.word	0x2000631d
20005ae8:	2000631d 	.word	0x2000631d
20005aec:	2000631d 	.word	0x2000631d
20005af0:	2000631d 	.word	0x2000631d
20005af4:	2000631d 	.word	0x2000631d
20005af8:	2000631d 	.word	0x2000631d
20005afc:	20006041 	.word	0x20006041
20005b00:	2000631d 	.word	0x2000631d
20005b04:	2000631d 	.word	0x2000631d
20005b08:	2000631d 	.word	0x2000631d
20005b0c:	2000631d 	.word	0x2000631d
20005b10:	2000631d 	.word	0x2000631d
20005b14:	2000631d 	.word	0x2000631d
20005b18:	2000631d 	.word	0x2000631d
20005b1c:	20006037 	.word	0x20006037
20005b20:	2000631d 	.word	0x2000631d
20005b24:	2000631d 	.word	0x2000631d
20005b28:	2000631d 	.word	0x2000631d
20005b2c:	2000631d 	.word	0x2000631d
20005b30:	2000631d 	.word	0x2000631d
20005b34:	2000631d 	.word	0x2000631d
20005b38:	2000631d 	.word	0x2000631d
20005b3c:	2000609d 	.word	0x2000609d
20005b40:	2000631d 	.word	0x2000631d
20005b44:	2000631d 	.word	0x2000631d
20005b48:	2000631d 	.word	0x2000631d
20005b4c:	2000631d 	.word	0x2000631d
20005b50:	2000631d 	.word	0x2000631d
20005b54:	2000631d 	.word	0x2000631d
20005b58:	2000631d 	.word	0x2000631d
20005b5c:	20005feb 	.word	0x20005feb
20005b60:	2000631d 	.word	0x2000631d
20005b64:	2000631d 	.word	0x2000631d
20005b68:	2000631d 	.word	0x2000631d
20005b6c:	2000631d 	.word	0x2000631d
20005b70:	2000631d 	.word	0x2000631d
20005b74:	2000631d 	.word	0x2000631d
20005b78:	2000631d 	.word	0x2000631d
20005b7c:	2000609d 	.word	0x2000609d
20005b80:	2000631d 	.word	0x2000631d
20005b84:	2000631d 	.word	0x2000631d
20005b88:	2000631d 	.word	0x2000631d
20005b8c:	2000631d 	.word	0x2000631d
20005b90:	2000631d 	.word	0x2000631d
20005b94:	2000631d 	.word	0x2000631d
20005b98:	2000631d 	.word	0x2000631d
20005b9c:	20005feb 	.word	0x20005feb
20005ba0:	2000631d 	.word	0x2000631d
20005ba4:	2000631d 	.word	0x2000631d
20005ba8:	2000631d 	.word	0x2000631d
20005bac:	2000631d 	.word	0x2000631d
20005bb0:	2000631d 	.word	0x2000631d
20005bb4:	2000631d 	.word	0x2000631d
20005bb8:	2000631d 	.word	0x2000631d
20005bbc:	2000610f 	.word	0x2000610f
20005bc0:	2000631d 	.word	0x2000631d
20005bc4:	2000631d 	.word	0x2000631d
20005bc8:	2000631d 	.word	0x2000631d
20005bcc:	2000631d 	.word	0x2000631d
20005bd0:	2000631d 	.word	0x2000631d
20005bd4:	2000631d 	.word	0x2000631d
20005bd8:	2000631d 	.word	0x2000631d
20005bdc:	20006201 	.word	0x20006201
20005be0:	2000631d 	.word	0x2000631d
20005be4:	2000631d 	.word	0x2000631d
20005be8:	2000631d 	.word	0x2000631d
20005bec:	2000631d 	.word	0x2000631d
20005bf0:	2000631d 	.word	0x2000631d
20005bf4:	2000631d 	.word	0x2000631d
20005bf8:	2000631d 	.word	0x2000631d
20005bfc:	20006201 	.word	0x20006201
20005c00:	2000631d 	.word	0x2000631d
20005c04:	2000631d 	.word	0x2000631d
20005c08:	2000631d 	.word	0x2000631d
20005c0c:	2000631d 	.word	0x2000631d
20005c10:	2000631d 	.word	0x2000631d
20005c14:	2000631d 	.word	0x2000631d
20005c18:	2000631d 	.word	0x2000631d
20005c1c:	20006201 	.word	0x20006201
20005c20:	2000631d 	.word	0x2000631d
20005c24:	2000631d 	.word	0x2000631d
20005c28:	2000631d 	.word	0x2000631d
20005c2c:	2000631d 	.word	0x2000631d
20005c30:	2000631d 	.word	0x2000631d
20005c34:	2000631d 	.word	0x2000631d
20005c38:	2000631d 	.word	0x2000631d
20005c3c:	200062cb 	.word	0x200062cb
20005c40:	2000631d 	.word	0x2000631d
20005c44:	2000631d 	.word	0x2000631d
20005c48:	2000631d 	.word	0x2000631d
20005c4c:	2000631d 	.word	0x2000631d
20005c50:	2000631d 	.word	0x2000631d
20005c54:	2000631d 	.word	0x2000631d
20005c58:	2000631d 	.word	0x2000631d
20005c5c:	200062cb 	.word	0x200062cb
20005c60:	2000631d 	.word	0x2000631d
20005c64:	2000631d 	.word	0x2000631d
20005c68:	2000631d 	.word	0x2000631d
20005c6c:	2000631d 	.word	0x2000631d
20005c70:	2000631d 	.word	0x2000631d
20005c74:	2000631d 	.word	0x2000631d
20005c78:	2000631d 	.word	0x2000631d
20005c7c:	2000631d 	.word	0x2000631d
20005c80:	2000631d 	.word	0x2000631d
20005c84:	2000631d 	.word	0x2000631d
20005c88:	2000631d 	.word	0x2000631d
20005c8c:	2000631d 	.word	0x2000631d
20005c90:	2000631d 	.word	0x2000631d
20005c94:	2000631d 	.word	0x2000631d
20005c98:	2000631d 	.word	0x2000631d
20005c9c:	200061d3 	.word	0x200061d3
20005ca0:	2000631d 	.word	0x2000631d
20005ca4:	2000631d 	.word	0x2000631d
20005ca8:	2000631d 	.word	0x2000631d
20005cac:	2000631d 	.word	0x2000631d
20005cb0:	2000631d 	.word	0x2000631d
20005cb4:	2000631d 	.word	0x2000631d
20005cb8:	2000631d 	.word	0x2000631d
20005cbc:	20006371 	.word	0x20006371
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            HAL_set_8bit_reg_field( this_i2c->base_address, STA, 0x00u);
20005cc0:	687b      	ldr	r3, [r7, #4]
20005cc2:	681b      	ldr	r3, [r3, #0]
20005cc4:	4618      	mov	r0, r3
20005cc6:	f04f 0105 	mov.w	r1, #5
20005cca:	f04f 0220 	mov.w	r2, #32
20005cce:	f04f 0300 	mov.w	r3, #0
20005cd2:	f000 fe32 	bl	2000693a <HW_set_8bit_reg_field>
            HAL_set_8bit_reg( this_i2c->base_address, DATA, this_i2c->target_addr); /* write call address */
20005cd6:	687b      	ldr	r3, [r7, #4]
20005cd8:	681b      	ldr	r3, [r3, #0]
20005cda:	f103 0208 	add.w	r2, r3, #8
20005cde:	687b      	ldr	r3, [r7, #4]
20005ce0:	689b      	ldr	r3, [r3, #8]
20005ce2:	4610      	mov	r0, r2
20005ce4:	4619      	mov	r1, r3
20005ce6:	f000 fe24 	bl	20006932 <HW_set_8bit_reg>
            HAL_set_8bit_reg_field( this_i2c->base_address, DIR, this_i2c->dir); /* set direction bit */
20005cea:	687b      	ldr	r3, [r7, #4]
20005cec:	681b      	ldr	r3, [r3, #0]
20005cee:	f103 0208 	add.w	r2, r3, #8
20005cf2:	687b      	ldr	r3, [r7, #4]
20005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005cf6:	4610      	mov	r0, r2
20005cf8:	f04f 0100 	mov.w	r1, #0
20005cfc:	f04f 0201 	mov.w	r2, #1
20005d00:	f000 fe1b 	bl	2000693a <HW_set_8bit_reg_field>
            if(this_i2c->dir == WRITE_DIR)
20005d04:	687b      	ldr	r3, [r7, #4]
20005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005d08:	2b00      	cmp	r3, #0
20005d0a:	d104      	bne.n	20005d16 <I2C_isr+0x3ee>
            {
                 this_i2c->master_tx_idx = 0u;
20005d0c:	687b      	ldr	r3, [r7, #4]
20005d0e:	f04f 0200 	mov.w	r2, #0
20005d12:	621a      	str	r2, [r3, #32]
20005d14:	e003      	b.n	20005d1e <I2C_isr+0x3f6>
            }
            else
            {
                 this_i2c->master_rx_idx = 0u;
20005d16:	687b      	ldr	r3, [r7, #4]
20005d18:	f04f 0200 	mov.w	r2, #0
20005d1c:	631a      	str	r2, [r3, #48]	; 0x30
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20005d1e:	687b      	ldr	r3, [r7, #4]
20005d20:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20005d24:	2b00      	cmp	r3, #0
20005d26:	d004      	beq.n	20005d32 <I2C_isr+0x40a>
            {
                this_i2c->is_transaction_pending = 0u;
20005d28:	687b      	ldr	r3, [r7, #4]
20005d2a:	f04f 0200 	mov.w	r2, #0
20005d2e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20005d32:	687b      	ldr	r3, [r7, #4]
20005d34:	7b1a      	ldrb	r2, [r3, #12]
20005d36:	687b      	ldr	r3, [r7, #4]
20005d38:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
20005d3c:	429a      	cmp	r2, r3
20005d3e:	f000 8319 	beq.w	20006374 <I2C_isr+0xa4c>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20005d42:	687b      	ldr	r3, [r7, #4]
20005d44:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
20005d48:	687b      	ldr	r3, [r7, #4]
20005d4a:	731a      	strb	r2, [r3, #12]
            }
            break;
20005d4c:	e31b      	b.n	20006386 <I2C_isr+0xa5e>
            
        case ST_LOST_ARB:
              /* Set start bit.  Let's keep trying!  Don't give up! */
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20005d4e:	687b      	ldr	r3, [r7, #4]
20005d50:	681b      	ldr	r3, [r3, #0]
20005d52:	4618      	mov	r0, r3
20005d54:	f04f 0105 	mov.w	r1, #5
20005d58:	f04f 0220 	mov.w	r2, #32
20005d5c:	f04f 0301 	mov.w	r3, #1
20005d60:	f000 fdeb 	bl	2000693a <HW_set_8bit_reg_field>
              break;
20005d64:	e30f      	b.n	20006386 <I2C_isr+0xa5e>
              break;

        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20005d66:	687b      	ldr	r3, [r7, #4]
20005d68:	681b      	ldr	r3, [r3, #0]
20005d6a:	4618      	mov	r0, r3
20005d6c:	f04f 0104 	mov.w	r1, #4
20005d70:	f04f 0210 	mov.w	r2, #16
20005d74:	f04f 0301 	mov.w	r3, #1
20005d78:	f000 fddf 	bl	2000693a <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20005d7c:	687b      	ldr	r3, [r7, #4]
20005d7e:	f04f 0202 	mov.w	r2, #2
20005d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            this_i2c->transaction = NO_TRANSACTION;
20005d86:	687b      	ldr	r3, [r7, #4]
20005d88:	f04f 0200 	mov.w	r2, #0
20005d8c:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
20005d8e:	6878      	ldr	r0, [r7, #4]
20005d90:	f7ff fdb2 	bl	200058f8 <enable_slave_if_required>
            break;
20005d94:	e2f7      	b.n	20006386 <I2C_isr+0xa5e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20005d96:	687b      	ldr	r3, [r7, #4]
20005d98:	6a1a      	ldr	r2, [r3, #32]
20005d9a:	687b      	ldr	r3, [r7, #4]
20005d9c:	69db      	ldr	r3, [r3, #28]
20005d9e:	429a      	cmp	r2, r3
20005da0:	d212      	bcs.n	20005dc8 <I2C_isr+0x4a0>
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
20005da2:	687b      	ldr	r3, [r7, #4]
20005da4:	681b      	ldr	r3, [r3, #0]
20005da6:	f103 0108 	add.w	r1, r3, #8
20005daa:	687b      	ldr	r3, [r7, #4]
20005dac:	699a      	ldr	r2, [r3, #24]
20005dae:	687b      	ldr	r3, [r7, #4]
20005db0:	6a1b      	ldr	r3, [r3, #32]
20005db2:	441a      	add	r2, r3
20005db4:	7812      	ldrb	r2, [r2, #0]
20005db6:	f103 0001 	add.w	r0, r3, #1
20005dba:	687b      	ldr	r3, [r7, #4]
20005dbc:	6218      	str	r0, [r3, #32]
20005dbe:	4608      	mov	r0, r1
20005dc0:	4611      	mov	r1, r2
20005dc2:	f000 fdb6 	bl	20006932 <HW_set_8bit_reg>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
20005dc6:	e2de      	b.n	20006386 <I2C_isr+0xa5e>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20005dc8:	687b      	ldr	r3, [r7, #4]
20005dca:	7b1b      	ldrb	r3, [r3, #12]
20005dcc:	2b03      	cmp	r3, #3
20005dce:	d10f      	bne.n	20005df0 <I2C_isr+0x4c8>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20005dd0:	687b      	ldr	r3, [r7, #4]
20005dd2:	f04f 0201 	mov.w	r2, #1
20005dd6:	625a      	str	r2, [r3, #36]	; 0x24
                 HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20005dd8:	687b      	ldr	r3, [r7, #4]
20005dda:	681b      	ldr	r3, [r3, #0]
20005ddc:	4618      	mov	r0, r3
20005dde:	f04f 0105 	mov.w	r1, #5
20005de2:	f04f 0220 	mov.w	r2, #32
20005de6:	f04f 0301 	mov.w	r3, #1
20005dea:	f000 fda6 	bl	2000693a <HW_set_8bit_reg_field>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
20005dee:	e2ca      	b.n	20006386 <I2C_isr+0xa5e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20005df0:	687b      	ldr	r3, [r7, #4]
20005df2:	f04f 0200 	mov.w	r2, #0
20005df6:	731a      	strb	r2, [r3, #12]
                hold_bus = this_i2c->options & I2C_HOLD_BUS;
20005df8:	687b      	ldr	r3, [r7, #4]
20005dfa:	7d1b      	ldrb	r3, [r3, #20]
20005dfc:	f003 0301 	and.w	r3, r3, #1
20005e00:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20005e02:	687b      	ldr	r3, [r7, #4]
20005e04:	7b7a      	ldrb	r2, [r7, #13]
20005e06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                if ( hold_bus == 0u )
20005e0a:	7b7b      	ldrb	r3, [r7, #13]
20005e0c:	2b00      	cmp	r3, #0
20005e0e:	d10e      	bne.n	20005e2e <I2C_isr+0x506>
                { 
                    HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
20005e10:	687b      	ldr	r3, [r7, #4]
20005e12:	681b      	ldr	r3, [r3, #0]
20005e14:	4618      	mov	r0, r3
20005e16:	f04f 0104 	mov.w	r1, #4
20005e1a:	f04f 0210 	mov.w	r2, #16
20005e1e:	f04f 0301 	mov.w	r3, #1
20005e22:	f000 fd8a 	bl	2000693a <HW_set_8bit_reg_field>
                    enable_slave_if_required(this_i2c);
20005e26:	6878      	ldr	r0, [r7, #4]
20005e28:	f7ff fd66 	bl	200058f8 <enable_slave_if_required>
20005e2c:	e005      	b.n	20005e3a <I2C_isr+0x512>
                }
                else
                {
                    I2C_disable_irq( this_i2c );
20005e2e:	6878      	ldr	r0, [r7, #4]
20005e30:	f000 fb48 	bl	200064c4 <I2C_disable_irq>
                    clear_irq = 0u;
20005e34:	f04f 0300 	mov.w	r3, #0
20005e38:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = I2C_SUCCESS;
20005e3a:	687b      	ldr	r3, [r7, #4]
20005e3c:	f04f 0200 	mov.w	r2, #0
20005e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }
            break;
20005e44:	e29f      	b.n	20006386 <I2C_isr+0xa5e>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);/* xmt stop condition */
20005e46:	687b      	ldr	r3, [r7, #4]
20005e48:	681b      	ldr	r3, [r3, #0]
20005e4a:	4618      	mov	r0, r3
20005e4c:	f04f 0104 	mov.w	r1, #4
20005e50:	f04f 0210 	mov.w	r2, #16
20005e54:	f04f 0301 	mov.w	r3, #1
20005e58:	f000 fd6f 	bl	2000693a <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20005e5c:	687b      	ldr	r3, [r7, #4]
20005e5e:	f04f 0202 	mov.w	r2, #2
20005e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20005e66:	687b      	ldr	r3, [r7, #4]
20005e68:	f04f 0200 	mov.w	r2, #0
20005e6c:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
20005e6e:	6878      	ldr	r0, [r7, #4]
20005e70:	f7ff fd42 	bl	200058f8 <enable_slave_if_required>
            break;
20005e74:	e287      	b.n	20006386 <I2C_isr+0xa5e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20005e76:	687b      	ldr	r3, [r7, #4]
20005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005e7a:	2b01      	cmp	r3, #1
20005e7c:	d90b      	bls.n	20005e96 <I2C_isr+0x56e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20005e7e:	687b      	ldr	r3, [r7, #4]
20005e80:	681b      	ldr	r3, [r3, #0]
20005e82:	4618      	mov	r0, r3
20005e84:	f04f 0102 	mov.w	r1, #2
20005e88:	f04f 0204 	mov.w	r2, #4
20005e8c:	f04f 0301 	mov.w	r3, #1
20005e90:	f000 fd53 	bl	2000693a <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20005e94:	e277      	b.n	20006386 <I2C_isr+0xa5e>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
            }
            else if(1u == this_i2c->master_rx_size)
20005e96:	687b      	ldr	r3, [r7, #4]
20005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005e9a:	2b01      	cmp	r3, #1
20005e9c:	d10b      	bne.n	20005eb6 <I2C_isr+0x58e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
20005e9e:	687b      	ldr	r3, [r7, #4]
20005ea0:	681b      	ldr	r3, [r3, #0]
20005ea2:	4618      	mov	r0, r3
20005ea4:	f04f 0102 	mov.w	r1, #2
20005ea8:	f04f 0204 	mov.w	r2, #4
20005eac:	f04f 0300 	mov.w	r3, #0
20005eb0:	f000 fd43 	bl	2000693a <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20005eb4:	e267      	b.n	20006386 <I2C_isr+0xa5e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20005eb6:	687b      	ldr	r3, [r7, #4]
20005eb8:	681b      	ldr	r3, [r3, #0]
20005eba:	4618      	mov	r0, r3
20005ebc:	f04f 0102 	mov.w	r1, #2
20005ec0:	f04f 0204 	mov.w	r2, #4
20005ec4:	f04f 0301 	mov.w	r3, #1
20005ec8:	f000 fd37 	bl	2000693a <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20005ecc:	687b      	ldr	r3, [r7, #4]
20005ece:	681b      	ldr	r3, [r3, #0]
20005ed0:	4618      	mov	r0, r3
20005ed2:	f04f 0104 	mov.w	r1, #4
20005ed6:	f04f 0210 	mov.w	r2, #16
20005eda:	f04f 0301 	mov.w	r3, #1
20005ede:	f000 fd2c 	bl	2000693a <HW_set_8bit_reg_field>
                this_i2c->master_status = I2C_SUCCESS;
20005ee2:	687b      	ldr	r3, [r7, #4]
20005ee4:	f04f 0200 	mov.w	r2, #0
20005ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                this_i2c->transaction = NO_TRANSACTION;
20005eec:	687b      	ldr	r3, [r7, #4]
20005eee:	f04f 0200 	mov.w	r2, #0
20005ef2:	731a      	strb	r2, [r3, #12]
            }
            break;
20005ef4:	e247      	b.n	20006386 <I2C_isr+0xa5e>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20005ef6:	687b      	ldr	r3, [r7, #4]
20005ef8:	681b      	ldr	r3, [r3, #0]
20005efa:	4618      	mov	r0, r3
20005efc:	f04f 0104 	mov.w	r1, #4
20005f00:	f04f 0210 	mov.w	r2, #16
20005f04:	f04f 0301 	mov.w	r3, #1
20005f08:	f000 fd17 	bl	2000693a <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20005f0c:	687b      	ldr	r3, [r7, #4]
20005f0e:	f04f 0202 	mov.w	r2, #2
20005f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20005f16:	687b      	ldr	r3, [r7, #4]
20005f18:	f04f 0200 	mov.w	r2, #0
20005f1c:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
20005f1e:	6878      	ldr	r0, [r7, #4]
20005f20:	f7ff fcea 	bl	200058f8 <enable_slave_if_required>
            break;
20005f24:	e22f      	b.n	20006386 <I2C_isr+0xa5e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20005f26:	687b      	ldr	r3, [r7, #4]
20005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005f2a:	687a      	ldr	r2, [r7, #4]
20005f2c:	6b14      	ldr	r4, [r2, #48]	; 0x30
20005f2e:	eb03 0504 	add.w	r5, r3, r4
20005f32:	687b      	ldr	r3, [r7, #4]
20005f34:	681b      	ldr	r3, [r3, #0]
20005f36:	f103 0308 	add.w	r3, r3, #8
20005f3a:	4618      	mov	r0, r3
20005f3c:	f000 fcfb 	bl	20006936 <HW_get_8bit_reg>
20005f40:	4603      	mov	r3, r0
20005f42:	702b      	strb	r3, [r5, #0]
20005f44:	f104 0201 	add.w	r2, r4, #1
20005f48:	687b      	ldr	r3, [r7, #4]
20005f4a:	631a      	str	r2, [r3, #48]	; 0x30
            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20005f4c:	687b      	ldr	r3, [r7, #4]
20005f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20005f50:	687b      	ldr	r3, [r7, #4]
20005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005f54:	f103 33ff 	add.w	r3, r3, #4294967295
20005f58:	429a      	cmp	r2, r3
20005f5a:	f0c0 820d 	bcc.w	20006378 <I2C_isr+0xa50>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
20005f5e:	687b      	ldr	r3, [r7, #4]
20005f60:	681b      	ldr	r3, [r3, #0]
20005f62:	4618      	mov	r0, r3
20005f64:	f04f 0102 	mov.w	r1, #2
20005f68:	f04f 0204 	mov.w	r2, #4
20005f6c:	f04f 0300 	mov.w	r3, #0
20005f70:	f000 fce3 	bl	2000693a <HW_set_8bit_reg_field>
            }
            break;
20005f74:	e207      	b.n	20006386 <I2C_isr+0xa5e>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20005f76:	687b      	ldr	r3, [r7, #4]
20005f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20005f7a:	687b      	ldr	r3, [r7, #4]
20005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f7e:	eb02 0403 	add.w	r4, r2, r3
20005f82:	687b      	ldr	r3, [r7, #4]
20005f84:	681b      	ldr	r3, [r3, #0]
20005f86:	f103 0308 	add.w	r3, r3, #8
20005f8a:	4618      	mov	r0, r3
20005f8c:	f000 fcd3 	bl	20006936 <HW_get_8bit_reg>
20005f90:	4603      	mov	r3, r0
20005f92:	7023      	strb	r3, [r4, #0]
          
            hold_bus = this_i2c->options & I2C_HOLD_BUS; 
20005f94:	687b      	ldr	r3, [r7, #4]
20005f96:	7d1b      	ldrb	r3, [r3, #20]
20005f98:	f003 0301 	and.w	r3, r3, #1
20005f9c:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20005f9e:	687b      	ldr	r3, [r7, #4]
20005fa0:	7b7a      	ldrb	r2, [r7, #13]
20005fa2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            if ( hold_bus == 0u )
20005fa6:	7b7b      	ldrb	r3, [r7, #13]
20005fa8:	2b00      	cmp	r3, #0
20005faa:	d10e      	bne.n	20005fca <I2C_isr+0x6a2>
            { 
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
20005fac:	687b      	ldr	r3, [r7, #4]
20005fae:	681b      	ldr	r3, [r3, #0]
20005fb0:	4618      	mov	r0, r3
20005fb2:	f04f 0104 	mov.w	r1, #4
20005fb6:	f04f 0210 	mov.w	r2, #16
20005fba:	f04f 0301 	mov.w	r3, #1
20005fbe:	f000 fcbc 	bl	2000693a <HW_set_8bit_reg_field>

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20005fc2:	6878      	ldr	r0, [r7, #4]
20005fc4:	f7ff fc98 	bl	200058f8 <enable_slave_if_required>
20005fc8:	e005      	b.n	20005fd6 <I2C_isr+0x6ae>
            }
            else
            {
                I2C_disable_irq( this_i2c );
20005fca:	6878      	ldr	r0, [r7, #4]
20005fcc:	f000 fa7a 	bl	200064c4 <I2C_disable_irq>
                clear_irq = 0u;
20005fd0:	f04f 0300 	mov.w	r3, #0
20005fd4:	73bb      	strb	r3, [r7, #14]
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20005fd6:	687b      	ldr	r3, [r7, #4]
20005fd8:	f04f 0200 	mov.w	r2, #0
20005fdc:	731a      	strb	r2, [r3, #12]
            this_i2c->master_status = I2C_SUCCESS;
20005fde:	687b      	ldr	r3, [r7, #4]
20005fe0:	f04f 0200 	mov.w	r2, #0
20005fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            break;
20005fe8:	e1cd      	b.n	20006386 <I2C_isr+0xa5e>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20005fea:	687b      	ldr	r3, [r7, #4]
20005fec:	681b      	ldr	r3, [r3, #0]
20005fee:	4618      	mov	r0, r3
20005ff0:	f04f 0102 	mov.w	r1, #2
20005ff4:	f04f 0204 	mov.w	r2, #4
20005ff8:	f04f 0301 	mov.w	r3, #1
20005ffc:	f000 fc9d 	bl	2000693a <HW_set_8bit_reg_field>

            this_i2c->transaction = NO_TRANSACTION;
20006000:	687b      	ldr	r3, [r7, #4]
20006002:	f04f 0200 	mov.w	r2, #0
20006006:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_status = I2C_SUCCESS;
20006008:	687b      	ldr	r3, [r7, #4]
2000600a:	f04f 0200 	mov.w	r2, #0
2000600e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006012:	687b      	ldr	r3, [r7, #4]
20006014:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006018:	2b00      	cmp	r3, #0
2000601a:	f000 81af 	beq.w	2000637c <I2C_isr+0xa54>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
2000601e:	687b      	ldr	r3, [r7, #4]
20006020:	681b      	ldr	r3, [r3, #0]
20006022:	4618      	mov	r0, r3
20006024:	f04f 0105 	mov.w	r1, #5
20006028:	f04f 0220 	mov.w	r2, #32
2000602c:	f04f 0301 	mov.w	r3, #1
20006030:	f000 fc83 	bl	2000693a <HW_set_8bit_reg_field>
            }
            break;
20006034:	e1a7      	b.n	20006386 <I2C_isr+0xa5e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20006036:	687b      	ldr	r3, [r7, #4]
20006038:	f04f 0201 	mov.w	r2, #1
2000603c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20006040:	687b      	ldr	r3, [r7, #4]
20006042:	f04f 0204 	mov.w	r2, #4
20006046:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_rx_idx = 0u;
20006048:	687b      	ldr	r3, [r7, #4]
2000604a:	f04f 0200 	mov.w	r2, #0
2000604e:	651a      	str	r2, [r3, #80]	; 0x50
            this_i2c->random_read_addr = 0u;
20006050:	687b      	ldr	r3, [r7, #4]
20006052:	f04f 0200 	mov.w	r2, #0
20006056:	611a      	str	r2, [r3, #16]
            /*
             * If Start Bit is set clear it, but store that information since it is because of
             * pending transaction
             */
            if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20006058:	687b      	ldr	r3, [r7, #4]
2000605a:	681b      	ldr	r3, [r3, #0]
2000605c:	4618      	mov	r0, r3
2000605e:	f04f 0105 	mov.w	r1, #5
20006062:	f04f 0220 	mov.w	r2, #32
20006066:	f000 fc76 	bl	20006956 <HW_get_8bit_reg_field>
2000606a:	4603      	mov	r3, r0
2000606c:	2b00      	cmp	r3, #0
2000606e:	d00f      	beq.n	20006090 <I2C_isr+0x768>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006070:	687b      	ldr	r3, [r7, #4]
20006072:	681b      	ldr	r3, [r3, #0]
20006074:	4618      	mov	r0, r3
20006076:	f04f 0105 	mov.w	r1, #5
2000607a:	f04f 0220 	mov.w	r2, #32
2000607e:	f04f 0300 	mov.w	r3, #0
20006082:	f000 fc5a 	bl	2000693a <HW_set_8bit_reg_field>
                this_i2c->is_transaction_pending = 1u;
20006086:	687b      	ldr	r3, [r7, #4]
20006088:	f04f 0201 	mov.w	r2, #1
2000608c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }
            this_i2c->slave_status = I2C_IN_PROGRESS;
20006090:	687b      	ldr	r3, [r7, #4]
20006092:	f04f 0201 	mov.w	r2, #1
20006096:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
2000609a:	e174      	b.n	20006386 <I2C_isr+0xa5e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
2000609c:	687b      	ldr	r3, [r7, #4]
2000609e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200060a0:	2b00      	cmp	r3, #0
200060a2:	d021      	beq.n	200060e8 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
200060a4:	687b      	ldr	r3, [r7, #4]
200060a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200060a8:	687b      	ldr	r3, [r7, #4]
200060aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200060ac:	429a      	cmp	r2, r3
200060ae:	d21b      	bcs.n	200060e8 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = HAL_get_8bit_reg(this_i2c->base_address, DATA);
200060b0:	687b      	ldr	r3, [r7, #4]
200060b2:	681b      	ldr	r3, [r3, #0]
200060b4:	f103 0308 	add.w	r3, r3, #8
200060b8:	4618      	mov	r0, r3
200060ba:	f000 fc3c 	bl	20006936 <HW_get_8bit_reg>
200060be:	4603      	mov	r3, r0
200060c0:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
200060c2:	687b      	ldr	r3, [r7, #4]
200060c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200060c6:	687b      	ldr	r3, [r7, #4]
200060c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200060ca:	441a      	add	r2, r3
200060cc:	7b39      	ldrb	r1, [r7, #12]
200060ce:	7011      	strb	r1, [r2, #0]
200060d0:	f103 0201 	add.w	r2, r3, #1
200060d4:	687b      	ldr	r3, [r7, #4]
200060d6:	651a      	str	r2, [r3, #80]	; 0x50
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
200060d8:	687b      	ldr	r3, [r7, #4]
200060da:	691b      	ldr	r3, [r3, #16]
200060dc:	ea4f 2203 	mov.w	r2, r3, lsl #8
200060e0:	7b3b      	ldrb	r3, [r7, #12]
200060e2:	441a      	add	r2, r3
200060e4:	687b      	ldr	r3, [r7, #4]
200060e6:	611a      	str	r2, [r3, #16]
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
200060e8:	687b      	ldr	r3, [r7, #4]
200060ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200060ec:	687b      	ldr	r3, [r7, #4]
200060ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200060f0:	429a      	cmp	r2, r3
200060f2:	f0c0 8145 	bcc.w	20006380 <I2C_isr+0xa58>
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
200060f6:	687b      	ldr	r3, [r7, #4]
200060f8:	681b      	ldr	r3, [r3, #0]
200060fa:	4618      	mov	r0, r3
200060fc:	f04f 0102 	mov.w	r1, #2
20006100:	f04f 0204 	mov.w	r2, #4
20006104:	f04f 0300 	mov.w	r3, #0
20006108:	f000 fc17 	bl	2000693a <HW_set_8bit_reg_field>
            }
            break;
2000610c:	e13b      	b.n	20006386 <I2C_isr+0xa5e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
2000610e:	687b      	ldr	r3, [r7, #4]
20006110:	7b1b      	ldrb	r3, [r3, #12]
20006112:	2b04      	cmp	r3, #4
20006114:	d13c      	bne.n	20006190 <I2C_isr+0x868>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20006116:	687b      	ldr	r3, [r7, #4]
20006118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2000611a:	687b      	ldr	r3, [r7, #4]
2000611c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000611e:	429a      	cmp	r2, r3
20006120:	d103      	bne.n	2000612a <I2C_isr+0x802>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20006122:	687b      	ldr	r3, [r7, #4]
20006124:	691a      	ldr	r2, [r3, #16]
20006126:	687b      	ldr	r3, [r7, #4]
20006128:	645a      	str	r2, [r3, #68]	; 0x44
                }
                /* Call the slave's write transaction handler if it exists. */
                if ( this_i2c->slave_write_handler != 0u )
2000612a:	687b      	ldr	r3, [r7, #4]
2000612c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000612e:	2b00      	cmp	r3, #0
20006130:	d022      	beq.n	20006178 <I2C_isr+0x850>
                {
                    i2c_slave_handler_ret_t h_ret;
                    h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20006132:	687b      	ldr	r3, [r7, #4]
20006134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006136:	687a      	ldr	r2, [r7, #4]
20006138:	6c91      	ldr	r1, [r2, #72]	; 0x48
2000613a:	687a      	ldr	r2, [r7, #4]
2000613c:	6d12      	ldr	r2, [r2, #80]	; 0x50
2000613e:	b292      	uxth	r2, r2
20006140:	6878      	ldr	r0, [r7, #4]
20006142:	4798      	blx	r3
20006144:	4603      	mov	r3, r0
20006146:	73fb      	strb	r3, [r7, #15]
                    if ( I2C_REENABLE_SLAVE_RX == h_ret )
20006148:	7bfb      	ldrb	r3, [r7, #15]
2000614a:	2b00      	cmp	r3, #0
2000614c:	d103      	bne.n	20006156 <I2C_isr+0x82e>
                    {
                        /* There is a small risk that the write handler could
                         * call I2C_disable_slave() but return
                         * I2C_REENABLE_SLAVE_RX in error so we only enable
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
2000614e:	6878      	ldr	r0, [r7, #4]
20006150:	f7ff fbd2 	bl	200058f8 <enable_slave_if_required>
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006154:	e023      	b.n	2000619e <I2C_isr+0x876>
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
                    }
                    else
                    {
                        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x0u );
20006156:	687b      	ldr	r3, [r7, #4]
20006158:	681b      	ldr	r3, [r3, #0]
2000615a:	4618      	mov	r0, r3
2000615c:	f04f 0102 	mov.w	r1, #2
20006160:	f04f 0204 	mov.w	r2, #4
20006164:	f04f 0300 	mov.w	r3, #0
20006168:	f000 fbe7 	bl	2000693a <HW_set_8bit_reg_field>
                        /* Clear slave mode flag as well otherwise in mixed
                         * master/slave applications, the AA bit will get set by
                         * subsequent master operations. */
                        this_i2c->is_slave_enabled = 0u;
2000616c:	687b      	ldr	r3, [r7, #4]
2000616e:	f04f 0200 	mov.w	r2, #0
20006172:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006176:	e012      	b.n	2000619e <I2C_isr+0x876>
20006178:	687b      	ldr	r3, [r7, #4]
2000617a:	681b      	ldr	r3, [r3, #0]
2000617c:	4618      	mov	r0, r3
2000617e:	f04f 0102 	mov.w	r1, #2
20006182:	f04f 0204 	mov.w	r2, #4
20006186:	f04f 0301 	mov.w	r3, #1
2000618a:	f000 fbd6 	bl	2000693a <HW_set_8bit_reg_field>
2000618e:	e006      	b.n	2000619e <I2C_isr+0x876>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20006190:	687b      	ldr	r3, [r7, #4]
20006192:	f04f 0200 	mov.w	r2, #0
20006196:	645a      	str	r2, [r3, #68]	; 0x44
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20006198:	6878      	ldr	r0, [r7, #4]
2000619a:	f7ff fbad 	bl	200058f8 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = I2C_SUCCESS;
2000619e:	687b      	ldr	r3, [r7, #4]
200061a0:	f04f 0200 	mov.w	r2, #0
200061a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200061a8:	687b      	ldr	r3, [r7, #4]
200061aa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200061ae:	2b00      	cmp	r3, #0
200061b0:	d00a      	beq.n	200061c8 <I2C_isr+0x8a0>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200061b2:	687b      	ldr	r3, [r7, #4]
200061b4:	681b      	ldr	r3, [r3, #0]
200061b6:	4618      	mov	r0, r3
200061b8:	f04f 0105 	mov.w	r1, #5
200061bc:	f04f 0220 	mov.w	r2, #32
200061c0:	f04f 0301 	mov.w	r3, #1
200061c4:	f000 fbb9 	bl	2000693a <HW_set_8bit_reg_field>

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200061c8:	687b      	ldr	r3, [r7, #4]
200061ca:	f04f 0200 	mov.w	r2, #0
200061ce:	731a      	strb	r2, [r3, #12]

            break;
200061d0:	e0d9      	b.n	20006386 <I2C_isr+0xa5e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
200061d2:	687b      	ldr	r3, [r7, #4]
200061d4:	f04f 0200 	mov.w	r2, #0
200061d8:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
200061da:	687b      	ldr	r3, [r7, #4]
200061dc:	f04f 0200 	mov.w	r2, #0
200061e0:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->slave_status)
200061e2:	687b      	ldr	r3, [r7, #4]
200061e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200061e8:	b2db      	uxtb	r3, r3
200061ea:	2b01      	cmp	r3, #1
200061ec:	d104      	bne.n	200061f8 <I2C_isr+0x8d0>
            {
                this_i2c->slave_status = I2C_FAILED;
200061ee:	687b      	ldr	r3, [r7, #4]
200061f0:	f04f 0202 	mov.w	r2, #2
200061f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
200061f8:	6878      	ldr	r0, [r7, #4]
200061fa:	f7ff fb7d 	bl	200058f8 <enable_slave_if_required>

            break;
200061fe:	e0c2      	b.n	20006386 <I2C_isr+0xa5e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:       /* Arbitration lost, and: */
        case ST_RACK:           /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20006200:	7afb      	ldrb	r3, [r7, #11]
20006202:	b2db      	uxtb	r3, r3
20006204:	2ba8      	cmp	r3, #168	; 0xa8
20006206:	d128      	bne.n	2000625a <I2C_isr+0x932>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20006208:	687b      	ldr	r3, [r7, #4]
2000620a:	f04f 0205 	mov.w	r2, #5
2000620e:	731a      	strb	r2, [r3, #12]
                this_i2c->random_read_addr = 0u;
20006210:	687b      	ldr	r3, [r7, #4]
20006212:	f04f 0200 	mov.w	r2, #0
20006216:	611a      	str	r2, [r3, #16]
                this_i2c->slave_status = I2C_IN_PROGRESS;
20006218:	687b      	ldr	r3, [r7, #4]
2000621a:	f04f 0201 	mov.w	r2, #1
2000621e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
                /* If Start Bit is set clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20006222:	687b      	ldr	r3, [r7, #4]
20006224:	681b      	ldr	r3, [r3, #0]
20006226:	4618      	mov	r0, r3
20006228:	f04f 0105 	mov.w	r1, #5
2000622c:	f04f 0220 	mov.w	r2, #32
20006230:	f000 fb91 	bl	20006956 <HW_get_8bit_reg_field>
20006234:	4603      	mov	r3, r0
20006236:	2b00      	cmp	r3, #0
20006238:	d00f      	beq.n	2000625a <I2C_isr+0x932>
                {
                    HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
2000623a:	687b      	ldr	r3, [r7, #4]
2000623c:	681b      	ldr	r3, [r3, #0]
2000623e:	4618      	mov	r0, r3
20006240:	f04f 0105 	mov.w	r1, #5
20006244:	f04f 0220 	mov.w	r2, #32
20006248:	f04f 0300 	mov.w	r3, #0
2000624c:	f000 fb75 	bl	2000693a <HW_set_8bit_reg_field>
                    this_i2c->is_transaction_pending = 1u;
20006250:	687b      	ldr	r3, [r7, #4]
20006252:	f04f 0201 	mov.w	r2, #1
20006256:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                 }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
2000625a:	687b      	ldr	r3, [r7, #4]
2000625c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000625e:	687b      	ldr	r3, [r7, #4]
20006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006262:	429a      	cmp	r2, r3
20006264:	d309      	bcc.n	2000627a <I2C_isr+0x952>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, 0xFFu);
20006266:	687b      	ldr	r3, [r7, #4]
20006268:	681b      	ldr	r3, [r3, #0]
2000626a:	f103 0308 	add.w	r3, r3, #8
2000626e:	4618      	mov	r0, r3
20006270:	f04f 01ff 	mov.w	r1, #255	; 0xff
20006274:	f000 fb5d 	bl	20006932 <HW_set_8bit_reg>
20006278:	e011      	b.n	2000629e <I2C_isr+0x976>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++]);
2000627a:	687b      	ldr	r3, [r7, #4]
2000627c:	681b      	ldr	r3, [r3, #0]
2000627e:	f103 0108 	add.w	r1, r3, #8
20006282:	687b      	ldr	r3, [r7, #4]
20006284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
20006286:	687b      	ldr	r3, [r7, #4]
20006288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000628a:	441a      	add	r2, r3
2000628c:	7812      	ldrb	r2, [r2, #0]
2000628e:	f103 0001 	add.w	r0, r3, #1
20006292:	687b      	ldr	r3, [r7, #4]
20006294:	6458      	str	r0, [r3, #68]	; 0x44
20006296:	4608      	mov	r0, r1
20006298:	4611      	mov	r1, r2
2000629a:	f000 fb4a 	bl	20006932 <HW_set_8bit_reg>
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
2000629e:	687b      	ldr	r3, [r7, #4]
200062a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200062a2:	687b      	ldr	r3, [r7, #4]
200062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200062a6:	429a      	cmp	r2, r3
200062a8:	d36c      	bcc.n	20006384 <I2C_isr+0xa5c>
            {
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
200062aa:	687b      	ldr	r3, [r7, #4]
200062ac:	681b      	ldr	r3, [r3, #0]
200062ae:	4618      	mov	r0, r3
200062b0:	f04f 0102 	mov.w	r1, #2
200062b4:	f04f 0204 	mov.w	r2, #4
200062b8:	f04f 0300 	mov.w	r3, #0
200062bc:	f000 fb3d 	bl	2000693a <HW_set_8bit_reg_field>
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
200062c0:	687b      	ldr	r3, [r7, #4]
200062c2:	f04f 0200 	mov.w	r2, #0
200062c6:	645a      	str	r2, [r3, #68]	; 0x44
            }
            break;
200062c8:	e05d      	b.n	20006386 <I2C_isr+0xa5e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
200062ca:	687b      	ldr	r3, [r7, #4]
200062cc:	f04f 0200 	mov.w	r2, #0
200062d0:	645a      	str	r2, [r3, #68]	; 0x44
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u); 
200062d2:	687b      	ldr	r3, [r7, #4]
200062d4:	681b      	ldr	r3, [r3, #0]
200062d6:	4618      	mov	r0, r3
200062d8:	f04f 0102 	mov.w	r1, #2
200062dc:	f04f 0204 	mov.w	r2, #4
200062e0:	f04f 0301 	mov.w	r3, #1
200062e4:	f000 fb29 	bl	2000693a <HW_set_8bit_reg_field>

            /*  Mark previous state as complete */
            this_i2c->slave_status = I2C_SUCCESS;
200062e8:	687b      	ldr	r3, [r7, #4]
200062ea:	f04f 0200 	mov.w	r2, #0
200062ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200062f2:	687b      	ldr	r3, [r7, #4]
200062f4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200062f8:	2b00      	cmp	r3, #0
200062fa:	d00a      	beq.n	20006312 <I2C_isr+0x9ea>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200062fc:	687b      	ldr	r3, [r7, #4]
200062fe:	681b      	ldr	r3, [r3, #0]
20006300:	4618      	mov	r0, r3
20006302:	f04f 0105 	mov.w	r1, #5
20006306:	f04f 0220 	mov.w	r2, #32
2000630a:	f04f 0301 	mov.w	r3, #1
2000630e:	f000 fb14 	bl	2000693a <HW_set_8bit_reg_field>
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006312:	687b      	ldr	r3, [r7, #4]
20006314:	f04f 0200 	mov.w	r2, #0
20006318:	731a      	strb	r2, [r3, #12]

            break;
2000631a:	e034      	b.n	20006386 <I2C_isr+0xa5e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
2000631c:	687b      	ldr	r3, [r7, #4]
2000631e:	681b      	ldr	r3, [r3, #0]
20006320:	4618      	mov	r0, r3
20006322:	f04f 0105 	mov.w	r1, #5
20006326:	f04f 0220 	mov.w	r2, #32
2000632a:	f04f 0300 	mov.w	r3, #0
2000632e:	f000 fb04 	bl	2000693a <HW_set_8bit_reg_field>
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20006332:	687b      	ldr	r3, [r7, #4]
20006334:	f04f 0200 	mov.w	r2, #0
20006338:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
2000633a:	687b      	ldr	r3, [r7, #4]
2000633c:	f04f 0200 	mov.w	r2, #0
20006340:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->master_status)
20006342:	687b      	ldr	r3, [r7, #4]
20006344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006348:	b2db      	uxtb	r3, r3
2000634a:	2b01      	cmp	r3, #1
2000634c:	d104      	bne.n	20006358 <I2C_isr+0xa30>
            {
                this_i2c->master_status = I2C_FAILED;
2000634e:	687b      	ldr	r3, [r7, #4]
20006350:	f04f 0202 	mov.w	r2, #2
20006354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }

            if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006358:	687b      	ldr	r3, [r7, #4]
2000635a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
2000635e:	b2db      	uxtb	r3, r3
20006360:	2b01      	cmp	r3, #1
20006362:	d110      	bne.n	20006386 <I2C_isr+0xa5e>
            {
                this_i2c->slave_status = I2C_FAILED;
20006364:	687b      	ldr	r3, [r7, #4]
20006366:	f04f 0202 	mov.w	r2, #2
2000636a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2000636e:	e00a      	b.n	20006386 <I2C_isr+0xa5e>
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
              break;

        case ST_STOP_TRANSMIT:
             /* Stop has been transmitted. Do nothing */
              break;
20006370:	bf00      	nop
20006372:	e008      	b.n	20006386 <I2C_isr+0xa5e>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20006374:	bf00      	nop
20006376:	e006      	b.n	20006386 <I2C_isr+0xa5e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            break;
20006378:	bf00      	nop
2000637a:	e004      	b.n	20006386 <I2C_isr+0xa5e>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
            }
            break;
2000637c:	bf00      	nop
2000637e:	e002      	b.n	20006386 <I2C_isr+0xa5e>
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
            }
            break;
20006380:	bf00      	nop
20006382:	e000      	b.n	20006386 <I2C_isr+0xa5e>
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20006384:	bf00      	nop
            }

            break;
    }
    
    if ( clear_irq )
20006386:	7bbb      	ldrb	r3, [r7, #14]
20006388:	2b00      	cmp	r3, #0
2000638a:	d00a      	beq.n	200063a2 <I2C_isr+0xa7a>
    {
        /* clear interrupt. */
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
2000638c:	687b      	ldr	r3, [r7, #4]
2000638e:	681b      	ldr	r3, [r3, #0]
20006390:	4618      	mov	r0, r3
20006392:	f04f 0103 	mov.w	r1, #3
20006396:	f04f 0208 	mov.w	r2, #8
2000639a:	f04f 0300 	mov.w	r3, #0
2000639e:	f000 facc 	bl	2000693a <HW_set_8bit_reg_field>
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
200063a2:	687b      	ldr	r3, [r7, #4]
200063a4:	681b      	ldr	r3, [r3, #0]
200063a6:	f103 0304 	add.w	r3, r3, #4
200063aa:	4618      	mov	r0, r3
200063ac:	f000 fac3 	bl	20006936 <HW_get_8bit_reg>
200063b0:	4603      	mov	r3, r0
200063b2:	72fb      	strb	r3, [r7, #11]
}
200063b4:	f107 0710 	add.w	r7, r7, #16
200063b8:	46bd      	mov	sp, r7
200063ba:	bdb0      	pop	{r4, r5, r7, pc}

200063bc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200063bc:	b480      	push	{r7}
200063be:	b083      	sub	sp, #12
200063c0:	af00      	add	r7, sp, #0
200063c2:	4603      	mov	r3, r0
200063c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200063c6:	f24e 1300 	movw	r3, #57600	; 0xe100
200063ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
200063ce:	f997 2007 	ldrsb.w	r2, [r7, #7]
200063d2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200063d6:	79f9      	ldrb	r1, [r7, #7]
200063d8:	f001 011f 	and.w	r1, r1, #31
200063dc:	f04f 0001 	mov.w	r0, #1
200063e0:	fa00 f101 	lsl.w	r1, r0, r1
200063e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200063e8:	f107 070c 	add.w	r7, r7, #12
200063ec:	46bd      	mov	sp, r7
200063ee:	bc80      	pop	{r7}
200063f0:	4770      	bx	lr
200063f2:	bf00      	nop

200063f4 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200063f4:	b480      	push	{r7}
200063f6:	b083      	sub	sp, #12
200063f8:	af00      	add	r7, sp, #0
200063fa:	4603      	mov	r3, r0
200063fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200063fe:	f24e 1300 	movw	r3, #57600	; 0xe100
20006402:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006406:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000640a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000640e:	79f9      	ldrb	r1, [r7, #7]
20006410:	f001 011f 	and.w	r1, r1, #31
20006414:	f04f 0001 	mov.w	r0, #1
20006418:	fa00 f101 	lsl.w	r1, r0, r1
2000641c:	f102 0220 	add.w	r2, r2, #32
20006420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006424:	f107 070c 	add.w	r7, r7, #12
20006428:	46bd      	mov	sp, r7
2000642a:	bc80      	pop	{r7}
2000642c:	4770      	bx	lr
2000642e:	bf00      	nop

20006430 <I2C_enable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to enable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_enable_irq( i2c_instance_t * this_i2c )
{
20006430:	b580      	push	{r7, lr}
20006432:	b082      	sub	sp, #8
20006434:	af00      	add	r7, sp, #0
20006436:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
20006438:	687a      	ldr	r2, [r7, #4]
2000643a:	f24d 532c 	movw	r3, #54572	; 0xd52c
2000643e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006442:	429a      	cmp	r2, r3
20006444:	d103      	bne.n	2000644e <I2C_enable_irq+0x1e>
	{
		NVIC_EnableIRQ( FabricIrq0_IRQn );
20006446:	f04f 0022 	mov.w	r0, #34	; 0x22
2000644a:	f7ff ffb7 	bl	200063bc <NVIC_EnableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
2000644e:	687a      	ldr	r2, [r7, #4]
20006450:	f24d 5398 	movw	r3, #54680	; 0xd598
20006454:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006458:	429a      	cmp	r2, r3
2000645a:	d103      	bne.n	20006464 <I2C_enable_irq+0x34>
	{
		NVIC_EnableIRQ( FabricIrq1_IRQn );
2000645c:	f04f 0023 	mov.w	r0, #35	; 0x23
20006460:	f7ff ffac 	bl	200063bc <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c2)
20006464:	687a      	ldr	r2, [r7, #4]
20006466:	f24d 0370 	movw	r3, #53360	; 0xd070
2000646a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000646e:	429a      	cmp	r2, r3
20006470:	d103      	bne.n	2000647a <I2C_enable_irq+0x4a>
	{
		NVIC_EnableIRQ( FabricIrq2_IRQn );
20006472:	f04f 0024 	mov.w	r0, #36	; 0x24
20006476:	f7ff ffa1 	bl	200063bc <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c3)
2000647a:	687a      	ldr	r2, [r7, #4]
2000647c:	f24d 6370 	movw	r3, #54896	; 0xd670
20006480:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006484:	429a      	cmp	r2, r3
20006486:	d103      	bne.n	20006490 <I2C_enable_irq+0x60>
	{
		NVIC_EnableIRQ( FabricIrq3_IRQn );
20006488:	f04f 0025 	mov.w	r0, #37	; 0x25
2000648c:	f7ff ff96 	bl	200063bc <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c4)
20006490:	687a      	ldr	r2, [r7, #4]
20006492:	f24d 63e4 	movw	r3, #55012	; 0xd6e4
20006496:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000649a:	429a      	cmp	r2, r3
2000649c:	d103      	bne.n	200064a6 <I2C_enable_irq+0x76>
	{
		NVIC_EnableIRQ( FabricIrq4_IRQn );
2000649e:	f04f 0026 	mov.w	r0, #38	; 0x26
200064a2:	f7ff ff8b 	bl	200063bc <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c5)
200064a6:	687a      	ldr	r2, [r7, #4]
200064a8:	f24d 6304 	movw	r3, #54788	; 0xd604
200064ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200064b0:	429a      	cmp	r2, r3
200064b2:	d103      	bne.n	200064bc <I2C_enable_irq+0x8c>
	{
		NVIC_EnableIRQ( FabricIrq5_IRQn );
200064b4:	f04f 0027 	mov.w	r0, #39	; 0x27
200064b8:	f7ff ff80 	bl	200063bc <NVIC_EnableIRQ>
	}
}
200064bc:	f107 0708 	add.w	r7, r7, #8
200064c0:	46bd      	mov	sp, r7
200064c2:	bd80      	pop	{r7, pc}

200064c4 <I2C_disable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to disable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_disable_irq( i2c_instance_t * this_i2c )
{
200064c4:	b580      	push	{r7, lr}
200064c6:	b082      	sub	sp, #8
200064c8:	af00      	add	r7, sp, #0
200064ca:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
200064cc:	687a      	ldr	r2, [r7, #4]
200064ce:	f24d 532c 	movw	r3, #54572	; 0xd52c
200064d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200064d6:	429a      	cmp	r2, r3
200064d8:	d103      	bne.n	200064e2 <I2C_disable_irq+0x1e>
	{
		NVIC_DisableIRQ( FabricIrq0_IRQn );
200064da:	f04f 0022 	mov.w	r0, #34	; 0x22
200064de:	f7ff ff89 	bl	200063f4 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
200064e2:	687a      	ldr	r2, [r7, #4]
200064e4:	f24d 5398 	movw	r3, #54680	; 0xd598
200064e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200064ec:	429a      	cmp	r2, r3
200064ee:	d103      	bne.n	200064f8 <I2C_disable_irq+0x34>
	{
		NVIC_DisableIRQ( FabricIrq1_IRQn );
200064f0:	f04f 0023 	mov.w	r0, #35	; 0x23
200064f4:	f7ff ff7e 	bl	200063f4 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c2)
200064f8:	687a      	ldr	r2, [r7, #4]
200064fa:	f24d 0370 	movw	r3, #53360	; 0xd070
200064fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006502:	429a      	cmp	r2, r3
20006504:	d103      	bne.n	2000650e <I2C_disable_irq+0x4a>
	{
		NVIC_DisableIRQ( FabricIrq2_IRQn );
20006506:	f04f 0024 	mov.w	r0, #36	; 0x24
2000650a:	f7ff ff73 	bl	200063f4 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c3)
2000650e:	687a      	ldr	r2, [r7, #4]
20006510:	f24d 6370 	movw	r3, #54896	; 0xd670
20006514:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006518:	429a      	cmp	r2, r3
2000651a:	d103      	bne.n	20006524 <I2C_disable_irq+0x60>
	{
		NVIC_DisableIRQ( FabricIrq3_IRQn );
2000651c:	f04f 0025 	mov.w	r0, #37	; 0x25
20006520:	f7ff ff68 	bl	200063f4 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c4)
20006524:	687a      	ldr	r2, [r7, #4]
20006526:	f24d 63e4 	movw	r3, #55012	; 0xd6e4
2000652a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000652e:	429a      	cmp	r2, r3
20006530:	d103      	bne.n	2000653a <I2C_disable_irq+0x76>
	{
		NVIC_DisableIRQ( FabricIrq4_IRQn );
20006532:	f04f 0026 	mov.w	r0, #38	; 0x26
20006536:	f7ff ff5d 	bl	200063f4 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c5)
2000653a:	687a      	ldr	r2, [r7, #4]
2000653c:	f24d 6304 	movw	r3, #54788	; 0xd604
20006540:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006544:	429a      	cmp	r2, r3
20006546:	d103      	bne.n	20006550 <I2C_disable_irq+0x8c>
	{
		NVIC_DisableIRQ( FabricIrq5_IRQn );
20006548:	f04f 0027 	mov.w	r0, #39	; 0x27
2000654c:	f7ff ff52 	bl	200063f4 <NVIC_DisableIRQ>
	}
}
20006550:	f107 0708 	add.w	r7, r7, #8
20006554:	46bd      	mov	sp, r7
20006556:	bd80      	pop	{r7, pc}

20006558 <SystemInit>:

/***************************************************************************//**
 * See system_m2sxxx.h for details.
 */
void SystemInit(void)
{
20006558:	b580      	push	{r7, lr}
2000655a:	af00      	add	r7, sp, #0
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
    complete_clock_config();
2000655c:	f000 f96a 	bl	20006834 <complete_clock_config>
#endif

    silicon_workarounds();
20006560:	f000 f936 	bl	200067d0 <silicon_workarounds>
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
20006564:	f64e 5300 	movw	r3, #60672	; 0xed00
20006568:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000656c:	f64e 5200 	movw	r2, #60672	; 0xed00
20006570:	f2ce 0200 	movt	r2, #57344	; 0xe000
20006574:	6952      	ldr	r2, [r2, #20]
20006576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2000657a:	615a      	str	r2, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
2000657c:	f7f9 fe97 	bl	200002ae <mscc_post_hw_cfg_init>
    while(!CORE_SF2_CFG->INIT_DONE)
    {
        ;   /* Wait for INIT_DONE from CoreSF2Reset. */
    }
#endif
}
20006580:	bd80      	pop	{r7, pc}
20006582:	bf00      	nop

20006584 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
20006584:	b580      	push	{r7, lr}
20006586:	b088      	sub	sp, #32
20006588:	af00      	add	r7, sp, #0
#if 1
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
2000658a:	f248 0300 	movw	r3, #32768	; 0x8000
2000658e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20006596:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
2000659a:	60fb      	str	r3, [r7, #12]
    
    if(0u == controller_pll_init)
2000659c:	68fb      	ldr	r3, [r7, #12]
2000659e:	2b00      	cmp	r3, #0
200065a0:	f040 808b 	bne.w	200066ba <SystemCoreClockUpdate+0x136>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;
        
        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
200065a4:	f248 0300 	movw	r3, #32768	; 0x8000
200065a8:	f2c4 0303 	movt	r3, #16387	; 0x4003
200065ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
200065b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
200065b4:	617b      	str	r3, [r7, #20]
        if(0u == global_mux_sel)
200065b6:	697b      	ldr	r3, [r7, #20]
200065b8:	2b00      	cmp	r3, #0
200065ba:	d13f      	bne.n	2000663c <SystemCoreClockUpdate+0xb8>
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
200065bc:	f646 5304 	movw	r3, #27908	; 0x6d04
200065c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200065c4:	f24e 1200 	movw	r2, #57600	; 0xe100
200065c8:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200065cc:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
200065ce:	f646 5308 	movw	r3, #27912	; 0x6d08
200065d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200065d6:	f24e 1200 	movw	r2, #57600	; 0xe100
200065da:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200065de:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
200065e0:	f646 530c 	movw	r3, #27916	; 0x6d0c
200065e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200065e8:	f24e 1200 	movw	r2, #57600	; 0xe100
200065ec:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200065f0:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
200065f2:	f646 5310 	movw	r3, #27920	; 0x6d10
200065f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200065fa:	f24f 0280 	movw	r2, #61568	; 0xf080
200065fe:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20006602:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
20006604:	f646 5314 	movw	r3, #27924	; 0x6d14
20006608:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000660c:	f24e 1200 	movw	r2, #57600	; 0xe100
20006610:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006614:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
20006616:	f646 5318 	movw	r3, #27928	; 0x6d18
2000661a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000661e:	f24e 1200 	movw	r2, #57600	; 0xe100
20006622:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006626:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
20006628:	f646 531c 	movw	r3, #27932	; 0x6d1c
2000662c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006630:	f24e 1200 	movw	r2, #57600	; 0xe100
20006634:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006638:	601a      	str	r2, [r3, #0]
                break;
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
2000663a:	e045      	b.n	200066c8 <SystemCoreClockUpdate+0x144>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
2000663c:	f646 4398 	movw	r3, #27800	; 0x6c98
20006640:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006644:	f107 0204 	add.w	r2, r7, #4
20006648:	e893 0003 	ldmia.w	r3, {r0, r1}
2000664c:	e882 0003 	stmia.w	r2, {r0, r1}
            
            uint32_t standby_sel;
            uint8_t clock_source;
            
            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
20006650:	f248 0300 	movw	r3, #32768	; 0x8000
20006654:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2000665c:	ea4f 1393 	mov.w	r3, r3, lsr #6
20006660:	f003 0307 	and.w	r3, r3, #7
20006664:	61bb      	str	r3, [r7, #24]
            clock_source = standby_clock_lut[standby_sel];
20006666:	69bb      	ldr	r3, [r7, #24]
20006668:	f107 0220 	add.w	r2, r7, #32
2000666c:	4413      	add	r3, r2
2000666e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
20006672:	77fb      	strb	r3, [r7, #31]
            switch(clock_source)
20006674:	7ffb      	ldrb	r3, [r7, #31]
20006676:	2b01      	cmp	r3, #1
20006678:	d00b      	beq.n	20006692 <SystemCoreClockUpdate+0x10e>
2000667a:	2b02      	cmp	r3, #2
2000667c:	d00e      	beq.n	2000669c <SystemCoreClockUpdate+0x118>
2000667e:	2b00      	cmp	r3, #0
20006680:	d114      	bne.n	200066ac <SystemCoreClockUpdate+0x128>
            {
                case RCOSC_25_50MHZ_CLK_SRC:
                    clk_src = get_rcosc_25_50mhz_frequency();
20006682:	f000 f825 	bl	200066d0 <get_rcosc_25_50mhz_frequency>
20006686:	4603      	mov	r3, r0
20006688:	613b      	str	r3, [r7, #16]
                    set_clock_frequency_globals(clk_src);
2000668a:	6938      	ldr	r0, [r7, #16]
2000668c:	f000 f842 	bl	20006714 <set_clock_frequency_globals>
                break;
20006690:	e01a      	b.n	200066c8 <SystemCoreClockUpdate+0x144>
                
                case CLK_XTAL_CLK_SRC:
                    set_clock_frequency_globals(FREQ_32KHZ);
20006692:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20006696:	f000 f83d 	bl	20006714 <set_clock_frequency_globals>
                break;
2000669a:	e015      	b.n	200066c8 <SystemCoreClockUpdate+0x144>
                
                case RCOSC_1_MHZ_CLK_SRC:
                    set_clock_frequency_globals(FREQ_1MHZ);
2000669c:	f244 2040 	movw	r0, #16960	; 0x4240
200066a0:	f2c0 000f 	movt	r0, #15
200066a4:	f000 f836 	bl	20006714 <set_clock_frequency_globals>
                break;
200066a8:	bf00      	nop
200066aa:	e00d      	b.n	200066c8 <SystemCoreClockUpdate+0x144>
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
200066ac:	f244 2040 	movw	r0, #16960	; 0x4240
200066b0:	f2c0 000f 	movt	r0, #15
200066b4:	f000 f82e 	bl	20006714 <set_clock_frequency_globals>
200066b8:	e006      	b.n	200066c8 <SystemCoreClockUpdate+0x144>
        }
    }
    else
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
200066ba:	f000 f809 	bl	200066d0 <get_rcosc_25_50mhz_frequency>
200066be:	4603      	mov	r3, r0
200066c0:	613b      	str	r3, [r7, #16]
        set_clock_frequency_globals(clk_src);
200066c2:	6938      	ldr	r0, [r7, #16]
200066c4:	f000 f826 	bl	20006714 <set_clock_frequency_globals>
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
#endif
}
200066c8:	f107 0720 	add.w	r7, r7, #32
200066cc:	46bd      	mov	sp, r7
200066ce:	bd80      	pop	{r7, pc}

200066d0 <get_rcosc_25_50mhz_frequency>:

/***************************************************************************//**
 * Find out frequency generated by the 25_50mhz RC osciallator.
 */
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
200066d0:	b480      	push	{r7}
200066d2:	b083      	sub	sp, #12
200066d4:	af00      	add	r7, sp, #0
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;
    
    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
200066d6:	f248 0300 	movw	r3, #32768	; 0x8000
200066da:	f2c4 0303 	movt	r3, #16387	; 0x4003
200066de:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
200066e2:	f003 0304 	and.w	r3, r3, #4
200066e6:	603b      	str	r3, [r7, #0]
    if(0u == rcosc_div2)
200066e8:	683b      	ldr	r3, [r7, #0]
200066ea:	2b00      	cmp	r3, #0
200066ec:	d105      	bne.n	200066fa <get_rcosc_25_50mhz_frequency+0x2a>
    {
        /* 25_50mhz oscillator is configured for 25 MHz operations. */
        rcosc_frequency = FREQ_25MHZ;
200066ee:	f647 0340 	movw	r3, #30784	; 0x7840
200066f2:	f2c0 137d 	movt	r3, #381	; 0x17d
200066f6:	607b      	str	r3, [r7, #4]
200066f8:	e004      	b.n	20006704 <get_rcosc_25_50mhz_frequency+0x34>
    }
    else
    {
        /* 25_50mhz oscillator is configured for 50 MHz operations. */
        rcosc_frequency = FREQ_50MHZ;
200066fa:	f24f 0380 	movw	r3, #61568	; 0xf080
200066fe:	f2c0 23fa 	movt	r3, #762	; 0x2fa
20006702:	607b      	str	r3, [r7, #4]
    }
    
    return rcosc_frequency;
20006704:	687b      	ldr	r3, [r7, #4]
}
20006706:	4618      	mov	r0, r3
20006708:	f107 070c 	add.w	r7, r7, #12
2000670c:	46bd      	mov	sp, r7
2000670e:	bc80      	pop	{r7}
20006710:	4770      	bx	lr
20006712:	bf00      	nop

20006714 <set_clock_frequency_globals>:
        - g_FrequencyFIC0
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
20006714:	b480      	push	{r7}
20006716:	b083      	sub	sp, #12
20006718:	af00      	add	r7, sp, #0
2000671a:	6078      	str	r0, [r7, #4]
    SystemCoreClock = standby_clk;
2000671c:	f646 5304 	movw	r3, #27908	; 0x6d04
20006720:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006724:	687a      	ldr	r2, [r7, #4]
20006726:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = standby_clk;
20006728:	f646 5308 	movw	r3, #27912	; 0x6d08
2000672c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006730:	687a      	ldr	r2, [r7, #4]
20006732:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = standby_clk;
20006734:	f646 530c 	movw	r3, #27916	; 0x6d0c
20006738:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000673c:	687a      	ldr	r2, [r7, #4]
2000673e:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
20006740:	f646 5310 	movw	r3, #27920	; 0x6d10
20006744:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006748:	f24f 0280 	movw	r2, #61568	; 0xf080
2000674c:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20006750:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC0 = standby_clk;
20006752:	f646 5314 	movw	r3, #27924	; 0x6d14
20006756:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000675a:	687a      	ldr	r2, [r7, #4]
2000675c:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC1 = standby_clk;
2000675e:	f646 5318 	movw	r3, #27928	; 0x6d18
20006762:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006766:	687a      	ldr	r2, [r7, #4]
20006768:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC64 = standby_clk;
2000676a:	f646 531c 	movw	r3, #27932	; 0x6d1c
2000676e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006772:	687a      	ldr	r2, [r7, #4]
20006774:	601a      	str	r2, [r3, #0]
}
20006776:	f107 070c 	add.w	r7, r7, #12
2000677a:	46bd      	mov	sp, r7
2000677c:	bc80      	pop	{r7}
2000677e:	4770      	bx	lr

20006780 <get_silicon_revision>:

/*------------------------------------------------------------------------------
  Retrieve silicon revision from system registers.
 */
static uint32_t get_silicon_revision(void)
{
20006780:	b480      	push	{r7}
20006782:	b083      	sub	sp, #12
20006784:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    uint32_t device_version;
    
    device_version = SYSREG->DEVICE_VERSION;
20006786:	f248 0300 	movw	r3, #32768	; 0x8000
2000678a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000678e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
20006792:	607b      	str	r3, [r7, #4]
    switch(device_version)
20006794:	687a      	ldr	r2, [r7, #4]
20006796:	f64f 0302 	movw	r3, #63490	; 0xf802
2000679a:	429a      	cmp	r2, r3
2000679c:	d006      	beq.n	200067ac <get_silicon_revision+0x2c>
2000679e:	f64f 0302 	movw	r3, #63490	; 0xf802
200067a2:	f2c0 0301 	movt	r3, #1
200067a6:	429a      	cmp	r2, r3
200067a8:	d004      	beq.n	200067b4 <get_silicon_revision+0x34>
200067aa:	e007      	b.n	200067bc <get_silicon_revision+0x3c>
    {
        case 0x0000F802:
            silicon_revision = M2S050_REV_A_SILICON;
200067ac:	f04f 0301 	mov.w	r3, #1
200067b0:	603b      	str	r3, [r7, #0]
            break;
200067b2:	e006      	b.n	200067c2 <get_silicon_revision+0x42>
            
        case 0x0001F802:
            silicon_revision = M2S050_REV_B_SILICON;
200067b4:	f04f 0302 	mov.w	r3, #2
200067b8:	603b      	str	r3, [r7, #0]
            break;
200067ba:	e002      	b.n	200067c2 <get_silicon_revision+0x42>
            
        default:
            silicon_revision = UNKNOWN_SILICON_REV;
200067bc:	f04f 0300 	mov.w	r3, #0
200067c0:	603b      	str	r3, [r7, #0]
            break;
    }
    
    return silicon_revision;
200067c2:	683b      	ldr	r3, [r7, #0]
}
200067c4:	4618      	mov	r0, r3
200067c6:	f107 070c 	add.w	r7, r7, #12
200067ca:	46bd      	mov	sp, r7
200067cc:	bc80      	pop	{r7}
200067ce:	4770      	bx	lr

200067d0 <silicon_workarounds>:

/*------------------------------------------------------------------------------
  Workarounds for various silicon versions.
 */
static void silicon_workarounds(void)
{
200067d0:	b580      	push	{r7, lr}
200067d2:	b082      	sub	sp, #8
200067d4:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    
    silicon_revision = get_silicon_revision();
200067d6:	f7ff ffd3 	bl	20006780 <get_silicon_revision>
200067da:	4603      	mov	r3, r0
200067dc:	607b      	str	r3, [r7, #4]
    
    switch(silicon_revision)
200067de:	687b      	ldr	r3, [r7, #4]
200067e0:	2b01      	cmp	r3, #1
200067e2:	d101      	bne.n	200067e8 <silicon_workarounds+0x18>
    {
        case M2S050_REV_A_SILICON:
            m2s050_rev_a_workarounds();
200067e4:	f000 f804 	bl	200067f0 <m2s050_rev_a_workarounds>
        case UNKNOWN_SILICON_REV:
            /* Fall through. */
        default:
            break;
    }
}
200067e8:	f107 0708 	add.w	r7, r7, #8
200067ec:	46bd      	mov	sp, r7
200067ee:	bd80      	pop	{r7, pc}

200067f0 <m2s050_rev_a_workarounds>:

/*------------------------------------------------------------------------------
  Silicon workarounds for M2S050 rev A.
 */
static void m2s050_rev_a_workarounds(void)
{
200067f0:	b480      	push	{r7}
200067f2:	af00      	add	r7, sp, #0
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
200067f4:	f248 0300 	movw	r3, #32768	; 0x8000
200067f8:	f2c4 0303 	movt	r3, #16387	; 0x4003
200067fc:	f248 0200 	movw	r2, #32768	; 0x8000
20006800:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006804:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20006808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2000680c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
20006810:	f248 0300 	movw	r3, #32768	; 0x8000
20006814:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006818:	f248 0200 	movw	r2, #32768	; 0x8000
2000681c:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006820:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20006824:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
20006828:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
2000682c:	46bd      	mov	sp, r7
2000682e:	bc80      	pop	{r7}
20006830:	4770      	bx	lr
20006832:	bf00      	nop

20006834 <complete_clock_config>:
/*------------------------------------------------------------------------------
  Complete clock configuration if requested by Libero.
 */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
static void complete_clock_config(void)
{
20006834:	b480      	push	{r7}
20006836:	b083      	sub	sp, #12
20006838:	af00      	add	r7, sp, #0
    uint32_t pll_locked;
    
    /* Wait for fabric PLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & FAB_PLL_LOCK_MASK;
2000683a:	f248 0300 	movw	r3, #32768	; 0x8000
2000683e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006842:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20006846:	f003 0301 	and.w	r3, r3, #1
2000684a:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
2000684c:	687b      	ldr	r3, [r7, #4]
2000684e:	2b00      	cmp	r3, #0
20006850:	d0f3      	beq.n	2000683a <complete_clock_config+0x6>
    
    /* Negate MPLL bypass. */
    SYSREG->MSSDDR_PLL_STATUS_HIGH_CR &= ~FACC_PLL_BYPASS_MASK;
20006852:	f248 0300 	movw	r3, #32768	; 0x8000
20006856:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000685a:	f248 0200 	movw	r2, #32768	; 0x8000
2000685e:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006862:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
20006866:	f022 0201 	bic.w	r2, r2, #1
2000686a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    
    /* Wait for MPLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & MPLL_LOCK_MASK;
2000686e:	f248 0300 	movw	r3, #32768	; 0x8000
20006872:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006876:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2000687a:	f003 0302 	and.w	r3, r3, #2
2000687e:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
20006880:	687b      	ldr	r3, [r7, #4]
20006882:	2b00      	cmp	r3, #0
20006884:	d0f3      	beq.n	2000686e <complete_clock_config+0x3a>
    
    /* Switch FACC from standby to run mode. */
    SYSREG->MSSDDR_FACC1_CR &= ~FACC_GLMUX_SEL_MASK;
20006886:	f248 0300 	movw	r3, #32768	; 0x8000
2000688a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000688e:	f248 0200 	movw	r2, #32768	; 0x8000
20006892:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006896:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
2000689a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2000689e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* Negate FPGA_SOFTRESET to de-assert MSS_RESET_N_M2F in the fabric */
    SYSREG->SOFT_RST_CR &= ~SYSREG_FPGA_SOFTRESET_MASK;
200068a2:	f248 0300 	movw	r3, #32768	; 0x8000
200068a6:	f2c4 0303 	movt	r3, #16387	; 0x4003
200068aa:	f248 0200 	movw	r2, #32768	; 0x8000
200068ae:	f2c4 0203 	movt	r2, #16387	; 0x4003
200068b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
200068b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
200068b8:	649a      	str	r2, [r3, #72]	; 0x48
}
200068ba:	f107 070c 	add.w	r7, r7, #12
200068be:	46bd      	mov	sp, r7
200068c0:	bc80      	pop	{r7}
200068c2:	4770      	bx	lr

200068c4 <HAL_disable_interrupts>:
200068c4:	f3ef 8010 	mrs	r0, PRIMASK
200068c8:	b672      	cpsid	i
200068ca:	4770      	bx	lr

200068cc <HAL_restore_interrupts>:
200068cc:	f380 8810 	msr	PRIMASK, r0
200068d0:	4770      	bx	lr

200068d2 <HW_set_32bit_reg>:
200068d2:	6001      	str	r1, [r0, #0]
200068d4:	4770      	bx	lr

200068d6 <HW_get_32bit_reg>:
200068d6:	6800      	ldr	r0, [r0, #0]
200068d8:	4770      	bx	lr

200068da <HW_set_32bit_reg_field>:
200068da:	b50e      	push	{r1, r2, r3, lr}
200068dc:	fa03 f301 	lsl.w	r3, r3, r1
200068e0:	ea03 0302 	and.w	r3, r3, r2
200068e4:	6801      	ldr	r1, [r0, #0]
200068e6:	ea6f 0202 	mvn.w	r2, r2
200068ea:	ea01 0102 	and.w	r1, r1, r2
200068ee:	ea41 0103 	orr.w	r1, r1, r3
200068f2:	6001      	str	r1, [r0, #0]
200068f4:	bd0e      	pop	{r1, r2, r3, pc}

200068f6 <HW_get_32bit_reg_field>:
200068f6:	6800      	ldr	r0, [r0, #0]
200068f8:	ea00 0002 	and.w	r0, r0, r2
200068fc:	fa20 f001 	lsr.w	r0, r0, r1
20006900:	4770      	bx	lr

20006902 <HW_set_16bit_reg>:
20006902:	8001      	strh	r1, [r0, #0]
20006904:	4770      	bx	lr

20006906 <HW_get_16bit_reg>:
20006906:	8800      	ldrh	r0, [r0, #0]
20006908:	4770      	bx	lr

2000690a <HW_set_16bit_reg_field>:
2000690a:	b50e      	push	{r1, r2, r3, lr}
2000690c:	fa03 f301 	lsl.w	r3, r3, r1
20006910:	ea03 0302 	and.w	r3, r3, r2
20006914:	8801      	ldrh	r1, [r0, #0]
20006916:	ea6f 0202 	mvn.w	r2, r2
2000691a:	ea01 0102 	and.w	r1, r1, r2
2000691e:	ea41 0103 	orr.w	r1, r1, r3
20006922:	8001      	strh	r1, [r0, #0]
20006924:	bd0e      	pop	{r1, r2, r3, pc}

20006926 <HW_get_16bit_reg_field>:
20006926:	8800      	ldrh	r0, [r0, #0]
20006928:	ea00 0002 	and.w	r0, r0, r2
2000692c:	fa20 f001 	lsr.w	r0, r0, r1
20006930:	4770      	bx	lr

20006932 <HW_set_8bit_reg>:
20006932:	7001      	strb	r1, [r0, #0]
20006934:	4770      	bx	lr

20006936 <HW_get_8bit_reg>:
20006936:	7800      	ldrb	r0, [r0, #0]
20006938:	4770      	bx	lr

2000693a <HW_set_8bit_reg_field>:
2000693a:	b50e      	push	{r1, r2, r3, lr}
2000693c:	fa03 f301 	lsl.w	r3, r3, r1
20006940:	ea03 0302 	and.w	r3, r3, r2
20006944:	7801      	ldrb	r1, [r0, #0]
20006946:	ea6f 0202 	mvn.w	r2, r2
2000694a:	ea01 0102 	and.w	r1, r1, r2
2000694e:	ea41 0103 	orr.w	r1, r1, r3
20006952:	7001      	strb	r1, [r0, #0]
20006954:	bd0e      	pop	{r1, r2, r3, pc}

20006956 <HW_get_8bit_reg_field>:
20006956:	7800      	ldrb	r0, [r0, #0]
20006958:	ea00 0002 	and.w	r0, r0, r2
2000695c:	fa20 f001 	lsr.w	r0, r0, r1
20006960:	4770      	bx	lr
	...

20006964 <__libc_init_array>:
20006964:	b570      	push	{r4, r5, r6, lr}
20006966:	f646 46b8 	movw	r6, #27832	; 0x6cb8
2000696a:	f646 45b8 	movw	r5, #27832	; 0x6cb8
2000696e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20006972:	f2c2 0500 	movt	r5, #8192	; 0x2000
20006976:	1b76      	subs	r6, r6, r5
20006978:	10b6      	asrs	r6, r6, #2
2000697a:	d006      	beq.n	2000698a <__libc_init_array+0x26>
2000697c:	2400      	movs	r4, #0
2000697e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20006982:	3401      	adds	r4, #1
20006984:	4798      	blx	r3
20006986:	42a6      	cmp	r6, r4
20006988:	d8f9      	bhi.n	2000697e <__libc_init_array+0x1a>
2000698a:	f646 45b8 	movw	r5, #27832	; 0x6cb8
2000698e:	f646 46bc 	movw	r6, #27836	; 0x6cbc
20006992:	f2c2 0500 	movt	r5, #8192	; 0x2000
20006996:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000699a:	1b76      	subs	r6, r6, r5
2000699c:	f000 f980 	bl	20006ca0 <_init>
200069a0:	10b6      	asrs	r6, r6, #2
200069a2:	d006      	beq.n	200069b2 <__libc_init_array+0x4e>
200069a4:	2400      	movs	r4, #0
200069a6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200069aa:	3401      	adds	r4, #1
200069ac:	4798      	blx	r3
200069ae:	42a6      	cmp	r6, r4
200069b0:	d8f9      	bhi.n	200069a6 <__libc_init_array+0x42>
200069b2:	bd70      	pop	{r4, r5, r6, pc}

200069b4 <memcpy>:
200069b4:	2a03      	cmp	r2, #3
200069b6:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
200069ba:	d80b      	bhi.n	200069d4 <memcpy+0x20>
200069bc:	b13a      	cbz	r2, 200069ce <memcpy+0x1a>
200069be:	2300      	movs	r3, #0
200069c0:	f811 c003 	ldrb.w	ip, [r1, r3]
200069c4:	f800 c003 	strb.w	ip, [r0, r3]
200069c8:	3301      	adds	r3, #1
200069ca:	4293      	cmp	r3, r2
200069cc:	d1f8      	bne.n	200069c0 <memcpy+0xc>
200069ce:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
200069d2:	4770      	bx	lr
200069d4:	1882      	adds	r2, r0, r2
200069d6:	460c      	mov	r4, r1
200069d8:	4603      	mov	r3, r0
200069da:	e003      	b.n	200069e4 <memcpy+0x30>
200069dc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
200069e0:	f803 1c01 	strb.w	r1, [r3, #-1]
200069e4:	f003 0603 	and.w	r6, r3, #3
200069e8:	4619      	mov	r1, r3
200069ea:	46a4      	mov	ip, r4
200069ec:	3301      	adds	r3, #1
200069ee:	3401      	adds	r4, #1
200069f0:	2e00      	cmp	r6, #0
200069f2:	d1f3      	bne.n	200069dc <memcpy+0x28>
200069f4:	f01c 0403 	ands.w	r4, ip, #3
200069f8:	4663      	mov	r3, ip
200069fa:	bf08      	it	eq
200069fc:	ebc1 0c02 	rsbeq	ip, r1, r2
20006a00:	d068      	beq.n	20006ad4 <memcpy+0x120>
20006a02:	4265      	negs	r5, r4
20006a04:	f1c4 0a04 	rsb	sl, r4, #4
20006a08:	eb0c 0705 	add.w	r7, ip, r5
20006a0c:	4633      	mov	r3, r6
20006a0e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
20006a12:	f85c 6005 	ldr.w	r6, [ip, r5]
20006a16:	ea4f 08c4 	mov.w	r8, r4, lsl #3
20006a1a:	1a55      	subs	r5, r2, r1
20006a1c:	e008      	b.n	20006a30 <memcpy+0x7c>
20006a1e:	f857 4f04 	ldr.w	r4, [r7, #4]!
20006a22:	4626      	mov	r6, r4
20006a24:	fa04 f40a 	lsl.w	r4, r4, sl
20006a28:	ea49 0404 	orr.w	r4, r9, r4
20006a2c:	50cc      	str	r4, [r1, r3]
20006a2e:	3304      	adds	r3, #4
20006a30:	185c      	adds	r4, r3, r1
20006a32:	2d03      	cmp	r5, #3
20006a34:	fa26 f908 	lsr.w	r9, r6, r8
20006a38:	f1a5 0504 	sub.w	r5, r5, #4
20006a3c:	eb0c 0603 	add.w	r6, ip, r3
20006a40:	dced      	bgt.n	20006a1e <memcpy+0x6a>
20006a42:	2300      	movs	r3, #0
20006a44:	e002      	b.n	20006a4c <memcpy+0x98>
20006a46:	5cf1      	ldrb	r1, [r6, r3]
20006a48:	54e1      	strb	r1, [r4, r3]
20006a4a:	3301      	adds	r3, #1
20006a4c:	1919      	adds	r1, r3, r4
20006a4e:	4291      	cmp	r1, r2
20006a50:	d3f9      	bcc.n	20006a46 <memcpy+0x92>
20006a52:	e7bc      	b.n	200069ce <memcpy+0x1a>
20006a54:	f853 4c40 	ldr.w	r4, [r3, #-64]
20006a58:	f841 4c40 	str.w	r4, [r1, #-64]
20006a5c:	f853 4c3c 	ldr.w	r4, [r3, #-60]
20006a60:	f841 4c3c 	str.w	r4, [r1, #-60]
20006a64:	f853 4c38 	ldr.w	r4, [r3, #-56]
20006a68:	f841 4c38 	str.w	r4, [r1, #-56]
20006a6c:	f853 4c34 	ldr.w	r4, [r3, #-52]
20006a70:	f841 4c34 	str.w	r4, [r1, #-52]
20006a74:	f853 4c30 	ldr.w	r4, [r3, #-48]
20006a78:	f841 4c30 	str.w	r4, [r1, #-48]
20006a7c:	f853 4c2c 	ldr.w	r4, [r3, #-44]
20006a80:	f841 4c2c 	str.w	r4, [r1, #-44]
20006a84:	f853 4c28 	ldr.w	r4, [r3, #-40]
20006a88:	f841 4c28 	str.w	r4, [r1, #-40]
20006a8c:	f853 4c24 	ldr.w	r4, [r3, #-36]
20006a90:	f841 4c24 	str.w	r4, [r1, #-36]
20006a94:	f853 4c20 	ldr.w	r4, [r3, #-32]
20006a98:	f841 4c20 	str.w	r4, [r1, #-32]
20006a9c:	f853 4c1c 	ldr.w	r4, [r3, #-28]
20006aa0:	f841 4c1c 	str.w	r4, [r1, #-28]
20006aa4:	f853 4c18 	ldr.w	r4, [r3, #-24]
20006aa8:	f841 4c18 	str.w	r4, [r1, #-24]
20006aac:	f853 4c14 	ldr.w	r4, [r3, #-20]
20006ab0:	f841 4c14 	str.w	r4, [r1, #-20]
20006ab4:	f853 4c10 	ldr.w	r4, [r3, #-16]
20006ab8:	f841 4c10 	str.w	r4, [r1, #-16]
20006abc:	f853 4c0c 	ldr.w	r4, [r3, #-12]
20006ac0:	f841 4c0c 	str.w	r4, [r1, #-12]
20006ac4:	f853 4c08 	ldr.w	r4, [r3, #-8]
20006ac8:	f841 4c08 	str.w	r4, [r1, #-8]
20006acc:	f853 4c04 	ldr.w	r4, [r3, #-4]
20006ad0:	f841 4c04 	str.w	r4, [r1, #-4]
20006ad4:	461c      	mov	r4, r3
20006ad6:	460d      	mov	r5, r1
20006ad8:	3340      	adds	r3, #64	; 0x40
20006ada:	3140      	adds	r1, #64	; 0x40
20006adc:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
20006ae0:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
20006ae4:	dcb6      	bgt.n	20006a54 <memcpy+0xa0>
20006ae6:	4621      	mov	r1, r4
20006ae8:	462b      	mov	r3, r5
20006aea:	1b54      	subs	r4, r2, r5
20006aec:	e00f      	b.n	20006b0e <memcpy+0x15a>
20006aee:	f851 5c10 	ldr.w	r5, [r1, #-16]
20006af2:	f843 5c10 	str.w	r5, [r3, #-16]
20006af6:	f851 5c0c 	ldr.w	r5, [r1, #-12]
20006afa:	f843 5c0c 	str.w	r5, [r3, #-12]
20006afe:	f851 5c08 	ldr.w	r5, [r1, #-8]
20006b02:	f843 5c08 	str.w	r5, [r3, #-8]
20006b06:	f851 5c04 	ldr.w	r5, [r1, #-4]
20006b0a:	f843 5c04 	str.w	r5, [r3, #-4]
20006b0e:	2c0f      	cmp	r4, #15
20006b10:	460d      	mov	r5, r1
20006b12:	469c      	mov	ip, r3
20006b14:	f101 0110 	add.w	r1, r1, #16
20006b18:	f103 0310 	add.w	r3, r3, #16
20006b1c:	f1a4 0410 	sub.w	r4, r4, #16
20006b20:	dce5      	bgt.n	20006aee <memcpy+0x13a>
20006b22:	ebcc 0102 	rsb	r1, ip, r2
20006b26:	2300      	movs	r3, #0
20006b28:	e003      	b.n	20006b32 <memcpy+0x17e>
20006b2a:	58ec      	ldr	r4, [r5, r3]
20006b2c:	f84c 4003 	str.w	r4, [ip, r3]
20006b30:	3304      	adds	r3, #4
20006b32:	195e      	adds	r6, r3, r5
20006b34:	2903      	cmp	r1, #3
20006b36:	eb03 040c 	add.w	r4, r3, ip
20006b3a:	f1a1 0104 	sub.w	r1, r1, #4
20006b3e:	dcf4      	bgt.n	20006b2a <memcpy+0x176>
20006b40:	e77f      	b.n	20006a42 <memcpy+0x8e>
20006b42:	bf00      	nop

20006b44 <memset>:
20006b44:	2a03      	cmp	r2, #3
20006b46:	b2c9      	uxtb	r1, r1
20006b48:	b430      	push	{r4, r5}
20006b4a:	d807      	bhi.n	20006b5c <memset+0x18>
20006b4c:	b122      	cbz	r2, 20006b58 <memset+0x14>
20006b4e:	2300      	movs	r3, #0
20006b50:	54c1      	strb	r1, [r0, r3]
20006b52:	3301      	adds	r3, #1
20006b54:	4293      	cmp	r3, r2
20006b56:	d1fb      	bne.n	20006b50 <memset+0xc>
20006b58:	bc30      	pop	{r4, r5}
20006b5a:	4770      	bx	lr
20006b5c:	eb00 0c02 	add.w	ip, r0, r2
20006b60:	4603      	mov	r3, r0
20006b62:	e001      	b.n	20006b68 <memset+0x24>
20006b64:	f803 1c01 	strb.w	r1, [r3, #-1]
20006b68:	f003 0403 	and.w	r4, r3, #3
20006b6c:	461a      	mov	r2, r3
20006b6e:	3301      	adds	r3, #1
20006b70:	2c00      	cmp	r4, #0
20006b72:	d1f7      	bne.n	20006b64 <memset+0x20>
20006b74:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20006b78:	ebc2 040c 	rsb	r4, r2, ip
20006b7c:	fb03 f301 	mul.w	r3, r3, r1
20006b80:	e01f      	b.n	20006bc2 <memset+0x7e>
20006b82:	f842 3c40 	str.w	r3, [r2, #-64]
20006b86:	f842 3c3c 	str.w	r3, [r2, #-60]
20006b8a:	f842 3c38 	str.w	r3, [r2, #-56]
20006b8e:	f842 3c34 	str.w	r3, [r2, #-52]
20006b92:	f842 3c30 	str.w	r3, [r2, #-48]
20006b96:	f842 3c2c 	str.w	r3, [r2, #-44]
20006b9a:	f842 3c28 	str.w	r3, [r2, #-40]
20006b9e:	f842 3c24 	str.w	r3, [r2, #-36]
20006ba2:	f842 3c20 	str.w	r3, [r2, #-32]
20006ba6:	f842 3c1c 	str.w	r3, [r2, #-28]
20006baa:	f842 3c18 	str.w	r3, [r2, #-24]
20006bae:	f842 3c14 	str.w	r3, [r2, #-20]
20006bb2:	f842 3c10 	str.w	r3, [r2, #-16]
20006bb6:	f842 3c0c 	str.w	r3, [r2, #-12]
20006bba:	f842 3c08 	str.w	r3, [r2, #-8]
20006bbe:	f842 3c04 	str.w	r3, [r2, #-4]
20006bc2:	4615      	mov	r5, r2
20006bc4:	3240      	adds	r2, #64	; 0x40
20006bc6:	2c3f      	cmp	r4, #63	; 0x3f
20006bc8:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20006bcc:	dcd9      	bgt.n	20006b82 <memset+0x3e>
20006bce:	462a      	mov	r2, r5
20006bd0:	ebc5 040c 	rsb	r4, r5, ip
20006bd4:	e007      	b.n	20006be6 <memset+0xa2>
20006bd6:	f842 3c10 	str.w	r3, [r2, #-16]
20006bda:	f842 3c0c 	str.w	r3, [r2, #-12]
20006bde:	f842 3c08 	str.w	r3, [r2, #-8]
20006be2:	f842 3c04 	str.w	r3, [r2, #-4]
20006be6:	4615      	mov	r5, r2
20006be8:	3210      	adds	r2, #16
20006bea:	2c0f      	cmp	r4, #15
20006bec:	f1a4 0410 	sub.w	r4, r4, #16
20006bf0:	dcf1      	bgt.n	20006bd6 <memset+0x92>
20006bf2:	462a      	mov	r2, r5
20006bf4:	ebc5 050c 	rsb	r5, r5, ip
20006bf8:	e001      	b.n	20006bfe <memset+0xba>
20006bfa:	f842 3c04 	str.w	r3, [r2, #-4]
20006bfe:	4614      	mov	r4, r2
20006c00:	3204      	adds	r2, #4
20006c02:	2d03      	cmp	r5, #3
20006c04:	f1a5 0504 	sub.w	r5, r5, #4
20006c08:	dcf7      	bgt.n	20006bfa <memset+0xb6>
20006c0a:	e001      	b.n	20006c10 <memset+0xcc>
20006c0c:	f804 1b01 	strb.w	r1, [r4], #1
20006c10:	4564      	cmp	r4, ip
20006c12:	d3fb      	bcc.n	20006c0c <memset+0xc8>
20006c14:	e7a0      	b.n	20006b58 <memset+0x14>
20006c16:	bf00      	nop

20006c18 <C.48.4660>:
20006c18:	6a10 0000                                   .j..

20006c1c <C.40.4595>:
20006c1c:	6020 0000 4449 454c 0000 0000 2509 0963      `..IDLE.....%c.
20006c2c:	7525 2509 0975 7525 0a0d 0000 2509 0975     %u.%u.%u.....%u.
20006c3c:	2509 2575 0d25 000a 2509 0975 3c09 2531     .%u%%....%u..<1%
20006c4c:	0d25 000a 6d54 2072 7653 0063               %...Tmr Svc.

20006c58 <xHeapStructSize>:
20006c58:	0008 0000                                   ....

20006c5c <pcInterruptPriorityRegisters>:
20006c5c:	e3f0 e000 6b48 545f 6d69 7265 0000 0000     ....Hk_Timer....
20006c6c:	4c50 5f44 6954 656d 0072 0000 4c54 5f4d     PLD_Timer...TLM_
20006c7c:	6154 6b73 545f 6d69 7265 0000 6553 646e     Task_Timer..Send
20006c8c:	7265 545f 6d69 7265 0000 0000               er_Timer....

20006c98 <C.18.3459>:
20006c98:	0100 0100 0202 0303                         ........

20006ca0 <_init>:
20006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20006ca2:	bf00      	nop
20006ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
20006ca6:	bc08      	pop	{r3}
20006ca8:	469e      	mov	lr, r3
20006caa:	4770      	bx	lr

20006cac <_fini>:
20006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20006cae:	bf00      	nop
20006cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
20006cb2:	bc08      	pop	{r3}
20006cb4:	469e      	mov	lr, r3
20006cb6:	4770      	bx	lr

20006cb8 <__frame_dummy_init_array_entry>:
20006cb8:	0305 2000                                   ... 

20006cbc <__do_global_dtors_aux_fini_array_entry>:
20006cbc:	02f1 2000                                   ... 
