
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000072f8  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  200072f8  200072f8  0000f2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006b00  20007358  20007358  0000f358  2**2
                  ALLOC
  3 .stack        00000400  2000de58  2000de58  0000f358  2**0
                  ALLOC
  4 .comment      00000408  00000000  00000000  0000f358  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000b68  00000000  00000000  0000f760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001bfc  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000da80  00000000  00000000  00011ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002173  00000000  00000000  0001f944  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000f05e  00000000  00000000  00021ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000262c  00000000  00000000  00030b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a3d  00000000  00000000  00033144  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003f3d  00000000  00000000  00037b81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000b3013  00000000  00000000  0003babe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  000eead1  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000b08  00000000  00000000  000eeaf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	20003fa1 	.word	0x20003fa1
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	200041d1 	.word	0x200041d1
2000003c:	20004221 	.word	0x20004221
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20000213 	.word	0x20000213
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20000219 	.word	0x20000219
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	20005391 	.word	0x20005391
2000006c:	200053b5 	.word	0x200053b5
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	20004ee1 	.word	0x20004ee1
200000cc:	20004ef5 	.word	0x20004ef5
200000d0:	20004f09 	.word	0x20004f09
200000d4:	20004f1d 	.word	0x20004f1d
200000d8:	20004f31 	.word	0x20004f31
200000dc:	20004f45 	.word	0x20004f45
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>

20000212 <I2C0_IRQHandler>:
20000212:	e7fe      	b.n	20000212 <I2C0_IRQHandler>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>

20000218 <I2C1_IRQHandler>:
20000218:	e7fe      	b.n	20000218 <I2C1_IRQHandler>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	20006b91 	.word	0x20006b91
200002b4:	00000000 	.word	0x00000000
200002b8:	20000000 	.word	0x20000000
200002bc:	20000000 	.word	0x20000000
200002c0:	200072f8 	.word	0x200072f8
200002c4:	200072f8 	.word	0x200072f8
200002c8:	200072f8 	.word	0x200072f8
200002cc:	20007358 	.word	0x20007358
200002d0:	00000000 	.word	0x00000000
200002d4:	20007358 	.word	0x20007358
200002d8:	2000de58 	.word	0x2000de58
200002dc:	20006f9d 	.word	0x20006f9d
200002e0:	2000040d 	.word	0x2000040d
	...

200002f0 <__do_global_dtors_aux>:
200002f0:	f247 3358 	movw	r3, #29528	; 0x7358
200002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	b90a      	cbnz	r2, 20000300 <__do_global_dtors_aux+0x10>
200002fc:	2001      	movs	r0, #1
200002fe:	7018      	strb	r0, [r3, #0]
20000300:	4770      	bx	lr
20000302:	bf00      	nop

20000304 <frame_dummy>:
20000304:	f247 20f8 	movw	r0, #29432	; 0x72f8
20000308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000030c:	b508      	push	{r3, lr}
2000030e:	6803      	ldr	r3, [r0, #0]
20000310:	b12b      	cbz	r3, 2000031e <frame_dummy+0x1a>
20000312:	f240 0300 	movw	r3, #0
20000316:	f2c0 0300 	movt	r3, #0
2000031a:	b103      	cbz	r3, 2000031e <frame_dummy+0x1a>
2000031c:	4798      	blx	r3
2000031e:	bd08      	pop	{r3, pc}

20000320 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
20000320:	b480      	push	{r7}
20000322:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
20000324:	f64e 53fc 	movw	r3, #60924	; 0xedfc
20000328:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000032c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
20000330:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000334:	6812      	ldr	r2, [r2, #0]
20000336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2000033a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
2000033c:	f241 0304 	movw	r3, #4100	; 0x1004
20000340:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000344:	f04f 0200 	mov.w	r2, #0
20000348:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
2000034a:	f241 0300 	movw	r3, #4096	; 0x1000
2000034e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000352:	f241 0200 	movw	r2, #4096	; 0x1000
20000356:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000035a:	6812      	ldr	r2, [r2, #0]
2000035c:	f042 0201 	orr.w	r2, r2, #1
20000360:	601a      	str	r2, [r3, #0]
}
20000362:	46bd      	mov	sp, r7
20000364:	bc80      	pop	{r7}
20000366:	4770      	bx	lr

20000368 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
20000368:	b480      	push	{r7}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
2000036e:	f241 0304 	movw	r3, #4100	; 0x1004
20000372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
2000037a:	f247 335c 	movw	r3, #29532	; 0x735c
2000037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	687a      	ldr	r2, [r7, #4]
20000386:	429a      	cmp	r2, r3
20000388:	d20b      	bcs.n	200003a2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
2000038a:	f247 3360 	movw	r3, #29536	; 0x7360
2000038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	f103 0201 	add.w	r2, r3, #1
20000398:	f247 3360 	movw	r3, #29536	; 0x7360
2000039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003a0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
200003a2:	f247 335c 	movw	r3, #29532	; 0x735c
200003a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003aa:	687a      	ldr	r2, [r7, #4]
200003ac:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
200003ae:	f247 333c 	movw	r3, #29500	; 0x733c
200003b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003b6:	681a      	ldr	r2, [r3, #0]
200003b8:	f641 537f 	movw	r3, #7551	; 0x1d7f
200003bc:	f2c0 432c 	movt	r3, #1068	; 0x42c
200003c0:	429a      	cmp	r2, r3
200003c2:	d80e      	bhi.n	200003e2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	ea4f 3353 	mov.w	r3, r3, lsr #13
200003ca:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
200003cc:	f247 3360 	movw	r3, #29536	; 0x7360
200003d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
200003da:	687a      	ldr	r2, [r7, #4]
200003dc:	4413      	add	r3, r2
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e00d      	b.n	200003fe <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	ea4f 3393 	mov.w	r3, r3, lsr #14
200003e8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
200003ea:	f247 3360 	movw	r3, #29536	; 0x7360
200003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	ea4f 4383 	mov.w	r3, r3, lsl #18
200003f8:	687a      	ldr	r2, [r7, #4]
200003fa:	4413      	add	r3, r2
200003fc:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
200003fe:	687b      	ldr	r3, [r7, #4]
}
20000400:	4618      	mov	r0, r3
20000402:	f107 070c 	add.w	r7, r7, #12
20000406:	46bd      	mov	sp, r7
20000408:	bc80      	pop	{r7}
2000040a:	4770      	bx	lr

2000040c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0


//		demo();


		demo_tasks();
20000410:	f004 fc36 	bl	20004c80 <demo_tasks>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
20000414:	f04f 0300 	mov.w	r3, #0
}
20000418:	4618      	mov	r0, r3
2000041a:	bd80      	pop	{r7, pc}

2000041c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
2000041c:	b480      	push	{r7}
2000041e:	b083      	sub	sp, #12
20000420:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000426:	f383 8811 	msr	BASEPRI, r3
2000042a:	f3bf 8f6f 	isb	sy
2000042e:	f3bf 8f4f 	dsb	sy
20000432:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000434:	e7fe      	b.n	20000434 <vApplicationMallocFailedHook+0x18>
20000436:	bf00      	nop

20000438 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
20000438:	b480      	push	{r7}
2000043a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
2000043c:	46bd      	mov	sp, r7
2000043e:	bc80      	pop	{r7}
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
20000444:	b480      	push	{r7}
20000446:	b085      	sub	sp, #20
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
2000044c:	6039      	str	r1, [r7, #0]
2000044e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000452:	f383 8811 	msr	BASEPRI, r3
20000456:	f3bf 8f6f 	isb	sy
2000045a:	f3bf 8f4f 	dsb	sy
2000045e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000460:	e7fe      	b.n	20000460 <vApplicationStackOverflowHook+0x1c>
20000462:	bf00      	nop

20000464 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
20000464:	b580      	push	{r7, lr}
20000466:	b092      	sub	sp, #72	; 0x48
20000468:	af04      	add	r7, sp, #16
2000046a:	60f8      	str	r0, [r7, #12]
2000046c:	60b9      	str	r1, [r7, #8]
2000046e:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
20000470:	f247 2354 	movw	r3, #29268	; 0x7254
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	881b      	ldrh	r3, [r3, #0]
2000047a:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
2000047c:	f04f 0328 	mov.w	r3, #40	; 0x28
20000480:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
20000484:	f04f 032a 	mov.w	r3, #42	; 0x2a
20000488:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
2000048c:	f04f 032c 	mov.w	r3, #44	; 0x2c
20000490:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
20000494:	f04f 0329 	mov.w	r3, #41	; 0x29
20000498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
2000049c:	f04f 032b 	mov.w	r3, #43	; 0x2b
200004a0:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
200004a4:	f04f 032d 	mov.w	r3, #45	; 0x2d
200004a8:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
200004aa:	f04f 0300 	mov.w	r3, #0
200004ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
200004b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
200004b6:	f04f 0200 	mov.w	r2, #0
200004ba:	9200      	str	r2, [sp, #0]
200004bc:	f64d 4040 	movw	r0, #56384	; 0xdc40
200004c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004c4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200004c8:	461a      	mov	r2, r3
200004ca:	f04f 0302 	mov.w	r3, #2
200004ce:	f005 fb97 	bl	20005c00 <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
200004d2:	f107 0318 	add.w	r3, r7, #24
200004d6:	f04f 0200 	mov.w	r2, #0
200004da:	9200      	str	r2, [sp, #0]
200004dc:	f64d 4040 	movw	r0, #56384	; 0xdc40
200004e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004e4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200004e8:	461a      	mov	r2, r3
200004ea:	f04f 0301 	mov.w	r3, #1
200004ee:	f005 fbf9 	bl	20005ce4 <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200004f2:	f64d 4040 	movw	r0, #56384	; 0xdc40
200004f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004fa:	f04f 0100 	mov.w	r1, #0
200004fe:	f005 fcfb 	bl	20005ef8 <I2C_wait_complete>
20000502:	4603      	mov	r3, r0
20000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000508:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000050c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000510:	4413      	add	r3, r2
20000512:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
20000516:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000051a:	f107 0218 	add.w	r2, r7, #24
2000051e:	9200      	str	r2, [sp, #0]
20000520:	f04f 0201 	mov.w	r2, #1
20000524:	9201      	str	r2, [sp, #4]
20000526:	f04f 0200 	mov.w	r2, #0
2000052a:	9202      	str	r2, [sp, #8]
2000052c:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000534:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000538:	461a      	mov	r2, r3
2000053a:	f04f 0301 	mov.w	r3, #1
2000053e:	f005 fc43 	bl	20005dc8 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000542:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000546:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054a:	f04f 0100 	mov.w	r1, #0
2000054e:	f005 fcd3 	bl	20005ef8 <I2C_wait_complete>
20000552:	4603      	mov	r3, r0
20000554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000558:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000560:	4413      	add	r3, r2
20000562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
20000566:	f107 031c 	add.w	r3, r7, #28
2000056a:	f107 0214 	add.w	r2, r7, #20
2000056e:	9200      	str	r2, [sp, #0]
20000570:	f04f 0201 	mov.w	r2, #1
20000574:	9201      	str	r2, [sp, #4]
20000576:	f04f 0200 	mov.w	r2, #0
2000057a:	9202      	str	r2, [sp, #8]
2000057c:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000584:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000588:	461a      	mov	r2, r3
2000058a:	f04f 0301 	mov.w	r3, #1
2000058e:	f005 fc1b 	bl	20005dc8 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000592:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000596:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059a:	f04f 0100 	mov.w	r1, #0
2000059e:	f005 fcab 	bl	20005ef8 <I2C_wait_complete>
200005a2:	4603      	mov	r3, r0
200005a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200005b0:	4413      	add	r3, r2
200005b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200005b6:	7d3b      	ldrb	r3, [r7, #20]
200005b8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200005bc:	b29a      	uxth	r2, r3
200005be:	7e3b      	ldrb	r3, [r7, #24]
200005c0:	ea42 0303 	orr.w	r3, r2, r3
200005c4:	b29b      	uxth	r3, r3
200005c6:	b29a      	uxth	r2, r3
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	881b      	ldrh	r3, [r3, #0]
200005d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200005d4:	d906      	bls.n	200005e4 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
200005d6:	687b      	ldr	r3, [r7, #4]
200005d8:	881b      	ldrh	r3, [r3, #0]
200005da:	ea6f 0303 	mvn.w	r3, r3
200005de:	b29a      	uxth	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
200005e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200005e8:	f107 0218 	add.w	r2, r7, #24
200005ec:	9200      	str	r2, [sp, #0]
200005ee:	f04f 0201 	mov.w	r2, #1
200005f2:	9201      	str	r2, [sp, #4]
200005f4:	f04f 0200 	mov.w	r2, #0
200005f8:	9202      	str	r2, [sp, #8]
200005fa:	f64d 4040 	movw	r0, #56384	; 0xdc40
200005fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000602:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000606:	461a      	mov	r2, r3
20000608:	f04f 0301 	mov.w	r3, #1
2000060c:	f005 fbdc 	bl	20005dc8 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000610:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000614:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000618:	f04f 0100 	mov.w	r1, #0
2000061c:	f005 fc6c 	bl	20005ef8 <I2C_wait_complete>
20000620:	4603      	mov	r3, r0
20000622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000626:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000062a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000062e:	4413      	add	r3, r2
20000630:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
20000634:	f107 0320 	add.w	r3, r7, #32
20000638:	f107 0214 	add.w	r2, r7, #20
2000063c:	9200      	str	r2, [sp, #0]
2000063e:	f04f 0201 	mov.w	r2, #1
20000642:	9201      	str	r2, [sp, #4]
20000644:	f04f 0200 	mov.w	r2, #0
20000648:	9202      	str	r2, [sp, #8]
2000064a:	f64d 4040 	movw	r0, #56384	; 0xdc40
2000064e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000652:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000656:	461a      	mov	r2, r3
20000658:	f04f 0301 	mov.w	r3, #1
2000065c:	f005 fbb4 	bl	20005dc8 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000660:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000664:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000668:	f04f 0100 	mov.w	r1, #0
2000066c:	f005 fc44 	bl	20005ef8 <I2C_wait_complete>
20000670:	4603      	mov	r3, r0
20000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000676:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000067a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000067e:	4413      	add	r3, r2
20000680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000684:	7d3b      	ldrb	r3, [r7, #20]
20000686:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000068a:	b29a      	uxth	r2, r3
2000068c:	7e3b      	ldrb	r3, [r7, #24]
2000068e:	ea42 0303 	orr.w	r3, r2, r3
20000692:	b29b      	uxth	r3, r3
20000694:	b29a      	uxth	r2, r3
20000696:	68bb      	ldr	r3, [r7, #8]
20000698:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
2000069a:	68bb      	ldr	r3, [r7, #8]
2000069c:	881b      	ldrh	r3, [r3, #0]
2000069e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200006a2:	d906      	bls.n	200006b2 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
200006a4:	68bb      	ldr	r3, [r7, #8]
200006a6:	881b      	ldrh	r3, [r3, #0]
200006a8:	ea6f 0303 	mvn.w	r3, r3
200006ac:	b29a      	uxth	r2, r3
200006ae:	68bb      	ldr	r3, [r7, #8]
200006b0:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
200006b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
200006b6:	f107 0218 	add.w	r2, r7, #24
200006ba:	9200      	str	r2, [sp, #0]
200006bc:	f04f 0201 	mov.w	r2, #1
200006c0:	9201      	str	r2, [sp, #4]
200006c2:	f04f 0200 	mov.w	r2, #0
200006c6:	9202      	str	r2, [sp, #8]
200006c8:	f64d 4040 	movw	r0, #56384	; 0xdc40
200006cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006d0:	f04f 016a 	mov.w	r1, #106	; 0x6a
200006d4:	461a      	mov	r2, r3
200006d6:	f04f 0301 	mov.w	r3, #1
200006da:	f005 fb75 	bl	20005dc8 <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200006de:	f64d 4040 	movw	r0, #56384	; 0xdc40
200006e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006e6:	f04f 0100 	mov.w	r1, #0
200006ea:	f005 fc05 	bl	20005ef8 <I2C_wait_complete>
200006ee:	4603      	mov	r3, r0
200006f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200006f4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200006f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200006fc:	4413      	add	r3, r2
200006fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
20000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000706:	f107 0214 	add.w	r2, r7, #20
2000070a:	9200      	str	r2, [sp, #0]
2000070c:	f04f 0201 	mov.w	r2, #1
20000710:	9201      	str	r2, [sp, #4]
20000712:	f04f 0200 	mov.w	r2, #0
20000716:	9202      	str	r2, [sp, #8]
20000718:	f64d 4040 	movw	r0, #56384	; 0xdc40
2000071c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000720:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000724:	461a      	mov	r2, r3
20000726:	f04f 0301 	mov.w	r3, #1
2000072a:	f005 fb4d 	bl	20005dc8 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000072e:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000732:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000736:	f04f 0100 	mov.w	r1, #0
2000073a:	f005 fbdd 	bl	20005ef8 <I2C_wait_complete>
2000073e:	4603      	mov	r3, r0
20000740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000744:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000074c:	4413      	add	r3, r2
2000074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000752:	7d3b      	ldrb	r3, [r7, #20]
20000754:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000758:	b29a      	uxth	r2, r3
2000075a:	7e3b      	ldrb	r3, [r7, #24]
2000075c:	ea42 0303 	orr.w	r3, r2, r3
20000760:	b29b      	uxth	r3, r3
20000762:	b29a      	uxth	r2, r3
20000764:	68fb      	ldr	r3, [r7, #12]
20000766:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
20000768:	68fb      	ldr	r3, [r7, #12]
2000076a:	881b      	ldrh	r3, [r3, #0]
2000076c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000770:	d906      	bls.n	20000780 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
20000772:	68fb      	ldr	r3, [r7, #12]
20000774:	881b      	ldrh	r3, [r3, #0]
20000776:	ea6f 0303 	mvn.w	r3, r3
2000077a:	b29a      	uxth	r2, r3
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	801a      	strh	r2, [r3, #0]
	}

	return status;
20000780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
20000784:	4618      	mov	r0, r3
20000786:	f107 0738 	add.w	r7, r7, #56	; 0x38
2000078a:	46bd      	mov	sp, r7
2000078c:	bd80      	pop	{r7, pc}
2000078e:	bf00      	nop

20000790 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
20000790:	b580      	push	{r7, lr}
20000792:	b092      	sub	sp, #72	; 0x48
20000794:	af04      	add	r7, sp, #16
20000796:	60f8      	str	r0, [r7, #12]
20000798:	60b9      	str	r1, [r7, #8]
2000079a:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
2000079c:	f247 2350 	movw	r3, #29264	; 0x7250
200007a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007a4:	881b      	ldrh	r3, [r3, #0]
200007a6:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
200007a8:	f04f 0318 	mov.w	r3, #24
200007ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
200007b0:	f04f 031a 	mov.w	r3, #26
200007b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
200007b8:	f04f 031c 	mov.w	r3, #28
200007bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
200007c0:	f04f 0319 	mov.w	r3, #25
200007c4:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
200007c8:	f04f 031b 	mov.w	r3, #27
200007cc:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
200007ce:	f04f 031d 	mov.w	r3, #29
200007d2:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
200007d4:	f04f 036a 	mov.w	r3, #106	; 0x6a
200007d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
200007dc:	f04f 0300 	mov.w	r3, #0
200007e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
200007e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
200007ec:	f107 0114 	add.w	r1, r7, #20
200007f0:	9100      	str	r1, [sp, #0]
200007f2:	f04f 0101 	mov.w	r1, #1
200007f6:	9101      	str	r1, [sp, #4]
200007f8:	f04f 0100 	mov.w	r1, #0
200007fc:	9102      	str	r1, [sp, #8]
200007fe:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000802:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000806:	4611      	mov	r1, r2
20000808:	461a      	mov	r2, r3
2000080a:	f04f 0302 	mov.w	r3, #2
2000080e:	f005 fadb 	bl	20005dc8 <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000812:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000816:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000081a:	f04f 0100 	mov.w	r1, #0
2000081e:	f005 fb6b 	bl	20005ef8 <I2C_wait_complete>
20000822:	4603      	mov	r3, r0
20000824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000828:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000082c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000830:	4413      	add	r3, r2
20000832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
20000836:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000083e:	f107 0114 	add.w	r1, r7, #20
20000842:	9100      	str	r1, [sp, #0]
20000844:	f04f 0101 	mov.w	r1, #1
20000848:	9101      	str	r1, [sp, #4]
2000084a:	f04f 0100 	mov.w	r1, #0
2000084e:	9102      	str	r1, [sp, #8]
20000850:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000854:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000858:	4611      	mov	r1, r2
2000085a:	461a      	mov	r2, r3
2000085c:	f04f 0301 	mov.w	r3, #1
20000860:	f005 fab2 	bl	20005dc8 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000864:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000868:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086c:	f04f 0100 	mov.w	r1, #0
20000870:	f005 fb42 	bl	20005ef8 <I2C_wait_complete>
20000874:	4603      	mov	r3, r0
20000876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
2000087a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000087e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000882:	4413      	add	r3, r2
20000884:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
20000888:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000088c:	f107 0318 	add.w	r3, r7, #24
20000890:	f107 0110 	add.w	r1, r7, #16
20000894:	9100      	str	r1, [sp, #0]
20000896:	f04f 0101 	mov.w	r1, #1
2000089a:	9101      	str	r1, [sp, #4]
2000089c:	f04f 0100 	mov.w	r1, #0
200008a0:	9102      	str	r1, [sp, #8]
200008a2:	f64d 4040 	movw	r0, #56384	; 0xdc40
200008a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008aa:	4611      	mov	r1, r2
200008ac:	461a      	mov	r2, r3
200008ae:	f04f 0301 	mov.w	r3, #1
200008b2:	f005 fa89 	bl	20005dc8 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200008b6:	f64d 4040 	movw	r0, #56384	; 0xdc40
200008ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008be:	f04f 0100 	mov.w	r1, #0
200008c2:	f005 fb19 	bl	20005ef8 <I2C_wait_complete>
200008c6:	4603      	mov	r3, r0
200008c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200008cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200008d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200008d4:	4413      	add	r3, r2
200008d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200008da:	7c3b      	ldrb	r3, [r7, #16]
200008dc:	ea4f 2303 	mov.w	r3, r3, lsl #8
200008e0:	b29a      	uxth	r2, r3
200008e2:	7d3b      	ldrb	r3, [r7, #20]
200008e4:	ea42 0303 	orr.w	r3, r2, r3
200008e8:	b29b      	uxth	r3, r3
200008ea:	b29a      	uxth	r2, r3
200008ec:	68fb      	ldr	r3, [r7, #12]
200008ee:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
200008f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200008f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
200008f8:	f107 0114 	add.w	r1, r7, #20
200008fc:	9100      	str	r1, [sp, #0]
200008fe:	f04f 0101 	mov.w	r1, #1
20000902:	9101      	str	r1, [sp, #4]
20000904:	f04f 0100 	mov.w	r1, #0
20000908:	9102      	str	r1, [sp, #8]
2000090a:	f64d 4040 	movw	r0, #56384	; 0xdc40
2000090e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000912:	4611      	mov	r1, r2
20000914:	461a      	mov	r2, r3
20000916:	f04f 0301 	mov.w	r3, #1
2000091a:	f005 fa55 	bl	20005dc8 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000091e:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000922:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000926:	f04f 0100 	mov.w	r1, #0
2000092a:	f005 fae5 	bl	20005ef8 <I2C_wait_complete>
2000092e:	4603      	mov	r3, r0
20000930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000934:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000093c:	4413      	add	r3, r2
2000093e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
20000942:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000946:	f107 031c 	add.w	r3, r7, #28
2000094a:	f107 0110 	add.w	r1, r7, #16
2000094e:	9100      	str	r1, [sp, #0]
20000950:	f04f 0101 	mov.w	r1, #1
20000954:	9101      	str	r1, [sp, #4]
20000956:	f04f 0100 	mov.w	r1, #0
2000095a:	9102      	str	r1, [sp, #8]
2000095c:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000960:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000964:	4611      	mov	r1, r2
20000966:	461a      	mov	r2, r3
20000968:	f04f 0301 	mov.w	r3, #1
2000096c:	f005 fa2c 	bl	20005dc8 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000970:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000974:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000978:	f04f 0100 	mov.w	r1, #0
2000097c:	f005 fabc 	bl	20005ef8 <I2C_wait_complete>
20000980:	4603      	mov	r3, r0
20000982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000986:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000098a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000098e:	4413      	add	r3, r2
20000990:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000994:	7c3b      	ldrb	r3, [r7, #16]
20000996:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000099a:	b29a      	uxth	r2, r3
2000099c:	7d3b      	ldrb	r3, [r7, #20]
2000099e:	ea42 0303 	orr.w	r3, r2, r3
200009a2:	b29b      	uxth	r3, r3
200009a4:	b29a      	uxth	r2, r3
200009a6:	68bb      	ldr	r3, [r7, #8]
200009a8:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
200009aa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200009b2:	f107 0114 	add.w	r1, r7, #20
200009b6:	9100      	str	r1, [sp, #0]
200009b8:	f04f 0101 	mov.w	r1, #1
200009bc:	9101      	str	r1, [sp, #4]
200009be:	f04f 0100 	mov.w	r1, #0
200009c2:	9102      	str	r1, [sp, #8]
200009c4:	f64d 4040 	movw	r0, #56384	; 0xdc40
200009c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009cc:	4611      	mov	r1, r2
200009ce:	461a      	mov	r2, r3
200009d0:	f04f 0301 	mov.w	r3, #1
200009d4:	f005 f9f8 	bl	20005dc8 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200009d8:	f64d 4040 	movw	r0, #56384	; 0xdc40
200009dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009e0:	f04f 0100 	mov.w	r1, #0
200009e4:	f005 fa88 	bl	20005ef8 <I2C_wait_complete>
200009e8:	4603      	mov	r3, r0
200009ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200009ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200009f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200009f6:	4413      	add	r3, r2
200009f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
200009fc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a00:	f107 0320 	add.w	r3, r7, #32
20000a04:	f107 0110 	add.w	r1, r7, #16
20000a08:	9100      	str	r1, [sp, #0]
20000a0a:	f04f 0101 	mov.w	r1, #1
20000a0e:	9101      	str	r1, [sp, #4]
20000a10:	f04f 0100 	mov.w	r1, #0
20000a14:	9102      	str	r1, [sp, #8]
20000a16:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a1e:	4611      	mov	r1, r2
20000a20:	461a      	mov	r2, r3
20000a22:	f04f 0301 	mov.w	r3, #1
20000a26:	f005 f9cf 	bl	20005dc8 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a2a:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000a2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a32:	f04f 0100 	mov.w	r1, #0
20000a36:	f005 fa5f 	bl	20005ef8 <I2C_wait_complete>
20000a3a:	4603      	mov	r3, r0
20000a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a40:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a48:	4413      	add	r3, r2
20000a4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000a4e:	7c3b      	ldrb	r3, [r7, #16]
20000a50:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000a54:	b29a      	uxth	r2, r3
20000a56:	7d3b      	ldrb	r3, [r7, #20]
20000a58:	ea42 0303 	orr.w	r3, r2, r3
20000a5c:	b29b      	uxth	r3, r3
20000a5e:	b29a      	uxth	r2, r3
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	801a      	strh	r2, [r3, #0]

		return status;
20000a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
20000a68:	4618      	mov	r0, r3
20000a6a:	f107 0738 	add.w	r7, r7, #56	; 0x38
20000a6e:	46bd      	mov	sp, r7
20000a70:	bd80      	pop	{r7, pc}
20000a72:	bf00      	nop

20000a74 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
20000a74:	b580      	push	{r7, lr}
20000a76:	b08a      	sub	sp, #40	; 0x28
20000a78:	af04      	add	r7, sp, #16
20000a7a:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
20000a7c:	f04f 0315 	mov.w	r3, #21
20000a80:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
20000a82:	f04f 0316 	mov.w	r3, #22
20000a86:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
20000a88:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000a8c:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
20000a8e:	7dba      	ldrb	r2, [r7, #22]
20000a90:	f107 0314 	add.w	r3, r7, #20
20000a94:	f107 010c 	add.w	r1, r7, #12
20000a98:	9100      	str	r1, [sp, #0]
20000a9a:	f04f 0101 	mov.w	r1, #1
20000a9e:	9101      	str	r1, [sp, #4]
20000aa0:	f04f 0100 	mov.w	r1, #0
20000aa4:	9102      	str	r1, [sp, #8]
20000aa6:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000aaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aae:	4611      	mov	r1, r2
20000ab0:	461a      	mov	r2, r3
20000ab2:	f04f 0301 	mov.w	r3, #1
20000ab6:	f005 f987 	bl	20005dc8 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000aba:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ac2:	f04f 0100 	mov.w	r1, #0
20000ac6:	f005 fa17 	bl	20005ef8 <I2C_wait_complete>
20000aca:	4603      	mov	r3, r0
20000acc:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
20000ace:	7dba      	ldrb	r2, [r7, #22]
20000ad0:	f107 0310 	add.w	r3, r7, #16
20000ad4:	f107 0108 	add.w	r1, r7, #8
20000ad8:	9100      	str	r1, [sp, #0]
20000ada:	f04f 0101 	mov.w	r1, #1
20000ade:	9101      	str	r1, [sp, #4]
20000ae0:	f04f 0100 	mov.w	r1, #0
20000ae4:	9102      	str	r1, [sp, #8]
20000ae6:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000aea:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aee:	4611      	mov	r1, r2
20000af0:	461a      	mov	r2, r3
20000af2:	f04f 0301 	mov.w	r3, #1
20000af6:	f005 f967 	bl	20005dc8 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000afa:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000afe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b02:	f04f 0100 	mov.w	r1, #0
20000b06:	f005 f9f7 	bl	20005ef8 <I2C_wait_complete>
20000b0a:	4603      	mov	r3, r0
20000b0c:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
20000b0e:	7b3b      	ldrb	r3, [r7, #12]
20000b10:	461a      	mov	r2, r3
20000b12:	7a3b      	ldrb	r3, [r7, #8]
20000b14:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b18:	b29b      	uxth	r3, r3
20000b1a:	ea42 0303 	orr.w	r3, r2, r3
20000b1e:	b29b      	uxth	r3, r3
20000b20:	b29a      	uxth	r2, r3
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	801a      	strh	r2, [r3, #0]

		return 0;
20000b26:	f04f 0300 	mov.w	r3, #0

}
20000b2a:	4618      	mov	r0, r3
20000b2c:	f107 0718 	add.w	r7, r7, #24
20000b30:	46bd      	mov	sp, r7
20000b32:	bd80      	pop	{r7, pc}

20000b34 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
20000b34:	b580      	push	{r7, lr}
20000b36:	b086      	sub	sp, #24
20000b38:	af02      	add	r7, sp, #8
20000b3a:	60b9      	str	r1, [r7, #8]
20000b3c:	4613      	mov	r3, r2
20000b3e:	4602      	mov	r2, r0
20000b40:	73fa      	strb	r2, [r7, #15]
20000b42:	71fb      	strb	r3, [r7, #7]
     count = 0;
20000b44:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b4c:	f04f 0200 	mov.w	r2, #0
20000b50:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000b52:	e032      	b.n	20000bba <vc_write+0x86>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
20000b54:	79fb      	ldrb	r3, [r7, #7]
20000b56:	7bfa      	ldrb	r2, [r7, #15]
20000b58:	f04f 0100 	mov.w	r1, #0
20000b5c:	9100      	str	r1, [sp, #0]
20000b5e:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
20000b62:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b66:	4611      	mov	r1, r2
20000b68:	68ba      	ldr	r2, [r7, #8]
20000b6a:	f005 f849 	bl	20005c00 <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000b6e:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
20000b72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b76:	f04f 0100 	mov.w	r1, #0
20000b7a:	f005 f9bd 	bl	20005ef8 <I2C_wait_complete>
20000b7e:	4603      	mov	r3, r0
20000b80:	461a      	mov	r2, r3
20000b82:	f64d 3366 	movw	r3, #56166	; 0xdb66
20000b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b8a:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000b8c:	f64d 3366 	movw	r3, #56166	; 0xdb66
20000b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b94:	781b      	ldrb	r3, [r3, #0]
20000b96:	2b00      	cmp	r3, #0
20000b98:	d102      	bne.n	20000ba0 <vc_write+0x6c>
            return 0;
20000b9a:	f04f 0300 	mov.w	r3, #0
20000b9e:	e018      	b.n	20000bd2 <vc_write+0x9e>
        }
        count++;
20000ba0:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	f103 0301 	add.w	r3, r3, #1
20000bae:	b2da      	uxtb	r2, r3
20000bb0:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bb8:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
20000bba:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bc2:	781b      	ldrb	r3, [r3, #0]
20000bc4:	2b09      	cmp	r3, #9
20000bc6:	d9c5      	bls.n	20000b54 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000bc8:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bd0:	781b      	ldrb	r3, [r3, #0]

}
20000bd2:	4618      	mov	r0, r3
20000bd4:	f107 0710 	add.w	r7, r7, #16
20000bd8:	46bd      	mov	sp, r7
20000bda:	bd80      	pop	{r7, pc}

20000bdc <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
20000bdc:	b580      	push	{r7, lr}
20000bde:	b086      	sub	sp, #24
20000be0:	af02      	add	r7, sp, #8
20000be2:	60b9      	str	r1, [r7, #8]
20000be4:	4613      	mov	r3, r2
20000be6:	4602      	mov	r2, r0
20000be8:	73fa      	strb	r2, [r7, #15]
20000bea:	71fb      	strb	r3, [r7, #7]
    count = 0;
20000bec:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bf4:	f04f 0200 	mov.w	r2, #0
20000bf8:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000bfa:	e032      	b.n	20000c62 <vc_read+0x86>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
20000bfc:	79fb      	ldrb	r3, [r7, #7]
20000bfe:	7bfa      	ldrb	r2, [r7, #15]
20000c00:	f04f 0100 	mov.w	r1, #0
20000c04:	9100      	str	r1, [sp, #0]
20000c06:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
20000c0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c0e:	4611      	mov	r1, r2
20000c10:	68ba      	ldr	r2, [r7, #8]
20000c12:	f005 f867 	bl	20005ce4 <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000c16:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
20000c1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c1e:	f04f 0100 	mov.w	r1, #0
20000c22:	f005 f969 	bl	20005ef8 <I2C_wait_complete>
20000c26:	4603      	mov	r3, r0
20000c28:	461a      	mov	r2, r3
20000c2a:	f64d 3366 	movw	r3, #56166	; 0xdb66
20000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c32:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000c34:	f64d 3366 	movw	r3, #56166	; 0xdb66
20000c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c3c:	781b      	ldrb	r3, [r3, #0]
20000c3e:	2b00      	cmp	r3, #0
20000c40:	d102      	bne.n	20000c48 <vc_read+0x6c>
            return 0;
20000c42:	f04f 0300 	mov.w	r3, #0
20000c46:	e018      	b.n	20000c7a <vc_read+0x9e>
        }
        count++;
20000c48:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c50:	781b      	ldrb	r3, [r3, #0]
20000c52:	f103 0301 	add.w	r3, r3, #1
20000c56:	b2da      	uxtb	r2, r3
20000c58:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c60:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
20000c62:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c6a:	781b      	ldrb	r3, [r3, #0]
20000c6c:	2b09      	cmp	r3, #9
20000c6e:	d9c5      	bls.n	20000bfc <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000c70:	f64d 3364 	movw	r3, #56164	; 0xdb64
20000c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c78:	781b      	ldrb	r3, [r3, #0]

}
20000c7a:	4618      	mov	r0, r3
20000c7c:	f107 0710 	add.w	r7, r7, #16
20000c80:	46bd      	mov	sp, r7
20000c82:	bd80      	pop	{r7, pc}

20000c84 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
20000c84:	b580      	push	{r7, lr}
20000c86:	b082      	sub	sp, #8
20000c88:	af00      	add	r7, sp, #0
20000c8a:	460b      	mov	r3, r1
20000c8c:	603a      	str	r2, [r7, #0]
20000c8e:	4602      	mov	r2, r0
20000c90:	71fa      	strb	r2, [r7, #7]
20000c92:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
20000c94:	79fa      	ldrb	r2, [r7, #7]
20000c96:	f107 0306 	add.w	r3, r7, #6
20000c9a:	4610      	mov	r0, r2
20000c9c:	4619      	mov	r1, r3
20000c9e:	f04f 0201 	mov.w	r2, #1
20000ca2:	f7ff ff47 	bl	20000b34 <vc_write>
20000ca6:	4603      	mov	r3, r0
20000ca8:	2b09      	cmp	r3, #9
20000caa:	d902      	bls.n	20000cb2 <vc_read_reg+0x2e>
        return 1;
20000cac:	f04f 0301 	mov.w	r3, #1
20000cb0:	e00e      	b.n	20000cd0 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
20000cb2:	79fb      	ldrb	r3, [r7, #7]
20000cb4:	4618      	mov	r0, r3
20000cb6:	6839      	ldr	r1, [r7, #0]
20000cb8:	f04f 0202 	mov.w	r2, #2
20000cbc:	f7ff ff8e 	bl	20000bdc <vc_read>
20000cc0:	4603      	mov	r3, r0
20000cc2:	2b09      	cmp	r3, #9
20000cc4:	d902      	bls.n	20000ccc <vc_read_reg+0x48>
        return 1;
20000cc6:	f04f 0301 	mov.w	r3, #1
20000cca:	e001      	b.n	20000cd0 <vc_read_reg+0x4c>
    }

    return 0;
20000ccc:	f04f 0300 	mov.w	r3, #0
}
20000cd0:	4618      	mov	r0, r3
20000cd2:	f107 0708 	add.w	r7, r7, #8
20000cd6:	46bd      	mov	sp, r7
20000cd8:	bd80      	pop	{r7, pc}
20000cda:	bf00      	nop

20000cdc <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000cdc:	b580      	push	{r7, lr}
20000cde:	b082      	sub	sp, #8
20000ce0:	af00      	add	r7, sp, #0
20000ce2:	460b      	mov	r3, r1
20000ce4:	603a      	str	r2, [r7, #0]
20000ce6:	4602      	mov	r2, r0
20000ce8:	71fa      	strb	r2, [r7, #7]
20000cea:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000cec:	f64d 3360 	movw	r3, #56160	; 0xdb60
20000cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cf4:	f04f 0200 	mov.w	r2, #0
20000cf8:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000cfa:	f64d 3360 	movw	r3, #56160	; 0xdb60
20000cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d02:	f04f 0200 	mov.w	r2, #0
20000d06:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000d08:	f64d 3362 	movw	r3, #56162	; 0xdb62
20000d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d10:	f04f 0200 	mov.w	r2, #0
20000d14:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
20000d16:	79bb      	ldrb	r3, [r7, #6]
20000d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d1c:	b2db      	uxtb	r3, r3
20000d1e:	79fa      	ldrb	r2, [r7, #7]
20000d20:	4610      	mov	r0, r2
20000d22:	4619      	mov	r1, r3
20000d24:	f64d 3260 	movw	r2, #56160	; 0xdb60
20000d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000d2c:	f7ff ffaa 	bl	20000c84 <vc_read_reg>
20000d30:	4603      	mov	r3, r0
20000d32:	2b00      	cmp	r3, #0
20000d34:	d11a      	bne.n	20000d6c <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
20000d36:	f64d 3360 	movw	r3, #56160	; 0xdb60
20000d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d3e:	781b      	ldrb	r3, [r3, #0]
20000d40:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000d44:	b29a      	uxth	r2, r3
20000d46:	f64d 3360 	movw	r3, #56160	; 0xdb60
20000d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d4e:	785b      	ldrb	r3, [r3, #1]
20000d50:	ea42 0303 	orr.w	r3, r2, r3
20000d54:	b29b      	uxth	r3, r3
20000d56:	b29a      	uxth	r2, r3
20000d58:	f64d 3362 	movw	r3, #56162	; 0xdb62
20000d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d60:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000d62:	683b      	ldr	r3, [r7, #0]
20000d64:	f04f 0200 	mov.w	r2, #0
20000d68:	701a      	strb	r2, [r3, #0]
20000d6a:	e00a      	b.n	20000d82 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
20000d6c:	683b      	ldr	r3, [r7, #0]
20000d6e:	f04f 0201 	mov.w	r2, #1
20000d72:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000d74:	f64d 3362 	movw	r3, #56162	; 0xdb62
20000d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d7c:	f04f 0200 	mov.w	r2, #0
20000d80:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000d82:	f64d 3362 	movw	r3, #56162	; 0xdb62
20000d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d8a:	881b      	ldrh	r3, [r3, #0]
}
20000d8c:	4618      	mov	r0, r3
20000d8e:	f107 0708 	add.w	r7, r7, #8
20000d92:	46bd      	mov	sp, r7
20000d94:	bd80      	pop	{r7, pc}
20000d96:	bf00      	nop

20000d98 <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000d98:	b580      	push	{r7, lr}
20000d9a:	b082      	sub	sp, #8
20000d9c:	af00      	add	r7, sp, #0
20000d9e:	460b      	mov	r3, r1
20000da0:	603a      	str	r2, [r7, #0]
20000da2:	4602      	mov	r2, r0
20000da4:	71fa      	strb	r2, [r7, #7]
20000da6:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000da8:	f64d 3360 	movw	r3, #56160	; 0xdb60
20000dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db0:	f04f 0200 	mov.w	r2, #0
20000db4:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000db6:	f64d 3360 	movw	r3, #56160	; 0xdb60
20000dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dbe:	f04f 0200 	mov.w	r2, #0
20000dc2:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000dc4:	f64d 3362 	movw	r3, #56162	; 0xdb62
20000dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dcc:	f04f 0200 	mov.w	r2, #0
20000dd0:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
20000dd2:	79bb      	ldrb	r3, [r7, #6]
20000dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000dd8:	b2db      	uxtb	r3, r3
20000dda:	f103 33ff 	add.w	r3, r3, #4294967295
20000dde:	b2db      	uxtb	r3, r3
20000de0:	79fa      	ldrb	r2, [r7, #7]
20000de2:	4610      	mov	r0, r2
20000de4:	4619      	mov	r1, r3
20000de6:	f64d 3260 	movw	r2, #56160	; 0xdb60
20000dea:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000dee:	f7ff ff49 	bl	20000c84 <vc_read_reg>
20000df2:	4603      	mov	r3, r0
20000df4:	2b00      	cmp	r3, #0
20000df6:	d11a      	bne.n	20000e2e <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
20000df8:	f64d 3360 	movw	r3, #56160	; 0xdb60
20000dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e00:	781b      	ldrb	r3, [r3, #0]
20000e02:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e06:	b29a      	uxth	r2, r3
20000e08:	f64d 3360 	movw	r3, #56160	; 0xdb60
20000e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e10:	785b      	ldrb	r3, [r3, #1]
20000e12:	ea42 0303 	orr.w	r3, r2, r3
20000e16:	b29b      	uxth	r3, r3
20000e18:	b29a      	uxth	r2, r3
20000e1a:	f64d 3362 	movw	r3, #56162	; 0xdb62
20000e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e22:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000e24:	683b      	ldr	r3, [r7, #0]
20000e26:	f04f 0200 	mov.w	r2, #0
20000e2a:	701a      	strb	r2, [r3, #0]
20000e2c:	e00a      	b.n	20000e44 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
20000e2e:	683b      	ldr	r3, [r7, #0]
20000e30:	f04f 0201 	mov.w	r2, #1
20000e34:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000e36:	f64d 3362 	movw	r3, #56162	; 0xdb62
20000e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e3e:	f04f 0200 	mov.w	r2, #0
20000e42:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000e44:	f64d 3362 	movw	r3, #56162	; 0xdb62
20000e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e4c:	881b      	ldrh	r3, [r3, #0]
}
20000e4e:	4618      	mov	r0, r3
20000e50:	f107 0708 	add.w	r7, r7, #8
20000e54:	46bd      	mov	sp, r7
20000e56:	bd80      	pop	{r7, pc}

20000e58 <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
20000e58:	b580      	push	{r7, lr}
20000e5a:	b08c      	sub	sp, #48	; 0x30
20000e5c:	af04      	add	r7, sp, #16
20000e5e:	60f8      	str	r0, [r7, #12]
20000e60:	607b      	str	r3, [r7, #4]
20000e62:	460b      	mov	r3, r1
20000e64:	72fb      	strb	r3, [r7, #11]
20000e66:	4613      	mov	r3, r2
20000e68:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
20000e6a:	7abb      	ldrb	r3, [r7, #10]
20000e6c:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
20000e6e:	7d3b      	ldrb	r3, [r7, #20]
20000e70:	f043 0308 	orr.w	r3, r3, #8
20000e74:	b2db      	uxtb	r3, r3
20000e76:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
20000e78:	7d3b      	ldrb	r3, [r7, #20]
20000e7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000e7e:	b2db      	uxtb	r3, r3
20000e80:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
20000e82:	7afa      	ldrb	r2, [r7, #11]
20000e84:	f107 0314 	add.w	r3, r7, #20
20000e88:	f107 0118 	add.w	r1, r7, #24
20000e8c:	9100      	str	r1, [sp, #0]
20000e8e:	f04f 0102 	mov.w	r1, #2
20000e92:	9101      	str	r1, [sp, #4]
20000e94:	f04f 0100 	mov.w	r1, #0
20000e98:	9102      	str	r1, [sp, #8]
20000e9a:	68f8      	ldr	r0, [r7, #12]
20000e9c:	4611      	mov	r1, r2
20000e9e:	461a      	mov	r2, r3
20000ea0:	f04f 0301 	mov.w	r3, #1
20000ea4:	f004 ff90 	bl	20005dc8 <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
20000ea8:	68f8      	ldr	r0, [r7, #12]
20000eaa:	f04f 0100 	mov.w	r1, #0
20000eae:	f005 f823 	bl	20005ef8 <I2C_wait_complete>
20000eb2:	4603      	mov	r3, r0
20000eb4:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
20000eb6:	7f7b      	ldrb	r3, [r7, #29]
20000eb8:	2b00      	cmp	r3, #0
20000eba:	d004      	beq.n	20000ec6 <get_ADC_value+0x6e>
		*flag = 1;
20000ebc:	687b      	ldr	r3, [r7, #4]
20000ebe:	f04f 0201 	mov.w	r2, #1
20000ec2:	701a      	strb	r2, [r3, #0]
20000ec4:	e012      	b.n	20000eec <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
20000ec6:	7e3b      	ldrb	r3, [r7, #24]
20000ec8:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000ecc:	b29a      	uxth	r2, r3
20000ece:	7e7b      	ldrb	r3, [r7, #25]
20000ed0:	ea42 0303 	orr.w	r3, r2, r3
20000ed4:	b29b      	uxth	r3, r3
20000ed6:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
20000ed8:	8bfb      	ldrh	r3, [r7, #30]
20000eda:	ea4f 5303 	mov.w	r3, r3, lsl #20
20000ede:	ea4f 5313 	mov.w	r3, r3, lsr #20
20000ee2:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
20000ee4:	687b      	ldr	r3, [r7, #4]
20000ee6:	f04f 0200 	mov.w	r2, #0
20000eea:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
20000eec:	8bfb      	ldrh	r3, [r7, #30]
}
20000eee:	4618      	mov	r0, r3
20000ef0:	f107 0720 	add.w	r7, r7, #32
20000ef4:	46bd      	mov	sp, r7
20000ef6:	bd80      	pop	{r7, pc}

20000ef8 <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
20000ef8:	b580      	push	{r7, lr}
20000efa:	b084      	sub	sp, #16
20000efc:	af00      	add	r7, sp, #0
20000efe:	4603      	mov	r3, r0
20000f00:	6039      	str	r1, [r7, #0]
20000f02:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
20000f04:	79fb      	ldrb	r3, [r7, #7]
20000f06:	2b00      	cmp	r3, #0
20000f08:	d10e      	bne.n	20000f28 <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
20000f0a:	683b      	ldr	r3, [r7, #0]
20000f0c:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
20000f0e:	68bb      	ldr	r3, [r7, #8]
20000f10:	6859      	ldr	r1, [r3, #4]
20000f12:	68bb      	ldr	r3, [r7, #8]
20000f14:	689a      	ldr	r2, [r3, #8]
20000f16:	68bb      	ldr	r3, [r7, #8]
20000f18:	7b1b      	ldrb	r3, [r3, #12]
20000f1a:	4608      	mov	r0, r1
20000f1c:	4611      	mov	r1, r2
20000f1e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f22:	f004 fdf7 	bl	20005b14 <I2C_init>
20000f26:	e030      	b.n	20000f8a <init+0x92>
	}
	else if(d == vc_sensor){
20000f28:	79fb      	ldrb	r3, [r7, #7]
20000f2a:	2b0a      	cmp	r3, #10
20000f2c:	d10e      	bne.n	20000f4c <init+0x54>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
20000f2e:	683b      	ldr	r3, [r7, #0]
20000f30:	60fb      	str	r3, [r7, #12]
		I2C_init(vc_pkt->g_core_i2c2, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
20000f32:	68fb      	ldr	r3, [r7, #12]
20000f34:	6859      	ldr	r1, [r3, #4]
20000f36:	68fb      	ldr	r3, [r7, #12]
20000f38:	689a      	ldr	r2, [r3, #8]
20000f3a:	68fb      	ldr	r3, [r7, #12]
20000f3c:	7b1b      	ldrb	r3, [r3, #12]
20000f3e:	4608      	mov	r0, r1
20000f40:	4611      	mov	r1, r2
20000f42:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f46:	f004 fde5 	bl	20005b14 <I2C_init>
20000f4a:	e01e      	b.n	20000f8a <init+0x92>
	}
	else if(d == all){
20000f4c:	79fb      	ldrb	r3, [r7, #7]
20000f4e:	2b0b      	cmp	r3, #11
20000f50:	d11b      	bne.n	20000f8a <init+0x92>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f52:	f64d 4040 	movw	r0, #56384	; 0xdc40
20000f56:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f5a:	f245 0100 	movw	r1, #20480	; 0x5000
20000f5e:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000f62:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f66:	f04f 0300 	mov.w	r3, #0
20000f6a:	f004 fdd3 	bl	20005b14 <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f6e:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
20000f72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f76:	f242 0100 	movw	r1, #8192	; 0x2000
20000f7a:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000f7e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f82:	f04f 0300 	mov.w	r3, #0
20000f86:	f004 fdc5 	bl	20005b14 <I2C_init>
	}
	else{

	}

}
20000f8a:	f107 0710 	add.w	r7, r7, #16
20000f8e:	46bd      	mov	sp, r7
20000f90:	bd80      	pop	{r7, pc}
20000f92:	bf00      	nop

20000f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20000f94:	b480      	push	{r7}
20000f96:	b083      	sub	sp, #12
20000f98:	af00      	add	r7, sp, #0
20000f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	f103 0308 	add.w	r3, r3, #8
20000fa2:	461a      	mov	r2, r3
20000fa4:	687b      	ldr	r3, [r7, #4]
20000fa6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20000fa8:	687b      	ldr	r3, [r7, #4]
20000faa:	f04f 32ff 	mov.w	r2, #4294967295
20000fae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fb0:	687b      	ldr	r3, [r7, #4]
20000fb2:	f103 0308 	add.w	r3, r3, #8
20000fb6:	461a      	mov	r2, r3
20000fb8:	687b      	ldr	r3, [r7, #4]
20000fba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	f103 0308 	add.w	r3, r3, #8
20000fc2:	461a      	mov	r2, r3
20000fc4:	687b      	ldr	r3, [r7, #4]
20000fc6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20000fc8:	687b      	ldr	r3, [r7, #4]
20000fca:	f04f 0200 	mov.w	r2, #0
20000fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20000fd0:	f107 070c 	add.w	r7, r7, #12
20000fd4:	46bd      	mov	sp, r7
20000fd6:	bc80      	pop	{r7}
20000fd8:	4770      	bx	lr
20000fda:	bf00      	nop

20000fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20000fdc:	b480      	push	{r7}
20000fde:	b083      	sub	sp, #12
20000fe0:	af00      	add	r7, sp, #0
20000fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	f04f 0200 	mov.w	r2, #0
20000fea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20000fec:	f107 070c 	add.w	r7, r7, #12
20000ff0:	46bd      	mov	sp, r7
20000ff2:	bc80      	pop	{r7}
20000ff4:	4770      	bx	lr
20000ff6:	bf00      	nop

20000ff8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20000ff8:	b480      	push	{r7}
20000ffa:	b085      	sub	sp, #20
20000ffc:	af00      	add	r7, sp, #0
20000ffe:	6078      	str	r0, [r7, #4]
20001000:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
20001002:	687b      	ldr	r3, [r7, #4]
20001004:	685b      	ldr	r3, [r3, #4]
20001006:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20001008:	683b      	ldr	r3, [r7, #0]
2000100a:	68fa      	ldr	r2, [r7, #12]
2000100c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
2000100e:	68fb      	ldr	r3, [r7, #12]
20001010:	689a      	ldr	r2, [r3, #8]
20001012:	683b      	ldr	r3, [r7, #0]
20001014:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20001016:	68fb      	ldr	r3, [r7, #12]
20001018:	689b      	ldr	r3, [r3, #8]
2000101a:	683a      	ldr	r2, [r7, #0]
2000101c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
2000101e:	68fb      	ldr	r3, [r7, #12]
20001020:	683a      	ldr	r2, [r7, #0]
20001022:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001024:	683b      	ldr	r3, [r7, #0]
20001026:	687a      	ldr	r2, [r7, #4]
20001028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000102a:	687b      	ldr	r3, [r7, #4]
2000102c:	681b      	ldr	r3, [r3, #0]
2000102e:	f103 0201 	add.w	r2, r3, #1
20001032:	687b      	ldr	r3, [r7, #4]
20001034:	601a      	str	r2, [r3, #0]
}
20001036:	f107 0714 	add.w	r7, r7, #20
2000103a:	46bd      	mov	sp, r7
2000103c:	bc80      	pop	{r7}
2000103e:	4770      	bx	lr

20001040 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001040:	b480      	push	{r7}
20001042:	b085      	sub	sp, #20
20001044:	af00      	add	r7, sp, #0
20001046:	6078      	str	r0, [r7, #4]
20001048:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
2000104a:	683b      	ldr	r3, [r7, #0]
2000104c:	681b      	ldr	r3, [r3, #0]
2000104e:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
20001050:	68fb      	ldr	r3, [r7, #12]
20001052:	f1b3 3fff 	cmp.w	r3, #4294967295
20001056:	d103      	bne.n	20001060 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
20001058:	687b      	ldr	r3, [r7, #4]
2000105a:	691b      	ldr	r3, [r3, #16]
2000105c:	60bb      	str	r3, [r7, #8]
2000105e:	e00d      	b.n	2000107c <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001060:	687b      	ldr	r3, [r7, #4]
20001062:	f103 0308 	add.w	r3, r3, #8
20001066:	60bb      	str	r3, [r7, #8]
20001068:	e002      	b.n	20001070 <vListInsert+0x30>
2000106a:	68bb      	ldr	r3, [r7, #8]
2000106c:	685b      	ldr	r3, [r3, #4]
2000106e:	60bb      	str	r3, [r7, #8]
20001070:	68bb      	ldr	r3, [r7, #8]
20001072:	685b      	ldr	r3, [r3, #4]
20001074:	681a      	ldr	r2, [r3, #0]
20001076:	68fb      	ldr	r3, [r7, #12]
20001078:	429a      	cmp	r2, r3
2000107a:	d9f6      	bls.n	2000106a <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
2000107c:	68bb      	ldr	r3, [r7, #8]
2000107e:	685a      	ldr	r2, [r3, #4]
20001080:	683b      	ldr	r3, [r7, #0]
20001082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20001084:	683b      	ldr	r3, [r7, #0]
20001086:	685b      	ldr	r3, [r3, #4]
20001088:	683a      	ldr	r2, [r7, #0]
2000108a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
2000108c:	683b      	ldr	r3, [r7, #0]
2000108e:	68ba      	ldr	r2, [r7, #8]
20001090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20001092:	68bb      	ldr	r3, [r7, #8]
20001094:	683a      	ldr	r2, [r7, #0]
20001096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001098:	683b      	ldr	r3, [r7, #0]
2000109a:	687a      	ldr	r2, [r7, #4]
2000109c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000109e:	687b      	ldr	r3, [r7, #4]
200010a0:	681b      	ldr	r3, [r3, #0]
200010a2:	f103 0201 	add.w	r2, r3, #1
200010a6:	687b      	ldr	r3, [r7, #4]
200010a8:	601a      	str	r2, [r3, #0]
}
200010aa:	f107 0714 	add.w	r7, r7, #20
200010ae:	46bd      	mov	sp, r7
200010b0:	bc80      	pop	{r7}
200010b2:	4770      	bx	lr

200010b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
200010b4:	b480      	push	{r7}
200010b6:	b085      	sub	sp, #20
200010b8:	af00      	add	r7, sp, #0
200010ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
200010bc:	687b      	ldr	r3, [r7, #4]
200010be:	691b      	ldr	r3, [r3, #16]
200010c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
200010c2:	687b      	ldr	r3, [r7, #4]
200010c4:	685b      	ldr	r3, [r3, #4]
200010c6:	687a      	ldr	r2, [r7, #4]
200010c8:	6892      	ldr	r2, [r2, #8]
200010ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	689b      	ldr	r3, [r3, #8]
200010d0:	687a      	ldr	r2, [r7, #4]
200010d2:	6852      	ldr	r2, [r2, #4]
200010d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
200010d6:	68fb      	ldr	r3, [r7, #12]
200010d8:	685a      	ldr	r2, [r3, #4]
200010da:	687b      	ldr	r3, [r7, #4]
200010dc:	429a      	cmp	r2, r3
200010de:	d103      	bne.n	200010e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
200010e0:	687b      	ldr	r3, [r7, #4]
200010e2:	689a      	ldr	r2, [r3, #8]
200010e4:	68fb      	ldr	r3, [r7, #12]
200010e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
200010e8:	687b      	ldr	r3, [r7, #4]
200010ea:	f04f 0200 	mov.w	r2, #0
200010ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
200010f0:	68fb      	ldr	r3, [r7, #12]
200010f2:	681b      	ldr	r3, [r3, #0]
200010f4:	f103 32ff 	add.w	r2, r3, #4294967295
200010f8:	68fb      	ldr	r3, [r7, #12]
200010fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
200010fc:	68fb      	ldr	r3, [r7, #12]
200010fe:	681b      	ldr	r3, [r3, #0]
}
20001100:	4618      	mov	r0, r3
20001102:	f107 0714 	add.w	r7, r7, #20
20001106:	46bd      	mov	sp, r7
20001108:	bc80      	pop	{r7}
2000110a:	4770      	bx	lr

2000110c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
2000110c:	b580      	push	{r7, lr}
2000110e:	b084      	sub	sp, #16
20001110:	af00      	add	r7, sp, #0
20001112:	6078      	str	r0, [r7, #4]
20001114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
2000111a:	68bb      	ldr	r3, [r7, #8]
2000111c:	2b00      	cmp	r3, #0
2000111e:	d109      	bne.n	20001134 <xQueueGenericReset+0x28>
20001120:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001124:	f383 8811 	msr	BASEPRI, r3
20001128:	f3bf 8f6f 	isb	sy
2000112c:	f3bf 8f4f 	dsb	sy
20001130:	60fb      	str	r3, [r7, #12]
20001132:	e7fe      	b.n	20001132 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
20001134:	f002 ffe2 	bl	200040fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
20001138:	68bb      	ldr	r3, [r7, #8]
2000113a:	681a      	ldr	r2, [r3, #0]
2000113c:	68bb      	ldr	r3, [r7, #8]
2000113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001140:	68b9      	ldr	r1, [r7, #8]
20001142:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001144:	fb01 f303 	mul.w	r3, r1, r3
20001148:	441a      	add	r2, r3
2000114a:	68bb      	ldr	r3, [r7, #8]
2000114c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
2000114e:	68bb      	ldr	r3, [r7, #8]
20001150:	f04f 0200 	mov.w	r2, #0
20001154:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
20001156:	68bb      	ldr	r3, [r7, #8]
20001158:	681a      	ldr	r2, [r3, #0]
2000115a:	68bb      	ldr	r3, [r7, #8]
2000115c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
2000115e:	68bb      	ldr	r3, [r7, #8]
20001160:	681a      	ldr	r2, [r3, #0]
20001162:	68bb      	ldr	r3, [r7, #8]
20001164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001166:	f103 33ff 	add.w	r3, r3, #4294967295
2000116a:	68b9      	ldr	r1, [r7, #8]
2000116c:	6c09      	ldr	r1, [r1, #64]	; 0x40
2000116e:	fb01 f303 	mul.w	r3, r1, r3
20001172:	441a      	add	r2, r3
20001174:	68bb      	ldr	r3, [r7, #8]
20001176:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
20001178:	68bb      	ldr	r3, [r7, #8]
2000117a:	f04f 32ff 	mov.w	r2, #4294967295
2000117e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
20001182:	68bb      	ldr	r3, [r7, #8]
20001184:	f04f 32ff 	mov.w	r2, #4294967295
20001188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
2000118c:	683b      	ldr	r3, [r7, #0]
2000118e:	2b00      	cmp	r3, #0
20001190:	d118      	bne.n	200011c4 <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001192:	68bb      	ldr	r3, [r7, #8]
20001194:	691b      	ldr	r3, [r3, #16]
20001196:	2b00      	cmp	r3, #0
20001198:	d021      	beq.n	200011de <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000119a:	68bb      	ldr	r3, [r7, #8]
2000119c:	f103 0310 	add.w	r3, r3, #16
200011a0:	4618      	mov	r0, r3
200011a2:	f001 fb0f 	bl	200027c4 <xTaskRemoveFromEventList>
200011a6:	4603      	mov	r3, r0
200011a8:	2b00      	cmp	r3, #0
200011aa:	d01a      	beq.n	200011e2 <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
200011ac:	f64e 5304 	movw	r3, #60676	; 0xed04
200011b0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200011b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200011b8:	601a      	str	r2, [r3, #0]
200011ba:	f3bf 8f4f 	dsb	sy
200011be:	f3bf 8f6f 	isb	sy
200011c2:	e00f      	b.n	200011e4 <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
200011c4:	68bb      	ldr	r3, [r7, #8]
200011c6:	f103 0310 	add.w	r3, r3, #16
200011ca:	4618      	mov	r0, r3
200011cc:	f7ff fee2 	bl	20000f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
200011d0:	68bb      	ldr	r3, [r7, #8]
200011d2:	f103 0324 	add.w	r3, r3, #36	; 0x24
200011d6:	4618      	mov	r0, r3
200011d8:	f7ff fedc 	bl	20000f94 <vListInitialise>
200011dc:	e002      	b.n	200011e4 <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
200011de:	bf00      	nop
200011e0:	e000      	b.n	200011e4 <xQueueGenericReset+0xd8>
200011e2:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
200011e4:	f002 ffc2 	bl	2000416c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
200011e8:	f04f 0301 	mov.w	r3, #1
}
200011ec:	4618      	mov	r0, r3
200011ee:	f107 0710 	add.w	r7, r7, #16
200011f2:	46bd      	mov	sp, r7
200011f4:	bd80      	pop	{r7, pc}
200011f6:	bf00      	nop

200011f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
200011f8:	b580      	push	{r7, lr}
200011fa:	b08a      	sub	sp, #40	; 0x28
200011fc:	af02      	add	r7, sp, #8
200011fe:	60f8      	str	r0, [r7, #12]
20001200:	60b9      	str	r1, [r7, #8]
20001202:	4613      	mov	r3, r2
20001204:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
20001206:	68fb      	ldr	r3, [r7, #12]
20001208:	2b00      	cmp	r3, #0
2000120a:	d109      	bne.n	20001220 <xQueueGenericCreate+0x28>
2000120c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001210:	f383 8811 	msr	BASEPRI, r3
20001214:	f3bf 8f6f 	isb	sy
20001218:	f3bf 8f4f 	dsb	sy
2000121c:	61fb      	str	r3, [r7, #28]
2000121e:	e7fe      	b.n	2000121e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
20001220:	68bb      	ldr	r3, [r7, #8]
20001222:	2b00      	cmp	r3, #0
20001224:	d103      	bne.n	2000122e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
20001226:	f04f 0300 	mov.w	r3, #0
2000122a:	617b      	str	r3, [r7, #20]
2000122c:	e004      	b.n	20001238 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000122e:	68fb      	ldr	r3, [r7, #12]
20001230:	68ba      	ldr	r2, [r7, #8]
20001232:	fb02 f303 	mul.w	r3, r2, r3
20001236:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
20001238:	697b      	ldr	r3, [r7, #20]
2000123a:	f103 0350 	add.w	r3, r3, #80	; 0x50
2000123e:	4618      	mov	r0, r3
20001240:	f002 fc0e 	bl	20003a60 <pvPortMalloc>
20001244:	4603      	mov	r3, r0
20001246:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
20001248:	693b      	ldr	r3, [r7, #16]
2000124a:	2b00      	cmp	r3, #0
2000124c:	d00b      	beq.n	20001266 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
2000124e:	693b      	ldr	r3, [r7, #16]
20001250:	f103 0350 	add.w	r3, r3, #80	; 0x50
20001254:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
20001256:	79fb      	ldrb	r3, [r7, #7]
20001258:	693a      	ldr	r2, [r7, #16]
2000125a:	9200      	str	r2, [sp, #0]
2000125c:	68f8      	ldr	r0, [r7, #12]
2000125e:	68b9      	ldr	r1, [r7, #8]
20001260:	69ba      	ldr	r2, [r7, #24]
20001262:	f000 f807 	bl	20001274 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
20001266:	693b      	ldr	r3, [r7, #16]
	}
20001268:	4618      	mov	r0, r3
2000126a:	f107 0720 	add.w	r7, r7, #32
2000126e:	46bd      	mov	sp, r7
20001270:	bd80      	pop	{r7, pc}
20001272:	bf00      	nop

20001274 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
20001274:	b580      	push	{r7, lr}
20001276:	b084      	sub	sp, #16
20001278:	af00      	add	r7, sp, #0
2000127a:	60f8      	str	r0, [r7, #12]
2000127c:	60b9      	str	r1, [r7, #8]
2000127e:	607a      	str	r2, [r7, #4]
20001280:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
20001282:	68bb      	ldr	r3, [r7, #8]
20001284:	2b00      	cmp	r3, #0
20001286:	d103      	bne.n	20001290 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
20001288:	69ba      	ldr	r2, [r7, #24]
2000128a:	69bb      	ldr	r3, [r7, #24]
2000128c:	601a      	str	r2, [r3, #0]
2000128e:	e002      	b.n	20001296 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001290:	687a      	ldr	r2, [r7, #4]
20001292:	69bb      	ldr	r3, [r7, #24]
20001294:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
20001296:	69bb      	ldr	r3, [r7, #24]
20001298:	68fa      	ldr	r2, [r7, #12]
2000129a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
2000129c:	69bb      	ldr	r3, [r7, #24]
2000129e:	68ba      	ldr	r2, [r7, #8]
200012a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
200012a2:	69b8      	ldr	r0, [r7, #24]
200012a4:	f04f 0101 	mov.w	r1, #1
200012a8:	f7ff ff30 	bl	2000110c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
200012ac:	69bb      	ldr	r3, [r7, #24]
200012ae:	78fa      	ldrb	r2, [r7, #3]
200012b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
200012b4:	f107 0710 	add.w	r7, r7, #16
200012b8:	46bd      	mov	sp, r7
200012ba:	bd80      	pop	{r7, pc}

200012bc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
200012bc:	b580      	push	{r7, lr}
200012be:	b082      	sub	sp, #8
200012c0:	af00      	add	r7, sp, #0
200012c2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	2b00      	cmp	r3, #0
200012c8:	d014      	beq.n	200012f4 <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	f04f 0200 	mov.w	r2, #0
200012d0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
200012d2:	687b      	ldr	r3, [r7, #4]
200012d4:	f04f 0200 	mov.w	r2, #0
200012d8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
200012da:	687b      	ldr	r3, [r7, #4]
200012dc:	f04f 0200 	mov.w	r2, #0
200012e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
200012e2:	6878      	ldr	r0, [r7, #4]
200012e4:	f04f 0100 	mov.w	r1, #0
200012e8:	f04f 0200 	mov.w	r2, #0
200012ec:	f04f 0300 	mov.w	r3, #0
200012f0:	f000 f820 	bl	20001334 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
200012f4:	f107 0708 	add.w	r7, r7, #8
200012f8:	46bd      	mov	sp, r7
200012fa:	bd80      	pop	{r7, pc}

200012fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
200012fc:	b580      	push	{r7, lr}
200012fe:	b086      	sub	sp, #24
20001300:	af00      	add	r7, sp, #0
20001302:	4603      	mov	r3, r0
20001304:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
20001306:	f04f 0301 	mov.w	r3, #1
2000130a:	613b      	str	r3, [r7, #16]
2000130c:	f04f 0300 	mov.w	r3, #0
20001310:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
20001312:	79fb      	ldrb	r3, [r7, #7]
20001314:	6938      	ldr	r0, [r7, #16]
20001316:	6979      	ldr	r1, [r7, #20]
20001318:	461a      	mov	r2, r3
2000131a:	f7ff ff6d 	bl	200011f8 <xQueueGenericCreate>
2000131e:	4603      	mov	r3, r0
20001320:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
20001322:	68f8      	ldr	r0, [r7, #12]
20001324:	f7ff ffca 	bl	200012bc <prvInitialiseMutex>

		return pxNewQueue;
20001328:	68fb      	ldr	r3, [r7, #12]
	}
2000132a:	4618      	mov	r0, r3
2000132c:	f107 0718 	add.w	r7, r7, #24
20001330:	46bd      	mov	sp, r7
20001332:	bd80      	pop	{r7, pc}

20001334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
20001334:	b580      	push	{r7, lr}
20001336:	b08e      	sub	sp, #56	; 0x38
20001338:	af00      	add	r7, sp, #0
2000133a:	60f8      	str	r0, [r7, #12]
2000133c:	60b9      	str	r1, [r7, #8]
2000133e:	607a      	str	r2, [r7, #4]
20001340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
20001342:	f04f 0300 	mov.w	r3, #0
20001346:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001348:	68fb      	ldr	r3, [r7, #12]
2000134a:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
2000134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000134e:	2b00      	cmp	r3, #0
20001350:	d109      	bne.n	20001366 <xQueueGenericSend+0x32>
20001352:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001356:	f383 8811 	msr	BASEPRI, r3
2000135a:	f3bf 8f6f 	isb	sy
2000135e:	f3bf 8f4f 	dsb	sy
20001362:	62bb      	str	r3, [r7, #40]	; 0x28
20001364:	e7fe      	b.n	20001364 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001366:	68bb      	ldr	r3, [r7, #8]
20001368:	2b00      	cmp	r3, #0
2000136a:	d103      	bne.n	20001374 <xQueueGenericSend+0x40>
2000136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001370:	2b00      	cmp	r3, #0
20001372:	d102      	bne.n	2000137a <xQueueGenericSend+0x46>
20001374:	f04f 0301 	mov.w	r3, #1
20001378:	e001      	b.n	2000137e <xQueueGenericSend+0x4a>
2000137a:	f04f 0300 	mov.w	r3, #0
2000137e:	2b00      	cmp	r3, #0
20001380:	d109      	bne.n	20001396 <xQueueGenericSend+0x62>
20001382:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001386:	f383 8811 	msr	BASEPRI, r3
2000138a:	f3bf 8f6f 	isb	sy
2000138e:	f3bf 8f4f 	dsb	sy
20001392:	62fb      	str	r3, [r7, #44]	; 0x2c
20001394:	e7fe      	b.n	20001394 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001396:	683b      	ldr	r3, [r7, #0]
20001398:	2b02      	cmp	r3, #2
2000139a:	d103      	bne.n	200013a4 <xQueueGenericSend+0x70>
2000139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200013a0:	2b01      	cmp	r3, #1
200013a2:	d102      	bne.n	200013aa <xQueueGenericSend+0x76>
200013a4:	f04f 0301 	mov.w	r3, #1
200013a8:	e001      	b.n	200013ae <xQueueGenericSend+0x7a>
200013aa:	f04f 0300 	mov.w	r3, #0
200013ae:	2b00      	cmp	r3, #0
200013b0:	d109      	bne.n	200013c6 <xQueueGenericSend+0x92>
200013b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200013b6:	f383 8811 	msr	BASEPRI, r3
200013ba:	f3bf 8f6f 	isb	sy
200013be:	f3bf 8f4f 	dsb	sy
200013c2:	633b      	str	r3, [r7, #48]	; 0x30
200013c4:	e7fe      	b.n	200013c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200013c6:	f001 fc05 	bl	20002bd4 <xTaskGetSchedulerState>
200013ca:	4603      	mov	r3, r0
200013cc:	2b00      	cmp	r3, #0
200013ce:	d102      	bne.n	200013d6 <xQueueGenericSend+0xa2>
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	2b00      	cmp	r3, #0
200013d4:	d102      	bne.n	200013dc <xQueueGenericSend+0xa8>
200013d6:	f04f 0301 	mov.w	r3, #1
200013da:	e001      	b.n	200013e0 <xQueueGenericSend+0xac>
200013dc:	f04f 0300 	mov.w	r3, #0
200013e0:	2b00      	cmp	r3, #0
200013e2:	d10a      	bne.n	200013fa <xQueueGenericSend+0xc6>
200013e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200013e8:	f383 8811 	msr	BASEPRI, r3
200013ec:	f3bf 8f6f 	isb	sy
200013f0:	f3bf 8f4f 	dsb	sy
200013f4:	637b      	str	r3, [r7, #52]	; 0x34
200013f6:	e7fe      	b.n	200013f6 <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200013f8:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
200013fa:	f002 fe7f 	bl	200040fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001406:	429a      	cmp	r2, r3
20001408:	d302      	bcc.n	20001410 <xQueueGenericSend+0xdc>
2000140a:	683b      	ldr	r3, [r7, #0]
2000140c:	2b02      	cmp	r3, #2
2000140e:	d134      	bne.n	2000147a <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001410:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001412:	68b9      	ldr	r1, [r7, #8]
20001414:	683a      	ldr	r2, [r7, #0]
20001416:	f000 fa7b 	bl	20001910 <prvCopyDataToQueue>
2000141a:	4603      	mov	r3, r0
2000141c:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001422:	2b00      	cmp	r3, #0
20001424:	d014      	beq.n	20001450 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001428:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000142c:	4618      	mov	r0, r3
2000142e:	f001 f9c9 	bl	200027c4 <xTaskRemoveFromEventList>
20001432:	4603      	mov	r3, r0
20001434:	2b00      	cmp	r3, #0
20001436:	d01a      	beq.n	2000146e <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001438:	f64e 5304 	movw	r3, #60676	; 0xed04
2000143c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001444:	601a      	str	r2, [r3, #0]
20001446:	f3bf 8f4f 	dsb	sy
2000144a:	f3bf 8f6f 	isb	sy
2000144e:	e00f      	b.n	20001470 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
20001450:	6a3b      	ldr	r3, [r7, #32]
20001452:	2b00      	cmp	r3, #0
20001454:	d00c      	beq.n	20001470 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
20001456:	f64e 5304 	movw	r3, #60676	; 0xed04
2000145a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000145e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001462:	601a      	str	r2, [r3, #0]
20001464:	f3bf 8f4f 	dsb	sy
20001468:	f3bf 8f6f 	isb	sy
2000146c:	e000      	b.n	20001470 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
2000146e:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
20001470:	f002 fe7c 	bl	2000416c <vPortExitCritical>
				return pdPASS;
20001474:	f04f 0301 	mov.w	r3, #1
20001478:	e06f      	b.n	2000155a <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
2000147a:	687b      	ldr	r3, [r7, #4]
2000147c:	2b00      	cmp	r3, #0
2000147e:	d104      	bne.n	2000148a <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001480:	f002 fe74 	bl	2000416c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
20001484:	f04f 0300 	mov.w	r3, #0
20001488:	e067      	b.n	2000155a <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
2000148a:	69fb      	ldr	r3, [r7, #28]
2000148c:	2b00      	cmp	r3, #0
2000148e:	d107      	bne.n	200014a0 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001490:	f107 0314 	add.w	r3, r7, #20
20001494:	4618      	mov	r0, r3
20001496:	f001 fa0d 	bl	200028b4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000149a:	f04f 0301 	mov.w	r3, #1
2000149e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
200014a0:	f002 fe64 	bl	2000416c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
200014a4:	f000 fe6e 	bl	20002184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
200014a8:	f002 fe28 	bl	200040fc <vPortEnterCritical>
200014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200014b2:	b2db      	uxtb	r3, r3
200014b4:	b25b      	sxtb	r3, r3
200014b6:	f1b3 3fff 	cmp.w	r3, #4294967295
200014ba:	d104      	bne.n	200014c6 <xQueueGenericSend+0x192>
200014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014be:	f04f 0200 	mov.w	r2, #0
200014c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200014cc:	b2db      	uxtb	r3, r3
200014ce:	b25b      	sxtb	r3, r3
200014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
200014d4:	d104      	bne.n	200014e0 <xQueueGenericSend+0x1ac>
200014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014d8:	f04f 0200 	mov.w	r2, #0
200014dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200014e0:	f002 fe44 	bl	2000416c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200014e4:	f107 0214 	add.w	r2, r7, #20
200014e8:	f107 0304 	add.w	r3, r7, #4
200014ec:	4610      	mov	r0, r2
200014ee:	4619      	mov	r1, r3
200014f0:	f001 fa04 	bl	200028fc <xTaskCheckForTimeOut>
200014f4:	4603      	mov	r3, r0
200014f6:	2b00      	cmp	r3, #0
200014f8:	d128      	bne.n	2000154c <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
200014fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
200014fc:	f000 fb18 	bl	20001b30 <prvIsQueueFull>
20001500:	4603      	mov	r3, r0
20001502:	2b00      	cmp	r3, #0
20001504:	d01c      	beq.n	20001540 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
20001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001508:	f103 0210 	add.w	r2, r3, #16
2000150c:	687b      	ldr	r3, [r7, #4]
2000150e:	4610      	mov	r0, r2
20001510:	4619      	mov	r1, r3
20001512:	f001 f905 	bl	20002720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
20001516:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001518:	f000 fa9a 	bl	20001a50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
2000151c:	f000 fe44 	bl	200021a8 <xTaskResumeAll>
20001520:	4603      	mov	r3, r0
20001522:	2b00      	cmp	r3, #0
20001524:	f47f af68 	bne.w	200013f8 <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
20001528:	f64e 5304 	movw	r3, #60676	; 0xed04
2000152c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001534:	601a      	str	r2, [r3, #0]
20001536:	f3bf 8f4f 	dsb	sy
2000153a:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
2000153e:	e75c      	b.n	200013fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001540:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001542:	f000 fa85 	bl	20001a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001546:	f000 fe2f 	bl	200021a8 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
2000154a:	e756      	b.n	200013fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
2000154c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000154e:	f000 fa7f 	bl	20001a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001552:	f000 fe29 	bl	200021a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
20001556:	f04f 0300 	mov.w	r3, #0
		}
	}
}
2000155a:	4618      	mov	r0, r3
2000155c:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001560:	46bd      	mov	sp, r7
20001562:	bd80      	pop	{r7, pc}

20001564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001564:	b580      	push	{r7, lr}
20001566:	b08e      	sub	sp, #56	; 0x38
20001568:	af00      	add	r7, sp, #0
2000156a:	60f8      	str	r0, [r7, #12]
2000156c:	60b9      	str	r1, [r7, #8]
2000156e:	607a      	str	r2, [r7, #4]
20001570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001572:	68fb      	ldr	r3, [r7, #12]
20001574:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
20001576:	69bb      	ldr	r3, [r7, #24]
20001578:	2b00      	cmp	r3, #0
2000157a:	d109      	bne.n	20001590 <xQueueGenericSendFromISR+0x2c>
2000157c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001580:	f383 8811 	msr	BASEPRI, r3
20001584:	f3bf 8f6f 	isb	sy
20001588:	f3bf 8f4f 	dsb	sy
2000158c:	623b      	str	r3, [r7, #32]
2000158e:	e7fe      	b.n	2000158e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001590:	68bb      	ldr	r3, [r7, #8]
20001592:	2b00      	cmp	r3, #0
20001594:	d103      	bne.n	2000159e <xQueueGenericSendFromISR+0x3a>
20001596:	69bb      	ldr	r3, [r7, #24]
20001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000159a:	2b00      	cmp	r3, #0
2000159c:	d102      	bne.n	200015a4 <xQueueGenericSendFromISR+0x40>
2000159e:	f04f 0301 	mov.w	r3, #1
200015a2:	e001      	b.n	200015a8 <xQueueGenericSendFromISR+0x44>
200015a4:	f04f 0300 	mov.w	r3, #0
200015a8:	2b00      	cmp	r3, #0
200015aa:	d109      	bne.n	200015c0 <xQueueGenericSendFromISR+0x5c>
200015ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015b0:	f383 8811 	msr	BASEPRI, r3
200015b4:	f3bf 8f6f 	isb	sy
200015b8:	f3bf 8f4f 	dsb	sy
200015bc:	627b      	str	r3, [r7, #36]	; 0x24
200015be:	e7fe      	b.n	200015be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
200015c0:	683b      	ldr	r3, [r7, #0]
200015c2:	2b02      	cmp	r3, #2
200015c4:	d103      	bne.n	200015ce <xQueueGenericSendFromISR+0x6a>
200015c6:	69bb      	ldr	r3, [r7, #24]
200015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015ca:	2b01      	cmp	r3, #1
200015cc:	d102      	bne.n	200015d4 <xQueueGenericSendFromISR+0x70>
200015ce:	f04f 0301 	mov.w	r3, #1
200015d2:	e001      	b.n	200015d8 <xQueueGenericSendFromISR+0x74>
200015d4:	f04f 0300 	mov.w	r3, #0
200015d8:	2b00      	cmp	r3, #0
200015da:	d109      	bne.n	200015f0 <xQueueGenericSendFromISR+0x8c>
200015dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015e0:	f383 8811 	msr	BASEPRI, r3
200015e4:	f3bf 8f6f 	isb	sy
200015e8:	f3bf 8f4f 	dsb	sy
200015ec:	62bb      	str	r3, [r7, #40]	; 0x28
200015ee:	e7fe      	b.n	200015ee <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200015f0:	f002 fe58 	bl	200042a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200015f4:	f3ef 8211 	mrs	r2, BASEPRI
200015f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015fc:	f383 8811 	msr	BASEPRI, r3
20001600:	f3bf 8f6f 	isb	sy
20001604:	f3bf 8f4f 	dsb	sy
20001608:	633a      	str	r2, [r7, #48]	; 0x30
2000160a:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
2000160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2000160e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001610:	69bb      	ldr	r3, [r7, #24]
20001612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001614:	69bb      	ldr	r3, [r7, #24]
20001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001618:	429a      	cmp	r2, r3
2000161a:	d302      	bcc.n	20001622 <xQueueGenericSendFromISR+0xbe>
2000161c:	683b      	ldr	r3, [r7, #0]
2000161e:	2b02      	cmp	r3, #2
20001620:	d134      	bne.n	2000168c <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001622:	69bb      	ldr	r3, [r7, #24]
20001624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001628:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
2000162a:	69b8      	ldr	r0, [r7, #24]
2000162c:	68b9      	ldr	r1, [r7, #8]
2000162e:	683a      	ldr	r2, [r7, #0]
20001630:	f000 f96e 	bl	20001910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001634:	f997 301f 	ldrsb.w	r3, [r7, #31]
20001638:	f1b3 3fff 	cmp.w	r3, #4294967295
2000163c:	d114      	bne.n	20001668 <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000163e:	69bb      	ldr	r3, [r7, #24]
20001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001642:	2b00      	cmp	r3, #0
20001644:	d019      	beq.n	2000167a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001646:	69bb      	ldr	r3, [r7, #24]
20001648:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000164c:	4618      	mov	r0, r3
2000164e:	f001 f8b9 	bl	200027c4 <xTaskRemoveFromEventList>
20001652:	4603      	mov	r3, r0
20001654:	2b00      	cmp	r3, #0
20001656:	d012      	beq.n	2000167e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001658:	687b      	ldr	r3, [r7, #4]
2000165a:	2b00      	cmp	r3, #0
2000165c:	d011      	beq.n	20001682 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
2000165e:	687b      	ldr	r3, [r7, #4]
20001660:	f04f 0201 	mov.w	r2, #1
20001664:	601a      	str	r2, [r3, #0]
20001666:	e00d      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001668:	7ffb      	ldrb	r3, [r7, #31]
2000166a:	f103 0301 	add.w	r3, r3, #1
2000166e:	b2db      	uxtb	r3, r3
20001670:	461a      	mov	r2, r3
20001672:	69bb      	ldr	r3, [r7, #24]
20001674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001678:	e004      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
2000167a:	bf00      	nop
2000167c:	e002      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
2000167e:	bf00      	nop
20001680:	e000      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
20001682:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
20001684:	f04f 0301 	mov.w	r3, #1
20001688:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
2000168a:	e002      	b.n	20001692 <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
2000168c:	f04f 0300 	mov.w	r3, #0
20001690:	613b      	str	r3, [r7, #16]
20001692:	697b      	ldr	r3, [r7, #20]
20001694:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001698:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
2000169c:	693b      	ldr	r3, [r7, #16]
}
2000169e:	4618      	mov	r0, r3
200016a0:	f107 0738 	add.w	r7, r7, #56	; 0x38
200016a4:	46bd      	mov	sp, r7
200016a6:	bd80      	pop	{r7, pc}

200016a8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
200016a8:	b580      	push	{r7, lr}
200016aa:	b08e      	sub	sp, #56	; 0x38
200016ac:	af00      	add	r7, sp, #0
200016ae:	60f8      	str	r0, [r7, #12]
200016b0:	60b9      	str	r1, [r7, #8]
200016b2:	607a      	str	r2, [r7, #4]
200016b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
200016b6:	f04f 0300 	mov.w	r3, #0
200016ba:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200016bc:	68fb      	ldr	r3, [r7, #12]
200016be:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
200016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016c2:	2b00      	cmp	r3, #0
200016c4:	d109      	bne.n	200016da <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200016c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200016ca:	f383 8811 	msr	BASEPRI, r3
200016ce:	f3bf 8f6f 	isb	sy
200016d2:	f3bf 8f4f 	dsb	sy
200016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
200016d8:	e7fe      	b.n	200016d8 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
200016da:	68bb      	ldr	r3, [r7, #8]
200016dc:	2b00      	cmp	r3, #0
200016de:	d103      	bne.n	200016e8 <xQueueGenericReceive+0x40>
200016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200016e4:	2b00      	cmp	r3, #0
200016e6:	d102      	bne.n	200016ee <xQueueGenericReceive+0x46>
200016e8:	f04f 0301 	mov.w	r3, #1
200016ec:	e001      	b.n	200016f2 <xQueueGenericReceive+0x4a>
200016ee:	f04f 0300 	mov.w	r3, #0
200016f2:	2b00      	cmp	r3, #0
200016f4:	d109      	bne.n	2000170a <xQueueGenericReceive+0x62>
200016f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200016fa:	f383 8811 	msr	BASEPRI, r3
200016fe:	f3bf 8f6f 	isb	sy
20001702:	f3bf 8f4f 	dsb	sy
20001706:	633b      	str	r3, [r7, #48]	; 0x30
20001708:	e7fe      	b.n	20001708 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
2000170a:	f001 fa63 	bl	20002bd4 <xTaskGetSchedulerState>
2000170e:	4603      	mov	r3, r0
20001710:	2b00      	cmp	r3, #0
20001712:	d102      	bne.n	2000171a <xQueueGenericReceive+0x72>
20001714:	687b      	ldr	r3, [r7, #4]
20001716:	2b00      	cmp	r3, #0
20001718:	d102      	bne.n	20001720 <xQueueGenericReceive+0x78>
2000171a:	f04f 0301 	mov.w	r3, #1
2000171e:	e001      	b.n	20001724 <xQueueGenericReceive+0x7c>
20001720:	f04f 0300 	mov.w	r3, #0
20001724:	2b00      	cmp	r3, #0
20001726:	d10c      	bne.n	20001742 <xQueueGenericReceive+0x9a>
20001728:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000172c:	f383 8811 	msr	BASEPRI, r3
20001730:	f3bf 8f6f 	isb	sy
20001734:	f3bf 8f4f 	dsb	sy
20001738:	637b      	str	r3, [r7, #52]	; 0x34
2000173a:	e7fe      	b.n	2000173a <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
2000173c:	bf00      	nop
2000173e:	e000      	b.n	20001742 <xQueueGenericReceive+0x9a>
20001740:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
20001742:	f002 fcdb 	bl	200040fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000174a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2000174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000174e:	2b00      	cmp	r3, #0
20001750:	d055      	beq.n	200017fe <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
20001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001754:	68db      	ldr	r3, [r3, #12]
20001756:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001758:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000175a:	68b9      	ldr	r1, [r7, #8]
2000175c:	f000 f950 	bl	20001a00 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
20001760:	683b      	ldr	r3, [r7, #0]
20001762:	2b00      	cmp	r3, #0
20001764:	d127      	bne.n	200017b6 <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
20001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001768:	f103 32ff 	add.w	r2, r3, #4294967295
2000176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000176e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001772:	681b      	ldr	r3, [r3, #0]
20001774:	2b00      	cmp	r3, #0
20001776:	d105      	bne.n	20001784 <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
20001778:	f001 fb9c 	bl	20002eb4 <pvTaskIncrementMutexHeldCount>
2000177c:	4603      	mov	r3, r0
2000177e:	461a      	mov	r2, r3
20001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001782:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001786:	691b      	ldr	r3, [r3, #16]
20001788:	2b00      	cmp	r3, #0
2000178a:	d030      	beq.n	200017ee <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000178e:	f103 0310 	add.w	r3, r3, #16
20001792:	4618      	mov	r0, r3
20001794:	f001 f816 	bl	200027c4 <xTaskRemoveFromEventList>
20001798:	4603      	mov	r3, r0
2000179a:	2b00      	cmp	r3, #0
2000179c:	d029      	beq.n	200017f2 <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
2000179e:	f64e 5304 	movw	r3, #60676	; 0xed04
200017a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017aa:	601a      	str	r2, [r3, #0]
200017ac:	f3bf 8f4f 	dsb	sy
200017b0:	f3bf 8f6f 	isb	sy
200017b4:	e01e      	b.n	200017f4 <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
200017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017b8:	6a3a      	ldr	r2, [r7, #32]
200017ba:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
200017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200017c0:	2b00      	cmp	r3, #0
200017c2:	d017      	beq.n	200017f4 <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
200017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017c6:	f103 0324 	add.w	r3, r3, #36	; 0x24
200017ca:	4618      	mov	r0, r3
200017cc:	f000 fffa 	bl	200027c4 <xTaskRemoveFromEventList>
200017d0:	4603      	mov	r3, r0
200017d2:	2b00      	cmp	r3, #0
200017d4:	d00e      	beq.n	200017f4 <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
200017d6:	f64e 5304 	movw	r3, #60676	; 0xed04
200017da:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017e2:	601a      	str	r2, [r3, #0]
200017e4:	f3bf 8f4f 	dsb	sy
200017e8:	f3bf 8f6f 	isb	sy
200017ec:	e002      	b.n	200017f4 <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
200017ee:	bf00      	nop
200017f0:	e000      	b.n	200017f4 <xQueueGenericReceive+0x14c>
200017f2:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
200017f4:	f002 fcba 	bl	2000416c <vPortExitCritical>
				return pdPASS;
200017f8:	f04f 0301 	mov.w	r3, #1
200017fc:	e083      	b.n	20001906 <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
200017fe:	687b      	ldr	r3, [r7, #4]
20001800:	2b00      	cmp	r3, #0
20001802:	d104      	bne.n	2000180e <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001804:	f002 fcb2 	bl	2000416c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001808:	f04f 0300 	mov.w	r3, #0
2000180c:	e07b      	b.n	20001906 <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
2000180e:	69fb      	ldr	r3, [r7, #28]
20001810:	2b00      	cmp	r3, #0
20001812:	d107      	bne.n	20001824 <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001814:	f107 0314 	add.w	r3, r7, #20
20001818:	4618      	mov	r0, r3
2000181a:	f001 f84b 	bl	200028b4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000181e:	f04f 0301 	mov.w	r3, #1
20001822:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001824:	f002 fca2 	bl	2000416c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001828:	f000 fcac 	bl	20002184 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
2000182c:	f002 fc66 	bl	200040fc <vPortEnterCritical>
20001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001836:	b2db      	uxtb	r3, r3
20001838:	b25b      	sxtb	r3, r3
2000183a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000183e:	d104      	bne.n	2000184a <xQueueGenericReceive+0x1a2>
20001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001842:	f04f 0200 	mov.w	r2, #0
20001846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2000184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000184c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001850:	b2db      	uxtb	r3, r3
20001852:	b25b      	sxtb	r3, r3
20001854:	f1b3 3fff 	cmp.w	r3, #4294967295
20001858:	d104      	bne.n	20001864 <xQueueGenericReceive+0x1bc>
2000185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000185c:	f04f 0200 	mov.w	r2, #0
20001860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001864:	f002 fc82 	bl	2000416c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001868:	f107 0214 	add.w	r2, r7, #20
2000186c:	f107 0304 	add.w	r3, r7, #4
20001870:	4610      	mov	r0, r2
20001872:	4619      	mov	r1, r3
20001874:	f001 f842 	bl	200028fc <xTaskCheckForTimeOut>
20001878:	4603      	mov	r3, r0
2000187a:	2b00      	cmp	r3, #0
2000187c:	d135      	bne.n	200018ea <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
2000187e:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001880:	f000 f93c 	bl	20001afc <prvIsQueueEmpty>
20001884:	4603      	mov	r3, r0
20001886:	2b00      	cmp	r3, #0
20001888:	d029      	beq.n	200018de <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2000188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000188c:	681b      	ldr	r3, [r3, #0]
2000188e:	2b00      	cmp	r3, #0
20001890:	d108      	bne.n	200018a4 <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
20001892:	f002 fc33 	bl	200040fc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
20001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001898:	685b      	ldr	r3, [r3, #4]
2000189a:	4618      	mov	r0, r3
2000189c:	f001 f9be 	bl	20002c1c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
200018a0:	f002 fc64 	bl	2000416c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
200018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200018a6:	f103 0224 	add.w	r2, r3, #36	; 0x24
200018aa:	687b      	ldr	r3, [r7, #4]
200018ac:	4610      	mov	r0, r2
200018ae:	4619      	mov	r1, r3
200018b0:	f000 ff36 	bl	20002720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
200018b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018b6:	f000 f8cb 	bl	20001a50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
200018ba:	f000 fc75 	bl	200021a8 <xTaskResumeAll>
200018be:	4603      	mov	r3, r0
200018c0:	2b00      	cmp	r3, #0
200018c2:	f47f af3b 	bne.w	2000173c <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
200018c6:	f64e 5304 	movw	r3, #60676	; 0xed04
200018ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
200018ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200018d2:	601a      	str	r2, [r3, #0]
200018d4:	f3bf 8f4f 	dsb	sy
200018d8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
200018dc:	e731      	b.n	20001742 <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
200018de:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018e0:	f000 f8b6 	bl	20001a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
200018e4:	f000 fc60 	bl	200021a8 <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
200018e8:	e72b      	b.n	20001742 <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
200018ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018ec:	f000 f8b0 	bl	20001a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
200018f0:	f000 fc5a 	bl	200021a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
200018f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018f6:	f000 f901 	bl	20001afc <prvIsQueueEmpty>
200018fa:	4603      	mov	r3, r0
200018fc:	2b00      	cmp	r3, #0
200018fe:	f43f af1f 	beq.w	20001740 <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001902:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
20001906:	4618      	mov	r0, r3
20001908:	f107 0738 	add.w	r7, r7, #56	; 0x38
2000190c:	46bd      	mov	sp, r7
2000190e:	bd80      	pop	{r7, pc}

20001910 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001910:	b580      	push	{r7, lr}
20001912:	b086      	sub	sp, #24
20001914:	af00      	add	r7, sp, #0
20001916:	60f8      	str	r0, [r7, #12]
20001918:	60b9      	str	r1, [r7, #8]
2000191a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
2000191c:	f04f 0300 	mov.w	r3, #0
20001920:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001922:	68fb      	ldr	r3, [r7, #12]
20001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001926:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001928:	68fb      	ldr	r3, [r7, #12]
2000192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000192c:	2b00      	cmp	r3, #0
2000192e:	d10f      	bne.n	20001950 <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001930:	68fb      	ldr	r3, [r7, #12]
20001932:	681b      	ldr	r3, [r3, #0]
20001934:	2b00      	cmp	r3, #0
20001936:	d155      	bne.n	200019e4 <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
20001938:	68fb      	ldr	r3, [r7, #12]
2000193a:	685b      	ldr	r3, [r3, #4]
2000193c:	4618      	mov	r0, r3
2000193e:	f001 fa13 	bl	20002d68 <xTaskPriorityDisinherit>
20001942:	4603      	mov	r3, r0
20001944:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
20001946:	68fb      	ldr	r3, [r7, #12]
20001948:	f04f 0200 	mov.w	r2, #0
2000194c:	605a      	str	r2, [r3, #4]
2000194e:	e04c      	b.n	200019ea <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001950:	687b      	ldr	r3, [r7, #4]
20001952:	2b00      	cmp	r3, #0
20001954:	d11a      	bne.n	2000198c <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
20001956:	68fb      	ldr	r3, [r7, #12]
20001958:	689a      	ldr	r2, [r3, #8]
2000195a:	68fb      	ldr	r3, [r7, #12]
2000195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000195e:	4610      	mov	r0, r2
20001960:	68b9      	ldr	r1, [r7, #8]
20001962:	461a      	mov	r2, r3
20001964:	f005 fb42 	bl	20006fec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
20001968:	68fb      	ldr	r3, [r7, #12]
2000196a:	689a      	ldr	r2, [r3, #8]
2000196c:	68fb      	ldr	r3, [r7, #12]
2000196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001970:	441a      	add	r2, r3
20001972:	68fb      	ldr	r3, [r7, #12]
20001974:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001976:	68fb      	ldr	r3, [r7, #12]
20001978:	689a      	ldr	r2, [r3, #8]
2000197a:	68fb      	ldr	r3, [r7, #12]
2000197c:	685b      	ldr	r3, [r3, #4]
2000197e:	429a      	cmp	r2, r3
20001980:	d332      	bcc.n	200019e8 <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001982:	68fb      	ldr	r3, [r7, #12]
20001984:	681a      	ldr	r2, [r3, #0]
20001986:	68fb      	ldr	r3, [r7, #12]
20001988:	609a      	str	r2, [r3, #8]
2000198a:	e02e      	b.n	200019ea <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000198c:	68fb      	ldr	r3, [r7, #12]
2000198e:	68da      	ldr	r2, [r3, #12]
20001990:	68fb      	ldr	r3, [r7, #12]
20001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001994:	4610      	mov	r0, r2
20001996:	68b9      	ldr	r1, [r7, #8]
20001998:	461a      	mov	r2, r3
2000199a:	f005 fb27 	bl	20006fec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2000199e:	68fb      	ldr	r3, [r7, #12]
200019a0:	68da      	ldr	r2, [r3, #12]
200019a2:	68fb      	ldr	r3, [r7, #12]
200019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200019a6:	f1c3 0300 	rsb	r3, r3, #0
200019aa:	441a      	add	r2, r3
200019ac:	68fb      	ldr	r3, [r7, #12]
200019ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
200019b0:	68fb      	ldr	r3, [r7, #12]
200019b2:	68da      	ldr	r2, [r3, #12]
200019b4:	68fb      	ldr	r3, [r7, #12]
200019b6:	681b      	ldr	r3, [r3, #0]
200019b8:	429a      	cmp	r2, r3
200019ba:	d208      	bcs.n	200019ce <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
200019bc:	68fb      	ldr	r3, [r7, #12]
200019be:	685a      	ldr	r2, [r3, #4]
200019c0:	68fb      	ldr	r3, [r7, #12]
200019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200019c4:	f1c3 0300 	rsb	r3, r3, #0
200019c8:	441a      	add	r2, r3
200019ca:	68fb      	ldr	r3, [r7, #12]
200019cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
200019ce:	687b      	ldr	r3, [r7, #4]
200019d0:	2b02      	cmp	r3, #2
200019d2:	d10a      	bne.n	200019ea <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
200019d4:	697b      	ldr	r3, [r7, #20]
200019d6:	2b00      	cmp	r3, #0
200019d8:	d007      	beq.n	200019ea <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
200019da:	697b      	ldr	r3, [r7, #20]
200019dc:	f103 33ff 	add.w	r3, r3, #4294967295
200019e0:	617b      	str	r3, [r7, #20]
200019e2:	e002      	b.n	200019ea <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
200019e4:	bf00      	nop
200019e6:	e000      	b.n	200019ea <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
200019e8:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
200019ea:	697b      	ldr	r3, [r7, #20]
200019ec:	f103 0201 	add.w	r2, r3, #1
200019f0:	68fb      	ldr	r3, [r7, #12]
200019f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
200019f4:	693b      	ldr	r3, [r7, #16]
}
200019f6:	4618      	mov	r0, r3
200019f8:	f107 0718 	add.w	r7, r7, #24
200019fc:	46bd      	mov	sp, r7
200019fe:	bd80      	pop	{r7, pc}

20001a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001a00:	b580      	push	{r7, lr}
20001a02:	b082      	sub	sp, #8
20001a04:	af00      	add	r7, sp, #0
20001a06:	6078      	str	r0, [r7, #4]
20001a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001a0a:	687b      	ldr	r3, [r7, #4]
20001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a0e:	2b00      	cmp	r3, #0
20001a10:	d019      	beq.n	20001a46 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
20001a12:	687b      	ldr	r3, [r7, #4]
20001a14:	68da      	ldr	r2, [r3, #12]
20001a16:	687b      	ldr	r3, [r7, #4]
20001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a1a:	441a      	add	r2, r3
20001a1c:	687b      	ldr	r3, [r7, #4]
20001a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001a20:	687b      	ldr	r3, [r7, #4]
20001a22:	68da      	ldr	r2, [r3, #12]
20001a24:	687b      	ldr	r3, [r7, #4]
20001a26:	685b      	ldr	r3, [r3, #4]
20001a28:	429a      	cmp	r2, r3
20001a2a:	d303      	bcc.n	20001a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
20001a2c:	687b      	ldr	r3, [r7, #4]
20001a2e:	681a      	ldr	r2, [r3, #0]
20001a30:	687b      	ldr	r3, [r7, #4]
20001a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
20001a34:	687b      	ldr	r3, [r7, #4]
20001a36:	68da      	ldr	r2, [r3, #12]
20001a38:	687b      	ldr	r3, [r7, #4]
20001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a3c:	6838      	ldr	r0, [r7, #0]
20001a3e:	4611      	mov	r1, r2
20001a40:	461a      	mov	r2, r3
20001a42:	f005 fad3 	bl	20006fec <memcpy>
	}
}
20001a46:	f107 0708 	add.w	r7, r7, #8
20001a4a:	46bd      	mov	sp, r7
20001a4c:	bd80      	pop	{r7, pc}
20001a4e:	bf00      	nop

20001a50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001a50:	b580      	push	{r7, lr}
20001a52:	b084      	sub	sp, #16
20001a54:	af00      	add	r7, sp, #0
20001a56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001a58:	f002 fb50 	bl	200040fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001a5c:	687b      	ldr	r3, [r7, #4]
20001a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001a62:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001a64:	e012      	b.n	20001a8c <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001a66:	687b      	ldr	r3, [r7, #4]
20001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001a6a:	2b00      	cmp	r3, #0
20001a6c:	d013      	beq.n	20001a96 <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001a6e:	687b      	ldr	r3, [r7, #4]
20001a70:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001a74:	4618      	mov	r0, r3
20001a76:	f000 fea5 	bl	200027c4 <xTaskRemoveFromEventList>
20001a7a:	4603      	mov	r3, r0
20001a7c:	2b00      	cmp	r3, #0
20001a7e:	d001      	beq.n	20001a84 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001a80:	f000 ffa4 	bl	200029cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001a84:	7bbb      	ldrb	r3, [r7, #14]
20001a86:	f103 33ff 	add.w	r3, r3, #4294967295
20001a8a:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001a90:	2b00      	cmp	r3, #0
20001a92:	dce8      	bgt.n	20001a66 <prvUnlockQueue+0x16>
20001a94:	e000      	b.n	20001a98 <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
20001a96:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001a98:	687b      	ldr	r3, [r7, #4]
20001a9a:	f04f 32ff 	mov.w	r2, #4294967295
20001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001aa2:	f002 fb63 	bl	2000416c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001aa6:	f002 fb29 	bl	200040fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001aaa:	687b      	ldr	r3, [r7, #4]
20001aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ab0:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001ab2:	e012      	b.n	20001ada <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001ab4:	687b      	ldr	r3, [r7, #4]
20001ab6:	691b      	ldr	r3, [r3, #16]
20001ab8:	2b00      	cmp	r3, #0
20001aba:	d013      	beq.n	20001ae4 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001abc:	687b      	ldr	r3, [r7, #4]
20001abe:	f103 0310 	add.w	r3, r3, #16
20001ac2:	4618      	mov	r0, r3
20001ac4:	f000 fe7e 	bl	200027c4 <xTaskRemoveFromEventList>
20001ac8:	4603      	mov	r3, r0
20001aca:	2b00      	cmp	r3, #0
20001acc:	d001      	beq.n	20001ad2 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
20001ace:	f000 ff7d 	bl	200029cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001ad2:	7bfb      	ldrb	r3, [r7, #15]
20001ad4:	f103 33ff 	add.w	r3, r3, #4294967295
20001ad8:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001ade:	2b00      	cmp	r3, #0
20001ae0:	dce8      	bgt.n	20001ab4 <prvUnlockQueue+0x64>
20001ae2:	e000      	b.n	20001ae6 <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
20001ae4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001ae6:	687b      	ldr	r3, [r7, #4]
20001ae8:	f04f 32ff 	mov.w	r2, #4294967295
20001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001af0:	f002 fb3c 	bl	2000416c <vPortExitCritical>
}
20001af4:	f107 0710 	add.w	r7, r7, #16
20001af8:	46bd      	mov	sp, r7
20001afa:	bd80      	pop	{r7, pc}

20001afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001afc:	b580      	push	{r7, lr}
20001afe:	b084      	sub	sp, #16
20001b00:	af00      	add	r7, sp, #0
20001b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001b04:	f002 fafa 	bl	200040fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001b08:	687b      	ldr	r3, [r7, #4]
20001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001b0c:	2b00      	cmp	r3, #0
20001b0e:	d103      	bne.n	20001b18 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
20001b10:	f04f 0301 	mov.w	r3, #1
20001b14:	60fb      	str	r3, [r7, #12]
20001b16:	e002      	b.n	20001b1e <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001b18:	f04f 0300 	mov.w	r3, #0
20001b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001b1e:	f002 fb25 	bl	2000416c <vPortExitCritical>

	return xReturn;
20001b22:	68fb      	ldr	r3, [r7, #12]
}
20001b24:	4618      	mov	r0, r3
20001b26:	f107 0710 	add.w	r7, r7, #16
20001b2a:	46bd      	mov	sp, r7
20001b2c:	bd80      	pop	{r7, pc}
20001b2e:	bf00      	nop

20001b30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001b30:	b580      	push	{r7, lr}
20001b32:	b084      	sub	sp, #16
20001b34:	af00      	add	r7, sp, #0
20001b36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001b38:	f002 fae0 	bl	200040fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001b3c:	687b      	ldr	r3, [r7, #4]
20001b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001b40:	687b      	ldr	r3, [r7, #4]
20001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001b44:	429a      	cmp	r2, r3
20001b46:	d103      	bne.n	20001b50 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
20001b48:	f04f 0301 	mov.w	r3, #1
20001b4c:	60fb      	str	r3, [r7, #12]
20001b4e:	e002      	b.n	20001b56 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
20001b50:	f04f 0300 	mov.w	r3, #0
20001b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001b56:	f002 fb09 	bl	2000416c <vPortExitCritical>

	return xReturn;
20001b5a:	68fb      	ldr	r3, [r7, #12]
}
20001b5c:	4618      	mov	r0, r3
20001b5e:	f107 0710 	add.w	r7, r7, #16
20001b62:	46bd      	mov	sp, r7
20001b64:	bd80      	pop	{r7, pc}
20001b66:	bf00      	nop

20001b68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001b68:	b580      	push	{r7, lr}
20001b6a:	b086      	sub	sp, #24
20001b6c:	af00      	add	r7, sp, #0
20001b6e:	60f8      	str	r0, [r7, #12]
20001b70:	60b9      	str	r1, [r7, #8]
20001b72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001b74:	68fb      	ldr	r3, [r7, #12]
20001b76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001b78:	f002 fac0 	bl	200040fc <vPortEnterCritical>
20001b7c:	697b      	ldr	r3, [r7, #20]
20001b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001b82:	b2db      	uxtb	r3, r3
20001b84:	b25b      	sxtb	r3, r3
20001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
20001b8a:	d104      	bne.n	20001b96 <vQueueWaitForMessageRestricted+0x2e>
20001b8c:	697b      	ldr	r3, [r7, #20]
20001b8e:	f04f 0200 	mov.w	r2, #0
20001b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001b96:	697b      	ldr	r3, [r7, #20]
20001b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001b9c:	b2db      	uxtb	r3, r3
20001b9e:	b25b      	sxtb	r3, r3
20001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
20001ba4:	d104      	bne.n	20001bb0 <vQueueWaitForMessageRestricted+0x48>
20001ba6:	697b      	ldr	r3, [r7, #20]
20001ba8:	f04f 0200 	mov.w	r2, #0
20001bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001bb0:	f002 fadc 	bl	2000416c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20001bb4:	697b      	ldr	r3, [r7, #20]
20001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001bb8:	2b00      	cmp	r3, #0
20001bba:	d107      	bne.n	20001bcc <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20001bbc:	697b      	ldr	r3, [r7, #20]
20001bbe:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001bc2:	4618      	mov	r0, r3
20001bc4:	68b9      	ldr	r1, [r7, #8]
20001bc6:	687a      	ldr	r2, [r7, #4]
20001bc8:	f000 fdd0 	bl	2000276c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20001bcc:	6978      	ldr	r0, [r7, #20]
20001bce:	f7ff ff3f 	bl	20001a50 <prvUnlockQueue>
	}
20001bd2:	f107 0718 	add.w	r7, r7, #24
20001bd6:	46bd      	mov	sp, r7
20001bd8:	bd80      	pop	{r7, pc}
20001bda:	bf00      	nop

20001bdc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20001bdc:	b580      	push	{r7, lr}
20001bde:	b08c      	sub	sp, #48	; 0x30
20001be0:	af04      	add	r7, sp, #16
20001be2:	60f8      	str	r0, [r7, #12]
20001be4:	60b9      	str	r1, [r7, #8]
20001be6:	603b      	str	r3, [r7, #0]
20001be8:	4613      	mov	r3, r2
20001bea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001bec:	88fb      	ldrh	r3, [r7, #6]
20001bee:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001bf2:	4618      	mov	r0, r3
20001bf4:	f001 ff34 	bl	20003a60 <pvPortMalloc>
20001bf8:	4603      	mov	r3, r0
20001bfa:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
20001bfc:	69fb      	ldr	r3, [r7, #28]
20001bfe:	2b00      	cmp	r3, #0
20001c00:	d010      	beq.n	20001c24 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
20001c02:	f04f 005c 	mov.w	r0, #92	; 0x5c
20001c06:	f001 ff2b 	bl	20003a60 <pvPortMalloc>
20001c0a:	4603      	mov	r3, r0
20001c0c:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
20001c0e:	697b      	ldr	r3, [r7, #20]
20001c10:	2b00      	cmp	r3, #0
20001c12:	d003      	beq.n	20001c1c <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20001c14:	697b      	ldr	r3, [r7, #20]
20001c16:	69fa      	ldr	r2, [r7, #28]
20001c18:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20001c1a:	e006      	b.n	20001c2a <xTaskCreate+0x4e>
20001c1c:	69f8      	ldr	r0, [r7, #28]
20001c1e:	f002 f81b 	bl	20003c58 <vPortFree>
20001c22:	e002      	b.n	20001c2a <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
20001c24:	f04f 0300 	mov.w	r3, #0
20001c28:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20001c2a:	697b      	ldr	r3, [r7, #20]
20001c2c:	2b00      	cmp	r3, #0
20001c2e:	d016      	beq.n	20001c5e <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
20001c30:	88fb      	ldrh	r3, [r7, #6]
20001c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001c34:	9200      	str	r2, [sp, #0]
20001c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001c38:	9201      	str	r2, [sp, #4]
20001c3a:	697a      	ldr	r2, [r7, #20]
20001c3c:	9202      	str	r2, [sp, #8]
20001c3e:	f04f 0200 	mov.w	r2, #0
20001c42:	9203      	str	r2, [sp, #12]
20001c44:	68f8      	ldr	r0, [r7, #12]
20001c46:	68b9      	ldr	r1, [r7, #8]
20001c48:	461a      	mov	r2, r3
20001c4a:	683b      	ldr	r3, [r7, #0]
20001c4c:	f000 f810 	bl	20001c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001c50:	6978      	ldr	r0, [r7, #20]
20001c52:	f000 f8a3 	bl	20001d9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20001c56:	f04f 0301 	mov.w	r3, #1
20001c5a:	61bb      	str	r3, [r7, #24]
20001c5c:	e002      	b.n	20001c64 <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
20001c5e:	f04f 33ff 	mov.w	r3, #4294967295
20001c62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
20001c64:	69bb      	ldr	r3, [r7, #24]
	}
20001c66:	4618      	mov	r0, r3
20001c68:	f107 0720 	add.w	r7, r7, #32
20001c6c:	46bd      	mov	sp, r7
20001c6e:	bd80      	pop	{r7, pc}

20001c70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
20001c70:	b580      	push	{r7, lr}
20001c72:	b088      	sub	sp, #32
20001c74:	af00      	add	r7, sp, #0
20001c76:	60f8      	str	r0, [r7, #12]
20001c78:	60b9      	str	r1, [r7, #8]
20001c7a:	607a      	str	r2, [r7, #4]
20001c7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
20001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c82:	687b      	ldr	r3, [r7, #4]
20001c84:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001c88:	4610      	mov	r0, r2
20001c8a:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20001c8e:	461a      	mov	r2, r3
20001c90:	f005 fa74 	bl	2000717c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
20001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c98:	687b      	ldr	r3, [r7, #4]
20001c9a:	f103 33ff 	add.w	r3, r3, #4294967295
20001c9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001ca2:	4413      	add	r3, r2
20001ca4:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
20001ca6:	697b      	ldr	r3, [r7, #20]
20001ca8:	f023 0307 	bic.w	r3, r3, #7
20001cac:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20001cae:	697b      	ldr	r3, [r7, #20]
20001cb0:	f003 0307 	and.w	r3, r3, #7
20001cb4:	2b00      	cmp	r3, #0
20001cb6:	d009      	beq.n	20001ccc <prvInitialiseNewTask+0x5c>
20001cb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001cbc:	f383 8811 	msr	BASEPRI, r3
20001cc0:	f3bf 8f6f 	isb	sy
20001cc4:	f3bf 8f4f 	dsb	sy
20001cc8:	61fb      	str	r3, [r7, #28]
20001cca:	e7fe      	b.n	20001cca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001ccc:	f04f 0300 	mov.w	r3, #0
20001cd0:	61bb      	str	r3, [r7, #24]
20001cd2:	e012      	b.n	20001cfa <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20001cd4:	69b9      	ldr	r1, [r7, #24]
20001cd6:	68ba      	ldr	r2, [r7, #8]
20001cd8:	69bb      	ldr	r3, [r7, #24]
20001cda:	4413      	add	r3, r2
20001cdc:	781a      	ldrb	r2, [r3, #0]
20001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ce0:	440b      	add	r3, r1
20001ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
20001ce6:	68ba      	ldr	r2, [r7, #8]
20001ce8:	69bb      	ldr	r3, [r7, #24]
20001cea:	4413      	add	r3, r2
20001cec:	781b      	ldrb	r3, [r3, #0]
20001cee:	2b00      	cmp	r3, #0
20001cf0:	d007      	beq.n	20001d02 <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001cf2:	69bb      	ldr	r3, [r7, #24]
20001cf4:	f103 0301 	add.w	r3, r3, #1
20001cf8:	61bb      	str	r3, [r7, #24]
20001cfa:	69bb      	ldr	r3, [r7, #24]
20001cfc:	2b09      	cmp	r3, #9
20001cfe:	d9e9      	bls.n	20001cd4 <prvInitialiseNewTask+0x64>
20001d00:	e000      	b.n	20001d04 <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
20001d02:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d06:	f04f 0200 	mov.w	r2, #0
20001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d10:	2b04      	cmp	r3, #4
20001d12:	d902      	bls.n	20001d1a <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20001d14:	f04f 0304 	mov.w	r3, #4
20001d18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001d24:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
20001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d28:	f04f 0200 	mov.w	r2, #0
20001d2c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
20001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d30:	f103 0304 	add.w	r3, r3, #4
20001d34:	4618      	mov	r0, r3
20001d36:	f7ff f951 	bl	20000fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d3c:	f103 0318 	add.w	r3, r3, #24
20001d40:	4618      	mov	r0, r3
20001d42:	f7ff f94b 	bl	20000fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
20001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d4e:	f1c3 0205 	rsb	r2, r3, #5
20001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
20001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
20001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d5e:	f04f 0200 	mov.w	r2, #0
20001d62:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
20001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d66:	f04f 0200 	mov.w	r2, #0
20001d6a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d6e:	f04f 0200 	mov.w	r2, #0
20001d72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
20001d76:	6978      	ldr	r0, [r7, #20]
20001d78:	68f9      	ldr	r1, [r7, #12]
20001d7a:	683a      	ldr	r2, [r7, #0]
20001d7c:	f002 f8b8 	bl	20003ef0 <pxPortInitialiseStack>
20001d80:	4603      	mov	r3, r0
20001d82:	461a      	mov	r2, r3
20001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
20001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001d8a:	2b00      	cmp	r3, #0
20001d8c:	d002      	beq.n	20001d94 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
20001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001d94:	f107 0720 	add.w	r7, r7, #32
20001d98:	46bd      	mov	sp, r7
20001d9a:	bd80      	pop	{r7, pc}

20001d9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20001d9c:	b580      	push	{r7, lr}
20001d9e:	b082      	sub	sp, #8
20001da0:	af00      	add	r7, sp, #0
20001da2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
20001da4:	f002 f9aa 	bl	200040fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20001da8:	f247 433c 	movw	r3, #29756	; 0x743c
20001dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001db0:	681b      	ldr	r3, [r3, #0]
20001db2:	f103 0201 	add.w	r2, r3, #1
20001db6:	f247 433c 	movw	r3, #29756	; 0x743c
20001dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dbe:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
20001dc0:	f247 3364 	movw	r3, #29540	; 0x7364
20001dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dc8:	681b      	ldr	r3, [r3, #0]
20001dca:	2b00      	cmp	r3, #0
20001dcc:	d10f      	bne.n	20001dee <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
20001dce:	f247 3364 	movw	r3, #29540	; 0x7364
20001dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dd6:	687a      	ldr	r2, [r7, #4]
20001dd8:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20001dda:	f247 433c 	movw	r3, #29756	; 0x743c
20001dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001de2:	681b      	ldr	r3, [r3, #0]
20001de4:	2b01      	cmp	r3, #1
20001de6:	d11a      	bne.n	20001e1e <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20001de8:	f000 fe18 	bl	20002a1c <prvInitialiseTaskLists>
20001dec:	e018      	b.n	20001e20 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
20001dee:	f247 4348 	movw	r3, #29768	; 0x7448
20001df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001df6:	681b      	ldr	r3, [r3, #0]
20001df8:	2b00      	cmp	r3, #0
20001dfa:	d111      	bne.n	20001e20 <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
20001dfc:	f247 3364 	movw	r3, #29540	; 0x7364
20001e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e04:	681b      	ldr	r3, [r3, #0]
20001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e08:	687b      	ldr	r3, [r7, #4]
20001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001e0c:	429a      	cmp	r2, r3
20001e0e:	d807      	bhi.n	20001e20 <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
20001e10:	f247 3364 	movw	r3, #29540	; 0x7364
20001e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e18:	687a      	ldr	r2, [r7, #4]
20001e1a:	601a      	str	r2, [r3, #0]
20001e1c:	e000      	b.n	20001e20 <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20001e1e:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20001e20:	f247 4358 	movw	r3, #29784	; 0x7458
20001e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e28:	681b      	ldr	r3, [r3, #0]
20001e2a:	f103 0201 	add.w	r2, r3, #1
20001e2e:	f247 4358 	movw	r3, #29784	; 0x7458
20001e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e36:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
20001e38:	f247 4358 	movw	r3, #29784	; 0x7458
20001e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e40:	681a      	ldr	r2, [r3, #0]
20001e42:	687b      	ldr	r3, [r7, #4]
20001e44:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
20001e46:	687b      	ldr	r3, [r7, #4]
20001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001e4a:	f04f 0201 	mov.w	r2, #1
20001e4e:	fa02 f203 	lsl.w	r2, r2, r3
20001e52:	f247 4344 	movw	r3, #29764	; 0x7444
20001e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e5a:	681b      	ldr	r3, [r3, #0]
20001e5c:	ea42 0203 	orr.w	r2, r2, r3
20001e60:	f247 4344 	movw	r3, #29764	; 0x7444
20001e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e68:	601a      	str	r2, [r3, #0]
20001e6a:	687b      	ldr	r3, [r7, #4]
20001e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e6e:	4613      	mov	r3, r2
20001e70:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001e74:	4413      	add	r3, r2
20001e76:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001e7a:	461a      	mov	r2, r3
20001e7c:	f247 3368 	movw	r3, #29544	; 0x7368
20001e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e84:	441a      	add	r2, r3
20001e86:	687b      	ldr	r3, [r7, #4]
20001e88:	f103 0304 	add.w	r3, r3, #4
20001e8c:	4610      	mov	r0, r2
20001e8e:	4619      	mov	r1, r3
20001e90:	f7ff f8b2 	bl	20000ff8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20001e94:	f002 f96a 	bl	2000416c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
20001e98:	f247 4348 	movw	r3, #29768	; 0x7448
20001e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ea0:	681b      	ldr	r3, [r3, #0]
20001ea2:	2b00      	cmp	r3, #0
20001ea4:	d014      	beq.n	20001ed0 <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20001ea6:	f247 3364 	movw	r3, #29540	; 0x7364
20001eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001eae:	681b      	ldr	r3, [r3, #0]
20001eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001eb2:	687b      	ldr	r3, [r7, #4]
20001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001eb6:	429a      	cmp	r2, r3
20001eb8:	d20a      	bcs.n	20001ed0 <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
20001eba:	f64e 5304 	movw	r3, #60676	; 0xed04
20001ebe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001ec6:	601a      	str	r2, [r3, #0]
20001ec8:	f3bf 8f4f 	dsb	sy
20001ecc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001ed0:	f107 0708 	add.w	r7, r7, #8
20001ed4:	46bd      	mov	sp, r7
20001ed6:	bd80      	pop	{r7, pc}

20001ed8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
20001ed8:	b580      	push	{r7, lr}
20001eda:	b084      	sub	sp, #16
20001edc:	af00      	add	r7, sp, #0
20001ede:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
20001ee0:	f002 f90c 	bl	200040fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
20001ee4:	687b      	ldr	r3, [r7, #4]
20001ee6:	2b00      	cmp	r3, #0
20001ee8:	d105      	bne.n	20001ef6 <uxTaskPriorityGet+0x1e>
20001eea:	f247 3364 	movw	r3, #29540	; 0x7364
20001eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ef2:	681b      	ldr	r3, [r3, #0]
20001ef4:	e000      	b.n	20001ef8 <uxTaskPriorityGet+0x20>
20001ef6:	687b      	ldr	r3, [r7, #4]
20001ef8:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxPriority;
20001efa:	68bb      	ldr	r3, [r7, #8]
20001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001efe:	60fb      	str	r3, [r7, #12]
		}
		taskEXIT_CRITICAL();
20001f00:	f002 f934 	bl	2000416c <vPortExitCritical>

		return uxReturn;
20001f04:	68fb      	ldr	r3, [r7, #12]
	}
20001f06:	4618      	mov	r0, r3
20001f08:	f107 0710 	add.w	r7, r7, #16
20001f0c:	46bd      	mov	sp, r7
20001f0e:	bd80      	pop	{r7, pc}

20001f10 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
20001f10:	b580      	push	{r7, lr}
20001f12:	b088      	sub	sp, #32
20001f14:	af00      	add	r7, sp, #0
20001f16:	6078      	str	r0, [r7, #4]
20001f18:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
20001f1a:	f04f 0300 	mov.w	r3, #0
20001f1e:	61bb      	str	r3, [r7, #24]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
20001f20:	683b      	ldr	r3, [r7, #0]
20001f22:	2b04      	cmp	r3, #4
20001f24:	d909      	bls.n	20001f3a <vTaskPrioritySet+0x2a>
20001f26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001f2a:	f383 8811 	msr	BASEPRI, r3
20001f2e:	f3bf 8f6f 	isb	sy
20001f32:	f3bf 8f4f 	dsb	sy
20001f36:	61fb      	str	r3, [r7, #28]
20001f38:	e7fe      	b.n	20001f38 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20001f3a:	683b      	ldr	r3, [r7, #0]
20001f3c:	2b04      	cmp	r3, #4
20001f3e:	d902      	bls.n	20001f46 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20001f40:	f04f 0304 	mov.w	r3, #4
20001f44:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
20001f46:	f002 f8d9 	bl	200040fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
20001f4a:	687b      	ldr	r3, [r7, #4]
20001f4c:	2b00      	cmp	r3, #0
20001f4e:	d105      	bne.n	20001f5c <vTaskPrioritySet+0x4c>
20001f50:	f247 3364 	movw	r3, #29540	; 0x7364
20001f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f58:	681b      	ldr	r3, [r3, #0]
20001f5a:	e000      	b.n	20001f5e <vTaskPrioritySet+0x4e>
20001f5c:	687b      	ldr	r3, [r7, #4]
20001f5e:	60fb      	str	r3, [r7, #12]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
20001f60:	68fb      	ldr	r3, [r7, #12]
20001f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001f64:	613b      	str	r3, [r7, #16]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
20001f66:	693a      	ldr	r2, [r7, #16]
20001f68:	683b      	ldr	r3, [r7, #0]
20001f6a:	429a      	cmp	r2, r3
20001f6c:	f000 80a9 	beq.w	200020c2 <vTaskPrioritySet+0x1b2>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
20001f70:	683a      	ldr	r2, [r7, #0]
20001f72:	693b      	ldr	r3, [r7, #16]
20001f74:	429a      	cmp	r2, r3
20001f76:	d914      	bls.n	20001fa2 <vTaskPrioritySet+0x92>
				{
					if( pxTCB != pxCurrentTCB )
20001f78:	f247 3364 	movw	r3, #29540	; 0x7364
20001f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f80:	681b      	ldr	r3, [r3, #0]
20001f82:	68fa      	ldr	r2, [r7, #12]
20001f84:	429a      	cmp	r2, r3
20001f86:	d018      	beq.n	20001fba <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
20001f88:	f247 3364 	movw	r3, #29540	; 0x7364
20001f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f90:	681b      	ldr	r3, [r3, #0]
20001f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001f94:	683b      	ldr	r3, [r7, #0]
20001f96:	429a      	cmp	r2, r3
20001f98:	d811      	bhi.n	20001fbe <vTaskPrioritySet+0xae>
						{
							xYieldRequired = pdTRUE;
20001f9a:	f04f 0301 	mov.w	r3, #1
20001f9e:	61bb      	str	r3, [r7, #24]
20001fa0:	e00e      	b.n	20001fc0 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
20001fa2:	f247 3364 	movw	r3, #29540	; 0x7364
20001fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001faa:	681b      	ldr	r3, [r3, #0]
20001fac:	68fa      	ldr	r2, [r7, #12]
20001fae:	429a      	cmp	r2, r3
20001fb0:	d106      	bne.n	20001fc0 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
20001fb2:	f04f 0301 	mov.w	r3, #1
20001fb6:	61bb      	str	r3, [r7, #24]
20001fb8:	e002      	b.n	20001fc0 <vTaskPrioritySet+0xb0>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
20001fba:	bf00      	nop
20001fbc:	e000      	b.n	20001fc0 <vTaskPrioritySet+0xb0>
20001fbe:	bf00      	nop
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
20001fc0:	68fb      	ldr	r3, [r7, #12]
20001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001fc4:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
20001fc6:	68fb      	ldr	r3, [r7, #12]
20001fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20001fca:	68fb      	ldr	r3, [r7, #12]
20001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001fce:	429a      	cmp	r2, r3
20001fd0:	d102      	bne.n	20001fd8 <vTaskPrioritySet+0xc8>
					{
						pxTCB->uxPriority = uxNewPriority;
20001fd2:	68fb      	ldr	r3, [r7, #12]
20001fd4:	683a      	ldr	r2, [r7, #0]
20001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
20001fd8:	68fb      	ldr	r3, [r7, #12]
20001fda:	683a      	ldr	r2, [r7, #0]
20001fdc:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20001fde:	68fb      	ldr	r3, [r7, #12]
20001fe0:	699b      	ldr	r3, [r3, #24]
20001fe2:	2b00      	cmp	r3, #0
20001fe4:	db04      	blt.n	20001ff0 <vTaskPrioritySet+0xe0>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001fe6:	683b      	ldr	r3, [r7, #0]
20001fe8:	f1c3 0205 	rsb	r2, r3, #5
20001fec:	68fb      	ldr	r3, [r7, #12]
20001fee:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20001ff0:	68fb      	ldr	r3, [r7, #12]
20001ff2:	6959      	ldr	r1, [r3, #20]
20001ff4:	697a      	ldr	r2, [r7, #20]
20001ff6:	4613      	mov	r3, r2
20001ff8:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001ffc:	4413      	add	r3, r2
20001ffe:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002002:	461a      	mov	r2, r3
20002004:	f247 3368 	movw	r3, #29544	; 0x7368
20002008:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000200c:	4413      	add	r3, r2
2000200e:	4299      	cmp	r1, r3
20002010:	d102      	bne.n	20002018 <vTaskPrioritySet+0x108>
20002012:	f04f 0301 	mov.w	r3, #1
20002016:	e001      	b.n	2000201c <vTaskPrioritySet+0x10c>
20002018:	f04f 0300 	mov.w	r3, #0
2000201c:	2b00      	cmp	r3, #0
2000201e:	d042      	beq.n	200020a6 <vTaskPrioritySet+0x196>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002020:	68fb      	ldr	r3, [r7, #12]
20002022:	f103 0304 	add.w	r3, r3, #4
20002026:	4618      	mov	r0, r3
20002028:	f7ff f844 	bl	200010b4 <uxListRemove>
2000202c:	4603      	mov	r3, r0
2000202e:	2b00      	cmp	r3, #0
20002030:	d112      	bne.n	20002058 <vTaskPrioritySet+0x148>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
20002032:	697b      	ldr	r3, [r7, #20]
20002034:	f04f 0201 	mov.w	r2, #1
20002038:	fa02 f303 	lsl.w	r3, r2, r3
2000203c:	ea6f 0203 	mvn.w	r2, r3
20002040:	f247 4344 	movw	r3, #29764	; 0x7444
20002044:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002048:	681b      	ldr	r3, [r3, #0]
2000204a:	ea02 0203 	and.w	r2, r2, r3
2000204e:	f247 4344 	movw	r3, #29764	; 0x7444
20002052:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002056:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
20002058:	68fb      	ldr	r3, [r7, #12]
2000205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000205c:	f04f 0201 	mov.w	r2, #1
20002060:	fa02 f203 	lsl.w	r2, r2, r3
20002064:	f247 4344 	movw	r3, #29764	; 0x7444
20002068:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000206c:	681b      	ldr	r3, [r3, #0]
2000206e:	ea42 0203 	orr.w	r2, r2, r3
20002072:	f247 4344 	movw	r3, #29764	; 0x7444
20002076:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000207a:	601a      	str	r2, [r3, #0]
2000207c:	68fb      	ldr	r3, [r7, #12]
2000207e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002080:	4613      	mov	r3, r2
20002082:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002086:	4413      	add	r3, r2
20002088:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000208c:	461a      	mov	r2, r3
2000208e:	f247 3368 	movw	r3, #29544	; 0x7368
20002092:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002096:	441a      	add	r2, r3
20002098:	68fb      	ldr	r3, [r7, #12]
2000209a:	f103 0304 	add.w	r3, r3, #4
2000209e:	4610      	mov	r0, r2
200020a0:	4619      	mov	r1, r3
200020a2:	f7fe ffa9 	bl	20000ff8 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
200020a6:	69bb      	ldr	r3, [r7, #24]
200020a8:	2b00      	cmp	r3, #0
200020aa:	d00a      	beq.n	200020c2 <vTaskPrioritySet+0x1b2>
				{
					taskYIELD_IF_USING_PREEMPTION();
200020ac:	f64e 5304 	movw	r3, #60676	; 0xed04
200020b0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200020b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200020b8:	601a      	str	r2, [r3, #0]
200020ba:	f3bf 8f4f 	dsb	sy
200020be:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
200020c2:	f002 f853 	bl	2000416c <vPortExitCritical>
	}
200020c6:	f107 0720 	add.w	r7, r7, #32
200020ca:	46bd      	mov	sp, r7
200020cc:	bd80      	pop	{r7, pc}
200020ce:	bf00      	nop

200020d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
200020d0:	b580      	push	{r7, lr}
200020d2:	b086      	sub	sp, #24
200020d4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
200020d6:	f04f 0300 	mov.w	r3, #0
200020da:	9300      	str	r3, [sp, #0]
200020dc:	f247 4360 	movw	r3, #29792	; 0x7460
200020e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020e4:	9301      	str	r3, [sp, #4]
200020e6:	f642 10e5 	movw	r0, #10725	; 0x29e5
200020ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
200020ee:	f247 2158 	movw	r1, #29272	; 0x7258
200020f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
200020f6:	f04f 0250 	mov.w	r2, #80	; 0x50
200020fa:	f04f 0300 	mov.w	r3, #0
200020fe:	f7ff fd6d 	bl	20001bdc <xTaskCreate>
20002102:	4603      	mov	r3, r0
20002104:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
20002106:	687b      	ldr	r3, [r7, #4]
20002108:	2b01      	cmp	r3, #1
2000210a:	d103      	bne.n	20002114 <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
2000210c:	f001 f8f4 	bl	200032f8 <xTimerCreateTimerTask>
20002110:	4603      	mov	r3, r0
20002112:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
20002114:	687b      	ldr	r3, [r7, #4]
20002116:	2b01      	cmp	r3, #1
20002118:	d122      	bne.n	20002160 <vTaskStartScheduler+0x90>
2000211a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000211e:	f383 8811 	msr	BASEPRI, r3
20002122:	f3bf 8f6f 	isb	sy
20002126:	f3bf 8f4f 	dsb	sy
2000212a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
2000212c:	f247 435c 	movw	r3, #29788	; 0x745c
20002130:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002134:	f04f 32ff 	mov.w	r2, #4294967295
20002138:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
2000213a:	f247 4348 	movw	r3, #29768	; 0x7448
2000213e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002142:	f04f 0201 	mov.w	r2, #1
20002146:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
20002148:	f247 4340 	movw	r3, #29760	; 0x7440
2000214c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002150:	f04f 0200 	mov.w	r2, #0
20002154:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
20002156:	f7fe f8e3 	bl	20000320 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
2000215a:	f001 ff49 	bl	20003ff0 <xPortStartScheduler>
2000215e:	e00d      	b.n	2000217c <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002160:	687b      	ldr	r3, [r7, #4]
20002162:	f1b3 3fff 	cmp.w	r3, #4294967295
20002166:	d109      	bne.n	2000217c <vTaskStartScheduler+0xac>
20002168:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000216c:	f383 8811 	msr	BASEPRI, r3
20002170:	f3bf 8f6f 	isb	sy
20002174:	f3bf 8f4f 	dsb	sy
20002178:	60fb      	str	r3, [r7, #12]
2000217a:	e7fe      	b.n	2000217a <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
2000217c:	f107 0710 	add.w	r7, r7, #16
20002180:	46bd      	mov	sp, r7
20002182:	bd80      	pop	{r7, pc}

20002184 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
20002184:	b480      	push	{r7}
20002186:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
20002188:	f247 4364 	movw	r3, #29796	; 0x7464
2000218c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002190:	681b      	ldr	r3, [r3, #0]
20002192:	f103 0201 	add.w	r2, r3, #1
20002196:	f247 4364 	movw	r3, #29796	; 0x7464
2000219a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000219e:	601a      	str	r2, [r3, #0]
}
200021a0:	46bd      	mov	sp, r7
200021a2:	bc80      	pop	{r7}
200021a4:	4770      	bx	lr
200021a6:	bf00      	nop

200021a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
200021a8:	b580      	push	{r7, lr}
200021aa:	b084      	sub	sp, #16
200021ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
200021ae:	f04f 0300 	mov.w	r3, #0
200021b2:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
200021b4:	f04f 0300 	mov.w	r3, #0
200021b8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
200021ba:	f247 4364 	movw	r3, #29796	; 0x7464
200021be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021c2:	681b      	ldr	r3, [r3, #0]
200021c4:	2b00      	cmp	r3, #0
200021c6:	d109      	bne.n	200021dc <xTaskResumeAll+0x34>
200021c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200021cc:	f383 8811 	msr	BASEPRI, r3
200021d0:	f3bf 8f6f 	isb	sy
200021d4:	f3bf 8f4f 	dsb	sy
200021d8:	60fb      	str	r3, [r7, #12]
200021da:	e7fe      	b.n	200021da <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
200021dc:	f001 ff8e 	bl	200040fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
200021e0:	f247 4364 	movw	r3, #29796	; 0x7464
200021e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021e8:	681b      	ldr	r3, [r3, #0]
200021ea:	f103 32ff 	add.w	r2, r3, #4294967295
200021ee:	f247 4364 	movw	r3, #29796	; 0x7464
200021f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021f6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200021f8:	f247 4364 	movw	r3, #29796	; 0x7464
200021fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002200:	681b      	ldr	r3, [r3, #0]
20002202:	2b00      	cmp	r3, #0
20002204:	f040 8098 	bne.w	20002338 <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
20002208:	f247 433c 	movw	r3, #29756	; 0x743c
2000220c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002210:	681b      	ldr	r3, [r3, #0]
20002212:	2b00      	cmp	r3, #0
20002214:	f000 8090 	beq.w	20002338 <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002218:	e04a      	b.n	200022b0 <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2000221a:	f247 33fc 	movw	r3, #29692	; 0x73fc
2000221e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002222:	68db      	ldr	r3, [r3, #12]
20002224:	68db      	ldr	r3, [r3, #12]
20002226:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002228:	683b      	ldr	r3, [r7, #0]
2000222a:	f103 0318 	add.w	r3, r3, #24
2000222e:	4618      	mov	r0, r3
20002230:	f7fe ff40 	bl	200010b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002234:	683b      	ldr	r3, [r7, #0]
20002236:	f103 0304 	add.w	r3, r3, #4
2000223a:	4618      	mov	r0, r3
2000223c:	f7fe ff3a 	bl	200010b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20002240:	683b      	ldr	r3, [r7, #0]
20002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002244:	f04f 0201 	mov.w	r2, #1
20002248:	fa02 f203 	lsl.w	r2, r2, r3
2000224c:	f247 4344 	movw	r3, #29764	; 0x7444
20002250:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002254:	681b      	ldr	r3, [r3, #0]
20002256:	ea42 0203 	orr.w	r2, r2, r3
2000225a:	f247 4344 	movw	r3, #29764	; 0x7444
2000225e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002262:	601a      	str	r2, [r3, #0]
20002264:	683b      	ldr	r3, [r7, #0]
20002266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002268:	4613      	mov	r3, r2
2000226a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000226e:	4413      	add	r3, r2
20002270:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002274:	461a      	mov	r2, r3
20002276:	f247 3368 	movw	r3, #29544	; 0x7368
2000227a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000227e:	441a      	add	r2, r3
20002280:	683b      	ldr	r3, [r7, #0]
20002282:	f103 0304 	add.w	r3, r3, #4
20002286:	4610      	mov	r0, r2
20002288:	4619      	mov	r1, r3
2000228a:	f7fe feb5 	bl	20000ff8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2000228e:	683b      	ldr	r3, [r7, #0]
20002290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002292:	f247 3364 	movw	r3, #29540	; 0x7364
20002296:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000229a:	681b      	ldr	r3, [r3, #0]
2000229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000229e:	429a      	cmp	r2, r3
200022a0:	d306      	bcc.n	200022b0 <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
200022a2:	f247 4350 	movw	r3, #29776	; 0x7450
200022a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022aa:	f04f 0201 	mov.w	r2, #1
200022ae:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200022b0:	f247 33fc 	movw	r3, #29692	; 0x73fc
200022b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022b8:	681b      	ldr	r3, [r3, #0]
200022ba:	2b00      	cmp	r3, #0
200022bc:	d1ad      	bne.n	2000221a <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
200022be:	683b      	ldr	r3, [r7, #0]
200022c0:	2b00      	cmp	r3, #0
200022c2:	d001      	beq.n	200022c8 <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
200022c4:	f000 fc58 	bl	20002b78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
200022c8:	f247 434c 	movw	r3, #29772	; 0x744c
200022cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022d0:	681b      	ldr	r3, [r3, #0]
200022d2:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
200022d4:	68bb      	ldr	r3, [r7, #8]
200022d6:	2b00      	cmp	r3, #0
200022d8:	d019      	beq.n	2000230e <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
200022da:	f000 f845 	bl	20002368 <xTaskIncrementTick>
200022de:	4603      	mov	r3, r0
200022e0:	2b00      	cmp	r3, #0
200022e2:	d006      	beq.n	200022f2 <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
200022e4:	f247 4350 	movw	r3, #29776	; 0x7450
200022e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022ec:	f04f 0201 	mov.w	r2, #1
200022f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
200022f2:	68bb      	ldr	r3, [r7, #8]
200022f4:	f103 33ff 	add.w	r3, r3, #4294967295
200022f8:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
200022fa:	68bb      	ldr	r3, [r7, #8]
200022fc:	2b00      	cmp	r3, #0
200022fe:	d1ec      	bne.n	200022da <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
20002300:	f247 434c 	movw	r3, #29772	; 0x744c
20002304:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002308:	f04f 0200 	mov.w	r2, #0
2000230c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
2000230e:	f247 4350 	movw	r3, #29776	; 0x7450
20002312:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002316:	681b      	ldr	r3, [r3, #0]
20002318:	2b00      	cmp	r3, #0
2000231a:	d00d      	beq.n	20002338 <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
2000231c:	f04f 0301 	mov.w	r3, #1
20002320:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
20002322:	f64e 5304 	movw	r3, #60676	; 0xed04
20002326:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000232a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000232e:	601a      	str	r2, [r3, #0]
20002330:	f3bf 8f4f 	dsb	sy
20002334:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002338:	f001 ff18 	bl	2000416c <vPortExitCritical>

	return xAlreadyYielded;
2000233c:	687b      	ldr	r3, [r7, #4]
}
2000233e:	4618      	mov	r0, r3
20002340:	f107 0710 	add.w	r7, r7, #16
20002344:	46bd      	mov	sp, r7
20002346:	bd80      	pop	{r7, pc}

20002348 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002348:	b480      	push	{r7}
2000234a:	b083      	sub	sp, #12
2000234c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
2000234e:	f247 4340 	movw	r3, #29760	; 0x7440
20002352:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002356:	681b      	ldr	r3, [r3, #0]
20002358:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
2000235a:	687b      	ldr	r3, [r7, #4]
}
2000235c:	4618      	mov	r0, r3
2000235e:	f107 070c 	add.w	r7, r7, #12
20002362:	46bd      	mov	sp, r7
20002364:	bc80      	pop	{r7}
20002366:	4770      	bx	lr

20002368 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
20002368:	b580      	push	{r7, lr}
2000236a:	b086      	sub	sp, #24
2000236c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
2000236e:	f04f 0300 	mov.w	r3, #0
20002372:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002374:	f247 4364 	movw	r3, #29796	; 0x7464
20002378:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000237c:	681b      	ldr	r3, [r3, #0]
2000237e:	2b00      	cmp	r3, #0
20002380:	f040 80dc 	bne.w	2000253c <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
20002384:	f247 4340 	movw	r3, #29760	; 0x7440
20002388:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000238c:	681b      	ldr	r3, [r3, #0]
2000238e:	f103 0301 	add.w	r3, r3, #1
20002392:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
20002394:	f247 4340 	movw	r3, #29760	; 0x7440
20002398:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000239c:	68fa      	ldr	r2, [r7, #12]
2000239e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
200023a0:	68fb      	ldr	r3, [r7, #12]
200023a2:	2b00      	cmp	r3, #0
200023a4:	d135      	bne.n	20002412 <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
200023a6:	f247 33f4 	movw	r3, #29684	; 0x73f4
200023aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023ae:	681b      	ldr	r3, [r3, #0]
200023b0:	681b      	ldr	r3, [r3, #0]
200023b2:	2b00      	cmp	r3, #0
200023b4:	d009      	beq.n	200023ca <xTaskIncrementTick+0x62>
200023b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200023ba:	f383 8811 	msr	BASEPRI, r3
200023be:	f3bf 8f6f 	isb	sy
200023c2:	f3bf 8f4f 	dsb	sy
200023c6:	617b      	str	r3, [r7, #20]
200023c8:	e7fe      	b.n	200023c8 <xTaskIncrementTick+0x60>
200023ca:	f247 33f4 	movw	r3, #29684	; 0x73f4
200023ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023d2:	681b      	ldr	r3, [r3, #0]
200023d4:	613b      	str	r3, [r7, #16]
200023d6:	f247 33f8 	movw	r3, #29688	; 0x73f8
200023da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023de:	681a      	ldr	r2, [r3, #0]
200023e0:	f247 33f4 	movw	r3, #29684	; 0x73f4
200023e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023e8:	601a      	str	r2, [r3, #0]
200023ea:	f247 33f8 	movw	r3, #29688	; 0x73f8
200023ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023f2:	693a      	ldr	r2, [r7, #16]
200023f4:	601a      	str	r2, [r3, #0]
200023f6:	f247 4354 	movw	r3, #29780	; 0x7454
200023fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023fe:	681b      	ldr	r3, [r3, #0]
20002400:	f103 0201 	add.w	r2, r3, #1
20002404:	f247 4354 	movw	r3, #29780	; 0x7454
20002408:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000240c:	601a      	str	r2, [r3, #0]
2000240e:	f000 fbb3 	bl	20002b78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
20002412:	f247 435c 	movw	r3, #29788	; 0x745c
20002416:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000241a:	681b      	ldr	r3, [r3, #0]
2000241c:	68fa      	ldr	r2, [r7, #12]
2000241e:	429a      	cmp	r2, r3
20002420:	d373      	bcc.n	2000250a <xTaskIncrementTick+0x1a2>
20002422:	e000      	b.n	20002426 <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002424:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002426:	f247 33f4 	movw	r3, #29684	; 0x73f4
2000242a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000242e:	681b      	ldr	r3, [r3, #0]
20002430:	681b      	ldr	r3, [r3, #0]
20002432:	2b00      	cmp	r3, #0
20002434:	d102      	bne.n	2000243c <xTaskIncrementTick+0xd4>
20002436:	f04f 0301 	mov.w	r3, #1
2000243a:	e001      	b.n	20002440 <xTaskIncrementTick+0xd8>
2000243c:	f04f 0300 	mov.w	r3, #0
20002440:	2b00      	cmp	r3, #0
20002442:	d007      	beq.n	20002454 <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002444:	f247 435c 	movw	r3, #29788	; 0x745c
20002448:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000244c:	f04f 32ff 	mov.w	r2, #4294967295
20002450:	601a      	str	r2, [r3, #0]
					break;
20002452:	e05a      	b.n	2000250a <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
20002454:	f247 33f4 	movw	r3, #29684	; 0x73f4
20002458:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000245c:	681b      	ldr	r3, [r3, #0]
2000245e:	68db      	ldr	r3, [r3, #12]
20002460:	68db      	ldr	r3, [r3, #12]
20002462:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
20002464:	683b      	ldr	r3, [r7, #0]
20002466:	685b      	ldr	r3, [r3, #4]
20002468:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
2000246a:	68fa      	ldr	r2, [r7, #12]
2000246c:	687b      	ldr	r3, [r7, #4]
2000246e:	429a      	cmp	r2, r3
20002470:	d206      	bcs.n	20002480 <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
20002472:	f247 435c 	movw	r3, #29788	; 0x745c
20002476:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000247a:	687a      	ldr	r2, [r7, #4]
2000247c:	601a      	str	r2, [r3, #0]
						break;
2000247e:	e044      	b.n	2000250a <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002480:	683b      	ldr	r3, [r7, #0]
20002482:	f103 0304 	add.w	r3, r3, #4
20002486:	4618      	mov	r0, r3
20002488:	f7fe fe14 	bl	200010b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2000248c:	683b      	ldr	r3, [r7, #0]
2000248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002490:	2b00      	cmp	r3, #0
20002492:	d005      	beq.n	200024a0 <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002494:	683b      	ldr	r3, [r7, #0]
20002496:	f103 0318 	add.w	r3, r3, #24
2000249a:	4618      	mov	r0, r3
2000249c:	f7fe fe0a 	bl	200010b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
200024a0:	683b      	ldr	r3, [r7, #0]
200024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200024a4:	f04f 0201 	mov.w	r2, #1
200024a8:	fa02 f203 	lsl.w	r2, r2, r3
200024ac:	f247 4344 	movw	r3, #29764	; 0x7444
200024b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024b4:	681b      	ldr	r3, [r3, #0]
200024b6:	ea42 0203 	orr.w	r2, r2, r3
200024ba:	f247 4344 	movw	r3, #29764	; 0x7444
200024be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024c2:	601a      	str	r2, [r3, #0]
200024c4:	683b      	ldr	r3, [r7, #0]
200024c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200024c8:	4613      	mov	r3, r2
200024ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024ce:	4413      	add	r3, r2
200024d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024d4:	461a      	mov	r2, r3
200024d6:	f247 3368 	movw	r3, #29544	; 0x7368
200024da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024de:	441a      	add	r2, r3
200024e0:	683b      	ldr	r3, [r7, #0]
200024e2:	f103 0304 	add.w	r3, r3, #4
200024e6:	4610      	mov	r0, r2
200024e8:	4619      	mov	r1, r3
200024ea:	f7fe fd85 	bl	20000ff8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
200024ee:	683b      	ldr	r3, [r7, #0]
200024f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200024f2:	f247 3364 	movw	r3, #29540	; 0x7364
200024f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024fa:	681b      	ldr	r3, [r3, #0]
200024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200024fe:	429a      	cmp	r2, r3
20002500:	d390      	bcc.n	20002424 <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
20002502:	f04f 0301 	mov.w	r3, #1
20002506:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002508:	e78d      	b.n	20002426 <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
2000250a:	f247 3364 	movw	r3, #29540	; 0x7364
2000250e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002512:	681b      	ldr	r3, [r3, #0]
20002514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002516:	4613      	mov	r3, r2
20002518:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000251c:	4413      	add	r3, r2
2000251e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002522:	461a      	mov	r2, r3
20002524:	f247 3368 	movw	r3, #29544	; 0x7368
20002528:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000252c:	4413      	add	r3, r2
2000252e:	681b      	ldr	r3, [r3, #0]
20002530:	2b01      	cmp	r3, #1
20002532:	d910      	bls.n	20002556 <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
20002534:	f04f 0301 	mov.w	r3, #1
20002538:	60bb      	str	r3, [r7, #8]
2000253a:	e00d      	b.n	20002558 <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
2000253c:	f247 434c 	movw	r3, #29772	; 0x744c
20002540:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002544:	681b      	ldr	r3, [r3, #0]
20002546:	f103 0201 	add.w	r2, r3, #1
2000254a:	f247 434c 	movw	r3, #29772	; 0x744c
2000254e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002552:	601a      	str	r2, [r3, #0]
20002554:	e000      	b.n	20002558 <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
20002556:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
20002558:	f247 4350 	movw	r3, #29776	; 0x7450
2000255c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002560:	681b      	ldr	r3, [r3, #0]
20002562:	2b00      	cmp	r3, #0
20002564:	d002      	beq.n	2000256c <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
20002566:	f04f 0301 	mov.w	r3, #1
2000256a:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
2000256c:	68bb      	ldr	r3, [r7, #8]
}
2000256e:	4618      	mov	r0, r3
20002570:	f107 0718 	add.w	r7, r7, #24
20002574:	46bd      	mov	sp, r7
20002576:	bd80      	pop	{r7, pc}

20002578 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
20002578:	b580      	push	{r7, lr}
2000257a:	b088      	sub	sp, #32
2000257c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2000257e:	f247 4364 	movw	r3, #29796	; 0x7464
20002582:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002586:	681b      	ldr	r3, [r3, #0]
20002588:	2b00      	cmp	r3, #0
2000258a:	d007      	beq.n	2000259c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
2000258c:	f247 4350 	movw	r3, #29776	; 0x7450
20002590:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002594:	f04f 0201 	mov.w	r2, #1
20002598:	601a      	str	r2, [r3, #0]
2000259a:	e0bc      	b.n	20002716 <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
2000259c:	f247 4350 	movw	r3, #29776	; 0x7450
200025a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025a4:	f04f 0200 	mov.w	r2, #0
200025a8:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
200025aa:	f7fd fedd 	bl	20000368 <ulGetRunTimeCounterValue>
200025ae:	4602      	mov	r2, r0
200025b0:	f247 436c 	movw	r3, #29804	; 0x746c
200025b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025b8:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
200025ba:	f247 436c 	movw	r3, #29804	; 0x746c
200025be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025c2:	681a      	ldr	r2, [r3, #0]
200025c4:	f247 4368 	movw	r3, #29800	; 0x7468
200025c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025cc:	681b      	ldr	r3, [r3, #0]
200025ce:	429a      	cmp	r2, r3
200025d0:	d913      	bls.n	200025fa <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
200025d2:	f247 3364 	movw	r3, #29540	; 0x7364
200025d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025da:	681a      	ldr	r2, [r3, #0]
200025dc:	6d11      	ldr	r1, [r2, #80]	; 0x50
200025de:	f247 436c 	movw	r3, #29804	; 0x746c
200025e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025e6:	6818      	ldr	r0, [r3, #0]
200025e8:	f247 4368 	movw	r3, #29800	; 0x7468
200025ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025f0:	681b      	ldr	r3, [r3, #0]
200025f2:	ebc3 0300 	rsb	r3, r3, r0
200025f6:	440b      	add	r3, r1
200025f8:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
200025fa:	f247 436c 	movw	r3, #29804	; 0x746c
200025fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002602:	681a      	ldr	r2, [r3, #0]
20002604:	f247 4368 	movw	r3, #29800	; 0x7468
20002608:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000260c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
2000260e:	f247 3364 	movw	r3, #29540	; 0x7364
20002612:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002616:	681b      	ldr	r3, [r3, #0]
20002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000261a:	607b      	str	r3, [r7, #4]
2000261c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
20002620:	60bb      	str	r3, [r7, #8]
20002622:	687b      	ldr	r3, [r7, #4]
20002624:	681a      	ldr	r2, [r3, #0]
20002626:	68bb      	ldr	r3, [r7, #8]
20002628:	429a      	cmp	r2, r3
2000262a:	d114      	bne.n	20002656 <vTaskSwitchContext+0xde>
2000262c:	687b      	ldr	r3, [r7, #4]
2000262e:	f103 0304 	add.w	r3, r3, #4
20002632:	681a      	ldr	r2, [r3, #0]
20002634:	68bb      	ldr	r3, [r7, #8]
20002636:	429a      	cmp	r2, r3
20002638:	d10d      	bne.n	20002656 <vTaskSwitchContext+0xde>
2000263a:	687b      	ldr	r3, [r7, #4]
2000263c:	f103 0308 	add.w	r3, r3, #8
20002640:	681a      	ldr	r2, [r3, #0]
20002642:	68bb      	ldr	r3, [r7, #8]
20002644:	429a      	cmp	r2, r3
20002646:	d106      	bne.n	20002656 <vTaskSwitchContext+0xde>
20002648:	687b      	ldr	r3, [r7, #4]
2000264a:	f103 030c 	add.w	r3, r3, #12
2000264e:	681a      	ldr	r2, [r3, #0]
20002650:	68bb      	ldr	r3, [r7, #8]
20002652:	429a      	cmp	r2, r3
20002654:	d00f      	beq.n	20002676 <vTaskSwitchContext+0xfe>
20002656:	f247 3364 	movw	r3, #29540	; 0x7364
2000265a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000265e:	681a      	ldr	r2, [r3, #0]
20002660:	f247 3364 	movw	r3, #29540	; 0x7364
20002664:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002668:	681b      	ldr	r3, [r3, #0]
2000266a:	f103 0334 	add.w	r3, r3, #52	; 0x34
2000266e:	4610      	mov	r0, r2
20002670:	4619      	mov	r1, r3
20002672:	f7fd fee7 	bl	20000444 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
20002676:	f247 4344 	movw	r3, #29764	; 0x7444
2000267a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000267e:	681b      	ldr	r3, [r3, #0]
20002680:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
20002682:	697b      	ldr	r3, [r7, #20]
20002684:	fab3 f383 	clz	r3, r3
20002688:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
2000268a:	7efb      	ldrb	r3, [r7, #27]
2000268c:	f1c3 031f 	rsb	r3, r3, #31
20002690:	60fb      	str	r3, [r7, #12]
20002692:	68fa      	ldr	r2, [r7, #12]
20002694:	4613      	mov	r3, r2
20002696:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000269a:	4413      	add	r3, r2
2000269c:	ea4f 0383 	mov.w	r3, r3, lsl #2
200026a0:	461a      	mov	r2, r3
200026a2:	f247 3368 	movw	r3, #29544	; 0x7368
200026a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026aa:	4413      	add	r3, r2
200026ac:	681b      	ldr	r3, [r3, #0]
200026ae:	2b00      	cmp	r3, #0
200026b0:	d109      	bne.n	200026c6 <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200026b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200026b6:	f383 8811 	msr	BASEPRI, r3
200026ba:	f3bf 8f6f 	isb	sy
200026be:	f3bf 8f4f 	dsb	sy
200026c2:	61fb      	str	r3, [r7, #28]
200026c4:	e7fe      	b.n	200026c4 <vTaskSwitchContext+0x14c>
200026c6:	68fa      	ldr	r2, [r7, #12]
200026c8:	4613      	mov	r3, r2
200026ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
200026ce:	4413      	add	r3, r2
200026d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200026d4:	461a      	mov	r2, r3
200026d6:	f247 3368 	movw	r3, #29544	; 0x7368
200026da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026de:	4413      	add	r3, r2
200026e0:	613b      	str	r3, [r7, #16]
200026e2:	693b      	ldr	r3, [r7, #16]
200026e4:	685b      	ldr	r3, [r3, #4]
200026e6:	685a      	ldr	r2, [r3, #4]
200026e8:	693b      	ldr	r3, [r7, #16]
200026ea:	605a      	str	r2, [r3, #4]
200026ec:	693b      	ldr	r3, [r7, #16]
200026ee:	685a      	ldr	r2, [r3, #4]
200026f0:	693b      	ldr	r3, [r7, #16]
200026f2:	f103 0308 	add.w	r3, r3, #8
200026f6:	429a      	cmp	r2, r3
200026f8:	d104      	bne.n	20002704 <vTaskSwitchContext+0x18c>
200026fa:	693b      	ldr	r3, [r7, #16]
200026fc:	685b      	ldr	r3, [r3, #4]
200026fe:	685a      	ldr	r2, [r3, #4]
20002700:	693b      	ldr	r3, [r7, #16]
20002702:	605a      	str	r2, [r3, #4]
20002704:	693b      	ldr	r3, [r7, #16]
20002706:	685b      	ldr	r3, [r3, #4]
20002708:	68db      	ldr	r3, [r3, #12]
2000270a:	461a      	mov	r2, r3
2000270c:	f247 3364 	movw	r3, #29540	; 0x7364
20002710:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002714:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
20002716:	f107 0720 	add.w	r7, r7, #32
2000271a:	46bd      	mov	sp, r7
2000271c:	bd80      	pop	{r7, pc}
2000271e:	bf00      	nop

20002720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002720:	b580      	push	{r7, lr}
20002722:	b084      	sub	sp, #16
20002724:	af00      	add	r7, sp, #0
20002726:	6078      	str	r0, [r7, #4]
20002728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
2000272a:	687b      	ldr	r3, [r7, #4]
2000272c:	2b00      	cmp	r3, #0
2000272e:	d109      	bne.n	20002744 <vTaskPlaceOnEventList+0x24>
20002730:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002734:	f383 8811 	msr	BASEPRI, r3
20002738:	f3bf 8f6f 	isb	sy
2000273c:	f3bf 8f4f 	dsb	sy
20002740:	60fb      	str	r3, [r7, #12]
20002742:	e7fe      	b.n	20002742 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002744:	f247 3364 	movw	r3, #29540	; 0x7364
20002748:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000274c:	681b      	ldr	r3, [r3, #0]
2000274e:	f103 0318 	add.w	r3, r3, #24
20002752:	6878      	ldr	r0, [r7, #4]
20002754:	4619      	mov	r1, r3
20002756:	f7fe fc73 	bl	20001040 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2000275a:	6838      	ldr	r0, [r7, #0]
2000275c:	f04f 0101 	mov.w	r1, #1
20002760:	f000 fd42 	bl	200031e8 <prvAddCurrentTaskToDelayedList>
}
20002764:	f107 0710 	add.w	r7, r7, #16
20002768:	46bd      	mov	sp, r7
2000276a:	bd80      	pop	{r7, pc}

2000276c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
2000276c:	b580      	push	{r7, lr}
2000276e:	b086      	sub	sp, #24
20002770:	af00      	add	r7, sp, #0
20002772:	60f8      	str	r0, [r7, #12]
20002774:	60b9      	str	r1, [r7, #8]
20002776:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002778:	68fb      	ldr	r3, [r7, #12]
2000277a:	2b00      	cmp	r3, #0
2000277c:	d109      	bne.n	20002792 <vTaskPlaceOnEventListRestricted+0x26>
2000277e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002782:	f383 8811 	msr	BASEPRI, r3
20002786:	f3bf 8f6f 	isb	sy
2000278a:	f3bf 8f4f 	dsb	sy
2000278e:	617b      	str	r3, [r7, #20]
20002790:	e7fe      	b.n	20002790 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002792:	f247 3364 	movw	r3, #29540	; 0x7364
20002796:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000279a:	681b      	ldr	r3, [r3, #0]
2000279c:	f103 0318 	add.w	r3, r3, #24
200027a0:	68f8      	ldr	r0, [r7, #12]
200027a2:	4619      	mov	r1, r3
200027a4:	f7fe fc28 	bl	20000ff8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
200027a8:	687b      	ldr	r3, [r7, #4]
200027aa:	2b00      	cmp	r3, #0
200027ac:	d002      	beq.n	200027b4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
200027ae:	f04f 33ff 	mov.w	r3, #4294967295
200027b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
200027b4:	68b8      	ldr	r0, [r7, #8]
200027b6:	6879      	ldr	r1, [r7, #4]
200027b8:	f000 fd16 	bl	200031e8 <prvAddCurrentTaskToDelayedList>
	}
200027bc:	f107 0718 	add.w	r7, r7, #24
200027c0:	46bd      	mov	sp, r7
200027c2:	bd80      	pop	{r7, pc}

200027c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
200027c4:	b580      	push	{r7, lr}
200027c6:	b086      	sub	sp, #24
200027c8:	af00      	add	r7, sp, #0
200027ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
200027cc:	687b      	ldr	r3, [r7, #4]
200027ce:	68db      	ldr	r3, [r3, #12]
200027d0:	68db      	ldr	r3, [r3, #12]
200027d2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
200027d4:	68fb      	ldr	r3, [r7, #12]
200027d6:	2b00      	cmp	r3, #0
200027d8:	d109      	bne.n	200027ee <xTaskRemoveFromEventList+0x2a>
200027da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200027de:	f383 8811 	msr	BASEPRI, r3
200027e2:	f3bf 8f6f 	isb	sy
200027e6:	f3bf 8f4f 	dsb	sy
200027ea:	617b      	str	r3, [r7, #20]
200027ec:	e7fe      	b.n	200027ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
200027ee:	68fb      	ldr	r3, [r7, #12]
200027f0:	f103 0318 	add.w	r3, r3, #24
200027f4:	4618      	mov	r0, r3
200027f6:	f7fe fc5d 	bl	200010b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200027fa:	f247 4364 	movw	r3, #29796	; 0x7464
200027fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002802:	681b      	ldr	r3, [r3, #0]
20002804:	2b00      	cmp	r3, #0
20002806:	d12d      	bne.n	20002864 <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002808:	68fb      	ldr	r3, [r7, #12]
2000280a:	f103 0304 	add.w	r3, r3, #4
2000280e:	4618      	mov	r0, r3
20002810:	f7fe fc50 	bl	200010b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002814:	68fb      	ldr	r3, [r7, #12]
20002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002818:	f04f 0201 	mov.w	r2, #1
2000281c:	fa02 f203 	lsl.w	r2, r2, r3
20002820:	f247 4344 	movw	r3, #29764	; 0x7444
20002824:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002828:	681b      	ldr	r3, [r3, #0]
2000282a:	ea42 0203 	orr.w	r2, r2, r3
2000282e:	f247 4344 	movw	r3, #29764	; 0x7444
20002832:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002836:	601a      	str	r2, [r3, #0]
20002838:	68fb      	ldr	r3, [r7, #12]
2000283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000283c:	4613      	mov	r3, r2
2000283e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002842:	4413      	add	r3, r2
20002844:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002848:	461a      	mov	r2, r3
2000284a:	f247 3368 	movw	r3, #29544	; 0x7368
2000284e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002852:	441a      	add	r2, r3
20002854:	68fb      	ldr	r3, [r7, #12]
20002856:	f103 0304 	add.w	r3, r3, #4
2000285a:	4610      	mov	r0, r2
2000285c:	4619      	mov	r1, r3
2000285e:	f7fe fbcb 	bl	20000ff8 <vListInsertEnd>
20002862:	e009      	b.n	20002878 <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002864:	68fb      	ldr	r3, [r7, #12]
20002866:	f103 0318 	add.w	r3, r3, #24
2000286a:	f247 30fc 	movw	r0, #29692	; 0x73fc
2000286e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002872:	4619      	mov	r1, r3
20002874:	f7fe fbc0 	bl	20000ff8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002878:	68fb      	ldr	r3, [r7, #12]
2000287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000287c:	f247 3364 	movw	r3, #29540	; 0x7364
20002880:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002884:	681b      	ldr	r3, [r3, #0]
20002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002888:	429a      	cmp	r2, r3
2000288a:	d90a      	bls.n	200028a2 <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
2000288c:	f04f 0301 	mov.w	r3, #1
20002890:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002892:	f247 4350 	movw	r3, #29776	; 0x7450
20002896:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000289a:	f04f 0201 	mov.w	r2, #1
2000289e:	601a      	str	r2, [r3, #0]
200028a0:	e002      	b.n	200028a8 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
200028a2:	f04f 0300 	mov.w	r3, #0
200028a6:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
200028a8:	693b      	ldr	r3, [r7, #16]
}
200028aa:	4618      	mov	r0, r3
200028ac:	f107 0718 	add.w	r7, r7, #24
200028b0:	46bd      	mov	sp, r7
200028b2:	bd80      	pop	{r7, pc}

200028b4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
200028b4:	b480      	push	{r7}
200028b6:	b085      	sub	sp, #20
200028b8:	af00      	add	r7, sp, #0
200028ba:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
200028bc:	687b      	ldr	r3, [r7, #4]
200028be:	2b00      	cmp	r3, #0
200028c0:	d109      	bne.n	200028d6 <vTaskSetTimeOutState+0x22>
200028c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200028c6:	f383 8811 	msr	BASEPRI, r3
200028ca:	f3bf 8f6f 	isb	sy
200028ce:	f3bf 8f4f 	dsb	sy
200028d2:	60fb      	str	r3, [r7, #12]
200028d4:	e7fe      	b.n	200028d4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
200028d6:	f247 4354 	movw	r3, #29780	; 0x7454
200028da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028de:	681a      	ldr	r2, [r3, #0]
200028e0:	687b      	ldr	r3, [r7, #4]
200028e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
200028e4:	f247 4340 	movw	r3, #29760	; 0x7440
200028e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028ec:	681a      	ldr	r2, [r3, #0]
200028ee:	687b      	ldr	r3, [r7, #4]
200028f0:	605a      	str	r2, [r3, #4]
}
200028f2:	f107 0714 	add.w	r7, r7, #20
200028f6:	46bd      	mov	sp, r7
200028f8:	bc80      	pop	{r7}
200028fa:	4770      	bx	lr

200028fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
200028fc:	b580      	push	{r7, lr}
200028fe:	b086      	sub	sp, #24
20002900:	af00      	add	r7, sp, #0
20002902:	6078      	str	r0, [r7, #4]
20002904:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002906:	687b      	ldr	r3, [r7, #4]
20002908:	2b00      	cmp	r3, #0
2000290a:	d109      	bne.n	20002920 <xTaskCheckForTimeOut+0x24>
2000290c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002910:	f383 8811 	msr	BASEPRI, r3
20002914:	f3bf 8f6f 	isb	sy
20002918:	f3bf 8f4f 	dsb	sy
2000291c:	613b      	str	r3, [r7, #16]
2000291e:	e7fe      	b.n	2000291e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
20002920:	683b      	ldr	r3, [r7, #0]
20002922:	2b00      	cmp	r3, #0
20002924:	d109      	bne.n	2000293a <xTaskCheckForTimeOut+0x3e>
20002926:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000292a:	f383 8811 	msr	BASEPRI, r3
2000292e:	f3bf 8f6f 	isb	sy
20002932:	f3bf 8f4f 	dsb	sy
20002936:	617b      	str	r3, [r7, #20]
20002938:	e7fe      	b.n	20002938 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
2000293a:	f001 fbdf 	bl	200040fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
2000293e:	f247 4340 	movw	r3, #29760	; 0x7440
20002942:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002946:	681b      	ldr	r3, [r3, #0]
20002948:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
2000294a:	683b      	ldr	r3, [r7, #0]
2000294c:	681b      	ldr	r3, [r3, #0]
2000294e:	f1b3 3fff 	cmp.w	r3, #4294967295
20002952:	d103      	bne.n	2000295c <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002954:	f04f 0300 	mov.w	r3, #0
20002958:	60bb      	str	r3, [r7, #8]
2000295a:	e02e      	b.n	200029ba <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
2000295c:	687b      	ldr	r3, [r7, #4]
2000295e:	681a      	ldr	r2, [r3, #0]
20002960:	f247 4354 	movw	r3, #29780	; 0x7454
20002964:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002968:	681b      	ldr	r3, [r3, #0]
2000296a:	429a      	cmp	r2, r3
2000296c:	d008      	beq.n	20002980 <xTaskCheckForTimeOut+0x84>
2000296e:	687b      	ldr	r3, [r7, #4]
20002970:	685a      	ldr	r2, [r3, #4]
20002972:	68fb      	ldr	r3, [r7, #12]
20002974:	429a      	cmp	r2, r3
20002976:	d803      	bhi.n	20002980 <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002978:	f04f 0301 	mov.w	r3, #1
2000297c:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
2000297e:	e01c      	b.n	200029ba <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002980:	687b      	ldr	r3, [r7, #4]
20002982:	685b      	ldr	r3, [r3, #4]
20002984:	68fa      	ldr	r2, [r7, #12]
20002986:	ebc3 0202 	rsb	r2, r3, r2
2000298a:	683b      	ldr	r3, [r7, #0]
2000298c:	681b      	ldr	r3, [r3, #0]
2000298e:	429a      	cmp	r2, r3
20002990:	d210      	bcs.n	200029b4 <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
20002992:	683b      	ldr	r3, [r7, #0]
20002994:	681a      	ldr	r2, [r3, #0]
20002996:	687b      	ldr	r3, [r7, #4]
20002998:	6859      	ldr	r1, [r3, #4]
2000299a:	68fb      	ldr	r3, [r7, #12]
2000299c:	ebc3 0301 	rsb	r3, r3, r1
200029a0:	441a      	add	r2, r3
200029a2:	683b      	ldr	r3, [r7, #0]
200029a4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
200029a6:	6878      	ldr	r0, [r7, #4]
200029a8:	f7ff ff84 	bl	200028b4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
200029ac:	f04f 0300 	mov.w	r3, #0
200029b0:	60bb      	str	r3, [r7, #8]
200029b2:	e002      	b.n	200029ba <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
200029b4:	f04f 0301 	mov.w	r3, #1
200029b8:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
200029ba:	f001 fbd7 	bl	2000416c <vPortExitCritical>

	return xReturn;
200029be:	68bb      	ldr	r3, [r7, #8]
}
200029c0:	4618      	mov	r0, r3
200029c2:	f107 0718 	add.w	r7, r7, #24
200029c6:	46bd      	mov	sp, r7
200029c8:	bd80      	pop	{r7, pc}
200029ca:	bf00      	nop

200029cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
200029cc:	b480      	push	{r7}
200029ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
200029d0:	f247 4350 	movw	r3, #29776	; 0x7450
200029d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029d8:	f04f 0201 	mov.w	r2, #1
200029dc:	601a      	str	r2, [r3, #0]
}
200029de:	46bd      	mov	sp, r7
200029e0:	bc80      	pop	{r7}
200029e2:	4770      	bx	lr

200029e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
200029e4:	b580      	push	{r7, lr}
200029e6:	b082      	sub	sp, #8
200029e8:	af00      	add	r7, sp, #0
200029ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
200029ec:	f000 f868 	bl	20002ac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
200029f0:	f247 3368 	movw	r3, #29544	; 0x7368
200029f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029f8:	681b      	ldr	r3, [r3, #0]
200029fa:	2b01      	cmp	r3, #1
200029fc:	d90a      	bls.n	20002a14 <prvIdleTask+0x30>
			{
				taskYIELD();
200029fe:	f64e 5304 	movw	r3, #60676	; 0xed04
20002a02:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002a0a:	601a      	str	r2, [r3, #0]
20002a0c:	f3bf 8f4f 	dsb	sy
20002a10:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
20002a14:	f7fd fd10 	bl	20000438 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
20002a18:	e7e8      	b.n	200029ec <prvIdleTask+0x8>
20002a1a:	bf00      	nop

20002a1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002a1c:	b580      	push	{r7, lr}
20002a1e:	b082      	sub	sp, #8
20002a20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002a22:	f04f 0300 	mov.w	r3, #0
20002a26:	607b      	str	r3, [r7, #4]
20002a28:	e013      	b.n	20002a52 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002a2a:	687a      	ldr	r2, [r7, #4]
20002a2c:	4613      	mov	r3, r2
20002a2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a32:	4413      	add	r3, r2
20002a34:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a38:	461a      	mov	r2, r3
20002a3a:	f247 3368 	movw	r3, #29544	; 0x7368
20002a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a42:	4413      	add	r3, r2
20002a44:	4618      	mov	r0, r3
20002a46:	f7fe faa5 	bl	20000f94 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002a4a:	687b      	ldr	r3, [r7, #4]
20002a4c:	f103 0301 	add.w	r3, r3, #1
20002a50:	607b      	str	r3, [r7, #4]
20002a52:	687b      	ldr	r3, [r7, #4]
20002a54:	2b04      	cmp	r3, #4
20002a56:	d9e8      	bls.n	20002a2a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
20002a58:	f247 30cc 	movw	r0, #29644	; 0x73cc
20002a5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002a60:	f7fe fa98 	bl	20000f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002a64:	f247 30e0 	movw	r0, #29664	; 0x73e0
20002a68:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002a6c:	f7fe fa92 	bl	20000f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002a70:	f247 30fc 	movw	r0, #29692	; 0x73fc
20002a74:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002a78:	f7fe fa8c 	bl	20000f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002a7c:	f247 4010 	movw	r0, #29712	; 0x7410
20002a80:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002a84:	f7fe fa86 	bl	20000f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002a88:	f247 4028 	movw	r0, #29736	; 0x7428
20002a8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002a90:	f7fe fa80 	bl	20000f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
20002a94:	f247 33f4 	movw	r3, #29684	; 0x73f4
20002a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a9c:	f247 32cc 	movw	r2, #29644	; 0x73cc
20002aa0:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002aa4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002aa6:	f247 33f8 	movw	r3, #29688	; 0x73f8
20002aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aae:	f247 32e0 	movw	r2, #29664	; 0x73e0
20002ab2:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002ab6:	601a      	str	r2, [r3, #0]
}
20002ab8:	f107 0708 	add.w	r7, r7, #8
20002abc:	46bd      	mov	sp, r7
20002abe:	bd80      	pop	{r7, pc}

20002ac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002ac0:	b580      	push	{r7, lr}
20002ac2:	b082      	sub	sp, #8
20002ac4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002ac6:	e03c      	b.n	20002b42 <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
20002ac8:	f7ff fb5c 	bl	20002184 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
20002acc:	f247 4310 	movw	r3, #29712	; 0x7410
20002ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ad4:	681b      	ldr	r3, [r3, #0]
20002ad6:	2b00      	cmp	r3, #0
20002ad8:	bf14      	ite	ne
20002ada:	2300      	movne	r3, #0
20002adc:	2301      	moveq	r3, #1
20002ade:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
20002ae0:	f7ff fb62 	bl	200021a8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
20002ae4:	683b      	ldr	r3, [r7, #0]
20002ae6:	2b00      	cmp	r3, #0
20002ae8:	d12b      	bne.n	20002b42 <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
20002aea:	f001 fb07 	bl	200040fc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
20002aee:	f247 4310 	movw	r3, #29712	; 0x7410
20002af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002af6:	68db      	ldr	r3, [r3, #12]
20002af8:	68db      	ldr	r3, [r3, #12]
20002afa:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002afc:	687b      	ldr	r3, [r7, #4]
20002afe:	f103 0304 	add.w	r3, r3, #4
20002b02:	4618      	mov	r0, r3
20002b04:	f7fe fad6 	bl	200010b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
20002b08:	f247 433c 	movw	r3, #29756	; 0x743c
20002b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b10:	681b      	ldr	r3, [r3, #0]
20002b12:	f103 32ff 	add.w	r2, r3, #4294967295
20002b16:	f247 433c 	movw	r3, #29756	; 0x743c
20002b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b1e:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
20002b20:	f247 4324 	movw	r3, #29732	; 0x7424
20002b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b28:	681b      	ldr	r3, [r3, #0]
20002b2a:	f103 32ff 	add.w	r2, r3, #4294967295
20002b2e:	f247 4324 	movw	r3, #29732	; 0x7424
20002b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b36:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
20002b38:	f001 fb18 	bl	2000416c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
20002b3c:	6878      	ldr	r0, [r7, #4]
20002b3e:	f000 f80b 	bl	20002b58 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002b42:	f247 4324 	movw	r3, #29732	; 0x7424
20002b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b4a:	681b      	ldr	r3, [r3, #0]
20002b4c:	2b00      	cmp	r3, #0
20002b4e:	d1bb      	bne.n	20002ac8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002b50:	f107 0708 	add.w	r7, r7, #8
20002b54:	46bd      	mov	sp, r7
20002b56:	bd80      	pop	{r7, pc}

20002b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20002b58:	b580      	push	{r7, lr}
20002b5a:	b082      	sub	sp, #8
20002b5c:	af00      	add	r7, sp, #0
20002b5e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
20002b60:	687b      	ldr	r3, [r7, #4]
20002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002b64:	4618      	mov	r0, r3
20002b66:	f001 f877 	bl	20003c58 <vPortFree>
			vPortFree( pxTCB );
20002b6a:	6878      	ldr	r0, [r7, #4]
20002b6c:	f001 f874 	bl	20003c58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20002b70:	f107 0708 	add.w	r7, r7, #8
20002b74:	46bd      	mov	sp, r7
20002b76:	bd80      	pop	{r7, pc}

20002b78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002b78:	b480      	push	{r7}
20002b7a:	b083      	sub	sp, #12
20002b7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002b7e:	f247 33f4 	movw	r3, #29684	; 0x73f4
20002b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b86:	681b      	ldr	r3, [r3, #0]
20002b88:	681b      	ldr	r3, [r3, #0]
20002b8a:	2b00      	cmp	r3, #0
20002b8c:	d102      	bne.n	20002b94 <prvResetNextTaskUnblockTime+0x1c>
20002b8e:	f04f 0301 	mov.w	r3, #1
20002b92:	e001      	b.n	20002b98 <prvResetNextTaskUnblockTime+0x20>
20002b94:	f04f 0300 	mov.w	r3, #0
20002b98:	2b00      	cmp	r3, #0
20002b9a:	d007      	beq.n	20002bac <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20002b9c:	f247 435c 	movw	r3, #29788	; 0x745c
20002ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ba4:	f04f 32ff 	mov.w	r2, #4294967295
20002ba8:	601a      	str	r2, [r3, #0]
20002baa:	e00e      	b.n	20002bca <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
20002bac:	f247 33f4 	movw	r3, #29684	; 0x73f4
20002bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bb4:	681b      	ldr	r3, [r3, #0]
20002bb6:	68db      	ldr	r3, [r3, #12]
20002bb8:	68db      	ldr	r3, [r3, #12]
20002bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
20002bbc:	687b      	ldr	r3, [r7, #4]
20002bbe:	685a      	ldr	r2, [r3, #4]
20002bc0:	f247 435c 	movw	r3, #29788	; 0x745c
20002bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bc8:	601a      	str	r2, [r3, #0]
	}
}
20002bca:	f107 070c 	add.w	r7, r7, #12
20002bce:	46bd      	mov	sp, r7
20002bd0:	bc80      	pop	{r7}
20002bd2:	4770      	bx	lr

20002bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20002bd4:	b480      	push	{r7}
20002bd6:	b083      	sub	sp, #12
20002bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
20002bda:	f247 4348 	movw	r3, #29768	; 0x7448
20002bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002be2:	681b      	ldr	r3, [r3, #0]
20002be4:	2b00      	cmp	r3, #0
20002be6:	d103      	bne.n	20002bf0 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
20002be8:	f04f 0301 	mov.w	r3, #1
20002bec:	607b      	str	r3, [r7, #4]
20002bee:	e00d      	b.n	20002c0c <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002bf0:	f247 4364 	movw	r3, #29796	; 0x7464
20002bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bf8:	681b      	ldr	r3, [r3, #0]
20002bfa:	2b00      	cmp	r3, #0
20002bfc:	d103      	bne.n	20002c06 <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
20002bfe:	f04f 0302 	mov.w	r3, #2
20002c02:	607b      	str	r3, [r7, #4]
20002c04:	e002      	b.n	20002c0c <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20002c06:	f04f 0300 	mov.w	r3, #0
20002c0a:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
20002c0c:	687b      	ldr	r3, [r7, #4]
	}
20002c0e:	4618      	mov	r0, r3
20002c10:	f107 070c 	add.w	r7, r7, #12
20002c14:	46bd      	mov	sp, r7
20002c16:	bc80      	pop	{r7}
20002c18:	4770      	bx	lr
20002c1a:	bf00      	nop

20002c1c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
20002c1c:	b580      	push	{r7, lr}
20002c1e:	b084      	sub	sp, #16
20002c20:	af00      	add	r7, sp, #0
20002c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20002c24:	687b      	ldr	r3, [r7, #4]
20002c26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
20002c28:	687b      	ldr	r3, [r7, #4]
20002c2a:	2b00      	cmp	r3, #0
20002c2c:	f000 8098 	beq.w	20002d60 <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
20002c30:	68fb      	ldr	r3, [r7, #12]
20002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c34:	f247 3364 	movw	r3, #29540	; 0x7364
20002c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c3c:	681b      	ldr	r3, [r3, #0]
20002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c40:	429a      	cmp	r2, r3
20002c42:	f080 808d 	bcs.w	20002d60 <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20002c46:	68fb      	ldr	r3, [r7, #12]
20002c48:	699b      	ldr	r3, [r3, #24]
20002c4a:	2b00      	cmp	r3, #0
20002c4c:	db09      	blt.n	20002c62 <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002c4e:	f247 3364 	movw	r3, #29540	; 0x7364
20002c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c56:	681b      	ldr	r3, [r3, #0]
20002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c5a:	f1c3 0205 	rsb	r2, r3, #5
20002c5e:	68fb      	ldr	r3, [r7, #12]
20002c60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20002c62:	68fb      	ldr	r3, [r7, #12]
20002c64:	6959      	ldr	r1, [r3, #20]
20002c66:	68fb      	ldr	r3, [r7, #12]
20002c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c6a:	4613      	mov	r3, r2
20002c6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c70:	4413      	add	r3, r2
20002c72:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c76:	461a      	mov	r2, r3
20002c78:	f247 3368 	movw	r3, #29544	; 0x7368
20002c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c80:	4413      	add	r3, r2
20002c82:	4299      	cmp	r1, r3
20002c84:	d102      	bne.n	20002c8c <vTaskPriorityInherit+0x70>
20002c86:	f04f 0301 	mov.w	r3, #1
20002c8a:	e001      	b.n	20002c90 <vTaskPriorityInherit+0x74>
20002c8c:	f04f 0300 	mov.w	r3, #0
20002c90:	2b00      	cmp	r3, #0
20002c92:	d05d      	beq.n	20002d50 <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002c94:	68fb      	ldr	r3, [r7, #12]
20002c96:	f103 0304 	add.w	r3, r3, #4
20002c9a:	4618      	mov	r0, r3
20002c9c:	f7fe fa0a 	bl	200010b4 <uxListRemove>
20002ca0:	4603      	mov	r3, r0
20002ca2:	2b00      	cmp	r3, #0
20002ca4:	d124      	bne.n	20002cf0 <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20002ca6:	68fb      	ldr	r3, [r7, #12]
20002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002caa:	4613      	mov	r3, r2
20002cac:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002cb0:	4413      	add	r3, r2
20002cb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002cb6:	461a      	mov	r2, r3
20002cb8:	f247 3368 	movw	r3, #29544	; 0x7368
20002cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cc0:	4413      	add	r3, r2
20002cc2:	681b      	ldr	r3, [r3, #0]
20002cc4:	2b00      	cmp	r3, #0
20002cc6:	d113      	bne.n	20002cf0 <vTaskPriorityInherit+0xd4>
20002cc8:	68fb      	ldr	r3, [r7, #12]
20002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002ccc:	f04f 0201 	mov.w	r2, #1
20002cd0:	fa02 f303 	lsl.w	r3, r2, r3
20002cd4:	ea6f 0203 	mvn.w	r2, r3
20002cd8:	f247 4344 	movw	r3, #29764	; 0x7444
20002cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ce0:	681b      	ldr	r3, [r3, #0]
20002ce2:	ea02 0203 	and.w	r2, r2, r3
20002ce6:	f247 4344 	movw	r3, #29764	; 0x7444
20002cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20002cf0:	f247 3364 	movw	r3, #29540	; 0x7364
20002cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cf8:	681b      	ldr	r3, [r3, #0]
20002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002cfc:	68fb      	ldr	r3, [r7, #12]
20002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
20002d00:	68fb      	ldr	r3, [r7, #12]
20002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002d04:	f04f 0201 	mov.w	r2, #1
20002d08:	fa02 f203 	lsl.w	r2, r2, r3
20002d0c:	f247 4344 	movw	r3, #29764	; 0x7444
20002d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d14:	681b      	ldr	r3, [r3, #0]
20002d16:	ea42 0203 	orr.w	r2, r2, r3
20002d1a:	f247 4344 	movw	r3, #29764	; 0x7444
20002d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d22:	601a      	str	r2, [r3, #0]
20002d24:	68fb      	ldr	r3, [r7, #12]
20002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002d28:	4613      	mov	r3, r2
20002d2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002d2e:	4413      	add	r3, r2
20002d30:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002d34:	461a      	mov	r2, r3
20002d36:	f247 3368 	movw	r3, #29544	; 0x7368
20002d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d3e:	441a      	add	r2, r3
20002d40:	68fb      	ldr	r3, [r7, #12]
20002d42:	f103 0304 	add.w	r3, r3, #4
20002d46:	4610      	mov	r0, r2
20002d48:	4619      	mov	r1, r3
20002d4a:	f7fe f955 	bl	20000ff8 <vListInsertEnd>
20002d4e:	e007      	b.n	20002d60 <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20002d50:	f247 3364 	movw	r3, #29540	; 0x7364
20002d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d58:	681b      	ldr	r3, [r3, #0]
20002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002d5c:	68fb      	ldr	r3, [r7, #12]
20002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20002d60:	f107 0710 	add.w	r7, r7, #16
20002d64:	46bd      	mov	sp, r7
20002d66:	bd80      	pop	{r7, pc}

20002d68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20002d68:	b580      	push	{r7, lr}
20002d6a:	b086      	sub	sp, #24
20002d6c:	af00      	add	r7, sp, #0
20002d6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20002d70:	687b      	ldr	r3, [r7, #4]
20002d72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
20002d74:	f04f 0300 	mov.w	r3, #0
20002d78:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
20002d7a:	687b      	ldr	r3, [r7, #4]
20002d7c:	2b00      	cmp	r3, #0
20002d7e:	f000 8092 	beq.w	20002ea6 <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20002d82:	f247 3364 	movw	r3, #29540	; 0x7364
20002d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d8a:	681b      	ldr	r3, [r3, #0]
20002d8c:	68ba      	ldr	r2, [r7, #8]
20002d8e:	429a      	cmp	r2, r3
20002d90:	d009      	beq.n	20002da6 <xTaskPriorityDisinherit+0x3e>
20002d92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002d96:	f383 8811 	msr	BASEPRI, r3
20002d9a:	f3bf 8f6f 	isb	sy
20002d9e:	f3bf 8f4f 	dsb	sy
20002da2:	613b      	str	r3, [r7, #16]
20002da4:	e7fe      	b.n	20002da4 <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
20002da6:	68bb      	ldr	r3, [r7, #8]
20002da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002daa:	2b00      	cmp	r3, #0
20002dac:	d109      	bne.n	20002dc2 <xTaskPriorityDisinherit+0x5a>
20002dae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002db2:	f383 8811 	msr	BASEPRI, r3
20002db6:	f3bf 8f6f 	isb	sy
20002dba:	f3bf 8f4f 	dsb	sy
20002dbe:	617b      	str	r3, [r7, #20]
20002dc0:	e7fe      	b.n	20002dc0 <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
20002dc2:	68bb      	ldr	r3, [r7, #8]
20002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002dc6:	f103 32ff 	add.w	r2, r3, #4294967295
20002dca:	68bb      	ldr	r3, [r7, #8]
20002dcc:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
20002dce:	68bb      	ldr	r3, [r7, #8]
20002dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002dd2:	68bb      	ldr	r3, [r7, #8]
20002dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002dd6:	429a      	cmp	r2, r3
20002dd8:	d065      	beq.n	20002ea6 <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
20002dda:	68bb      	ldr	r3, [r7, #8]
20002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002dde:	2b00      	cmp	r3, #0
20002de0:	d161      	bne.n	20002ea6 <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002de2:	68bb      	ldr	r3, [r7, #8]
20002de4:	f103 0304 	add.w	r3, r3, #4
20002de8:	4618      	mov	r0, r3
20002dea:	f7fe f963 	bl	200010b4 <uxListRemove>
20002dee:	4603      	mov	r3, r0
20002df0:	2b00      	cmp	r3, #0
20002df2:	d124      	bne.n	20002e3e <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20002df4:	68bb      	ldr	r3, [r7, #8]
20002df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002df8:	4613      	mov	r3, r2
20002dfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002dfe:	4413      	add	r3, r2
20002e00:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002e04:	461a      	mov	r2, r3
20002e06:	f247 3368 	movw	r3, #29544	; 0x7368
20002e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e0e:	4413      	add	r3, r2
20002e10:	681b      	ldr	r3, [r3, #0]
20002e12:	2b00      	cmp	r3, #0
20002e14:	d113      	bne.n	20002e3e <xTaskPriorityDisinherit+0xd6>
20002e16:	68bb      	ldr	r3, [r7, #8]
20002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e1a:	f04f 0201 	mov.w	r2, #1
20002e1e:	fa02 f303 	lsl.w	r3, r2, r3
20002e22:	ea6f 0203 	mvn.w	r2, r3
20002e26:	f247 4344 	movw	r3, #29764	; 0x7444
20002e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e2e:	681b      	ldr	r3, [r3, #0]
20002e30:	ea02 0203 	and.w	r2, r2, r3
20002e34:	f247 4344 	movw	r3, #29764	; 0x7444
20002e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e3c:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
20002e3e:	68bb      	ldr	r3, [r7, #8]
20002e40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20002e42:	68bb      	ldr	r3, [r7, #8]
20002e44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002e46:	68bb      	ldr	r3, [r7, #8]
20002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e4a:	f1c3 0205 	rsb	r2, r3, #5
20002e4e:	68bb      	ldr	r3, [r7, #8]
20002e50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
20002e52:	68bb      	ldr	r3, [r7, #8]
20002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e56:	f04f 0201 	mov.w	r2, #1
20002e5a:	fa02 f203 	lsl.w	r2, r2, r3
20002e5e:	f247 4344 	movw	r3, #29764	; 0x7444
20002e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e66:	681b      	ldr	r3, [r3, #0]
20002e68:	ea42 0203 	orr.w	r2, r2, r3
20002e6c:	f247 4344 	movw	r3, #29764	; 0x7444
20002e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e74:	601a      	str	r2, [r3, #0]
20002e76:	68bb      	ldr	r3, [r7, #8]
20002e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e7a:	4613      	mov	r3, r2
20002e7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002e80:	4413      	add	r3, r2
20002e82:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002e86:	461a      	mov	r2, r3
20002e88:	f247 3368 	movw	r3, #29544	; 0x7368
20002e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e90:	441a      	add	r2, r3
20002e92:	68bb      	ldr	r3, [r7, #8]
20002e94:	f103 0304 	add.w	r3, r3, #4
20002e98:	4610      	mov	r0, r2
20002e9a:	4619      	mov	r1, r3
20002e9c:	f7fe f8ac 	bl	20000ff8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20002ea0:	f04f 0301 	mov.w	r3, #1
20002ea4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20002ea6:	68fb      	ldr	r3, [r7, #12]
	}
20002ea8:	4618      	mov	r0, r3
20002eaa:	f107 0718 	add.w	r7, r7, #24
20002eae:	46bd      	mov	sp, r7
20002eb0:	bd80      	pop	{r7, pc}
20002eb2:	bf00      	nop

20002eb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
20002eb4:	b480      	push	{r7}
20002eb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
20002eb8:	f247 3364 	movw	r3, #29540	; 0x7364
20002ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ec0:	681b      	ldr	r3, [r3, #0]
20002ec2:	2b00      	cmp	r3, #0
20002ec4:	d008      	beq.n	20002ed8 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
20002ec6:	f247 3364 	movw	r3, #29540	; 0x7364
20002eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ece:	681b      	ldr	r3, [r3, #0]
20002ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002ed2:	f102 0201 	add.w	r2, r2, #1
20002ed6:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
20002ed8:	f247 3364 	movw	r3, #29540	; 0x7364
20002edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ee0:	681b      	ldr	r3, [r3, #0]
	}
20002ee2:	4618      	mov	r0, r3
20002ee4:	46bd      	mov	sp, r7
20002ee6:	bc80      	pop	{r7}
20002ee8:	4770      	bx	lr
20002eea:	bf00      	nop

20002eec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
20002eec:	b580      	push	{r7, lr}
20002eee:	b084      	sub	sp, #16
20002ef0:	af00      	add	r7, sp, #0
20002ef2:	6078      	str	r0, [r7, #4]
20002ef4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
20002ef6:	f001 f901 	bl	200040fc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
20002efa:	f247 3364 	movw	r3, #29540	; 0x7364
20002efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f02:	681b      	ldr	r3, [r3, #0]
20002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002f06:	2b00      	cmp	r3, #0
20002f08:	d11b      	bne.n	20002f42 <ulTaskNotifyTake+0x56>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
20002f0a:	f247 3364 	movw	r3, #29540	; 0x7364
20002f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f12:	681b      	ldr	r3, [r3, #0]
20002f14:	f04f 0201 	mov.w	r2, #1
20002f18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
20002f1c:	683b      	ldr	r3, [r7, #0]
20002f1e:	2b00      	cmp	r3, #0
20002f20:	d00f      	beq.n	20002f42 <ulTaskNotifyTake+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002f22:	6838      	ldr	r0, [r7, #0]
20002f24:	f04f 0101 	mov.w	r1, #1
20002f28:	f000 f95e 	bl	200031e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
20002f2c:	f64e 5304 	movw	r3, #60676	; 0xed04
20002f30:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002f38:	601a      	str	r2, [r3, #0]
20002f3a:	f3bf 8f4f 	dsb	sy
20002f3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
20002f42:	f001 f913 	bl	2000416c <vPortExitCritical>

		taskENTER_CRITICAL();
20002f46:	f001 f8d9 	bl	200040fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
20002f4a:	f247 3364 	movw	r3, #29540	; 0x7364
20002f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f52:	681b      	ldr	r3, [r3, #0]
20002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002f56:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
20002f58:	68fb      	ldr	r3, [r7, #12]
20002f5a:	2b00      	cmp	r3, #0
20002f5c:	d014      	beq.n	20002f88 <ulTaskNotifyTake+0x9c>
			{
				if( xClearCountOnExit != pdFALSE )
20002f5e:	687b      	ldr	r3, [r7, #4]
20002f60:	2b00      	cmp	r3, #0
20002f62:	d008      	beq.n	20002f76 <ulTaskNotifyTake+0x8a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
20002f64:	f247 3364 	movw	r3, #29540	; 0x7364
20002f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f6c:	681b      	ldr	r3, [r3, #0]
20002f6e:	f04f 0200 	mov.w	r2, #0
20002f72:	655a      	str	r2, [r3, #84]	; 0x54
20002f74:	e008      	b.n	20002f88 <ulTaskNotifyTake+0x9c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
20002f76:	f247 3364 	movw	r3, #29540	; 0x7364
20002f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f7e:	681b      	ldr	r3, [r3, #0]
20002f80:	68fa      	ldr	r2, [r7, #12]
20002f82:	f102 32ff 	add.w	r2, r2, #4294967295
20002f86:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20002f88:	f247 3364 	movw	r3, #29540	; 0x7364
20002f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f90:	681b      	ldr	r3, [r3, #0]
20002f92:	f04f 0200 	mov.w	r2, #0
20002f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
20002f9a:	f001 f8e7 	bl	2000416c <vPortExitCritical>

		return ulReturn;
20002f9e:	68fb      	ldr	r3, [r7, #12]
	}
20002fa0:	4618      	mov	r0, r3
20002fa2:	f107 0710 	add.w	r7, r7, #16
20002fa6:	46bd      	mov	sp, r7
20002fa8:	bd80      	pop	{r7, pc}
20002faa:	bf00      	nop

20002fac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
20002fac:	b580      	push	{r7, lr}
20002fae:	b086      	sub	sp, #24
20002fb0:	af00      	add	r7, sp, #0
20002fb2:	60f8      	str	r0, [r7, #12]
20002fb4:	60b9      	str	r1, [r7, #8]
20002fb6:	607a      	str	r2, [r7, #4]
20002fb8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
20002fba:	f001 f89f 	bl	200040fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
20002fbe:	f247 3364 	movw	r3, #29540	; 0x7364
20002fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fc6:	681b      	ldr	r3, [r3, #0]
20002fc8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
20002fcc:	b2db      	uxtb	r3, r3
20002fce:	2b02      	cmp	r3, #2
20002fd0:	d027      	beq.n	20003022 <xTaskNotifyWait+0x76>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
20002fd2:	f247 3364 	movw	r3, #29540	; 0x7364
20002fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fda:	681b      	ldr	r3, [r3, #0]
20002fdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
20002fde:	68fa      	ldr	r2, [r7, #12]
20002fe0:	ea6f 0202 	mvn.w	r2, r2
20002fe4:	ea01 0202 	and.w	r2, r1, r2
20002fe8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
20002fea:	f247 3364 	movw	r3, #29540	; 0x7364
20002fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ff2:	681b      	ldr	r3, [r3, #0]
20002ff4:	f04f 0201 	mov.w	r2, #1
20002ff8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
20002ffc:	683b      	ldr	r3, [r7, #0]
20002ffe:	2b00      	cmp	r3, #0
20003000:	d00f      	beq.n	20003022 <xTaskNotifyWait+0x76>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20003002:	6838      	ldr	r0, [r7, #0]
20003004:	f04f 0101 	mov.w	r1, #1
20003008:	f000 f8ee 	bl	200031e8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
2000300c:	f64e 5304 	movw	r3, #60676	; 0xed04
20003010:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003018:	601a      	str	r2, [r3, #0]
2000301a:	f3bf 8f4f 	dsb	sy
2000301e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
20003022:	f001 f8a3 	bl	2000416c <vPortExitCritical>

		taskENTER_CRITICAL();
20003026:	f001 f869 	bl	200040fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
2000302a:	687b      	ldr	r3, [r7, #4]
2000302c:	2b00      	cmp	r3, #0
2000302e:	d007      	beq.n	20003040 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
20003030:	f247 3364 	movw	r3, #29540	; 0x7364
20003034:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003038:	681b      	ldr	r3, [r3, #0]
2000303a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
2000303c:	687b      	ldr	r3, [r7, #4]
2000303e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
20003040:	f247 3364 	movw	r3, #29540	; 0x7364
20003044:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003048:	681b      	ldr	r3, [r3, #0]
2000304a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
2000304e:	b2db      	uxtb	r3, r3
20003050:	2b01      	cmp	r3, #1
20003052:	d103      	bne.n	2000305c <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
20003054:	f04f 0300 	mov.w	r3, #0
20003058:	617b      	str	r3, [r7, #20]
2000305a:	e00e      	b.n	2000307a <xTaskNotifyWait+0xce>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
2000305c:	f247 3364 	movw	r3, #29540	; 0x7364
20003060:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003064:	681b      	ldr	r3, [r3, #0]
20003066:	6d59      	ldr	r1, [r3, #84]	; 0x54
20003068:	68ba      	ldr	r2, [r7, #8]
2000306a:	ea6f 0202 	mvn.w	r2, r2
2000306e:	ea01 0202 	and.w	r2, r1, r2
20003072:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
20003074:	f04f 0301 	mov.w	r3, #1
20003078:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
2000307a:	f247 3364 	movw	r3, #29540	; 0x7364
2000307e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003082:	681b      	ldr	r3, [r3, #0]
20003084:	f04f 0200 	mov.w	r2, #0
20003088:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
2000308c:	f001 f86e 	bl	2000416c <vPortExitCritical>

		return xReturn;
20003090:	697b      	ldr	r3, [r7, #20]
	}
20003092:	4618      	mov	r0, r3
20003094:	f107 0718 	add.w	r7, r7, #24
20003098:	46bd      	mov	sp, r7
2000309a:	bd80      	pop	{r7, pc}

2000309c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
2000309c:	b580      	push	{r7, lr}
2000309e:	b08a      	sub	sp, #40	; 0x28
200030a0:	af00      	add	r7, sp, #0
200030a2:	6078      	str	r0, [r7, #4]
200030a4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
200030a6:	687b      	ldr	r3, [r7, #4]
200030a8:	2b00      	cmp	r3, #0
200030aa:	d109      	bne.n	200030c0 <vTaskNotifyGiveFromISR+0x24>
200030ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200030b0:	f383 8811 	msr	BASEPRI, r3
200030b4:	f3bf 8f6f 	isb	sy
200030b8:	f3bf 8f4f 	dsb	sy
200030bc:	617b      	str	r3, [r7, #20]
200030be:	e7fe      	b.n	200030be <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200030c0:	f001 f8f0 	bl	200042a4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
200030c4:	687b      	ldr	r3, [r7, #4]
200030c6:	60bb      	str	r3, [r7, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200030c8:	f3ef 8211 	mrs	r2, BASEPRI
200030cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200030d0:	f383 8811 	msr	BASEPRI, r3
200030d4:	f3bf 8f6f 	isb	sy
200030d8:	f3bf 8f4f 	dsb	sy
200030dc:	61fa      	str	r2, [r7, #28]
200030de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
200030e0:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200030e2:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
200030e4:	68bb      	ldr	r3, [r7, #8]
200030e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
200030ea:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
200030ec:	68bb      	ldr	r3, [r7, #8]
200030ee:	f04f 0202 	mov.w	r2, #2
200030f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
200030f6:	68bb      	ldr	r3, [r7, #8]
200030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200030fa:	f103 0201 	add.w	r2, r3, #1
200030fe:	68bb      	ldr	r3, [r7, #8]
20003100:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
20003102:	7bfb      	ldrb	r3, [r7, #15]
20003104:	2b01      	cmp	r3, #1
20003106:	d165      	bne.n	200031d4 <vTaskNotifyGiveFromISR+0x138>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
20003108:	68bb      	ldr	r3, [r7, #8]
2000310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000310c:	2b00      	cmp	r3, #0
2000310e:	d009      	beq.n	20003124 <vTaskNotifyGiveFromISR+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20003110:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003114:	f383 8811 	msr	BASEPRI, r3
20003118:	f3bf 8f6f 	isb	sy
2000311c:	f3bf 8f4f 	dsb	sy
20003120:	623b      	str	r3, [r7, #32]
20003122:	e7fe      	b.n	20003122 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20003124:	f247 4364 	movw	r3, #29796	; 0x7464
20003128:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000312c:	681b      	ldr	r3, [r3, #0]
2000312e:	2b00      	cmp	r3, #0
20003130:	d12d      	bne.n	2000318e <vTaskNotifyGiveFromISR+0xf2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20003132:	68bb      	ldr	r3, [r7, #8]
20003134:	f103 0304 	add.w	r3, r3, #4
20003138:	4618      	mov	r0, r3
2000313a:	f7fd ffbb 	bl	200010b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
2000313e:	68bb      	ldr	r3, [r7, #8]
20003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003142:	f04f 0201 	mov.w	r2, #1
20003146:	fa02 f203 	lsl.w	r2, r2, r3
2000314a:	f247 4344 	movw	r3, #29764	; 0x7444
2000314e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003152:	681b      	ldr	r3, [r3, #0]
20003154:	ea42 0203 	orr.w	r2, r2, r3
20003158:	f247 4344 	movw	r3, #29764	; 0x7444
2000315c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003160:	601a      	str	r2, [r3, #0]
20003162:	68bb      	ldr	r3, [r7, #8]
20003164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003166:	4613      	mov	r3, r2
20003168:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000316c:	4413      	add	r3, r2
2000316e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003172:	461a      	mov	r2, r3
20003174:	f247 3368 	movw	r3, #29544	; 0x7368
20003178:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000317c:	441a      	add	r2, r3
2000317e:	68bb      	ldr	r3, [r7, #8]
20003180:	f103 0304 	add.w	r3, r3, #4
20003184:	4610      	mov	r0, r2
20003186:	4619      	mov	r1, r3
20003188:	f7fd ff36 	bl	20000ff8 <vListInsertEnd>
2000318c:	e009      	b.n	200031a2 <vTaskNotifyGiveFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
2000318e:	68bb      	ldr	r3, [r7, #8]
20003190:	f103 0318 	add.w	r3, r3, #24
20003194:	f247 30fc 	movw	r0, #29692	; 0x73fc
20003198:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000319c:	4619      	mov	r1, r3
2000319e:	f7fd ff2b 	bl	20000ff8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
200031a2:	68bb      	ldr	r3, [r7, #8]
200031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200031a6:	f247 3364 	movw	r3, #29540	; 0x7364
200031aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031ae:	681b      	ldr	r3, [r3, #0]
200031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200031b2:	429a      	cmp	r2, r3
200031b4:	d90e      	bls.n	200031d4 <vTaskNotifyGiveFromISR+0x138>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
200031b6:	683b      	ldr	r3, [r7, #0]
200031b8:	2b00      	cmp	r3, #0
200031ba:	d004      	beq.n	200031c6 <vTaskNotifyGiveFromISR+0x12a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
200031bc:	683b      	ldr	r3, [r7, #0]
200031be:	f04f 0201 	mov.w	r2, #1
200031c2:	601a      	str	r2, [r3, #0]
200031c4:	e006      	b.n	200031d4 <vTaskNotifyGiveFromISR+0x138>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
200031c6:	f247 4350 	movw	r3, #29776	; 0x7450
200031ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031ce:	f04f 0201 	mov.w	r2, #1
200031d2:	601a      	str	r2, [r3, #0]
200031d4:	693b      	ldr	r3, [r7, #16]
200031d6:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200031da:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
200031de:	f107 0728 	add.w	r7, r7, #40	; 0x28
200031e2:	46bd      	mov	sp, r7
200031e4:	bd80      	pop	{r7, pc}
200031e6:	bf00      	nop

200031e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
200031e8:	b580      	push	{r7, lr}
200031ea:	b084      	sub	sp, #16
200031ec:	af00      	add	r7, sp, #0
200031ee:	6078      	str	r0, [r7, #4]
200031f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
200031f2:	f247 4340 	movw	r3, #29760	; 0x7440
200031f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031fa:	681b      	ldr	r3, [r3, #0]
200031fc:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200031fe:	f247 3364 	movw	r3, #29540	; 0x7364
20003202:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003206:	681b      	ldr	r3, [r3, #0]
20003208:	f103 0304 	add.w	r3, r3, #4
2000320c:	4618      	mov	r0, r3
2000320e:	f7fd ff51 	bl	200010b4 <uxListRemove>
20003212:	4603      	mov	r3, r0
20003214:	2b00      	cmp	r3, #0
20003216:	d117      	bne.n	20003248 <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
20003218:	f247 3364 	movw	r3, #29540	; 0x7364
2000321c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003220:	681b      	ldr	r3, [r3, #0]
20003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003224:	f04f 0201 	mov.w	r2, #1
20003228:	fa02 f303 	lsl.w	r3, r2, r3
2000322c:	ea6f 0203 	mvn.w	r2, r3
20003230:	f247 4344 	movw	r3, #29764	; 0x7444
20003234:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003238:	681b      	ldr	r3, [r3, #0]
2000323a:	ea02 0203 	and.w	r2, r2, r3
2000323e:	f247 4344 	movw	r3, #29764	; 0x7444
20003242:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003246:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003248:	687b      	ldr	r3, [r7, #4]
2000324a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000324e:	d111      	bne.n	20003274 <prvAddCurrentTaskToDelayedList+0x8c>
20003250:	683b      	ldr	r3, [r7, #0]
20003252:	2b00      	cmp	r3, #0
20003254:	d00e      	beq.n	20003274 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003256:	f247 3364 	movw	r3, #29540	; 0x7364
2000325a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000325e:	681b      	ldr	r3, [r3, #0]
20003260:	f103 0304 	add.w	r3, r3, #4
20003264:	f247 4028 	movw	r0, #29736	; 0x7428
20003268:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000326c:	4619      	mov	r1, r3
2000326e:	f7fd fec3 	bl	20000ff8 <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003272:	e03d      	b.n	200032f0 <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
20003274:	68fa      	ldr	r2, [r7, #12]
20003276:	687b      	ldr	r3, [r7, #4]
20003278:	4413      	add	r3, r2
2000327a:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
2000327c:	f247 3364 	movw	r3, #29540	; 0x7364
20003280:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003284:	681b      	ldr	r3, [r3, #0]
20003286:	68ba      	ldr	r2, [r7, #8]
20003288:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
2000328a:	68ba      	ldr	r2, [r7, #8]
2000328c:	68fb      	ldr	r3, [r7, #12]
2000328e:	429a      	cmp	r2, r3
20003290:	d210      	bcs.n	200032b4 <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003292:	f247 33f8 	movw	r3, #29688	; 0x73f8
20003296:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000329a:	681a      	ldr	r2, [r3, #0]
2000329c:	f247 3364 	movw	r3, #29540	; 0x7364
200032a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032a4:	681b      	ldr	r3, [r3, #0]
200032a6:	f103 0304 	add.w	r3, r3, #4
200032aa:	4610      	mov	r0, r2
200032ac:	4619      	mov	r1, r3
200032ae:	f7fd fec7 	bl	20001040 <vListInsert>
200032b2:	e01d      	b.n	200032f0 <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
200032b4:	f247 33f4 	movw	r3, #29684	; 0x73f4
200032b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032bc:	681a      	ldr	r2, [r3, #0]
200032be:	f247 3364 	movw	r3, #29540	; 0x7364
200032c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032c6:	681b      	ldr	r3, [r3, #0]
200032c8:	f103 0304 	add.w	r3, r3, #4
200032cc:	4610      	mov	r0, r2
200032ce:	4619      	mov	r1, r3
200032d0:	f7fd feb6 	bl	20001040 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
200032d4:	f247 435c 	movw	r3, #29788	; 0x745c
200032d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032dc:	681b      	ldr	r3, [r3, #0]
200032de:	68ba      	ldr	r2, [r7, #8]
200032e0:	429a      	cmp	r2, r3
200032e2:	d205      	bcs.n	200032f0 <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
200032e4:	f247 435c 	movw	r3, #29788	; 0x745c
200032e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032ec:	68ba      	ldr	r2, [r7, #8]
200032ee:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
200032f0:	f107 0710 	add.w	r7, r7, #16
200032f4:	46bd      	mov	sp, r7
200032f6:	bd80      	pop	{r7, pc}

200032f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
200032f8:	b580      	push	{r7, lr}
200032fa:	b084      	sub	sp, #16
200032fc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
200032fe:	f04f 0300 	mov.w	r3, #0
20003302:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
20003304:	f000 fb72 	bl	200039ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
20003308:	f247 43a0 	movw	r3, #29856	; 0x74a0
2000330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003310:	681b      	ldr	r3, [r3, #0]
20003312:	2b00      	cmp	r3, #0
20003314:	d017      	beq.n	20003346 <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
20003316:	f04f 0302 	mov.w	r3, #2
2000331a:	9300      	str	r3, [sp, #0]
2000331c:	f247 43a4 	movw	r3, #29860	; 0x74a4
20003320:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003324:	9301      	str	r3, [sp, #4]
20003326:	f243 5069 	movw	r0, #13673	; 0x3569
2000332a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000332e:	f247 2188 	movw	r1, #29320	; 0x7288
20003332:	f2c2 0100 	movt	r1, #8192	; 0x2000
20003336:	f04f 02a0 	mov.w	r2, #160	; 0xa0
2000333a:	f04f 0300 	mov.w	r3, #0
2000333e:	f7fe fc4d 	bl	20001bdc <xTaskCreate>
20003342:	4603      	mov	r3, r0
20003344:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
20003346:	683b      	ldr	r3, [r7, #0]
20003348:	2b00      	cmp	r3, #0
2000334a:	d109      	bne.n	20003360 <xTimerCreateTimerTask+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
2000334c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003350:	f383 8811 	msr	BASEPRI, r3
20003354:	f3bf 8f6f 	isb	sy
20003358:	f3bf 8f4f 	dsb	sy
2000335c:	607b      	str	r3, [r7, #4]
2000335e:	e7fe      	b.n	2000335e <xTimerCreateTimerTask+0x66>
	return xReturn;
20003360:	683b      	ldr	r3, [r7, #0]
}
20003362:	4618      	mov	r0, r3
20003364:	f107 0708 	add.w	r7, r7, #8
20003368:	46bd      	mov	sp, r7
2000336a:	bd80      	pop	{r7, pc}

2000336c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
2000336c:	b580      	push	{r7, lr}
2000336e:	b088      	sub	sp, #32
20003370:	af02      	add	r7, sp, #8
20003372:	60f8      	str	r0, [r7, #12]
20003374:	60b9      	str	r1, [r7, #8]
20003376:	607a      	str	r2, [r7, #4]
20003378:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
2000337a:	f04f 002c 	mov.w	r0, #44	; 0x2c
2000337e:	f000 fb6f 	bl	20003a60 <pvPortMalloc>
20003382:	4603      	mov	r3, r0
20003384:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
20003386:	697b      	ldr	r3, [r7, #20]
20003388:	2b00      	cmp	r3, #0
2000338a:	d009      	beq.n	200033a0 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
2000338c:	6a3b      	ldr	r3, [r7, #32]
2000338e:	9300      	str	r3, [sp, #0]
20003390:	697b      	ldr	r3, [r7, #20]
20003392:	9301      	str	r3, [sp, #4]
20003394:	68f8      	ldr	r0, [r7, #12]
20003396:	68b9      	ldr	r1, [r7, #8]
20003398:	687a      	ldr	r2, [r7, #4]
2000339a:	683b      	ldr	r3, [r7, #0]
2000339c:	f000 f806 	bl	200033ac <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
200033a0:	697b      	ldr	r3, [r7, #20]
	}
200033a2:	4618      	mov	r0, r3
200033a4:	f107 0718 	add.w	r7, r7, #24
200033a8:	46bd      	mov	sp, r7
200033aa:	bd80      	pop	{r7, pc}

200033ac <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
200033ac:	b580      	push	{r7, lr}
200033ae:	b086      	sub	sp, #24
200033b0:	af00      	add	r7, sp, #0
200033b2:	60f8      	str	r0, [r7, #12]
200033b4:	60b9      	str	r1, [r7, #8]
200033b6:	607a      	str	r2, [r7, #4]
200033b8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
200033ba:	68bb      	ldr	r3, [r7, #8]
200033bc:	2b00      	cmp	r3, #0
200033be:	d109      	bne.n	200033d4 <prvInitialiseNewTimer+0x28>
200033c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200033c4:	f383 8811 	msr	BASEPRI, r3
200033c8:	f3bf 8f6f 	isb	sy
200033cc:	f3bf 8f4f 	dsb	sy
200033d0:	617b      	str	r3, [r7, #20]
200033d2:	e7fe      	b.n	200033d2 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
200033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200033d6:	2b00      	cmp	r3, #0
200033d8:	d016      	beq.n	20003408 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
200033da:	f000 fb07 	bl	200039ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
200033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200033e0:	68fa      	ldr	r2, [r7, #12]
200033e2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
200033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200033e6:	68ba      	ldr	r2, [r7, #8]
200033e8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
200033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200033ec:	687a      	ldr	r2, [r7, #4]
200033ee:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
200033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200033f2:	683a      	ldr	r2, [r7, #0]
200033f4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
200033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200033f8:	6a3a      	ldr	r2, [r7, #32]
200033fa:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
200033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200033fe:	f103 0304 	add.w	r3, r3, #4
20003402:	4618      	mov	r0, r3
20003404:	f7fd fdea 	bl	20000fdc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
20003408:	f107 0718 	add.w	r7, r7, #24
2000340c:	46bd      	mov	sp, r7
2000340e:	bd80      	pop	{r7, pc}

20003410 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
20003410:	b580      	push	{r7, lr}
20003412:	b08a      	sub	sp, #40	; 0x28
20003414:	af00      	add	r7, sp, #0
20003416:	60f8      	str	r0, [r7, #12]
20003418:	60b9      	str	r1, [r7, #8]
2000341a:	607a      	str	r2, [r7, #4]
2000341c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
2000341e:	f04f 0300 	mov.w	r3, #0
20003422:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
20003424:	68fb      	ldr	r3, [r7, #12]
20003426:	2b00      	cmp	r3, #0
20003428:	d109      	bne.n	2000343e <xTimerGenericCommand+0x2e>
2000342a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000342e:	f383 8811 	msr	BASEPRI, r3
20003432:	f3bf 8f6f 	isb	sy
20003436:	f3bf 8f4f 	dsb	sy
2000343a:	627b      	str	r3, [r7, #36]	; 0x24
2000343c:	e7fe      	b.n	2000343c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
2000343e:	f247 43a0 	movw	r3, #29856	; 0x74a0
20003442:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003446:	681b      	ldr	r3, [r3, #0]
20003448:	2b00      	cmp	r3, #0
2000344a:	d040      	beq.n	200034ce <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
2000344c:	68bb      	ldr	r3, [r7, #8]
2000344e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
20003450:	687b      	ldr	r3, [r7, #4]
20003452:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
20003454:	68fb      	ldr	r3, [r7, #12]
20003456:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20003458:	68bb      	ldr	r3, [r7, #8]
2000345a:	2b05      	cmp	r3, #5
2000345c:	dc27      	bgt.n	200034ae <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
2000345e:	f7ff fbb9 	bl	20002bd4 <xTaskGetSchedulerState>
20003462:	4603      	mov	r3, r0
20003464:	2b02      	cmp	r3, #2
20003466:	d110      	bne.n	2000348a <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
20003468:	f247 43a0 	movw	r3, #29856	; 0x74a0
2000346c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003470:	681a      	ldr	r2, [r3, #0]
20003472:	f107 0310 	add.w	r3, r7, #16
20003476:	4610      	mov	r0, r2
20003478:	4619      	mov	r1, r3
2000347a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000347c:	f04f 0300 	mov.w	r3, #0
20003480:	f7fd ff58 	bl	20001334 <xQueueGenericSend>
20003484:	4603      	mov	r3, r0
20003486:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
20003488:	e021      	b.n	200034ce <xTimerGenericCommand+0xbe>
2000348a:	f247 43a0 	movw	r3, #29856	; 0x74a0
2000348e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003492:	681a      	ldr	r2, [r3, #0]
20003494:	f107 0310 	add.w	r3, r7, #16
20003498:	4610      	mov	r0, r2
2000349a:	4619      	mov	r1, r3
2000349c:	f04f 0200 	mov.w	r2, #0
200034a0:	f04f 0300 	mov.w	r3, #0
200034a4:	f7fd ff46 	bl	20001334 <xQueueGenericSend>
200034a8:	4603      	mov	r3, r0
200034aa:	623b      	str	r3, [r7, #32]
200034ac:	e00f      	b.n	200034ce <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
200034ae:	f247 43a0 	movw	r3, #29856	; 0x74a0
200034b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034b6:	681a      	ldr	r2, [r3, #0]
200034b8:	f107 0310 	add.w	r3, r7, #16
200034bc:	4610      	mov	r0, r2
200034be:	4619      	mov	r1, r3
200034c0:	683a      	ldr	r2, [r7, #0]
200034c2:	f04f 0300 	mov.w	r3, #0
200034c6:	f7fe f84d 	bl	20001564 <xQueueGenericSendFromISR>
200034ca:	4603      	mov	r3, r0
200034cc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
200034ce:	6a3b      	ldr	r3, [r7, #32]
}
200034d0:	4618      	mov	r0, r3
200034d2:	f107 0728 	add.w	r7, r7, #40	; 0x28
200034d6:	46bd      	mov	sp, r7
200034d8:	bd80      	pop	{r7, pc}
200034da:	bf00      	nop

200034dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
200034dc:	b580      	push	{r7, lr}
200034de:	b088      	sub	sp, #32
200034e0:	af02      	add	r7, sp, #8
200034e2:	6078      	str	r0, [r7, #4]
200034e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
200034e6:	f247 4398 	movw	r3, #29848	; 0x7498
200034ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034ee:	681b      	ldr	r3, [r3, #0]
200034f0:	68db      	ldr	r3, [r3, #12]
200034f2:	68db      	ldr	r3, [r3, #12]
200034f4:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200034f6:	693b      	ldr	r3, [r7, #16]
200034f8:	f103 0304 	add.w	r3, r3, #4
200034fc:	4618      	mov	r0, r3
200034fe:	f7fd fdd9 	bl	200010b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003502:	693b      	ldr	r3, [r7, #16]
20003504:	69db      	ldr	r3, [r3, #28]
20003506:	2b01      	cmp	r3, #1
20003508:	d126      	bne.n	20003558 <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
2000350a:	693b      	ldr	r3, [r7, #16]
2000350c:	699a      	ldr	r2, [r3, #24]
2000350e:	687b      	ldr	r3, [r7, #4]
20003510:	4413      	add	r3, r2
20003512:	6938      	ldr	r0, [r7, #16]
20003514:	4619      	mov	r1, r3
20003516:	683a      	ldr	r2, [r7, #0]
20003518:	687b      	ldr	r3, [r7, #4]
2000351a:	f000 f8df 	bl	200036dc <prvInsertTimerInActiveList>
2000351e:	4603      	mov	r3, r0
20003520:	2b00      	cmp	r3, #0
20003522:	d019      	beq.n	20003558 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003524:	f04f 0300 	mov.w	r3, #0
20003528:	9300      	str	r3, [sp, #0]
2000352a:	6938      	ldr	r0, [r7, #16]
2000352c:	f04f 0100 	mov.w	r1, #0
20003530:	687a      	ldr	r2, [r7, #4]
20003532:	f04f 0300 	mov.w	r3, #0
20003536:	f7ff ff6b 	bl	20003410 <xTimerGenericCommand>
2000353a:	4603      	mov	r3, r0
2000353c:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
2000353e:	68fb      	ldr	r3, [r7, #12]
20003540:	2b00      	cmp	r3, #0
20003542:	d109      	bne.n	20003558 <prvProcessExpiredTimer+0x7c>
20003544:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003548:	f383 8811 	msr	BASEPRI, r3
2000354c:	f3bf 8f6f 	isb	sy
20003550:	f3bf 8f4f 	dsb	sy
20003554:	617b      	str	r3, [r7, #20]
20003556:	e7fe      	b.n	20003556 <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003558:	693b      	ldr	r3, [r7, #16]
2000355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000355c:	6938      	ldr	r0, [r7, #16]
2000355e:	4798      	blx	r3
}
20003560:	f107 0718 	add.w	r7, r7, #24
20003564:	46bd      	mov	sp, r7
20003566:	bd80      	pop	{r7, pc}

20003568 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
20003568:	b580      	push	{r7, lr}
2000356a:	b084      	sub	sp, #16
2000356c:	af00      	add	r7, sp, #0
2000356e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20003570:	f107 0308 	add.w	r3, r7, #8
20003574:	4618      	mov	r0, r3
20003576:	f000 f861 	bl	2000363c <prvGetNextExpireTime>
2000357a:	4603      	mov	r3, r0
2000357c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
2000357e:	68bb      	ldr	r3, [r7, #8]
20003580:	68f8      	ldr	r0, [r7, #12]
20003582:	4619      	mov	r1, r3
20003584:	f000 f804 	bl	20003590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
20003588:	f000 f8f4 	bl	20003774 <prvProcessReceivedCommands>
	}
2000358c:	e7f0      	b.n	20003570 <prvTimerTask+0x8>
2000358e:	bf00      	nop

20003590 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20003590:	b580      	push	{r7, lr}
20003592:	b084      	sub	sp, #16
20003594:	af00      	add	r7, sp, #0
20003596:	6078      	str	r0, [r7, #4]
20003598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
2000359a:	f7fe fdf3 	bl	20002184 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
2000359e:	f107 0308 	add.w	r3, r7, #8
200035a2:	4618      	mov	r0, r3
200035a4:	f000 f872 	bl	2000368c <prvSampleTimeNow>
200035a8:	4603      	mov	r3, r0
200035aa:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
200035ac:	68bb      	ldr	r3, [r7, #8]
200035ae:	2b00      	cmp	r3, #0
200035b0:	d13b      	bne.n	2000362a <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
200035b2:	683b      	ldr	r3, [r7, #0]
200035b4:	2b00      	cmp	r3, #0
200035b6:	d10b      	bne.n	200035d0 <prvProcessTimerOrBlockTask+0x40>
200035b8:	687a      	ldr	r2, [r7, #4]
200035ba:	68fb      	ldr	r3, [r7, #12]
200035bc:	429a      	cmp	r2, r3
200035be:	d807      	bhi.n	200035d0 <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
200035c0:	f7fe fdf2 	bl	200021a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
200035c4:	6878      	ldr	r0, [r7, #4]
200035c6:	68f9      	ldr	r1, [r7, #12]
200035c8:	f7ff ff88 	bl	200034dc <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
200035cc:	bf00      	nop
200035ce:	e030      	b.n	20003632 <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
200035d0:	683b      	ldr	r3, [r7, #0]
200035d2:	2b00      	cmp	r3, #0
200035d4:	d00a      	beq.n	200035ec <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
200035d6:	f247 439c 	movw	r3, #29852	; 0x749c
200035da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035de:	681b      	ldr	r3, [r3, #0]
200035e0:	681b      	ldr	r3, [r3, #0]
200035e2:	2b00      	cmp	r3, #0
200035e4:	bf14      	ite	ne
200035e6:	2300      	movne	r3, #0
200035e8:	2301      	moveq	r3, #1
200035ea:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
200035ec:	f247 43a0 	movw	r3, #29856	; 0x74a0
200035f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035f4:	681a      	ldr	r2, [r3, #0]
200035f6:	6879      	ldr	r1, [r7, #4]
200035f8:	68fb      	ldr	r3, [r7, #12]
200035fa:	ebc3 0301 	rsb	r3, r3, r1
200035fe:	4610      	mov	r0, r2
20003600:	4619      	mov	r1, r3
20003602:	683a      	ldr	r2, [r7, #0]
20003604:	f7fe fab0 	bl	20001b68 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
20003608:	f7fe fdce 	bl	200021a8 <xTaskResumeAll>
2000360c:	4603      	mov	r3, r0
2000360e:	2b00      	cmp	r3, #0
20003610:	d10e      	bne.n	20003630 <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003612:	f64e 5304 	movw	r3, #60676	; 0xed04
20003616:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000361e:	601a      	str	r2, [r3, #0]
20003620:	f3bf 8f4f 	dsb	sy
20003624:	f3bf 8f6f 	isb	sy
20003628:	e003      	b.n	20003632 <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
2000362a:	f7fe fdbd 	bl	200021a8 <xTaskResumeAll>
2000362e:	e000      	b.n	20003632 <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003630:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
20003632:	f107 0710 	add.w	r7, r7, #16
20003636:	46bd      	mov	sp, r7
20003638:	bd80      	pop	{r7, pc}
2000363a:	bf00      	nop

2000363c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
2000363c:	b480      	push	{r7}
2000363e:	b085      	sub	sp, #20
20003640:	af00      	add	r7, sp, #0
20003642:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
20003644:	f247 4398 	movw	r3, #29848	; 0x7498
20003648:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000364c:	681b      	ldr	r3, [r3, #0]
2000364e:	681b      	ldr	r3, [r3, #0]
20003650:	2b00      	cmp	r3, #0
20003652:	bf14      	ite	ne
20003654:	2200      	movne	r2, #0
20003656:	2201      	moveq	r2, #1
20003658:	687b      	ldr	r3, [r7, #4]
2000365a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
2000365c:	687b      	ldr	r3, [r7, #4]
2000365e:	681b      	ldr	r3, [r3, #0]
20003660:	2b00      	cmp	r3, #0
20003662:	d108      	bne.n	20003676 <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003664:	f247 4398 	movw	r3, #29848	; 0x7498
20003668:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000366c:	681b      	ldr	r3, [r3, #0]
2000366e:	68db      	ldr	r3, [r3, #12]
20003670:	681b      	ldr	r3, [r3, #0]
20003672:	60fb      	str	r3, [r7, #12]
20003674:	e002      	b.n	2000367c <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003676:	f04f 0300 	mov.w	r3, #0
2000367a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
2000367c:	68fb      	ldr	r3, [r7, #12]
}
2000367e:	4618      	mov	r0, r3
20003680:	f107 0714 	add.w	r7, r7, #20
20003684:	46bd      	mov	sp, r7
20003686:	bc80      	pop	{r7}
20003688:	4770      	bx	lr
2000368a:	bf00      	nop

2000368c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
2000368c:	b580      	push	{r7, lr}
2000368e:	b084      	sub	sp, #16
20003690:	af00      	add	r7, sp, #0
20003692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003694:	f7fe fe58 	bl	20002348 <xTaskGetTickCount>
20003698:	4603      	mov	r3, r0
2000369a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
2000369c:	f247 43a8 	movw	r3, #29864	; 0x74a8
200036a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036a4:	681b      	ldr	r3, [r3, #0]
200036a6:	68fa      	ldr	r2, [r7, #12]
200036a8:	429a      	cmp	r2, r3
200036aa:	d206      	bcs.n	200036ba <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
200036ac:	f000 f924 	bl	200038f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
200036b0:	687b      	ldr	r3, [r7, #4]
200036b2:	f04f 0201 	mov.w	r2, #1
200036b6:	601a      	str	r2, [r3, #0]
200036b8:	e003      	b.n	200036c2 <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
200036ba:	687b      	ldr	r3, [r7, #4]
200036bc:	f04f 0200 	mov.w	r2, #0
200036c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
200036c2:	f247 43a8 	movw	r3, #29864	; 0x74a8
200036c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036ca:	68fa      	ldr	r2, [r7, #12]
200036cc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
200036ce:	68fb      	ldr	r3, [r7, #12]
}
200036d0:	4618      	mov	r0, r3
200036d2:	f107 0710 	add.w	r7, r7, #16
200036d6:	46bd      	mov	sp, r7
200036d8:	bd80      	pop	{r7, pc}
200036da:	bf00      	nop

200036dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
200036dc:	b580      	push	{r7, lr}
200036de:	b086      	sub	sp, #24
200036e0:	af00      	add	r7, sp, #0
200036e2:	60f8      	str	r0, [r7, #12]
200036e4:	60b9      	str	r1, [r7, #8]
200036e6:	607a      	str	r2, [r7, #4]
200036e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
200036ea:	f04f 0300 	mov.w	r3, #0
200036ee:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
200036f0:	68fb      	ldr	r3, [r7, #12]
200036f2:	68ba      	ldr	r2, [r7, #8]
200036f4:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
200036f6:	68fb      	ldr	r3, [r7, #12]
200036f8:	68fa      	ldr	r2, [r7, #12]
200036fa:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
200036fc:	68ba      	ldr	r2, [r7, #8]
200036fe:	687b      	ldr	r3, [r7, #4]
20003700:	429a      	cmp	r2, r3
20003702:	d818      	bhi.n	20003736 <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003704:	687a      	ldr	r2, [r7, #4]
20003706:	683b      	ldr	r3, [r7, #0]
20003708:	ebc3 0202 	rsb	r2, r3, r2
2000370c:	68fb      	ldr	r3, [r7, #12]
2000370e:	699b      	ldr	r3, [r3, #24]
20003710:	429a      	cmp	r2, r3
20003712:	d303      	bcc.n	2000371c <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003714:	f04f 0301 	mov.w	r3, #1
20003718:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
2000371a:	e024      	b.n	20003766 <prvInsertTimerInActiveList+0x8a>
2000371c:	f247 439c 	movw	r3, #29852	; 0x749c
20003720:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003724:	681a      	ldr	r2, [r3, #0]
20003726:	68fb      	ldr	r3, [r7, #12]
20003728:	f103 0304 	add.w	r3, r3, #4
2000372c:	4610      	mov	r0, r2
2000372e:	4619      	mov	r1, r3
20003730:	f7fd fc86 	bl	20001040 <vListInsert>
20003734:	e017      	b.n	20003766 <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003736:	687a      	ldr	r2, [r7, #4]
20003738:	683b      	ldr	r3, [r7, #0]
2000373a:	429a      	cmp	r2, r3
2000373c:	d207      	bcs.n	2000374e <prvInsertTimerInActiveList+0x72>
2000373e:	68ba      	ldr	r2, [r7, #8]
20003740:	683b      	ldr	r3, [r7, #0]
20003742:	429a      	cmp	r2, r3
20003744:	d303      	bcc.n	2000374e <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
20003746:	f04f 0301 	mov.w	r3, #1
2000374a:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
2000374c:	e00b      	b.n	20003766 <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
2000374e:	f247 4398 	movw	r3, #29848	; 0x7498
20003752:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003756:	681a      	ldr	r2, [r3, #0]
20003758:	68fb      	ldr	r3, [r7, #12]
2000375a:	f103 0304 	add.w	r3, r3, #4
2000375e:	4610      	mov	r0, r2
20003760:	4619      	mov	r1, r3
20003762:	f7fd fc6d 	bl	20001040 <vListInsert>
		}
	}

	return xProcessTimerNow;
20003766:	697b      	ldr	r3, [r7, #20]
}
20003768:	4618      	mov	r0, r3
2000376a:	f107 0718 	add.w	r7, r7, #24
2000376e:	46bd      	mov	sp, r7
20003770:	bd80      	pop	{r7, pc}
20003772:	bf00      	nop

20003774 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20003774:	b580      	push	{r7, lr}
20003776:	b08e      	sub	sp, #56	; 0x38
20003778:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
2000377a:	e0a5      	b.n	200038c8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
2000377c:	687b      	ldr	r3, [r7, #4]
2000377e:	2b00      	cmp	r3, #0
20003780:	da1a      	bge.n	200037b8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
20003782:	f107 0304 	add.w	r3, r7, #4
20003786:	f103 0304 	add.w	r3, r3, #4
2000378a:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
2000378c:	6a3b      	ldr	r3, [r7, #32]
2000378e:	2b00      	cmp	r3, #0
20003790:	d109      	bne.n	200037a6 <prvProcessReceivedCommands+0x32>
20003792:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003796:	f383 8811 	msr	BASEPRI, r3
2000379a:	f3bf 8f6f 	isb	sy
2000379e:	f3bf 8f4f 	dsb	sy
200037a2:	627b      	str	r3, [r7, #36]	; 0x24
200037a4:	e7fe      	b.n	200037a4 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
200037a6:	6a3b      	ldr	r3, [r7, #32]
200037a8:	681b      	ldr	r3, [r3, #0]
200037aa:	6a3a      	ldr	r2, [r7, #32]
200037ac:	6851      	ldr	r1, [r2, #4]
200037ae:	6a3a      	ldr	r2, [r7, #32]
200037b0:	6892      	ldr	r2, [r2, #8]
200037b2:	4608      	mov	r0, r1
200037b4:	4611      	mov	r1, r2
200037b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
200037b8:	687b      	ldr	r3, [r7, #4]
200037ba:	2b00      	cmp	r3, #0
200037bc:	f2c0 8084 	blt.w	200038c8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
200037c0:	68fb      	ldr	r3, [r7, #12]
200037c2:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
200037c4:	697b      	ldr	r3, [r7, #20]
200037c6:	695b      	ldr	r3, [r3, #20]
200037c8:	2b00      	cmp	r3, #0
200037ca:	d005      	beq.n	200037d8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200037cc:	697b      	ldr	r3, [r7, #20]
200037ce:	f103 0304 	add.w	r3, r3, #4
200037d2:	4618      	mov	r0, r3
200037d4:	f7fd fc6e 	bl	200010b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
200037d8:	463b      	mov	r3, r7
200037da:	4618      	mov	r0, r3
200037dc:	f7ff ff56 	bl	2000368c <prvSampleTimeNow>
200037e0:	4603      	mov	r3, r0
200037e2:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
200037e4:	687b      	ldr	r3, [r7, #4]
200037e6:	2b09      	cmp	r3, #9
200037e8:	d86e      	bhi.n	200038c8 <prvProcessReceivedCommands+0x154>
200037ea:	a201      	add	r2, pc, #4	; (adr r2, 200037f0 <prvProcessReceivedCommands+0x7c>)
200037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200037f0:	20003819 	.word	0x20003819
200037f4:	20003819 	.word	0x20003819
200037f8:	20003819 	.word	0x20003819
200037fc:	200038c9 	.word	0x200038c9
20003800:	2000387f 	.word	0x2000387f
20003804:	200038b7 	.word	0x200038b7
20003808:	20003819 	.word	0x20003819
2000380c:	20003819 	.word	0x20003819
20003810:	200038c9 	.word	0x200038c9
20003814:	2000387f 	.word	0x2000387f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003818:	68ba      	ldr	r2, [r7, #8]
2000381a:	697b      	ldr	r3, [r7, #20]
2000381c:	699b      	ldr	r3, [r3, #24]
2000381e:	441a      	add	r2, r3
20003820:	68bb      	ldr	r3, [r7, #8]
20003822:	6978      	ldr	r0, [r7, #20]
20003824:	4611      	mov	r1, r2
20003826:	69fa      	ldr	r2, [r7, #28]
20003828:	f7ff ff58 	bl	200036dc <prvInsertTimerInActiveList>
2000382c:	4603      	mov	r3, r0
2000382e:	2b00      	cmp	r3, #0
20003830:	d045      	beq.n	200038be <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003832:	697b      	ldr	r3, [r7, #20]
20003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003836:	6978      	ldr	r0, [r7, #20]
20003838:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
2000383a:	697b      	ldr	r3, [r7, #20]
2000383c:	69db      	ldr	r3, [r3, #28]
2000383e:	2b01      	cmp	r3, #1
20003840:	d13f      	bne.n	200038c2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
20003842:	68ba      	ldr	r2, [r7, #8]
20003844:	697b      	ldr	r3, [r7, #20]
20003846:	699b      	ldr	r3, [r3, #24]
20003848:	4413      	add	r3, r2
2000384a:	f04f 0200 	mov.w	r2, #0
2000384e:	9200      	str	r2, [sp, #0]
20003850:	6978      	ldr	r0, [r7, #20]
20003852:	f04f 0100 	mov.w	r1, #0
20003856:	461a      	mov	r2, r3
20003858:	f04f 0300 	mov.w	r3, #0
2000385c:	f7ff fdd8 	bl	20003410 <xTimerGenericCommand>
20003860:	4603      	mov	r3, r0
20003862:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
20003864:	69bb      	ldr	r3, [r7, #24]
20003866:	2b00      	cmp	r3, #0
20003868:	d12d      	bne.n	200038c6 <prvProcessReceivedCommands+0x152>
2000386a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000386e:	f383 8811 	msr	BASEPRI, r3
20003872:	f3bf 8f6f 	isb	sy
20003876:	f3bf 8f4f 	dsb	sy
2000387a:	62bb      	str	r3, [r7, #40]	; 0x28
2000387c:	e7fe      	b.n	2000387c <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
2000387e:	68ba      	ldr	r2, [r7, #8]
20003880:	697b      	ldr	r3, [r7, #20]
20003882:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003884:	697b      	ldr	r3, [r7, #20]
20003886:	699b      	ldr	r3, [r3, #24]
20003888:	2b00      	cmp	r3, #0
2000388a:	d109      	bne.n	200038a0 <prvProcessReceivedCommands+0x12c>
2000388c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003890:	f383 8811 	msr	BASEPRI, r3
20003894:	f3bf 8f6f 	isb	sy
20003898:	f3bf 8f4f 	dsb	sy
2000389c:	62fb      	str	r3, [r7, #44]	; 0x2c
2000389e:	e7fe      	b.n	2000389e <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
200038a0:	697b      	ldr	r3, [r7, #20]
200038a2:	699a      	ldr	r2, [r3, #24]
200038a4:	69fb      	ldr	r3, [r7, #28]
200038a6:	4413      	add	r3, r2
200038a8:	6978      	ldr	r0, [r7, #20]
200038aa:	4619      	mov	r1, r3
200038ac:	69fa      	ldr	r2, [r7, #28]
200038ae:	69fb      	ldr	r3, [r7, #28]
200038b0:	f7ff ff14 	bl	200036dc <prvInsertTimerInActiveList>
					break;
200038b4:	e008      	b.n	200038c8 <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
200038b6:	6978      	ldr	r0, [r7, #20]
200038b8:	f000 f9ce 	bl	20003c58 <vPortFree>
200038bc:	e004      	b.n	200038c8 <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
200038be:	bf00      	nop
200038c0:	e002      	b.n	200038c8 <prvProcessReceivedCommands+0x154>
200038c2:	bf00      	nop
200038c4:	e000      	b.n	200038c8 <prvProcessReceivedCommands+0x154>
200038c6:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
200038c8:	f247 43a0 	movw	r3, #29856	; 0x74a0
200038cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038d0:	681a      	ldr	r2, [r3, #0]
200038d2:	f107 0304 	add.w	r3, r7, #4
200038d6:	4610      	mov	r0, r2
200038d8:	4619      	mov	r1, r3
200038da:	f04f 0200 	mov.w	r2, #0
200038de:	f04f 0300 	mov.w	r3, #0
200038e2:	f7fd fee1 	bl	200016a8 <xQueueGenericReceive>
200038e6:	4603      	mov	r3, r0
200038e8:	2b00      	cmp	r3, #0
200038ea:	f47f af47 	bne.w	2000377c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
200038ee:	f107 0730 	add.w	r7, r7, #48	; 0x30
200038f2:	46bd      	mov	sp, r7
200038f4:	bd80      	pop	{r7, pc}
200038f6:	bf00      	nop

200038f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
200038f8:	b580      	push	{r7, lr}
200038fa:	b088      	sub	sp, #32
200038fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
200038fe:	e053      	b.n	200039a8 <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003900:	f247 4398 	movw	r3, #29848	; 0x7498
20003904:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003908:	681b      	ldr	r3, [r3, #0]
2000390a:	68db      	ldr	r3, [r3, #12]
2000390c:	681b      	ldr	r3, [r3, #0]
2000390e:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003910:	f247 4398 	movw	r3, #29848	; 0x7498
20003914:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003918:	681b      	ldr	r3, [r3, #0]
2000391a:	68db      	ldr	r3, [r3, #12]
2000391c:	68db      	ldr	r3, [r3, #12]
2000391e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003920:	68fb      	ldr	r3, [r7, #12]
20003922:	f103 0304 	add.w	r3, r3, #4
20003926:	4618      	mov	r0, r3
20003928:	f7fd fbc4 	bl	200010b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
2000392c:	68fb      	ldr	r3, [r7, #12]
2000392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003930:	68f8      	ldr	r0, [r7, #12]
20003932:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003934:	68fb      	ldr	r3, [r7, #12]
20003936:	69db      	ldr	r3, [r3, #28]
20003938:	2b01      	cmp	r3, #1
2000393a:	d135      	bne.n	200039a8 <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
2000393c:	68fb      	ldr	r3, [r7, #12]
2000393e:	699a      	ldr	r2, [r3, #24]
20003940:	683b      	ldr	r3, [r7, #0]
20003942:	4413      	add	r3, r2
20003944:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
20003946:	687a      	ldr	r2, [r7, #4]
20003948:	683b      	ldr	r3, [r7, #0]
2000394a:	429a      	cmp	r2, r3
2000394c:	d912      	bls.n	20003974 <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
2000394e:	68fb      	ldr	r3, [r7, #12]
20003950:	687a      	ldr	r2, [r7, #4]
20003952:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003954:	68fb      	ldr	r3, [r7, #12]
20003956:	68fa      	ldr	r2, [r7, #12]
20003958:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
2000395a:	f247 4398 	movw	r3, #29848	; 0x7498
2000395e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003962:	681a      	ldr	r2, [r3, #0]
20003964:	68fb      	ldr	r3, [r7, #12]
20003966:	f103 0304 	add.w	r3, r3, #4
2000396a:	4610      	mov	r0, r2
2000396c:	4619      	mov	r1, r3
2000396e:	f7fd fb67 	bl	20001040 <vListInsert>
20003972:	e019      	b.n	200039a8 <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003974:	f04f 0300 	mov.w	r3, #0
20003978:	9300      	str	r3, [sp, #0]
2000397a:	68f8      	ldr	r0, [r7, #12]
2000397c:	f04f 0100 	mov.w	r1, #0
20003980:	683a      	ldr	r2, [r7, #0]
20003982:	f04f 0300 	mov.w	r3, #0
20003986:	f7ff fd43 	bl	20003410 <xTimerGenericCommand>
2000398a:	4603      	mov	r3, r0
2000398c:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
2000398e:	693b      	ldr	r3, [r7, #16]
20003990:	2b00      	cmp	r3, #0
20003992:	d109      	bne.n	200039a8 <prvSwitchTimerLists+0xb0>
20003994:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003998:	f383 8811 	msr	BASEPRI, r3
2000399c:	f3bf 8f6f 	isb	sy
200039a0:	f3bf 8f4f 	dsb	sy
200039a4:	617b      	str	r3, [r7, #20]
200039a6:	e7fe      	b.n	200039a6 <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
200039a8:	f247 4398 	movw	r3, #29848	; 0x7498
200039ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039b0:	681b      	ldr	r3, [r3, #0]
200039b2:	681b      	ldr	r3, [r3, #0]
200039b4:	2b00      	cmp	r3, #0
200039b6:	d1a3      	bne.n	20003900 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
200039b8:	f247 4398 	movw	r3, #29848	; 0x7498
200039bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039c0:	681b      	ldr	r3, [r3, #0]
200039c2:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
200039c4:	f247 439c 	movw	r3, #29852	; 0x749c
200039c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039cc:	681a      	ldr	r2, [r3, #0]
200039ce:	f247 4398 	movw	r3, #29848	; 0x7498
200039d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039d6:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
200039d8:	f247 439c 	movw	r3, #29852	; 0x749c
200039dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039e0:	68ba      	ldr	r2, [r7, #8]
200039e2:	601a      	str	r2, [r3, #0]
}
200039e4:	f107 0718 	add.w	r7, r7, #24
200039e8:	46bd      	mov	sp, r7
200039ea:	bd80      	pop	{r7, pc}

200039ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
200039ec:	b580      	push	{r7, lr}
200039ee:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
200039f0:	f000 fb84 	bl	200040fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
200039f4:	f247 43a0 	movw	r3, #29856	; 0x74a0
200039f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039fc:	681b      	ldr	r3, [r3, #0]
200039fe:	2b00      	cmp	r3, #0
20003a00:	d12b      	bne.n	20003a5a <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
20003a02:	f247 4070 	movw	r0, #29808	; 0x7470
20003a06:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003a0a:	f7fd fac3 	bl	20000f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003a0e:	f247 4084 	movw	r0, #29828	; 0x7484
20003a12:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003a16:	f7fd fabd 	bl	20000f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003a1a:	f247 4398 	movw	r3, #29848	; 0x7498
20003a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a22:	f247 4270 	movw	r2, #29808	; 0x7470
20003a26:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003a2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003a2c:	f247 439c 	movw	r3, #29852	; 0x749c
20003a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a34:	f247 4284 	movw	r2, #29828	; 0x7484
20003a38:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003a3c:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
20003a3e:	f04f 0005 	mov.w	r0, #5
20003a42:	f04f 0110 	mov.w	r1, #16
20003a46:	f04f 0200 	mov.w	r2, #0
20003a4a:	f7fd fbd5 	bl	200011f8 <xQueueGenericCreate>
20003a4e:	4602      	mov	r2, r0
20003a50:	f247 43a0 	movw	r3, #29856	; 0x74a0
20003a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a58:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003a5a:	f000 fb87 	bl	2000416c <vPortExitCritical>
}
20003a5e:	bd80      	pop	{r7, pc}

20003a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003a60:	b580      	push	{r7, lr}
20003a62:	b08a      	sub	sp, #40	; 0x28
20003a64:	af00      	add	r7, sp, #0
20003a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003a68:	f04f 0300 	mov.w	r3, #0
20003a6c:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
20003a6e:	f7fe fb89 	bl	20002184 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003a72:	f24d 635c 	movw	r3, #54876	; 0xd65c
20003a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a7a:	681b      	ldr	r3, [r3, #0]
20003a7c:	2b00      	cmp	r3, #0
20003a7e:	d101      	bne.n	20003a84 <pvPortMalloc+0x24>
		{
			prvHeapInit();
20003a80:	f000 f956 	bl	20003d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003a84:	f24d 6368 	movw	r3, #54888	; 0xd668
20003a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a8c:	681a      	ldr	r2, [r3, #0]
20003a8e:	687b      	ldr	r3, [r7, #4]
20003a90:	ea02 0303 	and.w	r3, r2, r3
20003a94:	2b00      	cmp	r3, #0
20003a96:	f040 80c2 	bne.w	20003c1e <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003a9a:	687b      	ldr	r3, [r7, #4]
20003a9c:	2b00      	cmp	r3, #0
20003a9e:	d021      	beq.n	20003ae4 <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
20003aa0:	f247 2390 	movw	r3, #29328	; 0x7290
20003aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003aa8:	681b      	ldr	r3, [r3, #0]
20003aaa:	687a      	ldr	r2, [r7, #4]
20003aac:	4413      	add	r3, r2
20003aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003ab0:	687b      	ldr	r3, [r7, #4]
20003ab2:	f003 0307 	and.w	r3, r3, #7
20003ab6:	2b00      	cmp	r3, #0
20003ab8:	d014      	beq.n	20003ae4 <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
20003aba:	687b      	ldr	r3, [r7, #4]
20003abc:	f023 0307 	bic.w	r3, r3, #7
20003ac0:	f103 0308 	add.w	r3, r3, #8
20003ac4:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003ac6:	687b      	ldr	r3, [r7, #4]
20003ac8:	f003 0307 	and.w	r3, r3, #7
20003acc:	2b00      	cmp	r3, #0
20003ace:	d009      	beq.n	20003ae4 <pvPortMalloc+0x84>
20003ad0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003ad4:	f383 8811 	msr	BASEPRI, r3
20003ad8:	f3bf 8f6f 	isb	sy
20003adc:	f3bf 8f4f 	dsb	sy
20003ae0:	61fb      	str	r3, [r7, #28]
20003ae2:	e7fe      	b.n	20003ae2 <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
20003ae4:	687b      	ldr	r3, [r7, #4]
20003ae6:	2b00      	cmp	r3, #0
20003ae8:	f000 8099 	beq.w	20003c1e <pvPortMalloc+0x1be>
20003aec:	f24d 6360 	movw	r3, #54880	; 0xd660
20003af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003af4:	681b      	ldr	r3, [r3, #0]
20003af6:	687a      	ldr	r2, [r7, #4]
20003af8:	429a      	cmp	r2, r3
20003afa:	f200 8090 	bhi.w	20003c1e <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003afe:	f24d 6354 	movw	r3, #54868	; 0xd654
20003b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b06:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
20003b08:	f24d 6354 	movw	r3, #54868	; 0xd654
20003b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b10:	681b      	ldr	r3, [r3, #0]
20003b12:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003b14:	e004      	b.n	20003b20 <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
20003b16:	68fb      	ldr	r3, [r7, #12]
20003b18:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
20003b1a:	68fb      	ldr	r3, [r7, #12]
20003b1c:	681b      	ldr	r3, [r3, #0]
20003b1e:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003b20:	68fb      	ldr	r3, [r7, #12]
20003b22:	685a      	ldr	r2, [r3, #4]
20003b24:	687b      	ldr	r3, [r7, #4]
20003b26:	429a      	cmp	r2, r3
20003b28:	d203      	bcs.n	20003b32 <pvPortMalloc+0xd2>
20003b2a:	68fb      	ldr	r3, [r7, #12]
20003b2c:	681b      	ldr	r3, [r3, #0]
20003b2e:	2b00      	cmp	r3, #0
20003b30:	d1f1      	bne.n	20003b16 <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
20003b32:	f24d 635c 	movw	r3, #54876	; 0xd65c
20003b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b3a:	681b      	ldr	r3, [r3, #0]
20003b3c:	68fa      	ldr	r2, [r7, #12]
20003b3e:	429a      	cmp	r2, r3
20003b40:	d06d      	beq.n	20003c1e <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20003b42:	693b      	ldr	r3, [r7, #16]
20003b44:	681a      	ldr	r2, [r3, #0]
20003b46:	f247 2390 	movw	r3, #29328	; 0x7290
20003b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b4e:	681b      	ldr	r3, [r3, #0]
20003b50:	4413      	add	r3, r2
20003b52:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20003b54:	68fb      	ldr	r3, [r7, #12]
20003b56:	681a      	ldr	r2, [r3, #0]
20003b58:	693b      	ldr	r3, [r7, #16]
20003b5a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003b5c:	68fb      	ldr	r3, [r7, #12]
20003b5e:	685a      	ldr	r2, [r3, #4]
20003b60:	687b      	ldr	r3, [r7, #4]
20003b62:	ebc3 0202 	rsb	r2, r3, r2
20003b66:	f247 2390 	movw	r3, #29328	; 0x7290
20003b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b6e:	681b      	ldr	r3, [r3, #0]
20003b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003b74:	429a      	cmp	r2, r3
20003b76:	d91f      	bls.n	20003bb8 <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003b78:	68fa      	ldr	r2, [r7, #12]
20003b7a:	687b      	ldr	r3, [r7, #4]
20003b7c:	4413      	add	r3, r2
20003b7e:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20003b80:	697b      	ldr	r3, [r7, #20]
20003b82:	f003 0307 	and.w	r3, r3, #7
20003b86:	2b00      	cmp	r3, #0
20003b88:	d009      	beq.n	20003b9e <pvPortMalloc+0x13e>
20003b8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003b8e:	f383 8811 	msr	BASEPRI, r3
20003b92:	f3bf 8f6f 	isb	sy
20003b96:	f3bf 8f4f 	dsb	sy
20003b9a:	623b      	str	r3, [r7, #32]
20003b9c:	e7fe      	b.n	20003b9c <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
20003b9e:	68fb      	ldr	r3, [r7, #12]
20003ba0:	685a      	ldr	r2, [r3, #4]
20003ba2:	687b      	ldr	r3, [r7, #4]
20003ba4:	ebc3 0202 	rsb	r2, r3, r2
20003ba8:	697b      	ldr	r3, [r7, #20]
20003baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
20003bac:	68fb      	ldr	r3, [r7, #12]
20003bae:	687a      	ldr	r2, [r7, #4]
20003bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
20003bb2:	6978      	ldr	r0, [r7, #20]
20003bb4:	f000 f93e 	bl	20003e34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20003bb8:	f24d 6360 	movw	r3, #54880	; 0xd660
20003bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bc0:	681a      	ldr	r2, [r3, #0]
20003bc2:	68fb      	ldr	r3, [r7, #12]
20003bc4:	685b      	ldr	r3, [r3, #4]
20003bc6:	ebc3 0202 	rsb	r2, r3, r2
20003bca:	f24d 6360 	movw	r3, #54880	; 0xd660
20003bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bd2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
20003bd4:	f24d 6360 	movw	r3, #54880	; 0xd660
20003bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bdc:	681a      	ldr	r2, [r3, #0]
20003bde:	f24d 6364 	movw	r3, #54884	; 0xd664
20003be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003be6:	681b      	ldr	r3, [r3, #0]
20003be8:	429a      	cmp	r2, r3
20003bea:	d209      	bcs.n	20003c00 <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
20003bec:	f24d 6360 	movw	r3, #54880	; 0xd660
20003bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bf4:	681a      	ldr	r2, [r3, #0]
20003bf6:	f24d 6364 	movw	r3, #54884	; 0xd664
20003bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bfe:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
20003c00:	68fb      	ldr	r3, [r7, #12]
20003c02:	685a      	ldr	r2, [r3, #4]
20003c04:	f24d 6368 	movw	r3, #54888	; 0xd668
20003c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c0c:	681b      	ldr	r3, [r3, #0]
20003c0e:	ea42 0203 	orr.w	r2, r2, r3
20003c12:	68fb      	ldr	r3, [r7, #12]
20003c14:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20003c16:	68fb      	ldr	r3, [r7, #12]
20003c18:	f04f 0200 	mov.w	r2, #0
20003c1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
20003c1e:	f7fe fac3 	bl	200021a8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
20003c22:	69bb      	ldr	r3, [r7, #24]
20003c24:	2b00      	cmp	r3, #0
20003c26:	d101      	bne.n	20003c2c <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
20003c28:	f7fc fbf8 	bl	2000041c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
20003c2c:	69bb      	ldr	r3, [r7, #24]
20003c2e:	f003 0307 	and.w	r3, r3, #7
20003c32:	2b00      	cmp	r3, #0
20003c34:	d009      	beq.n	20003c4a <pvPortMalloc+0x1ea>
20003c36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c3a:	f383 8811 	msr	BASEPRI, r3
20003c3e:	f3bf 8f6f 	isb	sy
20003c42:	f3bf 8f4f 	dsb	sy
20003c46:	627b      	str	r3, [r7, #36]	; 0x24
20003c48:	e7fe      	b.n	20003c48 <pvPortMalloc+0x1e8>
	return pvReturn;
20003c4a:	69bb      	ldr	r3, [r7, #24]
}
20003c4c:	4618      	mov	r0, r3
20003c4e:	f107 0728 	add.w	r7, r7, #40	; 0x28
20003c52:	46bd      	mov	sp, r7
20003c54:	bd80      	pop	{r7, pc}
20003c56:	bf00      	nop

20003c58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20003c58:	b580      	push	{r7, lr}
20003c5a:	b086      	sub	sp, #24
20003c5c:	af00      	add	r7, sp, #0
20003c5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20003c60:	687b      	ldr	r3, [r7, #4]
20003c62:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
20003c64:	687b      	ldr	r3, [r7, #4]
20003c66:	2b00      	cmp	r3, #0
20003c68:	d05e      	beq.n	20003d28 <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20003c6a:	f247 2390 	movw	r3, #29328	; 0x7290
20003c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c72:	681b      	ldr	r3, [r3, #0]
20003c74:	f1c3 0300 	rsb	r3, r3, #0
20003c78:	68ba      	ldr	r2, [r7, #8]
20003c7a:	4413      	add	r3, r2
20003c7c:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
20003c7e:	68bb      	ldr	r3, [r7, #8]
20003c80:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
20003c82:	68fb      	ldr	r3, [r7, #12]
20003c84:	685a      	ldr	r2, [r3, #4]
20003c86:	f24d 6368 	movw	r3, #54888	; 0xd668
20003c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c8e:	681b      	ldr	r3, [r3, #0]
20003c90:	ea02 0303 	and.w	r3, r2, r3
20003c94:	2b00      	cmp	r3, #0
20003c96:	d109      	bne.n	20003cac <vPortFree+0x54>
20003c98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c9c:	f383 8811 	msr	BASEPRI, r3
20003ca0:	f3bf 8f6f 	isb	sy
20003ca4:	f3bf 8f4f 	dsb	sy
20003ca8:	613b      	str	r3, [r7, #16]
20003caa:	e7fe      	b.n	20003caa <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
20003cac:	68fb      	ldr	r3, [r7, #12]
20003cae:	681b      	ldr	r3, [r3, #0]
20003cb0:	2b00      	cmp	r3, #0
20003cb2:	d009      	beq.n	20003cc8 <vPortFree+0x70>
20003cb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003cb8:	f383 8811 	msr	BASEPRI, r3
20003cbc:	f3bf 8f6f 	isb	sy
20003cc0:	f3bf 8f4f 	dsb	sy
20003cc4:	617b      	str	r3, [r7, #20]
20003cc6:	e7fe      	b.n	20003cc6 <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20003cc8:	68fb      	ldr	r3, [r7, #12]
20003cca:	685a      	ldr	r2, [r3, #4]
20003ccc:	f24d 6368 	movw	r3, #54888	; 0xd668
20003cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cd4:	681b      	ldr	r3, [r3, #0]
20003cd6:	ea02 0303 	and.w	r3, r2, r3
20003cda:	2b00      	cmp	r3, #0
20003cdc:	d024      	beq.n	20003d28 <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20003cde:	68fb      	ldr	r3, [r7, #12]
20003ce0:	681b      	ldr	r3, [r3, #0]
20003ce2:	2b00      	cmp	r3, #0
20003ce4:	d120      	bne.n	20003d28 <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20003ce6:	68fb      	ldr	r3, [r7, #12]
20003ce8:	685a      	ldr	r2, [r3, #4]
20003cea:	f24d 6368 	movw	r3, #54888	; 0xd668
20003cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cf2:	681b      	ldr	r3, [r3, #0]
20003cf4:	ea6f 0303 	mvn.w	r3, r3
20003cf8:	ea02 0203 	and.w	r2, r2, r3
20003cfc:	68fb      	ldr	r3, [r7, #12]
20003cfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20003d00:	f7fe fa40 	bl	20002184 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20003d04:	68fb      	ldr	r3, [r7, #12]
20003d06:	685a      	ldr	r2, [r3, #4]
20003d08:	f24d 6360 	movw	r3, #54880	; 0xd660
20003d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d10:	681b      	ldr	r3, [r3, #0]
20003d12:	441a      	add	r2, r3
20003d14:	f24d 6360 	movw	r3, #54880	; 0xd660
20003d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d1c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
20003d1e:	68f8      	ldr	r0, [r7, #12]
20003d20:	f000 f888 	bl	20003e34 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
20003d24:	f7fe fa40 	bl	200021a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20003d28:	f107 0718 	add.w	r7, r7, #24
20003d2c:	46bd      	mov	sp, r7
20003d2e:	bd80      	pop	{r7, pc}

20003d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20003d30:	b480      	push	{r7}
20003d32:	b085      	sub	sp, #20
20003d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20003d36:	f246 13a8 	movw	r3, #25000	; 0x61a8
20003d3a:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20003d3c:	f247 43ac 	movw	r3, #29868	; 0x74ac
20003d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d44:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20003d46:	68bb      	ldr	r3, [r7, #8]
20003d48:	f003 0307 	and.w	r3, r3, #7
20003d4c:	2b00      	cmp	r3, #0
20003d4e:	d011      	beq.n	20003d74 <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20003d50:	68bb      	ldr	r3, [r7, #8]
20003d52:	f103 0307 	add.w	r3, r3, #7
20003d56:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003d58:	68bb      	ldr	r3, [r7, #8]
20003d5a:	f023 0307 	bic.w	r3, r3, #7
20003d5e:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20003d60:	68fa      	ldr	r2, [r7, #12]
20003d62:	68bb      	ldr	r3, [r7, #8]
20003d64:	ebc3 0202 	rsb	r2, r3, r2
20003d68:	f247 43ac 	movw	r3, #29868	; 0x74ac
20003d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d70:	4413      	add	r3, r2
20003d72:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20003d74:	68bb      	ldr	r3, [r7, #8]
20003d76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
20003d78:	687a      	ldr	r2, [r7, #4]
20003d7a:	f24d 6354 	movw	r3, #54868	; 0xd654
20003d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d82:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
20003d84:	f24d 6354 	movw	r3, #54868	; 0xd654
20003d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d8c:	f04f 0200 	mov.w	r2, #0
20003d90:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
20003d92:	687a      	ldr	r2, [r7, #4]
20003d94:	68fb      	ldr	r3, [r7, #12]
20003d96:	4413      	add	r3, r2
20003d98:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
20003d9a:	f247 2390 	movw	r3, #29328	; 0x7290
20003d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003da2:	681b      	ldr	r3, [r3, #0]
20003da4:	68ba      	ldr	r2, [r7, #8]
20003da6:	ebc3 0302 	rsb	r3, r3, r2
20003daa:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003dac:	68bb      	ldr	r3, [r7, #8]
20003dae:	f023 0307 	bic.w	r3, r3, #7
20003db2:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
20003db4:	68ba      	ldr	r2, [r7, #8]
20003db6:	f24d 635c 	movw	r3, #54876	; 0xd65c
20003dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003dbe:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
20003dc0:	f24d 635c 	movw	r3, #54876	; 0xd65c
20003dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003dc8:	681b      	ldr	r3, [r3, #0]
20003dca:	f04f 0200 	mov.w	r2, #0
20003dce:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
20003dd0:	f24d 635c 	movw	r3, #54876	; 0xd65c
20003dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003dd8:	681b      	ldr	r3, [r3, #0]
20003dda:	f04f 0200 	mov.w	r2, #0
20003dde:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20003de0:	687b      	ldr	r3, [r7, #4]
20003de2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
20003de4:	683b      	ldr	r3, [r7, #0]
20003de6:	68ba      	ldr	r2, [r7, #8]
20003de8:	ebc3 0202 	rsb	r2, r3, r2
20003dec:	683b      	ldr	r3, [r7, #0]
20003dee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20003df0:	f24d 635c 	movw	r3, #54876	; 0xd65c
20003df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003df8:	681a      	ldr	r2, [r3, #0]
20003dfa:	683b      	ldr	r3, [r7, #0]
20003dfc:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003dfe:	683b      	ldr	r3, [r7, #0]
20003e00:	685a      	ldr	r2, [r3, #4]
20003e02:	f24d 6364 	movw	r3, #54884	; 0xd664
20003e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e0a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003e0c:	683b      	ldr	r3, [r7, #0]
20003e0e:	685a      	ldr	r2, [r3, #4]
20003e10:	f24d 6360 	movw	r3, #54880	; 0xd660
20003e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e18:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
20003e1a:	f24d 6368 	movw	r3, #54888	; 0xd668
20003e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20003e26:	601a      	str	r2, [r3, #0]
}
20003e28:	f107 0714 	add.w	r7, r7, #20
20003e2c:	46bd      	mov	sp, r7
20003e2e:	bc80      	pop	{r7}
20003e30:	4770      	bx	lr
20003e32:	bf00      	nop

20003e34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20003e34:	b480      	push	{r7}
20003e36:	b085      	sub	sp, #20
20003e38:	af00      	add	r7, sp, #0
20003e3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
20003e3c:	f24d 6354 	movw	r3, #54868	; 0xd654
20003e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e44:	60bb      	str	r3, [r7, #8]
20003e46:	e002      	b.n	20003e4e <prvInsertBlockIntoFreeList+0x1a>
20003e48:	68bb      	ldr	r3, [r7, #8]
20003e4a:	681b      	ldr	r3, [r3, #0]
20003e4c:	60bb      	str	r3, [r7, #8]
20003e4e:	68bb      	ldr	r3, [r7, #8]
20003e50:	681a      	ldr	r2, [r3, #0]
20003e52:	687b      	ldr	r3, [r7, #4]
20003e54:	429a      	cmp	r2, r3
20003e56:	d3f7      	bcc.n	20003e48 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20003e58:	68bb      	ldr	r3, [r7, #8]
20003e5a:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
20003e5c:	68bb      	ldr	r3, [r7, #8]
20003e5e:	685a      	ldr	r2, [r3, #4]
20003e60:	68fb      	ldr	r3, [r7, #12]
20003e62:	441a      	add	r2, r3
20003e64:	687b      	ldr	r3, [r7, #4]
20003e66:	429a      	cmp	r2, r3
20003e68:	d108      	bne.n	20003e7c <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
20003e6a:	68bb      	ldr	r3, [r7, #8]
20003e6c:	685a      	ldr	r2, [r3, #4]
20003e6e:	687b      	ldr	r3, [r7, #4]
20003e70:	685b      	ldr	r3, [r3, #4]
20003e72:	441a      	add	r2, r3
20003e74:	68bb      	ldr	r3, [r7, #8]
20003e76:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20003e78:	68bb      	ldr	r3, [r7, #8]
20003e7a:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
20003e7c:	687b      	ldr	r3, [r7, #4]
20003e7e:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
20003e80:	687b      	ldr	r3, [r7, #4]
20003e82:	685a      	ldr	r2, [r3, #4]
20003e84:	68fb      	ldr	r3, [r7, #12]
20003e86:	441a      	add	r2, r3
20003e88:	68bb      	ldr	r3, [r7, #8]
20003e8a:	681b      	ldr	r3, [r3, #0]
20003e8c:	429a      	cmp	r2, r3
20003e8e:	d11e      	bne.n	20003ece <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
20003e90:	68bb      	ldr	r3, [r7, #8]
20003e92:	681a      	ldr	r2, [r3, #0]
20003e94:	f24d 635c 	movw	r3, #54876	; 0xd65c
20003e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e9c:	681b      	ldr	r3, [r3, #0]
20003e9e:	429a      	cmp	r2, r3
20003ea0:	d00d      	beq.n	20003ebe <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
20003ea2:	687b      	ldr	r3, [r7, #4]
20003ea4:	685a      	ldr	r2, [r3, #4]
20003ea6:	68bb      	ldr	r3, [r7, #8]
20003ea8:	681b      	ldr	r3, [r3, #0]
20003eaa:	685b      	ldr	r3, [r3, #4]
20003eac:	441a      	add	r2, r3
20003eae:	687b      	ldr	r3, [r7, #4]
20003eb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
20003eb2:	68bb      	ldr	r3, [r7, #8]
20003eb4:	681b      	ldr	r3, [r3, #0]
20003eb6:	681a      	ldr	r2, [r3, #0]
20003eb8:	687b      	ldr	r3, [r7, #4]
20003eba:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
20003ebc:	e00b      	b.n	20003ed6 <prvInsertBlockIntoFreeList+0xa2>
20003ebe:	f24d 635c 	movw	r3, #54876	; 0xd65c
20003ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ec6:	681a      	ldr	r2, [r3, #0]
20003ec8:	687b      	ldr	r3, [r7, #4]
20003eca:	601a      	str	r2, [r3, #0]
20003ecc:	e003      	b.n	20003ed6 <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
20003ece:	68bb      	ldr	r3, [r7, #8]
20003ed0:	681a      	ldr	r2, [r3, #0]
20003ed2:	687b      	ldr	r3, [r7, #4]
20003ed4:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
20003ed6:	68ba      	ldr	r2, [r7, #8]
20003ed8:	687b      	ldr	r3, [r7, #4]
20003eda:	429a      	cmp	r2, r3
20003edc:	d002      	beq.n	20003ee4 <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
20003ede:	68bb      	ldr	r3, [r7, #8]
20003ee0:	687a      	ldr	r2, [r7, #4]
20003ee2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20003ee4:	f107 0714 	add.w	r7, r7, #20
20003ee8:	46bd      	mov	sp, r7
20003eea:	bc80      	pop	{r7}
20003eec:	4770      	bx	lr
20003eee:	bf00      	nop

20003ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20003ef0:	b480      	push	{r7}
20003ef2:	b085      	sub	sp, #20
20003ef4:	af00      	add	r7, sp, #0
20003ef6:	60f8      	str	r0, [r7, #12]
20003ef8:	60b9      	str	r1, [r7, #8]
20003efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
20003efc:	68fb      	ldr	r3, [r7, #12]
20003efe:	f1a3 0304 	sub.w	r3, r3, #4
20003f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20003f04:	68fb      	ldr	r3, [r7, #12]
20003f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20003f0a:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003f0c:	68fb      	ldr	r3, [r7, #12]
20003f0e:	f1a3 0304 	sub.w	r3, r3, #4
20003f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20003f14:	68bb      	ldr	r3, [r7, #8]
20003f16:	f023 0201 	bic.w	r2, r3, #1
20003f1a:	68fb      	ldr	r3, [r7, #12]
20003f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003f1e:	68fb      	ldr	r3, [r7, #12]
20003f20:	f1a3 0304 	sub.w	r3, r3, #4
20003f24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
20003f26:	f643 7359 	movw	r3, #16217	; 0x3f59
20003f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f2e:	68fa      	ldr	r2, [r7, #12]
20003f30:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
20003f32:	68fb      	ldr	r3, [r7, #12]
20003f34:	f1a3 0314 	sub.w	r3, r3, #20
20003f38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
20003f3a:	687a      	ldr	r2, [r7, #4]
20003f3c:	68fb      	ldr	r3, [r7, #12]
20003f3e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20003f40:	68fb      	ldr	r3, [r7, #12]
20003f42:	f1a3 0320 	sub.w	r3, r3, #32
20003f46:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
20003f48:	68fb      	ldr	r3, [r7, #12]
}
20003f4a:	4618      	mov	r0, r3
20003f4c:	f107 0714 	add.w	r7, r7, #20
20003f50:	46bd      	mov	sp, r7
20003f52:	bc80      	pop	{r7}
20003f54:	4770      	bx	lr
20003f56:	bf00      	nop

20003f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20003f58:	b480      	push	{r7}
20003f5a:	b083      	sub	sp, #12
20003f5c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
20003f5e:	f247 23fc 	movw	r3, #29436	; 0x72fc
20003f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f66:	681b      	ldr	r3, [r3, #0]
20003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
20003f6c:	d009      	beq.n	20003f82 <prvTaskExitError+0x2a>
20003f6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f72:	f383 8811 	msr	BASEPRI, r3
20003f76:	f3bf 8f6f 	isb	sy
20003f7a:	f3bf 8f4f 	dsb	sy
20003f7e:	603b      	str	r3, [r7, #0]
20003f80:	e7fe      	b.n	20003f80 <prvTaskExitError+0x28>
20003f82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f86:	f383 8811 	msr	BASEPRI, r3
20003f8a:	f3bf 8f6f 	isb	sy
20003f8e:	f3bf 8f4f 	dsb	sy
20003f92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
20003f94:	e7fe      	b.n	20003f94 <prvTaskExitError+0x3c>
20003f96:	bf00      	nop
	...

20003fa0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20003fa0:	4b07      	ldr	r3, [pc, #28]	; (20003fc0 <pxCurrentTCBConst2>)
20003fa2:	6819      	ldr	r1, [r3, #0]
20003fa4:	6808      	ldr	r0, [r1, #0]
20003fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20003faa:	f380 8809 	msr	PSP, r0
20003fae:	f3bf 8f6f 	isb	sy
20003fb2:	f04f 0000 	mov.w	r0, #0
20003fb6:	f380 8811 	msr	BASEPRI, r0
20003fba:	f04e 0e0d 	orr.w	lr, lr, #13
20003fbe:	4770      	bx	lr

20003fc0 <pxCurrentTCBConst2>:
20003fc0:	20007364 	.word	0x20007364
20003fc4:	f3af 8000 	nop.w
20003fc8:	f3af 8000 	nop.w
20003fcc:	f3af 8000 	nop.w

20003fd0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
20003fd0:	4806      	ldr	r0, [pc, #24]	; (20003fec <prvPortStartFirstTask+0x1c>)
20003fd2:	6800      	ldr	r0, [r0, #0]
20003fd4:	6800      	ldr	r0, [r0, #0]
20003fd6:	f380 8808 	msr	MSP, r0
20003fda:	b662      	cpsie	i
20003fdc:	b661      	cpsie	f
20003fde:	f3bf 8f4f 	dsb	sy
20003fe2:	f3bf 8f6f 	isb	sy
20003fe6:	df00      	svc	0
20003fe8:	bf00      	nop
20003fea:	0000      	.short	0x0000
20003fec:	e000ed08 	.word	0xe000ed08

20003ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20003ff0:	b580      	push	{r7, lr}
20003ff2:	b084      	sub	sp, #16
20003ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20003ff6:	f24e 4300 	movw	r3, #58368	; 0xe400
20003ffa:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003ffe:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
20004000:	68fb      	ldr	r3, [r7, #12]
20004002:	781b      	ldrb	r3, [r3, #0]
20004004:	b2db      	uxtb	r3, r3
20004006:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20004008:	68fb      	ldr	r3, [r7, #12]
2000400a:	f04f 32ff 	mov.w	r2, #4294967295
2000400e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20004010:	68fb      	ldr	r3, [r7, #12]
20004012:	781b      	ldrb	r3, [r3, #0]
20004014:	b2db      	uxtb	r3, r3
20004016:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20004018:	79fb      	ldrb	r3, [r7, #7]
2000401a:	b2db      	uxtb	r3, r3
2000401c:	461a      	mov	r2, r3
2000401e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
20004022:	f24d 636c 	movw	r3, #54892	; 0xd66c
20004026:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000402a:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
2000402c:	f24d 6370 	movw	r3, #54896	; 0xd670
20004030:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004034:	f04f 0207 	mov.w	r2, #7
20004038:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
2000403a:	e011      	b.n	20004060 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
2000403c:	f24d 6370 	movw	r3, #54896	; 0xd670
20004040:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004044:	681b      	ldr	r3, [r3, #0]
20004046:	f103 32ff 	add.w	r2, r3, #4294967295
2000404a:	f24d 6370 	movw	r3, #54896	; 0xd670
2000404e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004052:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20004054:	79fb      	ldrb	r3, [r7, #7]
20004056:	b2db      	uxtb	r3, r3
20004058:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000405c:	b2db      	uxtb	r3, r3
2000405e:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20004060:	79fb      	ldrb	r3, [r7, #7]
20004062:	b2db      	uxtb	r3, r3
20004064:	b25b      	sxtb	r3, r3
20004066:	2b00      	cmp	r3, #0
20004068:	dbe8      	blt.n	2000403c <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
2000406a:	f24d 6370 	movw	r3, #54896	; 0xd670
2000406e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004072:	681b      	ldr	r3, [r3, #0]
20004074:	ea4f 2203 	mov.w	r2, r3, lsl #8
20004078:	f24d 6370 	movw	r3, #54896	; 0xd670
2000407c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004080:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20004082:	f24d 6370 	movw	r3, #54896	; 0xd670
20004086:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000408a:	681b      	ldr	r3, [r3, #0]
2000408c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20004090:	f24d 6370 	movw	r3, #54896	; 0xd670
20004094:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004098:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
2000409a:	68bb      	ldr	r3, [r7, #8]
2000409c:	b2da      	uxtb	r2, r3
2000409e:	68fb      	ldr	r3, [r7, #12]
200040a0:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
200040a2:	f64e 5320 	movw	r3, #60704	; 0xed20
200040a6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200040aa:	f64e 5220 	movw	r2, #60704	; 0xed20
200040ae:	f2ce 0200 	movt	r2, #57344	; 0xe000
200040b2:	6812      	ldr	r2, [r2, #0]
200040b4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
200040b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
200040ba:	f64e 5320 	movw	r3, #60704	; 0xed20
200040be:	f2ce 0300 	movt	r3, #57344	; 0xe000
200040c2:	f64e 5220 	movw	r2, #60704	; 0xed20
200040c6:	f2ce 0200 	movt	r2, #57344	; 0xe000
200040ca:	6812      	ldr	r2, [r2, #0]
200040cc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
200040d0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
200040d2:	f000 f8c7 	bl	20004264 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
200040d6:	f247 23fc 	movw	r3, #29436	; 0x72fc
200040da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040de:	f04f 0200 	mov.w	r2, #0
200040e2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
200040e4:	f7ff ff74 	bl	20003fd0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
200040e8:	f7ff ff36 	bl	20003f58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
200040ec:	f04f 0300 	mov.w	r3, #0
}
200040f0:	4618      	mov	r0, r3
200040f2:	f107 0710 	add.w	r7, r7, #16
200040f6:	46bd      	mov	sp, r7
200040f8:	bd80      	pop	{r7, pc}
200040fa:	bf00      	nop

200040fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
200040fc:	b480      	push	{r7}
200040fe:	b083      	sub	sp, #12
20004100:	af00      	add	r7, sp, #0
20004102:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004106:	f383 8811 	msr	BASEPRI, r3
2000410a:	f3bf 8f6f 	isb	sy
2000410e:	f3bf 8f4f 	dsb	sy
20004112:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20004114:	f247 23fc 	movw	r3, #29436	; 0x72fc
20004118:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000411c:	681b      	ldr	r3, [r3, #0]
2000411e:	f103 0201 	add.w	r2, r3, #1
20004122:	f247 23fc 	movw	r3, #29436	; 0x72fc
20004126:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000412a:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
2000412c:	f247 23fc 	movw	r3, #29436	; 0x72fc
20004130:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004134:	681b      	ldr	r3, [r3, #0]
20004136:	2b01      	cmp	r3, #1
20004138:	d112      	bne.n	20004160 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
2000413a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000413e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004142:	681b      	ldr	r3, [r3, #0]
20004144:	f003 03ff 	and.w	r3, r3, #255	; 0xff
20004148:	2b00      	cmp	r3, #0
2000414a:	d009      	beq.n	20004160 <vPortEnterCritical+0x64>
2000414c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004150:	f383 8811 	msr	BASEPRI, r3
20004154:	f3bf 8f6f 	isb	sy
20004158:	f3bf 8f4f 	dsb	sy
2000415c:	607b      	str	r3, [r7, #4]
2000415e:	e7fe      	b.n	2000415e <vPortEnterCritical+0x62>
	}
}
20004160:	f107 070c 	add.w	r7, r7, #12
20004164:	46bd      	mov	sp, r7
20004166:	bc80      	pop	{r7}
20004168:	4770      	bx	lr
2000416a:	bf00      	nop

2000416c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
2000416c:	b480      	push	{r7}
2000416e:	b083      	sub	sp, #12
20004170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20004172:	f247 23fc 	movw	r3, #29436	; 0x72fc
20004176:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000417a:	681b      	ldr	r3, [r3, #0]
2000417c:	2b00      	cmp	r3, #0
2000417e:	d109      	bne.n	20004194 <vPortExitCritical+0x28>
20004180:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004184:	f383 8811 	msr	BASEPRI, r3
20004188:	f3bf 8f6f 	isb	sy
2000418c:	f3bf 8f4f 	dsb	sy
20004190:	603b      	str	r3, [r7, #0]
20004192:	e7fe      	b.n	20004192 <vPortExitCritical+0x26>
	uxCriticalNesting--;
20004194:	f247 23fc 	movw	r3, #29436	; 0x72fc
20004198:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000419c:	681b      	ldr	r3, [r3, #0]
2000419e:	f103 32ff 	add.w	r2, r3, #4294967295
200041a2:	f247 23fc 	movw	r3, #29436	; 0x72fc
200041a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041aa:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
200041ac:	f247 23fc 	movw	r3, #29436	; 0x72fc
200041b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041b4:	681b      	ldr	r3, [r3, #0]
200041b6:	2b00      	cmp	r3, #0
200041b8:	d105      	bne.n	200041c6 <vPortExitCritical+0x5a>
200041ba:	f04f 0300 	mov.w	r3, #0
200041be:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200041c0:	687b      	ldr	r3, [r7, #4]
200041c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
200041c6:	f107 070c 	add.w	r7, r7, #12
200041ca:	46bd      	mov	sp, r7
200041cc:	bc80      	pop	{r7}
200041ce:	4770      	bx	lr

200041d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
200041d0:	f3ef 8009 	mrs	r0, PSP
200041d4:	f3bf 8f6f 	isb	sy
200041d8:	4b0d      	ldr	r3, [pc, #52]	; (20004210 <pxCurrentTCBConst>)
200041da:	681a      	ldr	r2, [r3, #0]
200041dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
200041e0:	6010      	str	r0, [r2, #0]
200041e2:	e92d 4008 	stmdb	sp!, {r3, lr}
200041e6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
200041ea:	f380 8811 	msr	BASEPRI, r0
200041ee:	f7fe f9c3 	bl	20002578 <vTaskSwitchContext>
200041f2:	f04f 0000 	mov.w	r0, #0
200041f6:	f380 8811 	msr	BASEPRI, r0
200041fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
200041fe:	6819      	ldr	r1, [r3, #0]
20004200:	6808      	ldr	r0, [r1, #0]
20004202:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004206:	f380 8809 	msr	PSP, r0
2000420a:	f3bf 8f6f 	isb	sy
2000420e:	4770      	bx	lr

20004210 <pxCurrentTCBConst>:
20004210:	20007364 	.word	0x20007364
20004214:	f3af 8000 	nop.w
20004218:	f3af 8000 	nop.w
2000421c:	f3af 8000 	nop.w

20004220 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20004220:	b580      	push	{r7, lr}
20004222:	b082      	sub	sp, #8
20004224:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20004226:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000422a:	f383 8811 	msr	BASEPRI, r3
2000422e:	f3bf 8f6f 	isb	sy
20004232:	f3bf 8f4f 	dsb	sy
20004236:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20004238:	f7fe f896 	bl	20002368 <xTaskIncrementTick>
2000423c:	4603      	mov	r3, r0
2000423e:	2b00      	cmp	r3, #0
20004240:	d006      	beq.n	20004250 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20004242:	f64e 5304 	movw	r3, #60676	; 0xed04
20004246:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000424a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000424e:	601a      	str	r2, [r3, #0]
20004250:	f04f 0300 	mov.w	r3, #0
20004254:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20004256:	687b      	ldr	r3, [r7, #4]
20004258:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
2000425c:	f107 0708 	add.w	r7, r7, #8
20004260:	46bd      	mov	sp, r7
20004262:	bd80      	pop	{r7, pc}

20004264 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20004264:	b480      	push	{r7}
20004266:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20004268:	f24e 0314 	movw	r3, #57364	; 0xe014
2000426c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004270:	f247 323c 	movw	r2, #29500	; 0x733c
20004274:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004278:	6811      	ldr	r1, [r2, #0]
2000427a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
2000427e:	f2c1 0262 	movt	r2, #4194	; 0x1062
20004282:	fba2 0201 	umull	r0, r2, r2, r1
20004286:	ea4f 1292 	mov.w	r2, r2, lsr #6
2000428a:	f102 32ff 	add.w	r2, r2, #4294967295
2000428e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20004290:	f24e 0310 	movw	r3, #57360	; 0xe010
20004294:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004298:	f04f 0207 	mov.w	r2, #7
2000429c:	601a      	str	r2, [r3, #0]
}
2000429e:	46bd      	mov	sp, r7
200042a0:	bc80      	pop	{r7}
200042a2:	4770      	bx	lr

200042a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
200042a4:	b480      	push	{r7}
200042a6:	b085      	sub	sp, #20
200042a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
200042aa:	f3ef 8305 	mrs	r3, IPSR
200042ae:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
200042b0:	683b      	ldr	r3, [r7, #0]
200042b2:	2b0f      	cmp	r3, #15
200042b4:	d91a      	bls.n	200042ec <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
200042b6:	f247 2394 	movw	r3, #29332	; 0x7294
200042ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042be:	681a      	ldr	r2, [r3, #0]
200042c0:	683b      	ldr	r3, [r7, #0]
200042c2:	4413      	add	r3, r2
200042c4:	781b      	ldrb	r3, [r3, #0]
200042c6:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
200042c8:	f24d 636c 	movw	r3, #54892	; 0xd66c
200042cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042d0:	781b      	ldrb	r3, [r3, #0]
200042d2:	79fa      	ldrb	r2, [r7, #7]
200042d4:	429a      	cmp	r2, r3
200042d6:	d209      	bcs.n	200042ec <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200042d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200042dc:	f383 8811 	msr	BASEPRI, r3
200042e0:	f3bf 8f6f 	isb	sy
200042e4:	f3bf 8f4f 	dsb	sy
200042e8:	60bb      	str	r3, [r7, #8]
200042ea:	e7fe      	b.n	200042ea <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
200042ec:	f64e 530c 	movw	r3, #60684	; 0xed0c
200042f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200042f4:	681b      	ldr	r3, [r3, #0]
200042f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200042fa:	f24d 6370 	movw	r3, #54896	; 0xd670
200042fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004302:	681b      	ldr	r3, [r3, #0]
20004304:	429a      	cmp	r2, r3
20004306:	d909      	bls.n	2000431c <vPortValidateInterruptPriority+0x78>
20004308:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000430c:	f383 8811 	msr	BASEPRI, r3
20004310:	f3bf 8f6f 	isb	sy
20004314:	f3bf 8f4f 	dsb	sy
20004318:	60fb      	str	r3, [r7, #12]
2000431a:	e7fe      	b.n	2000431a <vPortValidateInterruptPriority+0x76>
	}
2000431c:	f107 0714 	add.w	r7, r7, #20
20004320:	46bd      	mov	sp, r7
20004322:	bc80      	pop	{r7}
20004324:	4770      	bx	lr
20004326:	bf00      	nop

20004328 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004328:	b480      	push	{r7}
2000432a:	b083      	sub	sp, #12
2000432c:	af00      	add	r7, sp, #0
2000432e:	4603      	mov	r3, r0
20004330:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20004332:	f24e 1300 	movw	r3, #57600	; 0xe100
20004336:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000433a:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000433e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004342:	79f9      	ldrb	r1, [r7, #7]
20004344:	f001 011f 	and.w	r1, r1, #31
20004348:	f04f 0001 	mov.w	r0, #1
2000434c:	fa00 f101 	lsl.w	r1, r0, r1
20004350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004354:	f107 070c 	add.w	r7, r7, #12
20004358:	46bd      	mov	sp, r7
2000435a:	bc80      	pop	{r7}
2000435c:	4770      	bx	lr
2000435e:	bf00      	nop

20004360 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20004360:	b480      	push	{r7}
20004362:	b083      	sub	sp, #12
20004364:	af00      	add	r7, sp, #0
20004366:	4603      	mov	r3, r0
20004368:	6039      	str	r1, [r7, #0]
2000436a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
2000436c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004370:	2b00      	cmp	r3, #0
20004372:	da10      	bge.n	20004396 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
20004374:	f64e 5300 	movw	r3, #60672	; 0xed00
20004378:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000437c:	79fa      	ldrb	r2, [r7, #7]
2000437e:	f002 020f 	and.w	r2, r2, #15
20004382:	f1a2 0104 	sub.w	r1, r2, #4
20004386:	683a      	ldr	r2, [r7, #0]
20004388:	b2d2      	uxtb	r2, r2
2000438a:	ea4f 1202 	mov.w	r2, r2, lsl #4
2000438e:	b2d2      	uxtb	r2, r2
20004390:	440b      	add	r3, r1
20004392:	761a      	strb	r2, [r3, #24]
20004394:	e00d      	b.n	200043b2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
20004396:	f24e 1300 	movw	r3, #57600	; 0xe100
2000439a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000439e:	f997 1007 	ldrsb.w	r1, [r7, #7]
200043a2:	683a      	ldr	r2, [r7, #0]
200043a4:	b2d2      	uxtb	r2, r2
200043a6:	ea4f 1202 	mov.w	r2, r2, lsl #4
200043aa:	b2d2      	uxtb	r2, r2
200043ac:	440b      	add	r3, r1
200043ae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
200043b2:	f107 070c 	add.w	r7, r7, #12
200043b6:	46bd      	mov	sp, r7
200043b8:	bc80      	pop	{r7}
200043ba:	4770      	bx	lr

200043bc <get_hk_data>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void get_hk_data(void* d){
200043bc:	b590      	push	{r4, r7, lr}
200043be:	b089      	sub	sp, #36	; 0x24
200043c0:	af00      	add	r7, sp, #0
200043c2:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(get_pld_pkt_handle);
200043c4:	f64d 539c 	movw	r3, #56732	; 0xdd9c
200043c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043cc:	681b      	ldr	r3, [r3, #0]
200043ce:	4618      	mov	r0, r3
200043d0:	f7fd fd82 	bl	20001ed8 <uxTaskPriorityGet>
200043d4:	4603      	mov	r3, r0
200043d6:	61bb      	str	r3, [r7, #24]

	if(feed_get_hk_data != pdFAIL){
200043d8:	f64d 53bc 	movw	r3, #56764	; 0xddbc
200043dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043e0:	681b      	ldr	r3, [r3, #0]
200043e2:	2b00      	cmp	r3, #0
200043e4:	f000 81cf 	beq.w	20004786 <get_hk_data+0x3ca>

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
200043e8:	f04f 0300 	mov.w	r3, #0
200043ec:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
200043ee:	f04f 0300 	mov.w	r3, #0
200043f2:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
200043f4:	f24d 7258 	movw	r2, #55128	; 0xd758
200043f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200043fc:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004400:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004404:	601a      	str	r2, [r3, #0]


		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
20004406:	f107 0116 	add.w	r1, r7, #22
2000440a:	f107 0214 	add.w	r2, r7, #20
2000440e:	f107 0312 	add.w	r3, r7, #18
20004412:	4608      	mov	r0, r1
20004414:	4611      	mov	r1, r2
20004416:	461a      	mov	r2, r3
20004418:	f7fc f824 	bl	20000464 <get_IMU_acc>
2000441c:	4603      	mov	r3, r0
2000441e:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
20004420:	f107 010e 	add.w	r1, r7, #14
20004424:	f107 020c 	add.w	r2, r7, #12
20004428:	f107 030a 	add.w	r3, r7, #10
2000442c:	4608      	mov	r0, r1
2000442e:	4611      	mov	r1, r2
20004430:	461a      	mov	r2, r3
20004432:	f7fc f9ad 	bl	20000790 <get_IMU_gyro>
20004436:	4603      	mov	r3, r0
20004438:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;
			hk_pkt->cmd_cnt = command_cnt;
2000443a:	f64d 53a4 	movw	r3, #56740	; 0xdda4
2000443e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004442:	681a      	ldr	r2, [r3, #0]
20004444:	f64d 5394 	movw	r3, #56724	; 0xdd94
20004448:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000444c:	881b      	ldrh	r3, [r3, #0]
2000444e:	b29b      	uxth	r3, r3
20004450:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004454:	f04f 0000 	mov.w	r0, #0
20004458:	ea40 0101 	orr.w	r1, r0, r1
2000445c:	7391      	strb	r1, [r2, #14]
2000445e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004462:	b29b      	uxth	r3, r3
20004464:	f04f 0100 	mov.w	r1, #0
20004468:	ea41 0303 	orr.w	r3, r1, r3
2000446c:	73d3      	strb	r3, [r2, #15]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
2000446e:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004472:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004476:	681b      	ldr	r3, [r3, #0]
20004478:	8afa      	ldrh	r2, [r7, #22]
2000447a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2000447e:	f04f 0000 	mov.w	r0, #0
20004482:	ea40 0101 	orr.w	r1, r0, r1
20004486:	7419      	strb	r1, [r3, #16]
20004488:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000448c:	b292      	uxth	r2, r2
2000448e:	f04f 0100 	mov.w	r1, #0
20004492:	ea41 0202 	orr.w	r2, r1, r2
20004496:	745a      	strb	r2, [r3, #17]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
20004498:	f64d 53a4 	movw	r3, #56740	; 0xdda4
2000449c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044a0:	681b      	ldr	r3, [r3, #0]
200044a2:	8aba      	ldrh	r2, [r7, #20]
200044a4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200044a8:	f04f 0000 	mov.w	r0, #0
200044ac:	ea40 0101 	orr.w	r1, r0, r1
200044b0:	7499      	strb	r1, [r3, #18]
200044b2:	ea4f 2212 	mov.w	r2, r2, lsr #8
200044b6:	b292      	uxth	r2, r2
200044b8:	f04f 0100 	mov.w	r1, #0
200044bc:	ea41 0202 	orr.w	r2, r1, r2
200044c0:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[2] = ((az));
200044c2:	f64d 53a4 	movw	r3, #56740	; 0xdda4
200044c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044ca:	681b      	ldr	r3, [r3, #0]
200044cc:	8a7a      	ldrh	r2, [r7, #18]
200044ce:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200044d2:	f04f 0000 	mov.w	r0, #0
200044d6:	ea40 0101 	orr.w	r1, r0, r1
200044da:	7519      	strb	r1, [r3, #20]
200044dc:	ea4f 2212 	mov.w	r2, r2, lsr #8
200044e0:	b292      	uxth	r2, r2
200044e2:	f04f 0100 	mov.w	r1, #0
200044e6:	ea41 0202 	orr.w	r2, r1, r2
200044ea:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
200044ec:	f64d 53a4 	movw	r3, #56740	; 0xdda4
200044f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044f4:	681b      	ldr	r3, [r3, #0]
200044f6:	89fa      	ldrh	r2, [r7, #14]
200044f8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200044fc:	f04f 0000 	mov.w	r0, #0
20004500:	ea40 0101 	orr.w	r1, r0, r1
20004504:	7599      	strb	r1, [r3, #22]
20004506:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000450a:	b292      	uxth	r2, r2
2000450c:	f04f 0100 	mov.w	r1, #0
20004510:	ea41 0202 	orr.w	r2, r1, r2
20004514:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
20004516:	f64d 53a4 	movw	r3, #56740	; 0xdda4
2000451a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000451e:	681b      	ldr	r3, [r3, #0]
20004520:	89ba      	ldrh	r2, [r7, #12]
20004522:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004526:	f04f 0000 	mov.w	r0, #0
2000452a:	ea40 0101 	orr.w	r1, r0, r1
2000452e:	7619      	strb	r1, [r3, #24]
20004530:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004534:	b292      	uxth	r2, r2
20004536:	f04f 0100 	mov.w	r1, #0
2000453a:	ea41 0202 	orr.w	r2, r1, r2
2000453e:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
20004540:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004544:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004548:	681b      	ldr	r3, [r3, #0]
2000454a:	897a      	ldrh	r2, [r7, #10]
2000454c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004550:	f04f 0000 	mov.w	r0, #0
20004554:	ea40 0101 	orr.w	r1, r0, r1
20004558:	7699      	strb	r1, [r3, #26]
2000455a:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000455e:	b292      	uxth	r2, r2
20004560:	f04f 0100 	mov.w	r1, #0
20004564:	ea41 0202 	orr.w	r2, r1, r2
20004568:	76da      	strb	r2, [r3, #27]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
2000456a:	f107 0308 	add.w	r3, r7, #8
2000456e:	4618      	mov	r0, r3
20004570:	f7fc fa80 	bl	20000a74 <get_IMU_temp>
20004574:	4603      	mov	r3, r0
20004576:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
20004578:	f64d 53a4 	movw	r3, #56740	; 0xdda4
2000457c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004580:	681b      	ldr	r3, [r3, #0]
20004582:	893a      	ldrh	r2, [r7, #8]
20004584:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004588:	f04f 0000 	mov.w	r0, #0
2000458c:	ea40 0101 	orr.w	r1, r0, r1
20004590:	7719      	strb	r1, [r3, #28]
20004592:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004596:	b292      	uxth	r2, r2
20004598:	f04f 0100 	mov.w	r1, #0
2000459c:	ea41 0202 	orr.w	r2, r1, r2
200045a0:	775a      	strb	r2, [r3, #29]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
200045a2:	f64d 53a4 	movw	r3, #56740	; 0xdda4
200045a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045aa:	681c      	ldr	r4, [r3, #0]
200045ac:	f107 0311 	add.w	r3, r7, #17
200045b0:	f04f 0040 	mov.w	r0, #64	; 0x40
200045b4:	f04f 0101 	mov.w	r1, #1
200045b8:	461a      	mov	r2, r3
200045ba:	f7fc fb8f 	bl	20000cdc <read_bus_voltage>
200045be:	4603      	mov	r3, r0
200045c0:	b29b      	uxth	r3, r3
200045c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200045c6:	f04f 0100 	mov.w	r1, #0
200045ca:	ea41 0202 	orr.w	r2, r1, r2
200045ce:	77e2      	strb	r2, [r4, #31]
200045d0:	ea4f 2313 	mov.w	r3, r3, lsr #8
200045d4:	b29b      	uxth	r3, r3
200045d6:	f04f 0200 	mov.w	r2, #0
200045da:	ea42 0303 	orr.w	r3, r2, r3
200045de:	f884 3020 	strb.w	r3, [r4, #32]
			loss_count+= flag;
200045e2:	7c7a      	ldrb	r2, [r7, #17]
200045e4:	7ffb      	ldrb	r3, [r7, #31]
200045e6:	4413      	add	r3, r2
200045e8:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
200045ea:	f64d 53a4 	movw	r3, #56740	; 0xdda4
200045ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045f2:	681c      	ldr	r4, [r3, #0]
200045f4:	f107 0311 	add.w	r3, r7, #17
200045f8:	f04f 0040 	mov.w	r0, #64	; 0x40
200045fc:	f04f 0102 	mov.w	r1, #2
20004600:	461a      	mov	r2, r3
20004602:	f7fc fb6b 	bl	20000cdc <read_bus_voltage>
20004606:	4603      	mov	r3, r0
20004608:	b29b      	uxth	r3, r3
2000460a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2000460e:	f04f 0100 	mov.w	r1, #0
20004612:	ea41 0202 	orr.w	r2, r1, r2
20004616:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
2000461a:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000461e:	b29b      	uxth	r3, r3
20004620:	f04f 0200 	mov.w	r2, #0
20004624:	ea42 0303 	orr.w	r3, r2, r3
20004628:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
2000462c:	7c7a      	ldrb	r2, [r7, #17]
2000462e:	7ffb      	ldrb	r3, [r7, #31]
20004630:	4413      	add	r3, r2
20004632:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
20004634:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004638:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000463c:	681c      	ldr	r4, [r3, #0]
2000463e:	f107 0311 	add.w	r3, r7, #17
20004642:	f04f 0040 	mov.w	r0, #64	; 0x40
20004646:	f04f 0103 	mov.w	r1, #3
2000464a:	461a      	mov	r2, r3
2000464c:	f7fc fb46 	bl	20000cdc <read_bus_voltage>
20004650:	4603      	mov	r3, r0
20004652:	b29b      	uxth	r3, r3
20004654:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004658:	f04f 0100 	mov.w	r1, #0
2000465c:	ea41 0202 	orr.w	r2, r1, r2
20004660:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
20004664:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004668:	b29b      	uxth	r3, r3
2000466a:	f04f 0200 	mov.w	r2, #0
2000466e:	ea42 0303 	orr.w	r3, r2, r3
20004672:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
20004676:	7c7a      	ldrb	r2, [r7, #17]
20004678:	7ffb      	ldrb	r3, [r7, #31]
2000467a:	4413      	add	r3, r2
2000467c:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
2000467e:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004682:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004686:	681c      	ldr	r4, [r3, #0]
20004688:	f107 0311 	add.w	r3, r7, #17
2000468c:	f04f 0040 	mov.w	r0, #64	; 0x40
20004690:	f04f 0101 	mov.w	r1, #1
20004694:	461a      	mov	r2, r3
20004696:	f7fc fb7f 	bl	20000d98 <read_shunt_voltage>
2000469a:	4603      	mov	r3, r0
2000469c:	b29b      	uxth	r3, r3
2000469e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200046a2:	f04f 0100 	mov.w	r1, #0
200046a6:	ea41 0202 	orr.w	r2, r1, r2
200046aa:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
200046ae:	ea4f 2313 	mov.w	r3, r3, lsr #8
200046b2:	b29b      	uxth	r3, r3
200046b4:	f04f 0200 	mov.w	r2, #0
200046b8:	ea42 0303 	orr.w	r3, r2, r3
200046bc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
200046c0:	7c7a      	ldrb	r2, [r7, #17]
200046c2:	7ffb      	ldrb	r3, [r7, #31]
200046c4:	4413      	add	r3, r2
200046c6:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
200046c8:	f64d 53a4 	movw	r3, #56740	; 0xdda4
200046cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046d0:	681c      	ldr	r4, [r3, #0]
200046d2:	f107 0311 	add.w	r3, r7, #17
200046d6:	f04f 0040 	mov.w	r0, #64	; 0x40
200046da:	f04f 0102 	mov.w	r1, #2
200046de:	461a      	mov	r2, r3
200046e0:	f7fc fb5a 	bl	20000d98 <read_shunt_voltage>
200046e4:	4603      	mov	r3, r0
200046e6:	b29b      	uxth	r3, r3
200046e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200046ec:	f04f 0100 	mov.w	r1, #0
200046f0:	ea41 0202 	orr.w	r2, r1, r2
200046f4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
200046f8:	ea4f 2313 	mov.w	r3, r3, lsr #8
200046fc:	b29b      	uxth	r3, r3
200046fe:	f04f 0200 	mov.w	r2, #0
20004702:	ea42 0303 	orr.w	r3, r2, r3
20004706:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
2000470a:	7c7a      	ldrb	r2, [r7, #17]
2000470c:	7ffb      	ldrb	r3, [r7, #31]
2000470e:	4413      	add	r3, r2
20004710:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
20004712:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004716:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000471a:	681c      	ldr	r4, [r3, #0]
2000471c:	f107 0311 	add.w	r3, r7, #17
20004720:	f04f 0040 	mov.w	r0, #64	; 0x40
20004724:	f04f 0103 	mov.w	r1, #3
20004728:	461a      	mov	r2, r3
2000472a:	f7fc fb35 	bl	20000d98 <read_shunt_voltage>
2000472e:	4603      	mov	r3, r0
20004730:	b29b      	uxth	r3, r3
20004732:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004736:	f04f 0100 	mov.w	r1, #0
2000473a:	ea41 0202 	orr.w	r2, r1, r2
2000473e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
20004742:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004746:	b29b      	uxth	r3, r3
20004748:	f04f 0200 	mov.w	r2, #0
2000474c:	ea42 0303 	orr.w	r3, r2, r3
20004750:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
20004754:	7c7a      	ldrb	r2, [r7, #17]
20004756:	7ffb      	ldrb	r3, [r7, #31]
20004758:	4413      	add	r3, r2
2000475a:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
2000475c:	f24d 7358 	movw	r3, #55128	; 0xd758
20004760:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004764:	f04f 0201 	mov.w	r2, #1
20004768:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(get_pld_pkt_handle, uxPriority + 1);
2000476c:	f64d 539c 	movw	r3, #56732	; 0xdd9c
20004770:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004774:	681a      	ldr	r2, [r3, #0]
20004776:	69bb      	ldr	r3, [r7, #24]
20004778:	f103 0301 	add.w	r3, r3, #1
2000477c:	4610      	mov	r0, r2
2000477e:	4619      	mov	r1, r3
20004780:	f7fd fbc6 	bl	20001f10 <vTaskPrioritySet>

		}
20004784:	e63f      	b.n	20004406 <get_hk_data+0x4a>

	}
}
20004786:	f107 0724 	add.w	r7, r7, #36	; 0x24
2000478a:	46bd      	mov	sp, r7
2000478c:	bd90      	pop	{r4, r7, pc}
2000478e:	bf00      	nop

20004790 <get_pld_data>:

void get_pld_data(void* d1){
20004790:	b5b0      	push	{r4, r5, r7, lr}
20004792:	b084      	sub	sp, #16
20004794:	af00      	add	r7, sp, #0
20004796:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(NULL);
20004798:	f04f 0000 	mov.w	r0, #0
2000479c:	f7fd fb9c 	bl	20001ed8 <uxTaskPriorityGet>
200047a0:	4603      	mov	r3, r0
200047a2:	60bb      	str	r3, [r7, #8]

	if(feed_get_payload_data != pdFAIL){
200047a4:	f64d 53cc 	movw	r3, #56780	; 0xddcc
200047a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047ac:	681b      	ldr	r3, [r3, #0]
200047ae:	2b00      	cmp	r3, #0
200047b0:	d04f      	beq.n	20004852 <get_pld_data+0xc2>

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
200047b2:	f24d 6278 	movw	r2, #54904	; 0xd678
200047b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
200047ba:	f64d 53d0 	movw	r3, #56784	; 0xddd0
200047be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047c2:	601a      	str	r2, [r3, #0]
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
200047c4:	f04f 0300 	mov.w	r3, #0
200047c8:	73fb      	strb	r3, [r7, #15]
200047ca:	e02e      	b.n	2000482a <get_pld_data+0x9a>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
200047cc:	f64d 53d0 	movw	r3, #56784	; 0xddd0
200047d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047d4:	681c      	ldr	r4, [r3, #0]
200047d6:	7bfd      	ldrb	r5, [r7, #15]
200047d8:	7bbb      	ldrb	r3, [r7, #14]
200047da:	7bfa      	ldrb	r2, [r7, #15]
200047dc:	f64d 5020 	movw	r0, #56608	; 0xdd20
200047e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200047e4:	f04f 0121 	mov.w	r1, #33	; 0x21
200047e8:	f7fc fb36 	bl	20000e58 <get_ADC_value>
200047ec:	4603      	mov	r3, r0
200047ee:	4619      	mov	r1, r3
200047f0:	f105 0204 	add.w	r2, r5, #4
200047f4:	f001 00ff 	and.w	r0, r1, #255	; 0xff
200047f8:	ea4f 0342 	mov.w	r3, r2, lsl #1
200047fc:	4423      	add	r3, r4
200047fe:	f04f 0c00 	mov.w	ip, #0
20004802:	ea4c 0000 	orr.w	r0, ip, r0
20004806:	7198      	strb	r0, [r3, #6]
20004808:	ea4f 2311 	mov.w	r3, r1, lsr #8
2000480c:	b298      	uxth	r0, r3
2000480e:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004812:	4423      	add	r3, r4
20004814:	f04f 0200 	mov.w	r2, #0
20004818:	4611      	mov	r1, r2
2000481a:	4602      	mov	r2, r0
2000481c:	ea41 0202 	orr.w	r2, r1, r2
20004820:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004822:	7bfb      	ldrb	r3, [r7, #15]
20004824:	f103 0301 	add.w	r3, r3, #1
20004828:	73fb      	strb	r3, [r7, #15]
2000482a:	7bfb      	ldrb	r3, [r7, #15]
2000482c:	2b06      	cmp	r3, #6
2000482e:	d9cd      	bls.n	200047cc <get_pld_data+0x3c>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
20004830:	f24d 6378 	movw	r3, #54904	; 0xd678
20004834:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004838:	f04f 0202 	mov.w	r2, #2
2000483c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(NULL, uxPriority - 2);
20004840:	68bb      	ldr	r3, [r7, #8]
20004842:	f1a3 0302 	sub.w	r3, r3, #2
20004846:	f04f 0000 	mov.w	r0, #0
2000484a:	4619      	mov	r1, r3
2000484c:	f7fd fb60 	bl	20001f10 <vTaskPrioritySet>

		}
20004850:	e7b8      	b.n	200047c4 <get_pld_data+0x34>

	}
}
20004852:	f107 0710 	add.w	r7, r7, #16
20004856:	46bd      	mov	sp, r7
20004858:	bdb0      	pop	{r4, r5, r7, pc}
2000485a:	bf00      	nop

2000485c <vtlm_task>:


void vtlm_task(void* d){
2000485c:	b480      	push	{r7}
2000485e:	b085      	sub	sp, #20
20004860:	af00      	add	r7, sp, #0
20004862:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;
20004864:	f04f 0300 	mov.w	r3, #0
20004868:	81fb      	strh	r3, [r7, #14]

//	xQueueReceive(Data_Queue, data, 10);

//	if(feed_tlm_task != pdFAIL){
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		if(data[511] == HK_API_ID){
2000486a:	f24d 7358 	movw	r3, #55128	; 0xd758
2000486e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004872:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
20004876:	2b01      	cmp	r3, #1
20004878:	d17b      	bne.n	20004972 <vtlm_task+0x116>
//			while(1){
				hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
2000487a:	f64d 53a4 	movw	r3, #56740	; 0xdda4
2000487e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004882:	681b      	ldr	r3, [r3, #0]
20004884:	f04f 0200 	mov.w	r2, #0
20004888:	f042 0208 	orr.w	r2, r2, #8
2000488c:	701a      	strb	r2, [r3, #0]
2000488e:	f04f 0200 	mov.w	r2, #0
20004892:	f042 0201 	orr.w	r2, r2, #1
20004896:	705a      	strb	r2, [r3, #1]
				hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004898:	f64d 53a4 	movw	r3, #56740	; 0xdda4
2000489c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048a0:	681a      	ldr	r2, [r3, #0]
200048a2:	89fb      	ldrh	r3, [r7, #14]
200048a4:	f103 0301 	add.w	r3, r3, #1
200048a8:	81fb      	strh	r3, [r7, #14]
200048aa:	89fb      	ldrh	r3, [r7, #14]
200048ac:	ea6f 4383 	mvn.w	r3, r3, lsl #18
200048b0:	ea6f 4393 	mvn.w	r3, r3, lsr #18
200048b4:	b29b      	uxth	r3, r3
200048b6:	b29b      	uxth	r3, r3
200048b8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200048bc:	b299      	uxth	r1, r3
200048be:	89fb      	ldrh	r3, [r7, #14]
200048c0:	f103 0301 	add.w	r3, r3, #1
200048c4:	81fb      	strh	r3, [r7, #14]
200048c6:	89fb      	ldrh	r3, [r7, #14]
200048c8:	ea6f 4383 	mvn.w	r3, r3, lsl #18
200048cc:	ea6f 4393 	mvn.w	r3, r3, lsr #18
200048d0:	b29b      	uxth	r3, r3
200048d2:	b29b      	uxth	r3, r3
200048d4:	ea4f 2313 	mov.w	r3, r3, lsr #8
200048d8:	b29b      	uxth	r3, r3
200048da:	ea41 0303 	orr.w	r3, r1, r3
200048de:	b29b      	uxth	r3, r3
200048e0:	b29b      	uxth	r3, r3
200048e2:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200048e6:	f04f 0000 	mov.w	r0, #0
200048ea:	ea40 0101 	orr.w	r1, r0, r1
200048ee:	7091      	strb	r1, [r2, #2]
200048f0:	ea4f 2313 	mov.w	r3, r3, lsr #8
200048f4:	b29b      	uxth	r3, r3
200048f6:	f04f 0100 	mov.w	r1, #0
200048fa:	ea41 0303 	orr.w	r3, r1, r3
200048fe:	70d3      	strb	r3, [r2, #3]
				hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
20004900:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004904:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004908:	681b      	ldr	r3, [r3, #0]
2000490a:	f04f 0200 	mov.w	r2, #0
2000490e:	711a      	strb	r2, [r3, #4]
20004910:	f04f 0200 	mov.w	r2, #0
20004914:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
20004918:	715a      	strb	r2, [r3, #5]
				hk_pkt->ccsds_s1 = 0;
2000491a:	f64d 53a4 	movw	r3, #56740	; 0xdda4
2000491e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004922:	681b      	ldr	r3, [r3, #0]
20004924:	f04f 0200 	mov.w	r2, #0
20004928:	719a      	strb	r2, [r3, #6]
2000492a:	f04f 0200 	mov.w	r2, #0
2000492e:	71da      	strb	r2, [r3, #7]
20004930:	f04f 0200 	mov.w	r2, #0
20004934:	721a      	strb	r2, [r3, #8]
20004936:	f04f 0200 	mov.w	r2, #0
2000493a:	725a      	strb	r2, [r3, #9]
				hk_pkt->ccsds_s2 = 0;
2000493c:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004940:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004944:	681b      	ldr	r3, [r3, #0]
20004946:	f04f 0200 	mov.w	r2, #0
2000494a:	729a      	strb	r2, [r3, #10]
2000494c:	f04f 0200 	mov.w	r2, #0
20004950:	72da      	strb	r2, [r3, #11]
20004952:	f04f 0200 	mov.w	r2, #0
20004956:	731a      	strb	r2, [r3, #12]
20004958:	f04f 0200 	mov.w	r2, #0
2000495c:	735a      	strb	r2, [r3, #13]
				Data_HK_Queue = hk_pkt;
2000495e:	f64d 53a4 	movw	r3, #56740	; 0xdda4
20004962:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004966:	681a      	ldr	r2, [r3, #0]
20004968:	f64d 53b8 	movw	r3, #56760	; 0xddb8
2000496c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004970:	601a      	str	r2, [r3, #0]

//			}
		}


		if(data_pld[49] == PLD_API_ID){
20004972:	f24d 6378 	movw	r3, #54904	; 0xd678
20004976:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000497a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
2000497e:	2b02      	cmp	r3, #2
20004980:	d17b      	bne.n	20004a7a <vtlm_task+0x21e>
//			while(1){

				pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
20004982:	f64d 53d0 	movw	r3, #56784	; 0xddd0
20004986:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000498a:	681b      	ldr	r3, [r3, #0]
2000498c:	f04f 0200 	mov.w	r2, #0
20004990:	f042 0208 	orr.w	r2, r2, #8
20004994:	701a      	strb	r2, [r3, #0]
20004996:	f04f 0200 	mov.w	r2, #0
2000499a:	f042 0202 	orr.w	r2, r2, #2
2000499e:	705a      	strb	r2, [r3, #1]
				pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
200049a0:	f64d 53d0 	movw	r3, #56784	; 0xddd0
200049a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049a8:	681a      	ldr	r2, [r3, #0]
200049aa:	89fb      	ldrh	r3, [r7, #14]
200049ac:	f103 0301 	add.w	r3, r3, #1
200049b0:	81fb      	strh	r3, [r7, #14]
200049b2:	89fb      	ldrh	r3, [r7, #14]
200049b4:	ea6f 4383 	mvn.w	r3, r3, lsl #18
200049b8:	ea6f 4393 	mvn.w	r3, r3, lsr #18
200049bc:	b29b      	uxth	r3, r3
200049be:	b29b      	uxth	r3, r3
200049c0:	ea4f 2303 	mov.w	r3, r3, lsl #8
200049c4:	b299      	uxth	r1, r3
200049c6:	89fb      	ldrh	r3, [r7, #14]
200049c8:	f103 0301 	add.w	r3, r3, #1
200049cc:	81fb      	strh	r3, [r7, #14]
200049ce:	89fb      	ldrh	r3, [r7, #14]
200049d0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
200049d4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
200049d8:	b29b      	uxth	r3, r3
200049da:	b29b      	uxth	r3, r3
200049dc:	ea4f 2313 	mov.w	r3, r3, lsr #8
200049e0:	b29b      	uxth	r3, r3
200049e2:	ea41 0303 	orr.w	r3, r1, r3
200049e6:	b29b      	uxth	r3, r3
200049e8:	b29b      	uxth	r3, r3
200049ea:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200049ee:	f04f 0000 	mov.w	r0, #0
200049f2:	ea40 0101 	orr.w	r1, r0, r1
200049f6:	7091      	strb	r1, [r2, #2]
200049f8:	ea4f 2313 	mov.w	r3, r3, lsr #8
200049fc:	b29b      	uxth	r3, r3
200049fe:	f04f 0100 	mov.w	r1, #0
20004a02:	ea41 0303 	orr.w	r3, r1, r3
20004a06:	70d3      	strb	r3, [r2, #3]
				pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
20004a08:	f64d 53d0 	movw	r3, #56784	; 0xddd0
20004a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a10:	681b      	ldr	r3, [r3, #0]
20004a12:	f04f 0200 	mov.w	r2, #0
20004a16:	711a      	strb	r2, [r3, #4]
20004a18:	f04f 0200 	mov.w	r2, #0
20004a1c:	f042 021e 	orr.w	r2, r2, #30
20004a20:	715a      	strb	r2, [r3, #5]

				pld_pkt->ccsds_s1 = 0;
20004a22:	f64d 53d0 	movw	r3, #56784	; 0xddd0
20004a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a2a:	681b      	ldr	r3, [r3, #0]
20004a2c:	f04f 0200 	mov.w	r2, #0
20004a30:	719a      	strb	r2, [r3, #6]
20004a32:	f04f 0200 	mov.w	r2, #0
20004a36:	71da      	strb	r2, [r3, #7]
20004a38:	f04f 0200 	mov.w	r2, #0
20004a3c:	721a      	strb	r2, [r3, #8]
20004a3e:	f04f 0200 	mov.w	r2, #0
20004a42:	725a      	strb	r2, [r3, #9]
				pld_pkt->ccsds_s2 = 0;
20004a44:	f64d 53d0 	movw	r3, #56784	; 0xddd0
20004a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a4c:	681b      	ldr	r3, [r3, #0]
20004a4e:	f04f 0200 	mov.w	r2, #0
20004a52:	729a      	strb	r2, [r3, #10]
20004a54:	f04f 0200 	mov.w	r2, #0
20004a58:	72da      	strb	r2, [r3, #11]
20004a5a:	f04f 0200 	mov.w	r2, #0
20004a5e:	731a      	strb	r2, [r3, #12]
20004a60:	f04f 0200 	mov.w	r2, #0
20004a64:	735a      	strb	r2, [r3, #13]
				Data_PLD_Queue  = pld_pkt ;
20004a66:	f64d 53d0 	movw	r3, #56784	; 0xddd0
20004a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a6e:	681a      	ldr	r2, [r3, #0]
20004a70:	f64d 53c8 	movw	r3, #56776	; 0xddc8
20004a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a78:	601a      	str	r2, [r3, #0]
		else{

		}
//	}

}
20004a7a:	f107 0714 	add.w	r7, r7, #20
20004a7e:	46bd      	mov	sp, r7
20004a80:	bc80      	pop	{r7}
20004a82:	4770      	bx	lr

20004a84 <vtlm_sender>:


void vtlm_sender(void* d){
20004a84:	b580      	push	{r7, lr}
20004a86:	b082      	sub	sp, #8
20004a88:	af00      	add	r7, sp, #0
20004a8a:	6078      	str	r0, [r7, #4]
//	Queue_Data = (QueueHandle_t*) d1;
//	uint8_t a;

//	if(feed_tlm_sender != pdFAIL){
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		if(data[511] == HK_API_ID){
20004a8c:	f24d 7358 	movw	r3, #55128	; 0xd758
20004a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a94:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
20004a98:	2b01      	cmp	r3, #1
20004a9a:	d10d      	bne.n	20004ab8 <vtlm_sender+0x34>
//			while(1){

				MSS_UART_polled_tx(&g_mss_uart0, Data_HK_Queue, sizeof(pkt_hk_t));
20004a9c:	f64d 53b8 	movw	r3, #56760	; 0xddb8
20004aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004aa4:	681b      	ldr	r3, [r3, #0]
20004aa6:	f64d 6018 	movw	r0, #56856	; 0xde18
20004aaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004aae:	4619      	mov	r1, r3
20004ab0:	f04f 022c 	mov.w	r2, #44	; 0x2c
20004ab4:	f000 fb2c 	bl	20005110 <MSS_UART_polled_tx>
//				vTaskResume(get_hk_pkt_handle);
//				xTaskNotifyGive(get_pld_pkt_handle);
//				vTask_Delay(1000);
//			}
		}
		if(data_pld[49] == PLD_API_ID){
20004ab8:	f24d 6378 	movw	r3, #54904	; 0xd678
20004abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ac0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
20004ac4:	2b02      	cmp	r3, #2
20004ac6:	d10d      	bne.n	20004ae4 <vtlm_sender+0x60>
//			while(1){

				MSS_UART_polled_tx(&g_mss_uart0, Data_PLD_Queue , sizeof(pkt_pld_t));
20004ac8:	f64d 53c8 	movw	r3, #56776	; 0xddc8
20004acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ad0:	681b      	ldr	r3, [r3, #0]
20004ad2:	f64d 6018 	movw	r0, #56856	; 0xde18
20004ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004ada:	4619      	mov	r1, r3
20004adc:	f04f 021e 	mov.w	r2, #30
20004ae0:	f000 fb16 	bl	20005110 <MSS_UART_polled_tx>
//				vTask_Delay(1000);
//			}
		}

//	}
}
20004ae4:	f107 0708 	add.w	r7, r7, #8
20004ae8:	46bd      	mov	sp, r7
20004aea:	bd80      	pop	{r7, pc}

20004aec <irq_tsk_func>:
//
//}



void irq_tsk_func(void* f_param){
20004aec:	b580      	push	{r7, lr}
20004aee:	b084      	sub	sp, #16
20004af0:	af00      	add	r7, sp, #0
20004af2:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue;

	while(1){

			xTaskNotifyWait(0x00, 0, &ulNotifiedValue, portMAX_DELAY);
20004af4:	f107 0308 	add.w	r3, r7, #8
20004af8:	f04f 0000 	mov.w	r0, #0
20004afc:	f04f 0100 	mov.w	r1, #0
20004b00:	461a      	mov	r2, r3
20004b02:	f04f 33ff 	mov.w	r3, #4294967295
20004b06:	f7fe fa51 	bl	20002fac <xTaskNotifyWait>
			ulTaskNotifyTake(pdTRUE, 1);
20004b0a:	f04f 0001 	mov.w	r0, #1
20004b0e:	f04f 0101 	mov.w	r1, #1
20004b12:	f7fe f9eb 	bl	20002eec <ulTaskNotifyTake>
			command_cnt++;
20004b16:	f64d 5394 	movw	r3, #56724	; 0xdd94
20004b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b1e:	881b      	ldrh	r3, [r3, #0]
20004b20:	b29b      	uxth	r3, r3
20004b22:	f103 0301 	add.w	r3, r3, #1
20004b26:	b29a      	uxth	r2, r3
20004b28:	f64d 5394 	movw	r3, #56724	; 0xdd94
20004b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b30:	801a      	strh	r2, [r3, #0]
			uint8_t* irq_buffer;
			irq_buffer = (uint8_t *) f_param;
20004b32:	687b      	ldr	r3, [r7, #4]
20004b34:	60fb      	str	r3, [r7, #12]
			 if(irq_buffer[0] == 127){
20004b36:	68fb      	ldr	r3, [r7, #12]
20004b38:	781b      	ldrb	r3, [r3, #0]
20004b3a:	2b7f      	cmp	r3, #127	; 0x7f
20004b3c:	d13d      	bne.n	20004bba <irq_tsk_func+0xce>
					c[command_index] = '\0';
20004b3e:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b46:	781b      	ldrb	r3, [r3, #0]
20004b48:	461a      	mov	r2, r3
20004b4a:	f24d 7338 	movw	r3, #55096	; 0xd738
20004b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b52:	f04f 0100 	mov.w	r1, #0
20004b56:	5499      	strb	r1, [r3, r2]
					c[command_index - 1] = 127;
20004b58:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b60:	781b      	ldrb	r3, [r3, #0]
20004b62:	f103 32ff 	add.w	r2, r3, #4294967295
20004b66:	f24d 7338 	movw	r3, #55096	; 0xd738
20004b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b6e:	f04f 017f 	mov.w	r1, #127	; 0x7f
20004b72:	5499      	strb	r1, [r3, r2]
					MSS_UART_polled_tx(&g_mss_uart0, &c[command_index - 1], 1);
20004b74:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b7c:	781b      	ldrb	r3, [r3, #0]
20004b7e:	f103 32ff 	add.w	r2, r3, #4294967295
20004b82:	f24d 7338 	movw	r3, #55096	; 0xd738
20004b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b8a:	4413      	add	r3, r2
20004b8c:	f64d 6018 	movw	r0, #56856	; 0xde18
20004b90:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004b94:	4619      	mov	r1, r3
20004b96:	f04f 0201 	mov.w	r2, #1
20004b9a:	f000 fab9 	bl	20005110 <MSS_UART_polled_tx>
					command_index = command_index - 1;
20004b9e:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004ba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ba6:	781b      	ldrb	r3, [r3, #0]
20004ba8:	f103 33ff 	add.w	r3, r3, #4294967295
20004bac:	b2da      	uxtb	r2, r3
20004bae:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bb6:	701a      	strb	r2, [r3, #0]
				MSS_UART_polled_tx(&g_mss_uart0, &c[command_index], 1);
				command_index = command_index + 1;
			}


	}
20004bb8:	e79c      	b.n	20004af4 <irq_tsk_func+0x8>
					c[command_index - 1] = 127;
					MSS_UART_polled_tx(&g_mss_uart0, &c[command_index - 1], 1);
					command_index = command_index - 1;
				}
			else{
				c[command_index] =  irq_buffer[0];
20004bba:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bc2:	781b      	ldrb	r3, [r3, #0]
20004bc4:	461a      	mov	r2, r3
20004bc6:	68fb      	ldr	r3, [r7, #12]
20004bc8:	7819      	ldrb	r1, [r3, #0]
20004bca:	f24d 7338 	movw	r3, #55096	; 0xd738
20004bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bd2:	5499      	strb	r1, [r3, r2]
				MSS_UART_polled_tx(&g_mss_uart0, &c[command_index], 1);
20004bd4:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bdc:	781b      	ldrb	r3, [r3, #0]
20004bde:	461a      	mov	r2, r3
20004be0:	f24d 7338 	movw	r3, #55096	; 0xd738
20004be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004be8:	4413      	add	r3, r2
20004bea:	f64d 6018 	movw	r0, #56856	; 0xde18
20004bee:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004bf2:	4619      	mov	r1, r3
20004bf4:	f04f 0201 	mov.w	r2, #1
20004bf8:	f000 fa8a 	bl	20005110 <MSS_UART_polled_tx>
				command_index = command_index + 1;
20004bfc:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c04:	781b      	ldrb	r3, [r3, #0]
20004c06:	f103 0301 	add.w	r3, r3, #1
20004c0a:	b2da      	uxtb	r2, r3
20004c0c:	f64d 3358 	movw	r3, #56152	; 0xdb58
20004c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c14:	701a      	strb	r2, [r3, #0]
			}


	}
20004c16:	e76d      	b.n	20004af4 <irq_tsk_func+0x8>

20004c18 <uart0_rx_handler>:
}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
20004c18:	b580      	push	{r7, lr}
20004c1a:	b084      	sub	sp, #16
20004c1c:	af00      	add	r7, sp, #0
20004c1e:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer, 8);
20004c20:	6878      	ldr	r0, [r7, #4]
20004c22:	f24d 7118 	movw	r1, #55064	; 0xd718
20004c26:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004c2a:	f04f 0208 	mov.w	r2, #8
20004c2e:	f000 fae1 	bl	200051f4 <MSS_UART_get_rx>
20004c32:	4602      	mov	r2, r0
20004c34:	f24d 7354 	movw	r3, #55124	; 0xd754
20004c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c3c:	601a      	str	r2, [r3, #0]
//		c[command_index] =  uart0_irq_rx_buffer[0];
//		MSS_UART_polled_tx(&g_mss_uart0, &c[command_index], 1);
//		command_index = command_index + 1;
//	}
	BaseType_t xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
20004c3e:	f04f 0300 	mov.w	r3, #0
20004c42:	60fb      	str	r3, [r7, #12]
//	 if(xHigherPriorityTaskWoken){
//		 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
//	 }


	 vTaskNotifyGiveFromISR(uart_irq, &xHigherPriorityTaskWoken);
20004c44:	f24d 6374 	movw	r3, #54900	; 0xd674
20004c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c4c:	681a      	ldr	r2, [r3, #0]
20004c4e:	f107 030c 	add.w	r3, r7, #12
20004c52:	4610      	mov	r0, r2
20004c54:	4619      	mov	r1, r3
20004c56:	f7fe fa21 	bl	2000309c <vTaskNotifyGiveFromISR>

	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
20004c5a:	68fb      	ldr	r3, [r7, #12]
20004c5c:	2b00      	cmp	r3, #0
20004c5e:	d00a      	beq.n	20004c76 <uart0_rx_handler+0x5e>
20004c60:	f64e 5304 	movw	r3, #60676	; 0xed04
20004c64:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20004c6c:	601a      	str	r2, [r3, #0]
20004c6e:	f3bf 8f4f 	dsb	sy
20004c72:	f3bf 8f6f 	isb	sy
//	BaseType_t checkIfYieldRequired;
//	checkIfYieldRequired = xTaskResumeFromISR(uart_irq_function);
//	portYIELD_FROM_ISR(checkIfYieldRequired);
//	 xTaskNotifyFromISR(irq_pro, (uint32_t) c, eSetValueWithOverwrite, pdTRUE);

}
20004c76:	f107 0710 	add.w	r7, r7, #16
20004c7a:	46bd      	mov	sp, r7
20004c7c:	bd80      	pop	{r7, pc}
20004c7e:	bf00      	nop

20004c80 <demo_tasks>:
//	 }
//}



void demo_tasks(void){
20004c80:	b590      	push	{r4, r7, lr}
20004c82:	b087      	sub	sp, #28
20004c84:	af02      	add	r7, sp, #8


//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
20004c86:	f64d 2358 	movw	r3, #55896	; 0xda58
20004c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c8e:	603b      	str	r3, [r7, #0]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
20004c90:	f247 3300 	movw	r3, #29440	; 0x7300
20004c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c98:	607b      	str	r3, [r7, #4]
		imu_ptr->init = &init;
20004c9a:	683a      	ldr	r2, [r7, #0]
20004c9c:	f640 63f9 	movw	r3, #3833	; 0xef9
20004ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ca4:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
20004ca6:	683b      	ldr	r3, [r7, #0]
20004ca8:	681b      	ldr	r3, [r3, #0]
20004caa:	f04f 0000 	mov.w	r0, #0
20004cae:	6879      	ldr	r1, [r7, #4]
20004cb0:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
20004cb2:	f64d 5020 	movw	r0, #56608	; 0xdd20
20004cb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004cba:	f244 0100 	movw	r1, #16384	; 0x4000
20004cbe:	f2c5 0100 	movt	r1, #20480	; 0x5000
20004cc2:	f04f 0221 	mov.w	r2, #33	; 0x21
20004cc6:	f04f 0300 	mov.w	r3, #0
20004cca:	f000 ff23 	bl	20005b14 <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
20004cce:	f64d 2358 	movw	r3, #55896	; 0xda58
20004cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cd6:	60bb      	str	r3, [r7, #8]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
20004cd8:	f247 3320 	movw	r3, #29472	; 0x7320
20004cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ce0:	60fb      	str	r3, [r7, #12]
		vc_ptr->init = &init;
20004ce2:	68ba      	ldr	r2, [r7, #8]
20004ce4:	f640 63f9 	movw	r3, #3833	; 0xef9
20004ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cec:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
20004cee:	68bb      	ldr	r3, [r7, #8]
20004cf0:	681b      	ldr	r3, [r3, #0]
20004cf2:	f04f 000a 	mov.w	r0, #10
20004cf6:	68f9      	ldr	r1, [r7, #12]
20004cf8:	4798      	blx	r3

		Data_HK_Queue = xQueueCreate(QUEUE_LENGTH, SIZE_QUEUE);
20004cfa:	f04f 0001 	mov.w	r0, #1
20004cfe:	f04f 012c 	mov.w	r1, #44	; 0x2c
20004d02:	f04f 0200 	mov.w	r2, #0
20004d06:	f7fc fa77 	bl	200011f8 <xQueueGenericCreate>
20004d0a:	4602      	mov	r2, r0
20004d0c:	f64d 53b8 	movw	r3, #56760	; 0xddb8
20004d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d14:	601a      	str	r2, [r3, #0]
		Data_PLD_Queue = xQueueCreate(QUEUE_LENGTH, SIZE_PLD_QUEUE);
20004d16:	f04f 0001 	mov.w	r0, #1
20004d1a:	f04f 011e 	mov.w	r1, #30
20004d1e:	f04f 0200 	mov.w	r2, #0
20004d22:	f7fc fa69 	bl	200011f8 <xQueueGenericCreate>
20004d26:	4602      	mov	r2, r0
20004d28:	f64d 53c8 	movw	r3, #56776	; 0xddc8
20004d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d30:	601a      	str	r2, [r3, #0]
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		NVIC_EnableIRQ(UART0_IRQn);
20004d32:	f04f 000a 	mov.w	r0, #10
20004d36:	f7ff faf7 	bl	20004328 <NVIC_EnableIRQ>
		NVIC_SetPriority(UART0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1);
20004d3a:	f04f 000a 	mov.w	r0, #10
20004d3e:	f04f 019f 	mov.w	r1, #159	; 0x9f
20004d42:	f7ff fb0d 	bl	20004360 <NVIC_SetPriority>


		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
20004d46:	f64d 6018 	movw	r0, #56856	; 0xde18
20004d4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d4e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
20004d52:	f04f 0203 	mov.w	r2, #3
20004d56:	f000 f999 	bl	2000508c <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_FIFO_EIGHT_BYTES);
20004d5a:	f64d 6018 	movw	r0, #56856	; 0xde18
20004d5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d62:	f644 4119 	movw	r1, #19481	; 0x4c19
20004d66:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004d6a:	f04f 0280 	mov.w	r2, #128	; 0x80
20004d6e:	f000 faaf 	bl	200052d0 <MSS_UART_set_rx_handler>
//		init_demo(imu);
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;


	 xMutex = xSemaphoreCreateMutex();
20004d72:	f04f 0001 	mov.w	r0, #1
20004d76:	f7fc fac1 	bl	200012fc <xQueueCreateMutex>
20004d7a:	4602      	mov	r2, r0
20004d7c:	f64d 53b4 	movw	r3, #56756	; 0xddb4
20004d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d84:	601a      	str	r2, [r3, #0]
//	 xTaskCreate(get_imu_data, "IMU", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(get_vc_data, "VC", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(pktmngr, "Packet", configMINIMAL_STACK_SIZE, (void*) data, 1, NULL);


		feed_get_hk_data = xTaskCreate(get_hk_data, "HK", configMINIMAL_STACK_SIZE, (void*)data , 2, &get_hk_pkt_handle);
20004d86:	f04f 0302 	mov.w	r3, #2
20004d8a:	9300      	str	r3, [sp, #0]
20004d8c:	f64d 53c4 	movw	r3, #56772	; 0xddc4
20004d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d94:	9301      	str	r3, [sp, #4]
20004d96:	f244 30bd 	movw	r0, #17341	; 0x43bd
20004d9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d9e:	f247 2198 	movw	r1, #29336	; 0x7298
20004da2:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004da6:	f04f 0250 	mov.w	r2, #80	; 0x50
20004daa:	f24d 7358 	movw	r3, #55128	; 0xd758
20004dae:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004db2:	f7fc ff13 	bl	20001bdc <xTaskCreate>
20004db6:	4602      	mov	r2, r0
20004db8:	f64d 53bc 	movw	r3, #56764	; 0xddbc
20004dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dc0:	601a      	str	r2, [r3, #0]

		feed_get_payload_data = xTaskCreate(get_pld_data, "Payload", configMINIMAL_STACK_SIZE, (void* )data, 1, &get_pld_pkt_handle);
20004dc2:	f04f 0301 	mov.w	r3, #1
20004dc6:	9300      	str	r3, [sp, #0]
20004dc8:	f64d 539c 	movw	r3, #56732	; 0xdd9c
20004dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dd0:	9301      	str	r3, [sp, #4]
20004dd2:	f244 7091 	movw	r0, #18321	; 0x4791
20004dd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004dda:	f247 219c 	movw	r1, #29340	; 0x729c
20004dde:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004de2:	f04f 0250 	mov.w	r2, #80	; 0x50
20004de6:	f24d 7358 	movw	r3, #55128	; 0xd758
20004dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dee:	f7fc fef5 	bl	20001bdc <xTaskCreate>
20004df2:	4602      	mov	r2, r0
20004df4:	f64d 53cc 	movw	r3, #56780	; 0xddcc
20004df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dfc:	601a      	str	r2, [r3, #0]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, NULL, 3, &uart_irq);
20004dfe:	f04f 0303 	mov.w	r3, #3
20004e02:	9300      	str	r3, [sp, #0]
20004e04:	f24d 6374 	movw	r3, #54900	; 0xd674
20004e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e0c:	9301      	str	r3, [sp, #4]
20004e0e:	f644 20ed 	movw	r0, #19181	; 0x4aed
20004e12:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004e16:	f247 21a4 	movw	r1, #29348	; 0x72a4
20004e1a:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004e1e:	f04f 0250 	mov.w	r2, #80	; 0x50
20004e22:	f04f 0300 	mov.w	r3, #0
20004e26:	f7fc fed9 	bl	20001bdc <xTaskCreate>
//
////		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
//
		pkt_timer[0] = xTimerCreate("TLM_Task_Timer", pdMS_TO_TICKS(5000),pdTRUE, (void* )0, vtlm_task);
20004e2a:	f644 035d 	movw	r3, #18525	; 0x485d
20004e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e32:	9300      	str	r3, [sp, #0]
20004e34:	f247 20b0 	movw	r0, #29360	; 0x72b0
20004e38:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004e3c:	f241 3188 	movw	r1, #5000	; 0x1388
20004e40:	f04f 0201 	mov.w	r2, #1
20004e44:	f04f 0300 	mov.w	r3, #0
20004e48:	f7fe fa90 	bl	2000336c <xTimerCreate>
20004e4c:	4602      	mov	r2, r0
20004e4e:	f64d 538c 	movw	r3, #56716	; 0xdd8c
20004e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e56:	601a      	str	r2, [r3, #0]
		xTimerStart(pkt_timer[0], 0);
20004e58:	f64d 538c 	movw	r3, #56716	; 0xdd8c
20004e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e60:	681c      	ldr	r4, [r3, #0]
20004e62:	f7fd fa71 	bl	20002348 <xTaskGetTickCount>
20004e66:	4603      	mov	r3, r0
20004e68:	f04f 0200 	mov.w	r2, #0
20004e6c:	9200      	str	r2, [sp, #0]
20004e6e:	4620      	mov	r0, r4
20004e70:	f04f 0101 	mov.w	r1, #1
20004e74:	461a      	mov	r2, r3
20004e76:	f04f 0300 	mov.w	r3, #0
20004e7a:	f7fe fac9 	bl	20003410 <xTimerGenericCommand>
////
		pkt_timer[1] = xTimerCreate("Sender_Timer", pdMS_TO_TICKS(5005), pdTRUE, (void* )0, vtlm_sender);
20004e7e:	f644 2385 	movw	r3, #19077	; 0x4a85
20004e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e86:	9300      	str	r3, [sp, #0]
20004e88:	f247 20c0 	movw	r0, #29376	; 0x72c0
20004e8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004e90:	f241 318d 	movw	r1, #5005	; 0x138d
20004e94:	f04f 0201 	mov.w	r2, #1
20004e98:	f04f 0300 	mov.w	r3, #0
20004e9c:	f7fe fa66 	bl	2000336c <xTimerCreate>
20004ea0:	4602      	mov	r2, r0
20004ea2:	f64d 538c 	movw	r3, #56716	; 0xdd8c
20004ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004eaa:	605a      	str	r2, [r3, #4]
		xTimerStart(pkt_timer[1], 0);
20004eac:	f64d 538c 	movw	r3, #56716	; 0xdd8c
20004eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004eb4:	685c      	ldr	r4, [r3, #4]
20004eb6:	f7fd fa47 	bl	20002348 <xTaskGetTickCount>
20004eba:	4603      	mov	r3, r0
20004ebc:	f04f 0200 	mov.w	r2, #0
20004ec0:	9200      	str	r2, [sp, #0]
20004ec2:	4620      	mov	r0, r4
20004ec4:	f04f 0101 	mov.w	r1, #1
20004ec8:	461a      	mov	r2, r3
20004eca:	f04f 0300 	mov.w	r3, #0
20004ece:	f7fe fa9f 	bl	20003410 <xTimerGenericCommand>
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
20004ed2:	f7fd f8fd 	bl	200020d0 <vTaskStartScheduler>

}
20004ed6:	f107 0714 	add.w	r7, r7, #20
20004eda:	46bd      	mov	sp, r7
20004edc:	bd90      	pop	{r4, r7, pc}
20004ede:	bf00      	nop

20004ee0 <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
20004ee0:	b580      	push	{r7, lr}
20004ee2:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
20004ee4:	f64d 3068 	movw	r0, #56168	; 0xdb68
20004ee8:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004eec:	f001 f838 	bl	20005f60 <I2C_isr>
}
20004ef0:	bd80      	pop	{r7, pc}
20004ef2:	bf00      	nop

20004ef4 <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
20004ef4:	b580      	push	{r7, lr}
20004ef6:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
20004ef8:	f64d 30d4 	movw	r0, #56276	; 0xdbd4
20004efc:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004f00:	f001 f82e 	bl	20005f60 <I2C_isr>
}
20004f04:	bd80      	pop	{r7, pc}
20004f06:	bf00      	nop

20004f08 <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
20004f08:	b580      	push	{r7, lr}
20004f0a:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
20004f0c:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
20004f10:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004f14:	f001 f824 	bl	20005f60 <I2C_isr>
}
20004f18:	bd80      	pop	{r7, pc}
20004f1a:	bf00      	nop

20004f1c <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
20004f1c:	b580      	push	{r7, lr}
20004f1e:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
20004f20:	f64d 40ac 	movw	r0, #56492	; 0xdcac
20004f24:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004f28:	f001 f81a 	bl	20005f60 <I2C_isr>
}
20004f2c:	bd80      	pop	{r7, pc}
20004f2e:	bf00      	nop

20004f30 <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
20004f30:	b580      	push	{r7, lr}
20004f32:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
20004f34:	f64d 5020 	movw	r0, #56608	; 0xdd20
20004f38:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004f3c:	f001 f810 	bl	20005f60 <I2C_isr>
}
20004f40:	bd80      	pop	{r7, pc}
20004f42:	bf00      	nop

20004f44 <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
20004f44:	b580      	push	{r7, lr}
20004f46:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
20004f48:	f64d 4040 	movw	r0, #56384	; 0xdc40
20004f4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004f50:	f001 f806 	bl	20005f60 <I2C_isr>
}
20004f54:	bd80      	pop	{r7, pc}
20004f56:	bf00      	nop

20004f58 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004f58:	b480      	push	{r7}
20004f5a:	b083      	sub	sp, #12
20004f5c:	af00      	add	r7, sp, #0
20004f5e:	4603      	mov	r3, r0
20004f60:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20004f62:	f24e 1300 	movw	r3, #57600	; 0xe100
20004f66:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004f6a:	f997 2007 	ldrsb.w	r2, [r7, #7]
20004f6e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004f72:	79f9      	ldrb	r1, [r7, #7]
20004f74:	f001 011f 	and.w	r1, r1, #31
20004f78:	f04f 0001 	mov.w	r0, #1
20004f7c:	fa00 f101 	lsl.w	r1, r0, r1
20004f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004f84:	f107 070c 	add.w	r7, r7, #12
20004f88:	46bd      	mov	sp, r7
20004f8a:	bc80      	pop	{r7}
20004f8c:	4770      	bx	lr
20004f8e:	bf00      	nop

20004f90 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20004f90:	b480      	push	{r7}
20004f92:	b083      	sub	sp, #12
20004f94:	af00      	add	r7, sp, #0
20004f96:	4603      	mov	r3, r0
20004f98:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20004f9a:	f24e 1300 	movw	r3, #57600	; 0xe100
20004f9e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004fa2:	f997 2007 	ldrsb.w	r2, [r7, #7]
20004fa6:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004faa:	79f9      	ldrb	r1, [r7, #7]
20004fac:	f001 011f 	and.w	r1, r1, #31
20004fb0:	f04f 0001 	mov.w	r0, #1
20004fb4:	fa00 f101 	lsl.w	r1, r0, r1
20004fb8:	f102 0260 	add.w	r2, r2, #96	; 0x60
20004fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004fc0:	f107 070c 	add.w	r7, r7, #12
20004fc4:	46bd      	mov	sp, r7
20004fc6:	bc80      	pop	{r7}
20004fc8:	4770      	bx	lr
20004fca:	bf00      	nop

20004fcc <set_bit_reg8>:
20004fcc:	b480      	push	{r7}
20004fce:	b083      	sub	sp, #12
20004fd0:	af00      	add	r7, sp, #0
20004fd2:	6078      	str	r0, [r7, #4]
20004fd4:	460b      	mov	r3, r1
20004fd6:	70fb      	strb	r3, [r7, #3]
20004fd8:	687b      	ldr	r3, [r7, #4]
20004fda:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20004fde:	687b      	ldr	r3, [r7, #4]
20004fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20004fe4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20004fe8:	ea4f 1343 	mov.w	r3, r3, lsl #5
20004fec:	441a      	add	r2, r3
20004fee:	78fb      	ldrb	r3, [r7, #3]
20004ff0:	ea4f 0383 	mov.w	r3, r3, lsl #2
20004ff4:	4413      	add	r3, r2
20004ff6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
20004ffa:	f04f 0201 	mov.w	r2, #1
20004ffe:	601a      	str	r2, [r3, #0]
20005000:	f107 070c 	add.w	r7, r7, #12
20005004:	46bd      	mov	sp, r7
20005006:	bc80      	pop	{r7}
20005008:	4770      	bx	lr
2000500a:	bf00      	nop

2000500c <clear_bit_reg8>:
2000500c:	b480      	push	{r7}
2000500e:	b083      	sub	sp, #12
20005010:	af00      	add	r7, sp, #0
20005012:	6078      	str	r0, [r7, #4]
20005014:	460b      	mov	r3, r1
20005016:	70fb      	strb	r3, [r7, #3]
20005018:	687b      	ldr	r3, [r7, #4]
2000501a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
2000501e:	687b      	ldr	r3, [r7, #4]
20005020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005024:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20005028:	ea4f 1343 	mov.w	r3, r3, lsl #5
2000502c:	441a      	add	r2, r3
2000502e:	78fb      	ldrb	r3, [r7, #3]
20005030:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005034:	4413      	add	r3, r2
20005036:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000503a:	f04f 0200 	mov.w	r2, #0
2000503e:	601a      	str	r2, [r3, #0]
20005040:	f107 070c 	add.w	r7, r7, #12
20005044:	46bd      	mov	sp, r7
20005046:	bc80      	pop	{r7}
20005048:	4770      	bx	lr
2000504a:	bf00      	nop

2000504c <read_bit_reg8>:
2000504c:	b480      	push	{r7}
2000504e:	b083      	sub	sp, #12
20005050:	af00      	add	r7, sp, #0
20005052:	6078      	str	r0, [r7, #4]
20005054:	460b      	mov	r3, r1
20005056:	70fb      	strb	r3, [r7, #3]
20005058:	687b      	ldr	r3, [r7, #4]
2000505a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
2000505e:	687b      	ldr	r3, [r7, #4]
20005060:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005064:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20005068:	ea4f 1343 	mov.w	r3, r3, lsl #5
2000506c:	441a      	add	r2, r3
2000506e:	78fb      	ldrb	r3, [r7, #3]
20005070:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005074:	4413      	add	r3, r2
20005076:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000507a:	681b      	ldr	r3, [r3, #0]
2000507c:	b2db      	uxtb	r3, r3
2000507e:	4618      	mov	r0, r3
20005080:	f107 070c 	add.w	r7, r7, #12
20005084:	46bd      	mov	sp, r7
20005086:	bc80      	pop	{r7}
20005088:	4770      	bx	lr
2000508a:	bf00      	nop

2000508c <MSS_UART_init>:
2000508c:	b580      	push	{r7, lr}
2000508e:	b084      	sub	sp, #16
20005090:	af00      	add	r7, sp, #0
20005092:	60f8      	str	r0, [r7, #12]
20005094:	60b9      	str	r1, [r7, #8]
20005096:	4613      	mov	r3, r2
20005098:	71fb      	strb	r3, [r7, #7]
2000509a:	68fa      	ldr	r2, [r7, #12]
2000509c:	f64d 6318 	movw	r3, #56856	; 0xde18
200050a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050a4:	429a      	cmp	r2, r3
200050a6:	d007      	beq.n	200050b8 <MSS_UART_init+0x2c>
200050a8:	68fa      	ldr	r2, [r7, #12]
200050aa:	f64d 53d8 	movw	r3, #56792	; 0xddd8
200050ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050b2:	429a      	cmp	r2, r3
200050b4:	d000      	beq.n	200050b8 <MSS_UART_init+0x2c>
200050b6:	be00      	bkpt	0x0000
200050b8:	79fb      	ldrb	r3, [r7, #7]
200050ba:	68f8      	ldr	r0, [r7, #12]
200050bc:	68b9      	ldr	r1, [r7, #8]
200050be:	461a      	mov	r2, r3
200050c0:	f000 fa56 	bl	20005570 <global_init>
200050c4:	68fb      	ldr	r3, [r7, #12]
200050c6:	681b      	ldr	r3, [r3, #0]
200050c8:	f103 0330 	add.w	r3, r3, #48	; 0x30
200050cc:	4618      	mov	r0, r3
200050ce:	f04f 0103 	mov.w	r1, #3
200050d2:	f7ff ff9b 	bl	2000500c <clear_bit_reg8>
200050d6:	68fb      	ldr	r3, [r7, #12]
200050d8:	681b      	ldr	r3, [r3, #0]
200050da:	f103 0334 	add.w	r3, r3, #52	; 0x34
200050de:	4618      	mov	r0, r3
200050e0:	f04f 0102 	mov.w	r1, #2
200050e4:	f7ff ff92 	bl	2000500c <clear_bit_reg8>
200050e8:	68fb      	ldr	r3, [r7, #12]
200050ea:	681b      	ldr	r3, [r3, #0]
200050ec:	f103 0338 	add.w	r3, r3, #56	; 0x38
200050f0:	4618      	mov	r0, r3
200050f2:	f04f 0100 	mov.w	r1, #0
200050f6:	f7ff ff89 	bl	2000500c <clear_bit_reg8>
200050fa:	68fa      	ldr	r2, [r7, #12]
200050fc:	f645 2309 	movw	r3, #23049	; 0x5a09
20005100:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005104:	6253      	str	r3, [r2, #36]	; 0x24
20005106:	f107 0710 	add.w	r7, r7, #16
2000510a:	46bd      	mov	sp, r7
2000510c:	bd80      	pop	{r7, pc}
2000510e:	bf00      	nop

20005110 <MSS_UART_polled_tx>:
20005110:	b480      	push	{r7}
20005112:	b089      	sub	sp, #36	; 0x24
20005114:	af00      	add	r7, sp, #0
20005116:	60f8      	str	r0, [r7, #12]
20005118:	60b9      	str	r1, [r7, #8]
2000511a:	607a      	str	r2, [r7, #4]
2000511c:	f04f 0300 	mov.w	r3, #0
20005120:	613b      	str	r3, [r7, #16]
20005122:	68fa      	ldr	r2, [r7, #12]
20005124:	f64d 6318 	movw	r3, #56856	; 0xde18
20005128:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000512c:	429a      	cmp	r2, r3
2000512e:	d007      	beq.n	20005140 <MSS_UART_polled_tx+0x30>
20005130:	68fa      	ldr	r2, [r7, #12]
20005132:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005136:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000513a:	429a      	cmp	r2, r3
2000513c:	d000      	beq.n	20005140 <MSS_UART_polled_tx+0x30>
2000513e:	be00      	bkpt	0x0000
20005140:	68bb      	ldr	r3, [r7, #8]
20005142:	2b00      	cmp	r3, #0
20005144:	d100      	bne.n	20005148 <MSS_UART_polled_tx+0x38>
20005146:	be00      	bkpt	0x0000
20005148:	687b      	ldr	r3, [r7, #4]
2000514a:	2b00      	cmp	r3, #0
2000514c:	d100      	bne.n	20005150 <MSS_UART_polled_tx+0x40>
2000514e:	be00      	bkpt	0x0000
20005150:	68fa      	ldr	r2, [r7, #12]
20005152:	f64d 6318 	movw	r3, #56856	; 0xde18
20005156:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000515a:	429a      	cmp	r2, r3
2000515c:	d006      	beq.n	2000516c <MSS_UART_polled_tx+0x5c>
2000515e:	68fa      	ldr	r2, [r7, #12]
20005160:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005164:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005168:	429a      	cmp	r2, r3
2000516a:	d13d      	bne.n	200051e8 <MSS_UART_polled_tx+0xd8>
2000516c:	68bb      	ldr	r3, [r7, #8]
2000516e:	2b00      	cmp	r3, #0
20005170:	d03a      	beq.n	200051e8 <MSS_UART_polled_tx+0xd8>
20005172:	687b      	ldr	r3, [r7, #4]
20005174:	2b00      	cmp	r3, #0
20005176:	d037      	beq.n	200051e8 <MSS_UART_polled_tx+0xd8>
20005178:	68fb      	ldr	r3, [r7, #12]
2000517a:	681b      	ldr	r3, [r3, #0]
2000517c:	7d1b      	ldrb	r3, [r3, #20]
2000517e:	76fb      	strb	r3, [r7, #27]
20005180:	68fb      	ldr	r3, [r7, #12]
20005182:	7b5a      	ldrb	r2, [r3, #13]
20005184:	7efb      	ldrb	r3, [r7, #27]
20005186:	ea42 0303 	orr.w	r3, r2, r3
2000518a:	b2da      	uxtb	r2, r3
2000518c:	68fb      	ldr	r3, [r7, #12]
2000518e:	735a      	strb	r2, [r3, #13]
20005190:	7efb      	ldrb	r3, [r7, #27]
20005192:	f003 0320 	and.w	r3, r3, #32
20005196:	2b00      	cmp	r3, #0
20005198:	d023      	beq.n	200051e2 <MSS_UART_polled_tx+0xd2>
2000519a:	f04f 0310 	mov.w	r3, #16
2000519e:	61fb      	str	r3, [r7, #28]
200051a0:	687b      	ldr	r3, [r7, #4]
200051a2:	2b0f      	cmp	r3, #15
200051a4:	d801      	bhi.n	200051aa <MSS_UART_polled_tx+0x9a>
200051a6:	687b      	ldr	r3, [r7, #4]
200051a8:	61fb      	str	r3, [r7, #28]
200051aa:	f04f 0300 	mov.w	r3, #0
200051ae:	617b      	str	r3, [r7, #20]
200051b0:	e00e      	b.n	200051d0 <MSS_UART_polled_tx+0xc0>
200051b2:	68fb      	ldr	r3, [r7, #12]
200051b4:	681b      	ldr	r3, [r3, #0]
200051b6:	68b9      	ldr	r1, [r7, #8]
200051b8:	693a      	ldr	r2, [r7, #16]
200051ba:	440a      	add	r2, r1
200051bc:	7812      	ldrb	r2, [r2, #0]
200051be:	701a      	strb	r2, [r3, #0]
200051c0:	693b      	ldr	r3, [r7, #16]
200051c2:	f103 0301 	add.w	r3, r3, #1
200051c6:	613b      	str	r3, [r7, #16]
200051c8:	697b      	ldr	r3, [r7, #20]
200051ca:	f103 0301 	add.w	r3, r3, #1
200051ce:	617b      	str	r3, [r7, #20]
200051d0:	697a      	ldr	r2, [r7, #20]
200051d2:	69fb      	ldr	r3, [r7, #28]
200051d4:	429a      	cmp	r2, r3
200051d6:	d3ec      	bcc.n	200051b2 <MSS_UART_polled_tx+0xa2>
200051d8:	687a      	ldr	r2, [r7, #4]
200051da:	697b      	ldr	r3, [r7, #20]
200051dc:	ebc3 0302 	rsb	r3, r3, r2
200051e0:	607b      	str	r3, [r7, #4]
200051e2:	687b      	ldr	r3, [r7, #4]
200051e4:	2b00      	cmp	r3, #0
200051e6:	d1c7      	bne.n	20005178 <MSS_UART_polled_tx+0x68>
200051e8:	f107 0724 	add.w	r7, r7, #36	; 0x24
200051ec:	46bd      	mov	sp, r7
200051ee:	bc80      	pop	{r7}
200051f0:	4770      	bx	lr
200051f2:	bf00      	nop

200051f4 <MSS_UART_get_rx>:
200051f4:	b480      	push	{r7}
200051f6:	b087      	sub	sp, #28
200051f8:	af00      	add	r7, sp, #0
200051fa:	60f8      	str	r0, [r7, #12]
200051fc:	60b9      	str	r1, [r7, #8]
200051fe:	607a      	str	r2, [r7, #4]
20005200:	f04f 0300 	mov.w	r3, #0
20005204:	613b      	str	r3, [r7, #16]
20005206:	f04f 0300 	mov.w	r3, #0
2000520a:	75fb      	strb	r3, [r7, #23]
2000520c:	68fa      	ldr	r2, [r7, #12]
2000520e:	f64d 6318 	movw	r3, #56856	; 0xde18
20005212:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005216:	429a      	cmp	r2, r3
20005218:	d007      	beq.n	2000522a <MSS_UART_get_rx+0x36>
2000521a:	68fa      	ldr	r2, [r7, #12]
2000521c:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005220:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005224:	429a      	cmp	r2, r3
20005226:	d000      	beq.n	2000522a <MSS_UART_get_rx+0x36>
20005228:	be00      	bkpt	0x0000
2000522a:	68bb      	ldr	r3, [r7, #8]
2000522c:	2b00      	cmp	r3, #0
2000522e:	d100      	bne.n	20005232 <MSS_UART_get_rx+0x3e>
20005230:	be00      	bkpt	0x0000
20005232:	687b      	ldr	r3, [r7, #4]
20005234:	2b00      	cmp	r3, #0
20005236:	d100      	bne.n	2000523a <MSS_UART_get_rx+0x46>
20005238:	be00      	bkpt	0x0000
2000523a:	68fa      	ldr	r2, [r7, #12]
2000523c:	f64d 6318 	movw	r3, #56856	; 0xde18
20005240:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005244:	429a      	cmp	r2, r3
20005246:	d006      	beq.n	20005256 <MSS_UART_get_rx+0x62>
20005248:	68fa      	ldr	r2, [r7, #12]
2000524a:	f64d 53d8 	movw	r3, #56792	; 0xddd8
2000524e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005252:	429a      	cmp	r2, r3
20005254:	d134      	bne.n	200052c0 <MSS_UART_get_rx+0xcc>
20005256:	68bb      	ldr	r3, [r7, #8]
20005258:	2b00      	cmp	r3, #0
2000525a:	d031      	beq.n	200052c0 <MSS_UART_get_rx+0xcc>
2000525c:	687b      	ldr	r3, [r7, #4]
2000525e:	2b00      	cmp	r3, #0
20005260:	d02e      	beq.n	200052c0 <MSS_UART_get_rx+0xcc>
20005262:	68fb      	ldr	r3, [r7, #12]
20005264:	681b      	ldr	r3, [r3, #0]
20005266:	7d1b      	ldrb	r3, [r3, #20]
20005268:	75fb      	strb	r3, [r7, #23]
2000526a:	68fb      	ldr	r3, [r7, #12]
2000526c:	7b5a      	ldrb	r2, [r3, #13]
2000526e:	7dfb      	ldrb	r3, [r7, #23]
20005270:	ea42 0303 	orr.w	r3, r2, r3
20005274:	b2da      	uxtb	r2, r3
20005276:	68fb      	ldr	r3, [r7, #12]
20005278:	735a      	strb	r2, [r3, #13]
2000527a:	e017      	b.n	200052ac <MSS_UART_get_rx+0xb8>
2000527c:	68ba      	ldr	r2, [r7, #8]
2000527e:	693b      	ldr	r3, [r7, #16]
20005280:	4413      	add	r3, r2
20005282:	68fa      	ldr	r2, [r7, #12]
20005284:	6812      	ldr	r2, [r2, #0]
20005286:	7812      	ldrb	r2, [r2, #0]
20005288:	b2d2      	uxtb	r2, r2
2000528a:	701a      	strb	r2, [r3, #0]
2000528c:	693b      	ldr	r3, [r7, #16]
2000528e:	f103 0301 	add.w	r3, r3, #1
20005292:	613b      	str	r3, [r7, #16]
20005294:	68fb      	ldr	r3, [r7, #12]
20005296:	681b      	ldr	r3, [r3, #0]
20005298:	7d1b      	ldrb	r3, [r3, #20]
2000529a:	75fb      	strb	r3, [r7, #23]
2000529c:	68fb      	ldr	r3, [r7, #12]
2000529e:	7b5a      	ldrb	r2, [r3, #13]
200052a0:	7dfb      	ldrb	r3, [r7, #23]
200052a2:	ea42 0303 	orr.w	r3, r2, r3
200052a6:	b2da      	uxtb	r2, r3
200052a8:	68fb      	ldr	r3, [r7, #12]
200052aa:	735a      	strb	r2, [r3, #13]
200052ac:	7dfb      	ldrb	r3, [r7, #23]
200052ae:	f003 0301 	and.w	r3, r3, #1
200052b2:	b2db      	uxtb	r3, r3
200052b4:	2b00      	cmp	r3, #0
200052b6:	d003      	beq.n	200052c0 <MSS_UART_get_rx+0xcc>
200052b8:	693a      	ldr	r2, [r7, #16]
200052ba:	687b      	ldr	r3, [r7, #4]
200052bc:	429a      	cmp	r2, r3
200052be:	d3dd      	bcc.n	2000527c <MSS_UART_get_rx+0x88>
200052c0:	693b      	ldr	r3, [r7, #16]
200052c2:	4618      	mov	r0, r3
200052c4:	f107 071c 	add.w	r7, r7, #28
200052c8:	46bd      	mov	sp, r7
200052ca:	bc80      	pop	{r7}
200052cc:	4770      	bx	lr
200052ce:	bf00      	nop

200052d0 <MSS_UART_set_rx_handler>:
200052d0:	b580      	push	{r7, lr}
200052d2:	b084      	sub	sp, #16
200052d4:	af00      	add	r7, sp, #0
200052d6:	60f8      	str	r0, [r7, #12]
200052d8:	60b9      	str	r1, [r7, #8]
200052da:	4613      	mov	r3, r2
200052dc:	71fb      	strb	r3, [r7, #7]
200052de:	68fa      	ldr	r2, [r7, #12]
200052e0:	f64d 6318 	movw	r3, #56856	; 0xde18
200052e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052e8:	429a      	cmp	r2, r3
200052ea:	d007      	beq.n	200052fc <MSS_UART_set_rx_handler+0x2c>
200052ec:	68fa      	ldr	r2, [r7, #12]
200052ee:	f64d 53d8 	movw	r3, #56792	; 0xddd8
200052f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052f6:	429a      	cmp	r2, r3
200052f8:	d000      	beq.n	200052fc <MSS_UART_set_rx_handler+0x2c>
200052fa:	be00      	bkpt	0x0000
200052fc:	68bb      	ldr	r3, [r7, #8]
200052fe:	2b00      	cmp	r3, #0
20005300:	d100      	bne.n	20005304 <MSS_UART_set_rx_handler+0x34>
20005302:	be00      	bkpt	0x0000
20005304:	79fb      	ldrb	r3, [r7, #7]
20005306:	2bc0      	cmp	r3, #192	; 0xc0
20005308:	d900      	bls.n	2000530c <MSS_UART_set_rx_handler+0x3c>
2000530a:	be00      	bkpt	0x0000
2000530c:	68fa      	ldr	r2, [r7, #12]
2000530e:	f64d 6318 	movw	r3, #56856	; 0xde18
20005312:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005316:	429a      	cmp	r2, r3
20005318:	d006      	beq.n	20005328 <MSS_UART_set_rx_handler+0x58>
2000531a:	68fa      	ldr	r2, [r7, #12]
2000531c:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005320:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005324:	429a      	cmp	r2, r3
20005326:	d12e      	bne.n	20005386 <MSS_UART_set_rx_handler+0xb6>
20005328:	68bb      	ldr	r3, [r7, #8]
2000532a:	2b00      	cmp	r3, #0
2000532c:	d02b      	beq.n	20005386 <MSS_UART_set_rx_handler+0xb6>
2000532e:	79fb      	ldrb	r3, [r7, #7]
20005330:	2bc0      	cmp	r3, #192	; 0xc0
20005332:	d828      	bhi.n	20005386 <MSS_UART_set_rx_handler+0xb6>
20005334:	68fb      	ldr	r3, [r7, #12]
20005336:	68ba      	ldr	r2, [r7, #8]
20005338:	621a      	str	r2, [r3, #32]
2000533a:	68fb      	ldr	r3, [r7, #12]
2000533c:	681a      	ldr	r2, [r3, #0]
2000533e:	68fb      	ldr	r3, [r7, #12]
20005340:	681b      	ldr	r3, [r3, #0]
20005342:	7a1b      	ldrb	r3, [r3, #8]
20005344:	b2db      	uxtb	r3, r3
20005346:	b2db      	uxtb	r3, r3
20005348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2000534c:	79f8      	ldrb	r0, [r7, #7]
2000534e:	4619      	mov	r1, r3
20005350:	4603      	mov	r3, r0
20005352:	ea41 0303 	orr.w	r3, r1, r3
20005356:	b2db      	uxtb	r3, r3
20005358:	b2db      	uxtb	r3, r3
2000535a:	7213      	strb	r3, [r2, #8]
2000535c:	68fb      	ldr	r3, [r7, #12]
2000535e:	791b      	ldrb	r3, [r3, #4]
20005360:	b25b      	sxtb	r3, r3
20005362:	4618      	mov	r0, r3
20005364:	f7ff fe14 	bl	20004f90 <NVIC_ClearPendingIRQ>
20005368:	68fb      	ldr	r3, [r7, #12]
2000536a:	681b      	ldr	r3, [r3, #0]
2000536c:	f103 0304 	add.w	r3, r3, #4
20005370:	4618      	mov	r0, r3
20005372:	f04f 0100 	mov.w	r1, #0
20005376:	f7ff fe29 	bl	20004fcc <set_bit_reg8>
2000537a:	68fb      	ldr	r3, [r7, #12]
2000537c:	791b      	ldrb	r3, [r3, #4]
2000537e:	b25b      	sxtb	r3, r3
20005380:	4618      	mov	r0, r3
20005382:	f7ff fde9 	bl	20004f58 <NVIC_EnableIRQ>
20005386:	f107 0710 	add.w	r7, r7, #16
2000538a:	46bd      	mov	sp, r7
2000538c:	bd80      	pop	{r7, pc}
2000538e:	bf00      	nop

20005390 <UART0_IRQHandler>:
20005390:	4668      	mov	r0, sp
20005392:	f020 0107 	bic.w	r1, r0, #7
20005396:	468d      	mov	sp, r1
20005398:	b589      	push	{r0, r3, r7, lr}
2000539a:	af00      	add	r7, sp, #0
2000539c:	f64d 6018 	movw	r0, #56856	; 0xde18
200053a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200053a4:	f000 fa1a 	bl	200057dc <MSS_UART_isr>
200053a8:	46bd      	mov	sp, r7
200053aa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200053ae:	4685      	mov	sp, r0
200053b0:	4770      	bx	lr
200053b2:	bf00      	nop

200053b4 <UART1_IRQHandler>:
200053b4:	4668      	mov	r0, sp
200053b6:	f020 0107 	bic.w	r1, r0, #7
200053ba:	468d      	mov	sp, r1
200053bc:	b589      	push	{r0, r3, r7, lr}
200053be:	af00      	add	r7, sp, #0
200053c0:	f64d 50d8 	movw	r0, #56792	; 0xddd8
200053c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200053c8:	f000 fa08 	bl	200057dc <MSS_UART_isr>
200053cc:	46bd      	mov	sp, r7
200053ce:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200053d2:	4685      	mov	sp, r0
200053d4:	4770      	bx	lr
200053d6:	bf00      	nop

200053d8 <config_baud_divisors>:
200053d8:	b580      	push	{r7, lr}
200053da:	b088      	sub	sp, #32
200053dc:	af00      	add	r7, sp, #0
200053de:	6078      	str	r0, [r7, #4]
200053e0:	6039      	str	r1, [r7, #0]
200053e2:	687a      	ldr	r2, [r7, #4]
200053e4:	f64d 6318 	movw	r3, #56856	; 0xde18
200053e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053ec:	429a      	cmp	r2, r3
200053ee:	d007      	beq.n	20005400 <config_baud_divisors+0x28>
200053f0:	687a      	ldr	r2, [r7, #4]
200053f2:	f64d 53d8 	movw	r3, #56792	; 0xddd8
200053f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053fa:	429a      	cmp	r2, r3
200053fc:	d000      	beq.n	20005400 <config_baud_divisors+0x28>
200053fe:	be00      	bkpt	0x0000
20005400:	687a      	ldr	r2, [r7, #4]
20005402:	f64d 6318 	movw	r3, #56856	; 0xde18
20005406:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000540a:	429a      	cmp	r2, r3
2000540c:	d007      	beq.n	2000541e <config_baud_divisors+0x46>
2000540e:	687a      	ldr	r2, [r7, #4]
20005410:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005414:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005418:	429a      	cmp	r2, r3
2000541a:	f040 80a4 	bne.w	20005566 <config_baud_divisors+0x18e>
2000541e:	687b      	ldr	r3, [r7, #4]
20005420:	683a      	ldr	r2, [r7, #0]
20005422:	609a      	str	r2, [r3, #8]
20005424:	f001 fbca 	bl	20006bbc <SystemCoreClockUpdate>
20005428:	687a      	ldr	r2, [r7, #4]
2000542a:	f64d 6318 	movw	r3, #56856	; 0xde18
2000542e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005432:	429a      	cmp	r2, r3
20005434:	d106      	bne.n	20005444 <config_baud_divisors+0x6c>
20005436:	f247 3340 	movw	r3, #29504	; 0x7340
2000543a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000543e:	681b      	ldr	r3, [r3, #0]
20005440:	61fb      	str	r3, [r7, #28]
20005442:	e005      	b.n	20005450 <config_baud_divisors+0x78>
20005444:	f247 3344 	movw	r3, #29508	; 0x7344
20005448:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000544c:	681b      	ldr	r3, [r3, #0]
2000544e:	61fb      	str	r3, [r7, #28]
20005450:	69fb      	ldr	r3, [r7, #28]
20005452:	ea4f 02c3 	mov.w	r2, r3, lsl #3
20005456:	683b      	ldr	r3, [r7, #0]
20005458:	fbb2 f3f3 	udiv	r3, r2, r3
2000545c:	617b      	str	r3, [r7, #20]
2000545e:	697b      	ldr	r3, [r7, #20]
20005460:	ea4f 0353 	mov.w	r3, r3, lsr #1
20005464:	613b      	str	r3, [r7, #16]
20005466:	693b      	ldr	r3, [r7, #16]
20005468:	ea4f 1393 	mov.w	r3, r3, lsr #6
2000546c:	60fb      	str	r3, [r7, #12]
2000546e:	68fb      	ldr	r3, [r7, #12]
20005470:	ea4f 1383 	mov.w	r3, r3, lsl #6
20005474:	693a      	ldr	r2, [r7, #16]
20005476:	ebc3 0302 	rsb	r3, r3, r2
2000547a:	61bb      	str	r3, [r7, #24]
2000547c:	68fb      	ldr	r3, [r7, #12]
2000547e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20005482:	697a      	ldr	r2, [r7, #20]
20005484:	ebc3 0202 	rsb	r2, r3, r2
20005488:	69bb      	ldr	r3, [r7, #24]
2000548a:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000548e:	ebc3 0302 	rsb	r3, r3, r2
20005492:	69ba      	ldr	r2, [r7, #24]
20005494:	4413      	add	r3, r2
20005496:	61bb      	str	r3, [r7, #24]
20005498:	68fa      	ldr	r2, [r7, #12]
2000549a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000549e:	429a      	cmp	r2, r3
200054a0:	d900      	bls.n	200054a4 <config_baud_divisors+0xcc>
200054a2:	be00      	bkpt	0x0000
200054a4:	68fa      	ldr	r2, [r7, #12]
200054a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
200054aa:	429a      	cmp	r2, r3
200054ac:	d85b      	bhi.n	20005566 <config_baud_divisors+0x18e>
200054ae:	68fb      	ldr	r3, [r7, #12]
200054b0:	2b01      	cmp	r3, #1
200054b2:	d931      	bls.n	20005518 <config_baud_divisors+0x140>
200054b4:	687b      	ldr	r3, [r7, #4]
200054b6:	681b      	ldr	r3, [r3, #0]
200054b8:	f103 030c 	add.w	r3, r3, #12
200054bc:	4618      	mov	r0, r3
200054be:	f04f 0107 	mov.w	r1, #7
200054c2:	f7ff fd83 	bl	20004fcc <set_bit_reg8>
200054c6:	687b      	ldr	r3, [r7, #4]
200054c8:	681b      	ldr	r3, [r3, #0]
200054ca:	68fa      	ldr	r2, [r7, #12]
200054cc:	ea4f 2212 	mov.w	r2, r2, lsr #8
200054d0:	b2d2      	uxtb	r2, r2
200054d2:	711a      	strb	r2, [r3, #4]
200054d4:	687b      	ldr	r3, [r7, #4]
200054d6:	681b      	ldr	r3, [r3, #0]
200054d8:	68fa      	ldr	r2, [r7, #12]
200054da:	b2d2      	uxtb	r2, r2
200054dc:	701a      	strb	r2, [r3, #0]
200054de:	687b      	ldr	r3, [r7, #4]
200054e0:	681b      	ldr	r3, [r3, #0]
200054e2:	f103 030c 	add.w	r3, r3, #12
200054e6:	4618      	mov	r0, r3
200054e8:	f04f 0107 	mov.w	r1, #7
200054ec:	f7ff fd8e 	bl	2000500c <clear_bit_reg8>
200054f0:	687b      	ldr	r3, [r7, #4]
200054f2:	681b      	ldr	r3, [r3, #0]
200054f4:	f103 0330 	add.w	r3, r3, #48	; 0x30
200054f8:	4618      	mov	r0, r3
200054fa:	f04f 0107 	mov.w	r1, #7
200054fe:	f7ff fd65 	bl	20004fcc <set_bit_reg8>
20005502:	69bb      	ldr	r3, [r7, #24]
20005504:	2bff      	cmp	r3, #255	; 0xff
20005506:	d900      	bls.n	2000550a <config_baud_divisors+0x132>
20005508:	be00      	bkpt	0x0000
2000550a:	687b      	ldr	r3, [r7, #4]
2000550c:	681b      	ldr	r3, [r3, #0]
2000550e:	69ba      	ldr	r2, [r7, #24]
20005510:	b2d2      	uxtb	r2, r2
20005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
20005516:	e026      	b.n	20005566 <config_baud_divisors+0x18e>
20005518:	687b      	ldr	r3, [r7, #4]
2000551a:	681b      	ldr	r3, [r3, #0]
2000551c:	f103 030c 	add.w	r3, r3, #12
20005520:	4618      	mov	r0, r3
20005522:	f04f 0107 	mov.w	r1, #7
20005526:	f7ff fd51 	bl	20004fcc <set_bit_reg8>
2000552a:	687b      	ldr	r3, [r7, #4]
2000552c:	681b      	ldr	r3, [r3, #0]
2000552e:	68fa      	ldr	r2, [r7, #12]
20005530:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005534:	b2d2      	uxtb	r2, r2
20005536:	711a      	strb	r2, [r3, #4]
20005538:	687b      	ldr	r3, [r7, #4]
2000553a:	681b      	ldr	r3, [r3, #0]
2000553c:	68fa      	ldr	r2, [r7, #12]
2000553e:	b2d2      	uxtb	r2, r2
20005540:	701a      	strb	r2, [r3, #0]
20005542:	687b      	ldr	r3, [r7, #4]
20005544:	681b      	ldr	r3, [r3, #0]
20005546:	f103 030c 	add.w	r3, r3, #12
2000554a:	4618      	mov	r0, r3
2000554c:	f04f 0107 	mov.w	r1, #7
20005550:	f7ff fd5c 	bl	2000500c <clear_bit_reg8>
20005554:	687b      	ldr	r3, [r7, #4]
20005556:	681b      	ldr	r3, [r3, #0]
20005558:	f103 0330 	add.w	r3, r3, #48	; 0x30
2000555c:	4618      	mov	r0, r3
2000555e:	f04f 0107 	mov.w	r1, #7
20005562:	f7ff fd53 	bl	2000500c <clear_bit_reg8>
20005566:	f107 0720 	add.w	r7, r7, #32
2000556a:	46bd      	mov	sp, r7
2000556c:	bd80      	pop	{r7, pc}
2000556e:	bf00      	nop

20005570 <global_init>:
20005570:	b580      	push	{r7, lr}
20005572:	b084      	sub	sp, #16
20005574:	af00      	add	r7, sp, #0
20005576:	60f8      	str	r0, [r7, #12]
20005578:	60b9      	str	r1, [r7, #8]
2000557a:	4613      	mov	r3, r2
2000557c:	71fb      	strb	r3, [r7, #7]
2000557e:	68fa      	ldr	r2, [r7, #12]
20005580:	f64d 6318 	movw	r3, #56856	; 0xde18
20005584:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005588:	429a      	cmp	r2, r3
2000558a:	d007      	beq.n	2000559c <global_init+0x2c>
2000558c:	68fa      	ldr	r2, [r7, #12]
2000558e:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005592:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005596:	429a      	cmp	r2, r3
20005598:	d000      	beq.n	2000559c <global_init+0x2c>
2000559a:	be00      	bkpt	0x0000
2000559c:	68fa      	ldr	r2, [r7, #12]
2000559e:	f64d 6318 	movw	r3, #56856	; 0xde18
200055a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055a6:	429a      	cmp	r2, r3
200055a8:	d124      	bne.n	200055f4 <global_init+0x84>
200055aa:	68fb      	ldr	r3, [r7, #12]
200055ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
200055b0:	601a      	str	r2, [r3, #0]
200055b2:	68fb      	ldr	r3, [r7, #12]
200055b4:	f04f 020a 	mov.w	r2, #10
200055b8:	711a      	strb	r2, [r3, #4]
200055ba:	f248 0300 	movw	r3, #32768	; 0x8000
200055be:	f2c4 0303 	movt	r3, #16387	; 0x4003
200055c2:	f248 0200 	movw	r2, #32768	; 0x8000
200055c6:	f2c4 0203 	movt	r2, #16387	; 0x4003
200055ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
200055cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
200055d0:	649a      	str	r2, [r3, #72]	; 0x48
200055d2:	f04f 000a 	mov.w	r0, #10
200055d6:	f7ff fcdb 	bl	20004f90 <NVIC_ClearPendingIRQ>
200055da:	f248 0300 	movw	r3, #32768	; 0x8000
200055de:	f2c4 0303 	movt	r3, #16387	; 0x4003
200055e2:	f248 0200 	movw	r2, #32768	; 0x8000
200055e6:	f2c4 0203 	movt	r2, #16387	; 0x4003
200055ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
200055ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
200055f0:	649a      	str	r2, [r3, #72]	; 0x48
200055f2:	e025      	b.n	20005640 <global_init+0xd0>
200055f4:	68fa      	ldr	r2, [r7, #12]
200055f6:	f240 0300 	movw	r3, #0
200055fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
200055fe:	6013      	str	r3, [r2, #0]
20005600:	68fb      	ldr	r3, [r7, #12]
20005602:	f04f 020b 	mov.w	r2, #11
20005606:	711a      	strb	r2, [r3, #4]
20005608:	f248 0300 	movw	r3, #32768	; 0x8000
2000560c:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005610:	f248 0200 	movw	r2, #32768	; 0x8000
20005614:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005618:	6c92      	ldr	r2, [r2, #72]	; 0x48
2000561a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2000561e:	649a      	str	r2, [r3, #72]	; 0x48
20005620:	f04f 000b 	mov.w	r0, #11
20005624:	f7ff fcb4 	bl	20004f90 <NVIC_ClearPendingIRQ>
20005628:	f248 0300 	movw	r3, #32768	; 0x8000
2000562c:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005630:	f248 0200 	movw	r2, #32768	; 0x8000
20005634:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005638:	6c92      	ldr	r2, [r2, #72]	; 0x48
2000563a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2000563e:	649a      	str	r2, [r3, #72]	; 0x48
20005640:	68fb      	ldr	r3, [r7, #12]
20005642:	681b      	ldr	r3, [r3, #0]
20005644:	f04f 0200 	mov.w	r2, #0
20005648:	711a      	strb	r2, [r3, #4]
2000564a:	68fb      	ldr	r3, [r7, #12]
2000564c:	681b      	ldr	r3, [r3, #0]
2000564e:	f04f 0200 	mov.w	r2, #0
20005652:	721a      	strb	r2, [r3, #8]
20005654:	68fb      	ldr	r3, [r7, #12]
20005656:	681b      	ldr	r3, [r3, #0]
20005658:	f103 0308 	add.w	r3, r3, #8
2000565c:	4618      	mov	r0, r3
2000565e:	f04f 0101 	mov.w	r1, #1
20005662:	f7ff fcb3 	bl	20004fcc <set_bit_reg8>
20005666:	68fb      	ldr	r3, [r7, #12]
20005668:	681b      	ldr	r3, [r3, #0]
2000566a:	f103 0308 	add.w	r3, r3, #8
2000566e:	4618      	mov	r0, r3
20005670:	f04f 0102 	mov.w	r1, #2
20005674:	f7ff fcaa 	bl	20004fcc <set_bit_reg8>
20005678:	68fb      	ldr	r3, [r7, #12]
2000567a:	681b      	ldr	r3, [r3, #0]
2000567c:	f103 0308 	add.w	r3, r3, #8
20005680:	4618      	mov	r0, r3
20005682:	f04f 0100 	mov.w	r1, #0
20005686:	f7ff fca1 	bl	20004fcc <set_bit_reg8>
2000568a:	68fb      	ldr	r3, [r7, #12]
2000568c:	681b      	ldr	r3, [r3, #0]
2000568e:	f103 0310 	add.w	r3, r3, #16
20005692:	4618      	mov	r0, r3
20005694:	f04f 0104 	mov.w	r1, #4
20005698:	f7ff fcb8 	bl	2000500c <clear_bit_reg8>
2000569c:	68fb      	ldr	r3, [r7, #12]
2000569e:	681b      	ldr	r3, [r3, #0]
200056a0:	f103 0310 	add.w	r3, r3, #16
200056a4:	4618      	mov	r0, r3
200056a6:	f04f 0105 	mov.w	r1, #5
200056aa:	f7ff fcaf 	bl	2000500c <clear_bit_reg8>
200056ae:	68fb      	ldr	r3, [r7, #12]
200056b0:	681b      	ldr	r3, [r3, #0]
200056b2:	f103 0334 	add.w	r3, r3, #52	; 0x34
200056b6:	4618      	mov	r0, r3
200056b8:	f04f 0101 	mov.w	r1, #1
200056bc:	f7ff fca6 	bl	2000500c <clear_bit_reg8>
200056c0:	68fb      	ldr	r3, [r7, #12]
200056c2:	681b      	ldr	r3, [r3, #0]
200056c4:	f103 0334 	add.w	r3, r3, #52	; 0x34
200056c8:	4618      	mov	r0, r3
200056ca:	f04f 0100 	mov.w	r1, #0
200056ce:	f7ff fc9d 	bl	2000500c <clear_bit_reg8>
200056d2:	68fb      	ldr	r3, [r7, #12]
200056d4:	681b      	ldr	r3, [r3, #0]
200056d6:	f103 0338 	add.w	r3, r3, #56	; 0x38
200056da:	4618      	mov	r0, r3
200056dc:	f04f 0101 	mov.w	r1, #1
200056e0:	f7ff fc94 	bl	2000500c <clear_bit_reg8>
200056e4:	68fb      	ldr	r3, [r7, #12]
200056e6:	681b      	ldr	r3, [r3, #0]
200056e8:	f103 0330 	add.w	r3, r3, #48	; 0x30
200056ec:	4618      	mov	r0, r3
200056ee:	f04f 0105 	mov.w	r1, #5
200056f2:	f7ff fc8b 	bl	2000500c <clear_bit_reg8>
200056f6:	68fb      	ldr	r3, [r7, #12]
200056f8:	681b      	ldr	r3, [r3, #0]
200056fa:	f103 0330 	add.w	r3, r3, #48	; 0x30
200056fe:	4618      	mov	r0, r3
20005700:	f04f 0106 	mov.w	r1, #6
20005704:	f7ff fc82 	bl	2000500c <clear_bit_reg8>
20005708:	68fb      	ldr	r3, [r7, #12]
2000570a:	681b      	ldr	r3, [r3, #0]
2000570c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005710:	4618      	mov	r0, r3
20005712:	f04f 0107 	mov.w	r1, #7
20005716:	f7ff fc79 	bl	2000500c <clear_bit_reg8>
2000571a:	68fb      	ldr	r3, [r7, #12]
2000571c:	681b      	ldr	r3, [r3, #0]
2000571e:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005722:	4618      	mov	r0, r3
20005724:	f04f 0103 	mov.w	r1, #3
20005728:	f7ff fc70 	bl	2000500c <clear_bit_reg8>
2000572c:	68fb      	ldr	r3, [r7, #12]
2000572e:	681b      	ldr	r3, [r3, #0]
20005730:	f04f 0200 	mov.w	r2, #0
20005734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20005738:	68fb      	ldr	r3, [r7, #12]
2000573a:	681b      	ldr	r3, [r3, #0]
2000573c:	f04f 0200 	mov.w	r2, #0
20005740:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
20005744:	68fb      	ldr	r3, [r7, #12]
20005746:	681b      	ldr	r3, [r3, #0]
20005748:	f04f 0200 	mov.w	r2, #0
2000574c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
20005750:	68f8      	ldr	r0, [r7, #12]
20005752:	68b9      	ldr	r1, [r7, #8]
20005754:	f7ff fe40 	bl	200053d8 <config_baud_divisors>
20005758:	68fb      	ldr	r3, [r7, #12]
2000575a:	681b      	ldr	r3, [r3, #0]
2000575c:	79fa      	ldrb	r2, [r7, #7]
2000575e:	731a      	strb	r2, [r3, #12]
20005760:	68fb      	ldr	r3, [r7, #12]
20005762:	68ba      	ldr	r2, [r7, #8]
20005764:	609a      	str	r2, [r3, #8]
20005766:	68fb      	ldr	r3, [r7, #12]
20005768:	79fa      	ldrb	r2, [r7, #7]
2000576a:	731a      	strb	r2, [r3, #12]
2000576c:	68fb      	ldr	r3, [r7, #12]
2000576e:	f04f 0200 	mov.w	r2, #0
20005772:	615a      	str	r2, [r3, #20]
20005774:	68fb      	ldr	r3, [r7, #12]
20005776:	f04f 0200 	mov.w	r2, #0
2000577a:	611a      	str	r2, [r3, #16]
2000577c:	68fb      	ldr	r3, [r7, #12]
2000577e:	f04f 0200 	mov.w	r2, #0
20005782:	619a      	str	r2, [r3, #24]
20005784:	68fb      	ldr	r3, [r7, #12]
20005786:	f04f 0200 	mov.w	r2, #0
2000578a:	621a      	str	r2, [r3, #32]
2000578c:	68fb      	ldr	r3, [r7, #12]
2000578e:	f04f 0200 	mov.w	r2, #0
20005792:	625a      	str	r2, [r3, #36]	; 0x24
20005794:	68fb      	ldr	r3, [r7, #12]
20005796:	f04f 0200 	mov.w	r2, #0
2000579a:	61da      	str	r2, [r3, #28]
2000579c:	68fb      	ldr	r3, [r7, #12]
2000579e:	f04f 0200 	mov.w	r2, #0
200057a2:	629a      	str	r2, [r3, #40]	; 0x28
200057a4:	68fb      	ldr	r3, [r7, #12]
200057a6:	f04f 0200 	mov.w	r2, #0
200057aa:	62da      	str	r2, [r3, #44]	; 0x2c
200057ac:	68fb      	ldr	r3, [r7, #12]
200057ae:	f04f 0200 	mov.w	r2, #0
200057b2:	631a      	str	r2, [r3, #48]	; 0x30
200057b4:	68fb      	ldr	r3, [r7, #12]
200057b6:	f04f 0200 	mov.w	r2, #0
200057ba:	635a      	str	r2, [r3, #52]	; 0x34
200057bc:	68fb      	ldr	r3, [r7, #12]
200057be:	f04f 0200 	mov.w	r2, #0
200057c2:	639a      	str	r2, [r3, #56]	; 0x38
200057c4:	68fb      	ldr	r3, [r7, #12]
200057c6:	f04f 0200 	mov.w	r2, #0
200057ca:	63da      	str	r2, [r3, #60]	; 0x3c
200057cc:	68fb      	ldr	r3, [r7, #12]
200057ce:	f04f 0200 	mov.w	r2, #0
200057d2:	735a      	strb	r2, [r3, #13]
200057d4:	f107 0710 	add.w	r7, r7, #16
200057d8:	46bd      	mov	sp, r7
200057da:	bd80      	pop	{r7, pc}

200057dc <MSS_UART_isr>:
200057dc:	b580      	push	{r7, lr}
200057de:	b084      	sub	sp, #16
200057e0:	af00      	add	r7, sp, #0
200057e2:	6078      	str	r0, [r7, #4]
200057e4:	687a      	ldr	r2, [r7, #4]
200057e6:	f64d 6318 	movw	r3, #56856	; 0xde18
200057ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200057ee:	429a      	cmp	r2, r3
200057f0:	d007      	beq.n	20005802 <MSS_UART_isr+0x26>
200057f2:	687a      	ldr	r2, [r7, #4]
200057f4:	f64d 53d8 	movw	r3, #56792	; 0xddd8
200057f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200057fc:	429a      	cmp	r2, r3
200057fe:	d000      	beq.n	20005802 <MSS_UART_isr+0x26>
20005800:	be00      	bkpt	0x0000
20005802:	687a      	ldr	r2, [r7, #4]
20005804:	f64d 6318 	movw	r3, #56856	; 0xde18
20005808:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000580c:	429a      	cmp	r2, r3
2000580e:	d007      	beq.n	20005820 <MSS_UART_isr+0x44>
20005810:	687a      	ldr	r2, [r7, #4]
20005812:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005816:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000581a:	429a      	cmp	r2, r3
2000581c:	f040 80ef 	bne.w	200059fe <MSS_UART_isr+0x222>
20005820:	687b      	ldr	r3, [r7, #4]
20005822:	681b      	ldr	r3, [r3, #0]
20005824:	7a1b      	ldrb	r3, [r3, #8]
20005826:	b2db      	uxtb	r3, r3
20005828:	f003 030f 	and.w	r3, r3, #15
2000582c:	73fb      	strb	r3, [r7, #15]
2000582e:	7bfb      	ldrb	r3, [r7, #15]
20005830:	2b0c      	cmp	r3, #12
20005832:	f200 80d7 	bhi.w	200059e4 <MSS_UART_isr+0x208>
20005836:	a201      	add	r2, pc, #4	; (adr r2, 2000583c <MSS_UART_isr+0x60>)
20005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000583c:	20005871 	.word	0x20005871
20005840:	200059e5 	.word	0x200059e5
20005844:	2000588f 	.word	0x2000588f
20005848:	200058e9 	.word	0x200058e9
2000584c:	200058ad 	.word	0x200058ad
20005850:	200059e5 	.word	0x200059e5
20005854:	200058cb 	.word	0x200058cb
20005858:	200059e5 	.word	0x200059e5
2000585c:	200059e5 	.word	0x200059e5
20005860:	200059e5 	.word	0x200059e5
20005864:	200059e5 	.word	0x200059e5
20005868:	200059e5 	.word	0x200059e5
2000586c:	200058ad 	.word	0x200058ad
20005870:	687b      	ldr	r3, [r7, #4]
20005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005874:	2b00      	cmp	r3, #0
20005876:	d100      	bne.n	2000587a <MSS_UART_isr+0x9e>
20005878:	be00      	bkpt	0x0000
2000587a:	687b      	ldr	r3, [r7, #4]
2000587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000587e:	2b00      	cmp	r3, #0
20005880:	f000 80b2 	beq.w	200059e8 <MSS_UART_isr+0x20c>
20005884:	687b      	ldr	r3, [r7, #4]
20005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005888:	6878      	ldr	r0, [r7, #4]
2000588a:	4798      	blx	r3
2000588c:	e0b7      	b.n	200059fe <MSS_UART_isr+0x222>
2000588e:	687b      	ldr	r3, [r7, #4]
20005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005892:	2b00      	cmp	r3, #0
20005894:	d100      	bne.n	20005898 <MSS_UART_isr+0xbc>
20005896:	be00      	bkpt	0x0000
20005898:	687b      	ldr	r3, [r7, #4]
2000589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000589c:	2b00      	cmp	r3, #0
2000589e:	f000 80a5 	beq.w	200059ec <MSS_UART_isr+0x210>
200058a2:	687b      	ldr	r3, [r7, #4]
200058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200058a6:	6878      	ldr	r0, [r7, #4]
200058a8:	4798      	blx	r3
200058aa:	e0a8      	b.n	200059fe <MSS_UART_isr+0x222>
200058ac:	687b      	ldr	r3, [r7, #4]
200058ae:	6a1b      	ldr	r3, [r3, #32]
200058b0:	2b00      	cmp	r3, #0
200058b2:	d100      	bne.n	200058b6 <MSS_UART_isr+0xda>
200058b4:	be00      	bkpt	0x0000
200058b6:	687b      	ldr	r3, [r7, #4]
200058b8:	6a1b      	ldr	r3, [r3, #32]
200058ba:	2b00      	cmp	r3, #0
200058bc:	f000 8098 	beq.w	200059f0 <MSS_UART_isr+0x214>
200058c0:	687b      	ldr	r3, [r7, #4]
200058c2:	6a1b      	ldr	r3, [r3, #32]
200058c4:	6878      	ldr	r0, [r7, #4]
200058c6:	4798      	blx	r3
200058c8:	e099      	b.n	200059fe <MSS_UART_isr+0x222>
200058ca:	687b      	ldr	r3, [r7, #4]
200058cc:	69db      	ldr	r3, [r3, #28]
200058ce:	2b00      	cmp	r3, #0
200058d0:	d100      	bne.n	200058d4 <MSS_UART_isr+0xf8>
200058d2:	be00      	bkpt	0x0000
200058d4:	687b      	ldr	r3, [r7, #4]
200058d6:	69db      	ldr	r3, [r3, #28]
200058d8:	2b00      	cmp	r3, #0
200058da:	f000 808b 	beq.w	200059f4 <MSS_UART_isr+0x218>
200058de:	687b      	ldr	r3, [r7, #4]
200058e0:	69db      	ldr	r3, [r3, #28]
200058e2:	6878      	ldr	r0, [r7, #4]
200058e4:	4798      	blx	r3
200058e6:	e08a      	b.n	200059fe <MSS_UART_isr+0x222>
200058e8:	687b      	ldr	r3, [r7, #4]
200058ea:	681b      	ldr	r3, [r3, #0]
200058ec:	f103 0328 	add.w	r3, r3, #40	; 0x28
200058f0:	4618      	mov	r0, r3
200058f2:	f04f 0100 	mov.w	r1, #0
200058f6:	f7ff fba9 	bl	2000504c <read_bit_reg8>
200058fa:	4603      	mov	r3, r0
200058fc:	2b00      	cmp	r3, #0
200058fe:	d00c      	beq.n	2000591a <MSS_UART_isr+0x13e>
20005900:	687b      	ldr	r3, [r7, #4]
20005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005904:	2b00      	cmp	r3, #0
20005906:	d100      	bne.n	2000590a <MSS_UART_isr+0x12e>
20005908:	be00      	bkpt	0x0000
2000590a:	687b      	ldr	r3, [r7, #4]
2000590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000590e:	2b00      	cmp	r3, #0
20005910:	d003      	beq.n	2000591a <MSS_UART_isr+0x13e>
20005912:	687b      	ldr	r3, [r7, #4]
20005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005916:	6878      	ldr	r0, [r7, #4]
20005918:	4798      	blx	r3
2000591a:	687b      	ldr	r3, [r7, #4]
2000591c:	681b      	ldr	r3, [r3, #0]
2000591e:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005922:	4618      	mov	r0, r3
20005924:	f04f 0101 	mov.w	r1, #1
20005928:	f7ff fb90 	bl	2000504c <read_bit_reg8>
2000592c:	4603      	mov	r3, r0
2000592e:	2b00      	cmp	r3, #0
20005930:	d00c      	beq.n	2000594c <MSS_UART_isr+0x170>
20005932:	687b      	ldr	r3, [r7, #4]
20005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005936:	2b00      	cmp	r3, #0
20005938:	d100      	bne.n	2000593c <MSS_UART_isr+0x160>
2000593a:	be00      	bkpt	0x0000
2000593c:	687b      	ldr	r3, [r7, #4]
2000593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005940:	2b00      	cmp	r3, #0
20005942:	d003      	beq.n	2000594c <MSS_UART_isr+0x170>
20005944:	687b      	ldr	r3, [r7, #4]
20005946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005948:	6878      	ldr	r0, [r7, #4]
2000594a:	4798      	blx	r3
2000594c:	687b      	ldr	r3, [r7, #4]
2000594e:	681b      	ldr	r3, [r3, #0]
20005950:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005954:	4618      	mov	r0, r3
20005956:	f04f 0102 	mov.w	r1, #2
2000595a:	f7ff fb77 	bl	2000504c <read_bit_reg8>
2000595e:	4603      	mov	r3, r0
20005960:	2b00      	cmp	r3, #0
20005962:	d00c      	beq.n	2000597e <MSS_UART_isr+0x1a2>
20005964:	687b      	ldr	r3, [r7, #4]
20005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005968:	2b00      	cmp	r3, #0
2000596a:	d100      	bne.n	2000596e <MSS_UART_isr+0x192>
2000596c:	be00      	bkpt	0x0000
2000596e:	687b      	ldr	r3, [r7, #4]
20005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005972:	2b00      	cmp	r3, #0
20005974:	d003      	beq.n	2000597e <MSS_UART_isr+0x1a2>
20005976:	687b      	ldr	r3, [r7, #4]
20005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000597a:	6878      	ldr	r0, [r7, #4]
2000597c:	4798      	blx	r3
2000597e:	687b      	ldr	r3, [r7, #4]
20005980:	681b      	ldr	r3, [r3, #0]
20005982:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005986:	4618      	mov	r0, r3
20005988:	f04f 0103 	mov.w	r1, #3
2000598c:	f7ff fb5e 	bl	2000504c <read_bit_reg8>
20005990:	4603      	mov	r3, r0
20005992:	2b00      	cmp	r3, #0
20005994:	d00c      	beq.n	200059b0 <MSS_UART_isr+0x1d4>
20005996:	687b      	ldr	r3, [r7, #4]
20005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000599a:	2b00      	cmp	r3, #0
2000599c:	d100      	bne.n	200059a0 <MSS_UART_isr+0x1c4>
2000599e:	be00      	bkpt	0x0000
200059a0:	687b      	ldr	r3, [r7, #4]
200059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200059a4:	2b00      	cmp	r3, #0
200059a6:	d003      	beq.n	200059b0 <MSS_UART_isr+0x1d4>
200059a8:	687b      	ldr	r3, [r7, #4]
200059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200059ac:	6878      	ldr	r0, [r7, #4]
200059ae:	4798      	blx	r3
200059b0:	687b      	ldr	r3, [r7, #4]
200059b2:	681b      	ldr	r3, [r3, #0]
200059b4:	f103 0328 	add.w	r3, r3, #40	; 0x28
200059b8:	4618      	mov	r0, r3
200059ba:	f04f 0104 	mov.w	r1, #4
200059be:	f7ff fb45 	bl	2000504c <read_bit_reg8>
200059c2:	4603      	mov	r3, r0
200059c4:	2b00      	cmp	r3, #0
200059c6:	d017      	beq.n	200059f8 <MSS_UART_isr+0x21c>
200059c8:	687b      	ldr	r3, [r7, #4]
200059ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200059cc:	2b00      	cmp	r3, #0
200059ce:	d100      	bne.n	200059d2 <MSS_UART_isr+0x1f6>
200059d0:	be00      	bkpt	0x0000
200059d2:	687b      	ldr	r3, [r7, #4]
200059d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200059d6:	2b00      	cmp	r3, #0
200059d8:	d010      	beq.n	200059fc <MSS_UART_isr+0x220>
200059da:	687b      	ldr	r3, [r7, #4]
200059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200059de:	6878      	ldr	r0, [r7, #4]
200059e0:	4798      	blx	r3
200059e2:	e00c      	b.n	200059fe <MSS_UART_isr+0x222>
200059e4:	be00      	bkpt	0x0000
200059e6:	e00a      	b.n	200059fe <MSS_UART_isr+0x222>
200059e8:	bf00      	nop
200059ea:	e008      	b.n	200059fe <MSS_UART_isr+0x222>
200059ec:	bf00      	nop
200059ee:	e006      	b.n	200059fe <MSS_UART_isr+0x222>
200059f0:	bf00      	nop
200059f2:	e004      	b.n	200059fe <MSS_UART_isr+0x222>
200059f4:	bf00      	nop
200059f6:	e002      	b.n	200059fe <MSS_UART_isr+0x222>
200059f8:	bf00      	nop
200059fa:	e000      	b.n	200059fe <MSS_UART_isr+0x222>
200059fc:	bf00      	nop
200059fe:	f107 0710 	add.w	r7, r7, #16
20005a02:	46bd      	mov	sp, r7
20005a04:	bd80      	pop	{r7, pc}
20005a06:	bf00      	nop

20005a08 <default_tx_handler>:
20005a08:	b580      	push	{r7, lr}
20005a0a:	b086      	sub	sp, #24
20005a0c:	af00      	add	r7, sp, #0
20005a0e:	6078      	str	r0, [r7, #4]
20005a10:	687a      	ldr	r2, [r7, #4]
20005a12:	f64d 6318 	movw	r3, #56856	; 0xde18
20005a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a1a:	429a      	cmp	r2, r3
20005a1c:	d007      	beq.n	20005a2e <default_tx_handler+0x26>
20005a1e:	687a      	ldr	r2, [r7, #4]
20005a20:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a28:	429a      	cmp	r2, r3
20005a2a:	d000      	beq.n	20005a2e <default_tx_handler+0x26>
20005a2c:	be00      	bkpt	0x0000
20005a2e:	687b      	ldr	r3, [r7, #4]
20005a30:	691b      	ldr	r3, [r3, #16]
20005a32:	2b00      	cmp	r3, #0
20005a34:	d100      	bne.n	20005a38 <default_tx_handler+0x30>
20005a36:	be00      	bkpt	0x0000
20005a38:	687b      	ldr	r3, [r7, #4]
20005a3a:	695b      	ldr	r3, [r3, #20]
20005a3c:	2b00      	cmp	r3, #0
20005a3e:	d100      	bne.n	20005a42 <default_tx_handler+0x3a>
20005a40:	be00      	bkpt	0x0000
20005a42:	687a      	ldr	r2, [r7, #4]
20005a44:	f64d 6318 	movw	r3, #56856	; 0xde18
20005a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a4c:	429a      	cmp	r2, r3
20005a4e:	d006      	beq.n	20005a5e <default_tx_handler+0x56>
20005a50:	687a      	ldr	r2, [r7, #4]
20005a52:	f64d 53d8 	movw	r3, #56792	; 0xddd8
20005a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a5a:	429a      	cmp	r2, r3
20005a5c:	d155      	bne.n	20005b0a <default_tx_handler+0x102>
20005a5e:	687b      	ldr	r3, [r7, #4]
20005a60:	691b      	ldr	r3, [r3, #16]
20005a62:	2b00      	cmp	r3, #0
20005a64:	d051      	beq.n	20005b0a <default_tx_handler+0x102>
20005a66:	687b      	ldr	r3, [r7, #4]
20005a68:	695b      	ldr	r3, [r3, #20]
20005a6a:	2b00      	cmp	r3, #0
20005a6c:	d04d      	beq.n	20005b0a <default_tx_handler+0x102>
20005a6e:	687b      	ldr	r3, [r7, #4]
20005a70:	681b      	ldr	r3, [r3, #0]
20005a72:	7d1b      	ldrb	r3, [r3, #20]
20005a74:	72fb      	strb	r3, [r7, #11]
20005a76:	687b      	ldr	r3, [r7, #4]
20005a78:	7b5a      	ldrb	r2, [r3, #13]
20005a7a:	7afb      	ldrb	r3, [r7, #11]
20005a7c:	ea42 0303 	orr.w	r3, r2, r3
20005a80:	b2da      	uxtb	r2, r3
20005a82:	687b      	ldr	r3, [r7, #4]
20005a84:	735a      	strb	r2, [r3, #13]
20005a86:	7afb      	ldrb	r3, [r7, #11]
20005a88:	f003 0320 	and.w	r3, r3, #32
20005a8c:	2b00      	cmp	r3, #0
20005a8e:	d029      	beq.n	20005ae4 <default_tx_handler+0xdc>
20005a90:	f04f 0310 	mov.w	r3, #16
20005a94:	613b      	str	r3, [r7, #16]
20005a96:	687b      	ldr	r3, [r7, #4]
20005a98:	695a      	ldr	r2, [r3, #20]
20005a9a:	687b      	ldr	r3, [r7, #4]
20005a9c:	699b      	ldr	r3, [r3, #24]
20005a9e:	ebc3 0302 	rsb	r3, r3, r2
20005aa2:	617b      	str	r3, [r7, #20]
20005aa4:	697b      	ldr	r3, [r7, #20]
20005aa6:	2b0f      	cmp	r3, #15
20005aa8:	d801      	bhi.n	20005aae <default_tx_handler+0xa6>
20005aaa:	697b      	ldr	r3, [r7, #20]
20005aac:	613b      	str	r3, [r7, #16]
20005aae:	f04f 0300 	mov.w	r3, #0
20005ab2:	60fb      	str	r3, [r7, #12]
20005ab4:	e012      	b.n	20005adc <default_tx_handler+0xd4>
20005ab6:	687b      	ldr	r3, [r7, #4]
20005ab8:	681b      	ldr	r3, [r3, #0]
20005aba:	687a      	ldr	r2, [r7, #4]
20005abc:	6911      	ldr	r1, [r2, #16]
20005abe:	687a      	ldr	r2, [r7, #4]
20005ac0:	6992      	ldr	r2, [r2, #24]
20005ac2:	440a      	add	r2, r1
20005ac4:	7812      	ldrb	r2, [r2, #0]
20005ac6:	701a      	strb	r2, [r3, #0]
20005ac8:	687b      	ldr	r3, [r7, #4]
20005aca:	699b      	ldr	r3, [r3, #24]
20005acc:	f103 0201 	add.w	r2, r3, #1
20005ad0:	687b      	ldr	r3, [r7, #4]
20005ad2:	619a      	str	r2, [r3, #24]
20005ad4:	68fb      	ldr	r3, [r7, #12]
20005ad6:	f103 0301 	add.w	r3, r3, #1
20005ada:	60fb      	str	r3, [r7, #12]
20005adc:	68fa      	ldr	r2, [r7, #12]
20005ade:	693b      	ldr	r3, [r7, #16]
20005ae0:	429a      	cmp	r2, r3
20005ae2:	d3e8      	bcc.n	20005ab6 <default_tx_handler+0xae>
20005ae4:	687b      	ldr	r3, [r7, #4]
20005ae6:	699a      	ldr	r2, [r3, #24]
20005ae8:	687b      	ldr	r3, [r7, #4]
20005aea:	695b      	ldr	r3, [r3, #20]
20005aec:	429a      	cmp	r2, r3
20005aee:	d10c      	bne.n	20005b0a <default_tx_handler+0x102>
20005af0:	687b      	ldr	r3, [r7, #4]
20005af2:	f04f 0200 	mov.w	r2, #0
20005af6:	615a      	str	r2, [r3, #20]
20005af8:	687b      	ldr	r3, [r7, #4]
20005afa:	681b      	ldr	r3, [r3, #0]
20005afc:	f103 0304 	add.w	r3, r3, #4
20005b00:	4618      	mov	r0, r3
20005b02:	f04f 0101 	mov.w	r1, #1
20005b06:	f7ff fa81 	bl	2000500c <clear_bit_reg8>
20005b0a:	f107 0718 	add.w	r7, r7, #24
20005b0e:	46bd      	mov	sp, r7
20005b10:	bd80      	pop	{r7, pc}
20005b12:	bf00      	nop

20005b14 <I2C_init>:
20005b14:	b580      	push	{r7, lr}
20005b16:	b086      	sub	sp, #24
20005b18:	af00      	add	r7, sp, #0
20005b1a:	60f8      	str	r0, [r7, #12]
20005b1c:	60b9      	str	r1, [r7, #8]
20005b1e:	71fa      	strb	r2, [r7, #7]
20005b20:	71bb      	strb	r3, [r7, #6]
20005b22:	79bb      	ldrb	r3, [r7, #6]
20005b24:	617b      	str	r3, [r7, #20]
20005b26:	f001 f9e9 	bl	20006efc <HAL_disable_interrupts>
20005b2a:	4603      	mov	r3, r0
20005b2c:	613b      	str	r3, [r7, #16]
20005b2e:	68f8      	ldr	r0, [r7, #12]
20005b30:	f04f 0100 	mov.w	r1, #0
20005b34:	f04f 026c 	mov.w	r2, #108	; 0x6c
20005b38:	f001 fb20 	bl	2000717c <memset>
20005b3c:	68fb      	ldr	r3, [r7, #12]
20005b3e:	68ba      	ldr	r2, [r7, #8]
20005b40:	601a      	str	r2, [r3, #0]
20005b42:	79fb      	ldrb	r3, [r7, #7]
20005b44:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005b48:	68fb      	ldr	r3, [r7, #12]
20005b4a:	605a      	str	r2, [r3, #4]
20005b4c:	68fb      	ldr	r3, [r7, #12]
20005b4e:	681b      	ldr	r3, [r3, #0]
20005b50:	4618      	mov	r0, r3
20005b52:	f04f 0106 	mov.w	r1, #6
20005b56:	f04f 0240 	mov.w	r2, #64	; 0x40
20005b5a:	f04f 0300 	mov.w	r3, #0
20005b5e:	f001 fa08 	bl	20006f72 <HW_set_8bit_reg_field>
20005b62:	68fb      	ldr	r3, [r7, #12]
20005b64:	681b      	ldr	r3, [r3, #0]
20005b66:	4618      	mov	r0, r3
20005b68:	f04f 0106 	mov.w	r1, #6
20005b6c:	f04f 0240 	mov.w	r2, #64	; 0x40
20005b70:	f04f 0301 	mov.w	r3, #1
20005b74:	f001 f9fd 	bl	20006f72 <HW_set_8bit_reg_field>
20005b78:	68fb      	ldr	r3, [r7, #12]
20005b7a:	681a      	ldr	r2, [r3, #0]
20005b7c:	697b      	ldr	r3, [r7, #20]
20005b7e:	ea4f 0393 	mov.w	r3, r3, lsr #2
20005b82:	f003 0301 	and.w	r3, r3, #1
20005b86:	4610      	mov	r0, r2
20005b88:	f04f 0107 	mov.w	r1, #7
20005b8c:	f04f 0280 	mov.w	r2, #128	; 0x80
20005b90:	f001 f9ef 	bl	20006f72 <HW_set_8bit_reg_field>
20005b94:	68fb      	ldr	r3, [r7, #12]
20005b96:	681a      	ldr	r2, [r3, #0]
20005b98:	697b      	ldr	r3, [r7, #20]
20005b9a:	ea4f 0353 	mov.w	r3, r3, lsr #1
20005b9e:	f003 0301 	and.w	r3, r3, #1
20005ba2:	4610      	mov	r0, r2
20005ba4:	f04f 0101 	mov.w	r1, #1
20005ba8:	f04f 0202 	mov.w	r2, #2
20005bac:	f001 f9e1 	bl	20006f72 <HW_set_8bit_reg_field>
20005bb0:	68fb      	ldr	r3, [r7, #12]
20005bb2:	681a      	ldr	r2, [r3, #0]
20005bb4:	697b      	ldr	r3, [r7, #20]
20005bb6:	f003 0301 	and.w	r3, r3, #1
20005bba:	4610      	mov	r0, r2
20005bbc:	f04f 0100 	mov.w	r1, #0
20005bc0:	f04f 0201 	mov.w	r2, #1
20005bc4:	f001 f9d5 	bl	20006f72 <HW_set_8bit_reg_field>
20005bc8:	68fb      	ldr	r3, [r7, #12]
20005bca:	681b      	ldr	r3, [r3, #0]
20005bcc:	f103 020c 	add.w	r2, r3, #12
20005bd0:	68fb      	ldr	r3, [r7, #12]
20005bd2:	685b      	ldr	r3, [r3, #4]
20005bd4:	4610      	mov	r0, r2
20005bd6:	4619      	mov	r1, r3
20005bd8:	f001 f9c7 	bl	20006f6a <HW_set_8bit_reg>
20005bdc:	68fb      	ldr	r3, [r7, #12]
20005bde:	681b      	ldr	r3, [r3, #0]
20005be0:	f103 021c 	add.w	r2, r3, #28
20005be4:	68fb      	ldr	r3, [r7, #12]
20005be6:	685b      	ldr	r3, [r3, #4]
20005be8:	4610      	mov	r0, r2
20005bea:	4619      	mov	r1, r3
20005bec:	f001 f9bd 	bl	20006f6a <HW_set_8bit_reg>
20005bf0:	6938      	ldr	r0, [r7, #16]
20005bf2:	f001 f987 	bl	20006f04 <HAL_restore_interrupts>
20005bf6:	f107 0718 	add.w	r7, r7, #24
20005bfa:	46bd      	mov	sp, r7
20005bfc:	bd80      	pop	{r7, pc}
20005bfe:	bf00      	nop

20005c00 <I2C_write>:
20005c00:	b580      	push	{r7, lr}
20005c02:	b086      	sub	sp, #24
20005c04:	af00      	add	r7, sp, #0
20005c06:	60f8      	str	r0, [r7, #12]
20005c08:	607a      	str	r2, [r7, #4]
20005c0a:	460a      	mov	r2, r1
20005c0c:	72fa      	strb	r2, [r7, #11]
20005c0e:	807b      	strh	r3, [r7, #2]
20005c10:	f001 f974 	bl	20006efc <HAL_disable_interrupts>
20005c14:	4603      	mov	r3, r0
20005c16:	617b      	str	r3, [r7, #20]
20005c18:	68fb      	ldr	r3, [r7, #12]
20005c1a:	7b1b      	ldrb	r3, [r3, #12]
20005c1c:	2b00      	cmp	r3, #0
20005c1e:	d103      	bne.n	20005c28 <I2C_write+0x28>
20005c20:	68fb      	ldr	r3, [r7, #12]
20005c22:	f04f 0201 	mov.w	r2, #1
20005c26:	731a      	strb	r2, [r3, #12]
20005c28:	68fb      	ldr	r3, [r7, #12]
20005c2a:	f04f 0201 	mov.w	r2, #1
20005c2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
20005c32:	7afb      	ldrb	r3, [r7, #11]
20005c34:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005c38:	68fb      	ldr	r3, [r7, #12]
20005c3a:	609a      	str	r2, [r3, #8]
20005c3c:	68fb      	ldr	r3, [r7, #12]
20005c3e:	f04f 0200 	mov.w	r2, #0
20005c42:	625a      	str	r2, [r3, #36]	; 0x24
20005c44:	68fb      	ldr	r3, [r7, #12]
20005c46:	687a      	ldr	r2, [r7, #4]
20005c48:	619a      	str	r2, [r3, #24]
20005c4a:	887a      	ldrh	r2, [r7, #2]
20005c4c:	68fb      	ldr	r3, [r7, #12]
20005c4e:	61da      	str	r2, [r3, #28]
20005c50:	68fb      	ldr	r3, [r7, #12]
20005c52:	f04f 0200 	mov.w	r2, #0
20005c56:	621a      	str	r2, [r3, #32]
20005c58:	68fb      	ldr	r3, [r7, #12]
20005c5a:	f04f 0201 	mov.w	r2, #1
20005c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005c62:	68fb      	ldr	r3, [r7, #12]
20005c64:	f897 2020 	ldrb.w	r2, [r7, #32]
20005c68:	751a      	strb	r2, [r3, #20]
20005c6a:	68fb      	ldr	r3, [r7, #12]
20005c6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005c70:	b2db      	uxtb	r3, r3
20005c72:	2b01      	cmp	r3, #1
20005c74:	d105      	bne.n	20005c82 <I2C_write+0x82>
20005c76:	68fb      	ldr	r3, [r7, #12]
20005c78:	f04f 0201 	mov.w	r2, #1
20005c7c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005c80:	e00a      	b.n	20005c98 <I2C_write+0x98>
20005c82:	68fb      	ldr	r3, [r7, #12]
20005c84:	681b      	ldr	r3, [r3, #0]
20005c86:	4618      	mov	r0, r3
20005c88:	f04f 0105 	mov.w	r1, #5
20005c8c:	f04f 0220 	mov.w	r2, #32
20005c90:	f04f 0301 	mov.w	r3, #1
20005c94:	f001 f96d 	bl	20006f72 <HW_set_8bit_reg_field>
20005c98:	68fb      	ldr	r3, [r7, #12]
20005c9a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005c9e:	2b01      	cmp	r3, #1
20005ca0:	d10a      	bne.n	20005cb8 <I2C_write+0xb8>
20005ca2:	68fb      	ldr	r3, [r7, #12]
20005ca4:	681b      	ldr	r3, [r3, #0]
20005ca6:	4618      	mov	r0, r3
20005ca8:	f04f 0103 	mov.w	r1, #3
20005cac:	f04f 0208 	mov.w	r2, #8
20005cb0:	f04f 0300 	mov.w	r3, #0
20005cb4:	f001 f95d 	bl	20006f72 <HW_set_8bit_reg_field>
20005cb8:	68fb      	ldr	r3, [r7, #12]
20005cba:	681b      	ldr	r3, [r3, #0]
20005cbc:	f103 0304 	add.w	r3, r3, #4
20005cc0:	4618      	mov	r0, r3
20005cc2:	f001 f954 	bl	20006f6e <HW_get_8bit_reg>
20005cc6:	4603      	mov	r3, r0
20005cc8:	74fb      	strb	r3, [r7, #19]
20005cca:	7cfb      	ldrb	r3, [r7, #19]
20005ccc:	b2db      	uxtb	r3, r3
20005cce:	74fb      	strb	r3, [r7, #19]
20005cd0:	68f8      	ldr	r0, [r7, #12]
20005cd2:	f000 fec9 	bl	20006a68 <I2C_enable_irq>
20005cd6:	6978      	ldr	r0, [r7, #20]
20005cd8:	f001 f914 	bl	20006f04 <HAL_restore_interrupts>
20005cdc:	f107 0718 	add.w	r7, r7, #24
20005ce0:	46bd      	mov	sp, r7
20005ce2:	bd80      	pop	{r7, pc}

20005ce4 <I2C_read>:
20005ce4:	b580      	push	{r7, lr}
20005ce6:	b086      	sub	sp, #24
20005ce8:	af00      	add	r7, sp, #0
20005cea:	60f8      	str	r0, [r7, #12]
20005cec:	607a      	str	r2, [r7, #4]
20005cee:	460a      	mov	r2, r1
20005cf0:	72fa      	strb	r2, [r7, #11]
20005cf2:	807b      	strh	r3, [r7, #2]
20005cf4:	f001 f902 	bl	20006efc <HAL_disable_interrupts>
20005cf8:	4603      	mov	r3, r0
20005cfa:	617b      	str	r3, [r7, #20]
20005cfc:	68fb      	ldr	r3, [r7, #12]
20005cfe:	7b1b      	ldrb	r3, [r3, #12]
20005d00:	2b00      	cmp	r3, #0
20005d02:	d103      	bne.n	20005d0c <I2C_read+0x28>
20005d04:	68fb      	ldr	r3, [r7, #12]
20005d06:	f04f 0202 	mov.w	r2, #2
20005d0a:	731a      	strb	r2, [r3, #12]
20005d0c:	68fb      	ldr	r3, [r7, #12]
20005d0e:	f04f 0202 	mov.w	r2, #2
20005d12:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
20005d16:	7afb      	ldrb	r3, [r7, #11]
20005d18:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005d1c:	68fb      	ldr	r3, [r7, #12]
20005d1e:	609a      	str	r2, [r3, #8]
20005d20:	68fb      	ldr	r3, [r7, #12]
20005d22:	f04f 0201 	mov.w	r2, #1
20005d26:	625a      	str	r2, [r3, #36]	; 0x24
20005d28:	68fb      	ldr	r3, [r7, #12]
20005d2a:	687a      	ldr	r2, [r7, #4]
20005d2c:	629a      	str	r2, [r3, #40]	; 0x28
20005d2e:	887a      	ldrh	r2, [r7, #2]
20005d30:	68fb      	ldr	r3, [r7, #12]
20005d32:	62da      	str	r2, [r3, #44]	; 0x2c
20005d34:	68fb      	ldr	r3, [r7, #12]
20005d36:	f04f 0200 	mov.w	r2, #0
20005d3a:	631a      	str	r2, [r3, #48]	; 0x30
20005d3c:	68fb      	ldr	r3, [r7, #12]
20005d3e:	f04f 0201 	mov.w	r2, #1
20005d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005d46:	68fb      	ldr	r3, [r7, #12]
20005d48:	f897 2020 	ldrb.w	r2, [r7, #32]
20005d4c:	751a      	strb	r2, [r3, #20]
20005d4e:	68fb      	ldr	r3, [r7, #12]
20005d50:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005d54:	b2db      	uxtb	r3, r3
20005d56:	2b01      	cmp	r3, #1
20005d58:	d105      	bne.n	20005d66 <I2C_read+0x82>
20005d5a:	68fb      	ldr	r3, [r7, #12]
20005d5c:	f04f 0201 	mov.w	r2, #1
20005d60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005d64:	e00a      	b.n	20005d7c <I2C_read+0x98>
20005d66:	68fb      	ldr	r3, [r7, #12]
20005d68:	681b      	ldr	r3, [r3, #0]
20005d6a:	4618      	mov	r0, r3
20005d6c:	f04f 0105 	mov.w	r1, #5
20005d70:	f04f 0220 	mov.w	r2, #32
20005d74:	f04f 0301 	mov.w	r3, #1
20005d78:	f001 f8fb 	bl	20006f72 <HW_set_8bit_reg_field>
20005d7c:	68fb      	ldr	r3, [r7, #12]
20005d7e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005d82:	2b01      	cmp	r3, #1
20005d84:	d10a      	bne.n	20005d9c <I2C_read+0xb8>
20005d86:	68fb      	ldr	r3, [r7, #12]
20005d88:	681b      	ldr	r3, [r3, #0]
20005d8a:	4618      	mov	r0, r3
20005d8c:	f04f 0103 	mov.w	r1, #3
20005d90:	f04f 0208 	mov.w	r2, #8
20005d94:	f04f 0300 	mov.w	r3, #0
20005d98:	f001 f8eb 	bl	20006f72 <HW_set_8bit_reg_field>
20005d9c:	68fb      	ldr	r3, [r7, #12]
20005d9e:	681b      	ldr	r3, [r3, #0]
20005da0:	f103 0304 	add.w	r3, r3, #4
20005da4:	4618      	mov	r0, r3
20005da6:	f001 f8e2 	bl	20006f6e <HW_get_8bit_reg>
20005daa:	4603      	mov	r3, r0
20005dac:	74fb      	strb	r3, [r7, #19]
20005dae:	7cfb      	ldrb	r3, [r7, #19]
20005db0:	b2db      	uxtb	r3, r3
20005db2:	74fb      	strb	r3, [r7, #19]
20005db4:	68f8      	ldr	r0, [r7, #12]
20005db6:	f000 fe57 	bl	20006a68 <I2C_enable_irq>
20005dba:	6978      	ldr	r0, [r7, #20]
20005dbc:	f001 f8a2 	bl	20006f04 <HAL_restore_interrupts>
20005dc0:	f107 0718 	add.w	r7, r7, #24
20005dc4:	46bd      	mov	sp, r7
20005dc6:	bd80      	pop	{r7, pc}

20005dc8 <I2C_write_read>:
20005dc8:	b580      	push	{r7, lr}
20005dca:	b086      	sub	sp, #24
20005dcc:	af00      	add	r7, sp, #0
20005dce:	60f8      	str	r0, [r7, #12]
20005dd0:	607a      	str	r2, [r7, #4]
20005dd2:	460a      	mov	r2, r1
20005dd4:	72fa      	strb	r2, [r7, #11]
20005dd6:	807b      	strh	r3, [r7, #2]
20005dd8:	887b      	ldrh	r3, [r7, #2]
20005dda:	2b00      	cmp	r3, #0
20005ddc:	d100      	bne.n	20005de0 <I2C_write_read+0x18>
20005dde:	be00      	bkpt	0x0000
20005de0:	687b      	ldr	r3, [r7, #4]
20005de2:	2b00      	cmp	r3, #0
20005de4:	d100      	bne.n	20005de8 <I2C_write_read+0x20>
20005de6:	be00      	bkpt	0x0000
20005de8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20005dea:	2b00      	cmp	r3, #0
20005dec:	d100      	bne.n	20005df0 <I2C_write_read+0x28>
20005dee:	be00      	bkpt	0x0000
20005df0:	6a3b      	ldr	r3, [r7, #32]
20005df2:	2b00      	cmp	r3, #0
20005df4:	d100      	bne.n	20005df8 <I2C_write_read+0x30>
20005df6:	be00      	bkpt	0x0000
20005df8:	68fb      	ldr	r3, [r7, #12]
20005dfa:	f04f 0202 	mov.w	r2, #2
20005dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20005e04:	2b00      	cmp	r3, #0
20005e06:	d072      	beq.n	20005eee <I2C_write_read+0x126>
20005e08:	887b      	ldrh	r3, [r7, #2]
20005e0a:	2b00      	cmp	r3, #0
20005e0c:	d06f      	beq.n	20005eee <I2C_write_read+0x126>
20005e0e:	f001 f875 	bl	20006efc <HAL_disable_interrupts>
20005e12:	4603      	mov	r3, r0
20005e14:	617b      	str	r3, [r7, #20]
20005e16:	68fb      	ldr	r3, [r7, #12]
20005e18:	7b1b      	ldrb	r3, [r3, #12]
20005e1a:	2b00      	cmp	r3, #0
20005e1c:	d103      	bne.n	20005e26 <I2C_write_read+0x5e>
20005e1e:	68fb      	ldr	r3, [r7, #12]
20005e20:	f04f 0203 	mov.w	r2, #3
20005e24:	731a      	strb	r2, [r3, #12]
20005e26:	68fb      	ldr	r3, [r7, #12]
20005e28:	f04f 0203 	mov.w	r2, #3
20005e2c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
20005e30:	7afb      	ldrb	r3, [r7, #11]
20005e32:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005e36:	68fb      	ldr	r3, [r7, #12]
20005e38:	609a      	str	r2, [r3, #8]
20005e3a:	68fb      	ldr	r3, [r7, #12]
20005e3c:	f04f 0200 	mov.w	r2, #0
20005e40:	625a      	str	r2, [r3, #36]	; 0x24
20005e42:	68fb      	ldr	r3, [r7, #12]
20005e44:	687a      	ldr	r2, [r7, #4]
20005e46:	619a      	str	r2, [r3, #24]
20005e48:	887a      	ldrh	r2, [r7, #2]
20005e4a:	68fb      	ldr	r3, [r7, #12]
20005e4c:	61da      	str	r2, [r3, #28]
20005e4e:	68fb      	ldr	r3, [r7, #12]
20005e50:	f04f 0200 	mov.w	r2, #0
20005e54:	621a      	str	r2, [r3, #32]
20005e56:	68fb      	ldr	r3, [r7, #12]
20005e58:	6a3a      	ldr	r2, [r7, #32]
20005e5a:	629a      	str	r2, [r3, #40]	; 0x28
20005e5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20005e5e:	68fb      	ldr	r3, [r7, #12]
20005e60:	62da      	str	r2, [r3, #44]	; 0x2c
20005e62:	68fb      	ldr	r3, [r7, #12]
20005e64:	f04f 0200 	mov.w	r2, #0
20005e68:	631a      	str	r2, [r3, #48]	; 0x30
20005e6a:	68fb      	ldr	r3, [r7, #12]
20005e6c:	f04f 0201 	mov.w	r2, #1
20005e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005e74:	68fb      	ldr	r3, [r7, #12]
20005e76:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
20005e7a:	751a      	strb	r2, [r3, #20]
20005e7c:	68fb      	ldr	r3, [r7, #12]
20005e7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005e82:	b2db      	uxtb	r3, r3
20005e84:	2b01      	cmp	r3, #1
20005e86:	d105      	bne.n	20005e94 <I2C_write_read+0xcc>
20005e88:	68fb      	ldr	r3, [r7, #12]
20005e8a:	f04f 0201 	mov.w	r2, #1
20005e8e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005e92:	e00a      	b.n	20005eaa <I2C_write_read+0xe2>
20005e94:	68fb      	ldr	r3, [r7, #12]
20005e96:	681b      	ldr	r3, [r3, #0]
20005e98:	4618      	mov	r0, r3
20005e9a:	f04f 0105 	mov.w	r1, #5
20005e9e:	f04f 0220 	mov.w	r2, #32
20005ea2:	f04f 0301 	mov.w	r3, #1
20005ea6:	f001 f864 	bl	20006f72 <HW_set_8bit_reg_field>
20005eaa:	68fb      	ldr	r3, [r7, #12]
20005eac:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005eb0:	2b01      	cmp	r3, #1
20005eb2:	d10a      	bne.n	20005eca <I2C_write_read+0x102>
20005eb4:	68fb      	ldr	r3, [r7, #12]
20005eb6:	681b      	ldr	r3, [r3, #0]
20005eb8:	4618      	mov	r0, r3
20005eba:	f04f 0103 	mov.w	r1, #3
20005ebe:	f04f 0208 	mov.w	r2, #8
20005ec2:	f04f 0300 	mov.w	r3, #0
20005ec6:	f001 f854 	bl	20006f72 <HW_set_8bit_reg_field>
20005eca:	68fb      	ldr	r3, [r7, #12]
20005ecc:	681b      	ldr	r3, [r3, #0]
20005ece:	f103 0304 	add.w	r3, r3, #4
20005ed2:	4618      	mov	r0, r3
20005ed4:	f001 f84b 	bl	20006f6e <HW_get_8bit_reg>
20005ed8:	4603      	mov	r3, r0
20005eda:	74fb      	strb	r3, [r7, #19]
20005edc:	7cfb      	ldrb	r3, [r7, #19]
20005ede:	b2db      	uxtb	r3, r3
20005ee0:	74fb      	strb	r3, [r7, #19]
20005ee2:	68f8      	ldr	r0, [r7, #12]
20005ee4:	f000 fdc0 	bl	20006a68 <I2C_enable_irq>
20005ee8:	6978      	ldr	r0, [r7, #20]
20005eea:	f001 f80b 	bl	20006f04 <HAL_restore_interrupts>
20005eee:	f107 0718 	add.w	r7, r7, #24
20005ef2:	46bd      	mov	sp, r7
20005ef4:	bd80      	pop	{r7, pc}
20005ef6:	bf00      	nop

20005ef8 <I2C_wait_complete>:
20005ef8:	b580      	push	{r7, lr}
20005efa:	b084      	sub	sp, #16
20005efc:	af00      	add	r7, sp, #0
20005efe:	6078      	str	r0, [r7, #4]
20005f00:	6039      	str	r1, [r7, #0]
20005f02:	f000 fffb 	bl	20006efc <HAL_disable_interrupts>
20005f06:	4603      	mov	r3, r0
20005f08:	60fb      	str	r3, [r7, #12]
20005f0a:	687b      	ldr	r3, [r7, #4]
20005f0c:	683a      	ldr	r2, [r7, #0]
20005f0e:	639a      	str	r2, [r3, #56]	; 0x38
20005f10:	68f8      	ldr	r0, [r7, #12]
20005f12:	f000 fff7 	bl	20006f04 <HAL_restore_interrupts>
20005f16:	687b      	ldr	r3, [r7, #4]
20005f18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20005f1c:	72fb      	strb	r3, [r7, #11]
20005f1e:	7afb      	ldrb	r3, [r7, #11]
20005f20:	2b01      	cmp	r3, #1
20005f22:	d0f8      	beq.n	20005f16 <I2C_wait_complete+0x1e>
20005f24:	7afb      	ldrb	r3, [r7, #11]
20005f26:	4618      	mov	r0, r3
20005f28:	f107 0710 	add.w	r7, r7, #16
20005f2c:	46bd      	mov	sp, r7
20005f2e:	bd80      	pop	{r7, pc}

20005f30 <enable_slave_if_required>:
20005f30:	b580      	push	{r7, lr}
20005f32:	b082      	sub	sp, #8
20005f34:	af00      	add	r7, sp, #0
20005f36:	6078      	str	r0, [r7, #4]
20005f38:	687b      	ldr	r3, [r7, #4]
20005f3a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
20005f3e:	2b00      	cmp	r3, #0
20005f40:	d00a      	beq.n	20005f58 <enable_slave_if_required+0x28>
20005f42:	687b      	ldr	r3, [r7, #4]
20005f44:	681b      	ldr	r3, [r3, #0]
20005f46:	4618      	mov	r0, r3
20005f48:	f04f 0102 	mov.w	r1, #2
20005f4c:	f04f 0204 	mov.w	r2, #4
20005f50:	f04f 0301 	mov.w	r3, #1
20005f54:	f001 f80d 	bl	20006f72 <HW_set_8bit_reg_field>
20005f58:	f107 0708 	add.w	r7, r7, #8
20005f5c:	46bd      	mov	sp, r7
20005f5e:	bd80      	pop	{r7, pc}

20005f60 <I2C_isr>:
20005f60:	b5b0      	push	{r4, r5, r7, lr}
20005f62:	b084      	sub	sp, #16
20005f64:	af00      	add	r7, sp, #0
20005f66:	6078      	str	r0, [r7, #4]
20005f68:	f04f 0301 	mov.w	r3, #1
20005f6c:	73bb      	strb	r3, [r7, #14]
20005f6e:	687b      	ldr	r3, [r7, #4]
20005f70:	681b      	ldr	r3, [r3, #0]
20005f72:	f103 0304 	add.w	r3, r3, #4
20005f76:	4618      	mov	r0, r3
20005f78:	f000 fff9 	bl	20006f6e <HW_get_8bit_reg>
20005f7c:	4603      	mov	r3, r0
20005f7e:	72fb      	strb	r3, [r7, #11]
20005f80:	7afb      	ldrb	r3, [r7, #11]
20005f82:	b2db      	uxtb	r3, r3
20005f84:	f1a3 0308 	sub.w	r3, r3, #8
20005f88:	2bd8      	cmp	r3, #216	; 0xd8
20005f8a:	f200 84e3 	bhi.w	20006954 <I2C_isr+0x9f4>
20005f8e:	a201      	add	r2, pc, #4	; (adr r2, 20005f94 <I2C_isr+0x34>)
20005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005f94:	200062f9 	.word	0x200062f9
20005f98:	20006955 	.word	0x20006955
20005f9c:	20006955 	.word	0x20006955
20005fa0:	20006955 	.word	0x20006955
20005fa4:	20006955 	.word	0x20006955
20005fa8:	20006955 	.word	0x20006955
20005fac:	20006955 	.word	0x20006955
20005fb0:	20006955 	.word	0x20006955
20005fb4:	200062f9 	.word	0x200062f9
20005fb8:	20006955 	.word	0x20006955
20005fbc:	20006955 	.word	0x20006955
20005fc0:	20006955 	.word	0x20006955
20005fc4:	20006955 	.word	0x20006955
20005fc8:	20006955 	.word	0x20006955
20005fcc:	20006955 	.word	0x20006955
20005fd0:	20006955 	.word	0x20006955
20005fd4:	200063cf 	.word	0x200063cf
20005fd8:	20006955 	.word	0x20006955
20005fdc:	20006955 	.word	0x20006955
20005fe0:	20006955 	.word	0x20006955
20005fe4:	20006955 	.word	0x20006955
20005fe8:	20006955 	.word	0x20006955
20005fec:	20006955 	.word	0x20006955
20005ff0:	20006955 	.word	0x20006955
20005ff4:	2000639f 	.word	0x2000639f
20005ff8:	20006955 	.word	0x20006955
20005ffc:	20006955 	.word	0x20006955
20006000:	20006955 	.word	0x20006955
20006004:	20006955 	.word	0x20006955
20006008:	20006955 	.word	0x20006955
2000600c:	20006955 	.word	0x20006955
20006010:	20006955 	.word	0x20006955
20006014:	200063cf 	.word	0x200063cf
20006018:	20006955 	.word	0x20006955
2000601c:	20006955 	.word	0x20006955
20006020:	20006955 	.word	0x20006955
20006024:	20006955 	.word	0x20006955
20006028:	20006955 	.word	0x20006955
2000602c:	20006955 	.word	0x20006955
20006030:	20006955 	.word	0x20006955
20006034:	2000647f 	.word	0x2000647f
20006038:	20006955 	.word	0x20006955
2000603c:	20006955 	.word	0x20006955
20006040:	20006955 	.word	0x20006955
20006044:	20006955 	.word	0x20006955
20006048:	20006955 	.word	0x20006955
2000604c:	20006955 	.word	0x20006955
20006050:	20006955 	.word	0x20006955
20006054:	20006387 	.word	0x20006387
20006058:	20006955 	.word	0x20006955
2000605c:	20006955 	.word	0x20006955
20006060:	20006955 	.word	0x20006955
20006064:	20006955 	.word	0x20006955
20006068:	20006955 	.word	0x20006955
2000606c:	20006955 	.word	0x20006955
20006070:	20006955 	.word	0x20006955
20006074:	200064af 	.word	0x200064af
20006078:	20006955 	.word	0x20006955
2000607c:	20006955 	.word	0x20006955
20006080:	20006955 	.word	0x20006955
20006084:	20006955 	.word	0x20006955
20006088:	20006955 	.word	0x20006955
2000608c:	20006955 	.word	0x20006955
20006090:	20006955 	.word	0x20006955
20006094:	2000652f 	.word	0x2000652f
20006098:	20006955 	.word	0x20006955
2000609c:	20006955 	.word	0x20006955
200060a0:	20006955 	.word	0x20006955
200060a4:	20006955 	.word	0x20006955
200060a8:	20006955 	.word	0x20006955
200060ac:	20006955 	.word	0x20006955
200060b0:	20006955 	.word	0x20006955
200060b4:	2000655f 	.word	0x2000655f
200060b8:	20006955 	.word	0x20006955
200060bc:	20006955 	.word	0x20006955
200060c0:	20006955 	.word	0x20006955
200060c4:	20006955 	.word	0x20006955
200060c8:	20006955 	.word	0x20006955
200060cc:	20006955 	.word	0x20006955
200060d0:	20006955 	.word	0x20006955
200060d4:	200065af 	.word	0x200065af
200060d8:	20006955 	.word	0x20006955
200060dc:	20006955 	.word	0x20006955
200060e0:	20006955 	.word	0x20006955
200060e4:	20006955 	.word	0x20006955
200060e8:	20006955 	.word	0x20006955
200060ec:	20006955 	.word	0x20006955
200060f0:	20006955 	.word	0x20006955
200060f4:	20006679 	.word	0x20006679
200060f8:	20006955 	.word	0x20006955
200060fc:	20006955 	.word	0x20006955
20006100:	20006955 	.word	0x20006955
20006104:	20006955 	.word	0x20006955
20006108:	20006955 	.word	0x20006955
2000610c:	20006955 	.word	0x20006955
20006110:	20006955 	.word	0x20006955
20006114:	2000666f 	.word	0x2000666f
20006118:	20006955 	.word	0x20006955
2000611c:	20006955 	.word	0x20006955
20006120:	20006955 	.word	0x20006955
20006124:	20006955 	.word	0x20006955
20006128:	20006955 	.word	0x20006955
2000612c:	20006955 	.word	0x20006955
20006130:	20006955 	.word	0x20006955
20006134:	20006679 	.word	0x20006679
20006138:	20006955 	.word	0x20006955
2000613c:	20006955 	.word	0x20006955
20006140:	20006955 	.word	0x20006955
20006144:	20006955 	.word	0x20006955
20006148:	20006955 	.word	0x20006955
2000614c:	20006955 	.word	0x20006955
20006150:	20006955 	.word	0x20006955
20006154:	2000666f 	.word	0x2000666f
20006158:	20006955 	.word	0x20006955
2000615c:	20006955 	.word	0x20006955
20006160:	20006955 	.word	0x20006955
20006164:	20006955 	.word	0x20006955
20006168:	20006955 	.word	0x20006955
2000616c:	20006955 	.word	0x20006955
20006170:	20006955 	.word	0x20006955
20006174:	200066d5 	.word	0x200066d5
20006178:	20006955 	.word	0x20006955
2000617c:	20006955 	.word	0x20006955
20006180:	20006955 	.word	0x20006955
20006184:	20006955 	.word	0x20006955
20006188:	20006955 	.word	0x20006955
2000618c:	20006955 	.word	0x20006955
20006190:	20006955 	.word	0x20006955
20006194:	20006623 	.word	0x20006623
20006198:	20006955 	.word	0x20006955
2000619c:	20006955 	.word	0x20006955
200061a0:	20006955 	.word	0x20006955
200061a4:	20006955 	.word	0x20006955
200061a8:	20006955 	.word	0x20006955
200061ac:	20006955 	.word	0x20006955
200061b0:	20006955 	.word	0x20006955
200061b4:	200066d5 	.word	0x200066d5
200061b8:	20006955 	.word	0x20006955
200061bc:	20006955 	.word	0x20006955
200061c0:	20006955 	.word	0x20006955
200061c4:	20006955 	.word	0x20006955
200061c8:	20006955 	.word	0x20006955
200061cc:	20006955 	.word	0x20006955
200061d0:	20006955 	.word	0x20006955
200061d4:	20006623 	.word	0x20006623
200061d8:	20006955 	.word	0x20006955
200061dc:	20006955 	.word	0x20006955
200061e0:	20006955 	.word	0x20006955
200061e4:	20006955 	.word	0x20006955
200061e8:	20006955 	.word	0x20006955
200061ec:	20006955 	.word	0x20006955
200061f0:	20006955 	.word	0x20006955
200061f4:	20006747 	.word	0x20006747
200061f8:	20006955 	.word	0x20006955
200061fc:	20006955 	.word	0x20006955
20006200:	20006955 	.word	0x20006955
20006204:	20006955 	.word	0x20006955
20006208:	20006955 	.word	0x20006955
2000620c:	20006955 	.word	0x20006955
20006210:	20006955 	.word	0x20006955
20006214:	20006839 	.word	0x20006839
20006218:	20006955 	.word	0x20006955
2000621c:	20006955 	.word	0x20006955
20006220:	20006955 	.word	0x20006955
20006224:	20006955 	.word	0x20006955
20006228:	20006955 	.word	0x20006955
2000622c:	20006955 	.word	0x20006955
20006230:	20006955 	.word	0x20006955
20006234:	20006839 	.word	0x20006839
20006238:	20006955 	.word	0x20006955
2000623c:	20006955 	.word	0x20006955
20006240:	20006955 	.word	0x20006955
20006244:	20006955 	.word	0x20006955
20006248:	20006955 	.word	0x20006955
2000624c:	20006955 	.word	0x20006955
20006250:	20006955 	.word	0x20006955
20006254:	20006839 	.word	0x20006839
20006258:	20006955 	.word	0x20006955
2000625c:	20006955 	.word	0x20006955
20006260:	20006955 	.word	0x20006955
20006264:	20006955 	.word	0x20006955
20006268:	20006955 	.word	0x20006955
2000626c:	20006955 	.word	0x20006955
20006270:	20006955 	.word	0x20006955
20006274:	20006903 	.word	0x20006903
20006278:	20006955 	.word	0x20006955
2000627c:	20006955 	.word	0x20006955
20006280:	20006955 	.word	0x20006955
20006284:	20006955 	.word	0x20006955
20006288:	20006955 	.word	0x20006955
2000628c:	20006955 	.word	0x20006955
20006290:	20006955 	.word	0x20006955
20006294:	20006903 	.word	0x20006903
20006298:	20006955 	.word	0x20006955
2000629c:	20006955 	.word	0x20006955
200062a0:	20006955 	.word	0x20006955
200062a4:	20006955 	.word	0x20006955
200062a8:	20006955 	.word	0x20006955
200062ac:	20006955 	.word	0x20006955
200062b0:	20006955 	.word	0x20006955
200062b4:	20006955 	.word	0x20006955
200062b8:	20006955 	.word	0x20006955
200062bc:	20006955 	.word	0x20006955
200062c0:	20006955 	.word	0x20006955
200062c4:	20006955 	.word	0x20006955
200062c8:	20006955 	.word	0x20006955
200062cc:	20006955 	.word	0x20006955
200062d0:	20006955 	.word	0x20006955
200062d4:	2000680b 	.word	0x2000680b
200062d8:	20006955 	.word	0x20006955
200062dc:	20006955 	.word	0x20006955
200062e0:	20006955 	.word	0x20006955
200062e4:	20006955 	.word	0x20006955
200062e8:	20006955 	.word	0x20006955
200062ec:	20006955 	.word	0x20006955
200062f0:	20006955 	.word	0x20006955
200062f4:	200069a9 	.word	0x200069a9
200062f8:	687b      	ldr	r3, [r7, #4]
200062fa:	681b      	ldr	r3, [r3, #0]
200062fc:	4618      	mov	r0, r3
200062fe:	f04f 0105 	mov.w	r1, #5
20006302:	f04f 0220 	mov.w	r2, #32
20006306:	f04f 0300 	mov.w	r3, #0
2000630a:	f000 fe32 	bl	20006f72 <HW_set_8bit_reg_field>
2000630e:	687b      	ldr	r3, [r7, #4]
20006310:	681b      	ldr	r3, [r3, #0]
20006312:	f103 0208 	add.w	r2, r3, #8
20006316:	687b      	ldr	r3, [r7, #4]
20006318:	689b      	ldr	r3, [r3, #8]
2000631a:	4610      	mov	r0, r2
2000631c:	4619      	mov	r1, r3
2000631e:	f000 fe24 	bl	20006f6a <HW_set_8bit_reg>
20006322:	687b      	ldr	r3, [r7, #4]
20006324:	681b      	ldr	r3, [r3, #0]
20006326:	f103 0208 	add.w	r2, r3, #8
2000632a:	687b      	ldr	r3, [r7, #4]
2000632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000632e:	4610      	mov	r0, r2
20006330:	f04f 0100 	mov.w	r1, #0
20006334:	f04f 0201 	mov.w	r2, #1
20006338:	f000 fe1b 	bl	20006f72 <HW_set_8bit_reg_field>
2000633c:	687b      	ldr	r3, [r7, #4]
2000633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006340:	2b00      	cmp	r3, #0
20006342:	d104      	bne.n	2000634e <I2C_isr+0x3ee>
20006344:	687b      	ldr	r3, [r7, #4]
20006346:	f04f 0200 	mov.w	r2, #0
2000634a:	621a      	str	r2, [r3, #32]
2000634c:	e003      	b.n	20006356 <I2C_isr+0x3f6>
2000634e:	687b      	ldr	r3, [r7, #4]
20006350:	f04f 0200 	mov.w	r2, #0
20006354:	631a      	str	r2, [r3, #48]	; 0x30
20006356:	687b      	ldr	r3, [r7, #4]
20006358:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
2000635c:	2b00      	cmp	r3, #0
2000635e:	d004      	beq.n	2000636a <I2C_isr+0x40a>
20006360:	687b      	ldr	r3, [r7, #4]
20006362:	f04f 0200 	mov.w	r2, #0
20006366:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
2000636a:	687b      	ldr	r3, [r7, #4]
2000636c:	7b1a      	ldrb	r2, [r3, #12]
2000636e:	687b      	ldr	r3, [r7, #4]
20006370:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
20006374:	429a      	cmp	r2, r3
20006376:	f000 8319 	beq.w	200069ac <I2C_isr+0xa4c>
2000637a:	687b      	ldr	r3, [r7, #4]
2000637c:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
20006380:	687b      	ldr	r3, [r7, #4]
20006382:	731a      	strb	r2, [r3, #12]
20006384:	e31b      	b.n	200069be <I2C_isr+0xa5e>
20006386:	687b      	ldr	r3, [r7, #4]
20006388:	681b      	ldr	r3, [r3, #0]
2000638a:	4618      	mov	r0, r3
2000638c:	f04f 0105 	mov.w	r1, #5
20006390:	f04f 0220 	mov.w	r2, #32
20006394:	f04f 0301 	mov.w	r3, #1
20006398:	f000 fdeb 	bl	20006f72 <HW_set_8bit_reg_field>
2000639c:	e30f      	b.n	200069be <I2C_isr+0xa5e>
2000639e:	687b      	ldr	r3, [r7, #4]
200063a0:	681b      	ldr	r3, [r3, #0]
200063a2:	4618      	mov	r0, r3
200063a4:	f04f 0104 	mov.w	r1, #4
200063a8:	f04f 0210 	mov.w	r2, #16
200063ac:	f04f 0301 	mov.w	r3, #1
200063b0:	f000 fddf 	bl	20006f72 <HW_set_8bit_reg_field>
200063b4:	687b      	ldr	r3, [r7, #4]
200063b6:	f04f 0202 	mov.w	r2, #2
200063ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
200063be:	687b      	ldr	r3, [r7, #4]
200063c0:	f04f 0200 	mov.w	r2, #0
200063c4:	731a      	strb	r2, [r3, #12]
200063c6:	6878      	ldr	r0, [r7, #4]
200063c8:	f7ff fdb2 	bl	20005f30 <enable_slave_if_required>
200063cc:	e2f7      	b.n	200069be <I2C_isr+0xa5e>
200063ce:	687b      	ldr	r3, [r7, #4]
200063d0:	6a1a      	ldr	r2, [r3, #32]
200063d2:	687b      	ldr	r3, [r7, #4]
200063d4:	69db      	ldr	r3, [r3, #28]
200063d6:	429a      	cmp	r2, r3
200063d8:	d212      	bcs.n	20006400 <I2C_isr+0x4a0>
200063da:	687b      	ldr	r3, [r7, #4]
200063dc:	681b      	ldr	r3, [r3, #0]
200063de:	f103 0108 	add.w	r1, r3, #8
200063e2:	687b      	ldr	r3, [r7, #4]
200063e4:	699a      	ldr	r2, [r3, #24]
200063e6:	687b      	ldr	r3, [r7, #4]
200063e8:	6a1b      	ldr	r3, [r3, #32]
200063ea:	441a      	add	r2, r3
200063ec:	7812      	ldrb	r2, [r2, #0]
200063ee:	f103 0001 	add.w	r0, r3, #1
200063f2:	687b      	ldr	r3, [r7, #4]
200063f4:	6218      	str	r0, [r3, #32]
200063f6:	4608      	mov	r0, r1
200063f8:	4611      	mov	r1, r2
200063fa:	f000 fdb6 	bl	20006f6a <HW_set_8bit_reg>
200063fe:	e2de      	b.n	200069be <I2C_isr+0xa5e>
20006400:	687b      	ldr	r3, [r7, #4]
20006402:	7b1b      	ldrb	r3, [r3, #12]
20006404:	2b03      	cmp	r3, #3
20006406:	d10f      	bne.n	20006428 <I2C_isr+0x4c8>
20006408:	687b      	ldr	r3, [r7, #4]
2000640a:	f04f 0201 	mov.w	r2, #1
2000640e:	625a      	str	r2, [r3, #36]	; 0x24
20006410:	687b      	ldr	r3, [r7, #4]
20006412:	681b      	ldr	r3, [r3, #0]
20006414:	4618      	mov	r0, r3
20006416:	f04f 0105 	mov.w	r1, #5
2000641a:	f04f 0220 	mov.w	r2, #32
2000641e:	f04f 0301 	mov.w	r3, #1
20006422:	f000 fda6 	bl	20006f72 <HW_set_8bit_reg_field>
20006426:	e2ca      	b.n	200069be <I2C_isr+0xa5e>
20006428:	687b      	ldr	r3, [r7, #4]
2000642a:	f04f 0200 	mov.w	r2, #0
2000642e:	731a      	strb	r2, [r3, #12]
20006430:	687b      	ldr	r3, [r7, #4]
20006432:	7d1b      	ldrb	r3, [r3, #20]
20006434:	f003 0301 	and.w	r3, r3, #1
20006438:	737b      	strb	r3, [r7, #13]
2000643a:	687b      	ldr	r3, [r7, #4]
2000643c:	7b7a      	ldrb	r2, [r7, #13]
2000643e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
20006442:	7b7b      	ldrb	r3, [r7, #13]
20006444:	2b00      	cmp	r3, #0
20006446:	d10e      	bne.n	20006466 <I2C_isr+0x506>
20006448:	687b      	ldr	r3, [r7, #4]
2000644a:	681b      	ldr	r3, [r3, #0]
2000644c:	4618      	mov	r0, r3
2000644e:	f04f 0104 	mov.w	r1, #4
20006452:	f04f 0210 	mov.w	r2, #16
20006456:	f04f 0301 	mov.w	r3, #1
2000645a:	f000 fd8a 	bl	20006f72 <HW_set_8bit_reg_field>
2000645e:	6878      	ldr	r0, [r7, #4]
20006460:	f7ff fd66 	bl	20005f30 <enable_slave_if_required>
20006464:	e005      	b.n	20006472 <I2C_isr+0x512>
20006466:	6878      	ldr	r0, [r7, #4]
20006468:	f000 fb48 	bl	20006afc <I2C_disable_irq>
2000646c:	f04f 0300 	mov.w	r3, #0
20006470:	73bb      	strb	r3, [r7, #14]
20006472:	687b      	ldr	r3, [r7, #4]
20006474:	f04f 0200 	mov.w	r2, #0
20006478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2000647c:	e29f      	b.n	200069be <I2C_isr+0xa5e>
2000647e:	687b      	ldr	r3, [r7, #4]
20006480:	681b      	ldr	r3, [r3, #0]
20006482:	4618      	mov	r0, r3
20006484:	f04f 0104 	mov.w	r1, #4
20006488:	f04f 0210 	mov.w	r2, #16
2000648c:	f04f 0301 	mov.w	r3, #1
20006490:	f000 fd6f 	bl	20006f72 <HW_set_8bit_reg_field>
20006494:	687b      	ldr	r3, [r7, #4]
20006496:	f04f 0202 	mov.w	r2, #2
2000649a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2000649e:	687b      	ldr	r3, [r7, #4]
200064a0:	f04f 0200 	mov.w	r2, #0
200064a4:	731a      	strb	r2, [r3, #12]
200064a6:	6878      	ldr	r0, [r7, #4]
200064a8:	f7ff fd42 	bl	20005f30 <enable_slave_if_required>
200064ac:	e287      	b.n	200069be <I2C_isr+0xa5e>
200064ae:	687b      	ldr	r3, [r7, #4]
200064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200064b2:	2b01      	cmp	r3, #1
200064b4:	d90b      	bls.n	200064ce <I2C_isr+0x56e>
200064b6:	687b      	ldr	r3, [r7, #4]
200064b8:	681b      	ldr	r3, [r3, #0]
200064ba:	4618      	mov	r0, r3
200064bc:	f04f 0102 	mov.w	r1, #2
200064c0:	f04f 0204 	mov.w	r2, #4
200064c4:	f04f 0301 	mov.w	r3, #1
200064c8:	f000 fd53 	bl	20006f72 <HW_set_8bit_reg_field>
200064cc:	e277      	b.n	200069be <I2C_isr+0xa5e>
200064ce:	687b      	ldr	r3, [r7, #4]
200064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200064d2:	2b01      	cmp	r3, #1
200064d4:	d10b      	bne.n	200064ee <I2C_isr+0x58e>
200064d6:	687b      	ldr	r3, [r7, #4]
200064d8:	681b      	ldr	r3, [r3, #0]
200064da:	4618      	mov	r0, r3
200064dc:	f04f 0102 	mov.w	r1, #2
200064e0:	f04f 0204 	mov.w	r2, #4
200064e4:	f04f 0300 	mov.w	r3, #0
200064e8:	f000 fd43 	bl	20006f72 <HW_set_8bit_reg_field>
200064ec:	e267      	b.n	200069be <I2C_isr+0xa5e>
200064ee:	687b      	ldr	r3, [r7, #4]
200064f0:	681b      	ldr	r3, [r3, #0]
200064f2:	4618      	mov	r0, r3
200064f4:	f04f 0102 	mov.w	r1, #2
200064f8:	f04f 0204 	mov.w	r2, #4
200064fc:	f04f 0301 	mov.w	r3, #1
20006500:	f000 fd37 	bl	20006f72 <HW_set_8bit_reg_field>
20006504:	687b      	ldr	r3, [r7, #4]
20006506:	681b      	ldr	r3, [r3, #0]
20006508:	4618      	mov	r0, r3
2000650a:	f04f 0104 	mov.w	r1, #4
2000650e:	f04f 0210 	mov.w	r2, #16
20006512:	f04f 0301 	mov.w	r3, #1
20006516:	f000 fd2c 	bl	20006f72 <HW_set_8bit_reg_field>
2000651a:	687b      	ldr	r3, [r7, #4]
2000651c:	f04f 0200 	mov.w	r2, #0
20006520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006524:	687b      	ldr	r3, [r7, #4]
20006526:	f04f 0200 	mov.w	r2, #0
2000652a:	731a      	strb	r2, [r3, #12]
2000652c:	e247      	b.n	200069be <I2C_isr+0xa5e>
2000652e:	687b      	ldr	r3, [r7, #4]
20006530:	681b      	ldr	r3, [r3, #0]
20006532:	4618      	mov	r0, r3
20006534:	f04f 0104 	mov.w	r1, #4
20006538:	f04f 0210 	mov.w	r2, #16
2000653c:	f04f 0301 	mov.w	r3, #1
20006540:	f000 fd17 	bl	20006f72 <HW_set_8bit_reg_field>
20006544:	687b      	ldr	r3, [r7, #4]
20006546:	f04f 0202 	mov.w	r2, #2
2000654a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2000654e:	687b      	ldr	r3, [r7, #4]
20006550:	f04f 0200 	mov.w	r2, #0
20006554:	731a      	strb	r2, [r3, #12]
20006556:	6878      	ldr	r0, [r7, #4]
20006558:	f7ff fcea 	bl	20005f30 <enable_slave_if_required>
2000655c:	e22f      	b.n	200069be <I2C_isr+0xa5e>
2000655e:	687b      	ldr	r3, [r7, #4]
20006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20006562:	687a      	ldr	r2, [r7, #4]
20006564:	6b14      	ldr	r4, [r2, #48]	; 0x30
20006566:	eb03 0504 	add.w	r5, r3, r4
2000656a:	687b      	ldr	r3, [r7, #4]
2000656c:	681b      	ldr	r3, [r3, #0]
2000656e:	f103 0308 	add.w	r3, r3, #8
20006572:	4618      	mov	r0, r3
20006574:	f000 fcfb 	bl	20006f6e <HW_get_8bit_reg>
20006578:	4603      	mov	r3, r0
2000657a:	702b      	strb	r3, [r5, #0]
2000657c:	f104 0201 	add.w	r2, r4, #1
20006580:	687b      	ldr	r3, [r7, #4]
20006582:	631a      	str	r2, [r3, #48]	; 0x30
20006584:	687b      	ldr	r3, [r7, #4]
20006586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20006588:	687b      	ldr	r3, [r7, #4]
2000658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000658c:	f103 33ff 	add.w	r3, r3, #4294967295
20006590:	429a      	cmp	r2, r3
20006592:	f0c0 820d 	bcc.w	200069b0 <I2C_isr+0xa50>
20006596:	687b      	ldr	r3, [r7, #4]
20006598:	681b      	ldr	r3, [r3, #0]
2000659a:	4618      	mov	r0, r3
2000659c:	f04f 0102 	mov.w	r1, #2
200065a0:	f04f 0204 	mov.w	r2, #4
200065a4:	f04f 0300 	mov.w	r3, #0
200065a8:	f000 fce3 	bl	20006f72 <HW_set_8bit_reg_field>
200065ac:	e207      	b.n	200069be <I2C_isr+0xa5e>
200065ae:	687b      	ldr	r3, [r7, #4]
200065b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200065b2:	687b      	ldr	r3, [r7, #4]
200065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200065b6:	eb02 0403 	add.w	r4, r2, r3
200065ba:	687b      	ldr	r3, [r7, #4]
200065bc:	681b      	ldr	r3, [r3, #0]
200065be:	f103 0308 	add.w	r3, r3, #8
200065c2:	4618      	mov	r0, r3
200065c4:	f000 fcd3 	bl	20006f6e <HW_get_8bit_reg>
200065c8:	4603      	mov	r3, r0
200065ca:	7023      	strb	r3, [r4, #0]
200065cc:	687b      	ldr	r3, [r7, #4]
200065ce:	7d1b      	ldrb	r3, [r3, #20]
200065d0:	f003 0301 	and.w	r3, r3, #1
200065d4:	737b      	strb	r3, [r7, #13]
200065d6:	687b      	ldr	r3, [r7, #4]
200065d8:	7b7a      	ldrb	r2, [r7, #13]
200065da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
200065de:	7b7b      	ldrb	r3, [r7, #13]
200065e0:	2b00      	cmp	r3, #0
200065e2:	d10e      	bne.n	20006602 <I2C_isr+0x6a2>
200065e4:	687b      	ldr	r3, [r7, #4]
200065e6:	681b      	ldr	r3, [r3, #0]
200065e8:	4618      	mov	r0, r3
200065ea:	f04f 0104 	mov.w	r1, #4
200065ee:	f04f 0210 	mov.w	r2, #16
200065f2:	f04f 0301 	mov.w	r3, #1
200065f6:	f000 fcbc 	bl	20006f72 <HW_set_8bit_reg_field>
200065fa:	6878      	ldr	r0, [r7, #4]
200065fc:	f7ff fc98 	bl	20005f30 <enable_slave_if_required>
20006600:	e005      	b.n	2000660e <I2C_isr+0x6ae>
20006602:	6878      	ldr	r0, [r7, #4]
20006604:	f000 fa7a 	bl	20006afc <I2C_disable_irq>
20006608:	f04f 0300 	mov.w	r3, #0
2000660c:	73bb      	strb	r3, [r7, #14]
2000660e:	687b      	ldr	r3, [r7, #4]
20006610:	f04f 0200 	mov.w	r2, #0
20006614:	731a      	strb	r2, [r3, #12]
20006616:	687b      	ldr	r3, [r7, #4]
20006618:	f04f 0200 	mov.w	r2, #0
2000661c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006620:	e1cd      	b.n	200069be <I2C_isr+0xa5e>
20006622:	687b      	ldr	r3, [r7, #4]
20006624:	681b      	ldr	r3, [r3, #0]
20006626:	4618      	mov	r0, r3
20006628:	f04f 0102 	mov.w	r1, #2
2000662c:	f04f 0204 	mov.w	r2, #4
20006630:	f04f 0301 	mov.w	r3, #1
20006634:	f000 fc9d 	bl	20006f72 <HW_set_8bit_reg_field>
20006638:	687b      	ldr	r3, [r7, #4]
2000663a:	f04f 0200 	mov.w	r2, #0
2000663e:	731a      	strb	r2, [r3, #12]
20006640:	687b      	ldr	r3, [r7, #4]
20006642:	f04f 0200 	mov.w	r2, #0
20006646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2000664a:	687b      	ldr	r3, [r7, #4]
2000664c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006650:	2b00      	cmp	r3, #0
20006652:	f000 81af 	beq.w	200069b4 <I2C_isr+0xa54>
20006656:	687b      	ldr	r3, [r7, #4]
20006658:	681b      	ldr	r3, [r3, #0]
2000665a:	4618      	mov	r0, r3
2000665c:	f04f 0105 	mov.w	r1, #5
20006660:	f04f 0220 	mov.w	r2, #32
20006664:	f04f 0301 	mov.w	r3, #1
20006668:	f000 fc83 	bl	20006f72 <HW_set_8bit_reg_field>
2000666c:	e1a7      	b.n	200069be <I2C_isr+0xa5e>
2000666e:	687b      	ldr	r3, [r7, #4]
20006670:	f04f 0201 	mov.w	r2, #1
20006674:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006678:	687b      	ldr	r3, [r7, #4]
2000667a:	f04f 0204 	mov.w	r2, #4
2000667e:	731a      	strb	r2, [r3, #12]
20006680:	687b      	ldr	r3, [r7, #4]
20006682:	f04f 0200 	mov.w	r2, #0
20006686:	651a      	str	r2, [r3, #80]	; 0x50
20006688:	687b      	ldr	r3, [r7, #4]
2000668a:	f04f 0200 	mov.w	r2, #0
2000668e:	611a      	str	r2, [r3, #16]
20006690:	687b      	ldr	r3, [r7, #4]
20006692:	681b      	ldr	r3, [r3, #0]
20006694:	4618      	mov	r0, r3
20006696:	f04f 0105 	mov.w	r1, #5
2000669a:	f04f 0220 	mov.w	r2, #32
2000669e:	f000 fc76 	bl	20006f8e <HW_get_8bit_reg_field>
200066a2:	4603      	mov	r3, r0
200066a4:	2b00      	cmp	r3, #0
200066a6:	d00f      	beq.n	200066c8 <I2C_isr+0x768>
200066a8:	687b      	ldr	r3, [r7, #4]
200066aa:	681b      	ldr	r3, [r3, #0]
200066ac:	4618      	mov	r0, r3
200066ae:	f04f 0105 	mov.w	r1, #5
200066b2:	f04f 0220 	mov.w	r2, #32
200066b6:	f04f 0300 	mov.w	r3, #0
200066ba:	f000 fc5a 	bl	20006f72 <HW_set_8bit_reg_field>
200066be:	687b      	ldr	r3, [r7, #4]
200066c0:	f04f 0201 	mov.w	r2, #1
200066c4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
200066c8:	687b      	ldr	r3, [r7, #4]
200066ca:	f04f 0201 	mov.w	r2, #1
200066ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
200066d2:	e174      	b.n	200069be <I2C_isr+0xa5e>
200066d4:	687b      	ldr	r3, [r7, #4]
200066d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200066d8:	2b00      	cmp	r3, #0
200066da:	d021      	beq.n	20006720 <I2C_isr+0x7c0>
200066dc:	687b      	ldr	r3, [r7, #4]
200066de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200066e0:	687b      	ldr	r3, [r7, #4]
200066e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200066e4:	429a      	cmp	r2, r3
200066e6:	d21b      	bcs.n	20006720 <I2C_isr+0x7c0>
200066e8:	687b      	ldr	r3, [r7, #4]
200066ea:	681b      	ldr	r3, [r3, #0]
200066ec:	f103 0308 	add.w	r3, r3, #8
200066f0:	4618      	mov	r0, r3
200066f2:	f000 fc3c 	bl	20006f6e <HW_get_8bit_reg>
200066f6:	4603      	mov	r3, r0
200066f8:	733b      	strb	r3, [r7, #12]
200066fa:	687b      	ldr	r3, [r7, #4]
200066fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200066fe:	687b      	ldr	r3, [r7, #4]
20006700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20006702:	441a      	add	r2, r3
20006704:	7b39      	ldrb	r1, [r7, #12]
20006706:	7011      	strb	r1, [r2, #0]
20006708:	f103 0201 	add.w	r2, r3, #1
2000670c:	687b      	ldr	r3, [r7, #4]
2000670e:	651a      	str	r2, [r3, #80]	; 0x50
20006710:	687b      	ldr	r3, [r7, #4]
20006712:	691b      	ldr	r3, [r3, #16]
20006714:	ea4f 2203 	mov.w	r2, r3, lsl #8
20006718:	7b3b      	ldrb	r3, [r7, #12]
2000671a:	441a      	add	r2, r3
2000671c:	687b      	ldr	r3, [r7, #4]
2000671e:	611a      	str	r2, [r3, #16]
20006720:	687b      	ldr	r3, [r7, #4]
20006722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006724:	687b      	ldr	r3, [r7, #4]
20006726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20006728:	429a      	cmp	r2, r3
2000672a:	f0c0 8145 	bcc.w	200069b8 <I2C_isr+0xa58>
2000672e:	687b      	ldr	r3, [r7, #4]
20006730:	681b      	ldr	r3, [r3, #0]
20006732:	4618      	mov	r0, r3
20006734:	f04f 0102 	mov.w	r1, #2
20006738:	f04f 0204 	mov.w	r2, #4
2000673c:	f04f 0300 	mov.w	r3, #0
20006740:	f000 fc17 	bl	20006f72 <HW_set_8bit_reg_field>
20006744:	e13b      	b.n	200069be <I2C_isr+0xa5e>
20006746:	687b      	ldr	r3, [r7, #4]
20006748:	7b1b      	ldrb	r3, [r3, #12]
2000674a:	2b04      	cmp	r3, #4
2000674c:	d13c      	bne.n	200067c8 <I2C_isr+0x868>
2000674e:	687b      	ldr	r3, [r7, #4]
20006750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006752:	687b      	ldr	r3, [r7, #4]
20006754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20006756:	429a      	cmp	r2, r3
20006758:	d103      	bne.n	20006762 <I2C_isr+0x802>
2000675a:	687b      	ldr	r3, [r7, #4]
2000675c:	691a      	ldr	r2, [r3, #16]
2000675e:	687b      	ldr	r3, [r7, #4]
20006760:	645a      	str	r2, [r3, #68]	; 0x44
20006762:	687b      	ldr	r3, [r7, #4]
20006764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006766:	2b00      	cmp	r3, #0
20006768:	d022      	beq.n	200067b0 <I2C_isr+0x850>
2000676a:	687b      	ldr	r3, [r7, #4]
2000676c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000676e:	687a      	ldr	r2, [r7, #4]
20006770:	6c91      	ldr	r1, [r2, #72]	; 0x48
20006772:	687a      	ldr	r2, [r7, #4]
20006774:	6d12      	ldr	r2, [r2, #80]	; 0x50
20006776:	b292      	uxth	r2, r2
20006778:	6878      	ldr	r0, [r7, #4]
2000677a:	4798      	blx	r3
2000677c:	4603      	mov	r3, r0
2000677e:	73fb      	strb	r3, [r7, #15]
20006780:	7bfb      	ldrb	r3, [r7, #15]
20006782:	2b00      	cmp	r3, #0
20006784:	d103      	bne.n	2000678e <I2C_isr+0x82e>
20006786:	6878      	ldr	r0, [r7, #4]
20006788:	f7ff fbd2 	bl	20005f30 <enable_slave_if_required>
2000678c:	e023      	b.n	200067d6 <I2C_isr+0x876>
2000678e:	687b      	ldr	r3, [r7, #4]
20006790:	681b      	ldr	r3, [r3, #0]
20006792:	4618      	mov	r0, r3
20006794:	f04f 0102 	mov.w	r1, #2
20006798:	f04f 0204 	mov.w	r2, #4
2000679c:	f04f 0300 	mov.w	r3, #0
200067a0:	f000 fbe7 	bl	20006f72 <HW_set_8bit_reg_field>
200067a4:	687b      	ldr	r3, [r7, #4]
200067a6:	f04f 0200 	mov.w	r2, #0
200067aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
200067ae:	e012      	b.n	200067d6 <I2C_isr+0x876>
200067b0:	687b      	ldr	r3, [r7, #4]
200067b2:	681b      	ldr	r3, [r3, #0]
200067b4:	4618      	mov	r0, r3
200067b6:	f04f 0102 	mov.w	r1, #2
200067ba:	f04f 0204 	mov.w	r2, #4
200067be:	f04f 0301 	mov.w	r3, #1
200067c2:	f000 fbd6 	bl	20006f72 <HW_set_8bit_reg_field>
200067c6:	e006      	b.n	200067d6 <I2C_isr+0x876>
200067c8:	687b      	ldr	r3, [r7, #4]
200067ca:	f04f 0200 	mov.w	r2, #0
200067ce:	645a      	str	r2, [r3, #68]	; 0x44
200067d0:	6878      	ldr	r0, [r7, #4]
200067d2:	f7ff fbad 	bl	20005f30 <enable_slave_if_required>
200067d6:	687b      	ldr	r3, [r7, #4]
200067d8:	f04f 0200 	mov.w	r2, #0
200067dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
200067e0:	687b      	ldr	r3, [r7, #4]
200067e2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200067e6:	2b00      	cmp	r3, #0
200067e8:	d00a      	beq.n	20006800 <I2C_isr+0x8a0>
200067ea:	687b      	ldr	r3, [r7, #4]
200067ec:	681b      	ldr	r3, [r3, #0]
200067ee:	4618      	mov	r0, r3
200067f0:	f04f 0105 	mov.w	r1, #5
200067f4:	f04f 0220 	mov.w	r2, #32
200067f8:	f04f 0301 	mov.w	r3, #1
200067fc:	f000 fbb9 	bl	20006f72 <HW_set_8bit_reg_field>
20006800:	687b      	ldr	r3, [r7, #4]
20006802:	f04f 0200 	mov.w	r2, #0
20006806:	731a      	strb	r2, [r3, #12]
20006808:	e0d9      	b.n	200069be <I2C_isr+0xa5e>
2000680a:	687b      	ldr	r3, [r7, #4]
2000680c:	f04f 0200 	mov.w	r2, #0
20006810:	731a      	strb	r2, [r3, #12]
20006812:	687b      	ldr	r3, [r7, #4]
20006814:	f04f 0200 	mov.w	r2, #0
20006818:	645a      	str	r2, [r3, #68]	; 0x44
2000681a:	687b      	ldr	r3, [r7, #4]
2000681c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006820:	b2db      	uxtb	r3, r3
20006822:	2b01      	cmp	r3, #1
20006824:	d104      	bne.n	20006830 <I2C_isr+0x8d0>
20006826:	687b      	ldr	r3, [r7, #4]
20006828:	f04f 0202 	mov.w	r2, #2
2000682c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006830:	6878      	ldr	r0, [r7, #4]
20006832:	f7ff fb7d 	bl	20005f30 <enable_slave_if_required>
20006836:	e0c2      	b.n	200069be <I2C_isr+0xa5e>
20006838:	7afb      	ldrb	r3, [r7, #11]
2000683a:	b2db      	uxtb	r3, r3
2000683c:	2ba8      	cmp	r3, #168	; 0xa8
2000683e:	d128      	bne.n	20006892 <I2C_isr+0x932>
20006840:	687b      	ldr	r3, [r7, #4]
20006842:	f04f 0205 	mov.w	r2, #5
20006846:	731a      	strb	r2, [r3, #12]
20006848:	687b      	ldr	r3, [r7, #4]
2000684a:	f04f 0200 	mov.w	r2, #0
2000684e:	611a      	str	r2, [r3, #16]
20006850:	687b      	ldr	r3, [r7, #4]
20006852:	f04f 0201 	mov.w	r2, #1
20006856:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2000685a:	687b      	ldr	r3, [r7, #4]
2000685c:	681b      	ldr	r3, [r3, #0]
2000685e:	4618      	mov	r0, r3
20006860:	f04f 0105 	mov.w	r1, #5
20006864:	f04f 0220 	mov.w	r2, #32
20006868:	f000 fb91 	bl	20006f8e <HW_get_8bit_reg_field>
2000686c:	4603      	mov	r3, r0
2000686e:	2b00      	cmp	r3, #0
20006870:	d00f      	beq.n	20006892 <I2C_isr+0x932>
20006872:	687b      	ldr	r3, [r7, #4]
20006874:	681b      	ldr	r3, [r3, #0]
20006876:	4618      	mov	r0, r3
20006878:	f04f 0105 	mov.w	r1, #5
2000687c:	f04f 0220 	mov.w	r2, #32
20006880:	f04f 0300 	mov.w	r3, #0
20006884:	f000 fb75 	bl	20006f72 <HW_set_8bit_reg_field>
20006888:	687b      	ldr	r3, [r7, #4]
2000688a:	f04f 0201 	mov.w	r2, #1
2000688e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006892:	687b      	ldr	r3, [r7, #4]
20006894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006896:	687b      	ldr	r3, [r7, #4]
20006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000689a:	429a      	cmp	r2, r3
2000689c:	d309      	bcc.n	200068b2 <I2C_isr+0x952>
2000689e:	687b      	ldr	r3, [r7, #4]
200068a0:	681b      	ldr	r3, [r3, #0]
200068a2:	f103 0308 	add.w	r3, r3, #8
200068a6:	4618      	mov	r0, r3
200068a8:	f04f 01ff 	mov.w	r1, #255	; 0xff
200068ac:	f000 fb5d 	bl	20006f6a <HW_set_8bit_reg>
200068b0:	e011      	b.n	200068d6 <I2C_isr+0x976>
200068b2:	687b      	ldr	r3, [r7, #4]
200068b4:	681b      	ldr	r3, [r3, #0]
200068b6:	f103 0108 	add.w	r1, r3, #8
200068ba:	687b      	ldr	r3, [r7, #4]
200068bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
200068be:	687b      	ldr	r3, [r7, #4]
200068c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200068c2:	441a      	add	r2, r3
200068c4:	7812      	ldrb	r2, [r2, #0]
200068c6:	f103 0001 	add.w	r0, r3, #1
200068ca:	687b      	ldr	r3, [r7, #4]
200068cc:	6458      	str	r0, [r3, #68]	; 0x44
200068ce:	4608      	mov	r0, r1
200068d0:	4611      	mov	r1, r2
200068d2:	f000 fb4a 	bl	20006f6a <HW_set_8bit_reg>
200068d6:	687b      	ldr	r3, [r7, #4]
200068d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200068da:	687b      	ldr	r3, [r7, #4]
200068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200068de:	429a      	cmp	r2, r3
200068e0:	d36c      	bcc.n	200069bc <I2C_isr+0xa5c>
200068e2:	687b      	ldr	r3, [r7, #4]
200068e4:	681b      	ldr	r3, [r3, #0]
200068e6:	4618      	mov	r0, r3
200068e8:	f04f 0102 	mov.w	r1, #2
200068ec:	f04f 0204 	mov.w	r2, #4
200068f0:	f04f 0300 	mov.w	r3, #0
200068f4:	f000 fb3d 	bl	20006f72 <HW_set_8bit_reg_field>
200068f8:	687b      	ldr	r3, [r7, #4]
200068fa:	f04f 0200 	mov.w	r2, #0
200068fe:	645a      	str	r2, [r3, #68]	; 0x44
20006900:	e05d      	b.n	200069be <I2C_isr+0xa5e>
20006902:	687b      	ldr	r3, [r7, #4]
20006904:	f04f 0200 	mov.w	r2, #0
20006908:	645a      	str	r2, [r3, #68]	; 0x44
2000690a:	687b      	ldr	r3, [r7, #4]
2000690c:	681b      	ldr	r3, [r3, #0]
2000690e:	4618      	mov	r0, r3
20006910:	f04f 0102 	mov.w	r1, #2
20006914:	f04f 0204 	mov.w	r2, #4
20006918:	f04f 0301 	mov.w	r3, #1
2000691c:	f000 fb29 	bl	20006f72 <HW_set_8bit_reg_field>
20006920:	687b      	ldr	r3, [r7, #4]
20006922:	f04f 0200 	mov.w	r2, #0
20006926:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2000692a:	687b      	ldr	r3, [r7, #4]
2000692c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006930:	2b00      	cmp	r3, #0
20006932:	d00a      	beq.n	2000694a <I2C_isr+0x9ea>
20006934:	687b      	ldr	r3, [r7, #4]
20006936:	681b      	ldr	r3, [r3, #0]
20006938:	4618      	mov	r0, r3
2000693a:	f04f 0105 	mov.w	r1, #5
2000693e:	f04f 0220 	mov.w	r2, #32
20006942:	f04f 0301 	mov.w	r3, #1
20006946:	f000 fb14 	bl	20006f72 <HW_set_8bit_reg_field>
2000694a:	687b      	ldr	r3, [r7, #4]
2000694c:	f04f 0200 	mov.w	r2, #0
20006950:	731a      	strb	r2, [r3, #12]
20006952:	e034      	b.n	200069be <I2C_isr+0xa5e>
20006954:	687b      	ldr	r3, [r7, #4]
20006956:	681b      	ldr	r3, [r3, #0]
20006958:	4618      	mov	r0, r3
2000695a:	f04f 0105 	mov.w	r1, #5
2000695e:	f04f 0220 	mov.w	r2, #32
20006962:	f04f 0300 	mov.w	r3, #0
20006966:	f000 fb04 	bl	20006f72 <HW_set_8bit_reg_field>
2000696a:	687b      	ldr	r3, [r7, #4]
2000696c:	f04f 0200 	mov.w	r2, #0
20006970:	731a      	strb	r2, [r3, #12]
20006972:	687b      	ldr	r3, [r7, #4]
20006974:	f04f 0200 	mov.w	r2, #0
20006978:	645a      	str	r2, [r3, #68]	; 0x44
2000697a:	687b      	ldr	r3, [r7, #4]
2000697c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006980:	b2db      	uxtb	r3, r3
20006982:	2b01      	cmp	r3, #1
20006984:	d104      	bne.n	20006990 <I2C_isr+0xa30>
20006986:	687b      	ldr	r3, [r7, #4]
20006988:	f04f 0202 	mov.w	r2, #2
2000698c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006990:	687b      	ldr	r3, [r7, #4]
20006992:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006996:	b2db      	uxtb	r3, r3
20006998:	2b01      	cmp	r3, #1
2000699a:	d110      	bne.n	200069be <I2C_isr+0xa5e>
2000699c:	687b      	ldr	r3, [r7, #4]
2000699e:	f04f 0202 	mov.w	r2, #2
200069a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
200069a6:	e00a      	b.n	200069be <I2C_isr+0xa5e>
200069a8:	bf00      	nop
200069aa:	e008      	b.n	200069be <I2C_isr+0xa5e>
200069ac:	bf00      	nop
200069ae:	e006      	b.n	200069be <I2C_isr+0xa5e>
200069b0:	bf00      	nop
200069b2:	e004      	b.n	200069be <I2C_isr+0xa5e>
200069b4:	bf00      	nop
200069b6:	e002      	b.n	200069be <I2C_isr+0xa5e>
200069b8:	bf00      	nop
200069ba:	e000      	b.n	200069be <I2C_isr+0xa5e>
200069bc:	bf00      	nop
200069be:	7bbb      	ldrb	r3, [r7, #14]
200069c0:	2b00      	cmp	r3, #0
200069c2:	d00a      	beq.n	200069da <I2C_isr+0xa7a>
200069c4:	687b      	ldr	r3, [r7, #4]
200069c6:	681b      	ldr	r3, [r3, #0]
200069c8:	4618      	mov	r0, r3
200069ca:	f04f 0103 	mov.w	r1, #3
200069ce:	f04f 0208 	mov.w	r2, #8
200069d2:	f04f 0300 	mov.w	r3, #0
200069d6:	f000 facc 	bl	20006f72 <HW_set_8bit_reg_field>
200069da:	687b      	ldr	r3, [r7, #4]
200069dc:	681b      	ldr	r3, [r3, #0]
200069de:	f103 0304 	add.w	r3, r3, #4
200069e2:	4618      	mov	r0, r3
200069e4:	f000 fac3 	bl	20006f6e <HW_get_8bit_reg>
200069e8:	4603      	mov	r3, r0
200069ea:	72fb      	strb	r3, [r7, #11]
200069ec:	f107 0710 	add.w	r7, r7, #16
200069f0:	46bd      	mov	sp, r7
200069f2:	bdb0      	pop	{r4, r5, r7, pc}

200069f4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200069f4:	b480      	push	{r7}
200069f6:	b083      	sub	sp, #12
200069f8:	af00      	add	r7, sp, #0
200069fa:	4603      	mov	r3, r0
200069fc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200069fe:	f24e 1300 	movw	r3, #57600	; 0xe100
20006a02:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006a06:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006a0a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006a0e:	79f9      	ldrb	r1, [r7, #7]
20006a10:	f001 011f 	and.w	r1, r1, #31
20006a14:	f04f 0001 	mov.w	r0, #1
20006a18:	fa00 f101 	lsl.w	r1, r0, r1
20006a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006a20:	f107 070c 	add.w	r7, r7, #12
20006a24:	46bd      	mov	sp, r7
20006a26:	bc80      	pop	{r7}
20006a28:	4770      	bx	lr
20006a2a:	bf00      	nop

20006a2c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20006a2c:	b480      	push	{r7}
20006a2e:	b083      	sub	sp, #12
20006a30:	af00      	add	r7, sp, #0
20006a32:	4603      	mov	r3, r0
20006a34:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20006a36:	f24e 1300 	movw	r3, #57600	; 0xe100
20006a3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006a3e:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006a42:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006a46:	79f9      	ldrb	r1, [r7, #7]
20006a48:	f001 011f 	and.w	r1, r1, #31
20006a4c:	f04f 0001 	mov.w	r0, #1
20006a50:	fa00 f101 	lsl.w	r1, r0, r1
20006a54:	f102 0220 	add.w	r2, r2, #32
20006a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006a5c:	f107 070c 	add.w	r7, r7, #12
20006a60:	46bd      	mov	sp, r7
20006a62:	bc80      	pop	{r7}
20006a64:	4770      	bx	lr
20006a66:	bf00      	nop

20006a68 <I2C_enable_irq>:
20006a68:	b580      	push	{r7, lr}
20006a6a:	b082      	sub	sp, #8
20006a6c:	af00      	add	r7, sp, #0
20006a6e:	6078      	str	r0, [r7, #4]
20006a70:	687a      	ldr	r2, [r7, #4]
20006a72:	f64d 3368 	movw	r3, #56168	; 0xdb68
20006a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006a7a:	429a      	cmp	r2, r3
20006a7c:	d103      	bne.n	20006a86 <I2C_enable_irq+0x1e>
20006a7e:	f04f 0022 	mov.w	r0, #34	; 0x22
20006a82:	f7ff ffb7 	bl	200069f4 <NVIC_EnableIRQ>
20006a86:	687a      	ldr	r2, [r7, #4]
20006a88:	f64d 33d4 	movw	r3, #56276	; 0xdbd4
20006a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006a90:	429a      	cmp	r2, r3
20006a92:	d103      	bne.n	20006a9c <I2C_enable_irq+0x34>
20006a94:	f04f 0023 	mov.w	r0, #35	; 0x23
20006a98:	f7ff ffac 	bl	200069f4 <NVIC_EnableIRQ>
20006a9c:	687a      	ldr	r2, [r7, #4]
20006a9e:	f24d 63ac 	movw	r3, #54956	; 0xd6ac
20006aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006aa6:	429a      	cmp	r2, r3
20006aa8:	d103      	bne.n	20006ab2 <I2C_enable_irq+0x4a>
20006aaa:	f04f 0024 	mov.w	r0, #36	; 0x24
20006aae:	f7ff ffa1 	bl	200069f4 <NVIC_EnableIRQ>
20006ab2:	687a      	ldr	r2, [r7, #4]
20006ab4:	f64d 43ac 	movw	r3, #56492	; 0xdcac
20006ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006abc:	429a      	cmp	r2, r3
20006abe:	d103      	bne.n	20006ac8 <I2C_enable_irq+0x60>
20006ac0:	f04f 0025 	mov.w	r0, #37	; 0x25
20006ac4:	f7ff ff96 	bl	200069f4 <NVIC_EnableIRQ>
20006ac8:	687a      	ldr	r2, [r7, #4]
20006aca:	f64d 5320 	movw	r3, #56608	; 0xdd20
20006ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ad2:	429a      	cmp	r2, r3
20006ad4:	d103      	bne.n	20006ade <I2C_enable_irq+0x76>
20006ad6:	f04f 0026 	mov.w	r0, #38	; 0x26
20006ada:	f7ff ff8b 	bl	200069f4 <NVIC_EnableIRQ>
20006ade:	687a      	ldr	r2, [r7, #4]
20006ae0:	f64d 4340 	movw	r3, #56384	; 0xdc40
20006ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ae8:	429a      	cmp	r2, r3
20006aea:	d103      	bne.n	20006af4 <I2C_enable_irq+0x8c>
20006aec:	f04f 0027 	mov.w	r0, #39	; 0x27
20006af0:	f7ff ff80 	bl	200069f4 <NVIC_EnableIRQ>
20006af4:	f107 0708 	add.w	r7, r7, #8
20006af8:	46bd      	mov	sp, r7
20006afa:	bd80      	pop	{r7, pc}

20006afc <I2C_disable_irq>:
20006afc:	b580      	push	{r7, lr}
20006afe:	b082      	sub	sp, #8
20006b00:	af00      	add	r7, sp, #0
20006b02:	6078      	str	r0, [r7, #4]
20006b04:	687a      	ldr	r2, [r7, #4]
20006b06:	f64d 3368 	movw	r3, #56168	; 0xdb68
20006b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b0e:	429a      	cmp	r2, r3
20006b10:	d103      	bne.n	20006b1a <I2C_disable_irq+0x1e>
20006b12:	f04f 0022 	mov.w	r0, #34	; 0x22
20006b16:	f7ff ff89 	bl	20006a2c <NVIC_DisableIRQ>
20006b1a:	687a      	ldr	r2, [r7, #4]
20006b1c:	f64d 33d4 	movw	r3, #56276	; 0xdbd4
20006b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b24:	429a      	cmp	r2, r3
20006b26:	d103      	bne.n	20006b30 <I2C_disable_irq+0x34>
20006b28:	f04f 0023 	mov.w	r0, #35	; 0x23
20006b2c:	f7ff ff7e 	bl	20006a2c <NVIC_DisableIRQ>
20006b30:	687a      	ldr	r2, [r7, #4]
20006b32:	f24d 63ac 	movw	r3, #54956	; 0xd6ac
20006b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b3a:	429a      	cmp	r2, r3
20006b3c:	d103      	bne.n	20006b46 <I2C_disable_irq+0x4a>
20006b3e:	f04f 0024 	mov.w	r0, #36	; 0x24
20006b42:	f7ff ff73 	bl	20006a2c <NVIC_DisableIRQ>
20006b46:	687a      	ldr	r2, [r7, #4]
20006b48:	f64d 43ac 	movw	r3, #56492	; 0xdcac
20006b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b50:	429a      	cmp	r2, r3
20006b52:	d103      	bne.n	20006b5c <I2C_disable_irq+0x60>
20006b54:	f04f 0025 	mov.w	r0, #37	; 0x25
20006b58:	f7ff ff68 	bl	20006a2c <NVIC_DisableIRQ>
20006b5c:	687a      	ldr	r2, [r7, #4]
20006b5e:	f64d 5320 	movw	r3, #56608	; 0xdd20
20006b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b66:	429a      	cmp	r2, r3
20006b68:	d103      	bne.n	20006b72 <I2C_disable_irq+0x76>
20006b6a:	f04f 0026 	mov.w	r0, #38	; 0x26
20006b6e:	f7ff ff5d 	bl	20006a2c <NVIC_DisableIRQ>
20006b72:	687a      	ldr	r2, [r7, #4]
20006b74:	f64d 4340 	movw	r3, #56384	; 0xdc40
20006b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b7c:	429a      	cmp	r2, r3
20006b7e:	d103      	bne.n	20006b88 <I2C_disable_irq+0x8c>
20006b80:	f04f 0027 	mov.w	r0, #39	; 0x27
20006b84:	f7ff ff52 	bl	20006a2c <NVIC_DisableIRQ>
20006b88:	f107 0708 	add.w	r7, r7, #8
20006b8c:	46bd      	mov	sp, r7
20006b8e:	bd80      	pop	{r7, pc}

20006b90 <SystemInit>:
20006b90:	b580      	push	{r7, lr}
20006b92:	af00      	add	r7, sp, #0
20006b94:	f000 f96a 	bl	20006e6c <complete_clock_config>
20006b98:	f000 f936 	bl	20006e08 <silicon_workarounds>
20006b9c:	f64e 5300 	movw	r3, #60672	; 0xed00
20006ba0:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006ba4:	f64e 5200 	movw	r2, #60672	; 0xed00
20006ba8:	f2ce 0200 	movt	r2, #57344	; 0xe000
20006bac:	6952      	ldr	r2, [r2, #20]
20006bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20006bb2:	615a      	str	r2, [r3, #20]
20006bb4:	f7f9 fb7b 	bl	200002ae <mscc_post_hw_cfg_init>
20006bb8:	bd80      	pop	{r7, pc}
20006bba:	bf00      	nop

20006bbc <SystemCoreClockUpdate>:
20006bbc:	b580      	push	{r7, lr}
20006bbe:	b088      	sub	sp, #32
20006bc0:	af00      	add	r7, sp, #0
20006bc2:	f248 0300 	movw	r3, #32768	; 0x8000
20006bc6:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20006bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20006bd2:	60fb      	str	r3, [r7, #12]
20006bd4:	68fb      	ldr	r3, [r7, #12]
20006bd6:	2b00      	cmp	r3, #0
20006bd8:	f040 808b 	bne.w	20006cf2 <SystemCoreClockUpdate+0x136>
20006bdc:	f248 0300 	movw	r3, #32768	; 0x8000
20006be0:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006be4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20006be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20006bec:	617b      	str	r3, [r7, #20]
20006bee:	697b      	ldr	r3, [r7, #20]
20006bf0:	2b00      	cmp	r3, #0
20006bf2:	d13f      	bne.n	20006c74 <SystemCoreClockUpdate+0xb8>
20006bf4:	f247 333c 	movw	r3, #29500	; 0x733c
20006bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006bfc:	f24e 1200 	movw	r2, #57600	; 0xe100
20006c00:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006c04:	601a      	str	r2, [r3, #0]
20006c06:	f247 3340 	movw	r3, #29504	; 0x7340
20006c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006c0e:	f24e 1200 	movw	r2, #57600	; 0xe100
20006c12:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006c16:	601a      	str	r2, [r3, #0]
20006c18:	f247 3344 	movw	r3, #29508	; 0x7344
20006c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006c20:	f24e 1200 	movw	r2, #57600	; 0xe100
20006c24:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006c28:	601a      	str	r2, [r3, #0]
20006c2a:	f247 3348 	movw	r3, #29512	; 0x7348
20006c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006c32:	f24f 0280 	movw	r2, #61568	; 0xf080
20006c36:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20006c3a:	601a      	str	r2, [r3, #0]
20006c3c:	f247 334c 	movw	r3, #29516	; 0x734c
20006c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006c44:	f24e 1200 	movw	r2, #57600	; 0xe100
20006c48:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006c4c:	601a      	str	r2, [r3, #0]
20006c4e:	f247 3350 	movw	r3, #29520	; 0x7350
20006c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006c56:	f24e 1200 	movw	r2, #57600	; 0xe100
20006c5a:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006c5e:	601a      	str	r2, [r3, #0]
20006c60:	f247 3354 	movw	r3, #29524	; 0x7354
20006c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006c68:	f24e 1200 	movw	r2, #57600	; 0xe100
20006c6c:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006c70:	601a      	str	r2, [r3, #0]
20006c72:	e045      	b.n	20006d00 <SystemCoreClockUpdate+0x144>
20006c74:	f247 23d0 	movw	r3, #29392	; 0x72d0
20006c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006c7c:	f107 0204 	add.w	r2, r7, #4
20006c80:	e893 0003 	ldmia.w	r3, {r0, r1}
20006c84:	e882 0003 	stmia.w	r2, {r0, r1}
20006c88:	f248 0300 	movw	r3, #32768	; 0x8000
20006c8c:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
20006c94:	ea4f 1393 	mov.w	r3, r3, lsr #6
20006c98:	f003 0307 	and.w	r3, r3, #7
20006c9c:	61bb      	str	r3, [r7, #24]
20006c9e:	69bb      	ldr	r3, [r7, #24]
20006ca0:	f107 0220 	add.w	r2, r7, #32
20006ca4:	4413      	add	r3, r2
20006ca6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
20006caa:	77fb      	strb	r3, [r7, #31]
20006cac:	7ffb      	ldrb	r3, [r7, #31]
20006cae:	2b01      	cmp	r3, #1
20006cb0:	d00b      	beq.n	20006cca <SystemCoreClockUpdate+0x10e>
20006cb2:	2b02      	cmp	r3, #2
20006cb4:	d00e      	beq.n	20006cd4 <SystemCoreClockUpdate+0x118>
20006cb6:	2b00      	cmp	r3, #0
20006cb8:	d114      	bne.n	20006ce4 <SystemCoreClockUpdate+0x128>
20006cba:	f000 f825 	bl	20006d08 <get_rcosc_25_50mhz_frequency>
20006cbe:	4603      	mov	r3, r0
20006cc0:	613b      	str	r3, [r7, #16]
20006cc2:	6938      	ldr	r0, [r7, #16]
20006cc4:	f000 f842 	bl	20006d4c <set_clock_frequency_globals>
20006cc8:	e01a      	b.n	20006d00 <SystemCoreClockUpdate+0x144>
20006cca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20006cce:	f000 f83d 	bl	20006d4c <set_clock_frequency_globals>
20006cd2:	e015      	b.n	20006d00 <SystemCoreClockUpdate+0x144>
20006cd4:	f244 2040 	movw	r0, #16960	; 0x4240
20006cd8:	f2c0 000f 	movt	r0, #15
20006cdc:	f000 f836 	bl	20006d4c <set_clock_frequency_globals>
20006ce0:	bf00      	nop
20006ce2:	e00d      	b.n	20006d00 <SystemCoreClockUpdate+0x144>
20006ce4:	f244 2040 	movw	r0, #16960	; 0x4240
20006ce8:	f2c0 000f 	movt	r0, #15
20006cec:	f000 f82e 	bl	20006d4c <set_clock_frequency_globals>
20006cf0:	e006      	b.n	20006d00 <SystemCoreClockUpdate+0x144>
20006cf2:	f000 f809 	bl	20006d08 <get_rcosc_25_50mhz_frequency>
20006cf6:	4603      	mov	r3, r0
20006cf8:	613b      	str	r3, [r7, #16]
20006cfa:	6938      	ldr	r0, [r7, #16]
20006cfc:	f000 f826 	bl	20006d4c <set_clock_frequency_globals>
20006d00:	f107 0720 	add.w	r7, r7, #32
20006d04:	46bd      	mov	sp, r7
20006d06:	bd80      	pop	{r7, pc}

20006d08 <get_rcosc_25_50mhz_frequency>:
20006d08:	b480      	push	{r7}
20006d0a:	b083      	sub	sp, #12
20006d0c:	af00      	add	r7, sp, #0
20006d0e:	f248 0300 	movw	r3, #32768	; 0x8000
20006d12:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006d16:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20006d1a:	f003 0304 	and.w	r3, r3, #4
20006d1e:	603b      	str	r3, [r7, #0]
20006d20:	683b      	ldr	r3, [r7, #0]
20006d22:	2b00      	cmp	r3, #0
20006d24:	d105      	bne.n	20006d32 <get_rcosc_25_50mhz_frequency+0x2a>
20006d26:	f647 0340 	movw	r3, #30784	; 0x7840
20006d2a:	f2c0 137d 	movt	r3, #381	; 0x17d
20006d2e:	607b      	str	r3, [r7, #4]
20006d30:	e004      	b.n	20006d3c <get_rcosc_25_50mhz_frequency+0x34>
20006d32:	f24f 0380 	movw	r3, #61568	; 0xf080
20006d36:	f2c0 23fa 	movt	r3, #762	; 0x2fa
20006d3a:	607b      	str	r3, [r7, #4]
20006d3c:	687b      	ldr	r3, [r7, #4]
20006d3e:	4618      	mov	r0, r3
20006d40:	f107 070c 	add.w	r7, r7, #12
20006d44:	46bd      	mov	sp, r7
20006d46:	bc80      	pop	{r7}
20006d48:	4770      	bx	lr
20006d4a:	bf00      	nop

20006d4c <set_clock_frequency_globals>:
20006d4c:	b480      	push	{r7}
20006d4e:	b083      	sub	sp, #12
20006d50:	af00      	add	r7, sp, #0
20006d52:	6078      	str	r0, [r7, #4]
20006d54:	f247 333c 	movw	r3, #29500	; 0x733c
20006d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d5c:	687a      	ldr	r2, [r7, #4]
20006d5e:	601a      	str	r2, [r3, #0]
20006d60:	f247 3340 	movw	r3, #29504	; 0x7340
20006d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d68:	687a      	ldr	r2, [r7, #4]
20006d6a:	601a      	str	r2, [r3, #0]
20006d6c:	f247 3344 	movw	r3, #29508	; 0x7344
20006d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d74:	687a      	ldr	r2, [r7, #4]
20006d76:	601a      	str	r2, [r3, #0]
20006d78:	f247 3348 	movw	r3, #29512	; 0x7348
20006d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d80:	f24f 0280 	movw	r2, #61568	; 0xf080
20006d84:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20006d88:	601a      	str	r2, [r3, #0]
20006d8a:	f247 334c 	movw	r3, #29516	; 0x734c
20006d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d92:	687a      	ldr	r2, [r7, #4]
20006d94:	601a      	str	r2, [r3, #0]
20006d96:	f247 3350 	movw	r3, #29520	; 0x7350
20006d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d9e:	687a      	ldr	r2, [r7, #4]
20006da0:	601a      	str	r2, [r3, #0]
20006da2:	f247 3354 	movw	r3, #29524	; 0x7354
20006da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006daa:	687a      	ldr	r2, [r7, #4]
20006dac:	601a      	str	r2, [r3, #0]
20006dae:	f107 070c 	add.w	r7, r7, #12
20006db2:	46bd      	mov	sp, r7
20006db4:	bc80      	pop	{r7}
20006db6:	4770      	bx	lr

20006db8 <get_silicon_revision>:
20006db8:	b480      	push	{r7}
20006dba:	b083      	sub	sp, #12
20006dbc:	af00      	add	r7, sp, #0
20006dbe:	f248 0300 	movw	r3, #32768	; 0x8000
20006dc2:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006dc6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
20006dca:	607b      	str	r3, [r7, #4]
20006dcc:	687a      	ldr	r2, [r7, #4]
20006dce:	f64f 0302 	movw	r3, #63490	; 0xf802
20006dd2:	429a      	cmp	r2, r3
20006dd4:	d006      	beq.n	20006de4 <get_silicon_revision+0x2c>
20006dd6:	f64f 0302 	movw	r3, #63490	; 0xf802
20006dda:	f2c0 0301 	movt	r3, #1
20006dde:	429a      	cmp	r2, r3
20006de0:	d004      	beq.n	20006dec <get_silicon_revision+0x34>
20006de2:	e007      	b.n	20006df4 <get_silicon_revision+0x3c>
20006de4:	f04f 0301 	mov.w	r3, #1
20006de8:	603b      	str	r3, [r7, #0]
20006dea:	e006      	b.n	20006dfa <get_silicon_revision+0x42>
20006dec:	f04f 0302 	mov.w	r3, #2
20006df0:	603b      	str	r3, [r7, #0]
20006df2:	e002      	b.n	20006dfa <get_silicon_revision+0x42>
20006df4:	f04f 0300 	mov.w	r3, #0
20006df8:	603b      	str	r3, [r7, #0]
20006dfa:	683b      	ldr	r3, [r7, #0]
20006dfc:	4618      	mov	r0, r3
20006dfe:	f107 070c 	add.w	r7, r7, #12
20006e02:	46bd      	mov	sp, r7
20006e04:	bc80      	pop	{r7}
20006e06:	4770      	bx	lr

20006e08 <silicon_workarounds>:
20006e08:	b580      	push	{r7, lr}
20006e0a:	b082      	sub	sp, #8
20006e0c:	af00      	add	r7, sp, #0
20006e0e:	f7ff ffd3 	bl	20006db8 <get_silicon_revision>
20006e12:	4603      	mov	r3, r0
20006e14:	607b      	str	r3, [r7, #4]
20006e16:	687b      	ldr	r3, [r7, #4]
20006e18:	2b01      	cmp	r3, #1
20006e1a:	d101      	bne.n	20006e20 <silicon_workarounds+0x18>
20006e1c:	f000 f804 	bl	20006e28 <m2s050_rev_a_workarounds>
20006e20:	f107 0708 	add.w	r7, r7, #8
20006e24:	46bd      	mov	sp, r7
20006e26:	bd80      	pop	{r7, pc}

20006e28 <m2s050_rev_a_workarounds>:
20006e28:	b480      	push	{r7}
20006e2a:	af00      	add	r7, sp, #0
20006e2c:	f248 0300 	movw	r3, #32768	; 0x8000
20006e30:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006e34:	f248 0200 	movw	r2, #32768	; 0x8000
20006e38:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006e3c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20006e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20006e44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
20006e48:	f248 0300 	movw	r3, #32768	; 0x8000
20006e4c:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006e50:	f248 0200 	movw	r2, #32768	; 0x8000
20006e54:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006e58:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20006e5c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
20006e60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
20006e64:	46bd      	mov	sp, r7
20006e66:	bc80      	pop	{r7}
20006e68:	4770      	bx	lr
20006e6a:	bf00      	nop

20006e6c <complete_clock_config>:
20006e6c:	b480      	push	{r7}
20006e6e:	b083      	sub	sp, #12
20006e70:	af00      	add	r7, sp, #0
20006e72:	f248 0300 	movw	r3, #32768	; 0x8000
20006e76:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006e7a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20006e7e:	f003 0301 	and.w	r3, r3, #1
20006e82:	607b      	str	r3, [r7, #4]
20006e84:	687b      	ldr	r3, [r7, #4]
20006e86:	2b00      	cmp	r3, #0
20006e88:	d0f3      	beq.n	20006e72 <complete_clock_config+0x6>
20006e8a:	f248 0300 	movw	r3, #32768	; 0x8000
20006e8e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006e92:	f248 0200 	movw	r2, #32768	; 0x8000
20006e96:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006e9a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
20006e9e:	f022 0201 	bic.w	r2, r2, #1
20006ea2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
20006ea6:	f248 0300 	movw	r3, #32768	; 0x8000
20006eaa:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006eae:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20006eb2:	f003 0302 	and.w	r3, r3, #2
20006eb6:	607b      	str	r3, [r7, #4]
20006eb8:	687b      	ldr	r3, [r7, #4]
20006eba:	2b00      	cmp	r3, #0
20006ebc:	d0f3      	beq.n	20006ea6 <complete_clock_config+0x3a>
20006ebe:	f248 0300 	movw	r3, #32768	; 0x8000
20006ec2:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006ec6:	f248 0200 	movw	r2, #32768	; 0x8000
20006eca:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006ece:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20006ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20006ed6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
20006eda:	f248 0300 	movw	r3, #32768	; 0x8000
20006ede:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006ee2:	f248 0200 	movw	r2, #32768	; 0x8000
20006ee6:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006eea:	6c92      	ldr	r2, [r2, #72]	; 0x48
20006eec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20006ef0:	649a      	str	r2, [r3, #72]	; 0x48
20006ef2:	f107 070c 	add.w	r7, r7, #12
20006ef6:	46bd      	mov	sp, r7
20006ef8:	bc80      	pop	{r7}
20006efa:	4770      	bx	lr

20006efc <HAL_disable_interrupts>:
20006efc:	f3ef 8010 	mrs	r0, PRIMASK
20006f00:	b672      	cpsid	i
20006f02:	4770      	bx	lr

20006f04 <HAL_restore_interrupts>:
20006f04:	f380 8810 	msr	PRIMASK, r0
20006f08:	4770      	bx	lr

20006f0a <HW_set_32bit_reg>:
20006f0a:	6001      	str	r1, [r0, #0]
20006f0c:	4770      	bx	lr

20006f0e <HW_get_32bit_reg>:
20006f0e:	6800      	ldr	r0, [r0, #0]
20006f10:	4770      	bx	lr

20006f12 <HW_set_32bit_reg_field>:
20006f12:	b50e      	push	{r1, r2, r3, lr}
20006f14:	fa03 f301 	lsl.w	r3, r3, r1
20006f18:	ea03 0302 	and.w	r3, r3, r2
20006f1c:	6801      	ldr	r1, [r0, #0]
20006f1e:	ea6f 0202 	mvn.w	r2, r2
20006f22:	ea01 0102 	and.w	r1, r1, r2
20006f26:	ea41 0103 	orr.w	r1, r1, r3
20006f2a:	6001      	str	r1, [r0, #0]
20006f2c:	bd0e      	pop	{r1, r2, r3, pc}

20006f2e <HW_get_32bit_reg_field>:
20006f2e:	6800      	ldr	r0, [r0, #0]
20006f30:	ea00 0002 	and.w	r0, r0, r2
20006f34:	fa20 f001 	lsr.w	r0, r0, r1
20006f38:	4770      	bx	lr

20006f3a <HW_set_16bit_reg>:
20006f3a:	8001      	strh	r1, [r0, #0]
20006f3c:	4770      	bx	lr

20006f3e <HW_get_16bit_reg>:
20006f3e:	8800      	ldrh	r0, [r0, #0]
20006f40:	4770      	bx	lr

20006f42 <HW_set_16bit_reg_field>:
20006f42:	b50e      	push	{r1, r2, r3, lr}
20006f44:	fa03 f301 	lsl.w	r3, r3, r1
20006f48:	ea03 0302 	and.w	r3, r3, r2
20006f4c:	8801      	ldrh	r1, [r0, #0]
20006f4e:	ea6f 0202 	mvn.w	r2, r2
20006f52:	ea01 0102 	and.w	r1, r1, r2
20006f56:	ea41 0103 	orr.w	r1, r1, r3
20006f5a:	8001      	strh	r1, [r0, #0]
20006f5c:	bd0e      	pop	{r1, r2, r3, pc}

20006f5e <HW_get_16bit_reg_field>:
20006f5e:	8800      	ldrh	r0, [r0, #0]
20006f60:	ea00 0002 	and.w	r0, r0, r2
20006f64:	fa20 f001 	lsr.w	r0, r0, r1
20006f68:	4770      	bx	lr

20006f6a <HW_set_8bit_reg>:
20006f6a:	7001      	strb	r1, [r0, #0]
20006f6c:	4770      	bx	lr

20006f6e <HW_get_8bit_reg>:
20006f6e:	7800      	ldrb	r0, [r0, #0]
20006f70:	4770      	bx	lr

20006f72 <HW_set_8bit_reg_field>:
20006f72:	b50e      	push	{r1, r2, r3, lr}
20006f74:	fa03 f301 	lsl.w	r3, r3, r1
20006f78:	ea03 0302 	and.w	r3, r3, r2
20006f7c:	7801      	ldrb	r1, [r0, #0]
20006f7e:	ea6f 0202 	mvn.w	r2, r2
20006f82:	ea01 0102 	and.w	r1, r1, r2
20006f86:	ea41 0103 	orr.w	r1, r1, r3
20006f8a:	7001      	strb	r1, [r0, #0]
20006f8c:	bd0e      	pop	{r1, r2, r3, pc}

20006f8e <HW_get_8bit_reg_field>:
20006f8e:	7800      	ldrb	r0, [r0, #0]
20006f90:	ea00 0002 	and.w	r0, r0, r2
20006f94:	fa20 f001 	lsr.w	r0, r0, r1
20006f98:	4770      	bx	lr
	...

20006f9c <__libc_init_array>:
20006f9c:	b570      	push	{r4, r5, r6, lr}
20006f9e:	f247 26f0 	movw	r6, #29424	; 0x72f0
20006fa2:	f247 25f0 	movw	r5, #29424	; 0x72f0
20006fa6:	f2c2 0600 	movt	r6, #8192	; 0x2000
20006faa:	f2c2 0500 	movt	r5, #8192	; 0x2000
20006fae:	1b76      	subs	r6, r6, r5
20006fb0:	10b6      	asrs	r6, r6, #2
20006fb2:	d006      	beq.n	20006fc2 <__libc_init_array+0x26>
20006fb4:	2400      	movs	r4, #0
20006fb6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20006fba:	3401      	adds	r4, #1
20006fbc:	4798      	blx	r3
20006fbe:	42a6      	cmp	r6, r4
20006fc0:	d8f9      	bhi.n	20006fb6 <__libc_init_array+0x1a>
20006fc2:	f247 25f0 	movw	r5, #29424	; 0x72f0
20006fc6:	f247 26f4 	movw	r6, #29428	; 0x72f4
20006fca:	f2c2 0500 	movt	r5, #8192	; 0x2000
20006fce:	f2c2 0600 	movt	r6, #8192	; 0x2000
20006fd2:	1b76      	subs	r6, r6, r5
20006fd4:	f000 f980 	bl	200072d8 <_init>
20006fd8:	10b6      	asrs	r6, r6, #2
20006fda:	d006      	beq.n	20006fea <__libc_init_array+0x4e>
20006fdc:	2400      	movs	r4, #0
20006fde:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20006fe2:	3401      	adds	r4, #1
20006fe4:	4798      	blx	r3
20006fe6:	42a6      	cmp	r6, r4
20006fe8:	d8f9      	bhi.n	20006fde <__libc_init_array+0x42>
20006fea:	bd70      	pop	{r4, r5, r6, pc}

20006fec <memcpy>:
20006fec:	2a03      	cmp	r2, #3
20006fee:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
20006ff2:	d80b      	bhi.n	2000700c <memcpy+0x20>
20006ff4:	b13a      	cbz	r2, 20007006 <memcpy+0x1a>
20006ff6:	2300      	movs	r3, #0
20006ff8:	f811 c003 	ldrb.w	ip, [r1, r3]
20006ffc:	f800 c003 	strb.w	ip, [r0, r3]
20007000:	3301      	adds	r3, #1
20007002:	4293      	cmp	r3, r2
20007004:	d1f8      	bne.n	20006ff8 <memcpy+0xc>
20007006:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
2000700a:	4770      	bx	lr
2000700c:	1882      	adds	r2, r0, r2
2000700e:	460c      	mov	r4, r1
20007010:	4603      	mov	r3, r0
20007012:	e003      	b.n	2000701c <memcpy+0x30>
20007014:	f814 1c01 	ldrb.w	r1, [r4, #-1]
20007018:	f803 1c01 	strb.w	r1, [r3, #-1]
2000701c:	f003 0603 	and.w	r6, r3, #3
20007020:	4619      	mov	r1, r3
20007022:	46a4      	mov	ip, r4
20007024:	3301      	adds	r3, #1
20007026:	3401      	adds	r4, #1
20007028:	2e00      	cmp	r6, #0
2000702a:	d1f3      	bne.n	20007014 <memcpy+0x28>
2000702c:	f01c 0403 	ands.w	r4, ip, #3
20007030:	4663      	mov	r3, ip
20007032:	bf08      	it	eq
20007034:	ebc1 0c02 	rsbeq	ip, r1, r2
20007038:	d068      	beq.n	2000710c <memcpy+0x120>
2000703a:	4265      	negs	r5, r4
2000703c:	f1c4 0a04 	rsb	sl, r4, #4
20007040:	eb0c 0705 	add.w	r7, ip, r5
20007044:	4633      	mov	r3, r6
20007046:	ea4f 0aca 	mov.w	sl, sl, lsl #3
2000704a:	f85c 6005 	ldr.w	r6, [ip, r5]
2000704e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
20007052:	1a55      	subs	r5, r2, r1
20007054:	e008      	b.n	20007068 <memcpy+0x7c>
20007056:	f857 4f04 	ldr.w	r4, [r7, #4]!
2000705a:	4626      	mov	r6, r4
2000705c:	fa04 f40a 	lsl.w	r4, r4, sl
20007060:	ea49 0404 	orr.w	r4, r9, r4
20007064:	50cc      	str	r4, [r1, r3]
20007066:	3304      	adds	r3, #4
20007068:	185c      	adds	r4, r3, r1
2000706a:	2d03      	cmp	r5, #3
2000706c:	fa26 f908 	lsr.w	r9, r6, r8
20007070:	f1a5 0504 	sub.w	r5, r5, #4
20007074:	eb0c 0603 	add.w	r6, ip, r3
20007078:	dced      	bgt.n	20007056 <memcpy+0x6a>
2000707a:	2300      	movs	r3, #0
2000707c:	e002      	b.n	20007084 <memcpy+0x98>
2000707e:	5cf1      	ldrb	r1, [r6, r3]
20007080:	54e1      	strb	r1, [r4, r3]
20007082:	3301      	adds	r3, #1
20007084:	1919      	adds	r1, r3, r4
20007086:	4291      	cmp	r1, r2
20007088:	d3f9      	bcc.n	2000707e <memcpy+0x92>
2000708a:	e7bc      	b.n	20007006 <memcpy+0x1a>
2000708c:	f853 4c40 	ldr.w	r4, [r3, #-64]
20007090:	f841 4c40 	str.w	r4, [r1, #-64]
20007094:	f853 4c3c 	ldr.w	r4, [r3, #-60]
20007098:	f841 4c3c 	str.w	r4, [r1, #-60]
2000709c:	f853 4c38 	ldr.w	r4, [r3, #-56]
200070a0:	f841 4c38 	str.w	r4, [r1, #-56]
200070a4:	f853 4c34 	ldr.w	r4, [r3, #-52]
200070a8:	f841 4c34 	str.w	r4, [r1, #-52]
200070ac:	f853 4c30 	ldr.w	r4, [r3, #-48]
200070b0:	f841 4c30 	str.w	r4, [r1, #-48]
200070b4:	f853 4c2c 	ldr.w	r4, [r3, #-44]
200070b8:	f841 4c2c 	str.w	r4, [r1, #-44]
200070bc:	f853 4c28 	ldr.w	r4, [r3, #-40]
200070c0:	f841 4c28 	str.w	r4, [r1, #-40]
200070c4:	f853 4c24 	ldr.w	r4, [r3, #-36]
200070c8:	f841 4c24 	str.w	r4, [r1, #-36]
200070cc:	f853 4c20 	ldr.w	r4, [r3, #-32]
200070d0:	f841 4c20 	str.w	r4, [r1, #-32]
200070d4:	f853 4c1c 	ldr.w	r4, [r3, #-28]
200070d8:	f841 4c1c 	str.w	r4, [r1, #-28]
200070dc:	f853 4c18 	ldr.w	r4, [r3, #-24]
200070e0:	f841 4c18 	str.w	r4, [r1, #-24]
200070e4:	f853 4c14 	ldr.w	r4, [r3, #-20]
200070e8:	f841 4c14 	str.w	r4, [r1, #-20]
200070ec:	f853 4c10 	ldr.w	r4, [r3, #-16]
200070f0:	f841 4c10 	str.w	r4, [r1, #-16]
200070f4:	f853 4c0c 	ldr.w	r4, [r3, #-12]
200070f8:	f841 4c0c 	str.w	r4, [r1, #-12]
200070fc:	f853 4c08 	ldr.w	r4, [r3, #-8]
20007100:	f841 4c08 	str.w	r4, [r1, #-8]
20007104:	f853 4c04 	ldr.w	r4, [r3, #-4]
20007108:	f841 4c04 	str.w	r4, [r1, #-4]
2000710c:	461c      	mov	r4, r3
2000710e:	460d      	mov	r5, r1
20007110:	3340      	adds	r3, #64	; 0x40
20007112:	3140      	adds	r1, #64	; 0x40
20007114:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
20007118:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
2000711c:	dcb6      	bgt.n	2000708c <memcpy+0xa0>
2000711e:	4621      	mov	r1, r4
20007120:	462b      	mov	r3, r5
20007122:	1b54      	subs	r4, r2, r5
20007124:	e00f      	b.n	20007146 <memcpy+0x15a>
20007126:	f851 5c10 	ldr.w	r5, [r1, #-16]
2000712a:	f843 5c10 	str.w	r5, [r3, #-16]
2000712e:	f851 5c0c 	ldr.w	r5, [r1, #-12]
20007132:	f843 5c0c 	str.w	r5, [r3, #-12]
20007136:	f851 5c08 	ldr.w	r5, [r1, #-8]
2000713a:	f843 5c08 	str.w	r5, [r3, #-8]
2000713e:	f851 5c04 	ldr.w	r5, [r1, #-4]
20007142:	f843 5c04 	str.w	r5, [r3, #-4]
20007146:	2c0f      	cmp	r4, #15
20007148:	460d      	mov	r5, r1
2000714a:	469c      	mov	ip, r3
2000714c:	f101 0110 	add.w	r1, r1, #16
20007150:	f103 0310 	add.w	r3, r3, #16
20007154:	f1a4 0410 	sub.w	r4, r4, #16
20007158:	dce5      	bgt.n	20007126 <memcpy+0x13a>
2000715a:	ebcc 0102 	rsb	r1, ip, r2
2000715e:	2300      	movs	r3, #0
20007160:	e003      	b.n	2000716a <memcpy+0x17e>
20007162:	58ec      	ldr	r4, [r5, r3]
20007164:	f84c 4003 	str.w	r4, [ip, r3]
20007168:	3304      	adds	r3, #4
2000716a:	195e      	adds	r6, r3, r5
2000716c:	2903      	cmp	r1, #3
2000716e:	eb03 040c 	add.w	r4, r3, ip
20007172:	f1a1 0104 	sub.w	r1, r1, #4
20007176:	dcf4      	bgt.n	20007162 <memcpy+0x176>
20007178:	e77f      	b.n	2000707a <memcpy+0x8e>
2000717a:	bf00      	nop

2000717c <memset>:
2000717c:	2a03      	cmp	r2, #3
2000717e:	b2c9      	uxtb	r1, r1
20007180:	b430      	push	{r4, r5}
20007182:	d807      	bhi.n	20007194 <memset+0x18>
20007184:	b122      	cbz	r2, 20007190 <memset+0x14>
20007186:	2300      	movs	r3, #0
20007188:	54c1      	strb	r1, [r0, r3]
2000718a:	3301      	adds	r3, #1
2000718c:	4293      	cmp	r3, r2
2000718e:	d1fb      	bne.n	20007188 <memset+0xc>
20007190:	bc30      	pop	{r4, r5}
20007192:	4770      	bx	lr
20007194:	eb00 0c02 	add.w	ip, r0, r2
20007198:	4603      	mov	r3, r0
2000719a:	e001      	b.n	200071a0 <memset+0x24>
2000719c:	f803 1c01 	strb.w	r1, [r3, #-1]
200071a0:	f003 0403 	and.w	r4, r3, #3
200071a4:	461a      	mov	r2, r3
200071a6:	3301      	adds	r3, #1
200071a8:	2c00      	cmp	r4, #0
200071aa:	d1f7      	bne.n	2000719c <memset+0x20>
200071ac:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
200071b0:	ebc2 040c 	rsb	r4, r2, ip
200071b4:	fb03 f301 	mul.w	r3, r3, r1
200071b8:	e01f      	b.n	200071fa <memset+0x7e>
200071ba:	f842 3c40 	str.w	r3, [r2, #-64]
200071be:	f842 3c3c 	str.w	r3, [r2, #-60]
200071c2:	f842 3c38 	str.w	r3, [r2, #-56]
200071c6:	f842 3c34 	str.w	r3, [r2, #-52]
200071ca:	f842 3c30 	str.w	r3, [r2, #-48]
200071ce:	f842 3c2c 	str.w	r3, [r2, #-44]
200071d2:	f842 3c28 	str.w	r3, [r2, #-40]
200071d6:	f842 3c24 	str.w	r3, [r2, #-36]
200071da:	f842 3c20 	str.w	r3, [r2, #-32]
200071de:	f842 3c1c 	str.w	r3, [r2, #-28]
200071e2:	f842 3c18 	str.w	r3, [r2, #-24]
200071e6:	f842 3c14 	str.w	r3, [r2, #-20]
200071ea:	f842 3c10 	str.w	r3, [r2, #-16]
200071ee:	f842 3c0c 	str.w	r3, [r2, #-12]
200071f2:	f842 3c08 	str.w	r3, [r2, #-8]
200071f6:	f842 3c04 	str.w	r3, [r2, #-4]
200071fa:	4615      	mov	r5, r2
200071fc:	3240      	adds	r2, #64	; 0x40
200071fe:	2c3f      	cmp	r4, #63	; 0x3f
20007200:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20007204:	dcd9      	bgt.n	200071ba <memset+0x3e>
20007206:	462a      	mov	r2, r5
20007208:	ebc5 040c 	rsb	r4, r5, ip
2000720c:	e007      	b.n	2000721e <memset+0xa2>
2000720e:	f842 3c10 	str.w	r3, [r2, #-16]
20007212:	f842 3c0c 	str.w	r3, [r2, #-12]
20007216:	f842 3c08 	str.w	r3, [r2, #-8]
2000721a:	f842 3c04 	str.w	r3, [r2, #-4]
2000721e:	4615      	mov	r5, r2
20007220:	3210      	adds	r2, #16
20007222:	2c0f      	cmp	r4, #15
20007224:	f1a4 0410 	sub.w	r4, r4, #16
20007228:	dcf1      	bgt.n	2000720e <memset+0x92>
2000722a:	462a      	mov	r2, r5
2000722c:	ebc5 050c 	rsb	r5, r5, ip
20007230:	e001      	b.n	20007236 <memset+0xba>
20007232:	f842 3c04 	str.w	r3, [r2, #-4]
20007236:	4614      	mov	r4, r2
20007238:	3204      	adds	r2, #4
2000723a:	2d03      	cmp	r5, #3
2000723c:	f1a5 0504 	sub.w	r5, r5, #4
20007240:	dcf7      	bgt.n	20007232 <memset+0xb6>
20007242:	e001      	b.n	20007248 <memset+0xcc>
20007244:	f804 1b01 	strb.w	r1, [r4], #1
20007248:	4564      	cmp	r4, ip
2000724a:	d3fb      	bcc.n	20007244 <memset+0xc8>
2000724c:	e7a0      	b.n	20007190 <memset+0x14>
2000724e:	bf00      	nop

20007250 <C.48.4660>:
20007250:	6a10 0000                                   .j..

20007254 <C.40.4595>:
20007254:	6020 0000 4449 454c 0000 0000 2509 0963      `..IDLE.....%c.
20007264:	7525 2509 0975 7525 0a0d 0000 2509 0975     %u.%u.%u.....%u.
20007274:	2509 2575 0d25 000a 2509 0975 3c09 2531     .%u%%....%u..<1%
20007284:	0d25 000a 6d54 2072 7653 0063               %...Tmr Svc.

20007290 <xHeapStructSize>:
20007290:	0008 0000                                   ....

20007294 <pcInterruptPriorityRegisters>:
20007294:	e3f0 e000 4b48 0000 6150 6c79 616f 0064     ....HK..Payload.
200072a4:	6175 7472 695f 7172 0000 0000 4c54 5f4d     uart_irq....TLM_
200072b4:	6154 6b73 545f 6d69 7265 0000 6553 646e     Task_Timer..Send
200072c4:	7265 545f 6d69 7265 0000 0000               er_Timer....

200072d0 <C.18.3459>:
200072d0:	0100 0100 0202 0303                         ........

200072d8 <_init>:
200072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200072da:	bf00      	nop
200072dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
200072de:	bc08      	pop	{r3}
200072e0:	469e      	mov	lr, r3
200072e2:	4770      	bx	lr

200072e4 <_fini>:
200072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200072e6:	bf00      	nop
200072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200072ea:	bc08      	pop	{r3}
200072ec:	469e      	mov	lr, r3
200072ee:	4770      	bx	lr

200072f0 <__frame_dummy_init_array_entry>:
200072f0:	0305 2000                                   ... 

200072f4 <__do_global_dtors_aux_fini_array_entry>:
200072f4:	02f1 2000                                   ... 
