
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000084c0  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  200084c0  200084c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006c38  20008520  20008520  00010520  2**2
                  ALLOC
  3 .stack        00000400  2000f158  2000f158  00010520  2**0
                  ALLOC
  4 .comment      00000489  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000d20  00000000  00000000  000109a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00002190  00000000  00000000  000116c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000120b0  00000000  00000000  00013859  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002838  00000000  00000000  00025909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001287c  00000000  00000000  00028141  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002bb4  00000000  00000000  0003a9c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004ec5  00000000  00000000  0003d574  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000048fc  00000000  00000000  00042439  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000d6542  00000000  00000000  00046d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0011d277  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000ca8  00000000  00000000  0011d29c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	200044c1 	.word	0x200044c1
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	200046f1 	.word	0x200046f1
2000003c:	20004741 	.word	0x20004741
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20006c91 	.word	0x20006c91
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20006cb5 	.word	0x20006cb5
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	200059c5 	.word	0x200059c5
2000006c:	200059e9 	.word	0x200059e9
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	20005515 	.word	0x20005515
200000cc:	20005529 	.word	0x20005529
200000d0:	2000553d 	.word	0x2000553d
200000d4:	20005551 	.word	0x20005551
200000d8:	20005565 	.word	0x20005565
200000dc:	20005579 	.word	0x20005579
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>
20000212:	e7fe      	b.n	20000212 <SPI1_IRQHandler+0x2>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>
20000218:	e7fe      	b.n	20000218 <I2C0_SMBus_IRQHandler+0x2>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	20007d55 	.word	0x20007d55
200002b4:	00000000 	.word	0x00000000
200002b8:	20000000 	.word	0x20000000
200002bc:	20000000 	.word	0x20000000
200002c0:	200084c0 	.word	0x200084c0
200002c4:	200084c0 	.word	0x200084c0
200002c8:	200084c0 	.word	0x200084c0
200002cc:	20008520 	.word	0x20008520
200002d0:	00000000 	.word	0x00000000
200002d4:	20008520 	.word	0x20008520
200002d8:	2000f158 	.word	0x2000f158
200002dc:	20008161 	.word	0x20008161
200002e0:	2000040d 	.word	0x2000040d
	...

200002f0 <__do_global_dtors_aux>:
200002f0:	f248 5320 	movw	r3, #34080	; 0x8520
200002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	b90a      	cbnz	r2, 20000300 <__do_global_dtors_aux+0x10>
200002fc:	2001      	movs	r0, #1
200002fe:	7018      	strb	r0, [r3, #0]
20000300:	4770      	bx	lr
20000302:	bf00      	nop

20000304 <frame_dummy>:
20000304:	f248 40c0 	movw	r0, #33984	; 0x84c0
20000308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000030c:	b508      	push	{r3, lr}
2000030e:	6803      	ldr	r3, [r0, #0]
20000310:	b12b      	cbz	r3, 2000031e <frame_dummy+0x1a>
20000312:	f240 0300 	movw	r3, #0
20000316:	f2c0 0300 	movt	r3, #0
2000031a:	b103      	cbz	r3, 2000031e <frame_dummy+0x1a>
2000031c:	4798      	blx	r3
2000031e:	bd08      	pop	{r3, pc}

20000320 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
20000320:	b480      	push	{r7}
20000322:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
20000324:	f64e 53fc 	movw	r3, #60924	; 0xedfc
20000328:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000032c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
20000330:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000334:	6812      	ldr	r2, [r2, #0]
20000336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2000033a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
2000033c:	f241 0304 	movw	r3, #4100	; 0x1004
20000340:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000344:	f04f 0200 	mov.w	r2, #0
20000348:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
2000034a:	f241 0300 	movw	r3, #4096	; 0x1000
2000034e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000352:	f241 0200 	movw	r2, #4096	; 0x1000
20000356:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000035a:	6812      	ldr	r2, [r2, #0]
2000035c:	f042 0201 	orr.w	r2, r2, #1
20000360:	601a      	str	r2, [r3, #0]
}
20000362:	46bd      	mov	sp, r7
20000364:	bc80      	pop	{r7}
20000366:	4770      	bx	lr

20000368 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
20000368:	b480      	push	{r7}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
2000036e:	f241 0304 	movw	r3, #4100	; 0x1004
20000372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
2000037a:	f248 5324 	movw	r3, #34084	; 0x8524
2000037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	687a      	ldr	r2, [r7, #4]
20000386:	429a      	cmp	r2, r3
20000388:	d20b      	bcs.n	200003a2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
2000038a:	f248 5328 	movw	r3, #34088	; 0x8528
2000038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	f103 0201 	add.w	r2, r3, #1
20000398:	f248 5328 	movw	r3, #34088	; 0x8528
2000039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003a0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
200003a2:	f248 5324 	movw	r3, #34084	; 0x8524
200003a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003aa:	687a      	ldr	r2, [r7, #4]
200003ac:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
200003ae:	f248 5304 	movw	r3, #34052	; 0x8504
200003b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003b6:	681a      	ldr	r2, [r3, #0]
200003b8:	f641 537f 	movw	r3, #7551	; 0x1d7f
200003bc:	f2c0 432c 	movt	r3, #1068	; 0x42c
200003c0:	429a      	cmp	r2, r3
200003c2:	d80e      	bhi.n	200003e2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	ea4f 3353 	mov.w	r3, r3, lsr #13
200003ca:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
200003cc:	f248 5328 	movw	r3, #34088	; 0x8528
200003d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
200003da:	687a      	ldr	r2, [r7, #4]
200003dc:	4413      	add	r3, r2
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e00d      	b.n	200003fe <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	ea4f 3393 	mov.w	r3, r3, lsr #14
200003e8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
200003ea:	f248 5328 	movw	r3, #34088	; 0x8528
200003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	ea4f 4383 	mov.w	r3, r3, lsl #18
200003f8:	687a      	ldr	r2, [r7, #4]
200003fa:	4413      	add	r3, r2
200003fc:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
200003fe:	687b      	ldr	r3, [r7, #4]
}
20000400:	4618      	mov	r0, r3
20000402:	f107 070c 	add.w	r7, r7, #12
20000406:	46bd      	mov	sp, r7
20000408:	bc80      	pop	{r7}
2000040a:	4770      	bx	lr

2000040c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
		//main_blinky();


//		demo();

		demo_tasks();
20000410:	f004 feca 	bl	200051a8 <demo_tasks>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
20000414:	f04f 0300 	mov.w	r3, #0
}
20000418:	4618      	mov	r0, r3
2000041a:	bd80      	pop	{r7, pc}

2000041c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
2000041c:	b480      	push	{r7}
2000041e:	b083      	sub	sp, #12
20000420:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000426:	f383 8811 	msr	BASEPRI, r3
2000042a:	f3bf 8f6f 	isb	sy
2000042e:	f3bf 8f4f 	dsb	sy
20000432:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000434:	e7fe      	b.n	20000434 <vApplicationMallocFailedHook+0x18>
20000436:	bf00      	nop

20000438 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
20000438:	b480      	push	{r7}
2000043a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
2000043c:	46bd      	mov	sp, r7
2000043e:	bc80      	pop	{r7}
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
20000444:	b480      	push	{r7}
20000446:	b085      	sub	sp, #20
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
2000044c:	6039      	str	r1, [r7, #0]
2000044e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000452:	f383 8811 	msr	BASEPRI, r3
20000456:	f3bf 8f6f 	isb	sy
2000045a:	f3bf 8f4f 	dsb	sy
2000045e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000460:	e7fe      	b.n	20000460 <vApplicationStackOverflowHook+0x1c>
20000462:	bf00      	nop

20000464 <set_pktRate>:
#include "stream.h"
//#include "Demo_Tasks/demo_tasks.h"



void set_pktRate(pkt_name_t pn, uint8_t sr){
20000464:	b480      	push	{r7}
20000466:	b083      	sub	sp, #12
20000468:	af00      	add	r7, sp, #0
2000046a:	4602      	mov	r2, r0
2000046c:	460b      	mov	r3, r1
2000046e:	71fa      	strb	r2, [r7, #7]
20000470:	71bb      	strb	r3, [r7, #6]

	pkt_stream[pn].rate = sr * 1000;
20000472:	79f9      	ldrb	r1, [r7, #7]
20000474:	79bb      	ldrb	r3, [r7, #6]
20000476:	461a      	mov	r2, r3
20000478:	ea4f 1242 	mov.w	r2, r2, lsl #5
2000047c:	ebc3 0202 	rsb	r2, r3, r2
20000480:	ea4f 0282 	mov.w	r2, r2, lsl #2
20000484:	4413      	add	r3, r2
20000486:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000048a:	b298      	uxth	r0, r3
2000048c:	f64e 5224 	movw	r2, #60708	; 0xed24
20000490:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000494:	460b      	mov	r3, r1
20000496:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000049a:	440b      	add	r3, r1
2000049c:	ea4f 0343 	mov.w	r3, r3, lsl #1
200004a0:	4413      	add	r3, r2
200004a2:	f103 0310 	add.w	r3, r3, #16
200004a6:	4602      	mov	r2, r0
200004a8:	801a      	strh	r2, [r3, #0]

}
200004aa:	f107 070c 	add.w	r7, r7, #12
200004ae:	46bd      	mov	sp, r7
200004b0:	bc80      	pop	{r7}
200004b2:	4770      	bx	lr

200004b4 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
200004b4:	b580      	push	{r7, lr}
200004b6:	b092      	sub	sp, #72	; 0x48
200004b8:	af04      	add	r7, sp, #16
200004ba:	60f8      	str	r0, [r7, #12]
200004bc:	60b9      	str	r1, [r7, #8]
200004be:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
200004c0:	f248 4318 	movw	r3, #33816	; 0x8418
200004c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004c8:	881b      	ldrh	r3, [r3, #0]
200004ca:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
200004cc:	f04f 0328 	mov.w	r3, #40	; 0x28
200004d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
200004d4:	f04f 032a 	mov.w	r3, #42	; 0x2a
200004d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
200004dc:	f04f 032c 	mov.w	r3, #44	; 0x2c
200004e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
200004e4:	f04f 0329 	mov.w	r3, #41	; 0x29
200004e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
200004ec:	f04f 032b 	mov.w	r3, #43	; 0x2b
200004f0:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
200004f4:	f04f 032d 	mov.w	r3, #45	; 0x2d
200004f8:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
200004fa:	f04f 0300 	mov.w	r3, #0
200004fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
20000502:	f107 0334 	add.w	r3, r7, #52	; 0x34
20000506:	f04f 0200 	mov.w	r2, #0
2000050a:	9200      	str	r2, [sp, #0]
2000050c:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000510:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000514:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000518:	461a      	mov	r2, r3
2000051a:	f04f 0302 	mov.w	r3, #2
2000051e:	f006 fc51 	bl	20006dc4 <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
20000522:	f107 0318 	add.w	r3, r7, #24
20000526:	f04f 0200 	mov.w	r2, #0
2000052a:	9200      	str	r2, [sp, #0]
2000052c:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000534:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000538:	461a      	mov	r2, r3
2000053a:	f04f 0301 	mov.w	r3, #1
2000053e:	f006 fcb3 	bl	20006ea8 <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000542:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000546:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054a:	f04f 0100 	mov.w	r1, #0
2000054e:	f006 fdb5 	bl	200070bc <I2C_wait_complete>
20000552:	4603      	mov	r3, r0
20000554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000558:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000560:	4413      	add	r3, r2
20000562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
20000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000056a:	f107 0218 	add.w	r2, r7, #24
2000056e:	9200      	str	r2, [sp, #0]
20000570:	f04f 0201 	mov.w	r2, #1
20000574:	9201      	str	r2, [sp, #4]
20000576:	f04f 0200 	mov.w	r2, #0
2000057a:	9202      	str	r2, [sp, #8]
2000057c:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000584:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000588:	461a      	mov	r2, r3
2000058a:	f04f 0301 	mov.w	r3, #1
2000058e:	f006 fcfd 	bl	20006f8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000592:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000596:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059a:	f04f 0100 	mov.w	r1, #0
2000059e:	f006 fd8d 	bl	200070bc <I2C_wait_complete>
200005a2:	4603      	mov	r3, r0
200005a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200005b0:	4413      	add	r3, r2
200005b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
200005b6:	f107 031c 	add.w	r3, r7, #28
200005ba:	f107 0214 	add.w	r2, r7, #20
200005be:	9200      	str	r2, [sp, #0]
200005c0:	f04f 0201 	mov.w	r2, #1
200005c4:	9201      	str	r2, [sp, #4]
200005c6:	f04f 0200 	mov.w	r2, #0
200005ca:	9202      	str	r2, [sp, #8]
200005cc:	f64e 603c 	movw	r0, #60988	; 0xee3c
200005d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005d4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200005d8:	461a      	mov	r2, r3
200005da:	f04f 0301 	mov.w	r3, #1
200005de:	f006 fcd5 	bl	20006f8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200005e2:	f64e 603c 	movw	r0, #60988	; 0xee3c
200005e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005ea:	f04f 0100 	mov.w	r1, #0
200005ee:	f006 fd65 	bl	200070bc <I2C_wait_complete>
200005f2:	4603      	mov	r3, r0
200005f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005f8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000600:	4413      	add	r3, r2
20000602:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000606:	7d3b      	ldrb	r3, [r7, #20]
20000608:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000060c:	b29a      	uxth	r2, r3
2000060e:	7e3b      	ldrb	r3, [r7, #24]
20000610:	ea42 0303 	orr.w	r3, r2, r3
20000614:	b29b      	uxth	r3, r3
20000616:	b29a      	uxth	r2, r3
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	881b      	ldrh	r3, [r3, #0]
20000620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000624:	d906      	bls.n	20000634 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
20000626:	687b      	ldr	r3, [r7, #4]
20000628:	881b      	ldrh	r3, [r3, #0]
2000062a:	ea6f 0303 	mvn.w	r3, r3
2000062e:	b29a      	uxth	r2, r3
20000630:	687b      	ldr	r3, [r7, #4]
20000632:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
20000634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000638:	f107 0218 	add.w	r2, r7, #24
2000063c:	9200      	str	r2, [sp, #0]
2000063e:	f04f 0201 	mov.w	r2, #1
20000642:	9201      	str	r2, [sp, #4]
20000644:	f04f 0200 	mov.w	r2, #0
20000648:	9202      	str	r2, [sp, #8]
2000064a:	f64e 603c 	movw	r0, #60988	; 0xee3c
2000064e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000652:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000656:	461a      	mov	r2, r3
20000658:	f04f 0301 	mov.w	r3, #1
2000065c:	f006 fc96 	bl	20006f8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000660:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000664:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000668:	f04f 0100 	mov.w	r1, #0
2000066c:	f006 fd26 	bl	200070bc <I2C_wait_complete>
20000670:	4603      	mov	r3, r0
20000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000676:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000067a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000067e:	4413      	add	r3, r2
20000680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
20000684:	f107 0320 	add.w	r3, r7, #32
20000688:	f107 0214 	add.w	r2, r7, #20
2000068c:	9200      	str	r2, [sp, #0]
2000068e:	f04f 0201 	mov.w	r2, #1
20000692:	9201      	str	r2, [sp, #4]
20000694:	f04f 0200 	mov.w	r2, #0
20000698:	9202      	str	r2, [sp, #8]
2000069a:	f64e 603c 	movw	r0, #60988	; 0xee3c
2000069e:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006a2:	f04f 016a 	mov.w	r1, #106	; 0x6a
200006a6:	461a      	mov	r2, r3
200006a8:	f04f 0301 	mov.w	r3, #1
200006ac:	f006 fc6e 	bl	20006f8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200006b0:	f64e 603c 	movw	r0, #60988	; 0xee3c
200006b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006b8:	f04f 0100 	mov.w	r1, #0
200006bc:	f006 fcfe 	bl	200070bc <I2C_wait_complete>
200006c0:	4603      	mov	r3, r0
200006c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200006c6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200006ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200006ce:	4413      	add	r3, r2
200006d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200006d4:	7d3b      	ldrb	r3, [r7, #20]
200006d6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200006da:	b29a      	uxth	r2, r3
200006dc:	7e3b      	ldrb	r3, [r7, #24]
200006de:	ea42 0303 	orr.w	r3, r2, r3
200006e2:	b29b      	uxth	r3, r3
200006e4:	b29a      	uxth	r2, r3
200006e6:	68bb      	ldr	r3, [r7, #8]
200006e8:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
200006ea:	68bb      	ldr	r3, [r7, #8]
200006ec:	881b      	ldrh	r3, [r3, #0]
200006ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200006f2:	d906      	bls.n	20000702 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
200006f4:	68bb      	ldr	r3, [r7, #8]
200006f6:	881b      	ldrh	r3, [r3, #0]
200006f8:	ea6f 0303 	mvn.w	r3, r3
200006fc:	b29a      	uxth	r2, r3
200006fe:	68bb      	ldr	r3, [r7, #8]
20000700:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
20000702:	f107 0330 	add.w	r3, r7, #48	; 0x30
20000706:	f107 0218 	add.w	r2, r7, #24
2000070a:	9200      	str	r2, [sp, #0]
2000070c:	f04f 0201 	mov.w	r2, #1
20000710:	9201      	str	r2, [sp, #4]
20000712:	f04f 0200 	mov.w	r2, #0
20000716:	9202      	str	r2, [sp, #8]
20000718:	f64e 603c 	movw	r0, #60988	; 0xee3c
2000071c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000720:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000724:	461a      	mov	r2, r3
20000726:	f04f 0301 	mov.w	r3, #1
2000072a:	f006 fc2f 	bl	20006f8c <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000072e:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000732:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000736:	f04f 0100 	mov.w	r1, #0
2000073a:	f006 fcbf 	bl	200070bc <I2C_wait_complete>
2000073e:	4603      	mov	r3, r0
20000740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000744:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000074c:	4413      	add	r3, r2
2000074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
20000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000756:	f107 0214 	add.w	r2, r7, #20
2000075a:	9200      	str	r2, [sp, #0]
2000075c:	f04f 0201 	mov.w	r2, #1
20000760:	9201      	str	r2, [sp, #4]
20000762:	f04f 0200 	mov.w	r2, #0
20000766:	9202      	str	r2, [sp, #8]
20000768:	f64e 603c 	movw	r0, #60988	; 0xee3c
2000076c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000770:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000774:	461a      	mov	r2, r3
20000776:	f04f 0301 	mov.w	r3, #1
2000077a:	f006 fc07 	bl	20006f8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000077e:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000782:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000786:	f04f 0100 	mov.w	r1, #0
2000078a:	f006 fc97 	bl	200070bc <I2C_wait_complete>
2000078e:	4603      	mov	r3, r0
20000790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000794:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000079c:	4413      	add	r3, r2
2000079e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200007a2:	7d3b      	ldrb	r3, [r7, #20]
200007a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
200007a8:	b29a      	uxth	r2, r3
200007aa:	7e3b      	ldrb	r3, [r7, #24]
200007ac:	ea42 0303 	orr.w	r3, r2, r3
200007b0:	b29b      	uxth	r3, r3
200007b2:	b29a      	uxth	r2, r3
200007b4:	68fb      	ldr	r3, [r7, #12]
200007b6:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
200007b8:	68fb      	ldr	r3, [r7, #12]
200007ba:	881b      	ldrh	r3, [r3, #0]
200007bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200007c0:	d906      	bls.n	200007d0 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
200007c2:	68fb      	ldr	r3, [r7, #12]
200007c4:	881b      	ldrh	r3, [r3, #0]
200007c6:	ea6f 0303 	mvn.w	r3, r3
200007ca:	b29a      	uxth	r2, r3
200007cc:	68fb      	ldr	r3, [r7, #12]
200007ce:	801a      	strh	r2, [r3, #0]
	}

	return status;
200007d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
200007d4:	4618      	mov	r0, r3
200007d6:	f107 0738 	add.w	r7, r7, #56	; 0x38
200007da:	46bd      	mov	sp, r7
200007dc:	bd80      	pop	{r7, pc}
200007de:	bf00      	nop

200007e0 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
200007e0:	b580      	push	{r7, lr}
200007e2:	b092      	sub	sp, #72	; 0x48
200007e4:	af04      	add	r7, sp, #16
200007e6:	60f8      	str	r0, [r7, #12]
200007e8:	60b9      	str	r1, [r7, #8]
200007ea:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
200007ec:	f248 4314 	movw	r3, #33812	; 0x8414
200007f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007f4:	881b      	ldrh	r3, [r3, #0]
200007f6:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
200007f8:	f04f 0318 	mov.w	r3, #24
200007fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
20000800:	f04f 031a 	mov.w	r3, #26
20000804:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
20000808:	f04f 031c 	mov.w	r3, #28
2000080c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
20000810:	f04f 0319 	mov.w	r3, #25
20000814:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
20000818:	f04f 031b 	mov.w	r3, #27
2000081c:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
2000081e:	f04f 031d 	mov.w	r3, #29
20000822:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
20000824:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000828:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
2000082c:	f04f 0300 	mov.w	r3, #0
20000830:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
20000834:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000838:	f107 0330 	add.w	r3, r7, #48	; 0x30
2000083c:	f107 0114 	add.w	r1, r7, #20
20000840:	9100      	str	r1, [sp, #0]
20000842:	f04f 0101 	mov.w	r1, #1
20000846:	9101      	str	r1, [sp, #4]
20000848:	f04f 0100 	mov.w	r1, #0
2000084c:	9102      	str	r1, [sp, #8]
2000084e:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000852:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000856:	4611      	mov	r1, r2
20000858:	461a      	mov	r2, r3
2000085a:	f04f 0302 	mov.w	r3, #2
2000085e:	f006 fb95 	bl	20006f8c <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000862:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000866:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086a:	f04f 0100 	mov.w	r1, #0
2000086e:	f006 fc25 	bl	200070bc <I2C_wait_complete>
20000872:	4603      	mov	r3, r0
20000874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000878:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000087c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000880:	4413      	add	r3, r2
20000882:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
20000886:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000088e:	f107 0114 	add.w	r1, r7, #20
20000892:	9100      	str	r1, [sp, #0]
20000894:	f04f 0101 	mov.w	r1, #1
20000898:	9101      	str	r1, [sp, #4]
2000089a:	f04f 0100 	mov.w	r1, #0
2000089e:	9102      	str	r1, [sp, #8]
200008a0:	f64e 603c 	movw	r0, #60988	; 0xee3c
200008a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008a8:	4611      	mov	r1, r2
200008aa:	461a      	mov	r2, r3
200008ac:	f04f 0301 	mov.w	r3, #1
200008b0:	f006 fb6c 	bl	20006f8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200008b4:	f64e 603c 	movw	r0, #60988	; 0xee3c
200008b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008bc:	f04f 0100 	mov.w	r1, #0
200008c0:	f006 fbfc 	bl	200070bc <I2C_wait_complete>
200008c4:	4603      	mov	r3, r0
200008c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200008ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200008ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200008d2:	4413      	add	r3, r2
200008d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
200008d8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200008dc:	f107 0318 	add.w	r3, r7, #24
200008e0:	f107 0110 	add.w	r1, r7, #16
200008e4:	9100      	str	r1, [sp, #0]
200008e6:	f04f 0101 	mov.w	r1, #1
200008ea:	9101      	str	r1, [sp, #4]
200008ec:	f04f 0100 	mov.w	r1, #0
200008f0:	9102      	str	r1, [sp, #8]
200008f2:	f64e 603c 	movw	r0, #60988	; 0xee3c
200008f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008fa:	4611      	mov	r1, r2
200008fc:	461a      	mov	r2, r3
200008fe:	f04f 0301 	mov.w	r3, #1
20000902:	f006 fb43 	bl	20006f8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000906:	f64e 603c 	movw	r0, #60988	; 0xee3c
2000090a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000090e:	f04f 0100 	mov.w	r1, #0
20000912:	f006 fbd3 	bl	200070bc <I2C_wait_complete>
20000916:	4603      	mov	r3, r0
20000918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
2000091c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000920:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000924:	4413      	add	r3, r2
20000926:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
2000092a:	7c3b      	ldrb	r3, [r7, #16]
2000092c:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000930:	b29a      	uxth	r2, r3
20000932:	7d3b      	ldrb	r3, [r7, #20]
20000934:	ea42 0303 	orr.w	r3, r2, r3
20000938:	b29b      	uxth	r3, r3
2000093a:	b29a      	uxth	r2, r3
2000093c:	68fb      	ldr	r3, [r7, #12]
2000093e:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
20000940:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000944:	f107 0328 	add.w	r3, r7, #40	; 0x28
20000948:	f107 0114 	add.w	r1, r7, #20
2000094c:	9100      	str	r1, [sp, #0]
2000094e:	f04f 0101 	mov.w	r1, #1
20000952:	9101      	str	r1, [sp, #4]
20000954:	f04f 0100 	mov.w	r1, #0
20000958:	9102      	str	r1, [sp, #8]
2000095a:	f64e 603c 	movw	r0, #60988	; 0xee3c
2000095e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000962:	4611      	mov	r1, r2
20000964:	461a      	mov	r2, r3
20000966:	f04f 0301 	mov.w	r3, #1
2000096a:	f006 fb0f 	bl	20006f8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000096e:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000972:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000976:	f04f 0100 	mov.w	r1, #0
2000097a:	f006 fb9f 	bl	200070bc <I2C_wait_complete>
2000097e:	4603      	mov	r3, r0
20000980:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000984:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000098c:	4413      	add	r3, r2
2000098e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
20000992:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000996:	f107 031c 	add.w	r3, r7, #28
2000099a:	f107 0110 	add.w	r1, r7, #16
2000099e:	9100      	str	r1, [sp, #0]
200009a0:	f04f 0101 	mov.w	r1, #1
200009a4:	9101      	str	r1, [sp, #4]
200009a6:	f04f 0100 	mov.w	r1, #0
200009aa:	9102      	str	r1, [sp, #8]
200009ac:	f64e 603c 	movw	r0, #60988	; 0xee3c
200009b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009b4:	4611      	mov	r1, r2
200009b6:	461a      	mov	r2, r3
200009b8:	f04f 0301 	mov.w	r3, #1
200009bc:	f006 fae6 	bl	20006f8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200009c0:	f64e 603c 	movw	r0, #60988	; 0xee3c
200009c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009c8:	f04f 0100 	mov.w	r1, #0
200009cc:	f006 fb76 	bl	200070bc <I2C_wait_complete>
200009d0:	4603      	mov	r3, r0
200009d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200009d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200009da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200009de:	4413      	add	r3, r2
200009e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200009e4:	7c3b      	ldrb	r3, [r7, #16]
200009e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200009ea:	b29a      	uxth	r2, r3
200009ec:	7d3b      	ldrb	r3, [r7, #20]
200009ee:	ea42 0303 	orr.w	r3, r2, r3
200009f2:	b29b      	uxth	r3, r3
200009f4:	b29a      	uxth	r2, r3
200009f6:	68bb      	ldr	r3, [r7, #8]
200009f8:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
200009fa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200009fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000a02:	f107 0114 	add.w	r1, r7, #20
20000a06:	9100      	str	r1, [sp, #0]
20000a08:	f04f 0101 	mov.w	r1, #1
20000a0c:	9101      	str	r1, [sp, #4]
20000a0e:	f04f 0100 	mov.w	r1, #0
20000a12:	9102      	str	r1, [sp, #8]
20000a14:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000a18:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a1c:	4611      	mov	r1, r2
20000a1e:	461a      	mov	r2, r3
20000a20:	f04f 0301 	mov.w	r3, #1
20000a24:	f006 fab2 	bl	20006f8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a28:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000a2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a30:	f04f 0100 	mov.w	r1, #0
20000a34:	f006 fb42 	bl	200070bc <I2C_wait_complete>
20000a38:	4603      	mov	r3, r0
20000a3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a3e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a46:	4413      	add	r3, r2
20000a48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
20000a4c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a50:	f107 0320 	add.w	r3, r7, #32
20000a54:	f107 0110 	add.w	r1, r7, #16
20000a58:	9100      	str	r1, [sp, #0]
20000a5a:	f04f 0101 	mov.w	r1, #1
20000a5e:	9101      	str	r1, [sp, #4]
20000a60:	f04f 0100 	mov.w	r1, #0
20000a64:	9102      	str	r1, [sp, #8]
20000a66:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000a6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a6e:	4611      	mov	r1, r2
20000a70:	461a      	mov	r2, r3
20000a72:	f04f 0301 	mov.w	r3, #1
20000a76:	f006 fa89 	bl	20006f8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a7a:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000a7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a82:	f04f 0100 	mov.w	r1, #0
20000a86:	f006 fb19 	bl	200070bc <I2C_wait_complete>
20000a8a:	4603      	mov	r3, r0
20000a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a90:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a98:	4413      	add	r3, r2
20000a9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000a9e:	7c3b      	ldrb	r3, [r7, #16]
20000aa0:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000aa4:	b29a      	uxth	r2, r3
20000aa6:	7d3b      	ldrb	r3, [r7, #20]
20000aa8:	ea42 0303 	orr.w	r3, r2, r3
20000aac:	b29b      	uxth	r3, r3
20000aae:	b29a      	uxth	r2, r3
20000ab0:	687b      	ldr	r3, [r7, #4]
20000ab2:	801a      	strh	r2, [r3, #0]

		return status;
20000ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
20000ab8:	4618      	mov	r0, r3
20000aba:	f107 0738 	add.w	r7, r7, #56	; 0x38
20000abe:	46bd      	mov	sp, r7
20000ac0:	bd80      	pop	{r7, pc}
20000ac2:	bf00      	nop

20000ac4 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
20000ac4:	b580      	push	{r7, lr}
20000ac6:	b08a      	sub	sp, #40	; 0x28
20000ac8:	af04      	add	r7, sp, #16
20000aca:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
20000acc:	f04f 0315 	mov.w	r3, #21
20000ad0:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
20000ad2:	f04f 0316 	mov.w	r3, #22
20000ad6:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
20000ad8:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000adc:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
20000ade:	7dba      	ldrb	r2, [r7, #22]
20000ae0:	f107 0314 	add.w	r3, r7, #20
20000ae4:	f107 010c 	add.w	r1, r7, #12
20000ae8:	9100      	str	r1, [sp, #0]
20000aea:	f04f 0101 	mov.w	r1, #1
20000aee:	9101      	str	r1, [sp, #4]
20000af0:	f04f 0100 	mov.w	r1, #0
20000af4:	9102      	str	r1, [sp, #8]
20000af6:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000afa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000afe:	4611      	mov	r1, r2
20000b00:	461a      	mov	r2, r3
20000b02:	f04f 0301 	mov.w	r3, #1
20000b06:	f006 fa41 	bl	20006f8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000b0a:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000b0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b12:	f04f 0100 	mov.w	r1, #0
20000b16:	f006 fad1 	bl	200070bc <I2C_wait_complete>
20000b1a:	4603      	mov	r3, r0
20000b1c:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
20000b1e:	7dba      	ldrb	r2, [r7, #22]
20000b20:	f107 0310 	add.w	r3, r7, #16
20000b24:	f107 0108 	add.w	r1, r7, #8
20000b28:	9100      	str	r1, [sp, #0]
20000b2a:	f04f 0101 	mov.w	r1, #1
20000b2e:	9101      	str	r1, [sp, #4]
20000b30:	f04f 0100 	mov.w	r1, #0
20000b34:	9102      	str	r1, [sp, #8]
20000b36:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000b3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b3e:	4611      	mov	r1, r2
20000b40:	461a      	mov	r2, r3
20000b42:	f04f 0301 	mov.w	r3, #1
20000b46:	f006 fa21 	bl	20006f8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000b4a:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000b4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b52:	f04f 0100 	mov.w	r1, #0
20000b56:	f006 fab1 	bl	200070bc <I2C_wait_complete>
20000b5a:	4603      	mov	r3, r0
20000b5c:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
20000b5e:	7b3b      	ldrb	r3, [r7, #12]
20000b60:	461a      	mov	r2, r3
20000b62:	7a3b      	ldrb	r3, [r7, #8]
20000b64:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b68:	b29b      	uxth	r3, r3
20000b6a:	ea42 0303 	orr.w	r3, r2, r3
20000b6e:	b29b      	uxth	r3, r3
20000b70:	b29a      	uxth	r2, r3
20000b72:	687b      	ldr	r3, [r7, #4]
20000b74:	801a      	strh	r2, [r3, #0]

		return 0;
20000b76:	f04f 0300 	mov.w	r3, #0

}
20000b7a:	4618      	mov	r0, r3
20000b7c:	f107 0718 	add.w	r7, r7, #24
20000b80:	46bd      	mov	sp, r7
20000b82:	bd80      	pop	{r7, pc}

20000b84 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
20000b84:	b580      	push	{r7, lr}
20000b86:	b086      	sub	sp, #24
20000b88:	af02      	add	r7, sp, #8
20000b8a:	60b9      	str	r1, [r7, #8]
20000b8c:	4613      	mov	r3, r2
20000b8e:	4602      	mov	r2, r0
20000b90:	73fa      	strb	r2, [r7, #15]
20000b92:	71fb      	strb	r3, [r7, #7]
     count = 0;
20000b94:	f64e 5360 	movw	r3, #60768	; 0xed60
20000b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b9c:	f04f 0200 	mov.w	r2, #0
20000ba0:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000ba2:	e036      	b.n	20000c12 <vc_write+0x8e>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
20000ba4:	f24f 036c 	movw	r3, #61548	; 0xf06c
20000ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bac:	f897 c007 	ldrb.w	ip, [r7, #7]
20000bb0:	7bfa      	ldrb	r2, [r7, #15]
20000bb2:	f04f 0100 	mov.w	r1, #0
20000bb6:	9100      	str	r1, [sp, #0]
20000bb8:	4618      	mov	r0, r3
20000bba:	4611      	mov	r1, r2
20000bbc:	68ba      	ldr	r2, [r7, #8]
20000bbe:	4663      	mov	r3, ip
20000bc0:	f006 f900 	bl	20006dc4 <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000bc4:	f24f 036c 	movw	r3, #61548	; 0xf06c
20000bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bcc:	4618      	mov	r0, r3
20000bce:	f04f 0100 	mov.w	r1, #0
20000bd2:	f006 fa73 	bl	200070bc <I2C_wait_complete>
20000bd6:	4603      	mov	r3, r0
20000bd8:	461a      	mov	r2, r3
20000bda:	f64e 5362 	movw	r3, #60770	; 0xed62
20000bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000be2:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000be4:	f64e 5362 	movw	r3, #60770	; 0xed62
20000be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bec:	781b      	ldrb	r3, [r3, #0]
20000bee:	2b00      	cmp	r3, #0
20000bf0:	d102      	bne.n	20000bf8 <vc_write+0x74>
            return 0;
20000bf2:	f04f 0300 	mov.w	r3, #0
20000bf6:	e018      	b.n	20000c2a <vc_write+0xa6>
        }
        count++;
20000bf8:	f64e 5360 	movw	r3, #60768	; 0xed60
20000bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c00:	781b      	ldrb	r3, [r3, #0]
20000c02:	f103 0301 	add.w	r3, r3, #1
20000c06:	b2da      	uxtb	r2, r3
20000c08:	f64e 5360 	movw	r3, #60768	; 0xed60
20000c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c10:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
20000c12:	f64e 5360 	movw	r3, #60768	; 0xed60
20000c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c1a:	781b      	ldrb	r3, [r3, #0]
20000c1c:	2b09      	cmp	r3, #9
20000c1e:	d9c1      	bls.n	20000ba4 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000c20:	f64e 5360 	movw	r3, #60768	; 0xed60
20000c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c28:	781b      	ldrb	r3, [r3, #0]

}
20000c2a:	4618      	mov	r0, r3
20000c2c:	f107 0710 	add.w	r7, r7, #16
20000c30:	46bd      	mov	sp, r7
20000c32:	bd80      	pop	{r7, pc}

20000c34 <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
20000c34:	b580      	push	{r7, lr}
20000c36:	b086      	sub	sp, #24
20000c38:	af02      	add	r7, sp, #8
20000c3a:	60b9      	str	r1, [r7, #8]
20000c3c:	4613      	mov	r3, r2
20000c3e:	4602      	mov	r2, r0
20000c40:	73fa      	strb	r2, [r7, #15]
20000c42:	71fb      	strb	r3, [r7, #7]
    count = 0;
20000c44:	f64e 5360 	movw	r3, #60768	; 0xed60
20000c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c4c:	f04f 0200 	mov.w	r2, #0
20000c50:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000c52:	e036      	b.n	20000cc2 <vc_read+0x8e>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
20000c54:	f24f 036c 	movw	r3, #61548	; 0xf06c
20000c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c5c:	f897 c007 	ldrb.w	ip, [r7, #7]
20000c60:	7bfa      	ldrb	r2, [r7, #15]
20000c62:	f04f 0100 	mov.w	r1, #0
20000c66:	9100      	str	r1, [sp, #0]
20000c68:	4618      	mov	r0, r3
20000c6a:	4611      	mov	r1, r2
20000c6c:	68ba      	ldr	r2, [r7, #8]
20000c6e:	4663      	mov	r3, ip
20000c70:	f006 f91a 	bl	20006ea8 <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000c74:	f24f 036c 	movw	r3, #61548	; 0xf06c
20000c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c7c:	4618      	mov	r0, r3
20000c7e:	f04f 0100 	mov.w	r1, #0
20000c82:	f006 fa1b 	bl	200070bc <I2C_wait_complete>
20000c86:	4603      	mov	r3, r0
20000c88:	461a      	mov	r2, r3
20000c8a:	f64e 5362 	movw	r3, #60770	; 0xed62
20000c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c92:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000c94:	f64e 5362 	movw	r3, #60770	; 0xed62
20000c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c9c:	781b      	ldrb	r3, [r3, #0]
20000c9e:	2b00      	cmp	r3, #0
20000ca0:	d102      	bne.n	20000ca8 <vc_read+0x74>
            return 0;
20000ca2:	f04f 0300 	mov.w	r3, #0
20000ca6:	e018      	b.n	20000cda <vc_read+0xa6>
        }
        count++;
20000ca8:	f64e 5360 	movw	r3, #60768	; 0xed60
20000cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cb0:	781b      	ldrb	r3, [r3, #0]
20000cb2:	f103 0301 	add.w	r3, r3, #1
20000cb6:	b2da      	uxtb	r2, r3
20000cb8:	f64e 5360 	movw	r3, #60768	; 0xed60
20000cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cc0:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
20000cc2:	f64e 5360 	movw	r3, #60768	; 0xed60
20000cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cca:	781b      	ldrb	r3, [r3, #0]
20000ccc:	2b09      	cmp	r3, #9
20000cce:	d9c1      	bls.n	20000c54 <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000cd0:	f64e 5360 	movw	r3, #60768	; 0xed60
20000cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cd8:	781b      	ldrb	r3, [r3, #0]

}
20000cda:	4618      	mov	r0, r3
20000cdc:	f107 0710 	add.w	r7, r7, #16
20000ce0:	46bd      	mov	sp, r7
20000ce2:	bd80      	pop	{r7, pc}

20000ce4 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
20000ce4:	b580      	push	{r7, lr}
20000ce6:	b082      	sub	sp, #8
20000ce8:	af00      	add	r7, sp, #0
20000cea:	460b      	mov	r3, r1
20000cec:	603a      	str	r2, [r7, #0]
20000cee:	4602      	mov	r2, r0
20000cf0:	71fa      	strb	r2, [r7, #7]
20000cf2:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
20000cf4:	79fa      	ldrb	r2, [r7, #7]
20000cf6:	f107 0306 	add.w	r3, r7, #6
20000cfa:	4610      	mov	r0, r2
20000cfc:	4619      	mov	r1, r3
20000cfe:	f04f 0201 	mov.w	r2, #1
20000d02:	f7ff ff3f 	bl	20000b84 <vc_write>
20000d06:	4603      	mov	r3, r0
20000d08:	2b09      	cmp	r3, #9
20000d0a:	d902      	bls.n	20000d12 <vc_read_reg+0x2e>
        return 1;
20000d0c:	f04f 0301 	mov.w	r3, #1
20000d10:	e00e      	b.n	20000d30 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
20000d12:	79fb      	ldrb	r3, [r7, #7]
20000d14:	4618      	mov	r0, r3
20000d16:	6839      	ldr	r1, [r7, #0]
20000d18:	f04f 0202 	mov.w	r2, #2
20000d1c:	f7ff ff8a 	bl	20000c34 <vc_read>
20000d20:	4603      	mov	r3, r0
20000d22:	2b09      	cmp	r3, #9
20000d24:	d902      	bls.n	20000d2c <vc_read_reg+0x48>
        return 1;
20000d26:	f04f 0301 	mov.w	r3, #1
20000d2a:	e001      	b.n	20000d30 <vc_read_reg+0x4c>
    }

    return 0;
20000d2c:	f04f 0300 	mov.w	r3, #0
}
20000d30:	4618      	mov	r0, r3
20000d32:	f107 0708 	add.w	r7, r7, #8
20000d36:	46bd      	mov	sp, r7
20000d38:	bd80      	pop	{r7, pc}
20000d3a:	bf00      	nop

20000d3c <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000d3c:	b580      	push	{r7, lr}
20000d3e:	b082      	sub	sp, #8
20000d40:	af00      	add	r7, sp, #0
20000d42:	460b      	mov	r3, r1
20000d44:	603a      	str	r2, [r7, #0]
20000d46:	4602      	mov	r2, r0
20000d48:	71fa      	strb	r2, [r7, #7]
20000d4a:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000d4c:	f64e 535c 	movw	r3, #60764	; 0xed5c
20000d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d54:	f04f 0200 	mov.w	r2, #0
20000d58:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000d5a:	f64e 535c 	movw	r3, #60764	; 0xed5c
20000d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d62:	f04f 0200 	mov.w	r2, #0
20000d66:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000d68:	f64e 535e 	movw	r3, #60766	; 0xed5e
20000d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d70:	f04f 0200 	mov.w	r2, #0
20000d74:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
20000d76:	79bb      	ldrb	r3, [r7, #6]
20000d78:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d7c:	b2db      	uxtb	r3, r3
20000d7e:	79fa      	ldrb	r2, [r7, #7]
20000d80:	4610      	mov	r0, r2
20000d82:	4619      	mov	r1, r3
20000d84:	f64e 525c 	movw	r2, #60764	; 0xed5c
20000d88:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000d8c:	f7ff ffaa 	bl	20000ce4 <vc_read_reg>
20000d90:	4603      	mov	r3, r0
20000d92:	2b00      	cmp	r3, #0
20000d94:	d11a      	bne.n	20000dcc <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
20000d96:	f64e 535c 	movw	r3, #60764	; 0xed5c
20000d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d9e:	781b      	ldrb	r3, [r3, #0]
20000da0:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000da4:	b29a      	uxth	r2, r3
20000da6:	f64e 535c 	movw	r3, #60764	; 0xed5c
20000daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dae:	785b      	ldrb	r3, [r3, #1]
20000db0:	ea42 0303 	orr.w	r3, r2, r3
20000db4:	b29b      	uxth	r3, r3
20000db6:	b29a      	uxth	r2, r3
20000db8:	f64e 535e 	movw	r3, #60766	; 0xed5e
20000dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dc0:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000dc2:	683b      	ldr	r3, [r7, #0]
20000dc4:	f04f 0200 	mov.w	r2, #0
20000dc8:	701a      	strb	r2, [r3, #0]
20000dca:	e00a      	b.n	20000de2 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
20000dcc:	683b      	ldr	r3, [r7, #0]
20000dce:	f04f 0201 	mov.w	r2, #1
20000dd2:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000dd4:	f64e 535e 	movw	r3, #60766	; 0xed5e
20000dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ddc:	f04f 0200 	mov.w	r2, #0
20000de0:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000de2:	f64e 535e 	movw	r3, #60766	; 0xed5e
20000de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dea:	881b      	ldrh	r3, [r3, #0]
}
20000dec:	4618      	mov	r0, r3
20000dee:	f107 0708 	add.w	r7, r7, #8
20000df2:	46bd      	mov	sp, r7
20000df4:	bd80      	pop	{r7, pc}
20000df6:	bf00      	nop

20000df8 <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000df8:	b580      	push	{r7, lr}
20000dfa:	b082      	sub	sp, #8
20000dfc:	af00      	add	r7, sp, #0
20000dfe:	460b      	mov	r3, r1
20000e00:	603a      	str	r2, [r7, #0]
20000e02:	4602      	mov	r2, r0
20000e04:	71fa      	strb	r2, [r7, #7]
20000e06:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000e08:	f64e 535c 	movw	r3, #60764	; 0xed5c
20000e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e10:	f04f 0200 	mov.w	r2, #0
20000e14:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000e16:	f64e 535c 	movw	r3, #60764	; 0xed5c
20000e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e1e:	f04f 0200 	mov.w	r2, #0
20000e22:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000e24:	f64e 535e 	movw	r3, #60766	; 0xed5e
20000e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e2c:	f04f 0200 	mov.w	r2, #0
20000e30:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
20000e32:	79bb      	ldrb	r3, [r7, #6]
20000e34:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000e38:	b2db      	uxtb	r3, r3
20000e3a:	f103 33ff 	add.w	r3, r3, #4294967295
20000e3e:	b2db      	uxtb	r3, r3
20000e40:	79fa      	ldrb	r2, [r7, #7]
20000e42:	4610      	mov	r0, r2
20000e44:	4619      	mov	r1, r3
20000e46:	f64e 525c 	movw	r2, #60764	; 0xed5c
20000e4a:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000e4e:	f7ff ff49 	bl	20000ce4 <vc_read_reg>
20000e52:	4603      	mov	r3, r0
20000e54:	2b00      	cmp	r3, #0
20000e56:	d11a      	bne.n	20000e8e <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
20000e58:	f64e 535c 	movw	r3, #60764	; 0xed5c
20000e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e60:	781b      	ldrb	r3, [r3, #0]
20000e62:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e66:	b29a      	uxth	r2, r3
20000e68:	f64e 535c 	movw	r3, #60764	; 0xed5c
20000e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e70:	785b      	ldrb	r3, [r3, #1]
20000e72:	ea42 0303 	orr.w	r3, r2, r3
20000e76:	b29b      	uxth	r3, r3
20000e78:	b29a      	uxth	r2, r3
20000e7a:	f64e 535e 	movw	r3, #60766	; 0xed5e
20000e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e82:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000e84:	683b      	ldr	r3, [r7, #0]
20000e86:	f04f 0200 	mov.w	r2, #0
20000e8a:	701a      	strb	r2, [r3, #0]
20000e8c:	e00a      	b.n	20000ea4 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
20000e8e:	683b      	ldr	r3, [r7, #0]
20000e90:	f04f 0201 	mov.w	r2, #1
20000e94:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000e96:	f64e 535e 	movw	r3, #60766	; 0xed5e
20000e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e9e:	f04f 0200 	mov.w	r2, #0
20000ea2:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000ea4:	f64e 535e 	movw	r3, #60766	; 0xed5e
20000ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000eac:	881b      	ldrh	r3, [r3, #0]
}
20000eae:	4618      	mov	r0, r3
20000eb0:	f107 0708 	add.w	r7, r7, #8
20000eb4:	46bd      	mov	sp, r7
20000eb6:	bd80      	pop	{r7, pc}

20000eb8 <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
20000eb8:	b580      	push	{r7, lr}
20000eba:	b08c      	sub	sp, #48	; 0x30
20000ebc:	af04      	add	r7, sp, #16
20000ebe:	60f8      	str	r0, [r7, #12]
20000ec0:	607b      	str	r3, [r7, #4]
20000ec2:	460b      	mov	r3, r1
20000ec4:	72fb      	strb	r3, [r7, #11]
20000ec6:	4613      	mov	r3, r2
20000ec8:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
20000eca:	7abb      	ldrb	r3, [r7, #10]
20000ecc:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
20000ece:	7d3b      	ldrb	r3, [r7, #20]
20000ed0:	f043 0308 	orr.w	r3, r3, #8
20000ed4:	b2db      	uxtb	r3, r3
20000ed6:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
20000ed8:	7d3b      	ldrb	r3, [r7, #20]
20000eda:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000ede:	b2db      	uxtb	r3, r3
20000ee0:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
20000ee2:	7afa      	ldrb	r2, [r7, #11]
20000ee4:	f107 0314 	add.w	r3, r7, #20
20000ee8:	f107 0118 	add.w	r1, r7, #24
20000eec:	9100      	str	r1, [sp, #0]
20000eee:	f04f 0102 	mov.w	r1, #2
20000ef2:	9101      	str	r1, [sp, #4]
20000ef4:	f04f 0100 	mov.w	r1, #0
20000ef8:	9102      	str	r1, [sp, #8]
20000efa:	68f8      	ldr	r0, [r7, #12]
20000efc:	4611      	mov	r1, r2
20000efe:	461a      	mov	r2, r3
20000f00:	f04f 0301 	mov.w	r3, #1
20000f04:	f006 f842 	bl	20006f8c <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
20000f08:	68f8      	ldr	r0, [r7, #12]
20000f0a:	f04f 0100 	mov.w	r1, #0
20000f0e:	f006 f8d5 	bl	200070bc <I2C_wait_complete>
20000f12:	4603      	mov	r3, r0
20000f14:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
20000f16:	7f7b      	ldrb	r3, [r7, #29]
20000f18:	2b00      	cmp	r3, #0
20000f1a:	d004      	beq.n	20000f26 <get_ADC_value+0x6e>
		*flag = 1;
20000f1c:	687b      	ldr	r3, [r7, #4]
20000f1e:	f04f 0201 	mov.w	r2, #1
20000f22:	701a      	strb	r2, [r3, #0]
20000f24:	e012      	b.n	20000f4c <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
20000f26:	7e3b      	ldrb	r3, [r7, #24]
20000f28:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000f2c:	b29a      	uxth	r2, r3
20000f2e:	7e7b      	ldrb	r3, [r7, #25]
20000f30:	ea42 0303 	orr.w	r3, r2, r3
20000f34:	b29b      	uxth	r3, r3
20000f36:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
20000f38:	8bfb      	ldrh	r3, [r7, #30]
20000f3a:	ea4f 5303 	mov.w	r3, r3, lsl #20
20000f3e:	ea4f 5313 	mov.w	r3, r3, lsr #20
20000f42:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
20000f44:	687b      	ldr	r3, [r7, #4]
20000f46:	f04f 0200 	mov.w	r2, #0
20000f4a:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
20000f4c:	8bfb      	ldrh	r3, [r7, #30]
}
20000f4e:	4618      	mov	r0, r3
20000f50:	f107 0720 	add.w	r7, r7, #32
20000f54:	46bd      	mov	sp, r7
20000f56:	bd80      	pop	{r7, pc}

20000f58 <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
20000f58:	b580      	push	{r7, lr}
20000f5a:	b084      	sub	sp, #16
20000f5c:	af00      	add	r7, sp, #0
20000f5e:	4603      	mov	r3, r0
20000f60:	6039      	str	r1, [r7, #0]
20000f62:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
20000f64:	79fb      	ldrb	r3, [r7, #7]
20000f66:	2b00      	cmp	r3, #0
20000f68:	d10e      	bne.n	20000f88 <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
20000f6a:	683b      	ldr	r3, [r7, #0]
20000f6c:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
20000f6e:	68bb      	ldr	r3, [r7, #8]
20000f70:	6859      	ldr	r1, [r3, #4]
20000f72:	68bb      	ldr	r3, [r7, #8]
20000f74:	689a      	ldr	r2, [r3, #8]
20000f76:	68bb      	ldr	r3, [r7, #8]
20000f78:	7b1b      	ldrb	r3, [r3, #12]
20000f7a:	4608      	mov	r0, r1
20000f7c:	4611      	mov	r1, r2
20000f7e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f82:	f005 fea9 	bl	20006cd8 <I2C_init>
20000f86:	e02c      	b.n	20000fe2 <init+0x8a>
	}
	else if(d == vc_sensor){
20000f88:	79fb      	ldrb	r3, [r7, #7]
20000f8a:	2b0a      	cmp	r3, #10
20000f8c:	d10c      	bne.n	20000fa8 <init+0x50>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
20000f8e:	683b      	ldr	r3, [r7, #0]
20000f90:	60fb      	str	r3, [r7, #12]
//		MSS_I2C_init(&g_mss_i2c0, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
		MSS_I2C_init(&g_mss_i2c0, DAC_ADDR, I2C_PCLK_DIV_256);
20000f92:	f24f 006c 	movw	r0, #61548	; 0xf06c
20000f96:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f9a:	f04f 010e 	mov.w	r1, #14
20000f9e:	f04f 0200 	mov.w	r2, #0
20000fa2:	f005 f90d 	bl	200061c0 <MSS_I2C_init>
20000fa6:	e01c      	b.n	20000fe2 <init+0x8a>
	}
	else if(d == all){
20000fa8:	79fb      	ldrb	r3, [r7, #7]
20000faa:	2b0b      	cmp	r3, #11
20000fac:	d119      	bne.n	20000fe2 <init+0x8a>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000fae:	f64e 603c 	movw	r0, #60988	; 0xee3c
20000fb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000fb6:	f245 0100 	movw	r1, #20480	; 0x5000
20000fba:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000fbe:	f04f 0288 	mov.w	r2, #136	; 0x88
20000fc2:	f04f 0300 	mov.w	r3, #0
20000fc6:	f005 fe87 	bl	20006cd8 <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000fca:	f64e 0074 	movw	r0, #59508	; 0xe874
20000fce:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000fd2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
20000fd6:	f04f 0288 	mov.w	r2, #136	; 0x88
20000fda:	f04f 0300 	mov.w	r3, #0
20000fde:	f005 fe7b 	bl	20006cd8 <I2C_init>
	}
	else{

	}

}
20000fe2:	f107 0710 	add.w	r7, r7, #16
20000fe6:	46bd      	mov	sp, r7
20000fe8:	bd80      	pop	{r7, pc}
20000fea:	bf00      	nop

20000fec <vTask_Delay>:
#include "FreeRTOSConfig.h"
#include <FreeRTOS-Source/include/task.h>
#include "osal.h"


void vTask_Delay(uint16_t timems){
20000fec:	b580      	push	{r7, lr}
20000fee:	b084      	sub	sp, #16
20000ff0:	af00      	add	r7, sp, #0
20000ff2:	4603      	mov	r3, r0
20000ff4:	80fb      	strh	r3, [r7, #6]
	TickType_t tick_for_time;

	tick_for_time = pdMS_TO_TICKS(timems);
20000ff6:	88fb      	ldrh	r3, [r7, #6]
20000ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20000ffc:	fb02 f203 	mul.w	r2, r2, r3
20001000:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20001004:	f2c1 0362 	movt	r3, #4194	; 0x1062
20001008:	fba3 1302 	umull	r1, r3, r3, r2
2000100c:	ea4f 1393 	mov.w	r3, r3, lsr #6
20001010:	60fb      	str	r3, [r7, #12]

	vTaskDelay(tick_for_time);
20001012:	68f8      	ldr	r0, [r7, #12]
20001014:	f001 f99c 	bl	20002350 <vTaskDelay>

}
20001018:	f107 0710 	add.w	r7, r7, #16
2000101c:	46bd      	mov	sp, r7
2000101e:	bd80      	pop	{r7, pc}

20001020 <xMsToTicks>:

TickType_t xMsToTicks(uint16_t timems){
20001020:	b480      	push	{r7}
20001022:	b083      	sub	sp, #12
20001024:	af00      	add	r7, sp, #0
20001026:	4603      	mov	r3, r0
20001028:	80fb      	strh	r3, [r7, #6]
	return pdMS_TO_TICKS(timems);
2000102a:	88fb      	ldrh	r3, [r7, #6]
2000102c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20001030:	fb02 f203 	mul.w	r2, r2, r3
20001034:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20001038:	f2c1 0362 	movt	r3, #4194	; 0x1062
2000103c:	fba3 1302 	umull	r1, r3, r3, r2
20001040:	ea4f 1393 	mov.w	r3, r3, lsr #6
}
20001044:	4618      	mov	r0, r3
20001046:	f107 070c 	add.w	r7, r7, #12
2000104a:	46bd      	mov	sp, r7
2000104c:	bc80      	pop	{r7}
2000104e:	4770      	bx	lr

20001050 <cmd_valid>:
cmd_t cmd_list[NUM_CMDS];

extern uint16_t command_cnt;
extern uint16_t command_reject_cnt;

uint8_t cmd_valid(rx_cmd_t* rx_cmd){
20001050:	b480      	push	{r7}
20001052:	b083      	sub	sp, #12
20001054:	af00      	add	r7, sp, #0
20001056:	6078      	str	r0, [r7, #4]
	return 1;  //Will be checking the validated of the checksum.
20001058:	f04f 0301 	mov.w	r3, #1
}
2000105c:	4618      	mov	r0, r3
2000105e:	f107 070c 	add.w	r7, r7, #12
20001062:	46bd      	mov	sp, r7
20001064:	bc80      	pop	{r7}
20001066:	4770      	bx	lr

20001068 <chk_s_cmd>:

uint8_t chk_s_cmd(rx_cmd_t* rx_cmd){
20001068:	b480      	push	{r7}
2000106a:	b085      	sub	sp, #20
2000106c:	af00      	add	r7, sp, #0
2000106e:	6078      	str	r0, [r7, #4]
	uint16_t p;


	p = PILOT_REVERSE_BYTE_ORDER(rx_cmd->ccsds_cmd_p1);
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	781a      	ldrb	r2, [r3, #0]
20001074:	785b      	ldrb	r3, [r3, #1]
20001076:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000107a:	ea43 0302 	orr.w	r3, r3, r2
2000107e:	b29b      	uxth	r3, r3
20001080:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001084:	b29a      	uxth	r2, r3
20001086:	687b      	ldr	r3, [r7, #4]
20001088:	7819      	ldrb	r1, [r3, #0]
2000108a:	785b      	ldrb	r3, [r3, #1]
2000108c:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001090:	ea43 0301 	orr.w	r3, r3, r1
20001094:	b29b      	uxth	r3, r3
20001096:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000109a:	b29b      	uxth	r3, r3
2000109c:	ea42 0303 	orr.w	r3, r2, r3
200010a0:	b29b      	uxth	r3, r3
200010a2:	81fb      	strh	r3, [r7, #14]


	cmd->length = p & 0x07FF;
200010a4:	f64e 73a0 	movw	r3, #61344	; 0xefa0
200010a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010ac:	681a      	ldr	r2, [r3, #0]
200010ae:	89fb      	ldrh	r3, [r7, #14]
200010b0:	ea4f 5343 	mov.w	r3, r3, lsl #21
200010b4:	ea4f 5353 	mov.w	r3, r3, lsr #21
200010b8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200010bc:	f04f 0000 	mov.w	r0, #0
200010c0:	ea40 0101 	orr.w	r1, r0, r1
200010c4:	7051      	strb	r1, [r2, #1]
200010c6:	ea4f 2313 	mov.w	r3, r3, lsr #8
200010ca:	b29b      	uxth	r3, r3
200010cc:	f04f 0100 	mov.w	r1, #0
200010d0:	ea41 0303 	orr.w	r3, r1, r3
200010d4:	7093      	strb	r3, [r2, #2]

	if( (p >> 11) & 0x01){
200010d6:	89fb      	ldrh	r3, [r7, #14]
200010d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
200010dc:	b29b      	uxth	r3, r3
200010de:	f003 0301 	and.w	r3, r3, #1
200010e2:	b2db      	uxtb	r3, r3
200010e4:	2b00      	cmp	r3, #0
200010e6:	d002      	beq.n	200010ee <chk_s_cmd+0x86>
		return 1;
200010e8:	f04f 0301 	mov.w	r3, #1
200010ec:	e001      	b.n	200010f2 <chk_s_cmd+0x8a>
	}
	else{
		return 0;
200010ee:	f04f 0300 	mov.w	r3, #0
	}
}
200010f2:	4618      	mov	r0, r3
200010f4:	f107 0714 	add.w	r7, r7, #20
200010f8:	46bd      	mov	sp, r7
200010fa:	bc80      	pop	{r7}
200010fc:	4770      	bx	lr
200010fe:	bf00      	nop

20001100 <add_cmd>:


void add_cmd(uint8_t id, uint16_t length, void (*ex_func)(uint8_t id, rx_cmd_t* rcv_cmd)){
20001100:	b480      	push	{r7}
20001102:	b083      	sub	sp, #12
20001104:	af00      	add	r7, sp, #0
20001106:	460b      	mov	r3, r1
20001108:	603a      	str	r2, [r7, #0]
2000110a:	4602      	mov	r2, r0
2000110c:	71fa      	strb	r2, [r7, #7]
2000110e:	80bb      	strh	r3, [r7, #4]

	cmd_list[id].id = id;
20001110:	79f9      	ldrb	r1, [r7, #7]
20001112:	f64e 7288 	movw	r2, #61320	; 0xef88
20001116:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000111a:	460b      	mov	r3, r1
2000111c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001120:	ebc1 0303 	rsb	r3, r1, r3
20001124:	4413      	add	r3, r2
20001126:	79fa      	ldrb	r2, [r7, #7]
20001128:	701a      	strb	r2, [r3, #0]
	cmd_list[id].length = length;
2000112a:	79f9      	ldrb	r1, [r7, #7]
2000112c:	f64e 7288 	movw	r2, #61320	; 0xef88
20001130:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001134:	460b      	mov	r3, r1
20001136:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000113a:	ebc1 0303 	rsb	r3, r1, r3
2000113e:	4413      	add	r3, r2
20001140:	793a      	ldrb	r2, [r7, #4]
20001142:	f04f 0100 	mov.w	r1, #0
20001146:	ea41 0202 	orr.w	r2, r1, r2
2000114a:	705a      	strb	r2, [r3, #1]
2000114c:	797a      	ldrb	r2, [r7, #5]
2000114e:	f04f 0100 	mov.w	r1, #0
20001152:	ea41 0202 	orr.w	r2, r1, r2
20001156:	709a      	strb	r2, [r3, #2]
	cmd_list[id].ex_func = ex_func;
20001158:	79f8      	ldrb	r0, [r7, #7]
2000115a:	683a      	ldr	r2, [r7, #0]
2000115c:	f64e 7188 	movw	r1, #61320	; 0xef88
20001160:	f2c2 0100 	movt	r1, #8192	; 0x2000
20001164:	4603      	mov	r3, r0
20001166:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000116a:	ebc0 0303 	rsb	r3, r0, r3
2000116e:	440b      	add	r3, r1
20001170:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20001174:	f04f 0000 	mov.w	r0, #0
20001178:	ea40 0101 	orr.w	r1, r0, r1
2000117c:	70d9      	strb	r1, [r3, #3]
2000117e:	ea4f 2112 	mov.w	r1, r2, lsr #8
20001182:	f001 01ff 	and.w	r1, r1, #255	; 0xff
20001186:	f04f 0000 	mov.w	r0, #0
2000118a:	ea40 0101 	orr.w	r1, r0, r1
2000118e:	7119      	strb	r1, [r3, #4]
20001190:	ea4f 4112 	mov.w	r1, r2, lsr #16
20001194:	f001 01ff 	and.w	r1, r1, #255	; 0xff
20001198:	f04f 0000 	mov.w	r0, #0
2000119c:	ea40 0101 	orr.w	r1, r0, r1
200011a0:	7159      	strb	r1, [r3, #5]
200011a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
200011a6:	f04f 0100 	mov.w	r1, #0
200011aa:	ea41 0202 	orr.w	r2, r1, r2
200011ae:	719a      	strb	r2, [r3, #6]

}
200011b0:	f107 070c 	add.w	r7, r7, #12
200011b4:	46bd      	mov	sp, r7
200011b6:	bc80      	pop	{r7}
200011b8:	4770      	bx	lr
200011ba:	bf00      	nop

200011bc <vcmd_callback>:

void vcmd_callback(){
200011bc:	b580      	push	{r7, lr}
200011be:	af00      	add	r7, sp, #0
	//Execution for the timer based command
	cmd_list[rx_cmd->ccsds_APID - 1].ex_func(rx_cmd);
200011c0:	f64e 5350 	movw	r3, #60752	; 0xed50
200011c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011c8:	681b      	ldr	r3, [r3, #0]
200011ca:	789a      	ldrb	r2, [r3, #2]
200011cc:	78db      	ldrb	r3, [r3, #3]
200011ce:	ea4f 2303 	mov.w	r3, r3, lsl #8
200011d2:	ea43 0302 	orr.w	r3, r3, r2
200011d6:	b29b      	uxth	r3, r3
200011d8:	f103 31ff 	add.w	r1, r3, #4294967295
200011dc:	f64e 7288 	movw	r2, #61320	; 0xef88
200011e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
200011e4:	460b      	mov	r3, r1
200011e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200011ea:	ebc1 0303 	rsb	r3, r1, r3
200011ee:	4413      	add	r3, r2
200011f0:	78da      	ldrb	r2, [r3, #3]
200011f2:	7919      	ldrb	r1, [r3, #4]
200011f4:	ea4f 2101 	mov.w	r1, r1, lsl #8
200011f8:	ea41 0202 	orr.w	r2, r1, r2
200011fc:	7959      	ldrb	r1, [r3, #5]
200011fe:	ea4f 4101 	mov.w	r1, r1, lsl #16
20001202:	ea41 0202 	orr.w	r2, r1, r2
20001206:	799b      	ldrb	r3, [r3, #6]
20001208:	ea4f 6303 	mov.w	r3, r3, lsl #24
2000120c:	ea43 0302 	orr.w	r3, r3, r2
20001210:	461a      	mov	r2, r3
20001212:	f64e 5350 	movw	r3, #60752	; 0xed50
20001216:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000121a:	681b      	ldr	r3, [r3, #0]
2000121c:	4618      	mov	r0, r3
2000121e:	4790      	blx	r2
}
20001220:	bd80      	pop	{r7, pc}
20001222:	bf00      	nop

20001224 <cmd_engine>:

void cmd_engine(rx_cmd_t* rx_cmd){
20001224:	b590      	push	{r4, r7, lr}
20001226:	b085      	sub	sp, #20
20001228:	af02      	add	r7, sp, #8
2000122a:	6078      	str	r0, [r7, #4]

	add_cmd(0, 16, cmd_noop);
2000122c:	f241 3349 	movw	r3, #4937	; 0x1349
20001230:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001234:	f04f 0000 	mov.w	r0, #0
20001238:	f04f 0110 	mov.w	r1, #16
2000123c:	461a      	mov	r2, r3
2000123e:	f7ff ff5f 	bl	20001100 <add_cmd>
	add_cmd(1, 16, set_pkt_rate);   //the actual command apid's is one greater than this.
20001242:	f241 335d 	movw	r3, #4957	; 0x135d
20001246:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000124a:	f04f 0001 	mov.w	r0, #1
2000124e:	f04f 0110 	mov.w	r1, #16
20001252:	461a      	mov	r2, r3
20001254:	f7ff ff54 	bl	20001100 <add_cmd>
	add_cmd(2, 16, cmd_sc_reset);
20001258:	f241 33ed 	movw	r3, #5101	; 0x13ed
2000125c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001260:	f04f 0002 	mov.w	r0, #2
20001264:	f04f 0110 	mov.w	r1, #16
20001268:	461a      	mov	r2, r3
2000126a:	f7ff ff49 	bl	20001100 <add_cmd>

	if(chk_s_cmd(rx_cmd)){  //if the command is storable
2000126e:	6878      	ldr	r0, [r7, #4]
20001270:	f7ff fefa 	bl	20001068 <chk_s_cmd>
20001274:	4603      	mov	r3, r0
20001276:	2b00      	cmp	r3, #0
20001278:	d03b      	beq.n	200012f2 <cmd_engine+0xce>
		cmd_timer[0] = xTimerCreate("cmd_timer", pdMS_TO_TICKS(rx_cmd->ccsds_time * 1000), pdFALSE, (void*)0, vcmd_callback);
2000127a:	687b      	ldr	r3, [r7, #4]
2000127c:	791b      	ldrb	r3, [r3, #4]
2000127e:	461a      	mov	r2, r3
20001280:	f244 2340 	movw	r3, #16960	; 0x4240
20001284:	f2c0 030f 	movt	r3, #15
20001288:	fb03 f302 	mul.w	r3, r3, r2
2000128c:	461a      	mov	r2, r3
2000128e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20001292:	f2c1 0362 	movt	r3, #4194	; 0x1062
20001296:	fba3 1302 	umull	r1, r3, r3, r2
2000129a:	ea4f 1293 	mov.w	r2, r3, lsr #6
2000129e:	f241 13bd 	movw	r3, #4541	; 0x11bd
200012a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012a6:	9300      	str	r3, [sp, #0]
200012a8:	f248 401c 	movw	r0, #33820	; 0x841c
200012ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
200012b0:	4611      	mov	r1, r2
200012b2:	f04f 0200 	mov.w	r2, #0
200012b6:	f04f 0300 	mov.w	r3, #0
200012ba:	f002 facb 	bl	20003854 <xTimerCreate>
200012be:	4602      	mov	r2, r0
200012c0:	f64e 5354 	movw	r3, #60756	; 0xed54
200012c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012c8:	601a      	str	r2, [r3, #0]
		xTimerStart(cmd_timer[0], 0);
200012ca:	f64e 5354 	movw	r3, #60756	; 0xed54
200012ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012d2:	681c      	ldr	r4, [r3, #0]
200012d4:	f001 faac 	bl	20002830 <xTaskGetTickCount>
200012d8:	4603      	mov	r3, r0
200012da:	f04f 0200 	mov.w	r2, #0
200012de:	9200      	str	r2, [sp, #0]
200012e0:	4620      	mov	r0, r4
200012e2:	f04f 0101 	mov.w	r1, #1
200012e6:	461a      	mov	r2, r3
200012e8:	f04f 0300 	mov.w	r3, #0
200012ec:	f002 fb04 	bl	200038f8 <xTimerGenericCommand>
200012f0:	e025      	b.n	2000133e <cmd_engine+0x11a>
	}
	else{
		 //Commands needs to be executed right now.
//		add_cmd(rx_cmd->ccsds_APID, cmd->length, cmd_list[rx_cmd->ccsds_APID].ex_func(rx_cmd->ccsds_APID, rx_cmd->parameters, cmd->length));
		cmd_list[rx_cmd->ccsds_APID - 1].ex_func(rx_cmd);
200012f2:	687b      	ldr	r3, [r7, #4]
200012f4:	789a      	ldrb	r2, [r3, #2]
200012f6:	78db      	ldrb	r3, [r3, #3]
200012f8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200012fc:	ea43 0302 	orr.w	r3, r3, r2
20001300:	b29b      	uxth	r3, r3
20001302:	f103 31ff 	add.w	r1, r3, #4294967295
20001306:	f64e 7288 	movw	r2, #61320	; 0xef88
2000130a:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000130e:	460b      	mov	r3, r1
20001310:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001314:	ebc1 0303 	rsb	r3, r1, r3
20001318:	4413      	add	r3, r2
2000131a:	78da      	ldrb	r2, [r3, #3]
2000131c:	7919      	ldrb	r1, [r3, #4]
2000131e:	ea4f 2101 	mov.w	r1, r1, lsl #8
20001322:	ea41 0202 	orr.w	r2, r1, r2
20001326:	7959      	ldrb	r1, [r3, #5]
20001328:	ea4f 4101 	mov.w	r1, r1, lsl #16
2000132c:	ea41 0202 	orr.w	r2, r1, r2
20001330:	799b      	ldrb	r3, [r3, #6]
20001332:	ea4f 6303 	mov.w	r3, r3, lsl #24
20001336:	ea43 0302 	orr.w	r3, r3, r2
2000133a:	6878      	ldr	r0, [r7, #4]
2000133c:	4798      	blx	r3
	}

}
2000133e:	f107 070c 	add.w	r7, r7, #12
20001342:	46bd      	mov	sp, r7
20001344:	bd90      	pop	{r4, r7, pc}
20001346:	bf00      	nop

20001348 <cmd_noop>:

// Commands Definition

void cmd_noop(rx_cmd_t* rcv_cmd){
20001348:	b480      	push	{r7}
2000134a:	b085      	sub	sp, #20
2000134c:	af00      	add	r7, sp, #0
2000134e:	6078      	str	r0, [r7, #4]

	uint8_t a;

}
20001350:	f107 0714 	add.w	r7, r7, #20
20001354:	46bd      	mov	sp, r7
20001356:	bc80      	pop	{r7}
20001358:	4770      	bx	lr
2000135a:	bf00      	nop

2000135c <set_pkt_rate>:

void set_pkt_rate(rx_cmd_t* rcv_cmd){
2000135c:	b590      	push	{r4, r7, lr}
2000135e:	b085      	sub	sp, #20
20001360:	af02      	add	r7, sp, #8
20001362:	6078      	str	r0, [r7, #4]

	if(rcv_cmd->parameters[1] != 0){
20001364:	687b      	ldr	r3, [r7, #4]
20001366:	79db      	ldrb	r3, [r3, #7]
20001368:	2b00      	cmp	r3, #0
2000136a:	d025      	beq.n	200013b8 <set_pkt_rate+0x5c>
		xTimerChangePeriod(pkt_timer[rcv_cmd->parameters[0]], xMsToTicks(rcv_cmd->parameters[1] * 1000), 0);
2000136c:	687b      	ldr	r3, [r7, #4]
2000136e:	799b      	ldrb	r3, [r3, #6]
20001370:	461a      	mov	r2, r3
20001372:	f64e 5348 	movw	r3, #60744	; 0xed48
20001376:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000137a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
2000137e:	687b      	ldr	r3, [r7, #4]
20001380:	79db      	ldrb	r3, [r3, #7]
20001382:	461a      	mov	r2, r3
20001384:	ea4f 1242 	mov.w	r2, r2, lsl #5
20001388:	ebc3 0202 	rsb	r2, r3, r2
2000138c:	ea4f 0282 	mov.w	r2, r2, lsl #2
20001390:	4413      	add	r3, r2
20001392:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001396:	b29b      	uxth	r3, r3
20001398:	4618      	mov	r0, r3
2000139a:	f7ff fe41 	bl	20001020 <xMsToTicks>
2000139e:	4603      	mov	r3, r0
200013a0:	f04f 0200 	mov.w	r2, #0
200013a4:	9200      	str	r2, [sp, #0]
200013a6:	4620      	mov	r0, r4
200013a8:	f04f 0104 	mov.w	r1, #4
200013ac:	461a      	mov	r2, r3
200013ae:	f04f 0300 	mov.w	r3, #0
200013b2:	f002 faa1 	bl	200038f8 <xTimerGenericCommand>
200013b6:	e014      	b.n	200013e2 <set_pkt_rate+0x86>
	}
	else{
		xTimerStop(pkt_timer[rcv_cmd->parameters[0]], 0);
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	799b      	ldrb	r3, [r3, #6]
200013bc:	461a      	mov	r2, r3
200013be:	f64e 5348 	movw	r3, #60744	; 0xed48
200013c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200013ca:	f04f 0200 	mov.w	r2, #0
200013ce:	9200      	str	r2, [sp, #0]
200013d0:	4618      	mov	r0, r3
200013d2:	f04f 0103 	mov.w	r1, #3
200013d6:	f04f 0200 	mov.w	r2, #0
200013da:	f04f 0300 	mov.w	r3, #0
200013de:	f002 fa8b 	bl	200038f8 <xTimerGenericCommand>
	// Write a function to take in APID and increase the downlink rate of that pkt.
//	if(pkt_rate->pkt_apid == HK_API_ID){
//		xTimerChangePeriod() Change the downlink rate of HK packet
//	}

}
200013e2:	f107 070c 	add.w	r7, r7, #12
200013e6:	46bd      	mov	sp, r7
200013e8:	bd90      	pop	{r4, r7, pc}
200013ea:	bf00      	nop

200013ec <cmd_sc_reset>:

void cmd_sc_reset(rx_cmd_t* rcv_cmd){
200013ec:	b480      	push	{r7}
200013ee:	b083      	sub	sp, #12
200013f0:	af00      	add	r7, sp, #0
200013f2:	6078      	str	r0, [r7, #4]

	command_cnt = 0;
200013f4:	f64e 73a4 	movw	r3, #61348	; 0xefa4
200013f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013fc:	f04f 0200 	mov.w	r2, #0
20001400:	801a      	strh	r2, [r3, #0]
	// Power Cycle other Components;

}
20001402:	f107 070c 	add.w	r7, r7, #12
20001406:	46bd      	mov	sp, r7
20001408:	bc80      	pop	{r7}
2000140a:	4770      	bx	lr

2000140c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
2000140c:	b480      	push	{r7}
2000140e:	b083      	sub	sp, #12
20001410:	af00      	add	r7, sp, #0
20001412:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	f103 0308 	add.w	r3, r3, #8
2000141a:	461a      	mov	r2, r3
2000141c:	687b      	ldr	r3, [r7, #4]
2000141e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20001420:	687b      	ldr	r3, [r7, #4]
20001422:	f04f 32ff 	mov.w	r2, #4294967295
20001426:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001428:	687b      	ldr	r3, [r7, #4]
2000142a:	f103 0308 	add.w	r3, r3, #8
2000142e:	461a      	mov	r2, r3
20001430:	687b      	ldr	r3, [r7, #4]
20001432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001434:	687b      	ldr	r3, [r7, #4]
20001436:	f103 0308 	add.w	r3, r3, #8
2000143a:	461a      	mov	r2, r3
2000143c:	687b      	ldr	r3, [r7, #4]
2000143e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20001440:	687b      	ldr	r3, [r7, #4]
20001442:	f04f 0200 	mov.w	r2, #0
20001446:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20001448:	f107 070c 	add.w	r7, r7, #12
2000144c:	46bd      	mov	sp, r7
2000144e:	bc80      	pop	{r7}
20001450:	4770      	bx	lr
20001452:	bf00      	nop

20001454 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20001454:	b480      	push	{r7}
20001456:	b083      	sub	sp, #12
20001458:	af00      	add	r7, sp, #0
2000145a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
2000145c:	687b      	ldr	r3, [r7, #4]
2000145e:	f04f 0200 	mov.w	r2, #0
20001462:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20001464:	f107 070c 	add.w	r7, r7, #12
20001468:	46bd      	mov	sp, r7
2000146a:	bc80      	pop	{r7}
2000146c:	4770      	bx	lr
2000146e:	bf00      	nop

20001470 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001470:	b480      	push	{r7}
20001472:	b085      	sub	sp, #20
20001474:	af00      	add	r7, sp, #0
20001476:	6078      	str	r0, [r7, #4]
20001478:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
2000147a:	687b      	ldr	r3, [r7, #4]
2000147c:	685b      	ldr	r3, [r3, #4]
2000147e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20001480:	683b      	ldr	r3, [r7, #0]
20001482:	68fa      	ldr	r2, [r7, #12]
20001484:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
20001486:	68fb      	ldr	r3, [r7, #12]
20001488:	689a      	ldr	r2, [r3, #8]
2000148a:	683b      	ldr	r3, [r7, #0]
2000148c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
2000148e:	68fb      	ldr	r3, [r7, #12]
20001490:	689b      	ldr	r3, [r3, #8]
20001492:	683a      	ldr	r2, [r7, #0]
20001494:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
20001496:	68fb      	ldr	r3, [r7, #12]
20001498:	683a      	ldr	r2, [r7, #0]
2000149a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
2000149c:	683b      	ldr	r3, [r7, #0]
2000149e:	687a      	ldr	r2, [r7, #4]
200014a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
200014a2:	687b      	ldr	r3, [r7, #4]
200014a4:	681b      	ldr	r3, [r3, #0]
200014a6:	f103 0201 	add.w	r2, r3, #1
200014aa:	687b      	ldr	r3, [r7, #4]
200014ac:	601a      	str	r2, [r3, #0]
}
200014ae:	f107 0714 	add.w	r7, r7, #20
200014b2:	46bd      	mov	sp, r7
200014b4:	bc80      	pop	{r7}
200014b6:	4770      	bx	lr

200014b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
200014b8:	b480      	push	{r7}
200014ba:	b085      	sub	sp, #20
200014bc:	af00      	add	r7, sp, #0
200014be:	6078      	str	r0, [r7, #4]
200014c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
200014c2:	683b      	ldr	r3, [r7, #0]
200014c4:	681b      	ldr	r3, [r3, #0]
200014c6:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
200014c8:	68fb      	ldr	r3, [r7, #12]
200014ca:	f1b3 3fff 	cmp.w	r3, #4294967295
200014ce:	d103      	bne.n	200014d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
200014d0:	687b      	ldr	r3, [r7, #4]
200014d2:	691b      	ldr	r3, [r3, #16]
200014d4:	60bb      	str	r3, [r7, #8]
200014d6:	e00d      	b.n	200014f4 <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
200014d8:	687b      	ldr	r3, [r7, #4]
200014da:	f103 0308 	add.w	r3, r3, #8
200014de:	60bb      	str	r3, [r7, #8]
200014e0:	e002      	b.n	200014e8 <vListInsert+0x30>
200014e2:	68bb      	ldr	r3, [r7, #8]
200014e4:	685b      	ldr	r3, [r3, #4]
200014e6:	60bb      	str	r3, [r7, #8]
200014e8:	68bb      	ldr	r3, [r7, #8]
200014ea:	685b      	ldr	r3, [r3, #4]
200014ec:	681a      	ldr	r2, [r3, #0]
200014ee:	68fb      	ldr	r3, [r7, #12]
200014f0:	429a      	cmp	r2, r3
200014f2:	d9f6      	bls.n	200014e2 <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
200014f4:	68bb      	ldr	r3, [r7, #8]
200014f6:	685a      	ldr	r2, [r3, #4]
200014f8:	683b      	ldr	r3, [r7, #0]
200014fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
200014fc:	683b      	ldr	r3, [r7, #0]
200014fe:	685b      	ldr	r3, [r3, #4]
20001500:	683a      	ldr	r2, [r7, #0]
20001502:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
20001504:	683b      	ldr	r3, [r7, #0]
20001506:	68ba      	ldr	r2, [r7, #8]
20001508:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
2000150a:	68bb      	ldr	r3, [r7, #8]
2000150c:	683a      	ldr	r2, [r7, #0]
2000150e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001510:	683b      	ldr	r3, [r7, #0]
20001512:	687a      	ldr	r2, [r7, #4]
20001514:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20001516:	687b      	ldr	r3, [r7, #4]
20001518:	681b      	ldr	r3, [r3, #0]
2000151a:	f103 0201 	add.w	r2, r3, #1
2000151e:	687b      	ldr	r3, [r7, #4]
20001520:	601a      	str	r2, [r3, #0]
}
20001522:	f107 0714 	add.w	r7, r7, #20
20001526:	46bd      	mov	sp, r7
20001528:	bc80      	pop	{r7}
2000152a:	4770      	bx	lr

2000152c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
2000152c:	b480      	push	{r7}
2000152e:	b085      	sub	sp, #20
20001530:	af00      	add	r7, sp, #0
20001532:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
20001534:	687b      	ldr	r3, [r7, #4]
20001536:	691b      	ldr	r3, [r3, #16]
20001538:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
2000153a:	687b      	ldr	r3, [r7, #4]
2000153c:	685b      	ldr	r3, [r3, #4]
2000153e:	687a      	ldr	r2, [r7, #4]
20001540:	6892      	ldr	r2, [r2, #8]
20001542:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
20001544:	687b      	ldr	r3, [r7, #4]
20001546:	689b      	ldr	r3, [r3, #8]
20001548:	687a      	ldr	r2, [r7, #4]
2000154a:	6852      	ldr	r2, [r2, #4]
2000154c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
2000154e:	68fb      	ldr	r3, [r7, #12]
20001550:	685a      	ldr	r2, [r3, #4]
20001552:	687b      	ldr	r3, [r7, #4]
20001554:	429a      	cmp	r2, r3
20001556:	d103      	bne.n	20001560 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
20001558:	687b      	ldr	r3, [r7, #4]
2000155a:	689a      	ldr	r2, [r3, #8]
2000155c:	68fb      	ldr	r3, [r7, #12]
2000155e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
20001560:	687b      	ldr	r3, [r7, #4]
20001562:	f04f 0200 	mov.w	r2, #0
20001566:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
20001568:	68fb      	ldr	r3, [r7, #12]
2000156a:	681b      	ldr	r3, [r3, #0]
2000156c:	f103 32ff 	add.w	r2, r3, #4294967295
20001570:	68fb      	ldr	r3, [r7, #12]
20001572:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
20001574:	68fb      	ldr	r3, [r7, #12]
20001576:	681b      	ldr	r3, [r3, #0]
}
20001578:	4618      	mov	r0, r3
2000157a:	f107 0714 	add.w	r7, r7, #20
2000157e:	46bd      	mov	sp, r7
20001580:	bc80      	pop	{r7}
20001582:	4770      	bx	lr

20001584 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
20001584:	b580      	push	{r7, lr}
20001586:	b084      	sub	sp, #16
20001588:	af00      	add	r7, sp, #0
2000158a:	6078      	str	r0, [r7, #4]
2000158c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2000158e:	687b      	ldr	r3, [r7, #4]
20001590:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
20001592:	68bb      	ldr	r3, [r7, #8]
20001594:	2b00      	cmp	r3, #0
20001596:	d109      	bne.n	200015ac <xQueueGenericReset+0x28>
20001598:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000159c:	f383 8811 	msr	BASEPRI, r3
200015a0:	f3bf 8f6f 	isb	sy
200015a4:	f3bf 8f4f 	dsb	sy
200015a8:	60fb      	str	r3, [r7, #12]
200015aa:	e7fe      	b.n	200015aa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
200015ac:	f003 f836 	bl	2000461c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
200015b0:	68bb      	ldr	r3, [r7, #8]
200015b2:	681a      	ldr	r2, [r3, #0]
200015b4:	68bb      	ldr	r3, [r7, #8]
200015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015b8:	68b9      	ldr	r1, [r7, #8]
200015ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
200015bc:	fb01 f303 	mul.w	r3, r1, r3
200015c0:	441a      	add	r2, r3
200015c2:	68bb      	ldr	r3, [r7, #8]
200015c4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
200015c6:	68bb      	ldr	r3, [r7, #8]
200015c8:	f04f 0200 	mov.w	r2, #0
200015cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
200015ce:	68bb      	ldr	r3, [r7, #8]
200015d0:	681a      	ldr	r2, [r3, #0]
200015d2:	68bb      	ldr	r3, [r7, #8]
200015d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
200015d6:	68bb      	ldr	r3, [r7, #8]
200015d8:	681a      	ldr	r2, [r3, #0]
200015da:	68bb      	ldr	r3, [r7, #8]
200015dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015de:	f103 33ff 	add.w	r3, r3, #4294967295
200015e2:	68b9      	ldr	r1, [r7, #8]
200015e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
200015e6:	fb01 f303 	mul.w	r3, r1, r3
200015ea:	441a      	add	r2, r3
200015ec:	68bb      	ldr	r3, [r7, #8]
200015ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
200015f0:	68bb      	ldr	r3, [r7, #8]
200015f2:	f04f 32ff 	mov.w	r2, #4294967295
200015f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
200015fa:	68bb      	ldr	r3, [r7, #8]
200015fc:	f04f 32ff 	mov.w	r2, #4294967295
20001600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
20001604:	683b      	ldr	r3, [r7, #0]
20001606:	2b00      	cmp	r3, #0
20001608:	d118      	bne.n	2000163c <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2000160a:	68bb      	ldr	r3, [r7, #8]
2000160c:	691b      	ldr	r3, [r3, #16]
2000160e:	2b00      	cmp	r3, #0
20001610:	d021      	beq.n	20001656 <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001612:	68bb      	ldr	r3, [r7, #8]
20001614:	f103 0310 	add.w	r3, r3, #16
20001618:	4618      	mov	r0, r3
2000161a:	f001 fb47 	bl	20002cac <xTaskRemoveFromEventList>
2000161e:	4603      	mov	r3, r0
20001620:	2b00      	cmp	r3, #0
20001622:	d01a      	beq.n	2000165a <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
20001624:	f64e 5304 	movw	r3, #60676	; 0xed04
20001628:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000162c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001630:	601a      	str	r2, [r3, #0]
20001632:	f3bf 8f4f 	dsb	sy
20001636:	f3bf 8f6f 	isb	sy
2000163a:	e00f      	b.n	2000165c <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
2000163c:	68bb      	ldr	r3, [r7, #8]
2000163e:	f103 0310 	add.w	r3, r3, #16
20001642:	4618      	mov	r0, r3
20001644:	f7ff fee2 	bl	2000140c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
20001648:	68bb      	ldr	r3, [r7, #8]
2000164a:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000164e:	4618      	mov	r0, r3
20001650:	f7ff fedc 	bl	2000140c <vListInitialise>
20001654:	e002      	b.n	2000165c <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
20001656:	bf00      	nop
20001658:	e000      	b.n	2000165c <xQueueGenericReset+0xd8>
2000165a:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
2000165c:	f003 f816 	bl	2000468c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
20001660:	f04f 0301 	mov.w	r3, #1
}
20001664:	4618      	mov	r0, r3
20001666:	f107 0710 	add.w	r7, r7, #16
2000166a:	46bd      	mov	sp, r7
2000166c:	bd80      	pop	{r7, pc}
2000166e:	bf00      	nop

20001670 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
20001670:	b580      	push	{r7, lr}
20001672:	b08a      	sub	sp, #40	; 0x28
20001674:	af02      	add	r7, sp, #8
20001676:	60f8      	str	r0, [r7, #12]
20001678:	60b9      	str	r1, [r7, #8]
2000167a:	4613      	mov	r3, r2
2000167c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
2000167e:	68fb      	ldr	r3, [r7, #12]
20001680:	2b00      	cmp	r3, #0
20001682:	d109      	bne.n	20001698 <xQueueGenericCreate+0x28>
20001684:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001688:	f383 8811 	msr	BASEPRI, r3
2000168c:	f3bf 8f6f 	isb	sy
20001690:	f3bf 8f4f 	dsb	sy
20001694:	61fb      	str	r3, [r7, #28]
20001696:	e7fe      	b.n	20001696 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
20001698:	68bb      	ldr	r3, [r7, #8]
2000169a:	2b00      	cmp	r3, #0
2000169c:	d103      	bne.n	200016a6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
2000169e:	f04f 0300 	mov.w	r3, #0
200016a2:	617b      	str	r3, [r7, #20]
200016a4:	e004      	b.n	200016b0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200016a6:	68fb      	ldr	r3, [r7, #12]
200016a8:	68ba      	ldr	r2, [r7, #8]
200016aa:	fb02 f303 	mul.w	r3, r2, r3
200016ae:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
200016b0:	697b      	ldr	r3, [r7, #20]
200016b2:	f103 0350 	add.w	r3, r3, #80	; 0x50
200016b6:	4618      	mov	r0, r3
200016b8:	f002 fc66 	bl	20003f88 <pvPortMalloc>
200016bc:	4603      	mov	r3, r0
200016be:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
200016c0:	693b      	ldr	r3, [r7, #16]
200016c2:	2b00      	cmp	r3, #0
200016c4:	d00b      	beq.n	200016de <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
200016c6:	693b      	ldr	r3, [r7, #16]
200016c8:	f103 0350 	add.w	r3, r3, #80	; 0x50
200016cc:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
200016ce:	79fb      	ldrb	r3, [r7, #7]
200016d0:	693a      	ldr	r2, [r7, #16]
200016d2:	9200      	str	r2, [sp, #0]
200016d4:	68f8      	ldr	r0, [r7, #12]
200016d6:	68b9      	ldr	r1, [r7, #8]
200016d8:	69ba      	ldr	r2, [r7, #24]
200016da:	f000 f807 	bl	200016ec <prvInitialiseNewQueue>
		}

		return pxNewQueue;
200016de:	693b      	ldr	r3, [r7, #16]
	}
200016e0:	4618      	mov	r0, r3
200016e2:	f107 0720 	add.w	r7, r7, #32
200016e6:	46bd      	mov	sp, r7
200016e8:	bd80      	pop	{r7, pc}
200016ea:	bf00      	nop

200016ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
200016ec:	b580      	push	{r7, lr}
200016ee:	b084      	sub	sp, #16
200016f0:	af00      	add	r7, sp, #0
200016f2:	60f8      	str	r0, [r7, #12]
200016f4:	60b9      	str	r1, [r7, #8]
200016f6:	607a      	str	r2, [r7, #4]
200016f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
200016fa:	68bb      	ldr	r3, [r7, #8]
200016fc:	2b00      	cmp	r3, #0
200016fe:	d103      	bne.n	20001708 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
20001700:	69ba      	ldr	r2, [r7, #24]
20001702:	69bb      	ldr	r3, [r7, #24]
20001704:	601a      	str	r2, [r3, #0]
20001706:	e002      	b.n	2000170e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001708:	687a      	ldr	r2, [r7, #4]
2000170a:	69bb      	ldr	r3, [r7, #24]
2000170c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
2000170e:	69bb      	ldr	r3, [r7, #24]
20001710:	68fa      	ldr	r2, [r7, #12]
20001712:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
20001714:	69bb      	ldr	r3, [r7, #24]
20001716:	68ba      	ldr	r2, [r7, #8]
20001718:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
2000171a:	69b8      	ldr	r0, [r7, #24]
2000171c:	f04f 0101 	mov.w	r1, #1
20001720:	f7ff ff30 	bl	20001584 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
20001724:	69bb      	ldr	r3, [r7, #24]
20001726:	78fa      	ldrb	r2, [r7, #3]
20001728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
2000172c:	f107 0710 	add.w	r7, r7, #16
20001730:	46bd      	mov	sp, r7
20001732:	bd80      	pop	{r7, pc}

20001734 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
20001734:	b580      	push	{r7, lr}
20001736:	b082      	sub	sp, #8
20001738:	af00      	add	r7, sp, #0
2000173a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
2000173c:	687b      	ldr	r3, [r7, #4]
2000173e:	2b00      	cmp	r3, #0
20001740:	d014      	beq.n	2000176c <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
20001742:	687b      	ldr	r3, [r7, #4]
20001744:	f04f 0200 	mov.w	r2, #0
20001748:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
2000174a:	687b      	ldr	r3, [r7, #4]
2000174c:	f04f 0200 	mov.w	r2, #0
20001750:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
20001752:	687b      	ldr	r3, [r7, #4]
20001754:	f04f 0200 	mov.w	r2, #0
20001758:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
2000175a:	6878      	ldr	r0, [r7, #4]
2000175c:	f04f 0100 	mov.w	r1, #0
20001760:	f04f 0200 	mov.w	r2, #0
20001764:	f04f 0300 	mov.w	r3, #0
20001768:	f000 f820 	bl	200017ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
2000176c:	f107 0708 	add.w	r7, r7, #8
20001770:	46bd      	mov	sp, r7
20001772:	bd80      	pop	{r7, pc}

20001774 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
20001774:	b580      	push	{r7, lr}
20001776:	b086      	sub	sp, #24
20001778:	af00      	add	r7, sp, #0
2000177a:	4603      	mov	r3, r0
2000177c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
2000177e:	f04f 0301 	mov.w	r3, #1
20001782:	613b      	str	r3, [r7, #16]
20001784:	f04f 0300 	mov.w	r3, #0
20001788:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
2000178a:	79fb      	ldrb	r3, [r7, #7]
2000178c:	6938      	ldr	r0, [r7, #16]
2000178e:	6979      	ldr	r1, [r7, #20]
20001790:	461a      	mov	r2, r3
20001792:	f7ff ff6d 	bl	20001670 <xQueueGenericCreate>
20001796:	4603      	mov	r3, r0
20001798:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
2000179a:	68f8      	ldr	r0, [r7, #12]
2000179c:	f7ff ffca 	bl	20001734 <prvInitialiseMutex>

		return pxNewQueue;
200017a0:	68fb      	ldr	r3, [r7, #12]
	}
200017a2:	4618      	mov	r0, r3
200017a4:	f107 0718 	add.w	r7, r7, #24
200017a8:	46bd      	mov	sp, r7
200017aa:	bd80      	pop	{r7, pc}

200017ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
200017ac:	b580      	push	{r7, lr}
200017ae:	b08e      	sub	sp, #56	; 0x38
200017b0:	af00      	add	r7, sp, #0
200017b2:	60f8      	str	r0, [r7, #12]
200017b4:	60b9      	str	r1, [r7, #8]
200017b6:	607a      	str	r2, [r7, #4]
200017b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
200017ba:	f04f 0300 	mov.w	r3, #0
200017be:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200017c0:	68fb      	ldr	r3, [r7, #12]
200017c2:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
200017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017c6:	2b00      	cmp	r3, #0
200017c8:	d109      	bne.n	200017de <xQueueGenericSend+0x32>
200017ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200017ce:	f383 8811 	msr	BASEPRI, r3
200017d2:	f3bf 8f6f 	isb	sy
200017d6:	f3bf 8f4f 	dsb	sy
200017da:	62bb      	str	r3, [r7, #40]	; 0x28
200017dc:	e7fe      	b.n	200017dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
200017de:	68bb      	ldr	r3, [r7, #8]
200017e0:	2b00      	cmp	r3, #0
200017e2:	d103      	bne.n	200017ec <xQueueGenericSend+0x40>
200017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200017e8:	2b00      	cmp	r3, #0
200017ea:	d102      	bne.n	200017f2 <xQueueGenericSend+0x46>
200017ec:	f04f 0301 	mov.w	r3, #1
200017f0:	e001      	b.n	200017f6 <xQueueGenericSend+0x4a>
200017f2:	f04f 0300 	mov.w	r3, #0
200017f6:	2b00      	cmp	r3, #0
200017f8:	d109      	bne.n	2000180e <xQueueGenericSend+0x62>
200017fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200017fe:	f383 8811 	msr	BASEPRI, r3
20001802:	f3bf 8f6f 	isb	sy
20001806:	f3bf 8f4f 	dsb	sy
2000180a:	62fb      	str	r3, [r7, #44]	; 0x2c
2000180c:	e7fe      	b.n	2000180c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
2000180e:	683b      	ldr	r3, [r7, #0]
20001810:	2b02      	cmp	r3, #2
20001812:	d103      	bne.n	2000181c <xQueueGenericSend+0x70>
20001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001818:	2b01      	cmp	r3, #1
2000181a:	d102      	bne.n	20001822 <xQueueGenericSend+0x76>
2000181c:	f04f 0301 	mov.w	r3, #1
20001820:	e001      	b.n	20001826 <xQueueGenericSend+0x7a>
20001822:	f04f 0300 	mov.w	r3, #0
20001826:	2b00      	cmp	r3, #0
20001828:	d109      	bne.n	2000183e <xQueueGenericSend+0x92>
2000182a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000182e:	f383 8811 	msr	BASEPRI, r3
20001832:	f3bf 8f6f 	isb	sy
20001836:	f3bf 8f4f 	dsb	sy
2000183a:	633b      	str	r3, [r7, #48]	; 0x30
2000183c:	e7fe      	b.n	2000183c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
2000183e:	f001 fc3d 	bl	200030bc <xTaskGetSchedulerState>
20001842:	4603      	mov	r3, r0
20001844:	2b00      	cmp	r3, #0
20001846:	d102      	bne.n	2000184e <xQueueGenericSend+0xa2>
20001848:	687b      	ldr	r3, [r7, #4]
2000184a:	2b00      	cmp	r3, #0
2000184c:	d102      	bne.n	20001854 <xQueueGenericSend+0xa8>
2000184e:	f04f 0301 	mov.w	r3, #1
20001852:	e001      	b.n	20001858 <xQueueGenericSend+0xac>
20001854:	f04f 0300 	mov.w	r3, #0
20001858:	2b00      	cmp	r3, #0
2000185a:	d10a      	bne.n	20001872 <xQueueGenericSend+0xc6>
2000185c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001860:	f383 8811 	msr	BASEPRI, r3
20001864:	f3bf 8f6f 	isb	sy
20001868:	f3bf 8f4f 	dsb	sy
2000186c:	637b      	str	r3, [r7, #52]	; 0x34
2000186e:	e7fe      	b.n	2000186e <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
20001870:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001872:	f002 fed3 	bl	2000461c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000187e:	429a      	cmp	r2, r3
20001880:	d302      	bcc.n	20001888 <xQueueGenericSend+0xdc>
20001882:	683b      	ldr	r3, [r7, #0]
20001884:	2b02      	cmp	r3, #2
20001886:	d134      	bne.n	200018f2 <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001888:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000188a:	68b9      	ldr	r1, [r7, #8]
2000188c:	683a      	ldr	r2, [r7, #0]
2000188e:	f000 fa7b 	bl	20001d88 <prvCopyDataToQueue>
20001892:	4603      	mov	r3, r0
20001894:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000189a:	2b00      	cmp	r3, #0
2000189c:	d014      	beq.n	200018c8 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2000189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200018a0:	f103 0324 	add.w	r3, r3, #36	; 0x24
200018a4:	4618      	mov	r0, r3
200018a6:	f001 fa01 	bl	20002cac <xTaskRemoveFromEventList>
200018aa:	4603      	mov	r3, r0
200018ac:	2b00      	cmp	r3, #0
200018ae:	d01a      	beq.n	200018e6 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
200018b0:	f64e 5304 	movw	r3, #60676	; 0xed04
200018b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
200018b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200018bc:	601a      	str	r2, [r3, #0]
200018be:	f3bf 8f4f 	dsb	sy
200018c2:	f3bf 8f6f 	isb	sy
200018c6:	e00f      	b.n	200018e8 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
200018c8:	6a3b      	ldr	r3, [r7, #32]
200018ca:	2b00      	cmp	r3, #0
200018cc:	d00c      	beq.n	200018e8 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
200018ce:	f64e 5304 	movw	r3, #60676	; 0xed04
200018d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200018d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200018da:	601a      	str	r2, [r3, #0]
200018dc:	f3bf 8f4f 	dsb	sy
200018e0:	f3bf 8f6f 	isb	sy
200018e4:	e000      	b.n	200018e8 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
200018e6:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
200018e8:	f002 fed0 	bl	2000468c <vPortExitCritical>
				return pdPASS;
200018ec:	f04f 0301 	mov.w	r3, #1
200018f0:	e06f      	b.n	200019d2 <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
200018f2:	687b      	ldr	r3, [r7, #4]
200018f4:	2b00      	cmp	r3, #0
200018f6:	d104      	bne.n	20001902 <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
200018f8:	f002 fec8 	bl	2000468c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
200018fc:	f04f 0300 	mov.w	r3, #0
20001900:	e067      	b.n	200019d2 <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
20001902:	69fb      	ldr	r3, [r7, #28]
20001904:	2b00      	cmp	r3, #0
20001906:	d107      	bne.n	20001918 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001908:	f107 0314 	add.w	r3, r7, #20
2000190c:	4618      	mov	r0, r3
2000190e:	f001 fa45 	bl	20002d9c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001912:	f04f 0301 	mov.w	r3, #1
20001916:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001918:	f002 feb8 	bl	2000468c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
2000191c:	f000 fea6 	bl	2000266c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001920:	f002 fe7c 	bl	2000461c <vPortEnterCritical>
20001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001926:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
2000192a:	b2db      	uxtb	r3, r3
2000192c:	b25b      	sxtb	r3, r3
2000192e:	f1b3 3fff 	cmp.w	r3, #4294967295
20001932:	d104      	bne.n	2000193e <xQueueGenericSend+0x192>
20001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001936:	f04f 0200 	mov.w	r2, #0
2000193a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2000193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001944:	b2db      	uxtb	r3, r3
20001946:	b25b      	sxtb	r3, r3
20001948:	f1b3 3fff 	cmp.w	r3, #4294967295
2000194c:	d104      	bne.n	20001958 <xQueueGenericSend+0x1ac>
2000194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001950:	f04f 0200 	mov.w	r2, #0
20001954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001958:	f002 fe98 	bl	2000468c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
2000195c:	f107 0214 	add.w	r2, r7, #20
20001960:	f107 0304 	add.w	r3, r7, #4
20001964:	4610      	mov	r0, r2
20001966:	4619      	mov	r1, r3
20001968:	f001 fa3c 	bl	20002de4 <xTaskCheckForTimeOut>
2000196c:	4603      	mov	r3, r0
2000196e:	2b00      	cmp	r3, #0
20001970:	d128      	bne.n	200019c4 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
20001972:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001974:	f000 fb18 	bl	20001fa8 <prvIsQueueFull>
20001978:	4603      	mov	r3, r0
2000197a:	2b00      	cmp	r3, #0
2000197c:	d01c      	beq.n	200019b8 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
2000197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001980:	f103 0210 	add.w	r2, r3, #16
20001984:	687b      	ldr	r3, [r7, #4]
20001986:	4610      	mov	r0, r2
20001988:	4619      	mov	r1, r3
2000198a:	f001 f93d 	bl	20002c08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
2000198e:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001990:	f000 fa9a 	bl	20001ec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
20001994:	f000 fe7c 	bl	20002690 <xTaskResumeAll>
20001998:	4603      	mov	r3, r0
2000199a:	2b00      	cmp	r3, #0
2000199c:	f47f af68 	bne.w	20001870 <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
200019a0:	f64e 5304 	movw	r3, #60676	; 0xed04
200019a4:	f2ce 0300 	movt	r3, #57344	; 0xe000
200019a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200019ac:	601a      	str	r2, [r3, #0]
200019ae:	f3bf 8f4f 	dsb	sy
200019b2:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200019b6:	e75c      	b.n	20001872 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
200019b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
200019ba:	f000 fa85 	bl	20001ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
200019be:	f000 fe67 	bl	20002690 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200019c2:	e756      	b.n	20001872 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
200019c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200019c6:	f000 fa7f 	bl	20001ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
200019ca:	f000 fe61 	bl	20002690 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
200019ce:	f04f 0300 	mov.w	r3, #0
		}
	}
}
200019d2:	4618      	mov	r0, r3
200019d4:	f107 0738 	add.w	r7, r7, #56	; 0x38
200019d8:	46bd      	mov	sp, r7
200019da:	bd80      	pop	{r7, pc}

200019dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
200019dc:	b580      	push	{r7, lr}
200019de:	b08e      	sub	sp, #56	; 0x38
200019e0:	af00      	add	r7, sp, #0
200019e2:	60f8      	str	r0, [r7, #12]
200019e4:	60b9      	str	r1, [r7, #8]
200019e6:	607a      	str	r2, [r7, #4]
200019e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200019ea:	68fb      	ldr	r3, [r7, #12]
200019ec:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
200019ee:	69bb      	ldr	r3, [r7, #24]
200019f0:	2b00      	cmp	r3, #0
200019f2:	d109      	bne.n	20001a08 <xQueueGenericSendFromISR+0x2c>
200019f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200019f8:	f383 8811 	msr	BASEPRI, r3
200019fc:	f3bf 8f6f 	isb	sy
20001a00:	f3bf 8f4f 	dsb	sy
20001a04:	623b      	str	r3, [r7, #32]
20001a06:	e7fe      	b.n	20001a06 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001a08:	68bb      	ldr	r3, [r7, #8]
20001a0a:	2b00      	cmp	r3, #0
20001a0c:	d103      	bne.n	20001a16 <xQueueGenericSendFromISR+0x3a>
20001a0e:	69bb      	ldr	r3, [r7, #24]
20001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a12:	2b00      	cmp	r3, #0
20001a14:	d102      	bne.n	20001a1c <xQueueGenericSendFromISR+0x40>
20001a16:	f04f 0301 	mov.w	r3, #1
20001a1a:	e001      	b.n	20001a20 <xQueueGenericSendFromISR+0x44>
20001a1c:	f04f 0300 	mov.w	r3, #0
20001a20:	2b00      	cmp	r3, #0
20001a22:	d109      	bne.n	20001a38 <xQueueGenericSendFromISR+0x5c>
20001a24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a28:	f383 8811 	msr	BASEPRI, r3
20001a2c:	f3bf 8f6f 	isb	sy
20001a30:	f3bf 8f4f 	dsb	sy
20001a34:	627b      	str	r3, [r7, #36]	; 0x24
20001a36:	e7fe      	b.n	20001a36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001a38:	683b      	ldr	r3, [r7, #0]
20001a3a:	2b02      	cmp	r3, #2
20001a3c:	d103      	bne.n	20001a46 <xQueueGenericSendFromISR+0x6a>
20001a3e:	69bb      	ldr	r3, [r7, #24]
20001a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001a42:	2b01      	cmp	r3, #1
20001a44:	d102      	bne.n	20001a4c <xQueueGenericSendFromISR+0x70>
20001a46:	f04f 0301 	mov.w	r3, #1
20001a4a:	e001      	b.n	20001a50 <xQueueGenericSendFromISR+0x74>
20001a4c:	f04f 0300 	mov.w	r3, #0
20001a50:	2b00      	cmp	r3, #0
20001a52:	d109      	bne.n	20001a68 <xQueueGenericSendFromISR+0x8c>
20001a54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a58:	f383 8811 	msr	BASEPRI, r3
20001a5c:	f3bf 8f6f 	isb	sy
20001a60:	f3bf 8f4f 	dsb	sy
20001a64:	62bb      	str	r3, [r7, #40]	; 0x28
20001a66:	e7fe      	b.n	20001a66 <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001a68:	f002 feac 	bl	200047c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20001a6c:	f3ef 8211 	mrs	r2, BASEPRI
20001a70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a74:	f383 8811 	msr	BASEPRI, r3
20001a78:	f3bf 8f6f 	isb	sy
20001a7c:	f3bf 8f4f 	dsb	sy
20001a80:	633a      	str	r2, [r7, #48]	; 0x30
20001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
20001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20001a86:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001a88:	69bb      	ldr	r3, [r7, #24]
20001a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001a8c:	69bb      	ldr	r3, [r7, #24]
20001a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001a90:	429a      	cmp	r2, r3
20001a92:	d302      	bcc.n	20001a9a <xQueueGenericSendFromISR+0xbe>
20001a94:	683b      	ldr	r3, [r7, #0]
20001a96:	2b02      	cmp	r3, #2
20001a98:	d134      	bne.n	20001b04 <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001a9a:	69bb      	ldr	r3, [r7, #24]
20001a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001aa0:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001aa2:	69b8      	ldr	r0, [r7, #24]
20001aa4:	68b9      	ldr	r1, [r7, #8]
20001aa6:	683a      	ldr	r2, [r7, #0]
20001aa8:	f000 f96e 	bl	20001d88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001aac:	f997 301f 	ldrsb.w	r3, [r7, #31]
20001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
20001ab4:	d114      	bne.n	20001ae0 <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001ab6:	69bb      	ldr	r3, [r7, #24]
20001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001aba:	2b00      	cmp	r3, #0
20001abc:	d019      	beq.n	20001af2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001abe:	69bb      	ldr	r3, [r7, #24]
20001ac0:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001ac4:	4618      	mov	r0, r3
20001ac6:	f001 f8f1 	bl	20002cac <xTaskRemoveFromEventList>
20001aca:	4603      	mov	r3, r0
20001acc:	2b00      	cmp	r3, #0
20001ace:	d012      	beq.n	20001af6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001ad0:	687b      	ldr	r3, [r7, #4]
20001ad2:	2b00      	cmp	r3, #0
20001ad4:	d011      	beq.n	20001afa <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001ad6:	687b      	ldr	r3, [r7, #4]
20001ad8:	f04f 0201 	mov.w	r2, #1
20001adc:	601a      	str	r2, [r3, #0]
20001ade:	e00d      	b.n	20001afc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001ae0:	7ffb      	ldrb	r3, [r7, #31]
20001ae2:	f103 0301 	add.w	r3, r3, #1
20001ae6:	b2db      	uxtb	r3, r3
20001ae8:	461a      	mov	r2, r3
20001aea:	69bb      	ldr	r3, [r7, #24]
20001aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001af0:	e004      	b.n	20001afc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001af2:	bf00      	nop
20001af4:	e002      	b.n	20001afc <xQueueGenericSendFromISR+0x120>
20001af6:	bf00      	nop
20001af8:	e000      	b.n	20001afc <xQueueGenericSendFromISR+0x120>
20001afa:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
20001afc:	f04f 0301 	mov.w	r3, #1
20001b00:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001b02:	e002      	b.n	20001b0a <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001b04:	f04f 0300 	mov.w	r3, #0
20001b08:	613b      	str	r3, [r7, #16]
20001b0a:	697b      	ldr	r3, [r7, #20]
20001b0c:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001b10:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001b14:	693b      	ldr	r3, [r7, #16]
}
20001b16:	4618      	mov	r0, r3
20001b18:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001b1c:	46bd      	mov	sp, r7
20001b1e:	bd80      	pop	{r7, pc}

20001b20 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
20001b20:	b580      	push	{r7, lr}
20001b22:	b08e      	sub	sp, #56	; 0x38
20001b24:	af00      	add	r7, sp, #0
20001b26:	60f8      	str	r0, [r7, #12]
20001b28:	60b9      	str	r1, [r7, #8]
20001b2a:	607a      	str	r2, [r7, #4]
20001b2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
20001b2e:	f04f 0300 	mov.w	r3, #0
20001b32:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001b34:	68fb      	ldr	r3, [r7, #12]
20001b36:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
20001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b3a:	2b00      	cmp	r3, #0
20001b3c:	d109      	bne.n	20001b52 <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20001b3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001b42:	f383 8811 	msr	BASEPRI, r3
20001b46:	f3bf 8f6f 	isb	sy
20001b4a:	f3bf 8f4f 	dsb	sy
20001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
20001b50:	e7fe      	b.n	20001b50 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001b52:	68bb      	ldr	r3, [r7, #8]
20001b54:	2b00      	cmp	r3, #0
20001b56:	d103      	bne.n	20001b60 <xQueueGenericReceive+0x40>
20001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001b5c:	2b00      	cmp	r3, #0
20001b5e:	d102      	bne.n	20001b66 <xQueueGenericReceive+0x46>
20001b60:	f04f 0301 	mov.w	r3, #1
20001b64:	e001      	b.n	20001b6a <xQueueGenericReceive+0x4a>
20001b66:	f04f 0300 	mov.w	r3, #0
20001b6a:	2b00      	cmp	r3, #0
20001b6c:	d109      	bne.n	20001b82 <xQueueGenericReceive+0x62>
20001b6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001b72:	f383 8811 	msr	BASEPRI, r3
20001b76:	f3bf 8f6f 	isb	sy
20001b7a:	f3bf 8f4f 	dsb	sy
20001b7e:	633b      	str	r3, [r7, #48]	; 0x30
20001b80:	e7fe      	b.n	20001b80 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001b82:	f001 fa9b 	bl	200030bc <xTaskGetSchedulerState>
20001b86:	4603      	mov	r3, r0
20001b88:	2b00      	cmp	r3, #0
20001b8a:	d102      	bne.n	20001b92 <xQueueGenericReceive+0x72>
20001b8c:	687b      	ldr	r3, [r7, #4]
20001b8e:	2b00      	cmp	r3, #0
20001b90:	d102      	bne.n	20001b98 <xQueueGenericReceive+0x78>
20001b92:	f04f 0301 	mov.w	r3, #1
20001b96:	e001      	b.n	20001b9c <xQueueGenericReceive+0x7c>
20001b98:	f04f 0300 	mov.w	r3, #0
20001b9c:	2b00      	cmp	r3, #0
20001b9e:	d10c      	bne.n	20001bba <xQueueGenericReceive+0x9a>
20001ba0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001ba4:	f383 8811 	msr	BASEPRI, r3
20001ba8:	f3bf 8f6f 	isb	sy
20001bac:	f3bf 8f4f 	dsb	sy
20001bb0:	637b      	str	r3, [r7, #52]	; 0x34
20001bb2:	e7fe      	b.n	20001bb2 <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001bb4:	bf00      	nop
20001bb6:	e000      	b.n	20001bba <xQueueGenericReceive+0x9a>
20001bb8:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
20001bba:	f002 fd2f 	bl	2000461c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001bc2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001bc6:	2b00      	cmp	r3, #0
20001bc8:	d055      	beq.n	20001c76 <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
20001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bcc:	68db      	ldr	r3, [r3, #12]
20001bce:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001bd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001bd2:	68b9      	ldr	r1, [r7, #8]
20001bd4:	f000 f950 	bl	20001e78 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
20001bd8:	683b      	ldr	r3, [r7, #0]
20001bda:	2b00      	cmp	r3, #0
20001bdc:	d127      	bne.n	20001c2e <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
20001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001be0:	f103 32ff 	add.w	r2, r3, #4294967295
20001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001be6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bea:	681b      	ldr	r3, [r3, #0]
20001bec:	2b00      	cmp	r3, #0
20001bee:	d105      	bne.n	20001bfc <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
20001bf0:	f001 fbd4 	bl	2000339c <pvTaskIncrementMutexHeldCount>
20001bf4:	4603      	mov	r3, r0
20001bf6:	461a      	mov	r2, r3
20001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bfa:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bfe:	691b      	ldr	r3, [r3, #16]
20001c00:	2b00      	cmp	r3, #0
20001c02:	d030      	beq.n	20001c66 <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c06:	f103 0310 	add.w	r3, r3, #16
20001c0a:	4618      	mov	r0, r3
20001c0c:	f001 f84e 	bl	20002cac <xTaskRemoveFromEventList>
20001c10:	4603      	mov	r3, r0
20001c12:	2b00      	cmp	r3, #0
20001c14:	d029      	beq.n	20001c6a <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
20001c16:	f64e 5304 	movw	r3, #60676	; 0xed04
20001c1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c22:	601a      	str	r2, [r3, #0]
20001c24:	f3bf 8f4f 	dsb	sy
20001c28:	f3bf 8f6f 	isb	sy
20001c2c:	e01e      	b.n	20001c6c <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
20001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c30:	6a3a      	ldr	r2, [r7, #32]
20001c32:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001c38:	2b00      	cmp	r3, #0
20001c3a:	d017      	beq.n	20001c6c <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c3e:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001c42:	4618      	mov	r0, r3
20001c44:	f001 f832 	bl	20002cac <xTaskRemoveFromEventList>
20001c48:	4603      	mov	r3, r0
20001c4a:	2b00      	cmp	r3, #0
20001c4c:	d00e      	beq.n	20001c6c <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
20001c4e:	f64e 5304 	movw	r3, #60676	; 0xed04
20001c52:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c5a:	601a      	str	r2, [r3, #0]
20001c5c:	f3bf 8f4f 	dsb	sy
20001c60:	f3bf 8f6f 	isb	sy
20001c64:	e002      	b.n	20001c6c <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
20001c66:	bf00      	nop
20001c68:	e000      	b.n	20001c6c <xQueueGenericReceive+0x14c>
20001c6a:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
20001c6c:	f002 fd0e 	bl	2000468c <vPortExitCritical>
				return pdPASS;
20001c70:	f04f 0301 	mov.w	r3, #1
20001c74:	e083      	b.n	20001d7e <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001c76:	687b      	ldr	r3, [r7, #4]
20001c78:	2b00      	cmp	r3, #0
20001c7a:	d104      	bne.n	20001c86 <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001c7c:	f002 fd06 	bl	2000468c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001c80:	f04f 0300 	mov.w	r3, #0
20001c84:	e07b      	b.n	20001d7e <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
20001c86:	69fb      	ldr	r3, [r7, #28]
20001c88:	2b00      	cmp	r3, #0
20001c8a:	d107      	bne.n	20001c9c <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001c8c:	f107 0314 	add.w	r3, r7, #20
20001c90:	4618      	mov	r0, r3
20001c92:	f001 f883 	bl	20002d9c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001c96:	f04f 0301 	mov.w	r3, #1
20001c9a:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001c9c:	f002 fcf6 	bl	2000468c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001ca0:	f000 fce4 	bl	2000266c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001ca4:	f002 fcba 	bl	2000461c <vPortEnterCritical>
20001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001cae:	b2db      	uxtb	r3, r3
20001cb0:	b25b      	sxtb	r3, r3
20001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
20001cb6:	d104      	bne.n	20001cc2 <xQueueGenericReceive+0x1a2>
20001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cba:	f04f 0200 	mov.w	r2, #0
20001cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001cc8:	b2db      	uxtb	r3, r3
20001cca:	b25b      	sxtb	r3, r3
20001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
20001cd0:	d104      	bne.n	20001cdc <xQueueGenericReceive+0x1bc>
20001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cd4:	f04f 0200 	mov.w	r2, #0
20001cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001cdc:	f002 fcd6 	bl	2000468c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001ce0:	f107 0214 	add.w	r2, r7, #20
20001ce4:	f107 0304 	add.w	r3, r7, #4
20001ce8:	4610      	mov	r0, r2
20001cea:	4619      	mov	r1, r3
20001cec:	f001 f87a 	bl	20002de4 <xTaskCheckForTimeOut>
20001cf0:	4603      	mov	r3, r0
20001cf2:	2b00      	cmp	r3, #0
20001cf4:	d135      	bne.n	20001d62 <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001cf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001cf8:	f000 f93c 	bl	20001f74 <prvIsQueueEmpty>
20001cfc:	4603      	mov	r3, r0
20001cfe:	2b00      	cmp	r3, #0
20001d00:	d029      	beq.n	20001d56 <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d04:	681b      	ldr	r3, [r3, #0]
20001d06:	2b00      	cmp	r3, #0
20001d08:	d108      	bne.n	20001d1c <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
20001d0a:	f002 fc87 	bl	2000461c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
20001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d10:	685b      	ldr	r3, [r3, #4]
20001d12:	4618      	mov	r0, r3
20001d14:	f001 f9f6 	bl	20003104 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
20001d18:	f002 fcb8 	bl	2000468c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d1e:	f103 0224 	add.w	r2, r3, #36	; 0x24
20001d22:	687b      	ldr	r3, [r7, #4]
20001d24:	4610      	mov	r0, r2
20001d26:	4619      	mov	r1, r3
20001d28:	f000 ff6e 	bl	20002c08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d2e:	f000 f8cb 	bl	20001ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001d32:	f000 fcad 	bl	20002690 <xTaskResumeAll>
20001d36:	4603      	mov	r3, r0
20001d38:	2b00      	cmp	r3, #0
20001d3a:	f47f af3b 	bne.w	20001bb4 <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
20001d3e:	f64e 5304 	movw	r3, #60676	; 0xed04
20001d42:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001d4a:	601a      	str	r2, [r3, #0]
20001d4c:	f3bf 8f4f 	dsb	sy
20001d50:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001d54:	e731      	b.n	20001bba <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d58:	f000 f8b6 	bl	20001ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001d5c:	f000 fc98 	bl	20002690 <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001d60:	e72b      	b.n	20001bba <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
20001d62:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d64:	f000 f8b0 	bl	20001ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001d68:	f000 fc92 	bl	20002690 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d6e:	f000 f901 	bl	20001f74 <prvIsQueueEmpty>
20001d72:	4603      	mov	r3, r0
20001d74:	2b00      	cmp	r3, #0
20001d76:	f43f af1f 	beq.w	20001bb8 <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001d7a:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
20001d7e:	4618      	mov	r0, r3
20001d80:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001d84:	46bd      	mov	sp, r7
20001d86:	bd80      	pop	{r7, pc}

20001d88 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001d88:	b580      	push	{r7, lr}
20001d8a:	b086      	sub	sp, #24
20001d8c:	af00      	add	r7, sp, #0
20001d8e:	60f8      	str	r0, [r7, #12]
20001d90:	60b9      	str	r1, [r7, #8]
20001d92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
20001d94:	f04f 0300 	mov.w	r3, #0
20001d98:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001d9a:	68fb      	ldr	r3, [r7, #12]
20001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001d9e:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001da0:	68fb      	ldr	r3, [r7, #12]
20001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001da4:	2b00      	cmp	r3, #0
20001da6:	d10f      	bne.n	20001dc8 <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001da8:	68fb      	ldr	r3, [r7, #12]
20001daa:	681b      	ldr	r3, [r3, #0]
20001dac:	2b00      	cmp	r3, #0
20001dae:	d155      	bne.n	20001e5c <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
20001db0:	68fb      	ldr	r3, [r7, #12]
20001db2:	685b      	ldr	r3, [r3, #4]
20001db4:	4618      	mov	r0, r3
20001db6:	f001 fa4b 	bl	20003250 <xTaskPriorityDisinherit>
20001dba:	4603      	mov	r3, r0
20001dbc:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
20001dbe:	68fb      	ldr	r3, [r7, #12]
20001dc0:	f04f 0200 	mov.w	r2, #0
20001dc4:	605a      	str	r2, [r3, #4]
20001dc6:	e04c      	b.n	20001e62 <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001dc8:	687b      	ldr	r3, [r7, #4]
20001dca:	2b00      	cmp	r3, #0
20001dcc:	d11a      	bne.n	20001e04 <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
20001dce:	68fb      	ldr	r3, [r7, #12]
20001dd0:	689a      	ldr	r2, [r3, #8]
20001dd2:	68fb      	ldr	r3, [r7, #12]
20001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001dd6:	4610      	mov	r0, r2
20001dd8:	68b9      	ldr	r1, [r7, #8]
20001dda:	461a      	mov	r2, r3
20001ddc:	f006 f9e8 	bl	200081b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
20001de0:	68fb      	ldr	r3, [r7, #12]
20001de2:	689a      	ldr	r2, [r3, #8]
20001de4:	68fb      	ldr	r3, [r7, #12]
20001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001de8:	441a      	add	r2, r3
20001dea:	68fb      	ldr	r3, [r7, #12]
20001dec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001dee:	68fb      	ldr	r3, [r7, #12]
20001df0:	689a      	ldr	r2, [r3, #8]
20001df2:	68fb      	ldr	r3, [r7, #12]
20001df4:	685b      	ldr	r3, [r3, #4]
20001df6:	429a      	cmp	r2, r3
20001df8:	d332      	bcc.n	20001e60 <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001dfa:	68fb      	ldr	r3, [r7, #12]
20001dfc:	681a      	ldr	r2, [r3, #0]
20001dfe:	68fb      	ldr	r3, [r7, #12]
20001e00:	609a      	str	r2, [r3, #8]
20001e02:	e02e      	b.n	20001e62 <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001e04:	68fb      	ldr	r3, [r7, #12]
20001e06:	68da      	ldr	r2, [r3, #12]
20001e08:	68fb      	ldr	r3, [r7, #12]
20001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e0c:	4610      	mov	r0, r2
20001e0e:	68b9      	ldr	r1, [r7, #8]
20001e10:	461a      	mov	r2, r3
20001e12:	f006 f9cd 	bl	200081b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
20001e16:	68fb      	ldr	r3, [r7, #12]
20001e18:	68da      	ldr	r2, [r3, #12]
20001e1a:	68fb      	ldr	r3, [r7, #12]
20001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e1e:	f1c3 0300 	rsb	r3, r3, #0
20001e22:	441a      	add	r2, r3
20001e24:	68fb      	ldr	r3, [r7, #12]
20001e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001e28:	68fb      	ldr	r3, [r7, #12]
20001e2a:	68da      	ldr	r2, [r3, #12]
20001e2c:	68fb      	ldr	r3, [r7, #12]
20001e2e:	681b      	ldr	r3, [r3, #0]
20001e30:	429a      	cmp	r2, r3
20001e32:	d208      	bcs.n	20001e46 <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
20001e34:	68fb      	ldr	r3, [r7, #12]
20001e36:	685a      	ldr	r2, [r3, #4]
20001e38:	68fb      	ldr	r3, [r7, #12]
20001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e3c:	f1c3 0300 	rsb	r3, r3, #0
20001e40:	441a      	add	r2, r3
20001e42:	68fb      	ldr	r3, [r7, #12]
20001e44:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20001e46:	687b      	ldr	r3, [r7, #4]
20001e48:	2b02      	cmp	r3, #2
20001e4a:	d10a      	bne.n	20001e62 <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001e4c:	697b      	ldr	r3, [r7, #20]
20001e4e:	2b00      	cmp	r3, #0
20001e50:	d007      	beq.n	20001e62 <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
20001e52:	697b      	ldr	r3, [r7, #20]
20001e54:	f103 33ff 	add.w	r3, r3, #4294967295
20001e58:	617b      	str	r3, [r7, #20]
20001e5a:	e002      	b.n	20001e62 <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
20001e5c:	bf00      	nop
20001e5e:	e000      	b.n	20001e62 <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001e60:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
20001e62:	697b      	ldr	r3, [r7, #20]
20001e64:	f103 0201 	add.w	r2, r3, #1
20001e68:	68fb      	ldr	r3, [r7, #12]
20001e6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
20001e6c:	693b      	ldr	r3, [r7, #16]
}
20001e6e:	4618      	mov	r0, r3
20001e70:	f107 0718 	add.w	r7, r7, #24
20001e74:	46bd      	mov	sp, r7
20001e76:	bd80      	pop	{r7, pc}

20001e78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001e78:	b580      	push	{r7, lr}
20001e7a:	b082      	sub	sp, #8
20001e7c:	af00      	add	r7, sp, #0
20001e7e:	6078      	str	r0, [r7, #4]
20001e80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001e82:	687b      	ldr	r3, [r7, #4]
20001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e86:	2b00      	cmp	r3, #0
20001e88:	d019      	beq.n	20001ebe <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
20001e8a:	687b      	ldr	r3, [r7, #4]
20001e8c:	68da      	ldr	r2, [r3, #12]
20001e8e:	687b      	ldr	r3, [r7, #4]
20001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e92:	441a      	add	r2, r3
20001e94:	687b      	ldr	r3, [r7, #4]
20001e96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001e98:	687b      	ldr	r3, [r7, #4]
20001e9a:	68da      	ldr	r2, [r3, #12]
20001e9c:	687b      	ldr	r3, [r7, #4]
20001e9e:	685b      	ldr	r3, [r3, #4]
20001ea0:	429a      	cmp	r2, r3
20001ea2:	d303      	bcc.n	20001eac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
20001ea4:	687b      	ldr	r3, [r7, #4]
20001ea6:	681a      	ldr	r2, [r3, #0]
20001ea8:	687b      	ldr	r3, [r7, #4]
20001eaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
20001eac:	687b      	ldr	r3, [r7, #4]
20001eae:	68da      	ldr	r2, [r3, #12]
20001eb0:	687b      	ldr	r3, [r7, #4]
20001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001eb4:	6838      	ldr	r0, [r7, #0]
20001eb6:	4611      	mov	r1, r2
20001eb8:	461a      	mov	r2, r3
20001eba:	f006 f979 	bl	200081b0 <memcpy>
	}
}
20001ebe:	f107 0708 	add.w	r7, r7, #8
20001ec2:	46bd      	mov	sp, r7
20001ec4:	bd80      	pop	{r7, pc}
20001ec6:	bf00      	nop

20001ec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001ec8:	b580      	push	{r7, lr}
20001eca:	b084      	sub	sp, #16
20001ecc:	af00      	add	r7, sp, #0
20001ece:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001ed0:	f002 fba4 	bl	2000461c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001ed4:	687b      	ldr	r3, [r7, #4]
20001ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001eda:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001edc:	e012      	b.n	20001f04 <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001ede:	687b      	ldr	r3, [r7, #4]
20001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001ee2:	2b00      	cmp	r3, #0
20001ee4:	d013      	beq.n	20001f0e <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001ee6:	687b      	ldr	r3, [r7, #4]
20001ee8:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001eec:	4618      	mov	r0, r3
20001eee:	f000 fedd 	bl	20002cac <xTaskRemoveFromEventList>
20001ef2:	4603      	mov	r3, r0
20001ef4:	2b00      	cmp	r3, #0
20001ef6:	d001      	beq.n	20001efc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001ef8:	f000 ffdc 	bl	20002eb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001efc:	7bbb      	ldrb	r3, [r7, #14]
20001efe:	f103 33ff 	add.w	r3, r3, #4294967295
20001f02:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001f08:	2b00      	cmp	r3, #0
20001f0a:	dce8      	bgt.n	20001ede <prvUnlockQueue+0x16>
20001f0c:	e000      	b.n	20001f10 <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
20001f0e:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001f10:	687b      	ldr	r3, [r7, #4]
20001f12:	f04f 32ff 	mov.w	r2, #4294967295
20001f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001f1a:	f002 fbb7 	bl	2000468c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001f1e:	f002 fb7d 	bl	2000461c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001f22:	687b      	ldr	r3, [r7, #4]
20001f24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001f28:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001f2a:	e012      	b.n	20001f52 <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001f2c:	687b      	ldr	r3, [r7, #4]
20001f2e:	691b      	ldr	r3, [r3, #16]
20001f30:	2b00      	cmp	r3, #0
20001f32:	d013      	beq.n	20001f5c <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001f34:	687b      	ldr	r3, [r7, #4]
20001f36:	f103 0310 	add.w	r3, r3, #16
20001f3a:	4618      	mov	r0, r3
20001f3c:	f000 feb6 	bl	20002cac <xTaskRemoveFromEventList>
20001f40:	4603      	mov	r3, r0
20001f42:	2b00      	cmp	r3, #0
20001f44:	d001      	beq.n	20001f4a <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
20001f46:	f000 ffb5 	bl	20002eb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001f4a:	7bfb      	ldrb	r3, [r7, #15]
20001f4c:	f103 33ff 	add.w	r3, r3, #4294967295
20001f50:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001f56:	2b00      	cmp	r3, #0
20001f58:	dce8      	bgt.n	20001f2c <prvUnlockQueue+0x64>
20001f5a:	e000      	b.n	20001f5e <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
20001f5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001f5e:	687b      	ldr	r3, [r7, #4]
20001f60:	f04f 32ff 	mov.w	r2, #4294967295
20001f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001f68:	f002 fb90 	bl	2000468c <vPortExitCritical>
}
20001f6c:	f107 0710 	add.w	r7, r7, #16
20001f70:	46bd      	mov	sp, r7
20001f72:	bd80      	pop	{r7, pc}

20001f74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001f74:	b580      	push	{r7, lr}
20001f76:	b084      	sub	sp, #16
20001f78:	af00      	add	r7, sp, #0
20001f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001f7c:	f002 fb4e 	bl	2000461c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001f80:	687b      	ldr	r3, [r7, #4]
20001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001f84:	2b00      	cmp	r3, #0
20001f86:	d103      	bne.n	20001f90 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
20001f88:	f04f 0301 	mov.w	r3, #1
20001f8c:	60fb      	str	r3, [r7, #12]
20001f8e:	e002      	b.n	20001f96 <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001f90:	f04f 0300 	mov.w	r3, #0
20001f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001f96:	f002 fb79 	bl	2000468c <vPortExitCritical>

	return xReturn;
20001f9a:	68fb      	ldr	r3, [r7, #12]
}
20001f9c:	4618      	mov	r0, r3
20001f9e:	f107 0710 	add.w	r7, r7, #16
20001fa2:	46bd      	mov	sp, r7
20001fa4:	bd80      	pop	{r7, pc}
20001fa6:	bf00      	nop

20001fa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001fa8:	b580      	push	{r7, lr}
20001faa:	b084      	sub	sp, #16
20001fac:	af00      	add	r7, sp, #0
20001fae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001fb0:	f002 fb34 	bl	2000461c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001fb4:	687b      	ldr	r3, [r7, #4]
20001fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001fb8:	687b      	ldr	r3, [r7, #4]
20001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001fbc:	429a      	cmp	r2, r3
20001fbe:	d103      	bne.n	20001fc8 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
20001fc0:	f04f 0301 	mov.w	r3, #1
20001fc4:	60fb      	str	r3, [r7, #12]
20001fc6:	e002      	b.n	20001fce <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
20001fc8:	f04f 0300 	mov.w	r3, #0
20001fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001fce:	f002 fb5d 	bl	2000468c <vPortExitCritical>

	return xReturn;
20001fd2:	68fb      	ldr	r3, [r7, #12]
}
20001fd4:	4618      	mov	r0, r3
20001fd6:	f107 0710 	add.w	r7, r7, #16
20001fda:	46bd      	mov	sp, r7
20001fdc:	bd80      	pop	{r7, pc}
20001fde:	bf00      	nop

20001fe0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001fe0:	b580      	push	{r7, lr}
20001fe2:	b086      	sub	sp, #24
20001fe4:	af00      	add	r7, sp, #0
20001fe6:	60f8      	str	r0, [r7, #12]
20001fe8:	60b9      	str	r1, [r7, #8]
20001fea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001fec:	68fb      	ldr	r3, [r7, #12]
20001fee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001ff0:	f002 fb14 	bl	2000461c <vPortEnterCritical>
20001ff4:	697b      	ldr	r3, [r7, #20]
20001ff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ffa:	b2db      	uxtb	r3, r3
20001ffc:	b25b      	sxtb	r3, r3
20001ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
20002002:	d104      	bne.n	2000200e <vQueueWaitForMessageRestricted+0x2e>
20002004:	697b      	ldr	r3, [r7, #20]
20002006:	f04f 0200 	mov.w	r2, #0
2000200a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2000200e:	697b      	ldr	r3, [r7, #20]
20002010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20002014:	b2db      	uxtb	r3, r3
20002016:	b25b      	sxtb	r3, r3
20002018:	f1b3 3fff 	cmp.w	r3, #4294967295
2000201c:	d104      	bne.n	20002028 <vQueueWaitForMessageRestricted+0x48>
2000201e:	697b      	ldr	r3, [r7, #20]
20002020:	f04f 0200 	mov.w	r2, #0
20002024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20002028:	f002 fb30 	bl	2000468c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
2000202c:	697b      	ldr	r3, [r7, #20]
2000202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002030:	2b00      	cmp	r3, #0
20002032:	d107      	bne.n	20002044 <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20002034:	697b      	ldr	r3, [r7, #20]
20002036:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000203a:	4618      	mov	r0, r3
2000203c:	68b9      	ldr	r1, [r7, #8]
2000203e:	687a      	ldr	r2, [r7, #4]
20002040:	f000 fe08 	bl	20002c54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20002044:	6978      	ldr	r0, [r7, #20]
20002046:	f7ff ff3f 	bl	20001ec8 <prvUnlockQueue>
	}
2000204a:	f107 0718 	add.w	r7, r7, #24
2000204e:	46bd      	mov	sp, r7
20002050:	bd80      	pop	{r7, pc}
20002052:	bf00      	nop

20002054 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20002054:	b580      	push	{r7, lr}
20002056:	b08c      	sub	sp, #48	; 0x30
20002058:	af04      	add	r7, sp, #16
2000205a:	60f8      	str	r0, [r7, #12]
2000205c:	60b9      	str	r1, [r7, #8]
2000205e:	603b      	str	r3, [r7, #0]
20002060:	4613      	mov	r3, r2
20002062:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002064:	88fb      	ldrh	r3, [r7, #6]
20002066:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000206a:	4618      	mov	r0, r3
2000206c:	f001 ff8c 	bl	20003f88 <pvPortMalloc>
20002070:	4603      	mov	r3, r0
20002072:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
20002074:	69fb      	ldr	r3, [r7, #28]
20002076:	2b00      	cmp	r3, #0
20002078:	d010      	beq.n	2000209c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
2000207a:	f04f 005c 	mov.w	r0, #92	; 0x5c
2000207e:	f001 ff83 	bl	20003f88 <pvPortMalloc>
20002082:	4603      	mov	r3, r0
20002084:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
20002086:	697b      	ldr	r3, [r7, #20]
20002088:	2b00      	cmp	r3, #0
2000208a:	d003      	beq.n	20002094 <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
2000208c:	697b      	ldr	r3, [r7, #20]
2000208e:	69fa      	ldr	r2, [r7, #28]
20002090:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20002092:	e006      	b.n	200020a2 <xTaskCreate+0x4e>
20002094:	69f8      	ldr	r0, [r7, #28]
20002096:	f002 f873 	bl	20004180 <vPortFree>
2000209a:	e002      	b.n	200020a2 <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
2000209c:	f04f 0300 	mov.w	r3, #0
200020a0:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
200020a2:	697b      	ldr	r3, [r7, #20]
200020a4:	2b00      	cmp	r3, #0
200020a6:	d016      	beq.n	200020d6 <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
200020a8:	88fb      	ldrh	r3, [r7, #6]
200020aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
200020ac:	9200      	str	r2, [sp, #0]
200020ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200020b0:	9201      	str	r2, [sp, #4]
200020b2:	697a      	ldr	r2, [r7, #20]
200020b4:	9202      	str	r2, [sp, #8]
200020b6:	f04f 0200 	mov.w	r2, #0
200020ba:	9203      	str	r2, [sp, #12]
200020bc:	68f8      	ldr	r0, [r7, #12]
200020be:	68b9      	ldr	r1, [r7, #8]
200020c0:	461a      	mov	r2, r3
200020c2:	683b      	ldr	r3, [r7, #0]
200020c4:	f000 f810 	bl	200020e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
200020c8:	6978      	ldr	r0, [r7, #20]
200020ca:	f000 f8a3 	bl	20002214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
200020ce:	f04f 0301 	mov.w	r3, #1
200020d2:	61bb      	str	r3, [r7, #24]
200020d4:	e002      	b.n	200020dc <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
200020d6:	f04f 33ff 	mov.w	r3, #4294967295
200020da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
200020dc:	69bb      	ldr	r3, [r7, #24]
	}
200020de:	4618      	mov	r0, r3
200020e0:	f107 0720 	add.w	r7, r7, #32
200020e4:	46bd      	mov	sp, r7
200020e6:	bd80      	pop	{r7, pc}

200020e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
200020e8:	b580      	push	{r7, lr}
200020ea:	b088      	sub	sp, #32
200020ec:	af00      	add	r7, sp, #0
200020ee:	60f8      	str	r0, [r7, #12]
200020f0:	60b9      	str	r1, [r7, #8]
200020f2:	607a      	str	r2, [r7, #4]
200020f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
200020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200020fa:	687b      	ldr	r3, [r7, #4]
200020fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002100:	4610      	mov	r0, r2
20002102:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20002106:	461a      	mov	r2, r3
20002108:	f006 f91a 	bl	20008340 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
2000210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000210e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002110:	687b      	ldr	r3, [r7, #4]
20002112:	f103 33ff 	add.w	r3, r3, #4294967295
20002116:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000211a:	4413      	add	r3, r2
2000211c:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
2000211e:	697b      	ldr	r3, [r7, #20]
20002120:	f023 0307 	bic.w	r3, r3, #7
20002124:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20002126:	697b      	ldr	r3, [r7, #20]
20002128:	f003 0307 	and.w	r3, r3, #7
2000212c:	2b00      	cmp	r3, #0
2000212e:	d009      	beq.n	20002144 <prvInitialiseNewTask+0x5c>
20002130:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002134:	f383 8811 	msr	BASEPRI, r3
20002138:	f3bf 8f6f 	isb	sy
2000213c:	f3bf 8f4f 	dsb	sy
20002140:	61fb      	str	r3, [r7, #28]
20002142:	e7fe      	b.n	20002142 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20002144:	f04f 0300 	mov.w	r3, #0
20002148:	61bb      	str	r3, [r7, #24]
2000214a:	e012      	b.n	20002172 <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
2000214c:	69b9      	ldr	r1, [r7, #24]
2000214e:	68ba      	ldr	r2, [r7, #8]
20002150:	69bb      	ldr	r3, [r7, #24]
20002152:	4413      	add	r3, r2
20002154:	781a      	ldrb	r2, [r3, #0]
20002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002158:	440b      	add	r3, r1
2000215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
2000215e:	68ba      	ldr	r2, [r7, #8]
20002160:	69bb      	ldr	r3, [r7, #24]
20002162:	4413      	add	r3, r2
20002164:	781b      	ldrb	r3, [r3, #0]
20002166:	2b00      	cmp	r3, #0
20002168:	d007      	beq.n	2000217a <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2000216a:	69bb      	ldr	r3, [r7, #24]
2000216c:	f103 0301 	add.w	r3, r3, #1
20002170:	61bb      	str	r3, [r7, #24]
20002172:	69bb      	ldr	r3, [r7, #24]
20002174:	2b09      	cmp	r3, #9
20002176:	d9e9      	bls.n	2000214c <prvInitialiseNewTask+0x64>
20002178:	e000      	b.n	2000217c <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
2000217a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
2000217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000217e:	f04f 0200 	mov.w	r2, #0
20002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002188:	2b04      	cmp	r3, #4
2000218a:	d902      	bls.n	20002192 <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
2000218c:	f04f 0304 	mov.w	r3, #4
20002190:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002194:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002196:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000219a:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000219c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
2000219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021a0:	f04f 0200 	mov.w	r2, #0
200021a4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
200021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021a8:	f103 0304 	add.w	r3, r3, #4
200021ac:	4618      	mov	r0, r3
200021ae:	f7ff f951 	bl	20001454 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
200021b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021b4:	f103 0318 	add.w	r3, r3, #24
200021b8:	4618      	mov	r0, r3
200021ba:	f7ff f94b 	bl	20001454 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
200021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200021c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
200021c6:	f1c3 0205 	rsb	r2, r3, #5
200021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
200021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200021d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
200021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021d6:	f04f 0200 	mov.w	r2, #0
200021da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
200021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021de:	f04f 0200 	mov.w	r2, #0
200021e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021e6:	f04f 0200 	mov.w	r2, #0
200021ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
200021ee:	6978      	ldr	r0, [r7, #20]
200021f0:	68f9      	ldr	r1, [r7, #12]
200021f2:	683a      	ldr	r2, [r7, #0]
200021f4:	f002 f910 	bl	20004418 <pxPortInitialiseStack>
200021f8:	4603      	mov	r3, r0
200021fa:	461a      	mov	r2, r3
200021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
20002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002202:	2b00      	cmp	r3, #0
20002204:	d002      	beq.n	2000220c <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
20002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000220a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
2000220c:	f107 0720 	add.w	r7, r7, #32
20002210:	46bd      	mov	sp, r7
20002212:	bd80      	pop	{r7, pc}

20002214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20002214:	b580      	push	{r7, lr}
20002216:	b082      	sub	sp, #8
20002218:	af00      	add	r7, sp, #0
2000221a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
2000221c:	f002 f9fe 	bl	2000461c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20002220:	f248 6304 	movw	r3, #34308	; 0x8604
20002224:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002228:	681b      	ldr	r3, [r3, #0]
2000222a:	f103 0201 	add.w	r2, r3, #1
2000222e:	f248 6304 	movw	r3, #34308	; 0x8604
20002232:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002236:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
20002238:	f248 532c 	movw	r3, #34092	; 0x852c
2000223c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002240:	681b      	ldr	r3, [r3, #0]
20002242:	2b00      	cmp	r3, #0
20002244:	d10f      	bne.n	20002266 <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
20002246:	f248 532c 	movw	r3, #34092	; 0x852c
2000224a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000224e:	687a      	ldr	r2, [r7, #4]
20002250:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20002252:	f248 6304 	movw	r3, #34308	; 0x8604
20002256:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000225a:	681b      	ldr	r3, [r3, #0]
2000225c:	2b01      	cmp	r3, #1
2000225e:	d11a      	bne.n	20002296 <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20002260:	f000 fe50 	bl	20002f04 <prvInitialiseTaskLists>
20002264:	e018      	b.n	20002298 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
20002266:	f248 6310 	movw	r3, #34320	; 0x8610
2000226a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000226e:	681b      	ldr	r3, [r3, #0]
20002270:	2b00      	cmp	r3, #0
20002272:	d111      	bne.n	20002298 <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
20002274:	f248 532c 	movw	r3, #34092	; 0x852c
20002278:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000227c:	681b      	ldr	r3, [r3, #0]
2000227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002280:	687b      	ldr	r3, [r7, #4]
20002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002284:	429a      	cmp	r2, r3
20002286:	d807      	bhi.n	20002298 <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
20002288:	f248 532c 	movw	r3, #34092	; 0x852c
2000228c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002290:	687a      	ldr	r2, [r7, #4]
20002292:	601a      	str	r2, [r3, #0]
20002294:	e000      	b.n	20002298 <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20002296:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20002298:	f248 6320 	movw	r3, #34336	; 0x8620
2000229c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022a0:	681b      	ldr	r3, [r3, #0]
200022a2:	f103 0201 	add.w	r2, r3, #1
200022a6:	f248 6320 	movw	r3, #34336	; 0x8620
200022aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022ae:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
200022b0:	f248 6320 	movw	r3, #34336	; 0x8620
200022b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022b8:	681a      	ldr	r2, [r3, #0]
200022ba:	687b      	ldr	r3, [r7, #4]
200022bc:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
200022be:	687b      	ldr	r3, [r7, #4]
200022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200022c2:	f04f 0201 	mov.w	r2, #1
200022c6:	fa02 f203 	lsl.w	r2, r2, r3
200022ca:	f248 630c 	movw	r3, #34316	; 0x860c
200022ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022d2:	681b      	ldr	r3, [r3, #0]
200022d4:	ea42 0203 	orr.w	r2, r2, r3
200022d8:	f248 630c 	movw	r3, #34316	; 0x860c
200022dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022e0:	601a      	str	r2, [r3, #0]
200022e2:	687b      	ldr	r3, [r7, #4]
200022e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022e6:	4613      	mov	r3, r2
200022e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022ec:	4413      	add	r3, r2
200022ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022f2:	461a      	mov	r2, r3
200022f4:	f248 5330 	movw	r3, #34096	; 0x8530
200022f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022fc:	441a      	add	r2, r3
200022fe:	687b      	ldr	r3, [r7, #4]
20002300:	f103 0304 	add.w	r3, r3, #4
20002304:	4610      	mov	r0, r2
20002306:	4619      	mov	r1, r3
20002308:	f7ff f8b2 	bl	20001470 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
2000230c:	f002 f9be 	bl	2000468c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
20002310:	f248 6310 	movw	r3, #34320	; 0x8610
20002314:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002318:	681b      	ldr	r3, [r3, #0]
2000231a:	2b00      	cmp	r3, #0
2000231c:	d014      	beq.n	20002348 <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
2000231e:	f248 532c 	movw	r3, #34092	; 0x852c
20002322:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002326:	681b      	ldr	r3, [r3, #0]
20002328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000232a:	687b      	ldr	r3, [r7, #4]
2000232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000232e:	429a      	cmp	r2, r3
20002330:	d20a      	bcs.n	20002348 <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
20002332:	f64e 5304 	movw	r3, #60676	; 0xed04
20002336:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000233a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000233e:	601a      	str	r2, [r3, #0]
20002340:	f3bf 8f4f 	dsb	sy
20002344:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002348:	f107 0708 	add.w	r7, r7, #8
2000234c:	46bd      	mov	sp, r7
2000234e:	bd80      	pop	{r7, pc}

20002350 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
20002350:	b580      	push	{r7, lr}
20002352:	b084      	sub	sp, #16
20002354:	af00      	add	r7, sp, #0
20002356:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
20002358:	f04f 0300 	mov.w	r3, #0
2000235c:	60bb      	str	r3, [r7, #8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
2000235e:	687b      	ldr	r3, [r7, #4]
20002360:	2b00      	cmp	r3, #0
20002362:	d01b      	beq.n	2000239c <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
20002364:	f248 632c 	movw	r3, #34348	; 0x862c
20002368:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000236c:	681b      	ldr	r3, [r3, #0]
2000236e:	2b00      	cmp	r3, #0
20002370:	d009      	beq.n	20002386 <vTaskDelay+0x36>
20002372:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002376:	f383 8811 	msr	BASEPRI, r3
2000237a:	f3bf 8f6f 	isb	sy
2000237e:	f3bf 8f4f 	dsb	sy
20002382:	60fb      	str	r3, [r7, #12]
20002384:	e7fe      	b.n	20002384 <vTaskDelay+0x34>
			vTaskSuspendAll();
20002386:	f000 f971 	bl	2000266c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
2000238a:	6878      	ldr	r0, [r7, #4]
2000238c:	f04f 0100 	mov.w	r1, #0
20002390:	f001 f99e 	bl	200036d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
20002394:	f000 f97c 	bl	20002690 <xTaskResumeAll>
20002398:	4603      	mov	r3, r0
2000239a:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
2000239c:	68bb      	ldr	r3, [r7, #8]
2000239e:	2b00      	cmp	r3, #0
200023a0:	d10a      	bne.n	200023b8 <vTaskDelay+0x68>
		{
			portYIELD_WITHIN_API();
200023a2:	f64e 5304 	movw	r3, #60676	; 0xed04
200023a6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200023aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200023ae:	601a      	str	r2, [r3, #0]
200023b0:	f3bf 8f4f 	dsb	sy
200023b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
200023b8:	f107 0710 	add.w	r7, r7, #16
200023bc:	46bd      	mov	sp, r7
200023be:	bd80      	pop	{r7, pc}

200023c0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
200023c0:	b580      	push	{r7, lr}
200023c2:	b084      	sub	sp, #16
200023c4:	af00      	add	r7, sp, #0
200023c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
200023c8:	f002 f928 	bl	2000461c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
200023cc:	687b      	ldr	r3, [r7, #4]
200023ce:	2b00      	cmp	r3, #0
200023d0:	d105      	bne.n	200023de <uxTaskPriorityGet+0x1e>
200023d2:	f248 532c 	movw	r3, #34092	; 0x852c
200023d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023da:	681b      	ldr	r3, [r3, #0]
200023dc:	e000      	b.n	200023e0 <uxTaskPriorityGet+0x20>
200023de:	687b      	ldr	r3, [r7, #4]
200023e0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxPriority;
200023e2:	68bb      	ldr	r3, [r7, #8]
200023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200023e6:	60fb      	str	r3, [r7, #12]
		}
		taskEXIT_CRITICAL();
200023e8:	f002 f950 	bl	2000468c <vPortExitCritical>

		return uxReturn;
200023ec:	68fb      	ldr	r3, [r7, #12]
	}
200023ee:	4618      	mov	r0, r3
200023f0:	f107 0710 	add.w	r7, r7, #16
200023f4:	46bd      	mov	sp, r7
200023f6:	bd80      	pop	{r7, pc}

200023f8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
200023f8:	b580      	push	{r7, lr}
200023fa:	b088      	sub	sp, #32
200023fc:	af00      	add	r7, sp, #0
200023fe:	6078      	str	r0, [r7, #4]
20002400:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
20002402:	f04f 0300 	mov.w	r3, #0
20002406:	61bb      	str	r3, [r7, #24]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
20002408:	683b      	ldr	r3, [r7, #0]
2000240a:	2b04      	cmp	r3, #4
2000240c:	d909      	bls.n	20002422 <vTaskPrioritySet+0x2a>
2000240e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002412:	f383 8811 	msr	BASEPRI, r3
20002416:	f3bf 8f6f 	isb	sy
2000241a:	f3bf 8f4f 	dsb	sy
2000241e:	61fb      	str	r3, [r7, #28]
20002420:	e7fe      	b.n	20002420 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20002422:	683b      	ldr	r3, [r7, #0]
20002424:	2b04      	cmp	r3, #4
20002426:	d902      	bls.n	2000242e <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20002428:	f04f 0304 	mov.w	r3, #4
2000242c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
2000242e:	f002 f8f5 	bl	2000461c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
20002432:	687b      	ldr	r3, [r7, #4]
20002434:	2b00      	cmp	r3, #0
20002436:	d105      	bne.n	20002444 <vTaskPrioritySet+0x4c>
20002438:	f248 532c 	movw	r3, #34092	; 0x852c
2000243c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002440:	681b      	ldr	r3, [r3, #0]
20002442:	e000      	b.n	20002446 <vTaskPrioritySet+0x4e>
20002444:	687b      	ldr	r3, [r7, #4]
20002446:	60fb      	str	r3, [r7, #12]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
20002448:	68fb      	ldr	r3, [r7, #12]
2000244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000244c:	613b      	str	r3, [r7, #16]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
2000244e:	693a      	ldr	r2, [r7, #16]
20002450:	683b      	ldr	r3, [r7, #0]
20002452:	429a      	cmp	r2, r3
20002454:	f000 80a9 	beq.w	200025aa <vTaskPrioritySet+0x1b2>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
20002458:	683a      	ldr	r2, [r7, #0]
2000245a:	693b      	ldr	r3, [r7, #16]
2000245c:	429a      	cmp	r2, r3
2000245e:	d914      	bls.n	2000248a <vTaskPrioritySet+0x92>
				{
					if( pxTCB != pxCurrentTCB )
20002460:	f248 532c 	movw	r3, #34092	; 0x852c
20002464:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002468:	681b      	ldr	r3, [r3, #0]
2000246a:	68fa      	ldr	r2, [r7, #12]
2000246c:	429a      	cmp	r2, r3
2000246e:	d018      	beq.n	200024a2 <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
20002470:	f248 532c 	movw	r3, #34092	; 0x852c
20002474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002478:	681b      	ldr	r3, [r3, #0]
2000247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000247c:	683b      	ldr	r3, [r7, #0]
2000247e:	429a      	cmp	r2, r3
20002480:	d811      	bhi.n	200024a6 <vTaskPrioritySet+0xae>
						{
							xYieldRequired = pdTRUE;
20002482:	f04f 0301 	mov.w	r3, #1
20002486:	61bb      	str	r3, [r7, #24]
20002488:	e00e      	b.n	200024a8 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
2000248a:	f248 532c 	movw	r3, #34092	; 0x852c
2000248e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002492:	681b      	ldr	r3, [r3, #0]
20002494:	68fa      	ldr	r2, [r7, #12]
20002496:	429a      	cmp	r2, r3
20002498:	d106      	bne.n	200024a8 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
2000249a:	f04f 0301 	mov.w	r3, #1
2000249e:	61bb      	str	r3, [r7, #24]
200024a0:	e002      	b.n	200024a8 <vTaskPrioritySet+0xb0>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
200024a2:	bf00      	nop
200024a4:	e000      	b.n	200024a8 <vTaskPrioritySet+0xb0>
200024a6:	bf00      	nop
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
200024a8:	68fb      	ldr	r3, [r7, #12]
200024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200024ac:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
200024ae:	68fb      	ldr	r3, [r7, #12]
200024b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200024b2:	68fb      	ldr	r3, [r7, #12]
200024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200024b6:	429a      	cmp	r2, r3
200024b8:	d102      	bne.n	200024c0 <vTaskPrioritySet+0xc8>
					{
						pxTCB->uxPriority = uxNewPriority;
200024ba:	68fb      	ldr	r3, [r7, #12]
200024bc:	683a      	ldr	r2, [r7, #0]
200024be:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
200024c0:	68fb      	ldr	r3, [r7, #12]
200024c2:	683a      	ldr	r2, [r7, #0]
200024c4:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
200024c6:	68fb      	ldr	r3, [r7, #12]
200024c8:	699b      	ldr	r3, [r3, #24]
200024ca:	2b00      	cmp	r3, #0
200024cc:	db04      	blt.n	200024d8 <vTaskPrioritySet+0xe0>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200024ce:	683b      	ldr	r3, [r7, #0]
200024d0:	f1c3 0205 	rsb	r2, r3, #5
200024d4:	68fb      	ldr	r3, [r7, #12]
200024d6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
200024d8:	68fb      	ldr	r3, [r7, #12]
200024da:	6959      	ldr	r1, [r3, #20]
200024dc:	697a      	ldr	r2, [r7, #20]
200024de:	4613      	mov	r3, r2
200024e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024e4:	4413      	add	r3, r2
200024e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024ea:	461a      	mov	r2, r3
200024ec:	f248 5330 	movw	r3, #34096	; 0x8530
200024f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024f4:	4413      	add	r3, r2
200024f6:	4299      	cmp	r1, r3
200024f8:	d102      	bne.n	20002500 <vTaskPrioritySet+0x108>
200024fa:	f04f 0301 	mov.w	r3, #1
200024fe:	e001      	b.n	20002504 <vTaskPrioritySet+0x10c>
20002500:	f04f 0300 	mov.w	r3, #0
20002504:	2b00      	cmp	r3, #0
20002506:	d042      	beq.n	2000258e <vTaskPrioritySet+0x196>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002508:	68fb      	ldr	r3, [r7, #12]
2000250a:	f103 0304 	add.w	r3, r3, #4
2000250e:	4618      	mov	r0, r3
20002510:	f7ff f80c 	bl	2000152c <uxListRemove>
20002514:	4603      	mov	r3, r0
20002516:	2b00      	cmp	r3, #0
20002518:	d112      	bne.n	20002540 <vTaskPrioritySet+0x148>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
2000251a:	697b      	ldr	r3, [r7, #20]
2000251c:	f04f 0201 	mov.w	r2, #1
20002520:	fa02 f303 	lsl.w	r3, r2, r3
20002524:	ea6f 0203 	mvn.w	r2, r3
20002528:	f248 630c 	movw	r3, #34316	; 0x860c
2000252c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002530:	681b      	ldr	r3, [r3, #0]
20002532:	ea02 0203 	and.w	r2, r2, r3
20002536:	f248 630c 	movw	r3, #34316	; 0x860c
2000253a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000253e:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
20002540:	68fb      	ldr	r3, [r7, #12]
20002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002544:	f04f 0201 	mov.w	r2, #1
20002548:	fa02 f203 	lsl.w	r2, r2, r3
2000254c:	f248 630c 	movw	r3, #34316	; 0x860c
20002550:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002554:	681b      	ldr	r3, [r3, #0]
20002556:	ea42 0203 	orr.w	r2, r2, r3
2000255a:	f248 630c 	movw	r3, #34316	; 0x860c
2000255e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002562:	601a      	str	r2, [r3, #0]
20002564:	68fb      	ldr	r3, [r7, #12]
20002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002568:	4613      	mov	r3, r2
2000256a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000256e:	4413      	add	r3, r2
20002570:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002574:	461a      	mov	r2, r3
20002576:	f248 5330 	movw	r3, #34096	; 0x8530
2000257a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000257e:	441a      	add	r2, r3
20002580:	68fb      	ldr	r3, [r7, #12]
20002582:	f103 0304 	add.w	r3, r3, #4
20002586:	4610      	mov	r0, r2
20002588:	4619      	mov	r1, r3
2000258a:	f7fe ff71 	bl	20001470 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
2000258e:	69bb      	ldr	r3, [r7, #24]
20002590:	2b00      	cmp	r3, #0
20002592:	d00a      	beq.n	200025aa <vTaskPrioritySet+0x1b2>
				{
					taskYIELD_IF_USING_PREEMPTION();
20002594:	f64e 5304 	movw	r3, #60676	; 0xed04
20002598:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000259c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200025a0:	601a      	str	r2, [r3, #0]
200025a2:	f3bf 8f4f 	dsb	sy
200025a6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
200025aa:	f002 f86f 	bl	2000468c <vPortExitCritical>
	}
200025ae:	f107 0720 	add.w	r7, r7, #32
200025b2:	46bd      	mov	sp, r7
200025b4:	bd80      	pop	{r7, pc}
200025b6:	bf00      	nop

200025b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
200025b8:	b580      	push	{r7, lr}
200025ba:	b086      	sub	sp, #24
200025bc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
200025be:	f04f 0300 	mov.w	r3, #0
200025c2:	9300      	str	r3, [sp, #0]
200025c4:	f248 6328 	movw	r3, #34344	; 0x8628
200025c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025cc:	9301      	str	r3, [sp, #4]
200025ce:	f642 60cd 	movw	r0, #11981	; 0x2ecd
200025d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200025d6:	f248 4128 	movw	r1, #33832	; 0x8428
200025da:	f2c2 0100 	movt	r1, #8192	; 0x2000
200025de:	f04f 0250 	mov.w	r2, #80	; 0x50
200025e2:	f04f 0300 	mov.w	r3, #0
200025e6:	f7ff fd35 	bl	20002054 <xTaskCreate>
200025ea:	4603      	mov	r3, r0
200025ec:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
200025ee:	687b      	ldr	r3, [r7, #4]
200025f0:	2b01      	cmp	r3, #1
200025f2:	d103      	bne.n	200025fc <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
200025f4:	f001 f8f4 	bl	200037e0 <xTimerCreateTimerTask>
200025f8:	4603      	mov	r3, r0
200025fa:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
200025fc:	687b      	ldr	r3, [r7, #4]
200025fe:	2b01      	cmp	r3, #1
20002600:	d122      	bne.n	20002648 <vTaskStartScheduler+0x90>
20002602:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002606:	f383 8811 	msr	BASEPRI, r3
2000260a:	f3bf 8f6f 	isb	sy
2000260e:	f3bf 8f4f 	dsb	sy
20002612:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
20002614:	f248 6324 	movw	r3, #34340	; 0x8624
20002618:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000261c:	f04f 32ff 	mov.w	r2, #4294967295
20002620:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
20002622:	f248 6310 	movw	r3, #34320	; 0x8610
20002626:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000262a:	f04f 0201 	mov.w	r2, #1
2000262e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
20002630:	f248 6308 	movw	r3, #34312	; 0x8608
20002634:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002638:	f04f 0200 	mov.w	r2, #0
2000263c:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2000263e:	f7fd fe6f 	bl	20000320 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
20002642:	f001 ff65 	bl	20004510 <xPortStartScheduler>
20002646:	e00d      	b.n	20002664 <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002648:	687b      	ldr	r3, [r7, #4]
2000264a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000264e:	d109      	bne.n	20002664 <vTaskStartScheduler+0xac>
20002650:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002654:	f383 8811 	msr	BASEPRI, r3
20002658:	f3bf 8f6f 	isb	sy
2000265c:	f3bf 8f4f 	dsb	sy
20002660:	60fb      	str	r3, [r7, #12]
20002662:	e7fe      	b.n	20002662 <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
20002664:	f107 0710 	add.w	r7, r7, #16
20002668:	46bd      	mov	sp, r7
2000266a:	bd80      	pop	{r7, pc}

2000266c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
2000266c:	b480      	push	{r7}
2000266e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
20002670:	f248 632c 	movw	r3, #34348	; 0x862c
20002674:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002678:	681b      	ldr	r3, [r3, #0]
2000267a:	f103 0201 	add.w	r2, r3, #1
2000267e:	f248 632c 	movw	r3, #34348	; 0x862c
20002682:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002686:	601a      	str	r2, [r3, #0]
}
20002688:	46bd      	mov	sp, r7
2000268a:	bc80      	pop	{r7}
2000268c:	4770      	bx	lr
2000268e:	bf00      	nop

20002690 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
20002690:	b580      	push	{r7, lr}
20002692:	b084      	sub	sp, #16
20002694:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
20002696:	f04f 0300 	mov.w	r3, #0
2000269a:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
2000269c:	f04f 0300 	mov.w	r3, #0
200026a0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
200026a2:	f248 632c 	movw	r3, #34348	; 0x862c
200026a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026aa:	681b      	ldr	r3, [r3, #0]
200026ac:	2b00      	cmp	r3, #0
200026ae:	d109      	bne.n	200026c4 <xTaskResumeAll+0x34>
200026b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200026b4:	f383 8811 	msr	BASEPRI, r3
200026b8:	f3bf 8f6f 	isb	sy
200026bc:	f3bf 8f4f 	dsb	sy
200026c0:	60fb      	str	r3, [r7, #12]
200026c2:	e7fe      	b.n	200026c2 <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
200026c4:	f001 ffaa 	bl	2000461c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
200026c8:	f248 632c 	movw	r3, #34348	; 0x862c
200026cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026d0:	681b      	ldr	r3, [r3, #0]
200026d2:	f103 32ff 	add.w	r2, r3, #4294967295
200026d6:	f248 632c 	movw	r3, #34348	; 0x862c
200026da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200026e0:	f248 632c 	movw	r3, #34348	; 0x862c
200026e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026e8:	681b      	ldr	r3, [r3, #0]
200026ea:	2b00      	cmp	r3, #0
200026ec:	f040 8098 	bne.w	20002820 <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
200026f0:	f248 6304 	movw	r3, #34308	; 0x8604
200026f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026f8:	681b      	ldr	r3, [r3, #0]
200026fa:	2b00      	cmp	r3, #0
200026fc:	f000 8090 	beq.w	20002820 <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002700:	e04a      	b.n	20002798 <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
20002702:	f248 53c4 	movw	r3, #34244	; 0x85c4
20002706:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000270a:	68db      	ldr	r3, [r3, #12]
2000270c:	68db      	ldr	r3, [r3, #12]
2000270e:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002710:	683b      	ldr	r3, [r7, #0]
20002712:	f103 0318 	add.w	r3, r3, #24
20002716:	4618      	mov	r0, r3
20002718:	f7fe ff08 	bl	2000152c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2000271c:	683b      	ldr	r3, [r7, #0]
2000271e:	f103 0304 	add.w	r3, r3, #4
20002722:	4618      	mov	r0, r3
20002724:	f7fe ff02 	bl	2000152c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20002728:	683b      	ldr	r3, [r7, #0]
2000272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000272c:	f04f 0201 	mov.w	r2, #1
20002730:	fa02 f203 	lsl.w	r2, r2, r3
20002734:	f248 630c 	movw	r3, #34316	; 0x860c
20002738:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000273c:	681b      	ldr	r3, [r3, #0]
2000273e:	ea42 0203 	orr.w	r2, r2, r3
20002742:	f248 630c 	movw	r3, #34316	; 0x860c
20002746:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000274a:	601a      	str	r2, [r3, #0]
2000274c:	683b      	ldr	r3, [r7, #0]
2000274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002750:	4613      	mov	r3, r2
20002752:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002756:	4413      	add	r3, r2
20002758:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000275c:	461a      	mov	r2, r3
2000275e:	f248 5330 	movw	r3, #34096	; 0x8530
20002762:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002766:	441a      	add	r2, r3
20002768:	683b      	ldr	r3, [r7, #0]
2000276a:	f103 0304 	add.w	r3, r3, #4
2000276e:	4610      	mov	r0, r2
20002770:	4619      	mov	r1, r3
20002772:	f7fe fe7d 	bl	20001470 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002776:	683b      	ldr	r3, [r7, #0]
20002778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000277a:	f248 532c 	movw	r3, #34092	; 0x852c
2000277e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002782:	681b      	ldr	r3, [r3, #0]
20002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002786:	429a      	cmp	r2, r3
20002788:	d306      	bcc.n	20002798 <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
2000278a:	f248 6318 	movw	r3, #34328	; 0x8618
2000278e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002792:	f04f 0201 	mov.w	r2, #1
20002796:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002798:	f248 53c4 	movw	r3, #34244	; 0x85c4
2000279c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027a0:	681b      	ldr	r3, [r3, #0]
200027a2:	2b00      	cmp	r3, #0
200027a4:	d1ad      	bne.n	20002702 <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
200027a6:	683b      	ldr	r3, [r7, #0]
200027a8:	2b00      	cmp	r3, #0
200027aa:	d001      	beq.n	200027b0 <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
200027ac:	f000 fc58 	bl	20003060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
200027b0:	f248 6314 	movw	r3, #34324	; 0x8614
200027b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027b8:	681b      	ldr	r3, [r3, #0]
200027ba:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
200027bc:	68bb      	ldr	r3, [r7, #8]
200027be:	2b00      	cmp	r3, #0
200027c0:	d019      	beq.n	200027f6 <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
200027c2:	f000 f845 	bl	20002850 <xTaskIncrementTick>
200027c6:	4603      	mov	r3, r0
200027c8:	2b00      	cmp	r3, #0
200027ca:	d006      	beq.n	200027da <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
200027cc:	f248 6318 	movw	r3, #34328	; 0x8618
200027d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027d4:	f04f 0201 	mov.w	r2, #1
200027d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
200027da:	68bb      	ldr	r3, [r7, #8]
200027dc:	f103 33ff 	add.w	r3, r3, #4294967295
200027e0:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
200027e2:	68bb      	ldr	r3, [r7, #8]
200027e4:	2b00      	cmp	r3, #0
200027e6:	d1ec      	bne.n	200027c2 <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
200027e8:	f248 6314 	movw	r3, #34324	; 0x8614
200027ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027f0:	f04f 0200 	mov.w	r2, #0
200027f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
200027f6:	f248 6318 	movw	r3, #34328	; 0x8618
200027fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027fe:	681b      	ldr	r3, [r3, #0]
20002800:	2b00      	cmp	r3, #0
20002802:	d00d      	beq.n	20002820 <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
20002804:	f04f 0301 	mov.w	r3, #1
20002808:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
2000280a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000280e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002816:	601a      	str	r2, [r3, #0]
20002818:	f3bf 8f4f 	dsb	sy
2000281c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002820:	f001 ff34 	bl	2000468c <vPortExitCritical>

	return xAlreadyYielded;
20002824:	687b      	ldr	r3, [r7, #4]
}
20002826:	4618      	mov	r0, r3
20002828:	f107 0710 	add.w	r7, r7, #16
2000282c:	46bd      	mov	sp, r7
2000282e:	bd80      	pop	{r7, pc}

20002830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002830:	b480      	push	{r7}
20002832:	b083      	sub	sp, #12
20002834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
20002836:	f248 6308 	movw	r3, #34312	; 0x8608
2000283a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000283e:	681b      	ldr	r3, [r3, #0]
20002840:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
20002842:	687b      	ldr	r3, [r7, #4]
}
20002844:	4618      	mov	r0, r3
20002846:	f107 070c 	add.w	r7, r7, #12
2000284a:	46bd      	mov	sp, r7
2000284c:	bc80      	pop	{r7}
2000284e:	4770      	bx	lr

20002850 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
20002850:	b580      	push	{r7, lr}
20002852:	b086      	sub	sp, #24
20002854:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
20002856:	f04f 0300 	mov.w	r3, #0
2000285a:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000285c:	f248 632c 	movw	r3, #34348	; 0x862c
20002860:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002864:	681b      	ldr	r3, [r3, #0]
20002866:	2b00      	cmp	r3, #0
20002868:	f040 80dc 	bne.w	20002a24 <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
2000286c:	f248 6308 	movw	r3, #34312	; 0x8608
20002870:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002874:	681b      	ldr	r3, [r3, #0]
20002876:	f103 0301 	add.w	r3, r3, #1
2000287a:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
2000287c:	f248 6308 	movw	r3, #34312	; 0x8608
20002880:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002884:	68fa      	ldr	r2, [r7, #12]
20002886:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
20002888:	68fb      	ldr	r3, [r7, #12]
2000288a:	2b00      	cmp	r3, #0
2000288c:	d135      	bne.n	200028fa <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
2000288e:	f248 53bc 	movw	r3, #34236	; 0x85bc
20002892:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002896:	681b      	ldr	r3, [r3, #0]
20002898:	681b      	ldr	r3, [r3, #0]
2000289a:	2b00      	cmp	r3, #0
2000289c:	d009      	beq.n	200028b2 <xTaskIncrementTick+0x62>
2000289e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200028a2:	f383 8811 	msr	BASEPRI, r3
200028a6:	f3bf 8f6f 	isb	sy
200028aa:	f3bf 8f4f 	dsb	sy
200028ae:	617b      	str	r3, [r7, #20]
200028b0:	e7fe      	b.n	200028b0 <xTaskIncrementTick+0x60>
200028b2:	f248 53bc 	movw	r3, #34236	; 0x85bc
200028b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028ba:	681b      	ldr	r3, [r3, #0]
200028bc:	613b      	str	r3, [r7, #16]
200028be:	f248 53c0 	movw	r3, #34240	; 0x85c0
200028c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028c6:	681a      	ldr	r2, [r3, #0]
200028c8:	f248 53bc 	movw	r3, #34236	; 0x85bc
200028cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028d0:	601a      	str	r2, [r3, #0]
200028d2:	f248 53c0 	movw	r3, #34240	; 0x85c0
200028d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028da:	693a      	ldr	r2, [r7, #16]
200028dc:	601a      	str	r2, [r3, #0]
200028de:	f248 631c 	movw	r3, #34332	; 0x861c
200028e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028e6:	681b      	ldr	r3, [r3, #0]
200028e8:	f103 0201 	add.w	r2, r3, #1
200028ec:	f248 631c 	movw	r3, #34332	; 0x861c
200028f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028f4:	601a      	str	r2, [r3, #0]
200028f6:	f000 fbb3 	bl	20003060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
200028fa:	f248 6324 	movw	r3, #34340	; 0x8624
200028fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002902:	681b      	ldr	r3, [r3, #0]
20002904:	68fa      	ldr	r2, [r7, #12]
20002906:	429a      	cmp	r2, r3
20002908:	d373      	bcc.n	200029f2 <xTaskIncrementTick+0x1a2>
2000290a:	e000      	b.n	2000290e <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
2000290c:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2000290e:	f248 53bc 	movw	r3, #34236	; 0x85bc
20002912:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002916:	681b      	ldr	r3, [r3, #0]
20002918:	681b      	ldr	r3, [r3, #0]
2000291a:	2b00      	cmp	r3, #0
2000291c:	d102      	bne.n	20002924 <xTaskIncrementTick+0xd4>
2000291e:	f04f 0301 	mov.w	r3, #1
20002922:	e001      	b.n	20002928 <xTaskIncrementTick+0xd8>
20002924:	f04f 0300 	mov.w	r3, #0
20002928:	2b00      	cmp	r3, #0
2000292a:	d007      	beq.n	2000293c <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000292c:	f248 6324 	movw	r3, #34340	; 0x8624
20002930:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002934:	f04f 32ff 	mov.w	r2, #4294967295
20002938:	601a      	str	r2, [r3, #0]
					break;
2000293a:	e05a      	b.n	200029f2 <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2000293c:	f248 53bc 	movw	r3, #34236	; 0x85bc
20002940:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002944:	681b      	ldr	r3, [r3, #0]
20002946:	68db      	ldr	r3, [r3, #12]
20002948:	68db      	ldr	r3, [r3, #12]
2000294a:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2000294c:	683b      	ldr	r3, [r7, #0]
2000294e:	685b      	ldr	r3, [r3, #4]
20002950:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
20002952:	68fa      	ldr	r2, [r7, #12]
20002954:	687b      	ldr	r3, [r7, #4]
20002956:	429a      	cmp	r2, r3
20002958:	d206      	bcs.n	20002968 <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
2000295a:	f248 6324 	movw	r3, #34340	; 0x8624
2000295e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002962:	687a      	ldr	r2, [r7, #4]
20002964:	601a      	str	r2, [r3, #0]
						break;
20002966:	e044      	b.n	200029f2 <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002968:	683b      	ldr	r3, [r7, #0]
2000296a:	f103 0304 	add.w	r3, r3, #4
2000296e:	4618      	mov	r0, r3
20002970:	f7fe fddc 	bl	2000152c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20002974:	683b      	ldr	r3, [r7, #0]
20002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002978:	2b00      	cmp	r3, #0
2000297a:	d005      	beq.n	20002988 <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2000297c:	683b      	ldr	r3, [r7, #0]
2000297e:	f103 0318 	add.w	r3, r3, #24
20002982:	4618      	mov	r0, r3
20002984:	f7fe fdd2 	bl	2000152c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
20002988:	683b      	ldr	r3, [r7, #0]
2000298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000298c:	f04f 0201 	mov.w	r2, #1
20002990:	fa02 f203 	lsl.w	r2, r2, r3
20002994:	f248 630c 	movw	r3, #34316	; 0x860c
20002998:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000299c:	681b      	ldr	r3, [r3, #0]
2000299e:	ea42 0203 	orr.w	r2, r2, r3
200029a2:	f248 630c 	movw	r3, #34316	; 0x860c
200029a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029aa:	601a      	str	r2, [r3, #0]
200029ac:	683b      	ldr	r3, [r7, #0]
200029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200029b0:	4613      	mov	r3, r2
200029b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200029b6:	4413      	add	r3, r2
200029b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200029bc:	461a      	mov	r2, r3
200029be:	f248 5330 	movw	r3, #34096	; 0x8530
200029c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029c6:	441a      	add	r2, r3
200029c8:	683b      	ldr	r3, [r7, #0]
200029ca:	f103 0304 	add.w	r3, r3, #4
200029ce:	4610      	mov	r0, r2
200029d0:	4619      	mov	r1, r3
200029d2:	f7fe fd4d 	bl	20001470 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
200029d6:	683b      	ldr	r3, [r7, #0]
200029d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200029da:	f248 532c 	movw	r3, #34092	; 0x852c
200029de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029e2:	681b      	ldr	r3, [r3, #0]
200029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200029e6:	429a      	cmp	r2, r3
200029e8:	d390      	bcc.n	2000290c <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
200029ea:	f04f 0301 	mov.w	r3, #1
200029ee:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
200029f0:	e78d      	b.n	2000290e <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
200029f2:	f248 532c 	movw	r3, #34092	; 0x852c
200029f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029fa:	681b      	ldr	r3, [r3, #0]
200029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200029fe:	4613      	mov	r3, r2
20002a00:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a04:	4413      	add	r3, r2
20002a06:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a0a:	461a      	mov	r2, r3
20002a0c:	f248 5330 	movw	r3, #34096	; 0x8530
20002a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a14:	4413      	add	r3, r2
20002a16:	681b      	ldr	r3, [r3, #0]
20002a18:	2b01      	cmp	r3, #1
20002a1a:	d910      	bls.n	20002a3e <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
20002a1c:	f04f 0301 	mov.w	r3, #1
20002a20:	60bb      	str	r3, [r7, #8]
20002a22:	e00d      	b.n	20002a40 <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
20002a24:	f248 6314 	movw	r3, #34324	; 0x8614
20002a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a2c:	681b      	ldr	r3, [r3, #0]
20002a2e:	f103 0201 	add.w	r2, r3, #1
20002a32:	f248 6314 	movw	r3, #34324	; 0x8614
20002a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a3a:	601a      	str	r2, [r3, #0]
20002a3c:	e000      	b.n	20002a40 <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
20002a3e:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
20002a40:	f248 6318 	movw	r3, #34328	; 0x8618
20002a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a48:	681b      	ldr	r3, [r3, #0]
20002a4a:	2b00      	cmp	r3, #0
20002a4c:	d002      	beq.n	20002a54 <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
20002a4e:	f04f 0301 	mov.w	r3, #1
20002a52:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
20002a54:	68bb      	ldr	r3, [r7, #8]
}
20002a56:	4618      	mov	r0, r3
20002a58:	f107 0718 	add.w	r7, r7, #24
20002a5c:	46bd      	mov	sp, r7
20002a5e:	bd80      	pop	{r7, pc}

20002a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
20002a60:	b580      	push	{r7, lr}
20002a62:	b088      	sub	sp, #32
20002a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
20002a66:	f248 632c 	movw	r3, #34348	; 0x862c
20002a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a6e:	681b      	ldr	r3, [r3, #0]
20002a70:	2b00      	cmp	r3, #0
20002a72:	d007      	beq.n	20002a84 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
20002a74:	f248 6318 	movw	r3, #34328	; 0x8618
20002a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a7c:	f04f 0201 	mov.w	r2, #1
20002a80:	601a      	str	r2, [r3, #0]
20002a82:	e0bc      	b.n	20002bfe <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
20002a84:	f248 6318 	movw	r3, #34328	; 0x8618
20002a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a8c:	f04f 0200 	mov.w	r2, #0
20002a90:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
20002a92:	f7fd fc69 	bl	20000368 <ulGetRunTimeCounterValue>
20002a96:	4602      	mov	r2, r0
20002a98:	f248 6334 	movw	r3, #34356	; 0x8634
20002a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aa0:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
20002aa2:	f248 6334 	movw	r3, #34356	; 0x8634
20002aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aaa:	681a      	ldr	r2, [r3, #0]
20002aac:	f248 6330 	movw	r3, #34352	; 0x8630
20002ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ab4:	681b      	ldr	r3, [r3, #0]
20002ab6:	429a      	cmp	r2, r3
20002ab8:	d913      	bls.n	20002ae2 <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
20002aba:	f248 532c 	movw	r3, #34092	; 0x852c
20002abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ac2:	681a      	ldr	r2, [r3, #0]
20002ac4:	6d11      	ldr	r1, [r2, #80]	; 0x50
20002ac6:	f248 6334 	movw	r3, #34356	; 0x8634
20002aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ace:	6818      	ldr	r0, [r3, #0]
20002ad0:	f248 6330 	movw	r3, #34352	; 0x8630
20002ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ad8:	681b      	ldr	r3, [r3, #0]
20002ada:	ebc3 0300 	rsb	r3, r3, r0
20002ade:	440b      	add	r3, r1
20002ae0:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
20002ae2:	f248 6334 	movw	r3, #34356	; 0x8634
20002ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aea:	681a      	ldr	r2, [r3, #0]
20002aec:	f248 6330 	movw	r3, #34352	; 0x8630
20002af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002af4:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
20002af6:	f248 532c 	movw	r3, #34092	; 0x852c
20002afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002afe:	681b      	ldr	r3, [r3, #0]
20002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002b02:	607b      	str	r3, [r7, #4]
20002b04:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
20002b08:	60bb      	str	r3, [r7, #8]
20002b0a:	687b      	ldr	r3, [r7, #4]
20002b0c:	681a      	ldr	r2, [r3, #0]
20002b0e:	68bb      	ldr	r3, [r7, #8]
20002b10:	429a      	cmp	r2, r3
20002b12:	d114      	bne.n	20002b3e <vTaskSwitchContext+0xde>
20002b14:	687b      	ldr	r3, [r7, #4]
20002b16:	f103 0304 	add.w	r3, r3, #4
20002b1a:	681a      	ldr	r2, [r3, #0]
20002b1c:	68bb      	ldr	r3, [r7, #8]
20002b1e:	429a      	cmp	r2, r3
20002b20:	d10d      	bne.n	20002b3e <vTaskSwitchContext+0xde>
20002b22:	687b      	ldr	r3, [r7, #4]
20002b24:	f103 0308 	add.w	r3, r3, #8
20002b28:	681a      	ldr	r2, [r3, #0]
20002b2a:	68bb      	ldr	r3, [r7, #8]
20002b2c:	429a      	cmp	r2, r3
20002b2e:	d106      	bne.n	20002b3e <vTaskSwitchContext+0xde>
20002b30:	687b      	ldr	r3, [r7, #4]
20002b32:	f103 030c 	add.w	r3, r3, #12
20002b36:	681a      	ldr	r2, [r3, #0]
20002b38:	68bb      	ldr	r3, [r7, #8]
20002b3a:	429a      	cmp	r2, r3
20002b3c:	d00f      	beq.n	20002b5e <vTaskSwitchContext+0xfe>
20002b3e:	f248 532c 	movw	r3, #34092	; 0x852c
20002b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b46:	681a      	ldr	r2, [r3, #0]
20002b48:	f248 532c 	movw	r3, #34092	; 0x852c
20002b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b50:	681b      	ldr	r3, [r3, #0]
20002b52:	f103 0334 	add.w	r3, r3, #52	; 0x34
20002b56:	4610      	mov	r0, r2
20002b58:	4619      	mov	r1, r3
20002b5a:	f7fd fc73 	bl	20000444 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
20002b5e:	f248 630c 	movw	r3, #34316	; 0x860c
20002b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b66:	681b      	ldr	r3, [r3, #0]
20002b68:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
20002b6a:	697b      	ldr	r3, [r7, #20]
20002b6c:	fab3 f383 	clz	r3, r3
20002b70:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
20002b72:	7efb      	ldrb	r3, [r7, #27]
20002b74:	f1c3 031f 	rsb	r3, r3, #31
20002b78:	60fb      	str	r3, [r7, #12]
20002b7a:	68fa      	ldr	r2, [r7, #12]
20002b7c:	4613      	mov	r3, r2
20002b7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b82:	4413      	add	r3, r2
20002b84:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b88:	461a      	mov	r2, r3
20002b8a:	f248 5330 	movw	r3, #34096	; 0x8530
20002b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b92:	4413      	add	r3, r2
20002b94:	681b      	ldr	r3, [r3, #0]
20002b96:	2b00      	cmp	r3, #0
20002b98:	d109      	bne.n	20002bae <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20002b9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002b9e:	f383 8811 	msr	BASEPRI, r3
20002ba2:	f3bf 8f6f 	isb	sy
20002ba6:	f3bf 8f4f 	dsb	sy
20002baa:	61fb      	str	r3, [r7, #28]
20002bac:	e7fe      	b.n	20002bac <vTaskSwitchContext+0x14c>
20002bae:	68fa      	ldr	r2, [r7, #12]
20002bb0:	4613      	mov	r3, r2
20002bb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002bb6:	4413      	add	r3, r2
20002bb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002bbc:	461a      	mov	r2, r3
20002bbe:	f248 5330 	movw	r3, #34096	; 0x8530
20002bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bc6:	4413      	add	r3, r2
20002bc8:	613b      	str	r3, [r7, #16]
20002bca:	693b      	ldr	r3, [r7, #16]
20002bcc:	685b      	ldr	r3, [r3, #4]
20002bce:	685a      	ldr	r2, [r3, #4]
20002bd0:	693b      	ldr	r3, [r7, #16]
20002bd2:	605a      	str	r2, [r3, #4]
20002bd4:	693b      	ldr	r3, [r7, #16]
20002bd6:	685a      	ldr	r2, [r3, #4]
20002bd8:	693b      	ldr	r3, [r7, #16]
20002bda:	f103 0308 	add.w	r3, r3, #8
20002bde:	429a      	cmp	r2, r3
20002be0:	d104      	bne.n	20002bec <vTaskSwitchContext+0x18c>
20002be2:	693b      	ldr	r3, [r7, #16]
20002be4:	685b      	ldr	r3, [r3, #4]
20002be6:	685a      	ldr	r2, [r3, #4]
20002be8:	693b      	ldr	r3, [r7, #16]
20002bea:	605a      	str	r2, [r3, #4]
20002bec:	693b      	ldr	r3, [r7, #16]
20002bee:	685b      	ldr	r3, [r3, #4]
20002bf0:	68db      	ldr	r3, [r3, #12]
20002bf2:	461a      	mov	r2, r3
20002bf4:	f248 532c 	movw	r3, #34092	; 0x852c
20002bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bfc:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
20002bfe:	f107 0720 	add.w	r7, r7, #32
20002c02:	46bd      	mov	sp, r7
20002c04:	bd80      	pop	{r7, pc}
20002c06:	bf00      	nop

20002c08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002c08:	b580      	push	{r7, lr}
20002c0a:	b084      	sub	sp, #16
20002c0c:	af00      	add	r7, sp, #0
20002c0e:	6078      	str	r0, [r7, #4]
20002c10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002c12:	687b      	ldr	r3, [r7, #4]
20002c14:	2b00      	cmp	r3, #0
20002c16:	d109      	bne.n	20002c2c <vTaskPlaceOnEventList+0x24>
20002c18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002c1c:	f383 8811 	msr	BASEPRI, r3
20002c20:	f3bf 8f6f 	isb	sy
20002c24:	f3bf 8f4f 	dsb	sy
20002c28:	60fb      	str	r3, [r7, #12]
20002c2a:	e7fe      	b.n	20002c2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002c2c:	f248 532c 	movw	r3, #34092	; 0x852c
20002c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c34:	681b      	ldr	r3, [r3, #0]
20002c36:	f103 0318 	add.w	r3, r3, #24
20002c3a:	6878      	ldr	r0, [r7, #4]
20002c3c:	4619      	mov	r1, r3
20002c3e:	f7fe fc3b 	bl	200014b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002c42:	6838      	ldr	r0, [r7, #0]
20002c44:	f04f 0101 	mov.w	r1, #1
20002c48:	f000 fd42 	bl	200036d0 <prvAddCurrentTaskToDelayedList>
}
20002c4c:	f107 0710 	add.w	r7, r7, #16
20002c50:	46bd      	mov	sp, r7
20002c52:	bd80      	pop	{r7, pc}

20002c54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002c54:	b580      	push	{r7, lr}
20002c56:	b086      	sub	sp, #24
20002c58:	af00      	add	r7, sp, #0
20002c5a:	60f8      	str	r0, [r7, #12]
20002c5c:	60b9      	str	r1, [r7, #8]
20002c5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002c60:	68fb      	ldr	r3, [r7, #12]
20002c62:	2b00      	cmp	r3, #0
20002c64:	d109      	bne.n	20002c7a <vTaskPlaceOnEventListRestricted+0x26>
20002c66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002c6a:	f383 8811 	msr	BASEPRI, r3
20002c6e:	f3bf 8f6f 	isb	sy
20002c72:	f3bf 8f4f 	dsb	sy
20002c76:	617b      	str	r3, [r7, #20]
20002c78:	e7fe      	b.n	20002c78 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002c7a:	f248 532c 	movw	r3, #34092	; 0x852c
20002c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c82:	681b      	ldr	r3, [r3, #0]
20002c84:	f103 0318 	add.w	r3, r3, #24
20002c88:	68f8      	ldr	r0, [r7, #12]
20002c8a:	4619      	mov	r1, r3
20002c8c:	f7fe fbf0 	bl	20001470 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
20002c90:	687b      	ldr	r3, [r7, #4]
20002c92:	2b00      	cmp	r3, #0
20002c94:	d002      	beq.n	20002c9c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
20002c96:	f04f 33ff 	mov.w	r3, #4294967295
20002c9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
20002c9c:	68b8      	ldr	r0, [r7, #8]
20002c9e:	6879      	ldr	r1, [r7, #4]
20002ca0:	f000 fd16 	bl	200036d0 <prvAddCurrentTaskToDelayedList>
	}
20002ca4:	f107 0718 	add.w	r7, r7, #24
20002ca8:	46bd      	mov	sp, r7
20002caa:	bd80      	pop	{r7, pc}

20002cac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002cac:	b580      	push	{r7, lr}
20002cae:	b086      	sub	sp, #24
20002cb0:	af00      	add	r7, sp, #0
20002cb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
20002cb4:	687b      	ldr	r3, [r7, #4]
20002cb6:	68db      	ldr	r3, [r3, #12]
20002cb8:	68db      	ldr	r3, [r3, #12]
20002cba:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
20002cbc:	68fb      	ldr	r3, [r7, #12]
20002cbe:	2b00      	cmp	r3, #0
20002cc0:	d109      	bne.n	20002cd6 <xTaskRemoveFromEventList+0x2a>
20002cc2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002cc6:	f383 8811 	msr	BASEPRI, r3
20002cca:	f3bf 8f6f 	isb	sy
20002cce:	f3bf 8f4f 	dsb	sy
20002cd2:	617b      	str	r3, [r7, #20]
20002cd4:	e7fe      	b.n	20002cd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002cd6:	68fb      	ldr	r3, [r7, #12]
20002cd8:	f103 0318 	add.w	r3, r3, #24
20002cdc:	4618      	mov	r0, r3
20002cde:	f7fe fc25 	bl	2000152c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002ce2:	f248 632c 	movw	r3, #34348	; 0x862c
20002ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cea:	681b      	ldr	r3, [r3, #0]
20002cec:	2b00      	cmp	r3, #0
20002cee:	d12d      	bne.n	20002d4c <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002cf0:	68fb      	ldr	r3, [r7, #12]
20002cf2:	f103 0304 	add.w	r3, r3, #4
20002cf6:	4618      	mov	r0, r3
20002cf8:	f7fe fc18 	bl	2000152c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002cfc:	68fb      	ldr	r3, [r7, #12]
20002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002d00:	f04f 0201 	mov.w	r2, #1
20002d04:	fa02 f203 	lsl.w	r2, r2, r3
20002d08:	f248 630c 	movw	r3, #34316	; 0x860c
20002d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d10:	681b      	ldr	r3, [r3, #0]
20002d12:	ea42 0203 	orr.w	r2, r2, r3
20002d16:	f248 630c 	movw	r3, #34316	; 0x860c
20002d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d1e:	601a      	str	r2, [r3, #0]
20002d20:	68fb      	ldr	r3, [r7, #12]
20002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002d24:	4613      	mov	r3, r2
20002d26:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002d2a:	4413      	add	r3, r2
20002d2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002d30:	461a      	mov	r2, r3
20002d32:	f248 5330 	movw	r3, #34096	; 0x8530
20002d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d3a:	441a      	add	r2, r3
20002d3c:	68fb      	ldr	r3, [r7, #12]
20002d3e:	f103 0304 	add.w	r3, r3, #4
20002d42:	4610      	mov	r0, r2
20002d44:	4619      	mov	r1, r3
20002d46:	f7fe fb93 	bl	20001470 <vListInsertEnd>
20002d4a:	e009      	b.n	20002d60 <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002d4c:	68fb      	ldr	r3, [r7, #12]
20002d4e:	f103 0318 	add.w	r3, r3, #24
20002d52:	f248 50c4 	movw	r0, #34244	; 0x85c4
20002d56:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d5a:	4619      	mov	r1, r3
20002d5c:	f7fe fb88 	bl	20001470 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002d60:	68fb      	ldr	r3, [r7, #12]
20002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002d64:	f248 532c 	movw	r3, #34092	; 0x852c
20002d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d6c:	681b      	ldr	r3, [r3, #0]
20002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002d70:	429a      	cmp	r2, r3
20002d72:	d90a      	bls.n	20002d8a <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002d74:	f04f 0301 	mov.w	r3, #1
20002d78:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002d7a:	f248 6318 	movw	r3, #34328	; 0x8618
20002d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d82:	f04f 0201 	mov.w	r2, #1
20002d86:	601a      	str	r2, [r3, #0]
20002d88:	e002      	b.n	20002d90 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
20002d8a:	f04f 0300 	mov.w	r3, #0
20002d8e:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
20002d90:	693b      	ldr	r3, [r7, #16]
}
20002d92:	4618      	mov	r0, r3
20002d94:	f107 0718 	add.w	r7, r7, #24
20002d98:	46bd      	mov	sp, r7
20002d9a:	bd80      	pop	{r7, pc}

20002d9c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002d9c:	b480      	push	{r7}
20002d9e:	b085      	sub	sp, #20
20002da0:	af00      	add	r7, sp, #0
20002da2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
20002da4:	687b      	ldr	r3, [r7, #4]
20002da6:	2b00      	cmp	r3, #0
20002da8:	d109      	bne.n	20002dbe <vTaskSetTimeOutState+0x22>
20002daa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002dae:	f383 8811 	msr	BASEPRI, r3
20002db2:	f3bf 8f6f 	isb	sy
20002db6:	f3bf 8f4f 	dsb	sy
20002dba:	60fb      	str	r3, [r7, #12]
20002dbc:	e7fe      	b.n	20002dbc <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002dbe:	f248 631c 	movw	r3, #34332	; 0x861c
20002dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dc6:	681a      	ldr	r2, [r3, #0]
20002dc8:	687b      	ldr	r3, [r7, #4]
20002dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002dcc:	f248 6308 	movw	r3, #34312	; 0x8608
20002dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dd4:	681a      	ldr	r2, [r3, #0]
20002dd6:	687b      	ldr	r3, [r7, #4]
20002dd8:	605a      	str	r2, [r3, #4]
}
20002dda:	f107 0714 	add.w	r7, r7, #20
20002dde:	46bd      	mov	sp, r7
20002de0:	bc80      	pop	{r7}
20002de2:	4770      	bx	lr

20002de4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002de4:	b580      	push	{r7, lr}
20002de6:	b086      	sub	sp, #24
20002de8:	af00      	add	r7, sp, #0
20002dea:	6078      	str	r0, [r7, #4]
20002dec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002dee:	687b      	ldr	r3, [r7, #4]
20002df0:	2b00      	cmp	r3, #0
20002df2:	d109      	bne.n	20002e08 <xTaskCheckForTimeOut+0x24>
20002df4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002df8:	f383 8811 	msr	BASEPRI, r3
20002dfc:	f3bf 8f6f 	isb	sy
20002e00:	f3bf 8f4f 	dsb	sy
20002e04:	613b      	str	r3, [r7, #16]
20002e06:	e7fe      	b.n	20002e06 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
20002e08:	683b      	ldr	r3, [r7, #0]
20002e0a:	2b00      	cmp	r3, #0
20002e0c:	d109      	bne.n	20002e22 <xTaskCheckForTimeOut+0x3e>
20002e0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002e12:	f383 8811 	msr	BASEPRI, r3
20002e16:	f3bf 8f6f 	isb	sy
20002e1a:	f3bf 8f4f 	dsb	sy
20002e1e:	617b      	str	r3, [r7, #20]
20002e20:	e7fe      	b.n	20002e20 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
20002e22:	f001 fbfb 	bl	2000461c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002e26:	f248 6308 	movw	r3, #34312	; 0x8608
20002e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e2e:	681b      	ldr	r3, [r3, #0]
20002e30:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002e32:	683b      	ldr	r3, [r7, #0]
20002e34:	681b      	ldr	r3, [r3, #0]
20002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
20002e3a:	d103      	bne.n	20002e44 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002e3c:	f04f 0300 	mov.w	r3, #0
20002e40:	60bb      	str	r3, [r7, #8]
20002e42:	e02e      	b.n	20002ea2 <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002e44:	687b      	ldr	r3, [r7, #4]
20002e46:	681a      	ldr	r2, [r3, #0]
20002e48:	f248 631c 	movw	r3, #34332	; 0x861c
20002e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e50:	681b      	ldr	r3, [r3, #0]
20002e52:	429a      	cmp	r2, r3
20002e54:	d008      	beq.n	20002e68 <xTaskCheckForTimeOut+0x84>
20002e56:	687b      	ldr	r3, [r7, #4]
20002e58:	685a      	ldr	r2, [r3, #4]
20002e5a:	68fb      	ldr	r3, [r7, #12]
20002e5c:	429a      	cmp	r2, r3
20002e5e:	d803      	bhi.n	20002e68 <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002e60:	f04f 0301 	mov.w	r3, #1
20002e64:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002e66:	e01c      	b.n	20002ea2 <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002e68:	687b      	ldr	r3, [r7, #4]
20002e6a:	685b      	ldr	r3, [r3, #4]
20002e6c:	68fa      	ldr	r2, [r7, #12]
20002e6e:	ebc3 0202 	rsb	r2, r3, r2
20002e72:	683b      	ldr	r3, [r7, #0]
20002e74:	681b      	ldr	r3, [r3, #0]
20002e76:	429a      	cmp	r2, r3
20002e78:	d210      	bcs.n	20002e9c <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
20002e7a:	683b      	ldr	r3, [r7, #0]
20002e7c:	681a      	ldr	r2, [r3, #0]
20002e7e:	687b      	ldr	r3, [r7, #4]
20002e80:	6859      	ldr	r1, [r3, #4]
20002e82:	68fb      	ldr	r3, [r7, #12]
20002e84:	ebc3 0301 	rsb	r3, r3, r1
20002e88:	441a      	add	r2, r3
20002e8a:	683b      	ldr	r3, [r7, #0]
20002e8c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
20002e8e:	6878      	ldr	r0, [r7, #4]
20002e90:	f7ff ff84 	bl	20002d9c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
20002e94:	f04f 0300 	mov.w	r3, #0
20002e98:	60bb      	str	r3, [r7, #8]
20002e9a:	e002      	b.n	20002ea2 <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
20002e9c:	f04f 0301 	mov.w	r3, #1
20002ea0:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
20002ea2:	f001 fbf3 	bl	2000468c <vPortExitCritical>

	return xReturn;
20002ea6:	68bb      	ldr	r3, [r7, #8]
}
20002ea8:	4618      	mov	r0, r3
20002eaa:	f107 0718 	add.w	r7, r7, #24
20002eae:	46bd      	mov	sp, r7
20002eb0:	bd80      	pop	{r7, pc}
20002eb2:	bf00      	nop

20002eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002eb4:	b480      	push	{r7}
20002eb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
20002eb8:	f248 6318 	movw	r3, #34328	; 0x8618
20002ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ec0:	f04f 0201 	mov.w	r2, #1
20002ec4:	601a      	str	r2, [r3, #0]
}
20002ec6:	46bd      	mov	sp, r7
20002ec8:	bc80      	pop	{r7}
20002eca:	4770      	bx	lr

20002ecc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002ecc:	b580      	push	{r7, lr}
20002ece:	b082      	sub	sp, #8
20002ed0:	af00      	add	r7, sp, #0
20002ed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002ed4:	f000 f868 	bl	20002fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
20002ed8:	f248 5330 	movw	r3, #34096	; 0x8530
20002edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ee0:	681b      	ldr	r3, [r3, #0]
20002ee2:	2b01      	cmp	r3, #1
20002ee4:	d90a      	bls.n	20002efc <prvIdleTask+0x30>
			{
				taskYIELD();
20002ee6:	f64e 5304 	movw	r3, #60676	; 0xed04
20002eea:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002ef2:	601a      	str	r2, [r3, #0]
20002ef4:	f3bf 8f4f 	dsb	sy
20002ef8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
20002efc:	f7fd fa9c 	bl	20000438 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
20002f00:	e7e8      	b.n	20002ed4 <prvIdleTask+0x8>
20002f02:	bf00      	nop

20002f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002f04:	b580      	push	{r7, lr}
20002f06:	b082      	sub	sp, #8
20002f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002f0a:	f04f 0300 	mov.w	r3, #0
20002f0e:	607b      	str	r3, [r7, #4]
20002f10:	e013      	b.n	20002f3a <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002f12:	687a      	ldr	r2, [r7, #4]
20002f14:	4613      	mov	r3, r2
20002f16:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f1a:	4413      	add	r3, r2
20002f1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f20:	461a      	mov	r2, r3
20002f22:	f248 5330 	movw	r3, #34096	; 0x8530
20002f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f2a:	4413      	add	r3, r2
20002f2c:	4618      	mov	r0, r3
20002f2e:	f7fe fa6d 	bl	2000140c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002f32:	687b      	ldr	r3, [r7, #4]
20002f34:	f103 0301 	add.w	r3, r3, #1
20002f38:	607b      	str	r3, [r7, #4]
20002f3a:	687b      	ldr	r3, [r7, #4]
20002f3c:	2b04      	cmp	r3, #4
20002f3e:	d9e8      	bls.n	20002f12 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
20002f40:	f248 5094 	movw	r0, #34196	; 0x8594
20002f44:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f48:	f7fe fa60 	bl	2000140c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002f4c:	f248 50a8 	movw	r0, #34216	; 0x85a8
20002f50:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f54:	f7fe fa5a 	bl	2000140c <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002f58:	f248 50c4 	movw	r0, #34244	; 0x85c4
20002f5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f60:	f7fe fa54 	bl	2000140c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002f64:	f248 50d8 	movw	r0, #34264	; 0x85d8
20002f68:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f6c:	f7fe fa4e 	bl	2000140c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002f70:	f248 50f0 	movw	r0, #34288	; 0x85f0
20002f74:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f78:	f7fe fa48 	bl	2000140c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
20002f7c:	f248 53bc 	movw	r3, #34236	; 0x85bc
20002f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f84:	f248 5294 	movw	r2, #34196	; 0x8594
20002f88:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002f8c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002f8e:	f248 53c0 	movw	r3, #34240	; 0x85c0
20002f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f96:	f248 52a8 	movw	r2, #34216	; 0x85a8
20002f9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002f9e:	601a      	str	r2, [r3, #0]
}
20002fa0:	f107 0708 	add.w	r7, r7, #8
20002fa4:	46bd      	mov	sp, r7
20002fa6:	bd80      	pop	{r7, pc}

20002fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002fa8:	b580      	push	{r7, lr}
20002faa:	b082      	sub	sp, #8
20002fac:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002fae:	e03c      	b.n	2000302a <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
20002fb0:	f7ff fb5c 	bl	2000266c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
20002fb4:	f248 53d8 	movw	r3, #34264	; 0x85d8
20002fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fbc:	681b      	ldr	r3, [r3, #0]
20002fbe:	2b00      	cmp	r3, #0
20002fc0:	bf14      	ite	ne
20002fc2:	2300      	movne	r3, #0
20002fc4:	2301      	moveq	r3, #1
20002fc6:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
20002fc8:	f7ff fb62 	bl	20002690 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
20002fcc:	683b      	ldr	r3, [r7, #0]
20002fce:	2b00      	cmp	r3, #0
20002fd0:	d12b      	bne.n	2000302a <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
20002fd2:	f001 fb23 	bl	2000461c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
20002fd6:	f248 53d8 	movw	r3, #34264	; 0x85d8
20002fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fde:	68db      	ldr	r3, [r3, #12]
20002fe0:	68db      	ldr	r3, [r3, #12]
20002fe2:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002fe4:	687b      	ldr	r3, [r7, #4]
20002fe6:	f103 0304 	add.w	r3, r3, #4
20002fea:	4618      	mov	r0, r3
20002fec:	f7fe fa9e 	bl	2000152c <uxListRemove>
					--uxCurrentNumberOfTasks;
20002ff0:	f248 6304 	movw	r3, #34308	; 0x8604
20002ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ff8:	681b      	ldr	r3, [r3, #0]
20002ffa:	f103 32ff 	add.w	r2, r3, #4294967295
20002ffe:	f248 6304 	movw	r3, #34308	; 0x8604
20003002:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003006:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
20003008:	f248 53ec 	movw	r3, #34284	; 0x85ec
2000300c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003010:	681b      	ldr	r3, [r3, #0]
20003012:	f103 32ff 	add.w	r2, r3, #4294967295
20003016:	f248 53ec 	movw	r3, #34284	; 0x85ec
2000301a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000301e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
20003020:	f001 fb34 	bl	2000468c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
20003024:	6878      	ldr	r0, [r7, #4]
20003026:	f000 f80b 	bl	20003040 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
2000302a:	f248 53ec 	movw	r3, #34284	; 0x85ec
2000302e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003032:	681b      	ldr	r3, [r3, #0]
20003034:	2b00      	cmp	r3, #0
20003036:	d1bb      	bne.n	20002fb0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20003038:	f107 0708 	add.w	r7, r7, #8
2000303c:	46bd      	mov	sp, r7
2000303e:	bd80      	pop	{r7, pc}

20003040 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20003040:	b580      	push	{r7, lr}
20003042:	b082      	sub	sp, #8
20003044:	af00      	add	r7, sp, #0
20003046:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
20003048:	687b      	ldr	r3, [r7, #4]
2000304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000304c:	4618      	mov	r0, r3
2000304e:	f001 f897 	bl	20004180 <vPortFree>
			vPortFree( pxTCB );
20003052:	6878      	ldr	r0, [r7, #4]
20003054:	f001 f894 	bl	20004180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20003058:	f107 0708 	add.w	r7, r7, #8
2000305c:	46bd      	mov	sp, r7
2000305e:	bd80      	pop	{r7, pc}

20003060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20003060:	b480      	push	{r7}
20003062:	b083      	sub	sp, #12
20003064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20003066:	f248 53bc 	movw	r3, #34236	; 0x85bc
2000306a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000306e:	681b      	ldr	r3, [r3, #0]
20003070:	681b      	ldr	r3, [r3, #0]
20003072:	2b00      	cmp	r3, #0
20003074:	d102      	bne.n	2000307c <prvResetNextTaskUnblockTime+0x1c>
20003076:	f04f 0301 	mov.w	r3, #1
2000307a:	e001      	b.n	20003080 <prvResetNextTaskUnblockTime+0x20>
2000307c:	f04f 0300 	mov.w	r3, #0
20003080:	2b00      	cmp	r3, #0
20003082:	d007      	beq.n	20003094 <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20003084:	f248 6324 	movw	r3, #34340	; 0x8624
20003088:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000308c:	f04f 32ff 	mov.w	r2, #4294967295
20003090:	601a      	str	r2, [r3, #0]
20003092:	e00e      	b.n	200030b2 <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
20003094:	f248 53bc 	movw	r3, #34236	; 0x85bc
20003098:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000309c:	681b      	ldr	r3, [r3, #0]
2000309e:	68db      	ldr	r3, [r3, #12]
200030a0:	68db      	ldr	r3, [r3, #12]
200030a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
200030a4:	687b      	ldr	r3, [r7, #4]
200030a6:	685a      	ldr	r2, [r3, #4]
200030a8:	f248 6324 	movw	r3, #34340	; 0x8624
200030ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030b0:	601a      	str	r2, [r3, #0]
	}
}
200030b2:	f107 070c 	add.w	r7, r7, #12
200030b6:	46bd      	mov	sp, r7
200030b8:	bc80      	pop	{r7}
200030ba:	4770      	bx	lr

200030bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
200030bc:	b480      	push	{r7}
200030be:	b083      	sub	sp, #12
200030c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
200030c2:	f248 6310 	movw	r3, #34320	; 0x8610
200030c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030ca:	681b      	ldr	r3, [r3, #0]
200030cc:	2b00      	cmp	r3, #0
200030ce:	d103      	bne.n	200030d8 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
200030d0:	f04f 0301 	mov.w	r3, #1
200030d4:	607b      	str	r3, [r7, #4]
200030d6:	e00d      	b.n	200030f4 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200030d8:	f248 632c 	movw	r3, #34348	; 0x862c
200030dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030e0:	681b      	ldr	r3, [r3, #0]
200030e2:	2b00      	cmp	r3, #0
200030e4:	d103      	bne.n	200030ee <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
200030e6:	f04f 0302 	mov.w	r3, #2
200030ea:	607b      	str	r3, [r7, #4]
200030ec:	e002      	b.n	200030f4 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
200030ee:	f04f 0300 	mov.w	r3, #0
200030f2:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
200030f4:	687b      	ldr	r3, [r7, #4]
	}
200030f6:	4618      	mov	r0, r3
200030f8:	f107 070c 	add.w	r7, r7, #12
200030fc:	46bd      	mov	sp, r7
200030fe:	bc80      	pop	{r7}
20003100:	4770      	bx	lr
20003102:	bf00      	nop

20003104 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
20003104:	b580      	push	{r7, lr}
20003106:	b084      	sub	sp, #16
20003108:	af00      	add	r7, sp, #0
2000310a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
2000310c:	687b      	ldr	r3, [r7, #4]
2000310e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
20003110:	687b      	ldr	r3, [r7, #4]
20003112:	2b00      	cmp	r3, #0
20003114:	f000 8098 	beq.w	20003248 <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
20003118:	68fb      	ldr	r3, [r7, #12]
2000311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000311c:	f248 532c 	movw	r3, #34092	; 0x852c
20003120:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003124:	681b      	ldr	r3, [r3, #0]
20003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003128:	429a      	cmp	r2, r3
2000312a:	f080 808d 	bcs.w	20003248 <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
2000312e:	68fb      	ldr	r3, [r7, #12]
20003130:	699b      	ldr	r3, [r3, #24]
20003132:	2b00      	cmp	r3, #0
20003134:	db09      	blt.n	2000314a <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003136:	f248 532c 	movw	r3, #34092	; 0x852c
2000313a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000313e:	681b      	ldr	r3, [r3, #0]
20003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003142:	f1c3 0205 	rsb	r2, r3, #5
20003146:	68fb      	ldr	r3, [r7, #12]
20003148:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
2000314a:	68fb      	ldr	r3, [r7, #12]
2000314c:	6959      	ldr	r1, [r3, #20]
2000314e:	68fb      	ldr	r3, [r7, #12]
20003150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003152:	4613      	mov	r3, r2
20003154:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003158:	4413      	add	r3, r2
2000315a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000315e:	461a      	mov	r2, r3
20003160:	f248 5330 	movw	r3, #34096	; 0x8530
20003164:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003168:	4413      	add	r3, r2
2000316a:	4299      	cmp	r1, r3
2000316c:	d102      	bne.n	20003174 <vTaskPriorityInherit+0x70>
2000316e:	f04f 0301 	mov.w	r3, #1
20003172:	e001      	b.n	20003178 <vTaskPriorityInherit+0x74>
20003174:	f04f 0300 	mov.w	r3, #0
20003178:	2b00      	cmp	r3, #0
2000317a:	d05d      	beq.n	20003238 <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2000317c:	68fb      	ldr	r3, [r7, #12]
2000317e:	f103 0304 	add.w	r3, r3, #4
20003182:	4618      	mov	r0, r3
20003184:	f7fe f9d2 	bl	2000152c <uxListRemove>
20003188:	4603      	mov	r3, r0
2000318a:	2b00      	cmp	r3, #0
2000318c:	d124      	bne.n	200031d8 <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
2000318e:	68fb      	ldr	r3, [r7, #12]
20003190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003192:	4613      	mov	r3, r2
20003194:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003198:	4413      	add	r3, r2
2000319a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000319e:	461a      	mov	r2, r3
200031a0:	f248 5330 	movw	r3, #34096	; 0x8530
200031a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031a8:	4413      	add	r3, r2
200031aa:	681b      	ldr	r3, [r3, #0]
200031ac:	2b00      	cmp	r3, #0
200031ae:	d113      	bne.n	200031d8 <vTaskPriorityInherit+0xd4>
200031b0:	68fb      	ldr	r3, [r7, #12]
200031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200031b4:	f04f 0201 	mov.w	r2, #1
200031b8:	fa02 f303 	lsl.w	r3, r2, r3
200031bc:	ea6f 0203 	mvn.w	r2, r3
200031c0:	f248 630c 	movw	r3, #34316	; 0x860c
200031c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031c8:	681b      	ldr	r3, [r3, #0]
200031ca:	ea02 0203 	and.w	r2, r2, r3
200031ce:	f248 630c 	movw	r3, #34316	; 0x860c
200031d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
200031d8:	f248 532c 	movw	r3, #34092	; 0x852c
200031dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031e0:	681b      	ldr	r3, [r3, #0]
200031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200031e4:	68fb      	ldr	r3, [r7, #12]
200031e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
200031e8:	68fb      	ldr	r3, [r7, #12]
200031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200031ec:	f04f 0201 	mov.w	r2, #1
200031f0:	fa02 f203 	lsl.w	r2, r2, r3
200031f4:	f248 630c 	movw	r3, #34316	; 0x860c
200031f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031fc:	681b      	ldr	r3, [r3, #0]
200031fe:	ea42 0203 	orr.w	r2, r2, r3
20003202:	f248 630c 	movw	r3, #34316	; 0x860c
20003206:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000320a:	601a      	str	r2, [r3, #0]
2000320c:	68fb      	ldr	r3, [r7, #12]
2000320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003210:	4613      	mov	r3, r2
20003212:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003216:	4413      	add	r3, r2
20003218:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000321c:	461a      	mov	r2, r3
2000321e:	f248 5330 	movw	r3, #34096	; 0x8530
20003222:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003226:	441a      	add	r2, r3
20003228:	68fb      	ldr	r3, [r7, #12]
2000322a:	f103 0304 	add.w	r3, r3, #4
2000322e:	4610      	mov	r0, r2
20003230:	4619      	mov	r1, r3
20003232:	f7fe f91d 	bl	20001470 <vListInsertEnd>
20003236:	e007      	b.n	20003248 <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20003238:	f248 532c 	movw	r3, #34092	; 0x852c
2000323c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003240:	681b      	ldr	r3, [r3, #0]
20003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003244:	68fb      	ldr	r3, [r7, #12]
20003246:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20003248:	f107 0710 	add.w	r7, r7, #16
2000324c:	46bd      	mov	sp, r7
2000324e:	bd80      	pop	{r7, pc}

20003250 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20003250:	b580      	push	{r7, lr}
20003252:	b086      	sub	sp, #24
20003254:	af00      	add	r7, sp, #0
20003256:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20003258:	687b      	ldr	r3, [r7, #4]
2000325a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
2000325c:	f04f 0300 	mov.w	r3, #0
20003260:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
20003262:	687b      	ldr	r3, [r7, #4]
20003264:	2b00      	cmp	r3, #0
20003266:	f000 8092 	beq.w	2000338e <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
2000326a:	f248 532c 	movw	r3, #34092	; 0x852c
2000326e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003272:	681b      	ldr	r3, [r3, #0]
20003274:	68ba      	ldr	r2, [r7, #8]
20003276:	429a      	cmp	r2, r3
20003278:	d009      	beq.n	2000328e <xTaskPriorityDisinherit+0x3e>
2000327a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000327e:	f383 8811 	msr	BASEPRI, r3
20003282:	f3bf 8f6f 	isb	sy
20003286:	f3bf 8f4f 	dsb	sy
2000328a:	613b      	str	r3, [r7, #16]
2000328c:	e7fe      	b.n	2000328c <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
2000328e:	68bb      	ldr	r3, [r7, #8]
20003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20003292:	2b00      	cmp	r3, #0
20003294:	d109      	bne.n	200032aa <xTaskPriorityDisinherit+0x5a>
20003296:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000329a:	f383 8811 	msr	BASEPRI, r3
2000329e:	f3bf 8f6f 	isb	sy
200032a2:	f3bf 8f4f 	dsb	sy
200032a6:	617b      	str	r3, [r7, #20]
200032a8:	e7fe      	b.n	200032a8 <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
200032aa:	68bb      	ldr	r3, [r7, #8]
200032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200032ae:	f103 32ff 	add.w	r2, r3, #4294967295
200032b2:	68bb      	ldr	r3, [r7, #8]
200032b4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
200032b6:	68bb      	ldr	r3, [r7, #8]
200032b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200032ba:	68bb      	ldr	r3, [r7, #8]
200032bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200032be:	429a      	cmp	r2, r3
200032c0:	d065      	beq.n	2000338e <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
200032c2:	68bb      	ldr	r3, [r7, #8]
200032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200032c6:	2b00      	cmp	r3, #0
200032c8:	d161      	bne.n	2000338e <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200032ca:	68bb      	ldr	r3, [r7, #8]
200032cc:	f103 0304 	add.w	r3, r3, #4
200032d0:	4618      	mov	r0, r3
200032d2:	f7fe f92b 	bl	2000152c <uxListRemove>
200032d6:	4603      	mov	r3, r0
200032d8:	2b00      	cmp	r3, #0
200032da:	d124      	bne.n	20003326 <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
200032dc:	68bb      	ldr	r3, [r7, #8]
200032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200032e0:	4613      	mov	r3, r2
200032e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200032e6:	4413      	add	r3, r2
200032e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200032ec:	461a      	mov	r2, r3
200032ee:	f248 5330 	movw	r3, #34096	; 0x8530
200032f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032f6:	4413      	add	r3, r2
200032f8:	681b      	ldr	r3, [r3, #0]
200032fa:	2b00      	cmp	r3, #0
200032fc:	d113      	bne.n	20003326 <xTaskPriorityDisinherit+0xd6>
200032fe:	68bb      	ldr	r3, [r7, #8]
20003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003302:	f04f 0201 	mov.w	r2, #1
20003306:	fa02 f303 	lsl.w	r3, r2, r3
2000330a:	ea6f 0203 	mvn.w	r2, r3
2000330e:	f248 630c 	movw	r3, #34316	; 0x860c
20003312:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003316:	681b      	ldr	r3, [r3, #0]
20003318:	ea02 0203 	and.w	r2, r2, r3
2000331c:	f248 630c 	movw	r3, #34316	; 0x860c
20003320:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003324:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
20003326:	68bb      	ldr	r3, [r7, #8]
20003328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000332a:	68bb      	ldr	r3, [r7, #8]
2000332c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000332e:	68bb      	ldr	r3, [r7, #8]
20003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003332:	f1c3 0205 	rsb	r2, r3, #5
20003336:	68bb      	ldr	r3, [r7, #8]
20003338:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
2000333a:	68bb      	ldr	r3, [r7, #8]
2000333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000333e:	f04f 0201 	mov.w	r2, #1
20003342:	fa02 f203 	lsl.w	r2, r2, r3
20003346:	f248 630c 	movw	r3, #34316	; 0x860c
2000334a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000334e:	681b      	ldr	r3, [r3, #0]
20003350:	ea42 0203 	orr.w	r2, r2, r3
20003354:	f248 630c 	movw	r3, #34316	; 0x860c
20003358:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000335c:	601a      	str	r2, [r3, #0]
2000335e:	68bb      	ldr	r3, [r7, #8]
20003360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003362:	4613      	mov	r3, r2
20003364:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003368:	4413      	add	r3, r2
2000336a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000336e:	461a      	mov	r2, r3
20003370:	f248 5330 	movw	r3, #34096	; 0x8530
20003374:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003378:	441a      	add	r2, r3
2000337a:	68bb      	ldr	r3, [r7, #8]
2000337c:	f103 0304 	add.w	r3, r3, #4
20003380:	4610      	mov	r0, r2
20003382:	4619      	mov	r1, r3
20003384:	f7fe f874 	bl	20001470 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20003388:	f04f 0301 	mov.w	r3, #1
2000338c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
2000338e:	68fb      	ldr	r3, [r7, #12]
	}
20003390:	4618      	mov	r0, r3
20003392:	f107 0718 	add.w	r7, r7, #24
20003396:	46bd      	mov	sp, r7
20003398:	bd80      	pop	{r7, pc}
2000339a:	bf00      	nop

2000339c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
2000339c:	b480      	push	{r7}
2000339e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
200033a0:	f248 532c 	movw	r3, #34092	; 0x852c
200033a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033a8:	681b      	ldr	r3, [r3, #0]
200033aa:	2b00      	cmp	r3, #0
200033ac:	d008      	beq.n	200033c0 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
200033ae:	f248 532c 	movw	r3, #34092	; 0x852c
200033b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033b6:	681b      	ldr	r3, [r3, #0]
200033b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200033ba:	f102 0201 	add.w	r2, r2, #1
200033be:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
200033c0:	f248 532c 	movw	r3, #34092	; 0x852c
200033c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033c8:	681b      	ldr	r3, [r3, #0]
	}
200033ca:	4618      	mov	r0, r3
200033cc:	46bd      	mov	sp, r7
200033ce:	bc80      	pop	{r7}
200033d0:	4770      	bx	lr
200033d2:	bf00      	nop

200033d4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
200033d4:	b580      	push	{r7, lr}
200033d6:	b084      	sub	sp, #16
200033d8:	af00      	add	r7, sp, #0
200033da:	6078      	str	r0, [r7, #4]
200033dc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
200033de:	f001 f91d 	bl	2000461c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
200033e2:	f248 532c 	movw	r3, #34092	; 0x852c
200033e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033ea:	681b      	ldr	r3, [r3, #0]
200033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200033ee:	2b00      	cmp	r3, #0
200033f0:	d11b      	bne.n	2000342a <ulTaskNotifyTake+0x56>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
200033f2:	f248 532c 	movw	r3, #34092	; 0x852c
200033f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033fa:	681b      	ldr	r3, [r3, #0]
200033fc:	f04f 0201 	mov.w	r2, #1
20003400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
20003404:	683b      	ldr	r3, [r7, #0]
20003406:	2b00      	cmp	r3, #0
20003408:	d00f      	beq.n	2000342a <ulTaskNotifyTake+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2000340a:	6838      	ldr	r0, [r7, #0]
2000340c:	f04f 0101 	mov.w	r1, #1
20003410:	f000 f95e 	bl	200036d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
20003414:	f64e 5304 	movw	r3, #60676	; 0xed04
20003418:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000341c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003420:	601a      	str	r2, [r3, #0]
20003422:	f3bf 8f4f 	dsb	sy
20003426:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
2000342a:	f001 f92f 	bl	2000468c <vPortExitCritical>

		taskENTER_CRITICAL();
2000342e:	f001 f8f5 	bl	2000461c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
20003432:	f248 532c 	movw	r3, #34092	; 0x852c
20003436:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000343a:	681b      	ldr	r3, [r3, #0]
2000343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000343e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
20003440:	68fb      	ldr	r3, [r7, #12]
20003442:	2b00      	cmp	r3, #0
20003444:	d014      	beq.n	20003470 <ulTaskNotifyTake+0x9c>
			{
				if( xClearCountOnExit != pdFALSE )
20003446:	687b      	ldr	r3, [r7, #4]
20003448:	2b00      	cmp	r3, #0
2000344a:	d008      	beq.n	2000345e <ulTaskNotifyTake+0x8a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
2000344c:	f248 532c 	movw	r3, #34092	; 0x852c
20003450:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003454:	681b      	ldr	r3, [r3, #0]
20003456:	f04f 0200 	mov.w	r2, #0
2000345a:	655a      	str	r2, [r3, #84]	; 0x54
2000345c:	e008      	b.n	20003470 <ulTaskNotifyTake+0x9c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
2000345e:	f248 532c 	movw	r3, #34092	; 0x852c
20003462:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003466:	681b      	ldr	r3, [r3, #0]
20003468:	68fa      	ldr	r2, [r7, #12]
2000346a:	f102 32ff 	add.w	r2, r2, #4294967295
2000346e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20003470:	f248 532c 	movw	r3, #34092	; 0x852c
20003474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003478:	681b      	ldr	r3, [r3, #0]
2000347a:	f04f 0200 	mov.w	r2, #0
2000347e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
20003482:	f001 f903 	bl	2000468c <vPortExitCritical>

		return ulReturn;
20003486:	68fb      	ldr	r3, [r7, #12]
	}
20003488:	4618      	mov	r0, r3
2000348a:	f107 0710 	add.w	r7, r7, #16
2000348e:	46bd      	mov	sp, r7
20003490:	bd80      	pop	{r7, pc}
20003492:	bf00      	nop

20003494 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
20003494:	b580      	push	{r7, lr}
20003496:	b086      	sub	sp, #24
20003498:	af00      	add	r7, sp, #0
2000349a:	60f8      	str	r0, [r7, #12]
2000349c:	60b9      	str	r1, [r7, #8]
2000349e:	607a      	str	r2, [r7, #4]
200034a0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
200034a2:	f001 f8bb 	bl	2000461c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
200034a6:	f248 532c 	movw	r3, #34092	; 0x852c
200034aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034ae:	681b      	ldr	r3, [r3, #0]
200034b0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
200034b4:	b2db      	uxtb	r3, r3
200034b6:	2b02      	cmp	r3, #2
200034b8:	d027      	beq.n	2000350a <xTaskNotifyWait+0x76>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
200034ba:	f248 532c 	movw	r3, #34092	; 0x852c
200034be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034c2:	681b      	ldr	r3, [r3, #0]
200034c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
200034c6:	68fa      	ldr	r2, [r7, #12]
200034c8:	ea6f 0202 	mvn.w	r2, r2
200034cc:	ea01 0202 	and.w	r2, r1, r2
200034d0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
200034d2:	f248 532c 	movw	r3, #34092	; 0x852c
200034d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034da:	681b      	ldr	r3, [r3, #0]
200034dc:	f04f 0201 	mov.w	r2, #1
200034e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
200034e4:	683b      	ldr	r3, [r7, #0]
200034e6:	2b00      	cmp	r3, #0
200034e8:	d00f      	beq.n	2000350a <xTaskNotifyWait+0x76>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
200034ea:	6838      	ldr	r0, [r7, #0]
200034ec:	f04f 0101 	mov.w	r1, #1
200034f0:	f000 f8ee 	bl	200036d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
200034f4:	f64e 5304 	movw	r3, #60676	; 0xed04
200034f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
200034fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003500:	601a      	str	r2, [r3, #0]
20003502:	f3bf 8f4f 	dsb	sy
20003506:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
2000350a:	f001 f8bf 	bl	2000468c <vPortExitCritical>

		taskENTER_CRITICAL();
2000350e:	f001 f885 	bl	2000461c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
20003512:	687b      	ldr	r3, [r7, #4]
20003514:	2b00      	cmp	r3, #0
20003516:	d007      	beq.n	20003528 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
20003518:	f248 532c 	movw	r3, #34092	; 0x852c
2000351c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003520:	681b      	ldr	r3, [r3, #0]
20003522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20003524:	687b      	ldr	r3, [r7, #4]
20003526:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
20003528:	f248 532c 	movw	r3, #34092	; 0x852c
2000352c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003530:	681b      	ldr	r3, [r3, #0]
20003532:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
20003536:	b2db      	uxtb	r3, r3
20003538:	2b01      	cmp	r3, #1
2000353a:	d103      	bne.n	20003544 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
2000353c:	f04f 0300 	mov.w	r3, #0
20003540:	617b      	str	r3, [r7, #20]
20003542:	e00e      	b.n	20003562 <xTaskNotifyWait+0xce>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
20003544:	f248 532c 	movw	r3, #34092	; 0x852c
20003548:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000354c:	681b      	ldr	r3, [r3, #0]
2000354e:	6d59      	ldr	r1, [r3, #84]	; 0x54
20003550:	68ba      	ldr	r2, [r7, #8]
20003552:	ea6f 0202 	mvn.w	r2, r2
20003556:	ea01 0202 	and.w	r2, r1, r2
2000355a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
2000355c:	f04f 0301 	mov.w	r3, #1
20003560:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20003562:	f248 532c 	movw	r3, #34092	; 0x852c
20003566:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000356a:	681b      	ldr	r3, [r3, #0]
2000356c:	f04f 0200 	mov.w	r2, #0
20003570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
20003574:	f001 f88a 	bl	2000468c <vPortExitCritical>

		return xReturn;
20003578:	697b      	ldr	r3, [r7, #20]
	}
2000357a:	4618      	mov	r0, r3
2000357c:	f107 0718 	add.w	r7, r7, #24
20003580:	46bd      	mov	sp, r7
20003582:	bd80      	pop	{r7, pc}

20003584 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
20003584:	b580      	push	{r7, lr}
20003586:	b08a      	sub	sp, #40	; 0x28
20003588:	af00      	add	r7, sp, #0
2000358a:	6078      	str	r0, [r7, #4]
2000358c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
2000358e:	687b      	ldr	r3, [r7, #4]
20003590:	2b00      	cmp	r3, #0
20003592:	d109      	bne.n	200035a8 <vTaskNotifyGiveFromISR+0x24>
20003594:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003598:	f383 8811 	msr	BASEPRI, r3
2000359c:	f3bf 8f6f 	isb	sy
200035a0:	f3bf 8f4f 	dsb	sy
200035a4:	617b      	str	r3, [r7, #20]
200035a6:	e7fe      	b.n	200035a6 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200035a8:	f001 f90c 	bl	200047c4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
200035ac:	687b      	ldr	r3, [r7, #4]
200035ae:	60bb      	str	r3, [r7, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200035b0:	f3ef 8211 	mrs	r2, BASEPRI
200035b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200035b8:	f383 8811 	msr	BASEPRI, r3
200035bc:	f3bf 8f6f 	isb	sy
200035c0:	f3bf 8f4f 	dsb	sy
200035c4:	61fa      	str	r2, [r7, #28]
200035c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
200035c8:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200035ca:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
200035cc:	68bb      	ldr	r3, [r7, #8]
200035ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
200035d2:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
200035d4:	68bb      	ldr	r3, [r7, #8]
200035d6:	f04f 0202 	mov.w	r2, #2
200035da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
200035de:	68bb      	ldr	r3, [r7, #8]
200035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200035e2:	f103 0201 	add.w	r2, r3, #1
200035e6:	68bb      	ldr	r3, [r7, #8]
200035e8:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
200035ea:	7bfb      	ldrb	r3, [r7, #15]
200035ec:	2b01      	cmp	r3, #1
200035ee:	d165      	bne.n	200036bc <vTaskNotifyGiveFromISR+0x138>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
200035f0:	68bb      	ldr	r3, [r7, #8]
200035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200035f4:	2b00      	cmp	r3, #0
200035f6:	d009      	beq.n	2000360c <vTaskNotifyGiveFromISR+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200035f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200035fc:	f383 8811 	msr	BASEPRI, r3
20003600:	f3bf 8f6f 	isb	sy
20003604:	f3bf 8f4f 	dsb	sy
20003608:	623b      	str	r3, [r7, #32]
2000360a:	e7fe      	b.n	2000360a <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000360c:	f248 632c 	movw	r3, #34348	; 0x862c
20003610:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003614:	681b      	ldr	r3, [r3, #0]
20003616:	2b00      	cmp	r3, #0
20003618:	d12d      	bne.n	20003676 <vTaskNotifyGiveFromISR+0xf2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2000361a:	68bb      	ldr	r3, [r7, #8]
2000361c:	f103 0304 	add.w	r3, r3, #4
20003620:	4618      	mov	r0, r3
20003622:	f7fd ff83 	bl	2000152c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20003626:	68bb      	ldr	r3, [r7, #8]
20003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000362a:	f04f 0201 	mov.w	r2, #1
2000362e:	fa02 f203 	lsl.w	r2, r2, r3
20003632:	f248 630c 	movw	r3, #34316	; 0x860c
20003636:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000363a:	681b      	ldr	r3, [r3, #0]
2000363c:	ea42 0203 	orr.w	r2, r2, r3
20003640:	f248 630c 	movw	r3, #34316	; 0x860c
20003644:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003648:	601a      	str	r2, [r3, #0]
2000364a:	68bb      	ldr	r3, [r7, #8]
2000364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000364e:	4613      	mov	r3, r2
20003650:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003654:	4413      	add	r3, r2
20003656:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000365a:	461a      	mov	r2, r3
2000365c:	f248 5330 	movw	r3, #34096	; 0x8530
20003660:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003664:	441a      	add	r2, r3
20003666:	68bb      	ldr	r3, [r7, #8]
20003668:	f103 0304 	add.w	r3, r3, #4
2000366c:	4610      	mov	r0, r2
2000366e:	4619      	mov	r1, r3
20003670:	f7fd fefe 	bl	20001470 <vListInsertEnd>
20003674:	e009      	b.n	2000368a <vTaskNotifyGiveFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
20003676:	68bb      	ldr	r3, [r7, #8]
20003678:	f103 0318 	add.w	r3, r3, #24
2000367c:	f248 50c4 	movw	r0, #34244	; 0x85c4
20003680:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003684:	4619      	mov	r1, r3
20003686:	f7fd fef3 	bl	20001470 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2000368a:	68bb      	ldr	r3, [r7, #8]
2000368c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000368e:	f248 532c 	movw	r3, #34092	; 0x852c
20003692:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003696:	681b      	ldr	r3, [r3, #0]
20003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000369a:	429a      	cmp	r2, r3
2000369c:	d90e      	bls.n	200036bc <vTaskNotifyGiveFromISR+0x138>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
2000369e:	683b      	ldr	r3, [r7, #0]
200036a0:	2b00      	cmp	r3, #0
200036a2:	d004      	beq.n	200036ae <vTaskNotifyGiveFromISR+0x12a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
200036a4:	683b      	ldr	r3, [r7, #0]
200036a6:	f04f 0201 	mov.w	r2, #1
200036aa:	601a      	str	r2, [r3, #0]
200036ac:	e006      	b.n	200036bc <vTaskNotifyGiveFromISR+0x138>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
200036ae:	f248 6318 	movw	r3, #34328	; 0x8618
200036b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036b6:	f04f 0201 	mov.w	r2, #1
200036ba:	601a      	str	r2, [r3, #0]
200036bc:	693b      	ldr	r3, [r7, #16]
200036be:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200036c2:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
200036c6:	f107 0728 	add.w	r7, r7, #40	; 0x28
200036ca:	46bd      	mov	sp, r7
200036cc:	bd80      	pop	{r7, pc}
200036ce:	bf00      	nop

200036d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
200036d0:	b580      	push	{r7, lr}
200036d2:	b084      	sub	sp, #16
200036d4:	af00      	add	r7, sp, #0
200036d6:	6078      	str	r0, [r7, #4]
200036d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
200036da:	f248 6308 	movw	r3, #34312	; 0x8608
200036de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036e2:	681b      	ldr	r3, [r3, #0]
200036e4:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200036e6:	f248 532c 	movw	r3, #34092	; 0x852c
200036ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036ee:	681b      	ldr	r3, [r3, #0]
200036f0:	f103 0304 	add.w	r3, r3, #4
200036f4:	4618      	mov	r0, r3
200036f6:	f7fd ff19 	bl	2000152c <uxListRemove>
200036fa:	4603      	mov	r3, r0
200036fc:	2b00      	cmp	r3, #0
200036fe:	d117      	bne.n	20003730 <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
20003700:	f248 532c 	movw	r3, #34092	; 0x852c
20003704:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003708:	681b      	ldr	r3, [r3, #0]
2000370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000370c:	f04f 0201 	mov.w	r2, #1
20003710:	fa02 f303 	lsl.w	r3, r2, r3
20003714:	ea6f 0203 	mvn.w	r2, r3
20003718:	f248 630c 	movw	r3, #34316	; 0x860c
2000371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003720:	681b      	ldr	r3, [r3, #0]
20003722:	ea02 0203 	and.w	r2, r2, r3
20003726:	f248 630c 	movw	r3, #34316	; 0x860c
2000372a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000372e:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003730:	687b      	ldr	r3, [r7, #4]
20003732:	f1b3 3fff 	cmp.w	r3, #4294967295
20003736:	d111      	bne.n	2000375c <prvAddCurrentTaskToDelayedList+0x8c>
20003738:	683b      	ldr	r3, [r7, #0]
2000373a:	2b00      	cmp	r3, #0
2000373c:	d00e      	beq.n	2000375c <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
2000373e:	f248 532c 	movw	r3, #34092	; 0x852c
20003742:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003746:	681b      	ldr	r3, [r3, #0]
20003748:	f103 0304 	add.w	r3, r3, #4
2000374c:	f248 50f0 	movw	r0, #34288	; 0x85f0
20003750:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003754:	4619      	mov	r1, r3
20003756:	f7fd fe8b 	bl	20001470 <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
2000375a:	e03d      	b.n	200037d8 <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
2000375c:	68fa      	ldr	r2, [r7, #12]
2000375e:	687b      	ldr	r3, [r7, #4]
20003760:	4413      	add	r3, r2
20003762:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
20003764:	f248 532c 	movw	r3, #34092	; 0x852c
20003768:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000376c:	681b      	ldr	r3, [r3, #0]
2000376e:	68ba      	ldr	r2, [r7, #8]
20003770:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
20003772:	68ba      	ldr	r2, [r7, #8]
20003774:	68fb      	ldr	r3, [r7, #12]
20003776:	429a      	cmp	r2, r3
20003778:	d210      	bcs.n	2000379c <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
2000377a:	f248 53c0 	movw	r3, #34240	; 0x85c0
2000377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003782:	681a      	ldr	r2, [r3, #0]
20003784:	f248 532c 	movw	r3, #34092	; 0x852c
20003788:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000378c:	681b      	ldr	r3, [r3, #0]
2000378e:	f103 0304 	add.w	r3, r3, #4
20003792:	4610      	mov	r0, r2
20003794:	4619      	mov	r1, r3
20003796:	f7fd fe8f 	bl	200014b8 <vListInsert>
2000379a:	e01d      	b.n	200037d8 <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
2000379c:	f248 53bc 	movw	r3, #34236	; 0x85bc
200037a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037a4:	681a      	ldr	r2, [r3, #0]
200037a6:	f248 532c 	movw	r3, #34092	; 0x852c
200037aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037ae:	681b      	ldr	r3, [r3, #0]
200037b0:	f103 0304 	add.w	r3, r3, #4
200037b4:	4610      	mov	r0, r2
200037b6:	4619      	mov	r1, r3
200037b8:	f7fd fe7e 	bl	200014b8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
200037bc:	f248 6324 	movw	r3, #34340	; 0x8624
200037c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037c4:	681b      	ldr	r3, [r3, #0]
200037c6:	68ba      	ldr	r2, [r7, #8]
200037c8:	429a      	cmp	r2, r3
200037ca:	d205      	bcs.n	200037d8 <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
200037cc:	f248 6324 	movw	r3, #34340	; 0x8624
200037d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037d4:	68ba      	ldr	r2, [r7, #8]
200037d6:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
200037d8:	f107 0710 	add.w	r7, r7, #16
200037dc:	46bd      	mov	sp, r7
200037de:	bd80      	pop	{r7, pc}

200037e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
200037e0:	b580      	push	{r7, lr}
200037e2:	b084      	sub	sp, #16
200037e4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
200037e6:	f04f 0300 	mov.w	r3, #0
200037ea:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
200037ec:	f000 fb72 	bl	20003ed4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
200037f0:	f248 6368 	movw	r3, #34408	; 0x8668
200037f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037f8:	681b      	ldr	r3, [r3, #0]
200037fa:	2b00      	cmp	r3, #0
200037fc:	d017      	beq.n	2000382e <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
200037fe:	f04f 0302 	mov.w	r3, #2
20003802:	9300      	str	r3, [sp, #0]
20003804:	f248 636c 	movw	r3, #34412	; 0x866c
20003808:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000380c:	9301      	str	r3, [sp, #4]
2000380e:	f643 2051 	movw	r0, #14929	; 0x3a51
20003812:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003816:	f248 4158 	movw	r1, #33880	; 0x8458
2000381a:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000381e:	f04f 02a0 	mov.w	r2, #160	; 0xa0
20003822:	f04f 0300 	mov.w	r3, #0
20003826:	f7fe fc15 	bl	20002054 <xTaskCreate>
2000382a:	4603      	mov	r3, r0
2000382c:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
2000382e:	683b      	ldr	r3, [r7, #0]
20003830:	2b00      	cmp	r3, #0
20003832:	d109      	bne.n	20003848 <xTimerCreateTimerTask+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20003834:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003838:	f383 8811 	msr	BASEPRI, r3
2000383c:	f3bf 8f6f 	isb	sy
20003840:	f3bf 8f4f 	dsb	sy
20003844:	607b      	str	r3, [r7, #4]
20003846:	e7fe      	b.n	20003846 <xTimerCreateTimerTask+0x66>
	return xReturn;
20003848:	683b      	ldr	r3, [r7, #0]
}
2000384a:	4618      	mov	r0, r3
2000384c:	f107 0708 	add.w	r7, r7, #8
20003850:	46bd      	mov	sp, r7
20003852:	bd80      	pop	{r7, pc}

20003854 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20003854:	b580      	push	{r7, lr}
20003856:	b088      	sub	sp, #32
20003858:	af02      	add	r7, sp, #8
2000385a:	60f8      	str	r0, [r7, #12]
2000385c:	60b9      	str	r1, [r7, #8]
2000385e:	607a      	str	r2, [r7, #4]
20003860:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
20003862:	f04f 002c 	mov.w	r0, #44	; 0x2c
20003866:	f000 fb8f 	bl	20003f88 <pvPortMalloc>
2000386a:	4603      	mov	r3, r0
2000386c:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
2000386e:	697b      	ldr	r3, [r7, #20]
20003870:	2b00      	cmp	r3, #0
20003872:	d009      	beq.n	20003888 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
20003874:	6a3b      	ldr	r3, [r7, #32]
20003876:	9300      	str	r3, [sp, #0]
20003878:	697b      	ldr	r3, [r7, #20]
2000387a:	9301      	str	r3, [sp, #4]
2000387c:	68f8      	ldr	r0, [r7, #12]
2000387e:	68b9      	ldr	r1, [r7, #8]
20003880:	687a      	ldr	r2, [r7, #4]
20003882:	683b      	ldr	r3, [r7, #0]
20003884:	f000 f806 	bl	20003894 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
20003888:	697b      	ldr	r3, [r7, #20]
	}
2000388a:	4618      	mov	r0, r3
2000388c:	f107 0718 	add.w	r7, r7, #24
20003890:	46bd      	mov	sp, r7
20003892:	bd80      	pop	{r7, pc}

20003894 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
20003894:	b580      	push	{r7, lr}
20003896:	b086      	sub	sp, #24
20003898:	af00      	add	r7, sp, #0
2000389a:	60f8      	str	r0, [r7, #12]
2000389c:	60b9      	str	r1, [r7, #8]
2000389e:	607a      	str	r2, [r7, #4]
200038a0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
200038a2:	68bb      	ldr	r3, [r7, #8]
200038a4:	2b00      	cmp	r3, #0
200038a6:	d109      	bne.n	200038bc <prvInitialiseNewTimer+0x28>
200038a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200038ac:	f383 8811 	msr	BASEPRI, r3
200038b0:	f3bf 8f6f 	isb	sy
200038b4:	f3bf 8f4f 	dsb	sy
200038b8:	617b      	str	r3, [r7, #20]
200038ba:	e7fe      	b.n	200038ba <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
200038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038be:	2b00      	cmp	r3, #0
200038c0:	d016      	beq.n	200038f0 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
200038c2:	f000 fb07 	bl	20003ed4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
200038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038c8:	68fa      	ldr	r2, [r7, #12]
200038ca:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
200038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038ce:	68ba      	ldr	r2, [r7, #8]
200038d0:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
200038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038d4:	687a      	ldr	r2, [r7, #4]
200038d6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
200038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038da:	683a      	ldr	r2, [r7, #0]
200038dc:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
200038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038e0:	6a3a      	ldr	r2, [r7, #32]
200038e2:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
200038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038e6:	f103 0304 	add.w	r3, r3, #4
200038ea:	4618      	mov	r0, r3
200038ec:	f7fd fdb2 	bl	20001454 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
200038f0:	f107 0718 	add.w	r7, r7, #24
200038f4:	46bd      	mov	sp, r7
200038f6:	bd80      	pop	{r7, pc}

200038f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
200038f8:	b580      	push	{r7, lr}
200038fa:	b08a      	sub	sp, #40	; 0x28
200038fc:	af00      	add	r7, sp, #0
200038fe:	60f8      	str	r0, [r7, #12]
20003900:	60b9      	str	r1, [r7, #8]
20003902:	607a      	str	r2, [r7, #4]
20003904:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
20003906:	f04f 0300 	mov.w	r3, #0
2000390a:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
2000390c:	68fb      	ldr	r3, [r7, #12]
2000390e:	2b00      	cmp	r3, #0
20003910:	d109      	bne.n	20003926 <xTimerGenericCommand+0x2e>
20003912:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003916:	f383 8811 	msr	BASEPRI, r3
2000391a:	f3bf 8f6f 	isb	sy
2000391e:	f3bf 8f4f 	dsb	sy
20003922:	627b      	str	r3, [r7, #36]	; 0x24
20003924:	e7fe      	b.n	20003924 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
20003926:	f248 6368 	movw	r3, #34408	; 0x8668
2000392a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000392e:	681b      	ldr	r3, [r3, #0]
20003930:	2b00      	cmp	r3, #0
20003932:	d040      	beq.n	200039b6 <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
20003934:	68bb      	ldr	r3, [r7, #8]
20003936:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
20003938:	687b      	ldr	r3, [r7, #4]
2000393a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
2000393c:	68fb      	ldr	r3, [r7, #12]
2000393e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20003940:	68bb      	ldr	r3, [r7, #8]
20003942:	2b05      	cmp	r3, #5
20003944:	dc27      	bgt.n	20003996 <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
20003946:	f7ff fbb9 	bl	200030bc <xTaskGetSchedulerState>
2000394a:	4603      	mov	r3, r0
2000394c:	2b02      	cmp	r3, #2
2000394e:	d110      	bne.n	20003972 <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
20003950:	f248 6368 	movw	r3, #34408	; 0x8668
20003954:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003958:	681a      	ldr	r2, [r3, #0]
2000395a:	f107 0310 	add.w	r3, r7, #16
2000395e:	4610      	mov	r0, r2
20003960:	4619      	mov	r1, r3
20003962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20003964:	f04f 0300 	mov.w	r3, #0
20003968:	f7fd ff20 	bl	200017ac <xQueueGenericSend>
2000396c:	4603      	mov	r3, r0
2000396e:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
20003970:	e021      	b.n	200039b6 <xTimerGenericCommand+0xbe>
20003972:	f248 6368 	movw	r3, #34408	; 0x8668
20003976:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000397a:	681a      	ldr	r2, [r3, #0]
2000397c:	f107 0310 	add.w	r3, r7, #16
20003980:	4610      	mov	r0, r2
20003982:	4619      	mov	r1, r3
20003984:	f04f 0200 	mov.w	r2, #0
20003988:	f04f 0300 	mov.w	r3, #0
2000398c:	f7fd ff0e 	bl	200017ac <xQueueGenericSend>
20003990:	4603      	mov	r3, r0
20003992:	623b      	str	r3, [r7, #32]
20003994:	e00f      	b.n	200039b6 <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
20003996:	f248 6368 	movw	r3, #34408	; 0x8668
2000399a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000399e:	681a      	ldr	r2, [r3, #0]
200039a0:	f107 0310 	add.w	r3, r7, #16
200039a4:	4610      	mov	r0, r2
200039a6:	4619      	mov	r1, r3
200039a8:	683a      	ldr	r2, [r7, #0]
200039aa:	f04f 0300 	mov.w	r3, #0
200039ae:	f7fe f815 	bl	200019dc <xQueueGenericSendFromISR>
200039b2:	4603      	mov	r3, r0
200039b4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
200039b6:	6a3b      	ldr	r3, [r7, #32]
}
200039b8:	4618      	mov	r0, r3
200039ba:	f107 0728 	add.w	r7, r7, #40	; 0x28
200039be:	46bd      	mov	sp, r7
200039c0:	bd80      	pop	{r7, pc}
200039c2:	bf00      	nop

200039c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
200039c4:	b580      	push	{r7, lr}
200039c6:	b088      	sub	sp, #32
200039c8:	af02      	add	r7, sp, #8
200039ca:	6078      	str	r0, [r7, #4]
200039cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
200039ce:	f248 6360 	movw	r3, #34400	; 0x8660
200039d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039d6:	681b      	ldr	r3, [r3, #0]
200039d8:	68db      	ldr	r3, [r3, #12]
200039da:	68db      	ldr	r3, [r3, #12]
200039dc:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200039de:	693b      	ldr	r3, [r7, #16]
200039e0:	f103 0304 	add.w	r3, r3, #4
200039e4:	4618      	mov	r0, r3
200039e6:	f7fd fda1 	bl	2000152c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
200039ea:	693b      	ldr	r3, [r7, #16]
200039ec:	69db      	ldr	r3, [r3, #28]
200039ee:	2b01      	cmp	r3, #1
200039f0:	d126      	bne.n	20003a40 <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
200039f2:	693b      	ldr	r3, [r7, #16]
200039f4:	699a      	ldr	r2, [r3, #24]
200039f6:	687b      	ldr	r3, [r7, #4]
200039f8:	4413      	add	r3, r2
200039fa:	6938      	ldr	r0, [r7, #16]
200039fc:	4619      	mov	r1, r3
200039fe:	683a      	ldr	r2, [r7, #0]
20003a00:	687b      	ldr	r3, [r7, #4]
20003a02:	f000 f8df 	bl	20003bc4 <prvInsertTimerInActiveList>
20003a06:	4603      	mov	r3, r0
20003a08:	2b00      	cmp	r3, #0
20003a0a:	d019      	beq.n	20003a40 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003a0c:	f04f 0300 	mov.w	r3, #0
20003a10:	9300      	str	r3, [sp, #0]
20003a12:	6938      	ldr	r0, [r7, #16]
20003a14:	f04f 0100 	mov.w	r1, #0
20003a18:	687a      	ldr	r2, [r7, #4]
20003a1a:	f04f 0300 	mov.w	r3, #0
20003a1e:	f7ff ff6b 	bl	200038f8 <xTimerGenericCommand>
20003a22:	4603      	mov	r3, r0
20003a24:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
20003a26:	68fb      	ldr	r3, [r7, #12]
20003a28:	2b00      	cmp	r3, #0
20003a2a:	d109      	bne.n	20003a40 <prvProcessExpiredTimer+0x7c>
20003a2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003a30:	f383 8811 	msr	BASEPRI, r3
20003a34:	f3bf 8f6f 	isb	sy
20003a38:	f3bf 8f4f 	dsb	sy
20003a3c:	617b      	str	r3, [r7, #20]
20003a3e:	e7fe      	b.n	20003a3e <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003a40:	693b      	ldr	r3, [r7, #16]
20003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003a44:	6938      	ldr	r0, [r7, #16]
20003a46:	4798      	blx	r3
}
20003a48:	f107 0718 	add.w	r7, r7, #24
20003a4c:	46bd      	mov	sp, r7
20003a4e:	bd80      	pop	{r7, pc}

20003a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
20003a50:	b580      	push	{r7, lr}
20003a52:	b084      	sub	sp, #16
20003a54:	af00      	add	r7, sp, #0
20003a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20003a58:	f107 0308 	add.w	r3, r7, #8
20003a5c:	4618      	mov	r0, r3
20003a5e:	f000 f861 	bl	20003b24 <prvGetNextExpireTime>
20003a62:	4603      	mov	r3, r0
20003a64:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
20003a66:	68bb      	ldr	r3, [r7, #8]
20003a68:	68f8      	ldr	r0, [r7, #12]
20003a6a:	4619      	mov	r1, r3
20003a6c:	f000 f804 	bl	20003a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
20003a70:	f000 f8f4 	bl	20003c5c <prvProcessReceivedCommands>
	}
20003a74:	e7f0      	b.n	20003a58 <prvTimerTask+0x8>
20003a76:	bf00      	nop

20003a78 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20003a78:	b580      	push	{r7, lr}
20003a7a:	b084      	sub	sp, #16
20003a7c:	af00      	add	r7, sp, #0
20003a7e:	6078      	str	r0, [r7, #4]
20003a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
20003a82:	f7fe fdf3 	bl	2000266c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003a86:	f107 0308 	add.w	r3, r7, #8
20003a8a:	4618      	mov	r0, r3
20003a8c:	f000 f872 	bl	20003b74 <prvSampleTimeNow>
20003a90:	4603      	mov	r3, r0
20003a92:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
20003a94:	68bb      	ldr	r3, [r7, #8]
20003a96:	2b00      	cmp	r3, #0
20003a98:	d13b      	bne.n	20003b12 <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003a9a:	683b      	ldr	r3, [r7, #0]
20003a9c:	2b00      	cmp	r3, #0
20003a9e:	d10b      	bne.n	20003ab8 <prvProcessTimerOrBlockTask+0x40>
20003aa0:	687a      	ldr	r2, [r7, #4]
20003aa2:	68fb      	ldr	r3, [r7, #12]
20003aa4:	429a      	cmp	r2, r3
20003aa6:	d807      	bhi.n	20003ab8 <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
20003aa8:	f7fe fdf2 	bl	20002690 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
20003aac:	6878      	ldr	r0, [r7, #4]
20003aae:	68f9      	ldr	r1, [r7, #12]
20003ab0:	f7ff ff88 	bl	200039c4 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003ab4:	bf00      	nop
20003ab6:	e030      	b.n	20003b1a <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
20003ab8:	683b      	ldr	r3, [r7, #0]
20003aba:	2b00      	cmp	r3, #0
20003abc:	d00a      	beq.n	20003ad4 <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
20003abe:	f248 6364 	movw	r3, #34404	; 0x8664
20003ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ac6:	681b      	ldr	r3, [r3, #0]
20003ac8:	681b      	ldr	r3, [r3, #0]
20003aca:	2b00      	cmp	r3, #0
20003acc:	bf14      	ite	ne
20003ace:	2300      	movne	r3, #0
20003ad0:	2301      	moveq	r3, #1
20003ad2:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
20003ad4:	f248 6368 	movw	r3, #34408	; 0x8668
20003ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003adc:	681a      	ldr	r2, [r3, #0]
20003ade:	6879      	ldr	r1, [r7, #4]
20003ae0:	68fb      	ldr	r3, [r7, #12]
20003ae2:	ebc3 0301 	rsb	r3, r3, r1
20003ae6:	4610      	mov	r0, r2
20003ae8:	4619      	mov	r1, r3
20003aea:	683a      	ldr	r2, [r7, #0]
20003aec:	f7fe fa78 	bl	20001fe0 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
20003af0:	f7fe fdce 	bl	20002690 <xTaskResumeAll>
20003af4:	4603      	mov	r3, r0
20003af6:	2b00      	cmp	r3, #0
20003af8:	d10e      	bne.n	20003b18 <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003afa:	f64e 5304 	movw	r3, #60676	; 0xed04
20003afe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003b06:	601a      	str	r2, [r3, #0]
20003b08:	f3bf 8f4f 	dsb	sy
20003b0c:	f3bf 8f6f 	isb	sy
20003b10:	e003      	b.n	20003b1a <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
20003b12:	f7fe fdbd 	bl	20002690 <xTaskResumeAll>
20003b16:	e000      	b.n	20003b1a <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003b18:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
20003b1a:	f107 0710 	add.w	r7, r7, #16
20003b1e:	46bd      	mov	sp, r7
20003b20:	bd80      	pop	{r7, pc}
20003b22:	bf00      	nop

20003b24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
20003b24:	b480      	push	{r7}
20003b26:	b085      	sub	sp, #20
20003b28:	af00      	add	r7, sp, #0
20003b2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
20003b2c:	f248 6360 	movw	r3, #34400	; 0x8660
20003b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b34:	681b      	ldr	r3, [r3, #0]
20003b36:	681b      	ldr	r3, [r3, #0]
20003b38:	2b00      	cmp	r3, #0
20003b3a:	bf14      	ite	ne
20003b3c:	2200      	movne	r2, #0
20003b3e:	2201      	moveq	r2, #1
20003b40:	687b      	ldr	r3, [r7, #4]
20003b42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20003b44:	687b      	ldr	r3, [r7, #4]
20003b46:	681b      	ldr	r3, [r3, #0]
20003b48:	2b00      	cmp	r3, #0
20003b4a:	d108      	bne.n	20003b5e <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003b4c:	f248 6360 	movw	r3, #34400	; 0x8660
20003b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b54:	681b      	ldr	r3, [r3, #0]
20003b56:	68db      	ldr	r3, [r3, #12]
20003b58:	681b      	ldr	r3, [r3, #0]
20003b5a:	60fb      	str	r3, [r7, #12]
20003b5c:	e002      	b.n	20003b64 <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003b5e:	f04f 0300 	mov.w	r3, #0
20003b62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
20003b64:	68fb      	ldr	r3, [r7, #12]
}
20003b66:	4618      	mov	r0, r3
20003b68:	f107 0714 	add.w	r7, r7, #20
20003b6c:	46bd      	mov	sp, r7
20003b6e:	bc80      	pop	{r7}
20003b70:	4770      	bx	lr
20003b72:	bf00      	nop

20003b74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003b74:	b580      	push	{r7, lr}
20003b76:	b084      	sub	sp, #16
20003b78:	af00      	add	r7, sp, #0
20003b7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003b7c:	f7fe fe58 	bl	20002830 <xTaskGetTickCount>
20003b80:	4603      	mov	r3, r0
20003b82:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
20003b84:	f248 6370 	movw	r3, #34416	; 0x8670
20003b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b8c:	681b      	ldr	r3, [r3, #0]
20003b8e:	68fa      	ldr	r2, [r7, #12]
20003b90:	429a      	cmp	r2, r3
20003b92:	d206      	bcs.n	20003ba2 <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
20003b94:	f000 f924 	bl	20003de0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
20003b98:	687b      	ldr	r3, [r7, #4]
20003b9a:	f04f 0201 	mov.w	r2, #1
20003b9e:	601a      	str	r2, [r3, #0]
20003ba0:	e003      	b.n	20003baa <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
20003ba2:	687b      	ldr	r3, [r7, #4]
20003ba4:	f04f 0200 	mov.w	r2, #0
20003ba8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
20003baa:	f248 6370 	movw	r3, #34416	; 0x8670
20003bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bb2:	68fa      	ldr	r2, [r7, #12]
20003bb4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
20003bb6:	68fb      	ldr	r3, [r7, #12]
}
20003bb8:	4618      	mov	r0, r3
20003bba:	f107 0710 	add.w	r7, r7, #16
20003bbe:	46bd      	mov	sp, r7
20003bc0:	bd80      	pop	{r7, pc}
20003bc2:	bf00      	nop

20003bc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20003bc4:	b580      	push	{r7, lr}
20003bc6:	b086      	sub	sp, #24
20003bc8:	af00      	add	r7, sp, #0
20003bca:	60f8      	str	r0, [r7, #12]
20003bcc:	60b9      	str	r1, [r7, #8]
20003bce:	607a      	str	r2, [r7, #4]
20003bd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
20003bd2:	f04f 0300 	mov.w	r3, #0
20003bd6:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20003bd8:	68fb      	ldr	r3, [r7, #12]
20003bda:	68ba      	ldr	r2, [r7, #8]
20003bdc:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003bde:	68fb      	ldr	r3, [r7, #12]
20003be0:	68fa      	ldr	r2, [r7, #12]
20003be2:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
20003be4:	68ba      	ldr	r2, [r7, #8]
20003be6:	687b      	ldr	r3, [r7, #4]
20003be8:	429a      	cmp	r2, r3
20003bea:	d818      	bhi.n	20003c1e <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003bec:	687a      	ldr	r2, [r7, #4]
20003bee:	683b      	ldr	r3, [r7, #0]
20003bf0:	ebc3 0202 	rsb	r2, r3, r2
20003bf4:	68fb      	ldr	r3, [r7, #12]
20003bf6:	699b      	ldr	r3, [r3, #24]
20003bf8:	429a      	cmp	r2, r3
20003bfa:	d303      	bcc.n	20003c04 <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003bfc:	f04f 0301 	mov.w	r3, #1
20003c00:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
20003c02:	e024      	b.n	20003c4e <prvInsertTimerInActiveList+0x8a>
20003c04:	f248 6364 	movw	r3, #34404	; 0x8664
20003c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c0c:	681a      	ldr	r2, [r3, #0]
20003c0e:	68fb      	ldr	r3, [r7, #12]
20003c10:	f103 0304 	add.w	r3, r3, #4
20003c14:	4610      	mov	r0, r2
20003c16:	4619      	mov	r1, r3
20003c18:	f7fd fc4e 	bl	200014b8 <vListInsert>
20003c1c:	e017      	b.n	20003c4e <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003c1e:	687a      	ldr	r2, [r7, #4]
20003c20:	683b      	ldr	r3, [r7, #0]
20003c22:	429a      	cmp	r2, r3
20003c24:	d207      	bcs.n	20003c36 <prvInsertTimerInActiveList+0x72>
20003c26:	68ba      	ldr	r2, [r7, #8]
20003c28:	683b      	ldr	r3, [r7, #0]
20003c2a:	429a      	cmp	r2, r3
20003c2c:	d303      	bcc.n	20003c36 <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
20003c2e:	f04f 0301 	mov.w	r3, #1
20003c32:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003c34:	e00b      	b.n	20003c4e <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003c36:	f248 6360 	movw	r3, #34400	; 0x8660
20003c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c3e:	681a      	ldr	r2, [r3, #0]
20003c40:	68fb      	ldr	r3, [r7, #12]
20003c42:	f103 0304 	add.w	r3, r3, #4
20003c46:	4610      	mov	r0, r2
20003c48:	4619      	mov	r1, r3
20003c4a:	f7fd fc35 	bl	200014b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
20003c4e:	697b      	ldr	r3, [r7, #20]
}
20003c50:	4618      	mov	r0, r3
20003c52:	f107 0718 	add.w	r7, r7, #24
20003c56:	46bd      	mov	sp, r7
20003c58:	bd80      	pop	{r7, pc}
20003c5a:	bf00      	nop

20003c5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20003c5c:	b580      	push	{r7, lr}
20003c5e:	b08e      	sub	sp, #56	; 0x38
20003c60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003c62:	e0a5      	b.n	20003db0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20003c64:	687b      	ldr	r3, [r7, #4]
20003c66:	2b00      	cmp	r3, #0
20003c68:	da1a      	bge.n	20003ca0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
20003c6a:	f107 0304 	add.w	r3, r7, #4
20003c6e:	f103 0304 	add.w	r3, r3, #4
20003c72:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003c74:	6a3b      	ldr	r3, [r7, #32]
20003c76:	2b00      	cmp	r3, #0
20003c78:	d109      	bne.n	20003c8e <prvProcessReceivedCommands+0x32>
20003c7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c7e:	f383 8811 	msr	BASEPRI, r3
20003c82:	f3bf 8f6f 	isb	sy
20003c86:	f3bf 8f4f 	dsb	sy
20003c8a:	627b      	str	r3, [r7, #36]	; 0x24
20003c8c:	e7fe      	b.n	20003c8c <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
20003c8e:	6a3b      	ldr	r3, [r7, #32]
20003c90:	681b      	ldr	r3, [r3, #0]
20003c92:	6a3a      	ldr	r2, [r7, #32]
20003c94:	6851      	ldr	r1, [r2, #4]
20003c96:	6a3a      	ldr	r2, [r7, #32]
20003c98:	6892      	ldr	r2, [r2, #8]
20003c9a:	4608      	mov	r0, r1
20003c9c:	4611      	mov	r1, r2
20003c9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
20003ca0:	687b      	ldr	r3, [r7, #4]
20003ca2:	2b00      	cmp	r3, #0
20003ca4:	f2c0 8084 	blt.w	20003db0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
20003ca8:	68fb      	ldr	r3, [r7, #12]
20003caa:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
20003cac:	697b      	ldr	r3, [r7, #20]
20003cae:	695b      	ldr	r3, [r3, #20]
20003cb0:	2b00      	cmp	r3, #0
20003cb2:	d005      	beq.n	20003cc0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003cb4:	697b      	ldr	r3, [r7, #20]
20003cb6:	f103 0304 	add.w	r3, r3, #4
20003cba:	4618      	mov	r0, r3
20003cbc:	f7fd fc36 	bl	2000152c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003cc0:	463b      	mov	r3, r7
20003cc2:	4618      	mov	r0, r3
20003cc4:	f7ff ff56 	bl	20003b74 <prvSampleTimeNow>
20003cc8:	4603      	mov	r3, r0
20003cca:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
20003ccc:	687b      	ldr	r3, [r7, #4]
20003cce:	2b09      	cmp	r3, #9
20003cd0:	d86e      	bhi.n	20003db0 <prvProcessReceivedCommands+0x154>
20003cd2:	a201      	add	r2, pc, #4	; (adr r2, 20003cd8 <prvProcessReceivedCommands+0x7c>)
20003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003cd8:	20003d01 	.word	0x20003d01
20003cdc:	20003d01 	.word	0x20003d01
20003ce0:	20003d01 	.word	0x20003d01
20003ce4:	20003db1 	.word	0x20003db1
20003ce8:	20003d67 	.word	0x20003d67
20003cec:	20003d9f 	.word	0x20003d9f
20003cf0:	20003d01 	.word	0x20003d01
20003cf4:	20003d01 	.word	0x20003d01
20003cf8:	20003db1 	.word	0x20003db1
20003cfc:	20003d67 	.word	0x20003d67
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003d00:	68ba      	ldr	r2, [r7, #8]
20003d02:	697b      	ldr	r3, [r7, #20]
20003d04:	699b      	ldr	r3, [r3, #24]
20003d06:	441a      	add	r2, r3
20003d08:	68bb      	ldr	r3, [r7, #8]
20003d0a:	6978      	ldr	r0, [r7, #20]
20003d0c:	4611      	mov	r1, r2
20003d0e:	69fa      	ldr	r2, [r7, #28]
20003d10:	f7ff ff58 	bl	20003bc4 <prvInsertTimerInActiveList>
20003d14:	4603      	mov	r3, r0
20003d16:	2b00      	cmp	r3, #0
20003d18:	d045      	beq.n	20003da6 <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003d1a:	697b      	ldr	r3, [r7, #20]
20003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003d1e:	6978      	ldr	r0, [r7, #20]
20003d20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003d22:	697b      	ldr	r3, [r7, #20]
20003d24:	69db      	ldr	r3, [r3, #28]
20003d26:	2b01      	cmp	r3, #1
20003d28:	d13f      	bne.n	20003daa <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
20003d2a:	68ba      	ldr	r2, [r7, #8]
20003d2c:	697b      	ldr	r3, [r7, #20]
20003d2e:	699b      	ldr	r3, [r3, #24]
20003d30:	4413      	add	r3, r2
20003d32:	f04f 0200 	mov.w	r2, #0
20003d36:	9200      	str	r2, [sp, #0]
20003d38:	6978      	ldr	r0, [r7, #20]
20003d3a:	f04f 0100 	mov.w	r1, #0
20003d3e:	461a      	mov	r2, r3
20003d40:	f04f 0300 	mov.w	r3, #0
20003d44:	f7ff fdd8 	bl	200038f8 <xTimerGenericCommand>
20003d48:	4603      	mov	r3, r0
20003d4a:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
20003d4c:	69bb      	ldr	r3, [r7, #24]
20003d4e:	2b00      	cmp	r3, #0
20003d50:	d12d      	bne.n	20003dae <prvProcessReceivedCommands+0x152>
20003d52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d56:	f383 8811 	msr	BASEPRI, r3
20003d5a:	f3bf 8f6f 	isb	sy
20003d5e:	f3bf 8f4f 	dsb	sy
20003d62:	62bb      	str	r3, [r7, #40]	; 0x28
20003d64:	e7fe      	b.n	20003d64 <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20003d66:	68ba      	ldr	r2, [r7, #8]
20003d68:	697b      	ldr	r3, [r7, #20]
20003d6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003d6c:	697b      	ldr	r3, [r7, #20]
20003d6e:	699b      	ldr	r3, [r3, #24]
20003d70:	2b00      	cmp	r3, #0
20003d72:	d109      	bne.n	20003d88 <prvProcessReceivedCommands+0x12c>
20003d74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d78:	f383 8811 	msr	BASEPRI, r3
20003d7c:	f3bf 8f6f 	isb	sy
20003d80:	f3bf 8f4f 	dsb	sy
20003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
20003d86:	e7fe      	b.n	20003d86 <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
20003d88:	697b      	ldr	r3, [r7, #20]
20003d8a:	699a      	ldr	r2, [r3, #24]
20003d8c:	69fb      	ldr	r3, [r7, #28]
20003d8e:	4413      	add	r3, r2
20003d90:	6978      	ldr	r0, [r7, #20]
20003d92:	4619      	mov	r1, r3
20003d94:	69fa      	ldr	r2, [r7, #28]
20003d96:	69fb      	ldr	r3, [r7, #28]
20003d98:	f7ff ff14 	bl	20003bc4 <prvInsertTimerInActiveList>
					break;
20003d9c:	e008      	b.n	20003db0 <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
20003d9e:	6978      	ldr	r0, [r7, #20]
20003da0:	f000 f9ee 	bl	20004180 <vPortFree>
20003da4:	e004      	b.n	20003db0 <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
20003da6:	bf00      	nop
20003da8:	e002      	b.n	20003db0 <prvProcessReceivedCommands+0x154>
20003daa:	bf00      	nop
20003dac:	e000      	b.n	20003db0 <prvProcessReceivedCommands+0x154>
20003dae:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003db0:	f248 6368 	movw	r3, #34408	; 0x8668
20003db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003db8:	681a      	ldr	r2, [r3, #0]
20003dba:	f107 0304 	add.w	r3, r7, #4
20003dbe:	4610      	mov	r0, r2
20003dc0:	4619      	mov	r1, r3
20003dc2:	f04f 0200 	mov.w	r2, #0
20003dc6:	f04f 0300 	mov.w	r3, #0
20003dca:	f7fd fea9 	bl	20001b20 <xQueueGenericReceive>
20003dce:	4603      	mov	r3, r0
20003dd0:	2b00      	cmp	r3, #0
20003dd2:	f47f af47 	bne.w	20003c64 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
20003dd6:	f107 0730 	add.w	r7, r7, #48	; 0x30
20003dda:	46bd      	mov	sp, r7
20003ddc:	bd80      	pop	{r7, pc}
20003dde:	bf00      	nop

20003de0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003de0:	b580      	push	{r7, lr}
20003de2:	b088      	sub	sp, #32
20003de4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003de6:	e053      	b.n	20003e90 <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003de8:	f248 6360 	movw	r3, #34400	; 0x8660
20003dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003df0:	681b      	ldr	r3, [r3, #0]
20003df2:	68db      	ldr	r3, [r3, #12]
20003df4:	681b      	ldr	r3, [r3, #0]
20003df6:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003df8:	f248 6360 	movw	r3, #34400	; 0x8660
20003dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e00:	681b      	ldr	r3, [r3, #0]
20003e02:	68db      	ldr	r3, [r3, #12]
20003e04:	68db      	ldr	r3, [r3, #12]
20003e06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003e08:	68fb      	ldr	r3, [r7, #12]
20003e0a:	f103 0304 	add.w	r3, r3, #4
20003e0e:	4618      	mov	r0, r3
20003e10:	f7fd fb8c 	bl	2000152c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003e14:	68fb      	ldr	r3, [r7, #12]
20003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003e18:	68f8      	ldr	r0, [r7, #12]
20003e1a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003e1c:	68fb      	ldr	r3, [r7, #12]
20003e1e:	69db      	ldr	r3, [r3, #28]
20003e20:	2b01      	cmp	r3, #1
20003e22:	d135      	bne.n	20003e90 <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003e24:	68fb      	ldr	r3, [r7, #12]
20003e26:	699a      	ldr	r2, [r3, #24]
20003e28:	683b      	ldr	r3, [r7, #0]
20003e2a:	4413      	add	r3, r2
20003e2c:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
20003e2e:	687a      	ldr	r2, [r7, #4]
20003e30:	683b      	ldr	r3, [r7, #0]
20003e32:	429a      	cmp	r2, r3
20003e34:	d912      	bls.n	20003e5c <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20003e36:	68fb      	ldr	r3, [r7, #12]
20003e38:	687a      	ldr	r2, [r7, #4]
20003e3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003e3c:	68fb      	ldr	r3, [r7, #12]
20003e3e:	68fa      	ldr	r2, [r7, #12]
20003e40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003e42:	f248 6360 	movw	r3, #34400	; 0x8660
20003e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e4a:	681a      	ldr	r2, [r3, #0]
20003e4c:	68fb      	ldr	r3, [r7, #12]
20003e4e:	f103 0304 	add.w	r3, r3, #4
20003e52:	4610      	mov	r0, r2
20003e54:	4619      	mov	r1, r3
20003e56:	f7fd fb2f 	bl	200014b8 <vListInsert>
20003e5a:	e019      	b.n	20003e90 <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003e5c:	f04f 0300 	mov.w	r3, #0
20003e60:	9300      	str	r3, [sp, #0]
20003e62:	68f8      	ldr	r0, [r7, #12]
20003e64:	f04f 0100 	mov.w	r1, #0
20003e68:	683a      	ldr	r2, [r7, #0]
20003e6a:	f04f 0300 	mov.w	r3, #0
20003e6e:	f7ff fd43 	bl	200038f8 <xTimerGenericCommand>
20003e72:	4603      	mov	r3, r0
20003e74:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
20003e76:	693b      	ldr	r3, [r7, #16]
20003e78:	2b00      	cmp	r3, #0
20003e7a:	d109      	bne.n	20003e90 <prvSwitchTimerLists+0xb0>
20003e7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003e80:	f383 8811 	msr	BASEPRI, r3
20003e84:	f3bf 8f6f 	isb	sy
20003e88:	f3bf 8f4f 	dsb	sy
20003e8c:	617b      	str	r3, [r7, #20]
20003e8e:	e7fe      	b.n	20003e8e <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003e90:	f248 6360 	movw	r3, #34400	; 0x8660
20003e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e98:	681b      	ldr	r3, [r3, #0]
20003e9a:	681b      	ldr	r3, [r3, #0]
20003e9c:	2b00      	cmp	r3, #0
20003e9e:	d1a3      	bne.n	20003de8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
20003ea0:	f248 6360 	movw	r3, #34400	; 0x8660
20003ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ea8:	681b      	ldr	r3, [r3, #0]
20003eaa:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
20003eac:	f248 6364 	movw	r3, #34404	; 0x8664
20003eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003eb4:	681a      	ldr	r2, [r3, #0]
20003eb6:	f248 6360 	movw	r3, #34400	; 0x8660
20003eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ebe:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
20003ec0:	f248 6364 	movw	r3, #34404	; 0x8664
20003ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ec8:	68ba      	ldr	r2, [r7, #8]
20003eca:	601a      	str	r2, [r3, #0]
}
20003ecc:	f107 0718 	add.w	r7, r7, #24
20003ed0:	46bd      	mov	sp, r7
20003ed2:	bd80      	pop	{r7, pc}

20003ed4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003ed4:	b580      	push	{r7, lr}
20003ed6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003ed8:	f000 fba0 	bl	2000461c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
20003edc:	f248 6368 	movw	r3, #34408	; 0x8668
20003ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ee4:	681b      	ldr	r3, [r3, #0]
20003ee6:	2b00      	cmp	r3, #0
20003ee8:	d12b      	bne.n	20003f42 <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
20003eea:	f248 6038 	movw	r0, #34360	; 0x8638
20003eee:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003ef2:	f7fd fa8b 	bl	2000140c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003ef6:	f248 604c 	movw	r0, #34380	; 0x864c
20003efa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003efe:	f7fd fa85 	bl	2000140c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003f02:	f248 6360 	movw	r3, #34400	; 0x8660
20003f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f0a:	f248 6238 	movw	r2, #34360	; 0x8638
20003f0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003f12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003f14:	f248 6364 	movw	r3, #34404	; 0x8664
20003f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f1c:	f248 624c 	movw	r2, #34380	; 0x864c
20003f20:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003f24:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
20003f26:	f04f 0005 	mov.w	r0, #5
20003f2a:	f04f 0110 	mov.w	r1, #16
20003f2e:	f04f 0200 	mov.w	r2, #0
20003f32:	f7fd fb9d 	bl	20001670 <xQueueGenericCreate>
20003f36:	4602      	mov	r2, r0
20003f38:	f248 6368 	movw	r3, #34408	; 0x8668
20003f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f40:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003f42:	f000 fba3 	bl	2000468c <vPortExitCritical>
}
20003f46:	bd80      	pop	{r7, pc}

20003f48 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
20003f48:	b580      	push	{r7, lr}
20003f4a:	b086      	sub	sp, #24
20003f4c:	af00      	add	r7, sp, #0
20003f4e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
20003f50:	687b      	ldr	r3, [r7, #4]
20003f52:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
20003f54:	687b      	ldr	r3, [r7, #4]
20003f56:	2b00      	cmp	r3, #0
20003f58:	d109      	bne.n	20003f6e <pvTimerGetTimerID+0x26>
20003f5a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f5e:	f383 8811 	msr	BASEPRI, r3
20003f62:	f3bf 8f6f 	isb	sy
20003f66:	f3bf 8f4f 	dsb	sy
20003f6a:	617b      	str	r3, [r7, #20]
20003f6c:	e7fe      	b.n	20003f6c <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
20003f6e:	f000 fb55 	bl	2000461c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
20003f72:	68fb      	ldr	r3, [r7, #12]
20003f74:	6a1b      	ldr	r3, [r3, #32]
20003f76:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
20003f78:	f000 fb88 	bl	2000468c <vPortExitCritical>

	return pvReturn;
20003f7c:	693b      	ldr	r3, [r7, #16]
}
20003f7e:	4618      	mov	r0, r3
20003f80:	f107 0718 	add.w	r7, r7, #24
20003f84:	46bd      	mov	sp, r7
20003f86:	bd80      	pop	{r7, pc}

20003f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003f88:	b580      	push	{r7, lr}
20003f8a:	b08a      	sub	sp, #40	; 0x28
20003f8c:	af00      	add	r7, sp, #0
20003f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003f90:	f04f 0300 	mov.w	r3, #0
20003f94:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
20003f96:	f7fe fb69 	bl	2000266c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003f9a:	f64e 0324 	movw	r3, #59428	; 0xe824
20003f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fa2:	681b      	ldr	r3, [r3, #0]
20003fa4:	2b00      	cmp	r3, #0
20003fa6:	d101      	bne.n	20003fac <pvPortMalloc+0x24>
		{
			prvHeapInit();
20003fa8:	f000 f956 	bl	20004258 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003fac:	f64e 0330 	movw	r3, #59440	; 0xe830
20003fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fb4:	681a      	ldr	r2, [r3, #0]
20003fb6:	687b      	ldr	r3, [r7, #4]
20003fb8:	ea02 0303 	and.w	r3, r2, r3
20003fbc:	2b00      	cmp	r3, #0
20003fbe:	f040 80c2 	bne.w	20004146 <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003fc2:	687b      	ldr	r3, [r7, #4]
20003fc4:	2b00      	cmp	r3, #0
20003fc6:	d021      	beq.n	2000400c <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
20003fc8:	f248 4360 	movw	r3, #33888	; 0x8460
20003fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fd0:	681b      	ldr	r3, [r3, #0]
20003fd2:	687a      	ldr	r2, [r7, #4]
20003fd4:	4413      	add	r3, r2
20003fd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003fd8:	687b      	ldr	r3, [r7, #4]
20003fda:	f003 0307 	and.w	r3, r3, #7
20003fde:	2b00      	cmp	r3, #0
20003fe0:	d014      	beq.n	2000400c <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
20003fe2:	687b      	ldr	r3, [r7, #4]
20003fe4:	f023 0307 	bic.w	r3, r3, #7
20003fe8:	f103 0308 	add.w	r3, r3, #8
20003fec:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003fee:	687b      	ldr	r3, [r7, #4]
20003ff0:	f003 0307 	and.w	r3, r3, #7
20003ff4:	2b00      	cmp	r3, #0
20003ff6:	d009      	beq.n	2000400c <pvPortMalloc+0x84>
20003ff8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003ffc:	f383 8811 	msr	BASEPRI, r3
20004000:	f3bf 8f6f 	isb	sy
20004004:	f3bf 8f4f 	dsb	sy
20004008:	61fb      	str	r3, [r7, #28]
2000400a:	e7fe      	b.n	2000400a <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
2000400c:	687b      	ldr	r3, [r7, #4]
2000400e:	2b00      	cmp	r3, #0
20004010:	f000 8099 	beq.w	20004146 <pvPortMalloc+0x1be>
20004014:	f64e 0328 	movw	r3, #59432	; 0xe828
20004018:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000401c:	681b      	ldr	r3, [r3, #0]
2000401e:	687a      	ldr	r2, [r7, #4]
20004020:	429a      	cmp	r2, r3
20004022:	f200 8090 	bhi.w	20004146 <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20004026:	f64e 031c 	movw	r3, #59420	; 0xe81c
2000402a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000402e:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
20004030:	f64e 031c 	movw	r3, #59420	; 0xe81c
20004034:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004038:	681b      	ldr	r3, [r3, #0]
2000403a:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
2000403c:	e004      	b.n	20004048 <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
2000403e:	68fb      	ldr	r3, [r7, #12]
20004040:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
20004042:	68fb      	ldr	r3, [r7, #12]
20004044:	681b      	ldr	r3, [r3, #0]
20004046:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20004048:	68fb      	ldr	r3, [r7, #12]
2000404a:	685a      	ldr	r2, [r3, #4]
2000404c:	687b      	ldr	r3, [r7, #4]
2000404e:	429a      	cmp	r2, r3
20004050:	d203      	bcs.n	2000405a <pvPortMalloc+0xd2>
20004052:	68fb      	ldr	r3, [r7, #12]
20004054:	681b      	ldr	r3, [r3, #0]
20004056:	2b00      	cmp	r3, #0
20004058:	d1f1      	bne.n	2000403e <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
2000405a:	f64e 0324 	movw	r3, #59428	; 0xe824
2000405e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004062:	681b      	ldr	r3, [r3, #0]
20004064:	68fa      	ldr	r2, [r7, #12]
20004066:	429a      	cmp	r2, r3
20004068:	d06d      	beq.n	20004146 <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
2000406a:	693b      	ldr	r3, [r7, #16]
2000406c:	681a      	ldr	r2, [r3, #0]
2000406e:	f248 4360 	movw	r3, #33888	; 0x8460
20004072:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004076:	681b      	ldr	r3, [r3, #0]
20004078:	4413      	add	r3, r2
2000407a:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
2000407c:	68fb      	ldr	r3, [r7, #12]
2000407e:	681a      	ldr	r2, [r3, #0]
20004080:	693b      	ldr	r3, [r7, #16]
20004082:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20004084:	68fb      	ldr	r3, [r7, #12]
20004086:	685a      	ldr	r2, [r3, #4]
20004088:	687b      	ldr	r3, [r7, #4]
2000408a:	ebc3 0202 	rsb	r2, r3, r2
2000408e:	f248 4360 	movw	r3, #33888	; 0x8460
20004092:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004096:	681b      	ldr	r3, [r3, #0]
20004098:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000409c:	429a      	cmp	r2, r3
2000409e:	d91f      	bls.n	200040e0 <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
200040a0:	68fa      	ldr	r2, [r7, #12]
200040a2:	687b      	ldr	r3, [r7, #4]
200040a4:	4413      	add	r3, r2
200040a6:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
200040a8:	697b      	ldr	r3, [r7, #20]
200040aa:	f003 0307 	and.w	r3, r3, #7
200040ae:	2b00      	cmp	r3, #0
200040b0:	d009      	beq.n	200040c6 <pvPortMalloc+0x13e>
200040b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200040b6:	f383 8811 	msr	BASEPRI, r3
200040ba:	f3bf 8f6f 	isb	sy
200040be:	f3bf 8f4f 	dsb	sy
200040c2:	623b      	str	r3, [r7, #32]
200040c4:	e7fe      	b.n	200040c4 <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
200040c6:	68fb      	ldr	r3, [r7, #12]
200040c8:	685a      	ldr	r2, [r3, #4]
200040ca:	687b      	ldr	r3, [r7, #4]
200040cc:	ebc3 0202 	rsb	r2, r3, r2
200040d0:	697b      	ldr	r3, [r7, #20]
200040d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
200040d4:	68fb      	ldr	r3, [r7, #12]
200040d6:	687a      	ldr	r2, [r7, #4]
200040d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
200040da:	6978      	ldr	r0, [r7, #20]
200040dc:	f000 f93e 	bl	2000435c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
200040e0:	f64e 0328 	movw	r3, #59432	; 0xe828
200040e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040e8:	681a      	ldr	r2, [r3, #0]
200040ea:	68fb      	ldr	r3, [r7, #12]
200040ec:	685b      	ldr	r3, [r3, #4]
200040ee:	ebc3 0202 	rsb	r2, r3, r2
200040f2:	f64e 0328 	movw	r3, #59432	; 0xe828
200040f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040fa:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
200040fc:	f64e 0328 	movw	r3, #59432	; 0xe828
20004100:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004104:	681a      	ldr	r2, [r3, #0]
20004106:	f64e 032c 	movw	r3, #59436	; 0xe82c
2000410a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000410e:	681b      	ldr	r3, [r3, #0]
20004110:	429a      	cmp	r2, r3
20004112:	d209      	bcs.n	20004128 <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
20004114:	f64e 0328 	movw	r3, #59432	; 0xe828
20004118:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000411c:	681a      	ldr	r2, [r3, #0]
2000411e:	f64e 032c 	movw	r3, #59436	; 0xe82c
20004122:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004126:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
20004128:	68fb      	ldr	r3, [r7, #12]
2000412a:	685a      	ldr	r2, [r3, #4]
2000412c:	f64e 0330 	movw	r3, #59440	; 0xe830
20004130:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004134:	681b      	ldr	r3, [r3, #0]
20004136:	ea42 0203 	orr.w	r2, r2, r3
2000413a:	68fb      	ldr	r3, [r7, #12]
2000413c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
2000413e:	68fb      	ldr	r3, [r7, #12]
20004140:	f04f 0200 	mov.w	r2, #0
20004144:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
20004146:	f7fe faa3 	bl	20002690 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
2000414a:	69bb      	ldr	r3, [r7, #24]
2000414c:	2b00      	cmp	r3, #0
2000414e:	d101      	bne.n	20004154 <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
20004150:	f7fc f964 	bl	2000041c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
20004154:	69bb      	ldr	r3, [r7, #24]
20004156:	f003 0307 	and.w	r3, r3, #7
2000415a:	2b00      	cmp	r3, #0
2000415c:	d009      	beq.n	20004172 <pvPortMalloc+0x1ea>
2000415e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004162:	f383 8811 	msr	BASEPRI, r3
20004166:	f3bf 8f6f 	isb	sy
2000416a:	f3bf 8f4f 	dsb	sy
2000416e:	627b      	str	r3, [r7, #36]	; 0x24
20004170:	e7fe      	b.n	20004170 <pvPortMalloc+0x1e8>
	return pvReturn;
20004172:	69bb      	ldr	r3, [r7, #24]
}
20004174:	4618      	mov	r0, r3
20004176:	f107 0728 	add.w	r7, r7, #40	; 0x28
2000417a:	46bd      	mov	sp, r7
2000417c:	bd80      	pop	{r7, pc}
2000417e:	bf00      	nop

20004180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20004180:	b580      	push	{r7, lr}
20004182:	b086      	sub	sp, #24
20004184:	af00      	add	r7, sp, #0
20004186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20004188:	687b      	ldr	r3, [r7, #4]
2000418a:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
2000418c:	687b      	ldr	r3, [r7, #4]
2000418e:	2b00      	cmp	r3, #0
20004190:	d05e      	beq.n	20004250 <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20004192:	f248 4360 	movw	r3, #33888	; 0x8460
20004196:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000419a:	681b      	ldr	r3, [r3, #0]
2000419c:	f1c3 0300 	rsb	r3, r3, #0
200041a0:	68ba      	ldr	r2, [r7, #8]
200041a2:	4413      	add	r3, r2
200041a4:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
200041a6:	68bb      	ldr	r3, [r7, #8]
200041a8:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
200041aa:	68fb      	ldr	r3, [r7, #12]
200041ac:	685a      	ldr	r2, [r3, #4]
200041ae:	f64e 0330 	movw	r3, #59440	; 0xe830
200041b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041b6:	681b      	ldr	r3, [r3, #0]
200041b8:	ea02 0303 	and.w	r3, r2, r3
200041bc:	2b00      	cmp	r3, #0
200041be:	d109      	bne.n	200041d4 <vPortFree+0x54>
200041c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200041c4:	f383 8811 	msr	BASEPRI, r3
200041c8:	f3bf 8f6f 	isb	sy
200041cc:	f3bf 8f4f 	dsb	sy
200041d0:	613b      	str	r3, [r7, #16]
200041d2:	e7fe      	b.n	200041d2 <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
200041d4:	68fb      	ldr	r3, [r7, #12]
200041d6:	681b      	ldr	r3, [r3, #0]
200041d8:	2b00      	cmp	r3, #0
200041da:	d009      	beq.n	200041f0 <vPortFree+0x70>
200041dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200041e0:	f383 8811 	msr	BASEPRI, r3
200041e4:	f3bf 8f6f 	isb	sy
200041e8:	f3bf 8f4f 	dsb	sy
200041ec:	617b      	str	r3, [r7, #20]
200041ee:	e7fe      	b.n	200041ee <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
200041f0:	68fb      	ldr	r3, [r7, #12]
200041f2:	685a      	ldr	r2, [r3, #4]
200041f4:	f64e 0330 	movw	r3, #59440	; 0xe830
200041f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041fc:	681b      	ldr	r3, [r3, #0]
200041fe:	ea02 0303 	and.w	r3, r2, r3
20004202:	2b00      	cmp	r3, #0
20004204:	d024      	beq.n	20004250 <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20004206:	68fb      	ldr	r3, [r7, #12]
20004208:	681b      	ldr	r3, [r3, #0]
2000420a:	2b00      	cmp	r3, #0
2000420c:	d120      	bne.n	20004250 <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
2000420e:	68fb      	ldr	r3, [r7, #12]
20004210:	685a      	ldr	r2, [r3, #4]
20004212:	f64e 0330 	movw	r3, #59440	; 0xe830
20004216:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000421a:	681b      	ldr	r3, [r3, #0]
2000421c:	ea6f 0303 	mvn.w	r3, r3
20004220:	ea02 0203 	and.w	r2, r2, r3
20004224:	68fb      	ldr	r3, [r7, #12]
20004226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20004228:	f7fe fa20 	bl	2000266c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
2000422c:	68fb      	ldr	r3, [r7, #12]
2000422e:	685a      	ldr	r2, [r3, #4]
20004230:	f64e 0328 	movw	r3, #59432	; 0xe828
20004234:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004238:	681b      	ldr	r3, [r3, #0]
2000423a:	441a      	add	r2, r3
2000423c:	f64e 0328 	movw	r3, #59432	; 0xe828
20004240:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004244:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
20004246:	68f8      	ldr	r0, [r7, #12]
20004248:	f000 f888 	bl	2000435c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
2000424c:	f7fe fa20 	bl	20002690 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20004250:	f107 0718 	add.w	r7, r7, #24
20004254:	46bd      	mov	sp, r7
20004256:	bd80      	pop	{r7, pc}

20004258 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20004258:	b480      	push	{r7}
2000425a:	b085      	sub	sp, #20
2000425c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
2000425e:	f246 13a8 	movw	r3, #25000	; 0x61a8
20004262:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20004264:	f248 6374 	movw	r3, #34420	; 0x8674
20004268:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000426c:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
2000426e:	68bb      	ldr	r3, [r7, #8]
20004270:	f003 0307 	and.w	r3, r3, #7
20004274:	2b00      	cmp	r3, #0
20004276:	d011      	beq.n	2000429c <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20004278:	68bb      	ldr	r3, [r7, #8]
2000427a:	f103 0307 	add.w	r3, r3, #7
2000427e:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20004280:	68bb      	ldr	r3, [r7, #8]
20004282:	f023 0307 	bic.w	r3, r3, #7
20004286:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20004288:	68fa      	ldr	r2, [r7, #12]
2000428a:	68bb      	ldr	r3, [r7, #8]
2000428c:	ebc3 0202 	rsb	r2, r3, r2
20004290:	f248 6374 	movw	r3, #34420	; 0x8674
20004294:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004298:	4413      	add	r3, r2
2000429a:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
2000429c:	68bb      	ldr	r3, [r7, #8]
2000429e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
200042a0:	687a      	ldr	r2, [r7, #4]
200042a2:	f64e 031c 	movw	r3, #59420	; 0xe81c
200042a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042aa:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
200042ac:	f64e 031c 	movw	r3, #59420	; 0xe81c
200042b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042b4:	f04f 0200 	mov.w	r2, #0
200042b8:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
200042ba:	687a      	ldr	r2, [r7, #4]
200042bc:	68fb      	ldr	r3, [r7, #12]
200042be:	4413      	add	r3, r2
200042c0:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
200042c2:	f248 4360 	movw	r3, #33888	; 0x8460
200042c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042ca:	681b      	ldr	r3, [r3, #0]
200042cc:	68ba      	ldr	r2, [r7, #8]
200042ce:	ebc3 0302 	rsb	r3, r3, r2
200042d2:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
200042d4:	68bb      	ldr	r3, [r7, #8]
200042d6:	f023 0307 	bic.w	r3, r3, #7
200042da:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
200042dc:	68ba      	ldr	r2, [r7, #8]
200042de:	f64e 0324 	movw	r3, #59428	; 0xe824
200042e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042e6:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
200042e8:	f64e 0324 	movw	r3, #59428	; 0xe824
200042ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042f0:	681b      	ldr	r3, [r3, #0]
200042f2:	f04f 0200 	mov.w	r2, #0
200042f6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
200042f8:	f64e 0324 	movw	r3, #59428	; 0xe824
200042fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004300:	681b      	ldr	r3, [r3, #0]
20004302:	f04f 0200 	mov.w	r2, #0
20004306:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20004308:	687b      	ldr	r3, [r7, #4]
2000430a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
2000430c:	683b      	ldr	r3, [r7, #0]
2000430e:	68ba      	ldr	r2, [r7, #8]
20004310:	ebc3 0202 	rsb	r2, r3, r2
20004314:	683b      	ldr	r3, [r7, #0]
20004316:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20004318:	f64e 0324 	movw	r3, #59428	; 0xe824
2000431c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004320:	681a      	ldr	r2, [r3, #0]
20004322:	683b      	ldr	r3, [r7, #0]
20004324:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20004326:	683b      	ldr	r3, [r7, #0]
20004328:	685a      	ldr	r2, [r3, #4]
2000432a:	f64e 032c 	movw	r3, #59436	; 0xe82c
2000432e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004332:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20004334:	683b      	ldr	r3, [r7, #0]
20004336:	685a      	ldr	r2, [r3, #4]
20004338:	f64e 0328 	movw	r3, #59432	; 0xe828
2000433c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004340:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
20004342:	f64e 0330 	movw	r3, #59440	; 0xe830
20004346:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000434a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
2000434e:	601a      	str	r2, [r3, #0]
}
20004350:	f107 0714 	add.w	r7, r7, #20
20004354:	46bd      	mov	sp, r7
20004356:	bc80      	pop	{r7}
20004358:	4770      	bx	lr
2000435a:	bf00      	nop

2000435c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
2000435c:	b480      	push	{r7}
2000435e:	b085      	sub	sp, #20
20004360:	af00      	add	r7, sp, #0
20004362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
20004364:	f64e 031c 	movw	r3, #59420	; 0xe81c
20004368:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000436c:	60bb      	str	r3, [r7, #8]
2000436e:	e002      	b.n	20004376 <prvInsertBlockIntoFreeList+0x1a>
20004370:	68bb      	ldr	r3, [r7, #8]
20004372:	681b      	ldr	r3, [r3, #0]
20004374:	60bb      	str	r3, [r7, #8]
20004376:	68bb      	ldr	r3, [r7, #8]
20004378:	681a      	ldr	r2, [r3, #0]
2000437a:	687b      	ldr	r3, [r7, #4]
2000437c:	429a      	cmp	r2, r3
2000437e:	d3f7      	bcc.n	20004370 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20004380:	68bb      	ldr	r3, [r7, #8]
20004382:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
20004384:	68bb      	ldr	r3, [r7, #8]
20004386:	685a      	ldr	r2, [r3, #4]
20004388:	68fb      	ldr	r3, [r7, #12]
2000438a:	441a      	add	r2, r3
2000438c:	687b      	ldr	r3, [r7, #4]
2000438e:	429a      	cmp	r2, r3
20004390:	d108      	bne.n	200043a4 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
20004392:	68bb      	ldr	r3, [r7, #8]
20004394:	685a      	ldr	r2, [r3, #4]
20004396:	687b      	ldr	r3, [r7, #4]
20004398:	685b      	ldr	r3, [r3, #4]
2000439a:	441a      	add	r2, r3
2000439c:	68bb      	ldr	r3, [r7, #8]
2000439e:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
200043a0:	68bb      	ldr	r3, [r7, #8]
200043a2:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
200043a4:	687b      	ldr	r3, [r7, #4]
200043a6:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
200043a8:	687b      	ldr	r3, [r7, #4]
200043aa:	685a      	ldr	r2, [r3, #4]
200043ac:	68fb      	ldr	r3, [r7, #12]
200043ae:	441a      	add	r2, r3
200043b0:	68bb      	ldr	r3, [r7, #8]
200043b2:	681b      	ldr	r3, [r3, #0]
200043b4:	429a      	cmp	r2, r3
200043b6:	d11e      	bne.n	200043f6 <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
200043b8:	68bb      	ldr	r3, [r7, #8]
200043ba:	681a      	ldr	r2, [r3, #0]
200043bc:	f64e 0324 	movw	r3, #59428	; 0xe824
200043c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043c4:	681b      	ldr	r3, [r3, #0]
200043c6:	429a      	cmp	r2, r3
200043c8:	d00d      	beq.n	200043e6 <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
200043ca:	687b      	ldr	r3, [r7, #4]
200043cc:	685a      	ldr	r2, [r3, #4]
200043ce:	68bb      	ldr	r3, [r7, #8]
200043d0:	681b      	ldr	r3, [r3, #0]
200043d2:	685b      	ldr	r3, [r3, #4]
200043d4:	441a      	add	r2, r3
200043d6:	687b      	ldr	r3, [r7, #4]
200043d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
200043da:	68bb      	ldr	r3, [r7, #8]
200043dc:	681b      	ldr	r3, [r3, #0]
200043de:	681a      	ldr	r2, [r3, #0]
200043e0:	687b      	ldr	r3, [r7, #4]
200043e2:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
200043e4:	e00b      	b.n	200043fe <prvInsertBlockIntoFreeList+0xa2>
200043e6:	f64e 0324 	movw	r3, #59428	; 0xe824
200043ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043ee:	681a      	ldr	r2, [r3, #0]
200043f0:	687b      	ldr	r3, [r7, #4]
200043f2:	601a      	str	r2, [r3, #0]
200043f4:	e003      	b.n	200043fe <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
200043f6:	68bb      	ldr	r3, [r7, #8]
200043f8:	681a      	ldr	r2, [r3, #0]
200043fa:	687b      	ldr	r3, [r7, #4]
200043fc:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
200043fe:	68ba      	ldr	r2, [r7, #8]
20004400:	687b      	ldr	r3, [r7, #4]
20004402:	429a      	cmp	r2, r3
20004404:	d002      	beq.n	2000440c <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
20004406:	68bb      	ldr	r3, [r7, #8]
20004408:	687a      	ldr	r2, [r7, #4]
2000440a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
2000440c:	f107 0714 	add.w	r7, r7, #20
20004410:	46bd      	mov	sp, r7
20004412:	bc80      	pop	{r7}
20004414:	4770      	bx	lr
20004416:	bf00      	nop

20004418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20004418:	b480      	push	{r7}
2000441a:	b085      	sub	sp, #20
2000441c:	af00      	add	r7, sp, #0
2000441e:	60f8      	str	r0, [r7, #12]
20004420:	60b9      	str	r1, [r7, #8]
20004422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
20004424:	68fb      	ldr	r3, [r7, #12]
20004426:	f1a3 0304 	sub.w	r3, r3, #4
2000442a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
2000442c:	68fb      	ldr	r3, [r7, #12]
2000442e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20004432:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20004434:	68fb      	ldr	r3, [r7, #12]
20004436:	f1a3 0304 	sub.w	r3, r3, #4
2000443a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
2000443c:	68bb      	ldr	r3, [r7, #8]
2000443e:	f023 0201 	bic.w	r2, r3, #1
20004442:	68fb      	ldr	r3, [r7, #12]
20004444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20004446:	68fb      	ldr	r3, [r7, #12]
20004448:	f1a3 0304 	sub.w	r3, r3, #4
2000444c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
2000444e:	f244 4381 	movw	r3, #17537	; 0x4481
20004452:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004456:	68fa      	ldr	r2, [r7, #12]
20004458:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
2000445a:	68fb      	ldr	r3, [r7, #12]
2000445c:	f1a3 0314 	sub.w	r3, r3, #20
20004460:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
20004462:	687a      	ldr	r2, [r7, #4]
20004464:	68fb      	ldr	r3, [r7, #12]
20004466:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20004468:	68fb      	ldr	r3, [r7, #12]
2000446a:	f1a3 0320 	sub.w	r3, r3, #32
2000446e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
20004470:	68fb      	ldr	r3, [r7, #12]
}
20004472:	4618      	mov	r0, r3
20004474:	f107 0714 	add.w	r7, r7, #20
20004478:	46bd      	mov	sp, r7
2000447a:	bc80      	pop	{r7}
2000447c:	4770      	bx	lr
2000447e:	bf00      	nop

20004480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20004480:	b480      	push	{r7}
20004482:	b083      	sub	sp, #12
20004484:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
20004486:	f248 43c4 	movw	r3, #33988	; 0x84c4
2000448a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000448e:	681b      	ldr	r3, [r3, #0]
20004490:	f1b3 3fff 	cmp.w	r3, #4294967295
20004494:	d009      	beq.n	200044aa <prvTaskExitError+0x2a>
20004496:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000449a:	f383 8811 	msr	BASEPRI, r3
2000449e:	f3bf 8f6f 	isb	sy
200044a2:	f3bf 8f4f 	dsb	sy
200044a6:	603b      	str	r3, [r7, #0]
200044a8:	e7fe      	b.n	200044a8 <prvTaskExitError+0x28>
200044aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200044ae:	f383 8811 	msr	BASEPRI, r3
200044b2:	f3bf 8f6f 	isb	sy
200044b6:	f3bf 8f4f 	dsb	sy
200044ba:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
200044bc:	e7fe      	b.n	200044bc <prvTaskExitError+0x3c>
200044be:	bf00      	nop

200044c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
200044c0:	4b07      	ldr	r3, [pc, #28]	; (200044e0 <pxCurrentTCBConst2>)
200044c2:	6819      	ldr	r1, [r3, #0]
200044c4:	6808      	ldr	r0, [r1, #0]
200044c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
200044ca:	f380 8809 	msr	PSP, r0
200044ce:	f3bf 8f6f 	isb	sy
200044d2:	f04f 0000 	mov.w	r0, #0
200044d6:	f380 8811 	msr	BASEPRI, r0
200044da:	f04e 0e0d 	orr.w	lr, lr, #13
200044de:	4770      	bx	lr

200044e0 <pxCurrentTCBConst2>:
200044e0:	2000852c 	.word	0x2000852c
200044e4:	f3af 8000 	nop.w
200044e8:	f3af 8000 	nop.w
200044ec:	f3af 8000 	nop.w

200044f0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
200044f0:	4806      	ldr	r0, [pc, #24]	; (2000450c <prvPortStartFirstTask+0x1c>)
200044f2:	6800      	ldr	r0, [r0, #0]
200044f4:	6800      	ldr	r0, [r0, #0]
200044f6:	f380 8808 	msr	MSP, r0
200044fa:	b662      	cpsie	i
200044fc:	b661      	cpsie	f
200044fe:	f3bf 8f4f 	dsb	sy
20004502:	f3bf 8f6f 	isb	sy
20004506:	df00      	svc	0
20004508:	bf00      	nop
2000450a:	0000      	.short	0x0000
2000450c:	e000ed08 	.word	0xe000ed08

20004510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20004510:	b580      	push	{r7, lr}
20004512:	b084      	sub	sp, #16
20004514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20004516:	f24e 4300 	movw	r3, #58368	; 0xe400
2000451a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000451e:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
20004520:	68fb      	ldr	r3, [r7, #12]
20004522:	781b      	ldrb	r3, [r3, #0]
20004524:	b2db      	uxtb	r3, r3
20004526:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20004528:	68fb      	ldr	r3, [r7, #12]
2000452a:	f04f 32ff 	mov.w	r2, #4294967295
2000452e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20004530:	68fb      	ldr	r3, [r7, #12]
20004532:	781b      	ldrb	r3, [r3, #0]
20004534:	b2db      	uxtb	r3, r3
20004536:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20004538:	79fb      	ldrb	r3, [r7, #7]
2000453a:	b2db      	uxtb	r3, r3
2000453c:	461a      	mov	r2, r3
2000453e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
20004542:	f64e 0334 	movw	r3, #59444	; 0xe834
20004546:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000454a:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
2000454c:	f64e 0338 	movw	r3, #59448	; 0xe838
20004550:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004554:	f04f 0207 	mov.w	r2, #7
20004558:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
2000455a:	e011      	b.n	20004580 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
2000455c:	f64e 0338 	movw	r3, #59448	; 0xe838
20004560:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004564:	681b      	ldr	r3, [r3, #0]
20004566:	f103 32ff 	add.w	r2, r3, #4294967295
2000456a:	f64e 0338 	movw	r3, #59448	; 0xe838
2000456e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004572:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20004574:	79fb      	ldrb	r3, [r7, #7]
20004576:	b2db      	uxtb	r3, r3
20004578:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000457c:	b2db      	uxtb	r3, r3
2000457e:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20004580:	79fb      	ldrb	r3, [r7, #7]
20004582:	b2db      	uxtb	r3, r3
20004584:	b25b      	sxtb	r3, r3
20004586:	2b00      	cmp	r3, #0
20004588:	dbe8      	blt.n	2000455c <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
2000458a:	f64e 0338 	movw	r3, #59448	; 0xe838
2000458e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004592:	681b      	ldr	r3, [r3, #0]
20004594:	ea4f 2203 	mov.w	r2, r3, lsl #8
20004598:	f64e 0338 	movw	r3, #59448	; 0xe838
2000459c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045a0:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
200045a2:	f64e 0338 	movw	r3, #59448	; 0xe838
200045a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045aa:	681b      	ldr	r3, [r3, #0]
200045ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200045b0:	f64e 0338 	movw	r3, #59448	; 0xe838
200045b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045b8:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
200045ba:	68bb      	ldr	r3, [r7, #8]
200045bc:	b2da      	uxtb	r2, r3
200045be:	68fb      	ldr	r3, [r7, #12]
200045c0:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
200045c2:	f64e 5320 	movw	r3, #60704	; 0xed20
200045c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200045ca:	f64e 5220 	movw	r2, #60704	; 0xed20
200045ce:	f2ce 0200 	movt	r2, #57344	; 0xe000
200045d2:	6812      	ldr	r2, [r2, #0]
200045d4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
200045d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
200045da:	f64e 5320 	movw	r3, #60704	; 0xed20
200045de:	f2ce 0300 	movt	r3, #57344	; 0xe000
200045e2:	f64e 5220 	movw	r2, #60704	; 0xed20
200045e6:	f2ce 0200 	movt	r2, #57344	; 0xe000
200045ea:	6812      	ldr	r2, [r2, #0]
200045ec:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
200045f0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
200045f2:	f000 f8c7 	bl	20004784 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
200045f6:	f248 43c4 	movw	r3, #33988	; 0x84c4
200045fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045fe:	f04f 0200 	mov.w	r2, #0
20004602:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20004604:	f7ff ff74 	bl	200044f0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
20004608:	f7ff ff3a 	bl	20004480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
2000460c:	f04f 0300 	mov.w	r3, #0
}
20004610:	4618      	mov	r0, r3
20004612:	f107 0710 	add.w	r7, r7, #16
20004616:	46bd      	mov	sp, r7
20004618:	bd80      	pop	{r7, pc}
2000461a:	bf00      	nop

2000461c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
2000461c:	b480      	push	{r7}
2000461e:	b083      	sub	sp, #12
20004620:	af00      	add	r7, sp, #0
20004622:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004626:	f383 8811 	msr	BASEPRI, r3
2000462a:	f3bf 8f6f 	isb	sy
2000462e:	f3bf 8f4f 	dsb	sy
20004632:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20004634:	f248 43c4 	movw	r3, #33988	; 0x84c4
20004638:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000463c:	681b      	ldr	r3, [r3, #0]
2000463e:	f103 0201 	add.w	r2, r3, #1
20004642:	f248 43c4 	movw	r3, #33988	; 0x84c4
20004646:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000464a:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
2000464c:	f248 43c4 	movw	r3, #33988	; 0x84c4
20004650:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004654:	681b      	ldr	r3, [r3, #0]
20004656:	2b01      	cmp	r3, #1
20004658:	d112      	bne.n	20004680 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
2000465a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000465e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004662:	681b      	ldr	r3, [r3, #0]
20004664:	f003 03ff 	and.w	r3, r3, #255	; 0xff
20004668:	2b00      	cmp	r3, #0
2000466a:	d009      	beq.n	20004680 <vPortEnterCritical+0x64>
2000466c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004670:	f383 8811 	msr	BASEPRI, r3
20004674:	f3bf 8f6f 	isb	sy
20004678:	f3bf 8f4f 	dsb	sy
2000467c:	607b      	str	r3, [r7, #4]
2000467e:	e7fe      	b.n	2000467e <vPortEnterCritical+0x62>
	}
}
20004680:	f107 070c 	add.w	r7, r7, #12
20004684:	46bd      	mov	sp, r7
20004686:	bc80      	pop	{r7}
20004688:	4770      	bx	lr
2000468a:	bf00      	nop

2000468c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
2000468c:	b480      	push	{r7}
2000468e:	b083      	sub	sp, #12
20004690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20004692:	f248 43c4 	movw	r3, #33988	; 0x84c4
20004696:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000469a:	681b      	ldr	r3, [r3, #0]
2000469c:	2b00      	cmp	r3, #0
2000469e:	d109      	bne.n	200046b4 <vPortExitCritical+0x28>
200046a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200046a4:	f383 8811 	msr	BASEPRI, r3
200046a8:	f3bf 8f6f 	isb	sy
200046ac:	f3bf 8f4f 	dsb	sy
200046b0:	603b      	str	r3, [r7, #0]
200046b2:	e7fe      	b.n	200046b2 <vPortExitCritical+0x26>
	uxCriticalNesting--;
200046b4:	f248 43c4 	movw	r3, #33988	; 0x84c4
200046b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046bc:	681b      	ldr	r3, [r3, #0]
200046be:	f103 32ff 	add.w	r2, r3, #4294967295
200046c2:	f248 43c4 	movw	r3, #33988	; 0x84c4
200046c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046ca:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
200046cc:	f248 43c4 	movw	r3, #33988	; 0x84c4
200046d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046d4:	681b      	ldr	r3, [r3, #0]
200046d6:	2b00      	cmp	r3, #0
200046d8:	d105      	bne.n	200046e6 <vPortExitCritical+0x5a>
200046da:	f04f 0300 	mov.w	r3, #0
200046de:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200046e0:	687b      	ldr	r3, [r7, #4]
200046e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
200046e6:	f107 070c 	add.w	r7, r7, #12
200046ea:	46bd      	mov	sp, r7
200046ec:	bc80      	pop	{r7}
200046ee:	4770      	bx	lr

200046f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
200046f0:	f3ef 8009 	mrs	r0, PSP
200046f4:	f3bf 8f6f 	isb	sy
200046f8:	4b0d      	ldr	r3, [pc, #52]	; (20004730 <pxCurrentTCBConst>)
200046fa:	681a      	ldr	r2, [r3, #0]
200046fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004700:	6010      	str	r0, [r2, #0]
20004702:	e92d 4008 	stmdb	sp!, {r3, lr}
20004706:	f04f 00a0 	mov.w	r0, #160	; 0xa0
2000470a:	f380 8811 	msr	BASEPRI, r0
2000470e:	f7fe f9a7 	bl	20002a60 <vTaskSwitchContext>
20004712:	f04f 0000 	mov.w	r0, #0
20004716:	f380 8811 	msr	BASEPRI, r0
2000471a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000471e:	6819      	ldr	r1, [r3, #0]
20004720:	6808      	ldr	r0, [r1, #0]
20004722:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004726:	f380 8809 	msr	PSP, r0
2000472a:	f3bf 8f6f 	isb	sy
2000472e:	4770      	bx	lr

20004730 <pxCurrentTCBConst>:
20004730:	2000852c 	.word	0x2000852c
20004734:	f3af 8000 	nop.w
20004738:	f3af 8000 	nop.w
2000473c:	f3af 8000 	nop.w

20004740 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20004740:	b580      	push	{r7, lr}
20004742:	b082      	sub	sp, #8
20004744:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20004746:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000474a:	f383 8811 	msr	BASEPRI, r3
2000474e:	f3bf 8f6f 	isb	sy
20004752:	f3bf 8f4f 	dsb	sy
20004756:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20004758:	f7fe f87a 	bl	20002850 <xTaskIncrementTick>
2000475c:	4603      	mov	r3, r0
2000475e:	2b00      	cmp	r3, #0
20004760:	d006      	beq.n	20004770 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20004762:	f64e 5304 	movw	r3, #60676	; 0xed04
20004766:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000476e:	601a      	str	r2, [r3, #0]
20004770:	f04f 0300 	mov.w	r3, #0
20004774:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20004776:	687b      	ldr	r3, [r7, #4]
20004778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
2000477c:	f107 0708 	add.w	r7, r7, #8
20004780:	46bd      	mov	sp, r7
20004782:	bd80      	pop	{r7, pc}

20004784 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20004784:	b480      	push	{r7}
20004786:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20004788:	f24e 0314 	movw	r3, #57364	; 0xe014
2000478c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004790:	f248 5204 	movw	r2, #34052	; 0x8504
20004794:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004798:	6811      	ldr	r1, [r2, #0]
2000479a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
2000479e:	f2c1 0262 	movt	r2, #4194	; 0x1062
200047a2:	fba2 0201 	umull	r0, r2, r2, r1
200047a6:	ea4f 1292 	mov.w	r2, r2, lsr #6
200047aa:	f102 32ff 	add.w	r2, r2, #4294967295
200047ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
200047b0:	f24e 0310 	movw	r3, #57360	; 0xe010
200047b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
200047b8:	f04f 0207 	mov.w	r2, #7
200047bc:	601a      	str	r2, [r3, #0]
}
200047be:	46bd      	mov	sp, r7
200047c0:	bc80      	pop	{r7}
200047c2:	4770      	bx	lr

200047c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
200047c4:	b480      	push	{r7}
200047c6:	b085      	sub	sp, #20
200047c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
200047ca:	f3ef 8305 	mrs	r3, IPSR
200047ce:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
200047d0:	683b      	ldr	r3, [r7, #0]
200047d2:	2b0f      	cmp	r3, #15
200047d4:	d91a      	bls.n	2000480c <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
200047d6:	f248 4364 	movw	r3, #33892	; 0x8464
200047da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047de:	681a      	ldr	r2, [r3, #0]
200047e0:	683b      	ldr	r3, [r7, #0]
200047e2:	4413      	add	r3, r2
200047e4:	781b      	ldrb	r3, [r3, #0]
200047e6:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
200047e8:	f64e 0334 	movw	r3, #59444	; 0xe834
200047ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047f0:	781b      	ldrb	r3, [r3, #0]
200047f2:	79fa      	ldrb	r2, [r7, #7]
200047f4:	429a      	cmp	r2, r3
200047f6:	d209      	bcs.n	2000480c <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200047f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200047fc:	f383 8811 	msr	BASEPRI, r3
20004800:	f3bf 8f6f 	isb	sy
20004804:	f3bf 8f4f 	dsb	sy
20004808:	60bb      	str	r3, [r7, #8]
2000480a:	e7fe      	b.n	2000480a <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
2000480c:	f64e 530c 	movw	r3, #60684	; 0xed0c
20004810:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004814:	681b      	ldr	r3, [r3, #0]
20004816:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
2000481a:	f64e 0338 	movw	r3, #59448	; 0xe838
2000481e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004822:	681b      	ldr	r3, [r3, #0]
20004824:	429a      	cmp	r2, r3
20004826:	d909      	bls.n	2000483c <vPortValidateInterruptPriority+0x78>
20004828:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000482c:	f383 8811 	msr	BASEPRI, r3
20004830:	f3bf 8f6f 	isb	sy
20004834:	f3bf 8f4f 	dsb	sy
20004838:	60fb      	str	r3, [r7, #12]
2000483a:	e7fe      	b.n	2000483a <vPortValidateInterruptPriority+0x76>
	}
2000483c:	f107 0714 	add.w	r7, r7, #20
20004840:	46bd      	mov	sp, r7
20004842:	bc80      	pop	{r7}
20004844:	4770      	bx	lr
20004846:	bf00      	nop

20004848 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004848:	b480      	push	{r7}
2000484a:	b083      	sub	sp, #12
2000484c:	af00      	add	r7, sp, #0
2000484e:	4603      	mov	r3, r0
20004850:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20004852:	f24e 1300 	movw	r3, #57600	; 0xe100
20004856:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000485a:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000485e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004862:	79f9      	ldrb	r1, [r7, #7]
20004864:	f001 011f 	and.w	r1, r1, #31
20004868:	f04f 0001 	mov.w	r0, #1
2000486c:	fa00 f101 	lsl.w	r1, r0, r1
20004870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004874:	f107 070c 	add.w	r7, r7, #12
20004878:	46bd      	mov	sp, r7
2000487a:	bc80      	pop	{r7}
2000487c:	4770      	bx	lr
2000487e:	bf00      	nop

20004880 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20004880:	b480      	push	{r7}
20004882:	b083      	sub	sp, #12
20004884:	af00      	add	r7, sp, #0
20004886:	4603      	mov	r3, r0
20004888:	6039      	str	r1, [r7, #0]
2000488a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
2000488c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004890:	2b00      	cmp	r3, #0
20004892:	da10      	bge.n	200048b6 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
20004894:	f64e 5300 	movw	r3, #60672	; 0xed00
20004898:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000489c:	79fa      	ldrb	r2, [r7, #7]
2000489e:	f002 020f 	and.w	r2, r2, #15
200048a2:	f1a2 0104 	sub.w	r1, r2, #4
200048a6:	683a      	ldr	r2, [r7, #0]
200048a8:	b2d2      	uxtb	r2, r2
200048aa:	ea4f 1202 	mov.w	r2, r2, lsl #4
200048ae:	b2d2      	uxtb	r2, r2
200048b0:	440b      	add	r3, r1
200048b2:	761a      	strb	r2, [r3, #24]
200048b4:	e00d      	b.n	200048d2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
200048b6:	f24e 1300 	movw	r3, #57600	; 0xe100
200048ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
200048be:	f997 1007 	ldrsb.w	r1, [r7, #7]
200048c2:	683a      	ldr	r2, [r7, #0]
200048c4:	b2d2      	uxtb	r2, r2
200048c6:	ea4f 1202 	mov.w	r2, r2, lsl #4
200048ca:	b2d2      	uxtb	r2, r2
200048cc:	440b      	add	r3, r1
200048ce:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
200048d2:	f107 070c 	add.w	r7, r7, #12
200048d6:	46bd      	mov	sp, r7
200048d8:	bc80      	pop	{r7}
200048da:	4770      	bx	lr

200048dc <get_hk_data>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void get_hk_data(void* d){
200048dc:	b590      	push	{r4, r7, lr}
200048de:	b089      	sub	sp, #36	; 0x24
200048e0:	af00      	add	r7, sp, #0
200048e2:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(get_pld_pkt_handle);
200048e4:	f64e 73b0 	movw	r3, #61360	; 0xefb0
200048e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048ec:	681b      	ldr	r3, [r3, #0]
200048ee:	4618      	mov	r0, r3
200048f0:	f7fd fd66 	bl	200023c0 <uxTaskPriorityGet>
200048f4:	4603      	mov	r3, r0
200048f6:	61bb      	str	r3, [r7, #24]

	if(feed_get_hk_data != pdFAIL){
200048f8:	f64e 73cc 	movw	r3, #61388	; 0xefcc
200048fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004900:	681b      	ldr	r3, [r3, #0]
20004902:	2b00      	cmp	r3, #0
20004904:	f000 81ec 	beq.w	20004ce0 <get_hk_data+0x404>

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
20004908:	f04f 0300 	mov.w	r3, #0
2000490c:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
2000490e:	f04f 0300 	mov.w	r3, #0
20004912:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
20004914:	f64e 1220 	movw	r2, #59680	; 0xe920
20004918:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000491c:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004920:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004924:	601a      	str	r2, [r3, #0]


		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
20004926:	f107 0116 	add.w	r1, r7, #22
2000492a:	f107 0214 	add.w	r2, r7, #20
2000492e:	f107 0312 	add.w	r3, r7, #18
20004932:	4608      	mov	r0, r1
20004934:	4611      	mov	r1, r2
20004936:	461a      	mov	r2, r3
20004938:	f7fb fdbc 	bl	200004b4 <get_IMU_acc>
2000493c:	4603      	mov	r3, r0
2000493e:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
20004940:	f107 010e 	add.w	r1, r7, #14
20004944:	f107 020c 	add.w	r2, r7, #12
20004948:	f107 030a 	add.w	r3, r7, #10
2000494c:	4608      	mov	r0, r1
2000494e:	4611      	mov	r1, r2
20004950:	461a      	mov	r2, r3
20004952:	f7fb ff45 	bl	200007e0 <get_IMU_gyro>
20004956:	4603      	mov	r3, r0
20004958:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;
			hk_pkt->cmd_cnt = command_cnt;
2000495a:	f64e 73b8 	movw	r3, #61368	; 0xefb8
2000495e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004962:	681a      	ldr	r2, [r3, #0]
20004964:	f64e 73a4 	movw	r3, #61348	; 0xefa4
20004968:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000496c:	881b      	ldrh	r3, [r3, #0]
2000496e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004972:	f04f 0000 	mov.w	r0, #0
20004976:	ea40 0101 	orr.w	r1, r0, r1
2000497a:	7391      	strb	r1, [r2, #14]
2000497c:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004980:	b29b      	uxth	r3, r3
20004982:	f04f 0100 	mov.w	r1, #0
20004986:	ea41 0303 	orr.w	r3, r1, r3
2000498a:	73d3      	strb	r3, [r2, #15]
			hk_pkt->cmd_reject_cnt = command_reject_cnt;
2000498c:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004990:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004994:	681a      	ldr	r2, [r3, #0]
20004996:	f64e 73e4 	movw	r3, #61412	; 0xefe4
2000499a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000499e:	881b      	ldrh	r3, [r3, #0]
200049a0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200049a4:	f04f 0000 	mov.w	r0, #0
200049a8:	ea40 0101 	orr.w	r1, r0, r1
200049ac:	7411      	strb	r1, [r2, #16]
200049ae:	ea4f 2313 	mov.w	r3, r3, lsr #8
200049b2:	b29b      	uxth	r3, r3
200049b4:	f04f 0100 	mov.w	r1, #0
200049b8:	ea41 0303 	orr.w	r3, r1, r3
200049bc:	7453      	strb	r3, [r2, #17]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
200049be:	f64e 73b8 	movw	r3, #61368	; 0xefb8
200049c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049c6:	681b      	ldr	r3, [r3, #0]
200049c8:	8afa      	ldrh	r2, [r7, #22]
200049ca:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200049ce:	f04f 0000 	mov.w	r0, #0
200049d2:	ea40 0101 	orr.w	r1, r0, r1
200049d6:	7499      	strb	r1, [r3, #18]
200049d8:	ea4f 2212 	mov.w	r2, r2, lsr #8
200049dc:	b292      	uxth	r2, r2
200049de:	f04f 0100 	mov.w	r1, #0
200049e2:	ea41 0202 	orr.w	r2, r1, r2
200049e6:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
200049e8:	f64e 73b8 	movw	r3, #61368	; 0xefb8
200049ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049f0:	681b      	ldr	r3, [r3, #0]
200049f2:	8aba      	ldrh	r2, [r7, #20]
200049f4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200049f8:	f04f 0000 	mov.w	r0, #0
200049fc:	ea40 0101 	orr.w	r1, r0, r1
20004a00:	7519      	strb	r1, [r3, #20]
20004a02:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a06:	b292      	uxth	r2, r2
20004a08:	f04f 0100 	mov.w	r1, #0
20004a0c:	ea41 0202 	orr.w	r2, r1, r2
20004a10:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Acc[2] = ((az));
20004a12:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a1a:	681b      	ldr	r3, [r3, #0]
20004a1c:	8a7a      	ldrh	r2, [r7, #18]
20004a1e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004a22:	f04f 0000 	mov.w	r0, #0
20004a26:	ea40 0101 	orr.w	r1, r0, r1
20004a2a:	7599      	strb	r1, [r3, #22]
20004a2c:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a30:	b292      	uxth	r2, r2
20004a32:	f04f 0100 	mov.w	r1, #0
20004a36:	ea41 0202 	orr.w	r2, r1, r2
20004a3a:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
20004a3c:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a44:	681b      	ldr	r3, [r3, #0]
20004a46:	89fa      	ldrh	r2, [r7, #14]
20004a48:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004a4c:	f04f 0000 	mov.w	r0, #0
20004a50:	ea40 0101 	orr.w	r1, r0, r1
20004a54:	7619      	strb	r1, [r3, #24]
20004a56:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a5a:	b292      	uxth	r2, r2
20004a5c:	f04f 0100 	mov.w	r1, #0
20004a60:	ea41 0202 	orr.w	r2, r1, r2
20004a64:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
20004a66:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a6e:	681b      	ldr	r3, [r3, #0]
20004a70:	89ba      	ldrh	r2, [r7, #12]
20004a72:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004a76:	f04f 0000 	mov.w	r0, #0
20004a7a:	ea40 0101 	orr.w	r1, r0, r1
20004a7e:	7699      	strb	r1, [r3, #26]
20004a80:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a84:	b292      	uxth	r2, r2
20004a86:	f04f 0100 	mov.w	r1, #0
20004a8a:	ea41 0202 	orr.w	r2, r1, r2
20004a8e:	76da      	strb	r2, [r3, #27]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
20004a90:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a98:	681b      	ldr	r3, [r3, #0]
20004a9a:	897a      	ldrh	r2, [r7, #10]
20004a9c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004aa0:	f04f 0000 	mov.w	r0, #0
20004aa4:	ea40 0101 	orr.w	r1, r0, r1
20004aa8:	7719      	strb	r1, [r3, #28]
20004aaa:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004aae:	b292      	uxth	r2, r2
20004ab0:	f04f 0100 	mov.w	r1, #0
20004ab4:	ea41 0202 	orr.w	r2, r1, r2
20004ab8:	775a      	strb	r2, [r3, #29]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
20004aba:	f107 0308 	add.w	r3, r7, #8
20004abe:	4618      	mov	r0, r3
20004ac0:	f7fc f800 	bl	20000ac4 <get_IMU_temp>
20004ac4:	4603      	mov	r3, r0
20004ac6:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
20004ac8:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ad0:	681b      	ldr	r3, [r3, #0]
20004ad2:	893a      	ldrh	r2, [r7, #8]
20004ad4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004ad8:	f04f 0000 	mov.w	r0, #0
20004adc:	ea40 0101 	orr.w	r1, r0, r1
20004ae0:	7799      	strb	r1, [r3, #30]
20004ae2:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004ae6:	b292      	uxth	r2, r2
20004ae8:	f04f 0100 	mov.w	r1, #0
20004aec:	ea41 0202 	orr.w	r2, r1, r2
20004af0:	77da      	strb	r2, [r3, #31]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
20004af2:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004afa:	681c      	ldr	r4, [r3, #0]
20004afc:	f107 0311 	add.w	r3, r7, #17
20004b00:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b04:	f04f 0101 	mov.w	r1, #1
20004b08:	461a      	mov	r2, r3
20004b0a:	f7fc f917 	bl	20000d3c <read_bus_voltage>
20004b0e:	4603      	mov	r3, r0
20004b10:	b29b      	uxth	r3, r3
20004b12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b16:	f04f 0100 	mov.w	r1, #0
20004b1a:	ea41 0202 	orr.w	r2, r1, r2
20004b1e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
20004b22:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004b26:	b29b      	uxth	r3, r3
20004b28:	f04f 0200 	mov.w	r2, #0
20004b2c:	ea42 0303 	orr.w	r3, r2, r3
20004b30:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
20004b34:	7c7a      	ldrb	r2, [r7, #17]
20004b36:	7ffb      	ldrb	r3, [r7, #31]
20004b38:	4413      	add	r3, r2
20004b3a:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
20004b3c:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b44:	681c      	ldr	r4, [r3, #0]
20004b46:	f107 0311 	add.w	r3, r7, #17
20004b4a:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b4e:	f04f 0102 	mov.w	r1, #2
20004b52:	461a      	mov	r2, r3
20004b54:	f7fc f8f2 	bl	20000d3c <read_bus_voltage>
20004b58:	4603      	mov	r3, r0
20004b5a:	b29b      	uxth	r3, r3
20004b5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b60:	f04f 0100 	mov.w	r1, #0
20004b64:	ea41 0202 	orr.w	r2, r1, r2
20004b68:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
20004b6c:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004b70:	b29b      	uxth	r3, r3
20004b72:	f04f 0200 	mov.w	r2, #0
20004b76:	ea42 0303 	orr.w	r3, r2, r3
20004b7a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
20004b7e:	7c7a      	ldrb	r2, [r7, #17]
20004b80:	7ffb      	ldrb	r3, [r7, #31]
20004b82:	4413      	add	r3, r2
20004b84:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
20004b86:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b8e:	681c      	ldr	r4, [r3, #0]
20004b90:	f107 0311 	add.w	r3, r7, #17
20004b94:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b98:	f04f 0103 	mov.w	r1, #3
20004b9c:	461a      	mov	r2, r3
20004b9e:	f7fc f8cd 	bl	20000d3c <read_bus_voltage>
20004ba2:	4603      	mov	r3, r0
20004ba4:	b29b      	uxth	r3, r3
20004ba6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004baa:	f04f 0100 	mov.w	r1, #0
20004bae:	ea41 0202 	orr.w	r2, r1, r2
20004bb2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
20004bb6:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004bba:	b29b      	uxth	r3, r3
20004bbc:	f04f 0200 	mov.w	r2, #0
20004bc0:	ea42 0303 	orr.w	r3, r2, r3
20004bc4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
20004bc8:	7c7a      	ldrb	r2, [r7, #17]
20004bca:	7ffb      	ldrb	r3, [r7, #31]
20004bcc:	4413      	add	r3, r2
20004bce:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
20004bd0:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bd8:	681c      	ldr	r4, [r3, #0]
20004bda:	f107 0311 	add.w	r3, r7, #17
20004bde:	f04f 0040 	mov.w	r0, #64	; 0x40
20004be2:	f04f 0101 	mov.w	r1, #1
20004be6:	461a      	mov	r2, r3
20004be8:	f7fc f906 	bl	20000df8 <read_shunt_voltage>
20004bec:	4603      	mov	r3, r0
20004bee:	b29b      	uxth	r3, r3
20004bf0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004bf4:	f04f 0100 	mov.w	r1, #0
20004bf8:	ea41 0202 	orr.w	r2, r1, r2
20004bfc:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
20004c00:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004c04:	b29b      	uxth	r3, r3
20004c06:	f04f 0200 	mov.w	r2, #0
20004c0a:	ea42 0303 	orr.w	r3, r2, r3
20004c0e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
20004c12:	7c7a      	ldrb	r2, [r7, #17]
20004c14:	7ffb      	ldrb	r3, [r7, #31]
20004c16:	4413      	add	r3, r2
20004c18:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
20004c1a:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c22:	681c      	ldr	r4, [r3, #0]
20004c24:	f107 0311 	add.w	r3, r7, #17
20004c28:	f04f 0040 	mov.w	r0, #64	; 0x40
20004c2c:	f04f 0102 	mov.w	r1, #2
20004c30:	461a      	mov	r2, r3
20004c32:	f7fc f8e1 	bl	20000df8 <read_shunt_voltage>
20004c36:	4603      	mov	r3, r0
20004c38:	b29b      	uxth	r3, r3
20004c3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004c3e:	f04f 0100 	mov.w	r1, #0
20004c42:	ea41 0202 	orr.w	r2, r1, r2
20004c46:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
20004c4a:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004c4e:	b29b      	uxth	r3, r3
20004c50:	f04f 0200 	mov.w	r2, #0
20004c54:	ea42 0303 	orr.w	r3, r2, r3
20004c58:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
20004c5c:	7c7a      	ldrb	r2, [r7, #17]
20004c5e:	7ffb      	ldrb	r3, [r7, #31]
20004c60:	4413      	add	r3, r2
20004c62:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
20004c64:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c6c:	681c      	ldr	r4, [r3, #0]
20004c6e:	f107 0311 	add.w	r3, r7, #17
20004c72:	f04f 0040 	mov.w	r0, #64	; 0x40
20004c76:	f04f 0103 	mov.w	r1, #3
20004c7a:	461a      	mov	r2, r3
20004c7c:	f7fc f8bc 	bl	20000df8 <read_shunt_voltage>
20004c80:	4603      	mov	r3, r0
20004c82:	b29b      	uxth	r3, r3
20004c84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004c88:	f04f 0100 	mov.w	r1, #0
20004c8c:	ea41 0202 	orr.w	r2, r1, r2
20004c90:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
20004c94:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004c98:	b29b      	uxth	r3, r3
20004c9a:	f04f 0200 	mov.w	r2, #0
20004c9e:	ea42 0303 	orr.w	r3, r2, r3
20004ca2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			loss_count+= flag;
20004ca6:	7c7a      	ldrb	r2, [r7, #17]
20004ca8:	7ffb      	ldrb	r3, [r7, #31]
20004caa:	4413      	add	r3, r2
20004cac:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
20004cae:	f64e 1320 	movw	r3, #59680	; 0xe920
20004cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cb6:	f04f 0201 	mov.w	r2, #1
20004cba:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(get_pld_pkt_handle, uxPriority + 1);
20004cbe:	f64e 73b0 	movw	r3, #61360	; 0xefb0
20004cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cc6:	681a      	ldr	r2, [r3, #0]
20004cc8:	69bb      	ldr	r3, [r7, #24]
20004cca:	f103 0301 	add.w	r3, r3, #1
20004cce:	4610      	mov	r0, r2
20004cd0:	4619      	mov	r1, r3
20004cd2:	f7fd fb91 	bl	200023f8 <vTaskPrioritySet>
			vTask_Delay(HK_COLL_RATE);
20004cd6:	f04f 0001 	mov.w	r0, #1
20004cda:	f7fc f987 	bl	20000fec <vTask_Delay>

		}
20004cde:	e622      	b.n	20004926 <get_hk_data+0x4a>
	}
}
20004ce0:	f107 0724 	add.w	r7, r7, #36	; 0x24
20004ce4:	46bd      	mov	sp, r7
20004ce6:	bd90      	pop	{r4, r7, pc}

20004ce8 <get_pld_data>:

void get_pld_data(void* d1){
20004ce8:	b5b0      	push	{r4, r5, r7, lr}
20004cea:	b084      	sub	sp, #16
20004cec:	af00      	add	r7, sp, #0
20004cee:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(NULL);
20004cf0:	f04f 0000 	mov.w	r0, #0
20004cf4:	f7fd fb64 	bl	200023c0 <uxTaskPriorityGet>
20004cf8:	4603      	mov	r3, r0
20004cfa:	60bb      	str	r3, [r7, #8]

	if(feed_get_payload_data != pdFAIL){
20004cfc:	f64e 73d8 	movw	r3, #61400	; 0xefd8
20004d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d04:	681b      	ldr	r3, [r3, #0]
20004d06:	2b00      	cmp	r3, #0
20004d08:	d053      	beq.n	20004db2 <get_pld_data+0xca>

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
20004d0a:	f64e 0240 	movw	r2, #59456	; 0xe840
20004d0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004d12:	f64e 73e0 	movw	r3, #61408	; 0xefe0
20004d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d1a:	601a      	str	r2, [r3, #0]
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004d1c:	f04f 0300 	mov.w	r3, #0
20004d20:	73fb      	strb	r3, [r7, #15]
20004d22:	e02e      	b.n	20004d82 <get_pld_data+0x9a>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
20004d24:	f64e 73e0 	movw	r3, #61408	; 0xefe0
20004d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d2c:	681c      	ldr	r4, [r3, #0]
20004d2e:	7bfd      	ldrb	r5, [r7, #15]
20004d30:	7bbb      	ldrb	r3, [r7, #14]
20004d32:	7bfa      	ldrb	r2, [r7, #15]
20004d34:	f64e 701c 	movw	r0, #61212	; 0xef1c
20004d38:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d3c:	f04f 0121 	mov.w	r1, #33	; 0x21
20004d40:	f7fc f8ba 	bl	20000eb8 <get_ADC_value>
20004d44:	4603      	mov	r3, r0
20004d46:	4619      	mov	r1, r3
20004d48:	f105 0204 	add.w	r2, r5, #4
20004d4c:	f001 00ff 	and.w	r0, r1, #255	; 0xff
20004d50:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004d54:	4423      	add	r3, r4
20004d56:	f04f 0c00 	mov.w	ip, #0
20004d5a:	ea4c 0000 	orr.w	r0, ip, r0
20004d5e:	7198      	strb	r0, [r3, #6]
20004d60:	ea4f 2311 	mov.w	r3, r1, lsr #8
20004d64:	b298      	uxth	r0, r3
20004d66:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004d6a:	4423      	add	r3, r4
20004d6c:	f04f 0200 	mov.w	r2, #0
20004d70:	4611      	mov	r1, r2
20004d72:	4602      	mov	r2, r0
20004d74:	ea41 0202 	orr.w	r2, r1, r2
20004d78:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004d7a:	7bfb      	ldrb	r3, [r7, #15]
20004d7c:	f103 0301 	add.w	r3, r3, #1
20004d80:	73fb      	strb	r3, [r7, #15]
20004d82:	7bfb      	ldrb	r3, [r7, #15]
20004d84:	2b06      	cmp	r3, #6
20004d86:	d9cd      	bls.n	20004d24 <get_pld_data+0x3c>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
20004d88:	f64e 0340 	movw	r3, #59456	; 0xe840
20004d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d90:	f04f 0202 	mov.w	r2, #2
20004d94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(NULL, uxPriority - 2);
20004d98:	68bb      	ldr	r3, [r7, #8]
20004d9a:	f1a3 0302 	sub.w	r3, r3, #2
20004d9e:	f04f 0000 	mov.w	r0, #0
20004da2:	4619      	mov	r1, r3
20004da4:	f7fd fb28 	bl	200023f8 <vTaskPrioritySet>
			vTask_Delay(PLD_COLL_RATE);
20004da8:	f04f 0005 	mov.w	r0, #5
20004dac:	f7fc f91e 	bl	20000fec <vTask_Delay>

		}
20004db0:	e7b4      	b.n	20004d1c <get_pld_data+0x34>

	}
}
20004db2:	f107 0710 	add.w	r7, r7, #16
20004db6:	46bd      	mov	sp, r7
20004db8:	bdb0      	pop	{r4, r5, r7, pc}
20004dba:	bf00      	nop

20004dbc <vGetPktStruct>:


void vGetPktStruct(pkt_name_t pktname, void* pktdata, uint8_t pktsize){
20004dbc:	b580      	push	{r7, lr}
20004dbe:	b088      	sub	sp, #32
20004dc0:	af00      	add	r7, sp, #0
20004dc2:	60b9      	str	r1, [r7, #8]
20004dc4:	4613      	mov	r3, r2
20004dc6:	4602      	mov	r2, r0
20004dc8:	73fa      	strb	r2, [r7, #15]
20004dca:	71fb      	strb	r3, [r7, #7]

	pkt_t pkt;

	pkt.pkt_type = pktname;
20004dcc:	7bfb      	ldrb	r3, [r7, #15]
20004dce:	753b      	strb	r3, [r7, #20]
	pkt.pkt_data = pktdata;
20004dd0:	68bb      	ldr	r3, [r7, #8]
20004dd2:	61bb      	str	r3, [r7, #24]
	pkt.pkt_size = pktsize;
20004dd4:	79fb      	ldrb	r3, [r7, #7]
20004dd6:	773b      	strb	r3, [r7, #28]

//	xQueueSend(Data_PKT_Queue, &pkt, 0);

	// Storing the packets
	if(pkt_stream[pktname].rate != 0){
20004dd8:	7bf9      	ldrb	r1, [r7, #15]
20004dda:	f64e 5224 	movw	r2, #60708	; 0xed24
20004dde:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004de2:	460b      	mov	r3, r1
20004de4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20004de8:	440b      	add	r3, r1
20004dea:	ea4f 0343 	mov.w	r3, r3, lsl #1
20004dee:	4413      	add	r3, r2
20004df0:	f103 0310 	add.w	r3, r3, #16
20004df4:	881b      	ldrh	r3, [r3, #0]
20004df6:	2b00      	cmp	r3, #0
20004df8:	d011      	beq.n	20004e1e <vGetPktStruct+0x62>
		xQueueSend(Data_PKT_Queue, &pkt , 0);
20004dfa:	f64e 73dc 	movw	r3, #61404	; 0xefdc
20004dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e02:	681a      	ldr	r2, [r3, #0]
20004e04:	f107 0314 	add.w	r3, r7, #20
20004e08:	4610      	mov	r0, r2
20004e0a:	4619      	mov	r1, r3
20004e0c:	f04f 0200 	mov.w	r2, #0
20004e10:	f04f 0300 	mov.w	r3, #0
20004e14:	f7fc fcca 	bl	200017ac <xQueueGenericSend>
		vtlm_sender();
20004e18:	f000 f926 	bl	20005068 <vtlm_sender>
20004e1c:	e00e      	b.n	20004e3c <vGetPktStruct+0x80>
	}
	else{
		xQueueSend(Store_PKT_Queue, &pkt, 0);
20004e1e:	f64e 73a8 	movw	r3, #61352	; 0xefa8
20004e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e26:	681a      	ldr	r2, [r3, #0]
20004e28:	f107 0314 	add.w	r3, r7, #20
20004e2c:	4610      	mov	r0, r2
20004e2e:	4619      	mov	r1, r3
20004e30:	f04f 0200 	mov.w	r2, #0
20004e34:	f04f 0300 	mov.w	r3, #0
20004e38:	f7fc fcb8 	bl	200017ac <xQueueGenericSend>
	}

}
20004e3c:	f107 0720 	add.w	r7, r7, #32
20004e40:	46bd      	mov	sp, r7
20004e42:	bd80      	pop	{r7, pc}

20004e44 <vtlm_task>:

void vtlm_task(TimerHandle_t exp_timer){
20004e44:	b580      	push	{r7, lr}
20004e46:	b084      	sub	sp, #16
20004e48:	af00      	add	r7, sp, #0
20004e4a:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;  // Try to generalised this timer callback function. Also combine the tlm_task and the tlm_sender task.
20004e4c:	f04f 0300 	mov.w	r3, #0
20004e50:	817b      	strh	r3, [r7, #10]
	uint16_t* t_id;
	t_id = (uint16_t* )pvTimerGetTimerID(exp_timer);
20004e52:	6878      	ldr	r0, [r7, #4]
20004e54:	f7ff f878 	bl	20003f48 <pvTimerGetTimerID>
20004e58:	4603      	mov	r3, r0
20004e5a:	60fb      	str	r3, [r7, #12]
//
//	if(pkt_stream->pkt_timer_id == pkt_stream->pkt.pkt_type){
//
//	}

	if(t_id == 0){
20004e5c:	68fb      	ldr	r3, [r7, #12]
20004e5e:	2b00      	cmp	r3, #0
20004e60:	d17d      	bne.n	20004f5e <vtlm_task+0x11a>
		hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
20004e62:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e6a:	681b      	ldr	r3, [r3, #0]
20004e6c:	f04f 0200 	mov.w	r2, #0
20004e70:	f042 0208 	orr.w	r2, r2, #8
20004e74:	701a      	strb	r2, [r3, #0]
20004e76:	f04f 0200 	mov.w	r2, #0
20004e7a:	f042 0201 	orr.w	r2, r2, #1
20004e7e:	705a      	strb	r2, [r3, #1]
		hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004e80:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e88:	681a      	ldr	r2, [r3, #0]
20004e8a:	897b      	ldrh	r3, [r7, #10]
20004e8c:	f103 0301 	add.w	r3, r3, #1
20004e90:	817b      	strh	r3, [r7, #10]
20004e92:	897b      	ldrh	r3, [r7, #10]
20004e94:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004e98:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004e9c:	b29b      	uxth	r3, r3
20004e9e:	b29b      	uxth	r3, r3
20004ea0:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004ea4:	b299      	uxth	r1, r3
20004ea6:	897b      	ldrh	r3, [r7, #10]
20004ea8:	f103 0301 	add.w	r3, r3, #1
20004eac:	817b      	strh	r3, [r7, #10]
20004eae:	897b      	ldrh	r3, [r7, #10]
20004eb0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004eb4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004eb8:	b29b      	uxth	r3, r3
20004eba:	b29b      	uxth	r3, r3
20004ebc:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004ec0:	b29b      	uxth	r3, r3
20004ec2:	ea41 0303 	orr.w	r3, r1, r3
20004ec6:	b29b      	uxth	r3, r3
20004ec8:	b29b      	uxth	r3, r3
20004eca:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004ece:	f04f 0000 	mov.w	r0, #0
20004ed2:	ea40 0101 	orr.w	r1, r0, r1
20004ed6:	7091      	strb	r1, [r2, #2]
20004ed8:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004edc:	b29b      	uxth	r3, r3
20004ede:	f04f 0100 	mov.w	r1, #0
20004ee2:	ea41 0303 	orr.w	r3, r1, r3
20004ee6:	70d3      	strb	r3, [r2, #3]
		hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
20004ee8:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ef0:	681b      	ldr	r3, [r3, #0]
20004ef2:	f04f 0200 	mov.w	r2, #0
20004ef6:	711a      	strb	r2, [r3, #4]
20004ef8:	f04f 0200 	mov.w	r2, #0
20004efc:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
20004f00:	715a      	strb	r2, [r3, #5]
		hk_pkt->ccsds_s1 = 0;
20004f02:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f0a:	681b      	ldr	r3, [r3, #0]
20004f0c:	f04f 0200 	mov.w	r2, #0
20004f10:	719a      	strb	r2, [r3, #6]
20004f12:	f04f 0200 	mov.w	r2, #0
20004f16:	71da      	strb	r2, [r3, #7]
20004f18:	f04f 0200 	mov.w	r2, #0
20004f1c:	721a      	strb	r2, [r3, #8]
20004f1e:	f04f 0200 	mov.w	r2, #0
20004f22:	725a      	strb	r2, [r3, #9]
		hk_pkt->ccsds_s2 = 0;
20004f24:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f2c:	681b      	ldr	r3, [r3, #0]
20004f2e:	f04f 0200 	mov.w	r2, #0
20004f32:	729a      	strb	r2, [r3, #10]
20004f34:	f04f 0200 	mov.w	r2, #0
20004f38:	72da      	strb	r2, [r3, #11]
20004f3a:	f04f 0200 	mov.w	r2, #0
20004f3e:	731a      	strb	r2, [r3, #12]
20004f40:	f04f 0200 	mov.w	r2, #0
20004f44:	735a      	strb	r2, [r3, #13]

		vGetPktStruct( hk, (void*) hk_pkt, HK_PKT_LENGTH);
20004f46:	f64e 73b8 	movw	r3, #61368	; 0xefb8
20004f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f4e:	681b      	ldr	r3, [r3, #0]
20004f50:	f04f 0000 	mov.w	r0, #0
20004f54:	4619      	mov	r1, r3
20004f56:	f04f 022e 	mov.w	r2, #46	; 0x2e
20004f5a:	f7ff ff2f 	bl	20004dbc <vGetPktStruct>
	}
	if(t_id == 1){
20004f5e:	68fb      	ldr	r3, [r7, #12]
20004f60:	2b01      	cmp	r3, #1
20004f62:	d17d      	bne.n	20005060 <vtlm_task+0x21c>
		pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
20004f64:	f64e 73e0 	movw	r3, #61408	; 0xefe0
20004f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f6c:	681b      	ldr	r3, [r3, #0]
20004f6e:	f04f 0200 	mov.w	r2, #0
20004f72:	f042 0208 	orr.w	r2, r2, #8
20004f76:	701a      	strb	r2, [r3, #0]
20004f78:	f04f 0200 	mov.w	r2, #0
20004f7c:	f042 0202 	orr.w	r2, r2, #2
20004f80:	705a      	strb	r2, [r3, #1]
		pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004f82:	f64e 73e0 	movw	r3, #61408	; 0xefe0
20004f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f8a:	681a      	ldr	r2, [r3, #0]
20004f8c:	897b      	ldrh	r3, [r7, #10]
20004f8e:	f103 0301 	add.w	r3, r3, #1
20004f92:	817b      	strh	r3, [r7, #10]
20004f94:	897b      	ldrh	r3, [r7, #10]
20004f96:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004f9a:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004f9e:	b29b      	uxth	r3, r3
20004fa0:	b29b      	uxth	r3, r3
20004fa2:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004fa6:	b299      	uxth	r1, r3
20004fa8:	897b      	ldrh	r3, [r7, #10]
20004faa:	f103 0301 	add.w	r3, r3, #1
20004fae:	817b      	strh	r3, [r7, #10]
20004fb0:	897b      	ldrh	r3, [r7, #10]
20004fb2:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004fb6:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004fba:	b29b      	uxth	r3, r3
20004fbc:	b29b      	uxth	r3, r3
20004fbe:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004fc2:	b29b      	uxth	r3, r3
20004fc4:	ea41 0303 	orr.w	r3, r1, r3
20004fc8:	b29b      	uxth	r3, r3
20004fca:	b29b      	uxth	r3, r3
20004fcc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004fd0:	f04f 0000 	mov.w	r0, #0
20004fd4:	ea40 0101 	orr.w	r1, r0, r1
20004fd8:	7091      	strb	r1, [r2, #2]
20004fda:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004fde:	b29b      	uxth	r3, r3
20004fe0:	f04f 0100 	mov.w	r1, #0
20004fe4:	ea41 0303 	orr.w	r3, r1, r3
20004fe8:	70d3      	strb	r3, [r2, #3]
		pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
20004fea:	f64e 73e0 	movw	r3, #61408	; 0xefe0
20004fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ff2:	681b      	ldr	r3, [r3, #0]
20004ff4:	f04f 0200 	mov.w	r2, #0
20004ff8:	711a      	strb	r2, [r3, #4]
20004ffa:	f04f 0200 	mov.w	r2, #0
20004ffe:	f042 021e 	orr.w	r2, r2, #30
20005002:	715a      	strb	r2, [r3, #5]

		pld_pkt->ccsds_s1 = 0;
20005004:	f64e 73e0 	movw	r3, #61408	; 0xefe0
20005008:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000500c:	681b      	ldr	r3, [r3, #0]
2000500e:	f04f 0200 	mov.w	r2, #0
20005012:	719a      	strb	r2, [r3, #6]
20005014:	f04f 0200 	mov.w	r2, #0
20005018:	71da      	strb	r2, [r3, #7]
2000501a:	f04f 0200 	mov.w	r2, #0
2000501e:	721a      	strb	r2, [r3, #8]
20005020:	f04f 0200 	mov.w	r2, #0
20005024:	725a      	strb	r2, [r3, #9]
		pld_pkt->ccsds_s2 = 0;
20005026:	f64e 73e0 	movw	r3, #61408	; 0xefe0
2000502a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000502e:	681b      	ldr	r3, [r3, #0]
20005030:	f04f 0200 	mov.w	r2, #0
20005034:	729a      	strb	r2, [r3, #10]
20005036:	f04f 0200 	mov.w	r2, #0
2000503a:	72da      	strb	r2, [r3, #11]
2000503c:	f04f 0200 	mov.w	r2, #0
20005040:	731a      	strb	r2, [r3, #12]
20005042:	f04f 0200 	mov.w	r2, #0
20005046:	735a      	strb	r2, [r3, #13]

		vGetPktStruct(pld, (void* )pld_pkt, PLD_PKT_LENGTH);
20005048:	f64e 73e0 	movw	r3, #61408	; 0xefe0
2000504c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005050:	681b      	ldr	r3, [r3, #0]
20005052:	f04f 0001 	mov.w	r0, #1
20005056:	4619      	mov	r1, r3
20005058:	f04f 021e 	mov.w	r2, #30
2000505c:	f7ff feae 	bl	20004dbc <vGetPktStruct>
	}
	else{

	}
}
20005060:	f107 0710 	add.w	r7, r7, #16
20005064:	46bd      	mov	sp, r7
20005066:	bd80      	pop	{r7, pc}

20005068 <vtlm_sender>:


void vtlm_sender(void* d){
20005068:	b580      	push	{r7, lr}
2000506a:	b086      	sub	sp, #24
2000506c:	af00      	add	r7, sp, #0
2000506e:	6078      	str	r0, [r7, #4]

	pkt_t pkt_send;

//	pkt_stream(pkt_send);

	xQueueReceive(Data_PKT_Queue, &pkt_send, portMAX_DELAY);
20005070:	f64e 73dc 	movw	r3, #61404	; 0xefdc
20005074:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005078:	681a      	ldr	r2, [r3, #0]
2000507a:	f107 030c 	add.w	r3, r7, #12
2000507e:	4610      	mov	r0, r2
20005080:	4619      	mov	r1, r3
20005082:	f04f 32ff 	mov.w	r2, #4294967295
20005086:	f04f 0300 	mov.w	r3, #0
2000508a:	f7fc fd49 	bl	20001b20 <xQueueGenericReceive>

	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);
2000508e:	693b      	ldr	r3, [r7, #16]
20005090:	461a      	mov	r2, r3
20005092:	7d3b      	ldrb	r3, [r7, #20]
20005094:	f24f 002c 	movw	r0, #61484	; 0xf02c
20005098:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000509c:	4611      	mov	r1, r2
2000509e:	461a      	mov	r2, r3
200050a0:	f000 fb50 	bl	20005744 <MSS_UART_polled_tx>
//
//
//	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);


}
200050a4:	f107 0718 	add.w	r7, r7, #24
200050a8:	46bd      	mov	sp, r7
200050aa:	bd80      	pop	{r7, pc}

200050ac <irq_tsk_func>:
	}

}


void irq_tsk_func(void* f_param){
200050ac:	b580      	push	{r7, lr}
200050ae:	b084      	sub	sp, #16
200050b0:	af00      	add	r7, sp, #0
200050b2:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue;

	while(1){

		xTaskNotifyWait(0x00, 0, &ulNotifiedValue, portMAX_DELAY);
200050b4:	f107 030c 	add.w	r3, r7, #12
200050b8:	f04f 0000 	mov.w	r0, #0
200050bc:	f04f 0100 	mov.w	r1, #0
200050c0:	461a      	mov	r2, r3
200050c2:	f04f 33ff 	mov.w	r3, #4294967295
200050c6:	f7fe f9e5 	bl	20003494 <xTaskNotifyWait>
		ulTaskNotifyTake(pdTRUE, 1);
200050ca:	f04f 0001 	mov.w	r0, #1
200050ce:	f04f 0101 	mov.w	r1, #1
200050d2:	f7fe f97f 	bl	200033d4 <ulTaskNotifyTake>
		rx_cmd = (rx_cmd_t* ) f_param;
200050d6:	687a      	ldr	r2, [r7, #4]
200050d8:	f64e 5350 	movw	r3, #60752	; 0xed50
200050dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050e0:	601a      	str	r2, [r3, #0]


		if(cmd_valid(rx_cmd)){
200050e2:	f64e 5350 	movw	r3, #60752	; 0xed50
200050e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050ea:	681b      	ldr	r3, [r3, #0]
200050ec:	4618      	mov	r0, r3
200050ee:	f7fb ffaf 	bl	20001050 <cmd_valid>
200050f2:	4603      	mov	r3, r0
200050f4:	2b00      	cmp	r3, #0
200050f6:	d015      	beq.n	20005124 <irq_tsk_func+0x78>
			cmd_engine(rx_cmd);
200050f8:	f64e 5350 	movw	r3, #60752	; 0xed50
200050fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005100:	681b      	ldr	r3, [r3, #0]
20005102:	4618      	mov	r0, r3
20005104:	f7fc f88e 	bl	20001224 <cmd_engine>
			command_cnt++;
20005108:	f64e 73a4 	movw	r3, #61348	; 0xefa4
2000510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005110:	881b      	ldrh	r3, [r3, #0]
20005112:	f103 0301 	add.w	r3, r3, #1
20005116:	b29a      	uxth	r2, r3
20005118:	f64e 73a4 	movw	r3, #61348	; 0xefa4
2000511c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005120:	801a      	strh	r2, [r3, #0]
		else{
			command_reject_cnt++;
		}


	}
20005122:	e7c7      	b.n	200050b4 <irq_tsk_func+0x8>
		if(cmd_valid(rx_cmd)){
			cmd_engine(rx_cmd);
			command_cnt++;
		}
		else{
			command_reject_cnt++;
20005124:	f64e 73e4 	movw	r3, #61412	; 0xefe4
20005128:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000512c:	881b      	ldrh	r3, [r3, #0]
2000512e:	f103 0301 	add.w	r3, r3, #1
20005132:	b29a      	uxth	r2, r3
20005134:	f64e 73e4 	movw	r3, #61412	; 0xefe4
20005138:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000513c:	801a      	strh	r2, [r3, #0]
		}


	}
2000513e:	e7b9      	b.n	200050b4 <irq_tsk_func+0x8>

20005140 <uart0_rx_handler>:
}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
20005140:	b580      	push	{r7, lr}
20005142:	b084      	sub	sp, #16
20005144:	af00      	add	r7, sp, #0
20005146:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer, 8);
20005148:	6878      	ldr	r0, [r7, #4]
2000514a:	f64e 01e0 	movw	r1, #59616	; 0xe8e0
2000514e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005152:	f04f 0208 	mov.w	r2, #8
20005156:	f000 fb67 	bl	20005828 <MSS_UART_get_rx>
2000515a:	4602      	mov	r2, r0
2000515c:	f64e 131c 	movw	r3, #59676	; 0xe91c
20005160:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005164:	601a      	str	r2, [r3, #0]

	BaseType_t xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
20005166:	f04f 0300 	mov.w	r3, #0
2000516a:	60fb      	str	r3, [r7, #12]

	 vTaskNotifyGiveFromISR(uart_irq, &xHigherPriorityTaskWoken);
2000516c:	f64e 033c 	movw	r3, #59452	; 0xe83c
20005170:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005174:	681a      	ldr	r2, [r3, #0]
20005176:	f107 030c 	add.w	r3, r7, #12
2000517a:	4610      	mov	r0, r2
2000517c:	4619      	mov	r1, r3
2000517e:	f7fe fa01 	bl	20003584 <vTaskNotifyGiveFromISR>

	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
20005182:	68fb      	ldr	r3, [r7, #12]
20005184:	2b00      	cmp	r3, #0
20005186:	d00a      	beq.n	2000519e <uart0_rx_handler+0x5e>
20005188:	f64e 5304 	movw	r3, #60676	; 0xed04
2000518c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20005194:	601a      	str	r2, [r3, #0]
20005196:	f3bf 8f4f 	dsb	sy
2000519a:	f3bf 8f6f 	isb	sy

}
2000519e:	f107 0710 	add.w	r7, r7, #16
200051a2:	46bd      	mov	sp, r7
200051a4:	bd80      	pop	{r7, pc}
200051a6:	bf00      	nop

200051a8 <demo_tasks>:
//	 }
//}



void demo_tasks(void){
200051a8:	b590      	push	{r4, r7, lr}
200051aa:	b08d      	sub	sp, #52	; 0x34
200051ac:	af02      	add	r7, sp, #8

		uint8_t REF_DATA[3] = {0x38, 0x00, 0x00};
200051ae:	f04f 0338 	mov.w	r3, #56	; 0x38
200051b2:	743b      	strb	r3, [r7, #16]
200051b4:	f04f 0300 	mov.w	r3, #0
200051b8:	747b      	strb	r3, [r7, #17]
200051ba:	f04f 0300 	mov.w	r3, #0
200051be:	74bb      	strb	r3, [r7, #18]
		uint8_t PWR[3] = {0x20, 0x00, 0x0F};
200051c0:	f248 428c 	movw	r2, #33932	; 0x848c
200051c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
200051c8:	f107 030c 	add.w	r3, r7, #12
200051cc:	6812      	ldr	r2, [r2, #0]
200051ce:	4611      	mov	r1, r2
200051d0:	8019      	strh	r1, [r3, #0]
200051d2:	f103 0302 	add.w	r3, r3, #2
200051d6:	ea4f 4212 	mov.w	r2, r2, lsr #16
200051da:	701a      	strb	r2, [r3, #0]
		uint8_t config[3] = {0x30, 0x00, 0x01};
200051dc:	f248 4290 	movw	r2, #33936	; 0x8490
200051e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
200051e4:	f107 0308 	add.w	r3, r7, #8
200051e8:	6812      	ldr	r2, [r2, #0]
200051ea:	4611      	mov	r1, r2
200051ec:	8019      	strh	r1, [r3, #0]
200051ee:	f103 0302 	add.w	r3, r3, #2
200051f2:	ea4f 4212 	mov.w	r2, r2, lsr #16
200051f6:	701a      	strb	r2, [r3, #0]
		uint8_t sw_clear[3] = {0x28, 0x00, 0x01};
200051f8:	f248 4294 	movw	r2, #33940	; 0x8494
200051fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005200:	f107 0304 	add.w	r3, r7, #4
20005204:	6812      	ldr	r2, [r2, #0]
20005206:	4611      	mov	r1, r2
20005208:	8019      	strh	r1, [r3, #0]
2000520a:	f103 0302 	add.w	r3, r3, #2
2000520e:	ea4f 4212 	mov.w	r2, r2, lsr #16
20005212:	701a      	strb	r2, [r3, #0]
		i2c_status_t status;

//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
20005214:	f64e 4320 	movw	r3, #60448	; 0xec20
20005218:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000521c:	617b      	str	r3, [r7, #20]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
2000521e:	f248 43c8 	movw	r3, #33992	; 0x84c8
20005222:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005226:	61bb      	str	r3, [r7, #24]
		imu_ptr->init = &init;
20005228:	697a      	ldr	r2, [r7, #20]
2000522a:	f640 7359 	movw	r3, #3929	; 0xf59
2000522e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005232:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
20005234:	697b      	ldr	r3, [r7, #20]
20005236:	681b      	ldr	r3, [r3, #0]
20005238:	f04f 0000 	mov.w	r0, #0
2000523c:	69b9      	ldr	r1, [r7, #24]
2000523e:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
20005240:	f64e 701c 	movw	r0, #61212	; 0xef1c
20005244:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005248:	f244 0100 	movw	r1, #16384	; 0x4000
2000524c:	f2c5 0100 	movt	r1, #20480	; 0x5000
20005250:	f04f 0221 	mov.w	r2, #33	; 0x21
20005254:	f04f 0300 	mov.w	r3, #0
20005258:	f001 fd3e 	bl	20006cd8 <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
2000525c:	f64e 4320 	movw	r3, #60448	; 0xec20
20005260:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005264:	61fb      	str	r3, [r7, #28]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
20005266:	f248 43e8 	movw	r3, #34024	; 0x84e8
2000526a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000526e:	623b      	str	r3, [r7, #32]
		vc_ptr->init = &init;
20005270:	69fa      	ldr	r2, [r7, #28]
20005272:	f640 7359 	movw	r3, #3929	; 0xf59
20005276:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000527a:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
2000527c:	69fb      	ldr	r3, [r7, #28]
2000527e:	681b      	ldr	r3, [r3, #0]
20005280:	f04f 000a 	mov.w	r0, #10
20005284:	6a39      	ldr	r1, [r7, #32]
20005286:	4798      	blx	r3

		Data_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t));  //Common queue for all packets data storage
20005288:	f04f 0003 	mov.w	r0, #3
2000528c:	f04f 010c 	mov.w	r1, #12
20005290:	f04f 0200 	mov.w	r2, #0
20005294:	f7fc f9ec 	bl	20001670 <xQueueGenericCreate>
20005298:	4602      	mov	r2, r0
2000529a:	f64e 73dc 	movw	r3, #61404	; 0xefdc
2000529e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052a2:	601a      	str	r2, [r3, #0]
		Store_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t)); // Queue from which the data will be stored to the storage
200052a4:	f04f 0003 	mov.w	r0, #3
200052a8:	f04f 010c 	mov.w	r1, #12
200052ac:	f04f 0200 	mov.w	r2, #0
200052b0:	f7fc f9de 	bl	20001670 <xQueueGenericCreate>
200052b4:	4602      	mov	r2, r0
200052b6:	f64e 73a8 	movw	r3, #61352	; 0xefa8
200052ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052be:	601a      	str	r2, [r3, #0]

		set_pktRate(hk, HK_PKT_PERIOD);   //Set all the default packet rate
200052c0:	f04f 0000 	mov.w	r0, #0
200052c4:	f04f 0103 	mov.w	r1, #3
200052c8:	f7fb f8cc 	bl	20000464 <set_pktRate>
		set_pktRate(pld, PLD_PKT_PERIOD);
200052cc:	f04f 0001 	mov.w	r0, #1
200052d0:	f04f 010a 	mov.w	r1, #10
200052d4:	f7fb f8c6 	bl	20000464 <set_pktRate>
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		NVIC_EnableIRQ(UART0_IRQn);
200052d8:	f04f 000a 	mov.w	r0, #10
200052dc:	f7ff fab4 	bl	20004848 <NVIC_EnableIRQ>
		NVIC_SetPriority(UART0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1);
200052e0:	f04f 000a 	mov.w	r0, #10
200052e4:	f04f 019f 	mov.w	r1, #159	; 0x9f
200052e8:	f7ff faca 	bl	20004880 <NVIC_SetPriority>


		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
200052ec:	f24f 002c 	movw	r0, #61484	; 0xf02c
200052f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200052f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
200052f8:	f04f 0203 	mov.w	r2, #3
200052fc:	f000 f9e0 	bl	200056c0 <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_FIFO_EIGHT_BYTES);
20005300:	f24f 002c 	movw	r0, #61484	; 0xf02c
20005304:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005308:	f245 1141 	movw	r1, #20801	; 0x5141
2000530c:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005310:	f04f 0280 	mov.w	r2, #128	; 0x80
20005314:	f000 faf6 	bl	20005904 <MSS_UART_set_rx_handler>
//		init_demo(imu);
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;


	 xMutex = xSemaphoreCreateMutex();
20005318:	f04f 0001 	mov.w	r0, #1
2000531c:	f7fc fa2a 	bl	20001774 <xQueueCreateMutex>
20005320:	4602      	mov	r2, r0
20005322:	f64e 73c8 	movw	r3, #61384	; 0xefc8
20005326:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000532a:	601a      	str	r2, [r3, #0]
//	 xTaskCreate(get_imu_data, "IMU", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(get_vc_data, "VC", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(pktmngr, "Packet", configMINIMAL_STACK_SIZE, (void*) data, 1, NULL);


		feed_get_hk_data = xTaskCreate(get_hk_data, "HK", configMINIMAL_STACK_SIZE, (void*)data , 2, &get_hk_pkt_handle);
2000532c:	f04f 0302 	mov.w	r3, #2
20005330:	9300      	str	r3, [sp, #0]
20005332:	f64e 73d4 	movw	r3, #61396	; 0xefd4
20005336:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000533a:	9301      	str	r3, [sp, #4]
2000533c:	f644 00dd 	movw	r0, #18653	; 0x48dd
20005340:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005344:	f248 4168 	movw	r1, #33896	; 0x8468
20005348:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000534c:	f04f 0250 	mov.w	r2, #80	; 0x50
20005350:	f64e 1320 	movw	r3, #59680	; 0xe920
20005354:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005358:	f7fc fe7c 	bl	20002054 <xTaskCreate>
2000535c:	4602      	mov	r2, r0
2000535e:	f64e 73cc 	movw	r3, #61388	; 0xefcc
20005362:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005366:	601a      	str	r2, [r3, #0]

		feed_get_payload_data = xTaskCreate(get_pld_data, "Payload", configMINIMAL_STACK_SIZE, (void* )data, 1, &get_pld_pkt_handle);
20005368:	f04f 0301 	mov.w	r3, #1
2000536c:	9300      	str	r3, [sp, #0]
2000536e:	f64e 73b0 	movw	r3, #61360	; 0xefb0
20005372:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005376:	9301      	str	r3, [sp, #4]
20005378:	f644 40e9 	movw	r0, #19689	; 0x4ce9
2000537c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005380:	f248 416c 	movw	r1, #33900	; 0x846c
20005384:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005388:	f04f 0250 	mov.w	r2, #80	; 0x50
2000538c:	f64e 1320 	movw	r3, #59680	; 0xe920
20005390:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005394:	f7fc fe5e 	bl	20002054 <xTaskCreate>
20005398:	4602      	mov	r2, r0
2000539a:	f64e 73d8 	movw	r3, #61400	; 0xefd8
2000539e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053a2:	601a      	str	r2, [r3, #0]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);
200053a4:	f04f 0303 	mov.w	r3, #3
200053a8:	9300      	str	r3, [sp, #0]
200053aa:	f64e 033c 	movw	r3, #59452	; 0xe83c
200053ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053b2:	9301      	str	r3, [sp, #4]
200053b4:	f245 00ad 	movw	r0, #20653	; 0x50ad
200053b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200053bc:	f248 4174 	movw	r1, #33908	; 0x8474
200053c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
200053c4:	f04f 0250 	mov.w	r2, #80	; 0x50
200053c8:	f64e 03e0 	movw	r3, #59616	; 0xe8e0
200053cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053d0:	f7fc fe40 	bl	20002054 <xTaskCreate>

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
200053d4:	f04f 0300 	mov.w	r3, #0
200053d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
200053dc:	e08e      	b.n	200054fc <demo_tasks+0x354>
			if(pkt_stream[i].rate != DEFAULT_ZERO_TIMER_PERIOD* 1000){
200053de:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
200053e2:	f64e 5224 	movw	r2, #60708	; 0xed24
200053e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
200053ea:	460b      	mov	r3, r1
200053ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200053f0:	440b      	add	r3, r1
200053f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
200053f6:	4413      	add	r3, r2
200053f8:	f103 0310 	add.w	r3, r3, #16
200053fc:	881a      	ldrh	r2, [r3, #0]
200053fe:	f242 7310 	movw	r3, #10000	; 0x2710
20005402:	429a      	cmp	r2, r3
20005404:	d045      	beq.n	20005492 <demo_tasks+0x2ea>
				pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )i, vtlm_task);
20005406:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
2000540a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
2000540e:	f64e 5224 	movw	r2, #60708	; 0xed24
20005412:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005416:	460b      	mov	r3, r1
20005418:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000541c:	440b      	add	r3, r1
2000541e:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005422:	4413      	add	r3, r2
20005424:	f103 0310 	add.w	r3, r3, #16
20005428:	881b      	ldrh	r3, [r3, #0]
2000542a:	4618      	mov	r0, r3
2000542c:	f7fb fdf8 	bl	20001020 <xMsToTicks>
20005430:	4602      	mov	r2, r0
20005432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005436:	469c      	mov	ip, r3
20005438:	f644 6345 	movw	r3, #20037	; 0x4e45
2000543c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005440:	9300      	str	r3, [sp, #0]
20005442:	f248 4080 	movw	r0, #33920	; 0x8480
20005446:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000544a:	4611      	mov	r1, r2
2000544c:	f04f 0201 	mov.w	r2, #1
20005450:	4663      	mov	r3, ip
20005452:	f7fe f9ff 	bl	20003854 <xTimerCreate>
20005456:	4602      	mov	r2, r0
20005458:	f64e 5348 	movw	r3, #60744	; 0xed48
2000545c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005460:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	//			vTimerSetTimerID(pkt_timer[i], (void* )i);
				xTimerStart(pkt_timer[i], 0);
20005464:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
20005468:	f64e 5348 	movw	r3, #60744	; 0xed48
2000546c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005470:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
20005474:	f7fd f9dc 	bl	20002830 <xTaskGetTickCount>
20005478:	4603      	mov	r3, r0
2000547a:	f04f 0200 	mov.w	r2, #0
2000547e:	9200      	str	r2, [sp, #0]
20005480:	4620      	mov	r0, r4
20005482:	f04f 0101 	mov.w	r1, #1
20005486:	461a      	mov	r2, r3
20005488:	f04f 0300 	mov.w	r3, #0
2000548c:	f7fe fa34 	bl	200038f8 <xTimerGenericCommand>
20005490:	e02e      	b.n	200054f0 <demo_tasks+0x348>
			}
			else{
				pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )i, vtlm_task);
20005492:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
20005496:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
2000549a:	f64e 5224 	movw	r2, #60708	; 0xed24
2000549e:	f2c2 0200 	movt	r2, #8192	; 0x2000
200054a2:	460b      	mov	r3, r1
200054a4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200054a8:	440b      	add	r3, r1
200054aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
200054ae:	4413      	add	r3, r2
200054b0:	f103 0310 	add.w	r3, r3, #16
200054b4:	881b      	ldrh	r3, [r3, #0]
200054b6:	4618      	mov	r0, r3
200054b8:	f7fb fdb2 	bl	20001020 <xMsToTicks>
200054bc:	4602      	mov	r2, r0
200054be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200054c2:	469c      	mov	ip, r3
200054c4:	f644 6345 	movw	r3, #20037	; 0x4e45
200054c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200054cc:	9300      	str	r3, [sp, #0]
200054ce:	f248 4080 	movw	r0, #33920	; 0x8480
200054d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200054d6:	4611      	mov	r1, r2
200054d8:	f04f 0201 	mov.w	r2, #1
200054dc:	4663      	mov	r3, ip
200054de:	f7fe f9b9 	bl	20003854 <xTimerCreate>
200054e2:	4602      	mov	r2, r0
200054e4:	f64e 5348 	movw	r3, #60744	; 0xed48
200054e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200054ec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
200054f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200054f4:	f103 0301 	add.w	r3, r3, #1
200054f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
200054fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005500:	2b01      	cmp	r3, #1
20005502:	f67f af6c 	bls.w	200053de <demo_tasks+0x236>
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
20005506:	f7fd f857 	bl	200025b8 <vTaskStartScheduler>

}
2000550a:	f107 072c 	add.w	r7, r7, #44	; 0x2c
2000550e:	46bd      	mov	sp, r7
20005510:	bd90      	pop	{r4, r7, pc}
20005512:	bf00      	nop

20005514 <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
20005514:	b580      	push	{r7, lr}
20005516:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
20005518:	f64e 5064 	movw	r0, #60772	; 0xed64
2000551c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005520:	f001 fe00 	bl	20007124 <I2C_isr>
}
20005524:	bd80      	pop	{r7, pc}
20005526:	bf00      	nop

20005528 <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
20005528:	b580      	push	{r7, lr}
2000552a:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
2000552c:	f64e 50d0 	movw	r0, #60880	; 0xedd0
20005530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005534:	f001 fdf6 	bl	20007124 <I2C_isr>
}
20005538:	bd80      	pop	{r7, pc}
2000553a:	bf00      	nop

2000553c <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
2000553c:	b580      	push	{r7, lr}
2000553e:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
20005540:	f64e 0074 	movw	r0, #59508	; 0xe874
20005544:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005548:	f001 fdec 	bl	20007124 <I2C_isr>
}
2000554c:	bd80      	pop	{r7, pc}
2000554e:	bf00      	nop

20005550 <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
20005550:	b580      	push	{r7, lr}
20005552:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
20005554:	f64e 60a8 	movw	r0, #61096	; 0xeea8
20005558:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000555c:	f001 fde2 	bl	20007124 <I2C_isr>
}
20005560:	bd80      	pop	{r7, pc}
20005562:	bf00      	nop

20005564 <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
20005564:	b580      	push	{r7, lr}
20005566:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
20005568:	f64e 701c 	movw	r0, #61212	; 0xef1c
2000556c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005570:	f001 fdd8 	bl	20007124 <I2C_isr>
}
20005574:	bd80      	pop	{r7, pc}
20005576:	bf00      	nop

20005578 <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
20005578:	b580      	push	{r7, lr}
2000557a:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
2000557c:	f64e 603c 	movw	r0, #60988	; 0xee3c
20005580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005584:	f001 fdce 	bl	20007124 <I2C_isr>
}
20005588:	bd80      	pop	{r7, pc}
2000558a:	bf00      	nop

2000558c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000558c:	b480      	push	{r7}
2000558e:	b083      	sub	sp, #12
20005590:	af00      	add	r7, sp, #0
20005592:	4603      	mov	r3, r0
20005594:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20005596:	f24e 1300 	movw	r3, #57600	; 0xe100
2000559a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000559e:	f997 2007 	ldrsb.w	r2, [r7, #7]
200055a2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200055a6:	79f9      	ldrb	r1, [r7, #7]
200055a8:	f001 011f 	and.w	r1, r1, #31
200055ac:	f04f 0001 	mov.w	r0, #1
200055b0:	fa00 f101 	lsl.w	r1, r0, r1
200055b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200055b8:	f107 070c 	add.w	r7, r7, #12
200055bc:	46bd      	mov	sp, r7
200055be:	bc80      	pop	{r7}
200055c0:	4770      	bx	lr
200055c2:	bf00      	nop

200055c4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200055c4:	b480      	push	{r7}
200055c6:	b083      	sub	sp, #12
200055c8:	af00      	add	r7, sp, #0
200055ca:	4603      	mov	r3, r0
200055cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200055ce:	f24e 1300 	movw	r3, #57600	; 0xe100
200055d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200055d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
200055da:	ea4f 1252 	mov.w	r2, r2, lsr #5
200055de:	79f9      	ldrb	r1, [r7, #7]
200055e0:	f001 011f 	and.w	r1, r1, #31
200055e4:	f04f 0001 	mov.w	r0, #1
200055e8:	fa00 f101 	lsl.w	r1, r0, r1
200055ec:	f102 0260 	add.w	r2, r2, #96	; 0x60
200055f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200055f4:	f107 070c 	add.w	r7, r7, #12
200055f8:	46bd      	mov	sp, r7
200055fa:	bc80      	pop	{r7}
200055fc:	4770      	bx	lr
200055fe:	bf00      	nop

20005600 <set_bit_reg8>:
static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005600:	b480      	push	{r7}
20005602:	b083      	sub	sp, #12
20005604:	af00      	add	r7, sp, #0
20005606:	6078      	str	r0, [r7, #4]
20005608:	460b      	mov	r3, r1
2000560a:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x1;
2000560c:	687b      	ldr	r3, [r7, #4]
2000560e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005612:	687b      	ldr	r3, [r7, #4]
20005614:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005618:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000561c:	ea4f 1343 	mov.w	r3, r3, lsl #5
20005620:	441a      	add	r2, r3
20005622:	78fb      	ldrb	r3, [r7, #3]
20005624:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005628:	4413      	add	r3, r2
2000562a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000562e:	f04f 0201 	mov.w	r2, #1
20005632:	601a      	str	r2, [r3, #0]
}
20005634:	f107 070c 	add.w	r7, r7, #12
20005638:	46bd      	mov	sp, r7
2000563a:	bc80      	pop	{r7}
2000563c:	4770      	bx	lr
2000563e:	bf00      	nop

20005640 <clear_bit_reg8>:
static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005640:	b480      	push	{r7}
20005642:	b083      	sub	sp, #12
20005644:	af00      	add	r7, sp, #0
20005646:	6078      	str	r0, [r7, #4]
20005648:	460b      	mov	r3, r1
2000564a:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x0;
2000564c:	687b      	ldr	r3, [r7, #4]
2000564e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005652:	687b      	ldr	r3, [r7, #4]
20005654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005658:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000565c:	ea4f 1343 	mov.w	r3, r3, lsl #5
20005660:	441a      	add	r2, r3
20005662:	78fb      	ldrb	r3, [r7, #3]
20005664:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005668:	4413      	add	r3, r2
2000566a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000566e:	f04f 0200 	mov.w	r2, #0
20005672:	601a      	str	r2, [r3, #0]
}
20005674:	f107 070c 	add.w	r7, r7, #12
20005678:	46bd      	mov	sp, r7
2000567a:	bc80      	pop	{r7}
2000567c:	4770      	bx	lr
2000567e:	bf00      	nop

20005680 <read_bit_reg8>:
static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005680:	b480      	push	{r7}
20005682:	b083      	sub	sp, #12
20005684:	af00      	add	r7, sp, #0
20005686:	6078      	str	r0, [r7, #4]
20005688:	460b      	mov	r3, r1
2000568a:	70fb      	strb	r3, [r7, #3]
    return (HW_REG_BIT(reg,bit));
2000568c:	687b      	ldr	r3, [r7, #4]
2000568e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005692:	687b      	ldr	r3, [r7, #4]
20005694:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005698:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000569c:	ea4f 1343 	mov.w	r3, r3, lsl #5
200056a0:	441a      	add	r2, r3
200056a2:	78fb      	ldrb	r3, [r7, #3]
200056a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200056a8:	4413      	add	r3, r2
200056aa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200056ae:	681b      	ldr	r3, [r3, #0]
200056b0:	b2db      	uxtb	r3, r3
}
200056b2:	4618      	mov	r0, r3
200056b4:	f107 070c 	add.w	r7, r7, #12
200056b8:	46bd      	mov	sp, r7
200056ba:	bc80      	pop	{r7}
200056bc:	4770      	bx	lr
200056be:	bf00      	nop

200056c0 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
200056c0:	b580      	push	{r7, lr}
200056c2:	b084      	sub	sp, #16
200056c4:	af00      	add	r7, sp, #0
200056c6:	60f8      	str	r0, [r7, #12]
200056c8:	60b9      	str	r1, [r7, #8]
200056ca:	4613      	mov	r3, r2
200056cc:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200056ce:	68fa      	ldr	r2, [r7, #12]
200056d0:	f24f 032c 	movw	r3, #61484	; 0xf02c
200056d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056d8:	429a      	cmp	r2, r3
200056da:	d007      	beq.n	200056ec <MSS_UART_init+0x2c>
200056dc:	68fa      	ldr	r2, [r7, #12]
200056de:	f64e 73ec 	movw	r3, #61420	; 0xefec
200056e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056e6:	429a      	cmp	r2, r3
200056e8:	d000      	beq.n	200056ec <MSS_UART_init+0x2c>
200056ea:	be00      	bkpt	0x0000

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
200056ec:	79fb      	ldrb	r3, [r7, #7]
200056ee:	68f8      	ldr	r0, [r7, #12]
200056f0:	68b9      	ldr	r1, [r7, #8]
200056f2:	461a      	mov	r2, r3
200056f4:	f000 fa56 	bl	20005ba4 <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
200056f8:	68fb      	ldr	r3, [r7, #12]
200056fa:	681b      	ldr	r3, [r3, #0]
200056fc:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005700:	4618      	mov	r0, r3
20005702:	f04f 0103 	mov.w	r1, #3
20005706:	f7ff ff9b 	bl	20005640 <clear_bit_reg8>

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
2000570a:	68fb      	ldr	r3, [r7, #12]
2000570c:	681b      	ldr	r3, [r3, #0]
2000570e:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005712:	4618      	mov	r0, r3
20005714:	f04f 0102 	mov.w	r1, #2
20005718:	f7ff ff92 	bl	20005640 <clear_bit_reg8>

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
2000571c:	68fb      	ldr	r3, [r7, #12]
2000571e:	681b      	ldr	r3, [r3, #0]
20005720:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005724:	4618      	mov	r0, r3
20005726:	f04f 0100 	mov.w	r1, #0
2000572a:	f7ff ff89 	bl	20005640 <clear_bit_reg8>

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
2000572e:	68fa      	ldr	r2, [r7, #12]
20005730:	f246 033d 	movw	r3, #24637	; 0x603d
20005734:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005738:	6253      	str	r3, [r2, #36]	; 0x24
}
2000573a:	f107 0710 	add.w	r7, r7, #16
2000573e:	46bd      	mov	sp, r7
20005740:	bd80      	pop	{r7, pc}
20005742:	bf00      	nop

20005744 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20005744:	b480      	push	{r7}
20005746:	b089      	sub	sp, #36	; 0x24
20005748:	af00      	add	r7, sp, #0
2000574a:	60f8      	str	r0, [r7, #12]
2000574c:	60b9      	str	r1, [r7, #8]
2000574e:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0u;
20005750:	f04f 0300 	mov.w	r3, #0
20005754:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005756:	68fa      	ldr	r2, [r7, #12]
20005758:	f24f 032c 	movw	r3, #61484	; 0xf02c
2000575c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005760:	429a      	cmp	r2, r3
20005762:	d007      	beq.n	20005774 <MSS_UART_polled_tx+0x30>
20005764:	68fa      	ldr	r2, [r7, #12]
20005766:	f64e 73ec 	movw	r3, #61420	; 0xefec
2000576a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000576e:	429a      	cmp	r2, r3
20005770:	d000      	beq.n	20005774 <MSS_UART_polled_tx+0x30>
20005772:	be00      	bkpt	0x0000
    ASSERT(pbuff != ( (uint8_t *)0));
20005774:	68bb      	ldr	r3, [r7, #8]
20005776:	2b00      	cmp	r3, #0
20005778:	d100      	bne.n	2000577c <MSS_UART_polled_tx+0x38>
2000577a:	be00      	bkpt	0x0000
    ASSERT(tx_size > 0u);
2000577c:	687b      	ldr	r3, [r7, #4]
2000577e:	2b00      	cmp	r3, #0
20005780:	d100      	bne.n	20005784 <MSS_UART_polled_tx+0x40>
20005782:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005784:	68fa      	ldr	r2, [r7, #12]
20005786:	f24f 032c 	movw	r3, #61484	; 0xf02c
2000578a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000578e:	429a      	cmp	r2, r3
20005790:	d006      	beq.n	200057a0 <MSS_UART_polled_tx+0x5c>
20005792:	68fa      	ldr	r2, [r7, #12]
20005794:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005798:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000579c:	429a      	cmp	r2, r3
2000579e:	d13d      	bne.n	2000581c <MSS_UART_polled_tx+0xd8>
200057a0:	68bb      	ldr	r3, [r7, #8]
200057a2:	2b00      	cmp	r3, #0
200057a4:	d03a      	beq.n	2000581c <MSS_UART_polled_tx+0xd8>
200057a6:	687b      	ldr	r3, [r7, #4]
200057a8:	2b00      	cmp	r3, #0
200057aa:	d037      	beq.n	2000581c <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
200057ac:	68fb      	ldr	r3, [r7, #12]
200057ae:	681b      	ldr	r3, [r3, #0]
200057b0:	7d1b      	ldrb	r3, [r3, #20]
200057b2:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
200057b4:	68fb      	ldr	r3, [r7, #12]
200057b6:	7b5a      	ldrb	r2, [r3, #13]
200057b8:	7efb      	ldrb	r3, [r7, #27]
200057ba:	ea42 0303 	orr.w	r3, r2, r3
200057be:	b2da      	uxtb	r2, r3
200057c0:	68fb      	ldr	r3, [r7, #12]
200057c2:	735a      	strb	r2, [r3, #13]

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
200057c4:	7efb      	ldrb	r3, [r7, #27]
200057c6:	f003 0320 	and.w	r3, r3, #32
200057ca:	2b00      	cmp	r3, #0
200057cc:	d023      	beq.n	20005816 <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
200057ce:	f04f 0310 	mov.w	r3, #16
200057d2:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
200057d4:	687b      	ldr	r3, [r7, #4]
200057d6:	2b0f      	cmp	r3, #15
200057d8:	d801      	bhi.n	200057de <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
200057da:	687b      	ldr	r3, [r7, #4]
200057dc:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
200057de:	f04f 0300 	mov.w	r3, #0
200057e2:	617b      	str	r3, [r7, #20]
200057e4:	e00e      	b.n	20005804 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
200057e6:	68fb      	ldr	r3, [r7, #12]
200057e8:	681b      	ldr	r3, [r3, #0]
200057ea:	68b9      	ldr	r1, [r7, #8]
200057ec:	693a      	ldr	r2, [r7, #16]
200057ee:	440a      	add	r2, r1
200057f0:	7812      	ldrb	r2, [r2, #0]
200057f2:	701a      	strb	r2, [r3, #0]
                    char_idx++;
200057f4:	693b      	ldr	r3, [r7, #16]
200057f6:	f103 0301 	add.w	r3, r3, #1
200057fa:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
200057fc:	697b      	ldr	r3, [r7, #20]
200057fe:	f103 0301 	add.w	r3, r3, #1
20005802:	617b      	str	r3, [r7, #20]
20005804:	697a      	ldr	r2, [r7, #20]
20005806:	69fb      	ldr	r3, [r7, #28]
20005808:	429a      	cmp	r2, r3
2000580a:	d3ec      	bcc.n	200057e6 <MSS_UART_polled_tx+0xa2>
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
2000580c:	687a      	ldr	r2, [r7, #4]
2000580e:	697b      	ldr	r3, [r7, #20]
20005810:	ebc3 0302 	rsb	r3, r3, r2
20005814:	607b      	str	r3, [r7, #4]
            }
        } while(tx_size);
20005816:	687b      	ldr	r3, [r7, #4]
20005818:	2b00      	cmp	r3, #0
2000581a:	d1c7      	bne.n	200057ac <MSS_UART_polled_tx+0x68>
    }
}
2000581c:	f107 0724 	add.w	r7, r7, #36	; 0x24
20005820:	46bd      	mov	sp, r7
20005822:	bc80      	pop	{r7}
20005824:	4770      	bx	lr
20005826:	bf00      	nop

20005828 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20005828:	b480      	push	{r7}
2000582a:	b087      	sub	sp, #28
2000582c:	af00      	add	r7, sp, #0
2000582e:	60f8      	str	r0, [r7, #12]
20005830:	60b9      	str	r1, [r7, #8]
20005832:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0u;
20005834:	f04f 0300 	mov.w	r3, #0
20005838:	613b      	str	r3, [r7, #16]
    uint8_t status = 0u;
2000583a:	f04f 0300 	mov.w	r3, #0
2000583e:	75fb      	strb	r3, [r7, #23]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005840:	68fa      	ldr	r2, [r7, #12]
20005842:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005846:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000584a:	429a      	cmp	r2, r3
2000584c:	d007      	beq.n	2000585e <MSS_UART_get_rx+0x36>
2000584e:	68fa      	ldr	r2, [r7, #12]
20005850:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005854:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005858:	429a      	cmp	r2, r3
2000585a:	d000      	beq.n	2000585e <MSS_UART_get_rx+0x36>
2000585c:	be00      	bkpt	0x0000
    ASSERT(rx_buff != ((uint8_t *)0));
2000585e:	68bb      	ldr	r3, [r7, #8]
20005860:	2b00      	cmp	r3, #0
20005862:	d100      	bne.n	20005866 <MSS_UART_get_rx+0x3e>
20005864:	be00      	bkpt	0x0000
    ASSERT(buff_size > 0u);
20005866:	687b      	ldr	r3, [r7, #4]
20005868:	2b00      	cmp	r3, #0
2000586a:	d100      	bne.n	2000586e <MSS_UART_get_rx+0x46>
2000586c:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
2000586e:	68fa      	ldr	r2, [r7, #12]
20005870:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005874:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005878:	429a      	cmp	r2, r3
2000587a:	d006      	beq.n	2000588a <MSS_UART_get_rx+0x62>
2000587c:	68fa      	ldr	r2, [r7, #12]
2000587e:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005882:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005886:	429a      	cmp	r2, r3
20005888:	d134      	bne.n	200058f4 <MSS_UART_get_rx+0xcc>
2000588a:	68bb      	ldr	r3, [r7, #8]
2000588c:	2b00      	cmp	r3, #0
2000588e:	d031      	beq.n	200058f4 <MSS_UART_get_rx+0xcc>
20005890:	687b      	ldr	r3, [r7, #4]
20005892:	2b00      	cmp	r3, #0
20005894:	d02e      	beq.n	200058f4 <MSS_UART_get_rx+0xcc>
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
20005896:	68fb      	ldr	r3, [r7, #12]
20005898:	681b      	ldr	r3, [r3, #0]
2000589a:	7d1b      	ldrb	r3, [r3, #20]
2000589c:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
2000589e:	68fb      	ldr	r3, [r7, #12]
200058a0:	7b5a      	ldrb	r2, [r3, #13]
200058a2:	7dfb      	ldrb	r3, [r7, #23]
200058a4:	ea42 0303 	orr.w	r3, r2, r3
200058a8:	b2da      	uxtb	r2, r3
200058aa:	68fb      	ldr	r3, [r7, #12]
200058ac:	735a      	strb	r2, [r3, #13]

        while(((status & MSS_UART_DATA_READY) != 0u) &&
200058ae:	e017      	b.n	200058e0 <MSS_UART_get_rx+0xb8>
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
200058b0:	68ba      	ldr	r2, [r7, #8]
200058b2:	693b      	ldr	r3, [r7, #16]
200058b4:	4413      	add	r3, r2
200058b6:	68fa      	ldr	r2, [r7, #12]
200058b8:	6812      	ldr	r2, [r2, #0]
200058ba:	7812      	ldrb	r2, [r2, #0]
200058bc:	b2d2      	uxtb	r2, r2
200058be:	701a      	strb	r2, [r3, #0]
            ++rx_size;
200058c0:	693b      	ldr	r3, [r7, #16]
200058c2:	f103 0301 	add.w	r3, r3, #1
200058c6:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
200058c8:	68fb      	ldr	r3, [r7, #12]
200058ca:	681b      	ldr	r3, [r3, #0]
200058cc:	7d1b      	ldrb	r3, [r3, #20]
200058ce:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
200058d0:	68fb      	ldr	r3, [r7, #12]
200058d2:	7b5a      	ldrb	r2, [r3, #13]
200058d4:	7dfb      	ldrb	r3, [r7, #23]
200058d6:	ea42 0303 	orr.w	r3, r2, r3
200058da:	b2da      	uxtb	r2, r3
200058dc:	68fb      	ldr	r3, [r7, #12]
200058de:	735a      	strb	r2, [r3, #13]
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
200058e0:	7dfb      	ldrb	r3, [r7, #23]
200058e2:	f003 0301 	and.w	r3, r3, #1
200058e6:	b2db      	uxtb	r3, r3
200058e8:	2b00      	cmp	r3, #0
200058ea:	d003      	beq.n	200058f4 <MSS_UART_get_rx+0xcc>
200058ec:	693a      	ldr	r2, [r7, #16]
200058ee:	687b      	ldr	r3, [r7, #4]
200058f0:	429a      	cmp	r2, r3
200058f2:	d3dd      	bcc.n	200058b0 <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
200058f4:	693b      	ldr	r3, [r7, #16]
}
200058f6:	4618      	mov	r0, r3
200058f8:	f107 071c 	add.w	r7, r7, #28
200058fc:	46bd      	mov	sp, r7
200058fe:	bc80      	pop	{r7}
20005900:	4770      	bx	lr
20005902:	bf00      	nop

20005904 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20005904:	b580      	push	{r7, lr}
20005906:	b084      	sub	sp, #16
20005908:	af00      	add	r7, sp, #0
2000590a:	60f8      	str	r0, [r7, #12]
2000590c:	60b9      	str	r1, [r7, #8]
2000590e:	4613      	mov	r3, r2
20005910:	71fb      	strb	r3, [r7, #7]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005912:	68fa      	ldr	r2, [r7, #12]
20005914:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005918:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000591c:	429a      	cmp	r2, r3
2000591e:	d007      	beq.n	20005930 <MSS_UART_set_rx_handler+0x2c>
20005920:	68fa      	ldr	r2, [r7, #12]
20005922:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005926:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000592a:	429a      	cmp	r2, r3
2000592c:	d000      	beq.n	20005930 <MSS_UART_set_rx_handler+0x2c>
2000592e:	be00      	bkpt	0x0000
    ASSERT(handler != INVALID_IRQ_HANDLER );
20005930:	68bb      	ldr	r3, [r7, #8]
20005932:	2b00      	cmp	r3, #0
20005934:	d100      	bne.n	20005938 <MSS_UART_set_rx_handler+0x34>
20005936:	be00      	bkpt	0x0000
    ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
20005938:	79fb      	ldrb	r3, [r7, #7]
2000593a:	2bc0      	cmp	r3, #192	; 0xc0
2000593c:	d900      	bls.n	20005940 <MSS_UART_set_rx_handler+0x3c>
2000593e:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005940:	68fa      	ldr	r2, [r7, #12]
20005942:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005946:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000594a:	429a      	cmp	r2, r3
2000594c:	d006      	beq.n	2000595c <MSS_UART_set_rx_handler+0x58>
2000594e:	68fa      	ldr	r2, [r7, #12]
20005950:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005954:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005958:	429a      	cmp	r2, r3
2000595a:	d12e      	bne.n	200059ba <MSS_UART_set_rx_handler+0xb6>
2000595c:	68bb      	ldr	r3, [r7, #8]
2000595e:	2b00      	cmp	r3, #0
20005960:	d02b      	beq.n	200059ba <MSS_UART_set_rx_handler+0xb6>
20005962:	79fb      	ldrb	r3, [r7, #7]
20005964:	2bc0      	cmp	r3, #192	; 0xc0
20005966:	d828      	bhi.n	200059ba <MSS_UART_set_rx_handler+0xb6>
       (handler != INVALID_IRQ_HANDLER) &&
       (trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL))
    {
        this_uart->rx_handler = handler;
20005968:	68fb      	ldr	r3, [r7, #12]
2000596a:	68ba      	ldr	r2, [r7, #8]
2000596c:	621a      	str	r2, [r3, #32]

        /* Set the receive interrupt trigger level. */
        this_uart->hw_reg->FCR = (this_uart->hw_reg->FCR &
2000596e:	68fb      	ldr	r3, [r7, #12]
20005970:	681a      	ldr	r2, [r3, #0]
20005972:	68fb      	ldr	r3, [r7, #12]
20005974:	681b      	ldr	r3, [r3, #0]
20005976:	7a1b      	ldrb	r3, [r3, #8]
20005978:	b2db      	uxtb	r3, r3
2000597a:	b2db      	uxtb	r3, r3
2000597c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20005980:	79f8      	ldrb	r0, [r7, #7]
20005982:	4619      	mov	r1, r3
20005984:	4603      	mov	r3, r0
20005986:	ea41 0303 	orr.w	r3, r1, r3
2000598a:	b2db      	uxtb	r3, r3
2000598c:	b2db      	uxtb	r3, r3
2000598e:	7213      	strb	r3, [r2, #8]
                                 (uint8_t)(~((uint8_t)FCR_TRIG_LEVEL_MASK))) |
                                 (uint8_t)trigger_level;
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
20005990:	68fb      	ldr	r3, [r7, #12]
20005992:	791b      	ldrb	r3, [r3, #4]
20005994:	b25b      	sxtb	r3, r3
20005996:	4618      	mov	r0, r3
20005998:	f7ff fe14 	bl	200055c4 <NVIC_ClearPendingIRQ>

        /* Enable receive interrupt. */
        set_bit_reg8(&this_uart->hw_reg->IER,ERBFI);
2000599c:	68fb      	ldr	r3, [r7, #12]
2000599e:	681b      	ldr	r3, [r3, #0]
200059a0:	f103 0304 	add.w	r3, r3, #4
200059a4:	4618      	mov	r0, r3
200059a6:	f04f 0100 	mov.w	r1, #0
200059aa:	f7ff fe29 	bl	20005600 <set_bit_reg8>

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ(this_uart->irqn);
200059ae:	68fb      	ldr	r3, [r7, #12]
200059b0:	791b      	ldrb	r3, [r3, #4]
200059b2:	b25b      	sxtb	r3, r3
200059b4:	4618      	mov	r0, r3
200059b6:	f7ff fde9 	bl	2000558c <NVIC_EnableIRQ>
    }
}
200059ba:	f107 0710 	add.w	r7, r7, #16
200059be:	46bd      	mov	sp, r7
200059c0:	bd80      	pop	{r7, pc}
200059c2:	bf00      	nop

200059c4 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
200059c4:	4668      	mov	r0, sp
200059c6:	f020 0107 	bic.w	r1, r0, #7
200059ca:	468d      	mov	sp, r1
200059cc:	b589      	push	{r0, r3, r7, lr}
200059ce:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart0);
200059d0:	f24f 002c 	movw	r0, #61484	; 0xf02c
200059d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200059d8:	f000 fa1a 	bl	20005e10 <MSS_UART_isr>
}
200059dc:	46bd      	mov	sp, r7
200059de:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200059e2:	4685      	mov	sp, r0
200059e4:	4770      	bx	lr
200059e6:	bf00      	nop

200059e8 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
200059e8:	4668      	mov	r0, sp
200059ea:	f020 0107 	bic.w	r1, r0, #7
200059ee:	468d      	mov	sp, r1
200059f0:	b589      	push	{r0, r3, r7, lr}
200059f2:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart1);
200059f4:	f64e 70ec 	movw	r0, #61420	; 0xefec
200059f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200059fc:	f000 fa08 	bl	20005e10 <MSS_UART_isr>
}
20005a00:	46bd      	mov	sp, r7
20005a02:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20005a06:	4685      	mov	sp, r0
20005a08:	4770      	bx	lr
20005a0a:	bf00      	nop

20005a0c <config_baud_divisors>:
config_baud_divisors
(
    mss_uart_instance_t * this_uart,
    uint32_t baudrate
)
{
20005a0c:	b580      	push	{r7, lr}
20005a0e:	b088      	sub	sp, #32
20005a10:	af00      	add	r7, sp, #0
20005a12:	6078      	str	r0, [r7, #4]
20005a14:	6039      	str	r1, [r7, #0]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005a16:	687a      	ldr	r2, [r7, #4]
20005a18:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a20:	429a      	cmp	r2, r3
20005a22:	d007      	beq.n	20005a34 <config_baud_divisors+0x28>
20005a24:	687a      	ldr	r2, [r7, #4]
20005a26:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a2e:	429a      	cmp	r2, r3
20005a30:	d000      	beq.n	20005a34 <config_baud_divisors+0x28>
20005a32:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20005a34:	687a      	ldr	r2, [r7, #4]
20005a36:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a3e:	429a      	cmp	r2, r3
20005a40:	d007      	beq.n	20005a52 <config_baud_divisors+0x46>
20005a42:	687a      	ldr	r2, [r7, #4]
20005a44:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a4c:	429a      	cmp	r2, r3
20005a4e:	f040 80a4 	bne.w	20005b9a <config_baud_divisors+0x18e>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
20005a52:	687b      	ldr	r3, [r7, #4]
20005a54:	683a      	ldr	r2, [r7, #0]
20005a56:	609a      	str	r2, [r3, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
20005a58:	f002 f992 	bl	20007d80 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
20005a5c:	687a      	ldr	r2, [r7, #4]
20005a5e:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a66:	429a      	cmp	r2, r3
20005a68:	d106      	bne.n	20005a78 <config_baud_divisors+0x6c>
        {
            pclk_freq = g_FrequencyPCLK0;
20005a6a:	f248 5308 	movw	r3, #34056	; 0x8508
20005a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a72:	681b      	ldr	r3, [r3, #0]
20005a74:	61fb      	str	r3, [r7, #28]
20005a76:	e005      	b.n	20005a84 <config_baud_divisors+0x78>
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
20005a78:	f248 530c 	movw	r3, #34060	; 0x850c
20005a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a80:	681b      	ldr	r3, [r3, #0]
20005a82:	61fb      	str	r3, [r7, #28]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
20005a84:	69fb      	ldr	r3, [r7, #28]
20005a86:	ea4f 02c3 	mov.w	r2, r3, lsl #3
20005a8a:	683b      	ldr	r3, [r7, #0]
20005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
20005a90:	617b      	str	r3, [r7, #20]
        baud_value_by_64 = baud_value_by_128 / 2u;
20005a92:	697b      	ldr	r3, [r7, #20]
20005a94:	ea4f 0353 	mov.w	r3, r3, lsr #1
20005a98:	613b      	str	r3, [r7, #16]
        baud_value = baud_value_by_64 / 64u;
20005a9a:	693b      	ldr	r3, [r7, #16]
20005a9c:	ea4f 1393 	mov.w	r3, r3, lsr #6
20005aa0:	60fb      	str	r3, [r7, #12]
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
20005aa2:	68fb      	ldr	r3, [r7, #12]
20005aa4:	ea4f 1383 	mov.w	r3, r3, lsl #6
20005aa8:	693a      	ldr	r2, [r7, #16]
20005aaa:	ebc3 0302 	rsb	r3, r3, r2
20005aae:	61bb      	str	r3, [r7, #24]
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
20005ab0:	68fb      	ldr	r3, [r7, #12]
20005ab2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20005ab6:	697a      	ldr	r2, [r7, #20]
20005ab8:	ebc3 0202 	rsb	r2, r3, r2
20005abc:	69bb      	ldr	r3, [r7, #24]
20005abe:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005ac2:	ebc3 0302 	rsb	r3, r3, r2
20005ac6:	69ba      	ldr	r2, [r7, #24]
20005ac8:	4413      	add	r3, r2
20005aca:	61bb      	str	r3, [r7, #24]

        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
20005acc:	68fa      	ldr	r2, [r7, #12]
20005ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005ad2:	429a      	cmp	r2, r3
20005ad4:	d900      	bls.n	20005ad8 <config_baud_divisors+0xcc>
20005ad6:	be00      	bkpt	0x0000

        if(baud_value <= (uint32_t)UINT16_MAX)
20005ad8:	68fa      	ldr	r2, [r7, #12]
20005ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005ade:	429a      	cmp	r2, r3
20005ae0:	d85b      	bhi.n	20005b9a <config_baud_divisors+0x18e>
        {
            if(baud_value > 1u)
20005ae2:	68fb      	ldr	r3, [r7, #12]
20005ae4:	2b01      	cmp	r3, #1
20005ae6:	d931      	bls.n	20005b4c <config_baud_divisors+0x140>
            {
                /*
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005ae8:	687b      	ldr	r3, [r7, #4]
20005aea:	681b      	ldr	r3, [r3, #0]
20005aec:	f103 030c 	add.w	r3, r3, #12
20005af0:	4618      	mov	r0, r3
20005af2:	f04f 0107 	mov.w	r1, #7
20005af6:	f7ff fd83 	bl	20005600 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20005afa:	687b      	ldr	r3, [r7, #4]
20005afc:	681b      	ldr	r3, [r3, #0]
20005afe:	68fa      	ldr	r2, [r7, #12]
20005b00:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005b04:	b2d2      	uxtb	r2, r2
20005b06:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20005b08:	687b      	ldr	r3, [r7, #4]
20005b0a:	681b      	ldr	r3, [r3, #0]
20005b0c:	68fa      	ldr	r2, [r7, #12]
20005b0e:	b2d2      	uxtb	r2, r2
20005b10:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005b12:	687b      	ldr	r3, [r7, #4]
20005b14:	681b      	ldr	r3, [r3, #0]
20005b16:	f103 030c 	add.w	r3, r3, #12
20005b1a:	4618      	mov	r0, r3
20005b1c:	f04f 0107 	mov.w	r1, #7
20005b20:	f7ff fd8e 	bl	20005640 <clear_bit_reg8>

                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005b24:	687b      	ldr	r3, [r7, #4]
20005b26:	681b      	ldr	r3, [r3, #0]
20005b28:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005b2c:	4618      	mov	r0, r3
20005b2e:	f04f 0107 	mov.w	r1, #7
20005b32:	f7ff fd65 	bl	20005600 <set_bit_reg8>

                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
20005b36:	69bb      	ldr	r3, [r7, #24]
20005b38:	2bff      	cmp	r3, #255	; 0xff
20005b3a:	d900      	bls.n	20005b3e <config_baud_divisors+0x132>
20005b3c:	be00      	bkpt	0x0000
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
20005b3e:	687b      	ldr	r3, [r7, #4]
20005b40:	681b      	ldr	r3, [r3, #0]
20005b42:	69ba      	ldr	r2, [r7, #24]
20005b44:	b2d2      	uxtb	r2, r2
20005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
20005b4a:	e026      	b.n	20005b9a <config_baud_divisors+0x18e>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005b4c:	687b      	ldr	r3, [r7, #4]
20005b4e:	681b      	ldr	r3, [r3, #0]
20005b50:	f103 030c 	add.w	r3, r3, #12
20005b54:	4618      	mov	r0, r3
20005b56:	f04f 0107 	mov.w	r1, #7
20005b5a:	f7ff fd51 	bl	20005600 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
20005b5e:	687b      	ldr	r3, [r7, #4]
20005b60:	681b      	ldr	r3, [r3, #0]
20005b62:	68fa      	ldr	r2, [r7, #12]
20005b64:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005b68:	b2d2      	uxtb	r2, r2
20005b6a:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20005b6c:	687b      	ldr	r3, [r7, #4]
20005b6e:	681b      	ldr	r3, [r3, #0]
20005b70:	68fa      	ldr	r2, [r7, #12]
20005b72:	b2d2      	uxtb	r2, r2
20005b74:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005b76:	687b      	ldr	r3, [r7, #4]
20005b78:	681b      	ldr	r3, [r3, #0]
20005b7a:	f103 030c 	add.w	r3, r3, #12
20005b7e:	4618      	mov	r0, r3
20005b80:	f04f 0107 	mov.w	r1, #7
20005b84:	f7ff fd5c 	bl	20005640 <clear_bit_reg8>

                /* Disable Fractional baud rate */
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005b88:	687b      	ldr	r3, [r7, #4]
20005b8a:	681b      	ldr	r3, [r3, #0]
20005b8c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005b90:	4618      	mov	r0, r3
20005b92:	f04f 0107 	mov.w	r1, #7
20005b96:	f7ff fd53 	bl	20005640 <clear_bit_reg8>
            }
        }
    }
}
20005b9a:	f107 0720 	add.w	r7, r7, #32
20005b9e:	46bd      	mov	sp, r7
20005ba0:	bd80      	pop	{r7, pc}
20005ba2:	bf00      	nop

20005ba4 <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20005ba4:	b580      	push	{r7, lr}
20005ba6:	b084      	sub	sp, #16
20005ba8:	af00      	add	r7, sp, #0
20005baa:	60f8      	str	r0, [r7, #12]
20005bac:	60b9      	str	r1, [r7, #8]
20005bae:	4613      	mov	r3, r2
20005bb0:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005bb2:	68fa      	ldr	r2, [r7, #12]
20005bb4:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005bbc:	429a      	cmp	r2, r3
20005bbe:	d007      	beq.n	20005bd0 <global_init+0x2c>
20005bc0:	68fa      	ldr	r2, [r7, #12]
20005bc2:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005bca:	429a      	cmp	r2, r3
20005bcc:	d000      	beq.n	20005bd0 <global_init+0x2c>
20005bce:	be00      	bkpt	0x0000

    if(this_uart == &g_mss_uart0)
20005bd0:	68fa      	ldr	r2, [r7, #12]
20005bd2:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005bda:	429a      	cmp	r2, r3
20005bdc:	d124      	bne.n	20005c28 <global_init+0x84>
    {
        this_uart->hw_reg = UART0;
20005bde:	68fb      	ldr	r3, [r7, #12]
20005be0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20005be4:	601a      	str	r2, [r3, #0]
        this_uart->irqn = UART0_IRQn;
20005be6:	68fb      	ldr	r3, [r7, #12]
20005be8:	f04f 020a 	mov.w	r2, #10
20005bec:	711a      	strb	r2, [r3, #4]
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
20005bee:	f248 0300 	movw	r3, #32768	; 0x8000
20005bf2:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005bf6:	f248 0200 	movw	r2, #32768	; 0x8000
20005bfa:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005bfe:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20005c04:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
20005c06:	f04f 000a 	mov.w	r0, #10
20005c0a:	f7ff fcdb 	bl	200055c4 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
20005c0e:	f248 0300 	movw	r3, #32768	; 0x8000
20005c12:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005c16:	f248 0200 	movw	r2, #32768	; 0x8000
20005c1a:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005c1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20005c24:	649a      	str	r2, [r3, #72]	; 0x48
20005c26:	e025      	b.n	20005c74 <global_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20005c28:	68fa      	ldr	r2, [r7, #12]
20005c2a:	f240 0300 	movw	r3, #0
20005c2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
20005c32:	6013      	str	r3, [r2, #0]
        this_uart->irqn = UART1_IRQn;
20005c34:	68fb      	ldr	r3, [r7, #12]
20005c36:	f04f 020b 	mov.w	r2, #11
20005c3a:	711a      	strb	r2, [r3, #4]
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
20005c3c:	f248 0300 	movw	r3, #32768	; 0x8000
20005c40:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005c44:	f248 0200 	movw	r2, #32768	; 0x8000
20005c48:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005c4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20005c52:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
20005c54:	f04f 000b 	mov.w	r0, #11
20005c58:	f7ff fcb4 	bl	200055c4 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
20005c5c:	f248 0300 	movw	r3, #32768	; 0x8000
20005c60:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005c64:	f248 0200 	movw	r2, #32768	; 0x8000
20005c68:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005c6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20005c72:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
20005c74:	68fb      	ldr	r3, [r7, #12]
20005c76:	681b      	ldr	r3, [r3, #0]
20005c78:	f04f 0200 	mov.w	r2, #0
20005c7c:	711a      	strb	r2, [r3, #4]

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
20005c7e:	68fb      	ldr	r3, [r7, #12]
20005c80:	681b      	ldr	r3, [r3, #0]
20005c82:	f04f 0200 	mov.w	r2, #0
20005c86:	721a      	strb	r2, [r3, #8]
    /* clear receiver FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
20005c88:	68fb      	ldr	r3, [r7, #12]
20005c8a:	681b      	ldr	r3, [r3, #0]
20005c8c:	f103 0308 	add.w	r3, r3, #8
20005c90:	4618      	mov	r0, r3
20005c92:	f04f 0101 	mov.w	r1, #1
20005c96:	f7ff fcb3 	bl	20005600 <set_bit_reg8>
    /* clear transmitter FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
20005c9a:	68fb      	ldr	r3, [r7, #12]
20005c9c:	681b      	ldr	r3, [r3, #0]
20005c9e:	f103 0308 	add.w	r3, r3, #8
20005ca2:	4618      	mov	r0, r3
20005ca4:	f04f 0102 	mov.w	r1, #2
20005ca8:	f7ff fcaa 	bl	20005600 <set_bit_reg8>

    /* set default READY mode : Mode 0*/
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
20005cac:	68fb      	ldr	r3, [r7, #12]
20005cae:	681b      	ldr	r3, [r3, #0]
20005cb0:	f103 0308 	add.w	r3, r3, #8
20005cb4:	4618      	mov	r0, r3
20005cb6:	f04f 0100 	mov.w	r1, #0
20005cba:	f7ff fca1 	bl	20005600 <set_bit_reg8>

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
20005cbe:	68fb      	ldr	r3, [r7, #12]
20005cc0:	681b      	ldr	r3, [r3, #0]
20005cc2:	f103 0310 	add.w	r3, r3, #16
20005cc6:	4618      	mov	r0, r3
20005cc8:	f04f 0104 	mov.w	r1, #4
20005ccc:	f7ff fcb8 	bl	20005640 <clear_bit_reg8>
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
20005cd0:	68fb      	ldr	r3, [r7, #12]
20005cd2:	681b      	ldr	r3, [r3, #0]
20005cd4:	f103 0310 	add.w	r3, r3, #16
20005cd8:	4618      	mov	r0, r3
20005cda:	f04f 0105 	mov.w	r1, #5
20005cde:	f7ff fcaf 	bl	20005640 <clear_bit_reg8>

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
20005ce2:	68fb      	ldr	r3, [r7, #12]
20005ce4:	681b      	ldr	r3, [r3, #0]
20005ce6:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005cea:	4618      	mov	r0, r3
20005cec:	f04f 0101 	mov.w	r1, #1
20005cf0:	f7ff fca6 	bl	20005640 <clear_bit_reg8>
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
20005cf4:	68fb      	ldr	r3, [r7, #12]
20005cf6:	681b      	ldr	r3, [r3, #0]
20005cf8:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005cfc:	4618      	mov	r0, r3
20005cfe:	f04f 0100 	mov.w	r1, #0
20005d02:	f7ff fc9d 	bl	20005640 <clear_bit_reg8>

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
20005d06:	68fb      	ldr	r3, [r7, #12]
20005d08:	681b      	ldr	r3, [r3, #0]
20005d0a:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005d0e:	4618      	mov	r0, r3
20005d10:	f04f 0101 	mov.w	r1, #1
20005d14:	f7ff fc94 	bl	20005640 <clear_bit_reg8>

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG);
20005d18:	68fb      	ldr	r3, [r7, #12]
20005d1a:	681b      	ldr	r3, [r3, #0]
20005d1c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005d20:	4618      	mov	r0, r3
20005d22:	f04f 0105 	mov.w	r1, #5
20005d26:	f7ff fc8b 	bl	20005640 <clear_bit_reg8>

    /* set default RX timeout */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO);
20005d2a:	68fb      	ldr	r3, [r7, #12]
20005d2c:	681b      	ldr	r3, [r3, #0]
20005d2e:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005d32:	4618      	mov	r0, r3
20005d34:	f04f 0106 	mov.w	r1, #6
20005d38:	f7ff fc82 	bl	20005640 <clear_bit_reg8>

    /* disable fractional baud-rate */
    clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005d3c:	68fb      	ldr	r3, [r7, #12]
20005d3e:	681b      	ldr	r3, [r3, #0]
20005d40:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005d44:	4618      	mov	r0, r3
20005d46:	f04f 0107 	mov.w	r1, #7
20005d4a:	f7ff fc79 	bl	20005640 <clear_bit_reg8>

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
20005d4e:	68fb      	ldr	r3, [r7, #12]
20005d50:	681b      	ldr	r3, [r3, #0]
20005d52:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005d56:	4618      	mov	r0, r3
20005d58:	f04f 0103 	mov.w	r1, #3
20005d5c:	f7ff fc70 	bl	20005640 <clear_bit_reg8>

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
20005d60:	68fb      	ldr	r3, [r7, #12]
20005d62:	681b      	ldr	r3, [r3, #0]
20005d64:	f04f 0200 	mov.w	r2, #0
20005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
20005d6c:	68fb      	ldr	r3, [r7, #12]
20005d6e:	681b      	ldr	r3, [r3, #0]
20005d70:	f04f 0200 	mov.w	r2, #0
20005d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
20005d78:	68fb      	ldr	r3, [r7, #12]
20005d7a:	681b      	ldr	r3, [r3, #0]
20005d7c:	f04f 0200 	mov.w	r2, #0
20005d80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*
     * Configure baud rate divisors. This uses the frational baud rate divisor
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);
20005d84:	68f8      	ldr	r0, [r7, #12]
20005d86:	68b9      	ldr	r1, [r7, #8]
20005d88:	f7ff fe40 	bl	20005a0c <config_baud_divisors>

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20005d8c:	68fb      	ldr	r3, [r7, #12]
20005d8e:	681b      	ldr	r3, [r3, #0]
20005d90:	79fa      	ldrb	r2, [r7, #7]
20005d92:	731a      	strb	r2, [r3, #12]

    /* Instance setup */
    this_uart->baudrate = baud_rate;
20005d94:	68fb      	ldr	r3, [r7, #12]
20005d96:	68ba      	ldr	r2, [r7, #8]
20005d98:	609a      	str	r2, [r3, #8]
    this_uart->lineconfig = line_config;
20005d9a:	68fb      	ldr	r3, [r7, #12]
20005d9c:	79fa      	ldrb	r2, [r7, #7]
20005d9e:	731a      	strb	r2, [r3, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
20005da0:	68fb      	ldr	r3, [r7, #12]
20005da2:	f04f 0200 	mov.w	r2, #0
20005da6:	615a      	str	r2, [r3, #20]
    this_uart->tx_buffer = (const uint8_t *)0;
20005da8:	68fb      	ldr	r3, [r7, #12]
20005daa:	f04f 0200 	mov.w	r2, #0
20005dae:	611a      	str	r2, [r3, #16]
    this_uart->tx_idx = 0u;
20005db0:	68fb      	ldr	r3, [r7, #12]
20005db2:	f04f 0200 	mov.w	r2, #0
20005db6:	619a      	str	r2, [r3, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20005db8:	68fb      	ldr	r3, [r7, #12]
20005dba:	f04f 0200 	mov.w	r2, #0
20005dbe:	621a      	str	r2, [r3, #32]
    this_uart->tx_handler       = NULL_HANDLER;
20005dc0:	68fb      	ldr	r3, [r7, #12]
20005dc2:	f04f 0200 	mov.w	r2, #0
20005dc6:	625a      	str	r2, [r3, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
20005dc8:	68fb      	ldr	r3, [r7, #12]
20005dca:	f04f 0200 	mov.w	r2, #0
20005dce:	61da      	str	r2, [r3, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
20005dd0:	68fb      	ldr	r3, [r7, #12]
20005dd2:	f04f 0200 	mov.w	r2, #0
20005dd6:	629a      	str	r2, [r3, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;
20005dd8:	68fb      	ldr	r3, [r7, #12]
20005dda:	f04f 0200 	mov.w	r2, #0
20005dde:	62da      	str	r2, [r3, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;
20005de0:	68fb      	ldr	r3, [r7, #12]
20005de2:	f04f 0200 	mov.w	r2, #0
20005de6:	631a      	str	r2, [r3, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
20005de8:	68fb      	ldr	r3, [r7, #12]
20005dea:	f04f 0200 	mov.w	r2, #0
20005dee:	635a      	str	r2, [r3, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;
20005df0:	68fb      	ldr	r3, [r7, #12]
20005df2:	f04f 0200 	mov.w	r2, #0
20005df6:	639a      	str	r2, [r3, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;
20005df8:	68fb      	ldr	r3, [r7, #12]
20005dfa:	f04f 0200 	mov.w	r2, #0
20005dfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
20005e00:	68fb      	ldr	r3, [r7, #12]
20005e02:	f04f 0200 	mov.w	r2, #0
20005e06:	735a      	strb	r2, [r3, #13]
}
20005e08:	f107 0710 	add.w	r7, r7, #16
20005e0c:	46bd      	mov	sp, r7
20005e0e:	bd80      	pop	{r7, pc}

20005e10 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20005e10:	b580      	push	{r7, lr}
20005e12:	b084      	sub	sp, #16
20005e14:	af00      	add	r7, sp, #0
20005e16:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005e18:	687a      	ldr	r2, [r7, #4]
20005e1a:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e22:	429a      	cmp	r2, r3
20005e24:	d007      	beq.n	20005e36 <MSS_UART_isr+0x26>
20005e26:	687a      	ldr	r2, [r7, #4]
20005e28:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e30:	429a      	cmp	r2, r3
20005e32:	d000      	beq.n	20005e36 <MSS_UART_isr+0x26>
20005e34:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20005e36:	687a      	ldr	r2, [r7, #4]
20005e38:	f24f 032c 	movw	r3, #61484	; 0xf02c
20005e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e40:	429a      	cmp	r2, r3
20005e42:	d007      	beq.n	20005e54 <MSS_UART_isr+0x44>
20005e44:	687a      	ldr	r2, [r7, #4]
20005e46:	f64e 73ec 	movw	r3, #61420	; 0xefec
20005e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e4e:	429a      	cmp	r2, r3
20005e50:	f040 80ef 	bne.w	20006032 <MSS_UART_isr+0x222>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20005e54:	687b      	ldr	r3, [r7, #4]
20005e56:	681b      	ldr	r3, [r3, #0]
20005e58:	7a1b      	ldrb	r3, [r3, #8]
20005e5a:	b2db      	uxtb	r3, r3
20005e5c:	f003 030f 	and.w	r3, r3, #15
20005e60:	73fb      	strb	r3, [r7, #15]

        switch (iirf)
20005e62:	7bfb      	ldrb	r3, [r7, #15]
20005e64:	2b0c      	cmp	r3, #12
20005e66:	f200 80d7 	bhi.w	20006018 <MSS_UART_isr+0x208>
20005e6a:	a201      	add	r2, pc, #4	; (adr r2, 20005e70 <MSS_UART_isr+0x60>)
20005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005e70:	20005ea5 	.word	0x20005ea5
20005e74:	20006019 	.word	0x20006019
20005e78:	20005ec3 	.word	0x20005ec3
20005e7c:	20005f1d 	.word	0x20005f1d
20005e80:	20005ee1 	.word	0x20005ee1
20005e84:	20006019 	.word	0x20006019
20005e88:	20005eff 	.word	0x20005eff
20005e8c:	20006019 	.word	0x20006019
20005e90:	20006019 	.word	0x20006019
20005e94:	20006019 	.word	0x20006019
20005e98:	20006019 	.word	0x20006019
20005e9c:	20006019 	.word	0x20006019
20005ea0:	20005ee1 	.word	0x20005ee1
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
20005ea4:	687b      	ldr	r3, [r7, #4]
20005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005ea8:	2b00      	cmp	r3, #0
20005eaa:	d100      	bne.n	20005eae <MSS_UART_isr+0x9e>
20005eac:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->modemsts_handler)
20005eae:	687b      	ldr	r3, [r7, #4]
20005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005eb2:	2b00      	cmp	r3, #0
20005eb4:	f000 80b2 	beq.w	2000601c <MSS_UART_isr+0x20c>
                {
                   (*(this_uart->modemsts_handler))(this_uart);
20005eb8:	687b      	ldr	r3, [r7, #4]
20005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005ebc:	6878      	ldr	r0, [r7, #4]
20005ebe:	4798      	blx	r3
                }
            }
            break;
20005ec0:	e0b7      	b.n	20006032 <MSS_UART_isr+0x222>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
20005ec2:	687b      	ldr	r3, [r7, #4]
20005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005ec6:	2b00      	cmp	r3, #0
20005ec8:	d100      	bne.n	20005ecc <MSS_UART_isr+0xbc>
20005eca:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->tx_handler)
20005ecc:	687b      	ldr	r3, [r7, #4]
20005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005ed0:	2b00      	cmp	r3, #0
20005ed2:	f000 80a5 	beq.w	20006020 <MSS_UART_isr+0x210>
                {
                    (*(this_uart->tx_handler))(this_uart);
20005ed6:	687b      	ldr	r3, [r7, #4]
20005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005eda:	6878      	ldr	r0, [r7, #4]
20005edc:	4798      	blx	r3
                }
            }
            break;
20005ede:	e0a8      	b.n	20006032 <MSS_UART_isr+0x222>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
20005ee0:	687b      	ldr	r3, [r7, #4]
20005ee2:	6a1b      	ldr	r3, [r3, #32]
20005ee4:	2b00      	cmp	r3, #0
20005ee6:	d100      	bne.n	20005eea <MSS_UART_isr+0xda>
20005ee8:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->rx_handler)
20005eea:	687b      	ldr	r3, [r7, #4]
20005eec:	6a1b      	ldr	r3, [r3, #32]
20005eee:	2b00      	cmp	r3, #0
20005ef0:	f000 8098 	beq.w	20006024 <MSS_UART_isr+0x214>
                {
                    (*(this_uart->rx_handler))(this_uart);
20005ef4:	687b      	ldr	r3, [r7, #4]
20005ef6:	6a1b      	ldr	r3, [r3, #32]
20005ef8:	6878      	ldr	r0, [r7, #4]
20005efa:	4798      	blx	r3
                }
            }
            break;
20005efc:	e099      	b.n	20006032 <MSS_UART_isr+0x222>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
20005efe:	687b      	ldr	r3, [r7, #4]
20005f00:	69db      	ldr	r3, [r3, #28]
20005f02:	2b00      	cmp	r3, #0
20005f04:	d100      	bne.n	20005f08 <MSS_UART_isr+0xf8>
20005f06:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->linests_handler)
20005f08:	687b      	ldr	r3, [r7, #4]
20005f0a:	69db      	ldr	r3, [r3, #28]
20005f0c:	2b00      	cmp	r3, #0
20005f0e:	f000 808b 	beq.w	20006028 <MSS_UART_isr+0x218>
                {
                   (*(this_uart->linests_handler))(this_uart);
20005f12:	687b      	ldr	r3, [r7, #4]
20005f14:	69db      	ldr	r3, [r3, #28]
20005f16:	6878      	ldr	r0, [r7, #4]
20005f18:	4798      	blx	r3
                }
            }
            break;
20005f1a:	e08a      	b.n	20006032 <MSS_UART_isr+0x222>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
20005f1c:	687b      	ldr	r3, [r7, #4]
20005f1e:	681b      	ldr	r3, [r3, #0]
20005f20:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005f24:	4618      	mov	r0, r3
20005f26:	f04f 0100 	mov.w	r1, #0
20005f2a:	f7ff fba9 	bl	20005680 <read_bit_reg8>
20005f2e:	4603      	mov	r3, r0
20005f30:	2b00      	cmp	r3, #0
20005f32:	d00c      	beq.n	20005f4e <MSS_UART_isr+0x13e>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
20005f34:	687b      	ldr	r3, [r7, #4]
20005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005f38:	2b00      	cmp	r3, #0
20005f3a:	d100      	bne.n	20005f3e <MSS_UART_isr+0x12e>
20005f3c:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->rto_handler)
20005f3e:	687b      	ldr	r3, [r7, #4]
20005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005f42:	2b00      	cmp	r3, #0
20005f44:	d003      	beq.n	20005f4e <MSS_UART_isr+0x13e>
                    {
                        (*(this_uart->rto_handler))(this_uart);
20005f46:	687b      	ldr	r3, [r7, #4]
20005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005f4a:	6878      	ldr	r0, [r7, #4]
20005f4c:	4798      	blx	r3
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
20005f4e:	687b      	ldr	r3, [r7, #4]
20005f50:	681b      	ldr	r3, [r3, #0]
20005f52:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005f56:	4618      	mov	r0, r3
20005f58:	f04f 0101 	mov.w	r1, #1
20005f5c:	f7ff fb90 	bl	20005680 <read_bit_reg8>
20005f60:	4603      	mov	r3, r0
20005f62:	2b00      	cmp	r3, #0
20005f64:	d00c      	beq.n	20005f80 <MSS_UART_isr+0x170>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
20005f66:	687b      	ldr	r3, [r7, #4]
20005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f6a:	2b00      	cmp	r3, #0
20005f6c:	d100      	bne.n	20005f70 <MSS_UART_isr+0x160>
20005f6e:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->nack_handler)
20005f70:	687b      	ldr	r3, [r7, #4]
20005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f74:	2b00      	cmp	r3, #0
20005f76:	d003      	beq.n	20005f80 <MSS_UART_isr+0x170>
                    {
                        (*(this_uart->nack_handler))(this_uart);
20005f78:	687b      	ldr	r3, [r7, #4]
20005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f7c:	6878      	ldr	r0, [r7, #4]
20005f7e:	4798      	blx	r3
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
20005f80:	687b      	ldr	r3, [r7, #4]
20005f82:	681b      	ldr	r3, [r3, #0]
20005f84:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005f88:	4618      	mov	r0, r3
20005f8a:	f04f 0102 	mov.w	r1, #2
20005f8e:	f7ff fb77 	bl	20005680 <read_bit_reg8>
20005f92:	4603      	mov	r3, r0
20005f94:	2b00      	cmp	r3, #0
20005f96:	d00c      	beq.n	20005fb2 <MSS_UART_isr+0x1a2>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
20005f98:	687b      	ldr	r3, [r7, #4]
20005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005f9c:	2b00      	cmp	r3, #0
20005f9e:	d100      	bne.n	20005fa2 <MSS_UART_isr+0x192>
20005fa0:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
20005fa2:	687b      	ldr	r3, [r7, #4]
20005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005fa6:	2b00      	cmp	r3, #0
20005fa8:	d003      	beq.n	20005fb2 <MSS_UART_isr+0x1a2>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
20005faa:	687b      	ldr	r3, [r7, #4]
20005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005fae:	6878      	ldr	r0, [r7, #4]
20005fb0:	4798      	blx	r3
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
20005fb2:	687b      	ldr	r3, [r7, #4]
20005fb4:	681b      	ldr	r3, [r3, #0]
20005fb6:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005fba:	4618      	mov	r0, r3
20005fbc:	f04f 0103 	mov.w	r1, #3
20005fc0:	f7ff fb5e 	bl	20005680 <read_bit_reg8>
20005fc4:	4603      	mov	r3, r0
20005fc6:	2b00      	cmp	r3, #0
20005fc8:	d00c      	beq.n	20005fe4 <MSS_UART_isr+0x1d4>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
20005fca:	687b      	ldr	r3, [r7, #4]
20005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005fce:	2b00      	cmp	r3, #0
20005fd0:	d100      	bne.n	20005fd4 <MSS_UART_isr+0x1c4>
20005fd2:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->break_handler)
20005fd4:	687b      	ldr	r3, [r7, #4]
20005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005fd8:	2b00      	cmp	r3, #0
20005fda:	d003      	beq.n	20005fe4 <MSS_UART_isr+0x1d4>
                    {
                        (*(this_uart->break_handler))(this_uart);
20005fdc:	687b      	ldr	r3, [r7, #4]
20005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005fe0:	6878      	ldr	r0, [r7, #4]
20005fe2:	4798      	blx	r3
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
20005fe4:	687b      	ldr	r3, [r7, #4]
20005fe6:	681b      	ldr	r3, [r3, #0]
20005fe8:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005fec:	4618      	mov	r0, r3
20005fee:	f04f 0104 	mov.w	r1, #4
20005ff2:	f7ff fb45 	bl	20005680 <read_bit_reg8>
20005ff6:	4603      	mov	r3, r0
20005ff8:	2b00      	cmp	r3, #0
20005ffa:	d017      	beq.n	2000602c <MSS_UART_isr+0x21c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
20005ffc:	687b      	ldr	r3, [r7, #4]
20005ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006000:	2b00      	cmp	r3, #0
20006002:	d100      	bne.n	20006006 <MSS_UART_isr+0x1f6>
20006004:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->sync_handler)
20006006:	687b      	ldr	r3, [r7, #4]
20006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000600a:	2b00      	cmp	r3, #0
2000600c:	d010      	beq.n	20006030 <MSS_UART_isr+0x220>
                    {
                        (*(this_uart->sync_handler))(this_uart);
2000600e:	687b      	ldr	r3, [r7, #4]
20006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006012:	6878      	ldr	r0, [r7, #4]
20006014:	4798      	blx	r3
                    }
                }
                break;
20006016:	e00c      	b.n	20006032 <MSS_UART_isr+0x222>
            }

            default:
            {
                ASSERT(INVALID_INTERRUPT);
20006018:	be00      	bkpt	0x0000
2000601a:	e00a      	b.n	20006032 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->modemsts_handler)
                {
                   (*(this_uart->modemsts_handler))(this_uart);
                }
            }
            break;
2000601c:	bf00      	nop
2000601e:	e008      	b.n	20006032 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->tx_handler)
                {
                    (*(this_uart->tx_handler))(this_uart);
                }
            }
            break;
20006020:	bf00      	nop
20006022:	e006      	b.n	20006032 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->rx_handler)
                {
                    (*(this_uart->rx_handler))(this_uart);
                }
            }
            break;
20006024:	bf00      	nop
20006026:	e004      	b.n	20006032 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->linests_handler)
                {
                   (*(this_uart->linests_handler))(this_uart);
                }
            }
            break;
20006028:	bf00      	nop
2000602a:	e002      	b.n	20006032 <MSS_UART_isr+0x222>
                    if(NULL_HANDLER != this_uart->sync_handler)
                    {
                        (*(this_uart->sync_handler))(this_uart);
                    }
                }
                break;
2000602c:	bf00      	nop
2000602e:	e000      	b.n	20006032 <MSS_UART_isr+0x222>
20006030:	bf00      	nop
                ASSERT(INVALID_INTERRUPT);
            }
            break;
        }
    }
}
20006032:	f107 0710 	add.w	r7, r7, #16
20006036:	46bd      	mov	sp, r7
20006038:	bd80      	pop	{r7, pc}
2000603a:	bf00      	nop

2000603c <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
2000603c:	b580      	push	{r7, lr}
2000603e:	b086      	sub	sp, #24
20006040:	af00      	add	r7, sp, #0
20006042:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20006044:	687a      	ldr	r2, [r7, #4]
20006046:	f24f 032c 	movw	r3, #61484	; 0xf02c
2000604a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000604e:	429a      	cmp	r2, r3
20006050:	d007      	beq.n	20006062 <default_tx_handler+0x26>
20006052:	687a      	ldr	r2, [r7, #4]
20006054:	f64e 73ec 	movw	r3, #61420	; 0xefec
20006058:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000605c:	429a      	cmp	r2, r3
2000605e:	d000      	beq.n	20006062 <default_tx_handler+0x26>
20006060:	be00      	bkpt	0x0000
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
20006062:	687b      	ldr	r3, [r7, #4]
20006064:	691b      	ldr	r3, [r3, #16]
20006066:	2b00      	cmp	r3, #0
20006068:	d100      	bne.n	2000606c <default_tx_handler+0x30>
2000606a:	be00      	bkpt	0x0000
    ASSERT(0u < this_uart->tx_buff_size);
2000606c:	687b      	ldr	r3, [r7, #4]
2000606e:	695b      	ldr	r3, [r3, #20]
20006070:	2b00      	cmp	r3, #0
20006072:	d100      	bne.n	20006076 <default_tx_handler+0x3a>
20006074:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20006076:	687a      	ldr	r2, [r7, #4]
20006078:	f24f 032c 	movw	r3, #61484	; 0xf02c
2000607c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006080:	429a      	cmp	r2, r3
20006082:	d006      	beq.n	20006092 <default_tx_handler+0x56>
20006084:	687a      	ldr	r2, [r7, #4]
20006086:	f64e 73ec 	movw	r3, #61420	; 0xefec
2000608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000608e:	429a      	cmp	r2, r3
20006090:	d155      	bne.n	2000613e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
20006092:	687b      	ldr	r3, [r7, #4]
20006094:	691b      	ldr	r3, [r3, #16]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20006096:	2b00      	cmp	r3, #0
20006098:	d051      	beq.n	2000613e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
2000609a:	687b      	ldr	r3, [r7, #4]
2000609c:	695b      	ldr	r3, [r3, #20]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
2000609e:	2b00      	cmp	r3, #0
200060a0:	d04d      	beq.n	2000613e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
200060a2:	687b      	ldr	r3, [r7, #4]
200060a4:	681b      	ldr	r3, [r3, #0]
200060a6:	7d1b      	ldrb	r3, [r3, #20]
200060a8:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
200060aa:	687b      	ldr	r3, [r7, #4]
200060ac:	7b5a      	ldrb	r2, [r3, #13]
200060ae:	7afb      	ldrb	r3, [r7, #11]
200060b0:	ea42 0303 	orr.w	r3, r2, r3
200060b4:	b2da      	uxtb	r2, r3
200060b6:	687b      	ldr	r3, [r7, #4]
200060b8:	735a      	strb	r2, [r3, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
200060ba:	7afb      	ldrb	r3, [r7, #11]
200060bc:	f003 0320 	and.w	r3, r3, #32
200060c0:	2b00      	cmp	r3, #0
200060c2:	d029      	beq.n	20006118 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
200060c4:	f04f 0310 	mov.w	r3, #16
200060c8:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
200060ca:	687b      	ldr	r3, [r7, #4]
200060cc:	695a      	ldr	r2, [r3, #20]
200060ce:	687b      	ldr	r3, [r7, #4]
200060d0:	699b      	ldr	r3, [r3, #24]
200060d2:	ebc3 0302 	rsb	r3, r3, r2
200060d6:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
200060d8:	697b      	ldr	r3, [r7, #20]
200060da:	2b0f      	cmp	r3, #15
200060dc:	d801      	bhi.n	200060e2 <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
200060de:	697b      	ldr	r3, [r7, #20]
200060e0:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
200060e2:	f04f 0300 	mov.w	r3, #0
200060e6:	60fb      	str	r3, [r7, #12]
200060e8:	e012      	b.n	20006110 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
200060ea:	687b      	ldr	r3, [r7, #4]
200060ec:	681b      	ldr	r3, [r3, #0]
200060ee:	687a      	ldr	r2, [r7, #4]
200060f0:	6911      	ldr	r1, [r2, #16]
200060f2:	687a      	ldr	r2, [r7, #4]
200060f4:	6992      	ldr	r2, [r2, #24]
200060f6:	440a      	add	r2, r1
200060f8:	7812      	ldrb	r2, [r2, #0]
200060fa:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
200060fc:	687b      	ldr	r3, [r7, #4]
200060fe:	699b      	ldr	r3, [r3, #24]
20006100:	f103 0201 	add.w	r2, r3, #1
20006104:	687b      	ldr	r3, [r7, #4]
20006106:	619a      	str	r2, [r3, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20006108:	68fb      	ldr	r3, [r7, #12]
2000610a:	f103 0301 	add.w	r3, r3, #1
2000610e:	60fb      	str	r3, [r7, #12]
20006110:	68fa      	ldr	r2, [r7, #12]
20006112:	693b      	ldr	r3, [r7, #16]
20006114:	429a      	cmp	r2, r3
20006116:	d3e8      	bcc.n	200060ea <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
20006118:	687b      	ldr	r3, [r7, #4]
2000611a:	699a      	ldr	r2, [r3, #24]
2000611c:	687b      	ldr	r3, [r7, #4]
2000611e:	695b      	ldr	r3, [r3, #20]
20006120:	429a      	cmp	r2, r3
20006122:	d10c      	bne.n	2000613e <default_tx_handler+0x102>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20006124:	687b      	ldr	r3, [r7, #4]
20006126:	f04f 0200 	mov.w	r2, #0
2000612a:	615a      	str	r2, [r3, #20]
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
2000612c:	687b      	ldr	r3, [r7, #4]
2000612e:	681b      	ldr	r3, [r3, #0]
20006130:	f103 0304 	add.w	r3, r3, #4
20006134:	4618      	mov	r0, r3
20006136:	f04f 0101 	mov.w	r1, #1
2000613a:	f7ff fa81 	bl	20005640 <clear_bit_reg8>
        }
    }
}
2000613e:	f107 0718 	add.w	r7, r7, #24
20006142:	46bd      	mov	sp, r7
20006144:	bd80      	pop	{r7, pc}
20006146:	bf00      	nop

20006148 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20006148:	b480      	push	{r7}
2000614a:	b083      	sub	sp, #12
2000614c:	af00      	add	r7, sp, #0
2000614e:	4603      	mov	r3, r0
20006150:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20006152:	f24e 1300 	movw	r3, #57600	; 0xe100
20006156:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000615a:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000615e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006162:	79f9      	ldrb	r1, [r7, #7]
20006164:	f001 011f 	and.w	r1, r1, #31
20006168:	f04f 0001 	mov.w	r0, #1
2000616c:	fa00 f101 	lsl.w	r1, r0, r1
20006170:	f102 0220 	add.w	r2, r2, #32
20006174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006178:	f107 070c 	add.w	r7, r7, #12
2000617c:	46bd      	mov	sp, r7
2000617e:	bc80      	pop	{r7}
20006180:	4770      	bx	lr
20006182:	bf00      	nop

20006184 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20006184:	b480      	push	{r7}
20006186:	b083      	sub	sp, #12
20006188:	af00      	add	r7, sp, #0
2000618a:	4603      	mov	r3, r0
2000618c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000618e:	f24e 1300 	movw	r3, #57600	; 0xe100
20006192:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006196:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000619a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000619e:	79f9      	ldrb	r1, [r7, #7]
200061a0:	f001 011f 	and.w	r1, r1, #31
200061a4:	f04f 0001 	mov.w	r0, #1
200061a8:	fa00 f101 	lsl.w	r1, r0, r1
200061ac:	f102 0260 	add.w	r2, r2, #96	; 0x60
200061b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200061b4:	f107 070c 	add.w	r7, r7, #12
200061b8:	46bd      	mov	sp, r7
200061ba:	bc80      	pop	{r7}
200061bc:	4770      	bx	lr
200061be:	bf00      	nop

200061c0 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
200061c0:	b580      	push	{r7, lr}
200061c2:	b084      	sub	sp, #16
200061c4:	af00      	add	r7, sp, #0
200061c6:	6078      	str	r0, [r7, #4]
200061c8:	4613      	mov	r3, r2
200061ca:	460a      	mov	r2, r1
200061cc:	70fa      	strb	r2, [r7, #3]
200061ce:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
200061d0:	78bb      	ldrb	r3, [r7, #2]
200061d2:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200061d4:	687a      	ldr	r2, [r7, #4]
200061d6:	f24f 036c 	movw	r3, #61548	; 0xf06c
200061da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200061de:	429a      	cmp	r2, r3
200061e0:	d007      	beq.n	200061f2 <MSS_I2C_init+0x32>
200061e2:	687a      	ldr	r2, [r7, #4]
200061e4:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
200061e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200061ec:	429a      	cmp	r2, r3
200061ee:	d000      	beq.n	200061f2 <MSS_I2C_init+0x32>
200061f0:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
200061f2:	f000 fd29 	bl	20006c48 <disable_interrupts>
200061f6:	4603      	mov	r3, r0
200061f8:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
200061fa:	6878      	ldr	r0, [r7, #4]
200061fc:	f04f 0100 	mov.w	r1, #0
20006200:	f04f 0274 	mov.w	r2, #116	; 0x74
20006204:	f002 f89c 	bl	20008340 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
20006208:	687a      	ldr	r2, [r7, #4]
2000620a:	f24f 036c 	movw	r3, #61548	; 0xf06c
2000620e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006212:	429a      	cmp	r2, r3
20006214:	d12c      	bne.n	20006270 <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
20006216:	687b      	ldr	r3, [r7, #4]
20006218:	f04f 0204 	mov.w	r2, #4
2000621c:	745a      	strb	r2, [r3, #17]
        this_i2c->hw_reg = I2C0;
2000621e:	687a      	ldr	r2, [r7, #4]
20006220:	f242 0300 	movw	r3, #8192	; 0x2000
20006224:	f2c4 0300 	movt	r3, #16384	; 0x4000
20006228:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
2000622a:	687a      	ldr	r2, [r7, #4]
2000622c:	f240 0300 	movw	r3, #0
20006230:	f2c4 2304 	movt	r3, #16900	; 0x4204
20006234:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
20006236:	f248 0300 	movw	r3, #32768	; 0x8000
2000623a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000623e:	f248 0200 	movw	r2, #32768	; 0x8000
20006242:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006246:	6c92      	ldr	r2, [r2, #72]	; 0x48
20006248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2000624c:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
2000624e:	f04f 0004 	mov.w	r0, #4
20006252:	f7ff ff97 	bl	20006184 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
20006256:	f248 0300 	movw	r3, #32768	; 0x8000
2000625a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000625e:	f248 0200 	movw	r2, #32768	; 0x8000
20006262:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006266:	6c92      	ldr	r2, [r2, #72]	; 0x48
20006268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
2000626c:	649a      	str	r2, [r3, #72]	; 0x48
2000626e:	e02b      	b.n	200062c8 <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20006270:	687b      	ldr	r3, [r7, #4]
20006272:	f04f 0207 	mov.w	r2, #7
20006276:	745a      	strb	r2, [r3, #17]
        this_i2c->hw_reg = I2C1;
20006278:	687a      	ldr	r2, [r7, #4]
2000627a:	f242 0300 	movw	r3, #8192	; 0x2000
2000627e:	f2c4 0301 	movt	r3, #16385	; 0x4001
20006282:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20006284:	687a      	ldr	r2, [r7, #4]
20006286:	f240 0300 	movw	r3, #0
2000628a:	f2c4 2324 	movt	r3, #16932	; 0x4224
2000628e:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20006290:	f248 0300 	movw	r3, #32768	; 0x8000
20006294:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006298:	f248 0200 	movw	r2, #32768	; 0x8000
2000629c:	f2c4 0203 	movt	r2, #16387	; 0x4003
200062a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
200062a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
200062a6:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
200062a8:	f04f 0007 	mov.w	r0, #7
200062ac:	f7ff ff6a 	bl	20006184 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
200062b0:	f248 0300 	movw	r3, #32768	; 0x8000
200062b4:	f2c4 0303 	movt	r3, #16387	; 0x4003
200062b8:	f248 0200 	movw	r2, #32768	; 0x8000
200062bc:	f2c4 0203 	movt	r2, #16387	; 0x4003
200062c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
200062c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
200062c6:	649a      	str	r2, [r3, #72]	; 0x48
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
200062c8:	687b      	ldr	r3, [r7, #4]
200062ca:	699b      	ldr	r3, [r3, #24]
200062cc:	461a      	mov	r2, r3
200062ce:	687b      	ldr	r3, [r7, #4]
200062d0:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
200062d2:	78fb      	ldrb	r3, [r7, #3]
200062d4:	ea4f 0243 	mov.w	r2, r3, lsl #1
200062d8:	687b      	ldr	r3, [r7, #4]
200062da:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
200062dc:	687b      	ldr	r3, [r7, #4]
200062de:	699b      	ldr	r3, [r3, #24]
200062e0:	68fa      	ldr	r2, [r7, #12]
200062e2:	ea4f 0292 	mov.w	r2, r2, lsr #2
200062e6:	f002 0201 	and.w	r2, r2, #1
200062ea:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
200062ec:	687b      	ldr	r3, [r7, #4]
200062ee:	699b      	ldr	r3, [r3, #24]
200062f0:	68fa      	ldr	r2, [r7, #12]
200062f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
200062f6:	f002 0201 	and.w	r2, r2, #1
200062fa:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
200062fc:	687b      	ldr	r3, [r7, #4]
200062fe:	699b      	ldr	r3, [r3, #24]
20006300:	68fa      	ldr	r2, [r7, #12]
20006302:	f002 0201 	and.w	r2, r2, #1
20006306:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
20006308:	687b      	ldr	r3, [r7, #4]
2000630a:	695b      	ldr	r3, [r3, #20]
2000630c:	687a      	ldr	r2, [r7, #4]
2000630e:	6812      	ldr	r2, [r2, #0]
20006310:	b2d2      	uxtb	r2, r2
20006312:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
20006314:	687b      	ldr	r3, [r7, #4]
20006316:	699b      	ldr	r3, [r3, #24]
20006318:	f04f 0201 	mov.w	r2, #1
2000631c:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
2000631e:	68b8      	ldr	r0, [r7, #8]
20006320:	f000 fca8 	bl	20006c74 <restore_interrupts>
}
20006324:	f107 0710 	add.w	r7, r7, #16
20006328:	46bd      	mov	sp, r7
2000632a:	bd80      	pop	{r7, pc}

2000632c <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
2000632c:	b480      	push	{r7}
2000632e:	b083      	sub	sp, #12
20006330:	af00      	add	r7, sp, #0
20006332:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
20006334:	687b      	ldr	r3, [r7, #4]
20006336:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
2000633a:	2b00      	cmp	r3, #0
2000633c:	d004      	beq.n	20006348 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
2000633e:	687b      	ldr	r3, [r7, #4]
20006340:	699b      	ldr	r3, [r3, #24]
20006342:	f04f 0201 	mov.w	r2, #1
20006346:	609a      	str	r2, [r3, #8]
    }
}
20006348:	f107 070c 	add.w	r7, r7, #12
2000634c:	46bd      	mov	sp, r7
2000634e:	bc80      	pop	{r7}
20006350:	4770      	bx	lr
20006352:	bf00      	nop

20006354 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
20006354:	b580      	push	{r7, lr}
20006356:	b084      	sub	sp, #16
20006358:	af00      	add	r7, sp, #0
2000635a:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
2000635c:	f04f 0301 	mov.w	r3, #1
20006360:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20006362:	687a      	ldr	r2, [r7, #4]
20006364:	f24f 036c 	movw	r3, #61548	; 0xf06c
20006368:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000636c:	429a      	cmp	r2, r3
2000636e:	d007      	beq.n	20006380 <mss_i2c_isr+0x2c>
20006370:	687a      	ldr	r2, [r7, #4]
20006372:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
20006376:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000637a:	429a      	cmp	r2, r3
2000637c:	d000      	beq.n	20006380 <mss_i2c_isr+0x2c>
2000637e:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20006380:	687b      	ldr	r3, [r7, #4]
20006382:	695b      	ldr	r3, [r3, #20]
20006384:	791b      	ldrb	r3, [r3, #4]
20006386:	72fb      	strb	r3, [r7, #11]

    switch( status )
20006388:	7afb      	ldrb	r3, [r7, #11]
2000638a:	b2db      	uxtb	r3, r3
2000638c:	f1a3 0308 	sub.w	r3, r3, #8
20006390:	2bd0      	cmp	r3, #208	; 0xd0
20006392:	f200 841c 	bhi.w	20006bce <mss_i2c_isr+0x87a>
20006396:	a201      	add	r2, pc, #4	; (adr r2, 2000639c <mss_i2c_isr+0x48>)
20006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000639c:	200066e1 	.word	0x200066e1
200063a0:	20006bcf 	.word	0x20006bcf
200063a4:	20006bcf 	.word	0x20006bcf
200063a8:	20006bcf 	.word	0x20006bcf
200063ac:	20006bcf 	.word	0x20006bcf
200063b0:	20006bcf 	.word	0x20006bcf
200063b4:	20006bcf 	.word	0x20006bcf
200063b8:	20006bcf 	.word	0x20006bcf
200063bc:	200066e1 	.word	0x200066e1
200063c0:	20006bcf 	.word	0x20006bcf
200063c4:	20006bcf 	.word	0x20006bcf
200063c8:	20006bcf 	.word	0x20006bcf
200063cc:	20006bcf 	.word	0x20006bcf
200063d0:	20006bcf 	.word	0x20006bcf
200063d4:	20006bcf 	.word	0x20006bcf
200063d8:	20006bcf 	.word	0x20006bcf
200063dc:	20006785 	.word	0x20006785
200063e0:	20006bcf 	.word	0x20006bcf
200063e4:	20006bcf 	.word	0x20006bcf
200063e8:	20006bcf 	.word	0x20006bcf
200063ec:	20006bcf 	.word	0x20006bcf
200063f0:	20006bcf 	.word	0x20006bcf
200063f4:	20006bcf 	.word	0x20006bcf
200063f8:	20006bcf 	.word	0x20006bcf
200063fc:	20006761 	.word	0x20006761
20006400:	20006bcf 	.word	0x20006bcf
20006404:	20006bcf 	.word	0x20006bcf
20006408:	20006bcf 	.word	0x20006bcf
2000640c:	20006bcf 	.word	0x20006bcf
20006410:	20006bcf 	.word	0x20006bcf
20006414:	20006bcf 	.word	0x20006bcf
20006418:	20006bcf 	.word	0x20006bcf
2000641c:	20006785 	.word	0x20006785
20006420:	20006bcf 	.word	0x20006bcf
20006424:	20006bcf 	.word	0x20006bcf
20006428:	20006bcf 	.word	0x20006bcf
2000642c:	20006bcf 	.word	0x20006bcf
20006430:	20006bcf 	.word	0x20006bcf
20006434:	20006bcf 	.word	0x20006bcf
20006438:	20006bcf 	.word	0x20006bcf
2000643c:	20006819 	.word	0x20006819
20006440:	20006bcf 	.word	0x20006bcf
20006444:	20006bcf 	.word	0x20006bcf
20006448:	20006bcf 	.word	0x20006bcf
2000644c:	20006bcf 	.word	0x20006bcf
20006450:	20006bcf 	.word	0x20006bcf
20006454:	20006bcf 	.word	0x20006bcf
20006458:	20006bcf 	.word	0x20006bcf
2000645c:	20006755 	.word	0x20006755
20006460:	20006bcf 	.word	0x20006bcf
20006464:	20006bcf 	.word	0x20006bcf
20006468:	20006bcf 	.word	0x20006bcf
2000646c:	20006bcf 	.word	0x20006bcf
20006470:	20006bcf 	.word	0x20006bcf
20006474:	20006bcf 	.word	0x20006bcf
20006478:	20006bcf 	.word	0x20006bcf
2000647c:	2000683d 	.word	0x2000683d
20006480:	20006bcf 	.word	0x20006bcf
20006484:	20006bcf 	.word	0x20006bcf
20006488:	20006bcf 	.word	0x20006bcf
2000648c:	20006bcf 	.word	0x20006bcf
20006490:	20006bcf 	.word	0x20006bcf
20006494:	20006bcf 	.word	0x20006bcf
20006498:	20006bcf 	.word	0x20006bcf
2000649c:	2000688d 	.word	0x2000688d
200064a0:	20006bcf 	.word	0x20006bcf
200064a4:	20006bcf 	.word	0x20006bcf
200064a8:	20006bcf 	.word	0x20006bcf
200064ac:	20006bcf 	.word	0x20006bcf
200064b0:	20006bcf 	.word	0x20006bcf
200064b4:	20006bcf 	.word	0x20006bcf
200064b8:	20006bcf 	.word	0x20006bcf
200064bc:	200068b1 	.word	0x200068b1
200064c0:	20006bcf 	.word	0x20006bcf
200064c4:	20006bcf 	.word	0x20006bcf
200064c8:	20006bcf 	.word	0x20006bcf
200064cc:	20006bcf 	.word	0x20006bcf
200064d0:	20006bcf 	.word	0x20006bcf
200064d4:	20006bcf 	.word	0x20006bcf
200064d8:	20006bcf 	.word	0x20006bcf
200064dc:	200068eb 	.word	0x200068eb
200064e0:	20006bcf 	.word	0x20006bcf
200064e4:	20006bcf 	.word	0x20006bcf
200064e8:	20006bcf 	.word	0x20006bcf
200064ec:	20006bcf 	.word	0x20006bcf
200064f0:	20006bcf 	.word	0x20006bcf
200064f4:	20006bcf 	.word	0x20006bcf
200064f8:	20006bcf 	.word	0x20006bcf
200064fc:	2000698d 	.word	0x2000698d
20006500:	20006bcf 	.word	0x20006bcf
20006504:	20006bcf 	.word	0x20006bcf
20006508:	20006bcf 	.word	0x20006bcf
2000650c:	20006bcf 	.word	0x20006bcf
20006510:	20006bcf 	.word	0x20006bcf
20006514:	20006bcf 	.word	0x20006bcf
20006518:	20006bcf 	.word	0x20006bcf
2000651c:	20006983 	.word	0x20006983
20006520:	20006bcf 	.word	0x20006bcf
20006524:	20006bcf 	.word	0x20006bcf
20006528:	20006bcf 	.word	0x20006bcf
2000652c:	20006bcf 	.word	0x20006bcf
20006530:	20006bcf 	.word	0x20006bcf
20006534:	20006bcf 	.word	0x20006bcf
20006538:	20006bcf 	.word	0x20006bcf
2000653c:	2000698d 	.word	0x2000698d
20006540:	20006bcf 	.word	0x20006bcf
20006544:	20006bcf 	.word	0x20006bcf
20006548:	20006bcf 	.word	0x20006bcf
2000654c:	20006bcf 	.word	0x20006bcf
20006550:	20006bcf 	.word	0x20006bcf
20006554:	20006bcf 	.word	0x20006bcf
20006558:	20006bcf 	.word	0x20006bcf
2000655c:	20006983 	.word	0x20006983
20006560:	20006bcf 	.word	0x20006bcf
20006564:	20006bcf 	.word	0x20006bcf
20006568:	20006bcf 	.word	0x20006bcf
2000656c:	20006bcf 	.word	0x20006bcf
20006570:	20006bcf 	.word	0x20006bcf
20006574:	20006bcf 	.word	0x20006bcf
20006578:	20006bcf 	.word	0x20006bcf
2000657c:	200069cf 	.word	0x200069cf
20006580:	20006bcf 	.word	0x20006bcf
20006584:	20006bcf 	.word	0x20006bcf
20006588:	20006bcf 	.word	0x20006bcf
2000658c:	20006bcf 	.word	0x20006bcf
20006590:	20006bcf 	.word	0x20006bcf
20006594:	20006bcf 	.word	0x20006bcf
20006598:	20006bcf 	.word	0x20006bcf
2000659c:	2000694f 	.word	0x2000694f
200065a0:	20006bcf 	.word	0x20006bcf
200065a4:	20006bcf 	.word	0x20006bcf
200065a8:	20006bcf 	.word	0x20006bcf
200065ac:	20006bcf 	.word	0x20006bcf
200065b0:	20006bcf 	.word	0x20006bcf
200065b4:	20006bcf 	.word	0x20006bcf
200065b8:	20006bcf 	.word	0x20006bcf
200065bc:	200069cf 	.word	0x200069cf
200065c0:	20006bcf 	.word	0x20006bcf
200065c4:	20006bcf 	.word	0x20006bcf
200065c8:	20006bcf 	.word	0x20006bcf
200065cc:	20006bcf 	.word	0x20006bcf
200065d0:	20006bcf 	.word	0x20006bcf
200065d4:	20006bcf 	.word	0x20006bcf
200065d8:	20006bcf 	.word	0x20006bcf
200065dc:	2000694f 	.word	0x2000694f
200065e0:	20006bcf 	.word	0x20006bcf
200065e4:	20006bcf 	.word	0x20006bcf
200065e8:	20006bcf 	.word	0x20006bcf
200065ec:	20006bcf 	.word	0x20006bcf
200065f0:	20006bcf 	.word	0x20006bcf
200065f4:	20006bcf 	.word	0x20006bcf
200065f8:	20006bcf 	.word	0x20006bcf
200065fc:	20006a2b 	.word	0x20006a2b
20006600:	20006bcf 	.word	0x20006bcf
20006604:	20006bcf 	.word	0x20006bcf
20006608:	20006bcf 	.word	0x20006bcf
2000660c:	20006bcf 	.word	0x20006bcf
20006610:	20006bcf 	.word	0x20006bcf
20006614:	20006bcf 	.word	0x20006bcf
20006618:	20006bcf 	.word	0x20006bcf
2000661c:	20006b03 	.word	0x20006b03
20006620:	20006bcf 	.word	0x20006bcf
20006624:	20006bcf 	.word	0x20006bcf
20006628:	20006bcf 	.word	0x20006bcf
2000662c:	20006bcf 	.word	0x20006bcf
20006630:	20006bcf 	.word	0x20006bcf
20006634:	20006bcf 	.word	0x20006bcf
20006638:	20006bcf 	.word	0x20006bcf
2000663c:	20006b03 	.word	0x20006b03
20006640:	20006bcf 	.word	0x20006bcf
20006644:	20006bcf 	.word	0x20006bcf
20006648:	20006bcf 	.word	0x20006bcf
2000664c:	20006bcf 	.word	0x20006bcf
20006650:	20006bcf 	.word	0x20006bcf
20006654:	20006bcf 	.word	0x20006bcf
20006658:	20006bcf 	.word	0x20006bcf
2000665c:	20006b03 	.word	0x20006b03
20006660:	20006bcf 	.word	0x20006bcf
20006664:	20006bcf 	.word	0x20006bcf
20006668:	20006bcf 	.word	0x20006bcf
2000666c:	20006bcf 	.word	0x20006bcf
20006670:	20006bcf 	.word	0x20006bcf
20006674:	20006bcf 	.word	0x20006bcf
20006678:	20006bcf 	.word	0x20006bcf
2000667c:	20006b95 	.word	0x20006b95
20006680:	20006bcf 	.word	0x20006bcf
20006684:	20006bcf 	.word	0x20006bcf
20006688:	20006bcf 	.word	0x20006bcf
2000668c:	20006bcf 	.word	0x20006bcf
20006690:	20006bcf 	.word	0x20006bcf
20006694:	20006bcf 	.word	0x20006bcf
20006698:	20006bcf 	.word	0x20006bcf
2000669c:	20006b95 	.word	0x20006b95
200066a0:	20006bcf 	.word	0x20006bcf
200066a4:	20006bcf 	.word	0x20006bcf
200066a8:	20006bcf 	.word	0x20006bcf
200066ac:	20006bcf 	.word	0x20006bcf
200066b0:	20006bcf 	.word	0x20006bcf
200066b4:	20006bcf 	.word	0x20006bcf
200066b8:	20006bcf 	.word	0x20006bcf
200066bc:	20006bcf 	.word	0x20006bcf
200066c0:	20006bcf 	.word	0x20006bcf
200066c4:	20006bcf 	.word	0x20006bcf
200066c8:	20006bcf 	.word	0x20006bcf
200066cc:	20006bcf 	.word	0x20006bcf
200066d0:	20006bcf 	.word	0x20006bcf
200066d4:	20006bcf 	.word	0x20006bcf
200066d8:	20006bcf 	.word	0x20006bcf
200066dc:	20006ad5 	.word	0x20006ad5
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
200066e0:	687b      	ldr	r3, [r7, #4]
200066e2:	699b      	ldr	r3, [r3, #24]
200066e4:	f04f 0200 	mov.w	r2, #0
200066e8:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
200066ea:	687b      	ldr	r3, [r7, #4]
200066ec:	695b      	ldr	r3, [r3, #20]
200066ee:	687a      	ldr	r2, [r7, #4]
200066f0:	6852      	ldr	r2, [r2, #4]
200066f2:	b2d2      	uxtb	r2, r2
200066f4:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
200066f6:	687b      	ldr	r3, [r7, #4]
200066f8:	699b      	ldr	r3, [r3, #24]
200066fa:	687a      	ldr	r2, [r7, #4]
200066fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200066fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
20006702:	687b      	ldr	r3, [r7, #4]
20006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006706:	2b00      	cmp	r3, #0
20006708:	d104      	bne.n	20006714 <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
2000670a:	687b      	ldr	r3, [r7, #4]
2000670c:	f04f 0200 	mov.w	r2, #0
20006710:	629a      	str	r2, [r3, #40]	; 0x28
20006712:	e007      	b.n	20006724 <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
20006714:	687b      	ldr	r3, [r7, #4]
20006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006718:	2b01      	cmp	r3, #1
2000671a:	d103      	bne.n	20006724 <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
2000671c:	687b      	ldr	r3, [r7, #4]
2000671e:	f04f 0200 	mov.w	r2, #0
20006722:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20006724:	687b      	ldr	r3, [r7, #4]
20006726:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
2000672a:	2b00      	cmp	r3, #0
2000672c:	d004      	beq.n	20006738 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
2000672e:	687b      	ldr	r3, [r7, #4]
20006730:	f04f 0200 	mov.w	r2, #0
20006734:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20006738:	687b      	ldr	r3, [r7, #4]
2000673a:	7a1a      	ldrb	r2, [r3, #8]
2000673c:	687b      	ldr	r3, [r7, #4]
2000673e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20006742:	429a      	cmp	r2, r3
20006744:	f000 8267 	beq.w	20006c16 <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20006748:	687b      	ldr	r3, [r7, #4]
2000674a:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
2000674e:	687b      	ldr	r3, [r7, #4]
20006750:	721a      	strb	r2, [r3, #8]
            }
            break;
20006752:	e269      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20006754:	687b      	ldr	r3, [r7, #4]
20006756:	699b      	ldr	r3, [r3, #24]
20006758:	f04f 0201 	mov.w	r2, #1
2000675c:	615a      	str	r2, [r3, #20]
            break;
2000675e:	e263      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20006760:	687b      	ldr	r3, [r7, #4]
20006762:	699b      	ldr	r3, [r3, #24]
20006764:	f04f 0201 	mov.w	r2, #1
20006768:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000676a:	687b      	ldr	r3, [r7, #4]
2000676c:	f04f 0202 	mov.w	r2, #2
20006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20006774:	687b      	ldr	r3, [r7, #4]
20006776:	f04f 0200 	mov.w	r2, #0
2000677a:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
2000677c:	6878      	ldr	r0, [r7, #4]
2000677e:	f7ff fdd5 	bl	2000632c <enable_slave_if_required>
            break;
20006782:	e251      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20006784:	687b      	ldr	r3, [r7, #4]
20006786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20006788:	687b      	ldr	r3, [r7, #4]
2000678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000678c:	429a      	cmp	r2, r3
2000678e:	d20d      	bcs.n	200067ac <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20006790:	687b      	ldr	r3, [r7, #4]
20006792:	695a      	ldr	r2, [r3, #20]
20006794:	687b      	ldr	r3, [r7, #4]
20006796:	6a19      	ldr	r1, [r3, #32]
20006798:	687b      	ldr	r3, [r7, #4]
2000679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000679c:	4419      	add	r1, r3
2000679e:	7809      	ldrb	r1, [r1, #0]
200067a0:	7211      	strb	r1, [r2, #8]
200067a2:	f103 0201 	add.w	r2, r3, #1
200067a6:	687b      	ldr	r3, [r7, #4]
200067a8:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
200067aa:	e23d      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
200067ac:	687b      	ldr	r3, [r7, #4]
200067ae:	7a1b      	ldrb	r3, [r3, #8]
200067b0:	2b03      	cmp	r3, #3
200067b2:	d109      	bne.n	200067c8 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
200067b4:	687b      	ldr	r3, [r7, #4]
200067b6:	f04f 0201 	mov.w	r2, #1
200067ba:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200067bc:	687b      	ldr	r3, [r7, #4]
200067be:	699b      	ldr	r3, [r3, #24]
200067c0:	f04f 0201 	mov.w	r2, #1
200067c4:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
200067c6:	e22f      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
200067c8:	687b      	ldr	r3, [r7, #4]
200067ca:	f04f 0200 	mov.w	r2, #0
200067ce:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
200067d0:	687b      	ldr	r3, [r7, #4]
200067d2:	7c1b      	ldrb	r3, [r3, #16]
200067d4:	f003 0301 	and.w	r3, r3, #1
200067d8:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
200067da:	687b      	ldr	r3, [r7, #4]
200067dc:	7b7a      	ldrb	r2, [r7, #13]
200067de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
200067e2:	7b7b      	ldrb	r3, [r7, #13]
200067e4:	2b00      	cmp	r3, #0
200067e6:	d108      	bne.n	200067fa <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
200067e8:	687b      	ldr	r3, [r7, #4]
200067ea:	699b      	ldr	r3, [r3, #24]
200067ec:	f04f 0201 	mov.w	r2, #1
200067f0:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
200067f2:	6878      	ldr	r0, [r7, #4]
200067f4:	f7ff fd9a 	bl	2000632c <enable_slave_if_required>
200067f8:	e008      	b.n	2000680c <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
200067fa:	687b      	ldr	r3, [r7, #4]
200067fc:	7c5b      	ldrb	r3, [r3, #17]
200067fe:	b25b      	sxtb	r3, r3
20006800:	4618      	mov	r0, r3
20006802:	f7ff fca1 	bl	20006148 <NVIC_DisableIRQ>
                    clear_irq = 0u;
20006806:	f04f 0300 	mov.w	r3, #0
2000680a:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
2000680c:	687b      	ldr	r3, [r7, #4]
2000680e:	f04f 0200 	mov.w	r2, #0
20006812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
20006816:	e207      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20006818:	687b      	ldr	r3, [r7, #4]
2000681a:	699b      	ldr	r3, [r3, #24]
2000681c:	f04f 0201 	mov.w	r2, #1
20006820:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20006822:	687b      	ldr	r3, [r7, #4]
20006824:	f04f 0202 	mov.w	r2, #2
20006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
2000682c:	687b      	ldr	r3, [r7, #4]
2000682e:	f04f 0200 	mov.w	r2, #0
20006832:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20006834:	6878      	ldr	r0, [r7, #4]
20006836:	f7ff fd79 	bl	2000632c <enable_slave_if_required>

            break;
2000683a:	e1f5      	b.n	20006c28 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
2000683c:	687b      	ldr	r3, [r7, #4]
2000683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20006840:	2b01      	cmp	r3, #1
20006842:	d905      	bls.n	20006850 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20006844:	687b      	ldr	r3, [r7, #4]
20006846:	699b      	ldr	r3, [r3, #24]
20006848:	f04f 0201 	mov.w	r2, #1
2000684c:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
2000684e:	e1eb      	b.n	20006c28 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
20006850:	687b      	ldr	r3, [r7, #4]
20006852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20006854:	2b01      	cmp	r3, #1
20006856:	d105      	bne.n	20006864 <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20006858:	687b      	ldr	r3, [r7, #4]
2000685a:	699b      	ldr	r3, [r3, #24]
2000685c:	f04f 0200 	mov.w	r2, #0
20006860:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20006862:	e1e1      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20006864:	687b      	ldr	r3, [r7, #4]
20006866:	699b      	ldr	r3, [r3, #24]
20006868:	f04f 0201 	mov.w	r2, #1
2000686c:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
2000686e:	687b      	ldr	r3, [r7, #4]
20006870:	699b      	ldr	r3, [r3, #24]
20006872:	f04f 0201 	mov.w	r2, #1
20006876:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20006878:	687b      	ldr	r3, [r7, #4]
2000687a:	f04f 0200 	mov.w	r2, #0
2000687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20006882:	687b      	ldr	r3, [r7, #4]
20006884:	f04f 0200 	mov.w	r2, #0
20006888:	721a      	strb	r2, [r3, #8]
            }
            break;
2000688a:	e1cd      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
2000688c:	687b      	ldr	r3, [r7, #4]
2000688e:	699b      	ldr	r3, [r3, #24]
20006890:	f04f 0201 	mov.w	r2, #1
20006894:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20006896:	687b      	ldr	r3, [r7, #4]
20006898:	f04f 0202 	mov.w	r2, #2
2000689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200068a0:	687b      	ldr	r3, [r7, #4]
200068a2:	f04f 0200 	mov.w	r2, #0
200068a6:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
200068a8:	6878      	ldr	r0, [r7, #4]
200068aa:	f7ff fd3f 	bl	2000632c <enable_slave_if_required>
            break;
200068ae:	e1bb      	b.n	20006c28 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
200068b0:	687b      	ldr	r3, [r7, #4]
200068b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200068b4:	687b      	ldr	r3, [r7, #4]
200068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200068b8:	441a      	add	r2, r3
200068ba:	6879      	ldr	r1, [r7, #4]
200068bc:	6949      	ldr	r1, [r1, #20]
200068be:	7a09      	ldrb	r1, [r1, #8]
200068c0:	b2c9      	uxtb	r1, r1
200068c2:	7011      	strb	r1, [r2, #0]
200068c4:	f103 0201 	add.w	r2, r3, #1
200068c8:	687b      	ldr	r3, [r7, #4]
200068ca:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
200068cc:	687b      	ldr	r3, [r7, #4]
200068ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200068d0:	687b      	ldr	r3, [r7, #4]
200068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200068d4:	f103 33ff 	add.w	r3, r3, #4294967295
200068d8:	429a      	cmp	r2, r3
200068da:	f0c0 819e 	bcc.w	20006c1a <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200068de:	687b      	ldr	r3, [r7, #4]
200068e0:	699b      	ldr	r3, [r3, #24]
200068e2:	f04f 0200 	mov.w	r2, #0
200068e6:	609a      	str	r2, [r3, #8]
            }
            break;
200068e8:	e19e      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
200068ea:	687b      	ldr	r3, [r7, #4]
200068ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200068ee:	687b      	ldr	r3, [r7, #4]
200068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200068f2:	4413      	add	r3, r2
200068f4:	687a      	ldr	r2, [r7, #4]
200068f6:	6952      	ldr	r2, [r2, #20]
200068f8:	7a12      	ldrb	r2, [r2, #8]
200068fa:	b2d2      	uxtb	r2, r2
200068fc:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
200068fe:	687b      	ldr	r3, [r7, #4]
20006900:	7c1b      	ldrb	r3, [r3, #16]
20006902:	f003 0301 	and.w	r3, r3, #1
20006906:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20006908:	687b      	ldr	r3, [r7, #4]
2000690a:	7b7a      	ldrb	r2, [r7, #13]
2000690c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
20006910:	7b7b      	ldrb	r3, [r7, #13]
20006912:	2b00      	cmp	r3, #0
20006914:	d108      	bne.n	20006928 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20006916:	687b      	ldr	r3, [r7, #4]
20006918:	699b      	ldr	r3, [r3, #24]
2000691a:	f04f 0201 	mov.w	r2, #1
2000691e:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20006920:	6878      	ldr	r0, [r7, #4]
20006922:	f7ff fd03 	bl	2000632c <enable_slave_if_required>
20006926:	e008      	b.n	2000693a <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20006928:	687b      	ldr	r3, [r7, #4]
2000692a:	7c5b      	ldrb	r3, [r3, #17]
2000692c:	b25b      	sxtb	r3, r3
2000692e:	4618      	mov	r0, r3
20006930:	f7ff fc0a 	bl	20006148 <NVIC_DisableIRQ>
                clear_irq = 0u;
20006934:	f04f 0300 	mov.w	r3, #0
20006938:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
2000693a:	687b      	ldr	r3, [r7, #4]
2000693c:	f04f 0200 	mov.w	r2, #0
20006940:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
20006942:	687b      	ldr	r3, [r7, #4]
20006944:	f04f 0200 	mov.w	r2, #0
20006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
2000694c:	e16c      	b.n	20006c28 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000694e:	687b      	ldr	r3, [r7, #4]
20006950:	699b      	ldr	r3, [r3, #24]
20006952:	f04f 0201 	mov.w	r2, #1
20006956:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20006958:	687b      	ldr	r3, [r7, #4]
2000695a:	f04f 0200 	mov.w	r2, #0
2000695e:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20006960:	687b      	ldr	r3, [r7, #4]
20006962:	f04f 0200 	mov.w	r2, #0
20006966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
2000696a:	687b      	ldr	r3, [r7, #4]
2000696c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20006970:	2b00      	cmp	r3, #0
20006972:	f000 8154 	beq.w	20006c1e <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20006976:	687b      	ldr	r3, [r7, #4]
20006978:	699b      	ldr	r3, [r3, #24]
2000697a:	f04f 0201 	mov.w	r2, #1
2000697e:	615a      	str	r2, [r3, #20]
            }
            break;
20006980:	e152      	b.n	20006c28 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20006982:	687b      	ldr	r3, [r7, #4]
20006984:	f04f 0201 	mov.w	r2, #1
20006988:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
2000698c:	687b      	ldr	r3, [r7, #4]
2000698e:	f04f 0204 	mov.w	r2, #4
20006992:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
20006994:	687b      	ldr	r3, [r7, #4]
20006996:	f04f 0200 	mov.w	r2, #0
2000699a:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
2000699c:	687b      	ldr	r3, [r7, #4]
2000699e:	f04f 0200 	mov.w	r2, #0
200069a2:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
200069a4:	687b      	ldr	r3, [r7, #4]
200069a6:	699b      	ldr	r3, [r3, #24]
200069a8:	695b      	ldr	r3, [r3, #20]
200069aa:	2b00      	cmp	r3, #0
200069ac:	d009      	beq.n	200069c2 <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
200069ae:	687b      	ldr	r3, [r7, #4]
200069b0:	699b      	ldr	r3, [r3, #24]
200069b2:	f04f 0200 	mov.w	r2, #0
200069b6:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
200069b8:	687b      	ldr	r3, [r7, #4]
200069ba:	f04f 0201 	mov.w	r2, #1
200069be:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
200069c2:	687b      	ldr	r3, [r7, #4]
200069c4:	f04f 0201 	mov.w	r2, #1
200069c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
200069cc:	e12c      	b.n	20006c28 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200069ce:	687b      	ldr	r3, [r7, #4]
200069d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200069d2:	2b00      	cmp	r3, #0
200069d4:	d01c      	beq.n	20006a10 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
200069d6:	687b      	ldr	r3, [r7, #4]
200069d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200069da:	687b      	ldr	r3, [r7, #4]
200069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200069de:	429a      	cmp	r2, r3
200069e0:	d216      	bcs.n	20006a10 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
200069e2:	687b      	ldr	r3, [r7, #4]
200069e4:	695b      	ldr	r3, [r3, #20]
200069e6:	7a1b      	ldrb	r3, [r3, #8]
200069e8:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
200069ea:	687b      	ldr	r3, [r7, #4]
200069ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200069ee:	687b      	ldr	r3, [r7, #4]
200069f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200069f2:	441a      	add	r2, r3
200069f4:	7b39      	ldrb	r1, [r7, #12]
200069f6:	7011      	strb	r1, [r2, #0]
200069f8:	f103 0201 	add.w	r2, r3, #1
200069fc:	687b      	ldr	r3, [r7, #4]
200069fe:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20006a00:	687b      	ldr	r3, [r7, #4]
20006a02:	68db      	ldr	r3, [r3, #12]
20006a04:	ea4f 2203 	mov.w	r2, r3, lsl #8
20006a08:	7b3b      	ldrb	r3, [r7, #12]
20006a0a:	441a      	add	r2, r3
20006a0c:	687b      	ldr	r3, [r7, #4]
20006a0e:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20006a10:	687b      	ldr	r3, [r7, #4]
20006a12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20006a14:	687b      	ldr	r3, [r7, #4]
20006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20006a18:	429a      	cmp	r2, r3
20006a1a:	f0c0 8102 	bcc.w	20006c22 <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20006a1e:	687b      	ldr	r3, [r7, #4]
20006a20:	699b      	ldr	r3, [r3, #24]
20006a22:	f04f 0200 	mov.w	r2, #0
20006a26:	609a      	str	r2, [r3, #8]
            }
            break;
20006a28:	e0fe      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20006a2a:	687b      	ldr	r3, [r7, #4]
20006a2c:	7a1b      	ldrb	r3, [r3, #8]
20006a2e:	2b04      	cmp	r3, #4
20006a30:	d135      	bne.n	20006a9e <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20006a32:	687b      	ldr	r3, [r7, #4]
20006a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20006a36:	687b      	ldr	r3, [r7, #4]
20006a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20006a3a:	429a      	cmp	r2, r3
20006a3c:	d103      	bne.n	20006a46 <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20006a3e:	687b      	ldr	r3, [r7, #4]
20006a40:	68da      	ldr	r2, [r3, #12]
20006a42:	687b      	ldr	r3, [r7, #4]
20006a44:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20006a46:	687b      	ldr	r3, [r7, #4]
20006a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20006a4a:	2b00      	cmp	r3, #0
20006a4c:	d021      	beq.n	20006a92 <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20006a4e:	687b      	ldr	r3, [r7, #4]
20006a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20006a52:	687a      	ldr	r2, [r7, #4]
20006a54:	6d11      	ldr	r1, [r2, #80]	; 0x50
20006a56:	687a      	ldr	r2, [r7, #4]
20006a58:	6d92      	ldr	r2, [r2, #88]	; 0x58
20006a5a:	b292      	uxth	r2, r2
20006a5c:	6878      	ldr	r0, [r7, #4]
20006a5e:	4798      	blx	r3
20006a60:	4603      	mov	r3, r0
20006a62:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20006a64:	7bfb      	ldrb	r3, [r7, #15]
20006a66:	2b00      	cmp	r3, #0
20006a68:	d108      	bne.n	20006a7c <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20006a6a:	6878      	ldr	r0, [r7, #4]
20006a6c:	f7ff fc5e 	bl	2000632c <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20006a70:	687b      	ldr	r3, [r7, #4]
20006a72:	699b      	ldr	r3, [r3, #24]
20006a74:	f04f 0201 	mov.w	r2, #1
20006a78:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20006a7a:	e017      	b.n	20006aac <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20006a7c:	687b      	ldr	r3, [r7, #4]
20006a7e:	699b      	ldr	r3, [r3, #24]
20006a80:	f04f 0200 	mov.w	r2, #0
20006a84:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20006a86:	687b      	ldr	r3, [r7, #4]
20006a88:	f04f 0200 	mov.w	r2, #0
20006a8c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20006a90:	e00c      	b.n	20006aac <mss_i2c_isr+0x758>
20006a92:	687b      	ldr	r3, [r7, #4]
20006a94:	699b      	ldr	r3, [r3, #24]
20006a96:	f04f 0201 	mov.w	r2, #1
20006a9a:	609a      	str	r2, [r3, #8]
20006a9c:	e006      	b.n	20006aac <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20006a9e:	687b      	ldr	r3, [r7, #4]
20006aa0:	f04f 0200 	mov.w	r2, #0
20006aa4:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20006aa6:	6878      	ldr	r0, [r7, #4]
20006aa8:	f7ff fc40 	bl	2000632c <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20006aac:	687b      	ldr	r3, [r7, #4]
20006aae:	f04f 0200 	mov.w	r2, #0
20006ab2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006ab6:	687b      	ldr	r3, [r7, #4]
20006ab8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20006abc:	2b00      	cmp	r3, #0
20006abe:	d004      	beq.n	20006aca <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20006ac0:	687b      	ldr	r3, [r7, #4]
20006ac2:	699b      	ldr	r3, [r3, #24]
20006ac4:	f04f 0201 	mov.w	r2, #1
20006ac8:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006aca:	687b      	ldr	r3, [r7, #4]
20006acc:	f04f 0200 	mov.w	r2, #0
20006ad0:	721a      	strb	r2, [r3, #8]
            break;
20006ad2:	e0a9      	b.n	20006c28 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20006ad4:	687b      	ldr	r3, [r7, #4]
20006ad6:	f04f 0200 	mov.w	r2, #0
20006ada:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20006adc:	687b      	ldr	r3, [r7, #4]
20006ade:	f04f 0200 	mov.w	r2, #0
20006ae2:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20006ae4:	687b      	ldr	r3, [r7, #4]
20006ae6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20006aea:	b2db      	uxtb	r3, r3
20006aec:	2b01      	cmp	r3, #1
20006aee:	d104      	bne.n	20006afa <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20006af0:	687b      	ldr	r3, [r7, #4]
20006af2:	f04f 0202 	mov.w	r2, #2
20006af6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20006afa:	6878      	ldr	r0, [r7, #4]
20006afc:	f7ff fc16 	bl	2000632c <enable_slave_if_required>

            break;
20006b00:	e092      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20006b02:	7afb      	ldrb	r3, [r7, #11]
20006b04:	b2db      	uxtb	r3, r3
20006b06:	2ba8      	cmp	r3, #168	; 0xa8
20006b08:	d11b      	bne.n	20006b42 <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20006b0a:	687b      	ldr	r3, [r7, #4]
20006b0c:	f04f 0205 	mov.w	r2, #5
20006b10:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
20006b12:	687b      	ldr	r3, [r7, #4]
20006b14:	f04f 0200 	mov.w	r2, #0
20006b18:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20006b1a:	687b      	ldr	r3, [r7, #4]
20006b1c:	f04f 0201 	mov.w	r2, #1
20006b20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20006b24:	687b      	ldr	r3, [r7, #4]
20006b26:	699b      	ldr	r3, [r3, #24]
20006b28:	695b      	ldr	r3, [r3, #20]
20006b2a:	2b00      	cmp	r3, #0
20006b2c:	d009      	beq.n	20006b42 <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20006b2e:	687b      	ldr	r3, [r7, #4]
20006b30:	699b      	ldr	r3, [r3, #24]
20006b32:	f04f 0200 	mov.w	r2, #0
20006b36:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20006b38:	687b      	ldr	r3, [r7, #4]
20006b3a:	f04f 0201 	mov.w	r2, #1
20006b3e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20006b42:	687b      	ldr	r3, [r7, #4]
20006b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20006b46:	687b      	ldr	r3, [r7, #4]
20006b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20006b4a:	429a      	cmp	r2, r3
20006b4c:	d305      	bcc.n	20006b5a <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20006b4e:	687b      	ldr	r3, [r7, #4]
20006b50:	695b      	ldr	r3, [r3, #20]
20006b52:	f04f 32ff 	mov.w	r2, #4294967295
20006b56:	721a      	strb	r2, [r3, #8]
20006b58:	e00c      	b.n	20006b74 <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20006b5a:	687b      	ldr	r3, [r7, #4]
20006b5c:	695a      	ldr	r2, [r3, #20]
20006b5e:	687b      	ldr	r3, [r7, #4]
20006b60:	6c59      	ldr	r1, [r3, #68]	; 0x44
20006b62:	687b      	ldr	r3, [r7, #4]
20006b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20006b66:	4419      	add	r1, r3
20006b68:	7809      	ldrb	r1, [r1, #0]
20006b6a:	7211      	strb	r1, [r2, #8]
20006b6c:	f103 0201 	add.w	r2, r3, #1
20006b70:	687b      	ldr	r3, [r7, #4]
20006b72:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20006b74:	687b      	ldr	r3, [r7, #4]
20006b76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20006b78:	687b      	ldr	r3, [r7, #4]
20006b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20006b7c:	429a      	cmp	r2, r3
20006b7e:	d352      	bcc.n	20006c26 <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20006b80:	687b      	ldr	r3, [r7, #4]
20006b82:	699b      	ldr	r3, [r3, #24]
20006b84:	f04f 0200 	mov.w	r2, #0
20006b88:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20006b8a:	687b      	ldr	r3, [r7, #4]
20006b8c:	f04f 0200 	mov.w	r2, #0
20006b90:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
20006b92:	e049      	b.n	20006c28 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20006b94:	687b      	ldr	r3, [r7, #4]
20006b96:	f04f 0200 	mov.w	r2, #0
20006b9a:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20006b9c:	687b      	ldr	r3, [r7, #4]
20006b9e:	699b      	ldr	r3, [r3, #24]
20006ba0:	f04f 0201 	mov.w	r2, #1
20006ba4:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20006ba6:	687b      	ldr	r3, [r7, #4]
20006ba8:	f04f 0200 	mov.w	r2, #0
20006bac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006bb0:	687b      	ldr	r3, [r7, #4]
20006bb2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20006bb6:	2b00      	cmp	r3, #0
20006bb8:	d004      	beq.n	20006bc4 <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20006bba:	687b      	ldr	r3, [r7, #4]
20006bbc:	699b      	ldr	r3, [r3, #24]
20006bbe:	f04f 0201 	mov.w	r2, #1
20006bc2:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006bc4:	687b      	ldr	r3, [r7, #4]
20006bc6:	f04f 0200 	mov.w	r2, #0
20006bca:	721a      	strb	r2, [r3, #8]
            break;
20006bcc:	e02c      	b.n	20006c28 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20006bce:	687b      	ldr	r3, [r7, #4]
20006bd0:	699b      	ldr	r3, [r3, #24]
20006bd2:	f04f 0200 	mov.w	r2, #0
20006bd6:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006bd8:	687b      	ldr	r3, [r7, #4]
20006bda:	f04f 0200 	mov.w	r2, #0
20006bde:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20006be0:	687b      	ldr	r3, [r7, #4]
20006be2:	f04f 0200 	mov.w	r2, #0
20006be6:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20006be8:	687b      	ldr	r3, [r7, #4]
20006bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20006bee:	b2db      	uxtb	r3, r3
20006bf0:	2b01      	cmp	r3, #1
20006bf2:	d104      	bne.n	20006bfe <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20006bf4:	687b      	ldr	r3, [r7, #4]
20006bf6:	f04f 0202 	mov.w	r2, #2
20006bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20006bfe:	687b      	ldr	r3, [r7, #4]
20006c00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20006c04:	b2db      	uxtb	r3, r3
20006c06:	2b01      	cmp	r3, #1
20006c08:	d10e      	bne.n	20006c28 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20006c0a:	687b      	ldr	r3, [r7, #4]
20006c0c:	f04f 0202 	mov.w	r2, #2
20006c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
20006c14:	e008      	b.n	20006c28 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20006c16:	bf00      	nop
20006c18:	e006      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
20006c1a:	bf00      	nop
20006c1c:	e004      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
20006c1e:	bf00      	nop
20006c20:	e002      	b.n	20006c28 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
20006c22:	bf00      	nop
20006c24:	e000      	b.n	20006c28 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20006c26:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
20006c28:	7bbb      	ldrb	r3, [r7, #14]
20006c2a:	2b00      	cmp	r3, #0
20006c2c:	d004      	beq.n	20006c38 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20006c2e:	687b      	ldr	r3, [r7, #4]
20006c30:	699b      	ldr	r3, [r3, #24]
20006c32:	f04f 0200 	mov.w	r2, #0
20006c36:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20006c38:	687b      	ldr	r3, [r7, #4]
20006c3a:	695b      	ldr	r3, [r3, #20]
20006c3c:	791b      	ldrb	r3, [r3, #4]
20006c3e:	72fb      	strb	r3, [r7, #11]
}
20006c40:	f107 0710 	add.w	r7, r7, #16
20006c44:	46bd      	mov	sp, r7
20006c46:	bd80      	pop	{r7, pc}

20006c48 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20006c48:	b480      	push	{r7}
20006c4a:	b085      	sub	sp, #20
20006c4c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20006c4e:	f3ef 8310 	mrs	r3, PRIMASK
20006c52:	60bb      	str	r3, [r7, #8]
  return(result);
20006c54:	68bb      	ldr	r3, [r7, #8]
    uint32_t primask;
    primask = __get_PRIMASK();
20006c56:	607b      	str	r3, [r7, #4]
20006c58:	f04f 0301 	mov.w	r3, #1
20006c5c:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20006c5e:	68fb      	ldr	r3, [r7, #12]
20006c60:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(1u);
    return primask;
20006c64:	687b      	ldr	r3, [r7, #4]
}
20006c66:	4618      	mov	r0, r3
20006c68:	f107 0714 	add.w	r7, r7, #20
20006c6c:	46bd      	mov	sp, r7
20006c6e:	bc80      	pop	{r7}
20006c70:	4770      	bx	lr
20006c72:	bf00      	nop

20006c74 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20006c74:	b480      	push	{r7}
20006c76:	b085      	sub	sp, #20
20006c78:	af00      	add	r7, sp, #0
20006c7a:	6078      	str	r0, [r7, #4]
20006c7c:	687b      	ldr	r3, [r7, #4]
20006c7e:	60fb      	str	r3, [r7, #12]
20006c80:	68fb      	ldr	r3, [r7, #12]
20006c82:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK( primask );
}
20006c86:	f107 0714 	add.w	r7, r7, #20
20006c8a:	46bd      	mov	sp, r7
20006c8c:	bc80      	pop	{r7}
20006c8e:	4770      	bx	lr

20006c90 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20006c90:	4668      	mov	r0, sp
20006c92:	f020 0107 	bic.w	r1, r0, #7
20006c96:	468d      	mov	sp, r1
20006c98:	b589      	push	{r0, r3, r7, lr}
20006c9a:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
20006c9c:	f24f 006c 	movw	r0, #61548	; 0xf06c
20006ca0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20006ca4:	f7ff fb56 	bl	20006354 <mss_i2c_isr>
}
20006ca8:	46bd      	mov	sp, r7
20006caa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20006cae:	4685      	mov	sp, r0
20006cb0:	4770      	bx	lr
20006cb2:	bf00      	nop

20006cb4 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20006cb4:	4668      	mov	r0, sp
20006cb6:	f020 0107 	bic.w	r1, r0, #7
20006cba:	468d      	mov	sp, r1
20006cbc:	b589      	push	{r0, r3, r7, lr}
20006cbe:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
20006cc0:	f24f 00e0 	movw	r0, #61664	; 0xf0e0
20006cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20006cc8:	f7ff fb44 	bl	20006354 <mss_i2c_isr>
}
20006ccc:	46bd      	mov	sp, r7
20006cce:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20006cd2:	4685      	mov	sp, r0
20006cd4:	4770      	bx	lr
20006cd6:	bf00      	nop

20006cd8 <I2C_init>:
    i2c_instance_t * this_i2c,
    addr_t base_address,
    uint8_t ser_address,
    i2c_clock_divider_t ser_clock_speed
)
{
20006cd8:	b580      	push	{r7, lr}
20006cda:	b086      	sub	sp, #24
20006cdc:	af00      	add	r7, sp, #0
20006cde:	60f8      	str	r0, [r7, #12]
20006ce0:	60b9      	str	r1, [r7, #8]
20006ce2:	71fa      	strb	r2, [r7, #7]
20006ce4:	71bb      	strb	r3, [r7, #6]
    psr_t saved_psr;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
20006ce6:	79bb      	ldrb	r3, [r7, #6]
20006ce8:	617b      	str	r3, [r7, #20]
    
    /*
     * We need to disable ints while doing this as there is no guarantee we
     * have not been called already and the ISR is active.
     */
    saved_psr = HAL_disable_interrupts();
20006cea:	f001 f9e9 	bl	200080c0 <HAL_disable_interrupts>
20006cee:	4603      	mov	r3, r0
20006cf0:	613b      	str	r3, [r7, #16]
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    memset(this_i2c, 0, sizeof(i2c_instance_t));
20006cf2:	68f8      	ldr	r0, [r7, #12]
20006cf4:	f04f 0100 	mov.w	r1, #0
20006cf8:	f04f 026c 	mov.w	r2, #108	; 0x6c
20006cfc:	f001 fb20 	bl	20008340 <memset>
    
    /*
     * Set base address of I2C hardware used by this instance.
     */
    this_i2c->base_address = base_address;
20006d00:	68fb      	ldr	r3, [r7, #12]
20006d02:	68ba      	ldr	r2, [r7, #8]
20006d04:	601a      	str	r2, [r3, #0]

    /*
     * Update Serial address of the device
     */
    this_i2c->ser_address = ((uint_fast8_t)ser_address << 1u);
20006d06:	79fb      	ldrb	r3, [r7, #7]
20006d08:	ea4f 0243 	mov.w	r2, r3, lsl #1
20006d0c:	68fb      	ldr	r3, [r7, #12]
20006d0e:	605a      	str	r2, [r3, #4]
    
    /*
     * Configure hardware.
     */
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x00); /* Reset I2C hardware. */
20006d10:	68fb      	ldr	r3, [r7, #12]
20006d12:	681b      	ldr	r3, [r3, #0]
20006d14:	4618      	mov	r0, r3
20006d16:	f04f 0106 	mov.w	r1, #6
20006d1a:	f04f 0240 	mov.w	r2, #64	; 0x40
20006d1e:	f04f 0300 	mov.w	r3, #0
20006d22:	f001 fa08 	bl	20008136 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x01); /* set enable bit */
20006d26:	68fb      	ldr	r3, [r7, #12]
20006d28:	681b      	ldr	r3, [r3, #0]
20006d2a:	4618      	mov	r0, r3
20006d2c:	f04f 0106 	mov.w	r1, #6
20006d30:	f04f 0240 	mov.w	r2, #64	; 0x40
20006d34:	f04f 0301 	mov.w	r3, #1
20006d38:	f001 f9fd 	bl	20008136 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR2, ( (clock_speed >> 2) & 0x01) );
20006d3c:	68fb      	ldr	r3, [r7, #12]
20006d3e:	681a      	ldr	r2, [r3, #0]
20006d40:	697b      	ldr	r3, [r7, #20]
20006d42:	ea4f 0393 	mov.w	r3, r3, lsr #2
20006d46:	f003 0301 	and.w	r3, r3, #1
20006d4a:	4610      	mov	r0, r2
20006d4c:	f04f 0107 	mov.w	r1, #7
20006d50:	f04f 0280 	mov.w	r2, #128	; 0x80
20006d54:	f001 f9ef 	bl	20008136 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR1, ( (clock_speed >> 1) & 0x01) );
20006d58:	68fb      	ldr	r3, [r7, #12]
20006d5a:	681a      	ldr	r2, [r3, #0]
20006d5c:	697b      	ldr	r3, [r7, #20]
20006d5e:	ea4f 0353 	mov.w	r3, r3, lsr #1
20006d62:	f003 0301 	and.w	r3, r3, #1
20006d66:	4610      	mov	r0, r2
20006d68:	f04f 0101 	mov.w	r1, #1
20006d6c:	f04f 0202 	mov.w	r2, #2
20006d70:	f001 f9e1 	bl	20008136 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR0, ( clock_speed & 0x01) );
20006d74:	68fb      	ldr	r3, [r7, #12]
20006d76:	681a      	ldr	r2, [r3, #0]
20006d78:	697b      	ldr	r3, [r7, #20]
20006d7a:	f003 0301 	and.w	r3, r3, #1
20006d7e:	4610      	mov	r0, r2
20006d80:	f04f 0100 	mov.w	r1, #0
20006d84:	f04f 0201 	mov.w	r2, #1
20006d88:	f001 f9d5 	bl	20008136 <HW_set_8bit_reg_field>

    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS, this_i2c->ser_address);
20006d8c:	68fb      	ldr	r3, [r7, #12]
20006d8e:	681b      	ldr	r3, [r3, #0]
20006d90:	f103 020c 	add.w	r2, r3, #12
20006d94:	68fb      	ldr	r3, [r7, #12]
20006d96:	685b      	ldr	r3, [r3, #4]
20006d98:	4610      	mov	r0, r2
20006d9a:	4619      	mov	r1, r3
20006d9c:	f001 f9c7 	bl	2000812e <HW_set_8bit_reg>
    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS1, this_i2c->ser_address);
20006da0:	68fb      	ldr	r3, [r7, #12]
20006da2:	681b      	ldr	r3, [r3, #0]
20006da4:	f103 021c 	add.w	r2, r3, #28
20006da8:	68fb      	ldr	r3, [r7, #12]
20006daa:	685b      	ldr	r3, [r3, #4]
20006dac:	4610      	mov	r0, r2
20006dae:	4619      	mov	r1, r3
20006db0:	f001 f9bd 	bl	2000812e <HW_set_8bit_reg>
    
    /*
     * Finally safe to enable interrupts.
     */
    HAL_restore_interrupts( saved_psr );
20006db4:	6938      	ldr	r0, [r7, #16]
20006db6:	f001 f987 	bl	200080c8 <HAL_restore_interrupts>
}
20006dba:	f107 0718 	add.w	r7, r7, #24
20006dbe:	46bd      	mov	sp, r7
20006dc0:	bd80      	pop	{r7, pc}
20006dc2:	bf00      	nop

20006dc4 <I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20006dc4:	b580      	push	{r7, lr}
20006dc6:	b086      	sub	sp, #24
20006dc8:	af00      	add	r7, sp, #0
20006dca:	60f8      	str	r0, [r7, #12]
20006dcc:	607a      	str	r2, [r7, #4]
20006dce:	460a      	mov	r2, r1
20006dd0:	72fa      	strb	r2, [r7, #11]
20006dd2:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
20006dd4:	f001 f974 	bl	200080c0 <HAL_disable_interrupts>
20006dd8:	4603      	mov	r3, r0
20006dda:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20006ddc:	68fb      	ldr	r3, [r7, #12]
20006dde:	7b1b      	ldrb	r3, [r3, #12]
20006de0:	2b00      	cmp	r3, #0
20006de2:	d103      	bne.n	20006dec <I2C_write+0x28>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20006de4:	68fb      	ldr	r3, [r7, #12]
20006de6:	f04f 0201 	mov.w	r2, #1
20006dea:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
20006dec:	68fb      	ldr	r3, [r7, #12]
20006dee:	f04f 0201 	mov.w	r2, #1
20006df2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20006df6:	7afb      	ldrb	r3, [r7, #11]
20006df8:	ea4f 0243 	mov.w	r2, r3, lsl #1
20006dfc:	68fb      	ldr	r3, [r7, #12]
20006dfe:	609a      	str	r2, [r3, #8]
    this_i2c->dir = WRITE_DIR;
20006e00:	68fb      	ldr	r3, [r7, #12]
20006e02:	f04f 0200 	mov.w	r2, #0
20006e06:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_buffer = write_buffer;
20006e08:	68fb      	ldr	r3, [r7, #12]
20006e0a:	687a      	ldr	r2, [r7, #4]
20006e0c:	619a      	str	r2, [r3, #24]
    this_i2c->master_tx_size = write_size;
20006e0e:	887a      	ldrh	r2, [r7, #2]
20006e10:	68fb      	ldr	r3, [r7, #12]
20006e12:	61da      	str	r2, [r3, #28]
    this_i2c->master_tx_idx = 0u;
20006e14:	68fb      	ldr	r3, [r7, #12]
20006e16:	f04f 0200 	mov.w	r2, #0
20006e1a:	621a      	str	r2, [r3, #32]

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
20006e1c:	68fb      	ldr	r3, [r7, #12]
20006e1e:	f04f 0201 	mov.w	r2, #1
20006e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    this_i2c->options = options;
20006e26:	68fb      	ldr	r3, [r7, #12]
20006e28:	f897 2020 	ldrb.w	r2, [r7, #32]
20006e2c:	751a      	strb	r2, [r3, #20]

    if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006e2e:	68fb      	ldr	r3, [r7, #12]
20006e30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006e34:	b2db      	uxtb	r3, r3
20006e36:	2b01      	cmp	r3, #1
20006e38:	d105      	bne.n	20006e46 <I2C_write+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
20006e3a:	68fb      	ldr	r3, [r7, #12]
20006e3c:	f04f 0201 	mov.w	r2, #1
20006e40:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006e44:	e00a      	b.n	20006e5c <I2C_write+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006e46:	68fb      	ldr	r3, [r7, #12]
20006e48:	681b      	ldr	r3, [r3, #0]
20006e4a:	4618      	mov	r0, r3
20006e4c:	f04f 0105 	mov.w	r1, #5
20006e50:	f04f 0220 	mov.w	r2, #32
20006e54:	f04f 0301 	mov.w	r3, #1
20006e58:	f001 f96d 	bl	20008136 <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
20006e5c:	68fb      	ldr	r3, [r7, #12]
20006e5e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20006e62:	2b01      	cmp	r3, #1
20006e64:	d10a      	bne.n	20006e7c <I2C_write+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006e66:	68fb      	ldr	r3, [r7, #12]
20006e68:	681b      	ldr	r3, [r3, #0]
20006e6a:	4618      	mov	r0, r3
20006e6c:	f04f 0103 	mov.w	r1, #3
20006e70:	f04f 0208 	mov.w	r2, #8
20006e74:	f04f 0300 	mov.w	r3, #0
20006e78:	f001 f95d 	bl	20008136 <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20006e7c:	68fb      	ldr	r3, [r7, #12]
20006e7e:	681b      	ldr	r3, [r3, #0]
20006e80:	f103 0304 	add.w	r3, r3, #4
20006e84:	4618      	mov	r0, r3
20006e86:	f001 f954 	bl	20008132 <HW_get_8bit_reg>
20006e8a:	4603      	mov	r3, r0
20006e8c:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20006e8e:	7cfb      	ldrb	r3, [r7, #19]
20006e90:	b2db      	uxtb	r3, r3
20006e92:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
20006e94:	68f8      	ldr	r0, [r7, #12]
20006e96:	f000 fec9 	bl	20007c2c <I2C_enable_irq>

    HAL_restore_interrupts( saved_psr );
20006e9a:	6978      	ldr	r0, [r7, #20]
20006e9c:	f001 f914 	bl	200080c8 <HAL_restore_interrupts>
}
20006ea0:	f107 0718 	add.w	r7, r7, #24
20006ea4:	46bd      	mov	sp, r7
20006ea6:	bd80      	pop	{r7, pc}

20006ea8 <I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20006ea8:	b580      	push	{r7, lr}
20006eaa:	b086      	sub	sp, #24
20006eac:	af00      	add	r7, sp, #0
20006eae:	60f8      	str	r0, [r7, #12]
20006eb0:	607a      	str	r2, [r7, #4]
20006eb2:	460a      	mov	r2, r1
20006eb4:	72fa      	strb	r2, [r7, #11]
20006eb6:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
20006eb8:	f001 f902 	bl	200080c0 <HAL_disable_interrupts>
20006ebc:	4603      	mov	r3, r0
20006ebe:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20006ec0:	68fb      	ldr	r3, [r7, #12]
20006ec2:	7b1b      	ldrb	r3, [r3, #12]
20006ec4:	2b00      	cmp	r3, #0
20006ec6:	d103      	bne.n	20006ed0 <I2C_read+0x28>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20006ec8:	68fb      	ldr	r3, [r7, #12]
20006eca:	f04f 0202 	mov.w	r2, #2
20006ece:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20006ed0:	68fb      	ldr	r3, [r7, #12]
20006ed2:	f04f 0202 	mov.w	r2, #2
20006ed6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20006eda:	7afb      	ldrb	r3, [r7, #11]
20006edc:	ea4f 0243 	mov.w	r2, r3, lsl #1
20006ee0:	68fb      	ldr	r3, [r7, #12]
20006ee2:	609a      	str	r2, [r3, #8]

    this_i2c->dir = READ_DIR;
20006ee4:	68fb      	ldr	r3, [r7, #12]
20006ee6:	f04f 0201 	mov.w	r2, #1
20006eea:	625a      	str	r2, [r3, #36]	; 0x24

    this_i2c->master_rx_buffer = read_buffer;
20006eec:	68fb      	ldr	r3, [r7, #12]
20006eee:	687a      	ldr	r2, [r7, #4]
20006ef0:	629a      	str	r2, [r3, #40]	; 0x28
    this_i2c->master_rx_size = read_size;
20006ef2:	887a      	ldrh	r2, [r7, #2]
20006ef4:	68fb      	ldr	r3, [r7, #12]
20006ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    this_i2c->master_rx_idx = 0u;
20006ef8:	68fb      	ldr	r3, [r7, #12]
20006efa:	f04f 0200 	mov.w	r2, #0
20006efe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
20006f00:	68fb      	ldr	r3, [r7, #12]
20006f02:	f04f 0201 	mov.w	r2, #1
20006f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    this_i2c->options = options;
20006f0a:	68fb      	ldr	r3, [r7, #12]
20006f0c:	f897 2020 	ldrb.w	r2, [r7, #32]
20006f10:	751a      	strb	r2, [r3, #20]
    
    if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006f12:	68fb      	ldr	r3, [r7, #12]
20006f14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006f18:	b2db      	uxtb	r3, r3
20006f1a:	2b01      	cmp	r3, #1
20006f1c:	d105      	bne.n	20006f2a <I2C_read+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
20006f1e:	68fb      	ldr	r3, [r7, #12]
20006f20:	f04f 0201 	mov.w	r2, #1
20006f24:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006f28:	e00a      	b.n	20006f40 <I2C_read+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006f2a:	68fb      	ldr	r3, [r7, #12]
20006f2c:	681b      	ldr	r3, [r3, #0]
20006f2e:	4618      	mov	r0, r3
20006f30:	f04f 0105 	mov.w	r1, #5
20006f34:	f04f 0220 	mov.w	r2, #32
20006f38:	f04f 0301 	mov.w	r3, #1
20006f3c:	f001 f8fb 	bl	20008136 <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
20006f40:	68fb      	ldr	r3, [r7, #12]
20006f42:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20006f46:	2b01      	cmp	r3, #1
20006f48:	d10a      	bne.n	20006f60 <I2C_read+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006f4a:	68fb      	ldr	r3, [r7, #12]
20006f4c:	681b      	ldr	r3, [r3, #0]
20006f4e:	4618      	mov	r0, r3
20006f50:	f04f 0103 	mov.w	r1, #3
20006f54:	f04f 0208 	mov.w	r2, #8
20006f58:	f04f 0300 	mov.w	r3, #0
20006f5c:	f001 f8eb 	bl	20008136 <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20006f60:	68fb      	ldr	r3, [r7, #12]
20006f62:	681b      	ldr	r3, [r3, #0]
20006f64:	f103 0304 	add.w	r3, r3, #4
20006f68:	4618      	mov	r0, r3
20006f6a:	f001 f8e2 	bl	20008132 <HW_get_8bit_reg>
20006f6e:	4603      	mov	r3, r0
20006f70:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20006f72:	7cfb      	ldrb	r3, [r7, #19]
20006f74:	b2db      	uxtb	r3, r3
20006f76:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
20006f78:	68f8      	ldr	r0, [r7, #12]
20006f7a:	f000 fe57 	bl	20007c2c <I2C_enable_irq>
    HAL_restore_interrupts( saved_psr );
20006f7e:	6978      	ldr	r0, [r7, #20]
20006f80:	f001 f8a2 	bl	200080c8 <HAL_restore_interrupts>
}
20006f84:	f107 0718 	add.w	r7, r7, #24
20006f88:	46bd      	mov	sp, r7
20006f8a:	bd80      	pop	{r7, pc}

20006f8c <I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20006f8c:	b580      	push	{r7, lr}
20006f8e:	b086      	sub	sp, #24
20006f90:	af00      	add	r7, sp, #0
20006f92:	60f8      	str	r0, [r7, #12]
20006f94:	607a      	str	r2, [r7, #4]
20006f96:	460a      	mov	r2, r1
20006f98:	72fa      	strb	r2, [r7, #11]
20006f9a:	807b      	strh	r3, [r7, #2]
    HAL_ASSERT(offset_size > 0u);
20006f9c:	887b      	ldrh	r3, [r7, #2]
20006f9e:	2b00      	cmp	r3, #0
20006fa0:	d100      	bne.n	20006fa4 <I2C_write_read+0x18>
20006fa2:	be00      	bkpt	0x0000
    HAL_ASSERT(addr_offset != (uint8_t *)0);
20006fa4:	687b      	ldr	r3, [r7, #4]
20006fa6:	2b00      	cmp	r3, #0
20006fa8:	d100      	bne.n	20006fac <I2C_write_read+0x20>
20006faa:	be00      	bkpt	0x0000
    HAL_ASSERT(read_size > 0u);
20006fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20006fae:	2b00      	cmp	r3, #0
20006fb0:	d100      	bne.n	20006fb4 <I2C_write_read+0x28>
20006fb2:	be00      	bkpt	0x0000
    HAL_ASSERT(read_buffer != (uint8_t *)0);
20006fb4:	6a3b      	ldr	r3, [r7, #32]
20006fb6:	2b00      	cmp	r3, #0
20006fb8:	d100      	bne.n	20006fbc <I2C_write_read+0x30>
20006fba:	be00      	bkpt	0x0000
    
    this_i2c->master_status = I2C_FAILED;
20006fbc:	68fb      	ldr	r3, [r7, #12]
20006fbe:	f04f 0202 	mov.w	r2, #2
20006fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if((read_size > 0u) && (offset_size > 0u))
20006fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20006fc8:	2b00      	cmp	r3, #0
20006fca:	d072      	beq.n	200070b2 <I2C_write_read+0x126>
20006fcc:	887b      	ldrh	r3, [r7, #2]
20006fce:	2b00      	cmp	r3, #0
20006fd0:	d06f      	beq.n	200070b2 <I2C_write_read+0x126>
    {
        psr_t saved_psr;
        volatile uint8_t stat_ctrl;

        saved_psr = HAL_disable_interrupts();
20006fd2:	f001 f875 	bl	200080c0 <HAL_disable_interrupts>
20006fd6:	4603      	mov	r3, r0
20006fd8:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
20006fda:	68fb      	ldr	r3, [r7, #12]
20006fdc:	7b1b      	ldrb	r3, [r3, #12]
20006fde:	2b00      	cmp	r3, #0
20006fe0:	d103      	bne.n	20006fea <I2C_write_read+0x5e>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
20006fe2:	68fb      	ldr	r3, [r7, #12]
20006fe4:	f04f 0203 	mov.w	r2, #3
20006fe8:	731a      	strb	r2, [r3, #12]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
20006fea:	68fb      	ldr	r3, [r7, #12]
20006fec:	f04f 0203 	mov.w	r2, #3
20006ff0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20006ff4:	7afb      	ldrb	r3, [r7, #11]
20006ff6:	ea4f 0243 	mov.w	r2, r3, lsl #1
20006ffa:	68fb      	ldr	r3, [r7, #12]
20006ffc:	609a      	str	r2, [r3, #8]

        this_i2c->dir = WRITE_DIR;
20006ffe:	68fb      	ldr	r3, [r7, #12]
20007000:	f04f 0200 	mov.w	r2, #0
20007004:	625a      	str	r2, [r3, #36]	; 0x24

        this_i2c->master_tx_buffer = addr_offset;
20007006:	68fb      	ldr	r3, [r7, #12]
20007008:	687a      	ldr	r2, [r7, #4]
2000700a:	619a      	str	r2, [r3, #24]
        this_i2c->master_tx_size = offset_size;
2000700c:	887a      	ldrh	r2, [r7, #2]
2000700e:	68fb      	ldr	r3, [r7, #12]
20007010:	61da      	str	r2, [r3, #28]
        this_i2c->master_tx_idx = 0u;
20007012:	68fb      	ldr	r3, [r7, #12]
20007014:	f04f 0200 	mov.w	r2, #0
20007018:	621a      	str	r2, [r3, #32]

        this_i2c->master_rx_buffer = read_buffer;
2000701a:	68fb      	ldr	r3, [r7, #12]
2000701c:	6a3a      	ldr	r2, [r7, #32]
2000701e:	629a      	str	r2, [r3, #40]	; 0x28
        this_i2c->master_rx_size = read_size;
20007020:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20007022:	68fb      	ldr	r3, [r7, #12]
20007024:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_rx_idx = 0u;
20007026:	68fb      	ldr	r3, [r7, #12]
20007028:	f04f 0200 	mov.w	r2, #0
2000702c:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Set I2C status in progress */
        this_i2c->master_status = I2C_IN_PROGRESS;
2000702e:	68fb      	ldr	r3, [r7, #12]
20007030:	f04f 0201 	mov.w	r2, #1
20007034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        this_i2c->options = options;
20007038:	68fb      	ldr	r3, [r7, #12]
2000703a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
2000703e:	751a      	strb	r2, [r3, #20]
        
        if(I2C_IN_PROGRESS == this_i2c->slave_status)
20007040:	68fb      	ldr	r3, [r7, #12]
20007042:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20007046:	b2db      	uxtb	r3, r3
20007048:	2b01      	cmp	r3, #1
2000704a:	d105      	bne.n	20007058 <I2C_write_read+0xcc>
        {
            this_i2c->is_transaction_pending = 1u;
2000704c:	68fb      	ldr	r3, [r7, #12]
2000704e:	f04f 0201 	mov.w	r2, #1
20007052:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20007056:	e00a      	b.n	2000706e <I2C_write_read+0xe2>
        }
        else
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20007058:	68fb      	ldr	r3, [r7, #12]
2000705a:	681b      	ldr	r3, [r3, #0]
2000705c:	4618      	mov	r0, r3
2000705e:	f04f 0105 	mov.w	r1, #5
20007062:	f04f 0220 	mov.w	r2, #32
20007066:	f04f 0301 	mov.w	r3, #1
2000706a:	f001 f864 	bl	20008136 <HW_set_8bit_reg_field>
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( I2C_HOLD_BUS == this_i2c->bus_status )
2000706e:	68fb      	ldr	r3, [r7, #12]
20007070:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20007074:	2b01      	cmp	r3, #1
20007076:	d10a      	bne.n	2000708e <I2C_write_read+0x102>
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20007078:	68fb      	ldr	r3, [r7, #12]
2000707a:	681b      	ldr	r3, [r3, #0]
2000707c:	4618      	mov	r0, r3
2000707e:	f04f 0103 	mov.w	r1, #3
20007082:	f04f 0208 	mov.w	r2, #8
20007086:	f04f 0300 	mov.w	r3, #0
2000708a:	f001 f854 	bl	20008136 <HW_set_8bit_reg_field>
        }

        stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
2000708e:	68fb      	ldr	r3, [r7, #12]
20007090:	681b      	ldr	r3, [r3, #0]
20007092:	f103 0304 	add.w	r3, r3, #4
20007096:	4618      	mov	r0, r3
20007098:	f001 f84b 	bl	20008132 <HW_get_8bit_reg>
2000709c:	4603      	mov	r3, r0
2000709e:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
200070a0:	7cfb      	ldrb	r3, [r7, #19]
200070a2:	b2db      	uxtb	r3, r3
200070a4:	74fb      	strb	r3, [r7, #19]
            
        /* Enable the interrupt. ( Re-enable) */
        I2C_enable_irq( this_i2c );
200070a6:	68f8      	ldr	r0, [r7, #12]
200070a8:	f000 fdc0 	bl	20007c2c <I2C_enable_irq>

        HAL_restore_interrupts( saved_psr );
200070ac:	6978      	ldr	r0, [r7, #20]
200070ae:	f001 f80b 	bl	200080c8 <HAL_restore_interrupts>
    }
}
200070b2:	f107 0718 	add.w	r7, r7, #24
200070b6:	46bd      	mov	sp, r7
200070b8:	bd80      	pop	{r7, pc}
200070ba:	bf00      	nop

200070bc <I2C_wait_complete>:
i2c_status_t I2C_wait_complete
(
    i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
200070bc:	b580      	push	{r7, lr}
200070be:	b084      	sub	sp, #16
200070c0:	af00      	add	r7, sp, #0
200070c2:	6078      	str	r0, [r7, #4]
200070c4:	6039      	str	r1, [r7, #0]
     * Because we have no idea of what CPU we are supposed to be running on
     * we need to guard this write to the timeout value to avoid ISR/user code
     * interaction issues. Checking the status below should be fine as only a
     * single byte should change in that.
     */
    saved_psr = HAL_disable_interrupts();
200070c6:	f000 fffb 	bl	200080c0 <HAL_disable_interrupts>
200070ca:	4603      	mov	r3, r0
200070cc:	60fb      	str	r3, [r7, #12]
    this_i2c->master_timeout_ms = timeout_ms;
200070ce:	687b      	ldr	r3, [r7, #4]
200070d0:	683a      	ldr	r2, [r7, #0]
200070d2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_restore_interrupts( saved_psr );
200070d4:	68f8      	ldr	r0, [r7, #12]
200070d6:	f000 fff7 	bl	200080c8 <HAL_restore_interrupts>

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
200070da:	687b      	ldr	r3, [r7, #4]
200070dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200070e0:	72fb      	strb	r3, [r7, #11]
    } while(I2C_IN_PROGRESS == i2c_status);
200070e2:	7afb      	ldrb	r3, [r7, #11]
200070e4:	2b01      	cmp	r3, #1
200070e6:	d0f8      	beq.n	200070da <I2C_wait_complete+0x1e>
    return i2c_status;
200070e8:	7afb      	ldrb	r3, [r7, #11]
}
200070ea:	4618      	mov	r0, r3
200070ec:	f107 0710 	add.w	r7, r7, #16
200070f0:	46bd      	mov	sp, r7
200070f2:	bd80      	pop	{r7, pc}

200070f4 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    i2c_instance_t * this_i2c
)
{
200070f4:	b580      	push	{r7, lr}
200070f6:	b082      	sub	sp, #8
200070f8:	af00      	add	r7, sp, #0
200070fa:	6078      	str	r0, [r7, #4]
    /*
     * This function is only called from within the ISR and so does not need
     * guarding on the register access.
     */
    if( 0 != this_i2c->is_slave_enabled )
200070fc:	687b      	ldr	r3, [r7, #4]
200070fe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
20007102:	2b00      	cmp	r3, #0
20007104:	d00a      	beq.n	2000711c <enable_slave_if_required+0x28>
    {
        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20007106:	687b      	ldr	r3, [r7, #4]
20007108:	681b      	ldr	r3, [r3, #0]
2000710a:	4618      	mov	r0, r3
2000710c:	f04f 0102 	mov.w	r1, #2
20007110:	f04f 0204 	mov.w	r2, #4
20007114:	f04f 0301 	mov.w	r3, #1
20007118:	f001 f80d 	bl	20008136 <HW_set_8bit_reg_field>
    }
}
2000711c:	f107 0708 	add.w	r7, r7, #8
20007120:	46bd      	mov	sp, r7
20007122:	bd80      	pop	{r7, pc}

20007124 <I2C_isr>:
 */
void I2C_isr
(
    i2c_instance_t * this_i2c
)
{
20007124:	b5b0      	push	{r4, r5, r7, lr}
20007126:	b084      	sub	sp, #16
20007128:	af00      	add	r7, sp, #0
2000712a:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
2000712c:	f04f 0301 	mov.w	r3, #1
20007130:	73bb      	strb	r3, [r7, #14]

    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20007132:	687b      	ldr	r3, [r7, #4]
20007134:	681b      	ldr	r3, [r3, #0]
20007136:	f103 0304 	add.w	r3, r3, #4
2000713a:	4618      	mov	r0, r3
2000713c:	f000 fff9 	bl	20008132 <HW_get_8bit_reg>
20007140:	4603      	mov	r3, r0
20007142:	72fb      	strb	r3, [r7, #11]
    
    switch( status )
20007144:	7afb      	ldrb	r3, [r7, #11]
20007146:	b2db      	uxtb	r3, r3
20007148:	f1a3 0308 	sub.w	r3, r3, #8
2000714c:	2bd8      	cmp	r3, #216	; 0xd8
2000714e:	f200 84e3 	bhi.w	20007b18 <I2C_isr+0x9f4>
20007152:	a201      	add	r2, pc, #4	; (adr r2, 20007158 <I2C_isr+0x34>)
20007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20007158:	200074bd 	.word	0x200074bd
2000715c:	20007b19 	.word	0x20007b19
20007160:	20007b19 	.word	0x20007b19
20007164:	20007b19 	.word	0x20007b19
20007168:	20007b19 	.word	0x20007b19
2000716c:	20007b19 	.word	0x20007b19
20007170:	20007b19 	.word	0x20007b19
20007174:	20007b19 	.word	0x20007b19
20007178:	200074bd 	.word	0x200074bd
2000717c:	20007b19 	.word	0x20007b19
20007180:	20007b19 	.word	0x20007b19
20007184:	20007b19 	.word	0x20007b19
20007188:	20007b19 	.word	0x20007b19
2000718c:	20007b19 	.word	0x20007b19
20007190:	20007b19 	.word	0x20007b19
20007194:	20007b19 	.word	0x20007b19
20007198:	20007593 	.word	0x20007593
2000719c:	20007b19 	.word	0x20007b19
200071a0:	20007b19 	.word	0x20007b19
200071a4:	20007b19 	.word	0x20007b19
200071a8:	20007b19 	.word	0x20007b19
200071ac:	20007b19 	.word	0x20007b19
200071b0:	20007b19 	.word	0x20007b19
200071b4:	20007b19 	.word	0x20007b19
200071b8:	20007563 	.word	0x20007563
200071bc:	20007b19 	.word	0x20007b19
200071c0:	20007b19 	.word	0x20007b19
200071c4:	20007b19 	.word	0x20007b19
200071c8:	20007b19 	.word	0x20007b19
200071cc:	20007b19 	.word	0x20007b19
200071d0:	20007b19 	.word	0x20007b19
200071d4:	20007b19 	.word	0x20007b19
200071d8:	20007593 	.word	0x20007593
200071dc:	20007b19 	.word	0x20007b19
200071e0:	20007b19 	.word	0x20007b19
200071e4:	20007b19 	.word	0x20007b19
200071e8:	20007b19 	.word	0x20007b19
200071ec:	20007b19 	.word	0x20007b19
200071f0:	20007b19 	.word	0x20007b19
200071f4:	20007b19 	.word	0x20007b19
200071f8:	20007643 	.word	0x20007643
200071fc:	20007b19 	.word	0x20007b19
20007200:	20007b19 	.word	0x20007b19
20007204:	20007b19 	.word	0x20007b19
20007208:	20007b19 	.word	0x20007b19
2000720c:	20007b19 	.word	0x20007b19
20007210:	20007b19 	.word	0x20007b19
20007214:	20007b19 	.word	0x20007b19
20007218:	2000754b 	.word	0x2000754b
2000721c:	20007b19 	.word	0x20007b19
20007220:	20007b19 	.word	0x20007b19
20007224:	20007b19 	.word	0x20007b19
20007228:	20007b19 	.word	0x20007b19
2000722c:	20007b19 	.word	0x20007b19
20007230:	20007b19 	.word	0x20007b19
20007234:	20007b19 	.word	0x20007b19
20007238:	20007673 	.word	0x20007673
2000723c:	20007b19 	.word	0x20007b19
20007240:	20007b19 	.word	0x20007b19
20007244:	20007b19 	.word	0x20007b19
20007248:	20007b19 	.word	0x20007b19
2000724c:	20007b19 	.word	0x20007b19
20007250:	20007b19 	.word	0x20007b19
20007254:	20007b19 	.word	0x20007b19
20007258:	200076f3 	.word	0x200076f3
2000725c:	20007b19 	.word	0x20007b19
20007260:	20007b19 	.word	0x20007b19
20007264:	20007b19 	.word	0x20007b19
20007268:	20007b19 	.word	0x20007b19
2000726c:	20007b19 	.word	0x20007b19
20007270:	20007b19 	.word	0x20007b19
20007274:	20007b19 	.word	0x20007b19
20007278:	20007723 	.word	0x20007723
2000727c:	20007b19 	.word	0x20007b19
20007280:	20007b19 	.word	0x20007b19
20007284:	20007b19 	.word	0x20007b19
20007288:	20007b19 	.word	0x20007b19
2000728c:	20007b19 	.word	0x20007b19
20007290:	20007b19 	.word	0x20007b19
20007294:	20007b19 	.word	0x20007b19
20007298:	20007773 	.word	0x20007773
2000729c:	20007b19 	.word	0x20007b19
200072a0:	20007b19 	.word	0x20007b19
200072a4:	20007b19 	.word	0x20007b19
200072a8:	20007b19 	.word	0x20007b19
200072ac:	20007b19 	.word	0x20007b19
200072b0:	20007b19 	.word	0x20007b19
200072b4:	20007b19 	.word	0x20007b19
200072b8:	2000783d 	.word	0x2000783d
200072bc:	20007b19 	.word	0x20007b19
200072c0:	20007b19 	.word	0x20007b19
200072c4:	20007b19 	.word	0x20007b19
200072c8:	20007b19 	.word	0x20007b19
200072cc:	20007b19 	.word	0x20007b19
200072d0:	20007b19 	.word	0x20007b19
200072d4:	20007b19 	.word	0x20007b19
200072d8:	20007833 	.word	0x20007833
200072dc:	20007b19 	.word	0x20007b19
200072e0:	20007b19 	.word	0x20007b19
200072e4:	20007b19 	.word	0x20007b19
200072e8:	20007b19 	.word	0x20007b19
200072ec:	20007b19 	.word	0x20007b19
200072f0:	20007b19 	.word	0x20007b19
200072f4:	20007b19 	.word	0x20007b19
200072f8:	2000783d 	.word	0x2000783d
200072fc:	20007b19 	.word	0x20007b19
20007300:	20007b19 	.word	0x20007b19
20007304:	20007b19 	.word	0x20007b19
20007308:	20007b19 	.word	0x20007b19
2000730c:	20007b19 	.word	0x20007b19
20007310:	20007b19 	.word	0x20007b19
20007314:	20007b19 	.word	0x20007b19
20007318:	20007833 	.word	0x20007833
2000731c:	20007b19 	.word	0x20007b19
20007320:	20007b19 	.word	0x20007b19
20007324:	20007b19 	.word	0x20007b19
20007328:	20007b19 	.word	0x20007b19
2000732c:	20007b19 	.word	0x20007b19
20007330:	20007b19 	.word	0x20007b19
20007334:	20007b19 	.word	0x20007b19
20007338:	20007899 	.word	0x20007899
2000733c:	20007b19 	.word	0x20007b19
20007340:	20007b19 	.word	0x20007b19
20007344:	20007b19 	.word	0x20007b19
20007348:	20007b19 	.word	0x20007b19
2000734c:	20007b19 	.word	0x20007b19
20007350:	20007b19 	.word	0x20007b19
20007354:	20007b19 	.word	0x20007b19
20007358:	200077e7 	.word	0x200077e7
2000735c:	20007b19 	.word	0x20007b19
20007360:	20007b19 	.word	0x20007b19
20007364:	20007b19 	.word	0x20007b19
20007368:	20007b19 	.word	0x20007b19
2000736c:	20007b19 	.word	0x20007b19
20007370:	20007b19 	.word	0x20007b19
20007374:	20007b19 	.word	0x20007b19
20007378:	20007899 	.word	0x20007899
2000737c:	20007b19 	.word	0x20007b19
20007380:	20007b19 	.word	0x20007b19
20007384:	20007b19 	.word	0x20007b19
20007388:	20007b19 	.word	0x20007b19
2000738c:	20007b19 	.word	0x20007b19
20007390:	20007b19 	.word	0x20007b19
20007394:	20007b19 	.word	0x20007b19
20007398:	200077e7 	.word	0x200077e7
2000739c:	20007b19 	.word	0x20007b19
200073a0:	20007b19 	.word	0x20007b19
200073a4:	20007b19 	.word	0x20007b19
200073a8:	20007b19 	.word	0x20007b19
200073ac:	20007b19 	.word	0x20007b19
200073b0:	20007b19 	.word	0x20007b19
200073b4:	20007b19 	.word	0x20007b19
200073b8:	2000790b 	.word	0x2000790b
200073bc:	20007b19 	.word	0x20007b19
200073c0:	20007b19 	.word	0x20007b19
200073c4:	20007b19 	.word	0x20007b19
200073c8:	20007b19 	.word	0x20007b19
200073cc:	20007b19 	.word	0x20007b19
200073d0:	20007b19 	.word	0x20007b19
200073d4:	20007b19 	.word	0x20007b19
200073d8:	200079fd 	.word	0x200079fd
200073dc:	20007b19 	.word	0x20007b19
200073e0:	20007b19 	.word	0x20007b19
200073e4:	20007b19 	.word	0x20007b19
200073e8:	20007b19 	.word	0x20007b19
200073ec:	20007b19 	.word	0x20007b19
200073f0:	20007b19 	.word	0x20007b19
200073f4:	20007b19 	.word	0x20007b19
200073f8:	200079fd 	.word	0x200079fd
200073fc:	20007b19 	.word	0x20007b19
20007400:	20007b19 	.word	0x20007b19
20007404:	20007b19 	.word	0x20007b19
20007408:	20007b19 	.word	0x20007b19
2000740c:	20007b19 	.word	0x20007b19
20007410:	20007b19 	.word	0x20007b19
20007414:	20007b19 	.word	0x20007b19
20007418:	200079fd 	.word	0x200079fd
2000741c:	20007b19 	.word	0x20007b19
20007420:	20007b19 	.word	0x20007b19
20007424:	20007b19 	.word	0x20007b19
20007428:	20007b19 	.word	0x20007b19
2000742c:	20007b19 	.word	0x20007b19
20007430:	20007b19 	.word	0x20007b19
20007434:	20007b19 	.word	0x20007b19
20007438:	20007ac7 	.word	0x20007ac7
2000743c:	20007b19 	.word	0x20007b19
20007440:	20007b19 	.word	0x20007b19
20007444:	20007b19 	.word	0x20007b19
20007448:	20007b19 	.word	0x20007b19
2000744c:	20007b19 	.word	0x20007b19
20007450:	20007b19 	.word	0x20007b19
20007454:	20007b19 	.word	0x20007b19
20007458:	20007ac7 	.word	0x20007ac7
2000745c:	20007b19 	.word	0x20007b19
20007460:	20007b19 	.word	0x20007b19
20007464:	20007b19 	.word	0x20007b19
20007468:	20007b19 	.word	0x20007b19
2000746c:	20007b19 	.word	0x20007b19
20007470:	20007b19 	.word	0x20007b19
20007474:	20007b19 	.word	0x20007b19
20007478:	20007b19 	.word	0x20007b19
2000747c:	20007b19 	.word	0x20007b19
20007480:	20007b19 	.word	0x20007b19
20007484:	20007b19 	.word	0x20007b19
20007488:	20007b19 	.word	0x20007b19
2000748c:	20007b19 	.word	0x20007b19
20007490:	20007b19 	.word	0x20007b19
20007494:	20007b19 	.word	0x20007b19
20007498:	200079cf 	.word	0x200079cf
2000749c:	20007b19 	.word	0x20007b19
200074a0:	20007b19 	.word	0x20007b19
200074a4:	20007b19 	.word	0x20007b19
200074a8:	20007b19 	.word	0x20007b19
200074ac:	20007b19 	.word	0x20007b19
200074b0:	20007b19 	.word	0x20007b19
200074b4:	20007b19 	.word	0x20007b19
200074b8:	20007b6d 	.word	0x20007b6d
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            HAL_set_8bit_reg_field( this_i2c->base_address, STA, 0x00u);
200074bc:	687b      	ldr	r3, [r7, #4]
200074be:	681b      	ldr	r3, [r3, #0]
200074c0:	4618      	mov	r0, r3
200074c2:	f04f 0105 	mov.w	r1, #5
200074c6:	f04f 0220 	mov.w	r2, #32
200074ca:	f04f 0300 	mov.w	r3, #0
200074ce:	f000 fe32 	bl	20008136 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg( this_i2c->base_address, DATA, this_i2c->target_addr); /* write call address */
200074d2:	687b      	ldr	r3, [r7, #4]
200074d4:	681b      	ldr	r3, [r3, #0]
200074d6:	f103 0208 	add.w	r2, r3, #8
200074da:	687b      	ldr	r3, [r7, #4]
200074dc:	689b      	ldr	r3, [r3, #8]
200074de:	4610      	mov	r0, r2
200074e0:	4619      	mov	r1, r3
200074e2:	f000 fe24 	bl	2000812e <HW_set_8bit_reg>
            HAL_set_8bit_reg_field( this_i2c->base_address, DIR, this_i2c->dir); /* set direction bit */
200074e6:	687b      	ldr	r3, [r7, #4]
200074e8:	681b      	ldr	r3, [r3, #0]
200074ea:	f103 0208 	add.w	r2, r3, #8
200074ee:	687b      	ldr	r3, [r7, #4]
200074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200074f2:	4610      	mov	r0, r2
200074f4:	f04f 0100 	mov.w	r1, #0
200074f8:	f04f 0201 	mov.w	r2, #1
200074fc:	f000 fe1b 	bl	20008136 <HW_set_8bit_reg_field>
            if(this_i2c->dir == WRITE_DIR)
20007500:	687b      	ldr	r3, [r7, #4]
20007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20007504:	2b00      	cmp	r3, #0
20007506:	d104      	bne.n	20007512 <I2C_isr+0x3ee>
            {
                 this_i2c->master_tx_idx = 0u;
20007508:	687b      	ldr	r3, [r7, #4]
2000750a:	f04f 0200 	mov.w	r2, #0
2000750e:	621a      	str	r2, [r3, #32]
20007510:	e003      	b.n	2000751a <I2C_isr+0x3f6>
            }
            else
            {
                 this_i2c->master_rx_idx = 0u;
20007512:	687b      	ldr	r3, [r7, #4]
20007514:	f04f 0200 	mov.w	r2, #0
20007518:	631a      	str	r2, [r3, #48]	; 0x30
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
2000751a:	687b      	ldr	r3, [r7, #4]
2000751c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20007520:	2b00      	cmp	r3, #0
20007522:	d004      	beq.n	2000752e <I2C_isr+0x40a>
            {
                this_i2c->is_transaction_pending = 0u;
20007524:	687b      	ldr	r3, [r7, #4]
20007526:	f04f 0200 	mov.w	r2, #0
2000752a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
2000752e:	687b      	ldr	r3, [r7, #4]
20007530:	7b1a      	ldrb	r2, [r3, #12]
20007532:	687b      	ldr	r3, [r7, #4]
20007534:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
20007538:	429a      	cmp	r2, r3
2000753a:	f000 8319 	beq.w	20007b70 <I2C_isr+0xa4c>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
2000753e:	687b      	ldr	r3, [r7, #4]
20007540:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
20007544:	687b      	ldr	r3, [r7, #4]
20007546:	731a      	strb	r2, [r3, #12]
            }
            break;
20007548:	e31b      	b.n	20007b82 <I2C_isr+0xa5e>
            
        case ST_LOST_ARB:
              /* Set start bit.  Let's keep trying!  Don't give up! */
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
2000754a:	687b      	ldr	r3, [r7, #4]
2000754c:	681b      	ldr	r3, [r3, #0]
2000754e:	4618      	mov	r0, r3
20007550:	f04f 0105 	mov.w	r1, #5
20007554:	f04f 0220 	mov.w	r2, #32
20007558:	f04f 0301 	mov.w	r3, #1
2000755c:	f000 fdeb 	bl	20008136 <HW_set_8bit_reg_field>
              break;
20007560:	e30f      	b.n	20007b82 <I2C_isr+0xa5e>
              break;

        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20007562:	687b      	ldr	r3, [r7, #4]
20007564:	681b      	ldr	r3, [r3, #0]
20007566:	4618      	mov	r0, r3
20007568:	f04f 0104 	mov.w	r1, #4
2000756c:	f04f 0210 	mov.w	r2, #16
20007570:	f04f 0301 	mov.w	r3, #1
20007574:	f000 fddf 	bl	20008136 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20007578:	687b      	ldr	r3, [r7, #4]
2000757a:	f04f 0202 	mov.w	r2, #2
2000757e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            this_i2c->transaction = NO_TRANSACTION;
20007582:	687b      	ldr	r3, [r7, #4]
20007584:	f04f 0200 	mov.w	r2, #0
20007588:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
2000758a:	6878      	ldr	r0, [r7, #4]
2000758c:	f7ff fdb2 	bl	200070f4 <enable_slave_if_required>
            break;
20007590:	e2f7      	b.n	20007b82 <I2C_isr+0xa5e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20007592:	687b      	ldr	r3, [r7, #4]
20007594:	6a1a      	ldr	r2, [r3, #32]
20007596:	687b      	ldr	r3, [r7, #4]
20007598:	69db      	ldr	r3, [r3, #28]
2000759a:	429a      	cmp	r2, r3
2000759c:	d212      	bcs.n	200075c4 <I2C_isr+0x4a0>
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
2000759e:	687b      	ldr	r3, [r7, #4]
200075a0:	681b      	ldr	r3, [r3, #0]
200075a2:	f103 0108 	add.w	r1, r3, #8
200075a6:	687b      	ldr	r3, [r7, #4]
200075a8:	699a      	ldr	r2, [r3, #24]
200075aa:	687b      	ldr	r3, [r7, #4]
200075ac:	6a1b      	ldr	r3, [r3, #32]
200075ae:	441a      	add	r2, r3
200075b0:	7812      	ldrb	r2, [r2, #0]
200075b2:	f103 0001 	add.w	r0, r3, #1
200075b6:	687b      	ldr	r3, [r7, #4]
200075b8:	6218      	str	r0, [r3, #32]
200075ba:	4608      	mov	r0, r1
200075bc:	4611      	mov	r1, r2
200075be:	f000 fdb6 	bl	2000812e <HW_set_8bit_reg>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
200075c2:	e2de      	b.n	20007b82 <I2C_isr+0xa5e>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
200075c4:	687b      	ldr	r3, [r7, #4]
200075c6:	7b1b      	ldrb	r3, [r3, #12]
200075c8:	2b03      	cmp	r3, #3
200075ca:	d10f      	bne.n	200075ec <I2C_isr+0x4c8>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
200075cc:	687b      	ldr	r3, [r7, #4]
200075ce:	f04f 0201 	mov.w	r2, #1
200075d2:	625a      	str	r2, [r3, #36]	; 0x24
                 HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200075d4:	687b      	ldr	r3, [r7, #4]
200075d6:	681b      	ldr	r3, [r3, #0]
200075d8:	4618      	mov	r0, r3
200075da:	f04f 0105 	mov.w	r1, #5
200075de:	f04f 0220 	mov.w	r2, #32
200075e2:	f04f 0301 	mov.w	r3, #1
200075e6:	f000 fda6 	bl	20008136 <HW_set_8bit_reg_field>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
200075ea:	e2ca      	b.n	20007b82 <I2C_isr+0xa5e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
200075ec:	687b      	ldr	r3, [r7, #4]
200075ee:	f04f 0200 	mov.w	r2, #0
200075f2:	731a      	strb	r2, [r3, #12]
                hold_bus = this_i2c->options & I2C_HOLD_BUS;
200075f4:	687b      	ldr	r3, [r7, #4]
200075f6:	7d1b      	ldrb	r3, [r3, #20]
200075f8:	f003 0301 	and.w	r3, r3, #1
200075fc:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
200075fe:	687b      	ldr	r3, [r7, #4]
20007600:	7b7a      	ldrb	r2, [r7, #13]
20007602:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                if ( hold_bus == 0u )
20007606:	7b7b      	ldrb	r3, [r7, #13]
20007608:	2b00      	cmp	r3, #0
2000760a:	d10e      	bne.n	2000762a <I2C_isr+0x506>
                { 
                    HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
2000760c:	687b      	ldr	r3, [r7, #4]
2000760e:	681b      	ldr	r3, [r3, #0]
20007610:	4618      	mov	r0, r3
20007612:	f04f 0104 	mov.w	r1, #4
20007616:	f04f 0210 	mov.w	r2, #16
2000761a:	f04f 0301 	mov.w	r3, #1
2000761e:	f000 fd8a 	bl	20008136 <HW_set_8bit_reg_field>
                    enable_slave_if_required(this_i2c);
20007622:	6878      	ldr	r0, [r7, #4]
20007624:	f7ff fd66 	bl	200070f4 <enable_slave_if_required>
20007628:	e005      	b.n	20007636 <I2C_isr+0x512>
                }
                else
                {
                    I2C_disable_irq( this_i2c );
2000762a:	6878      	ldr	r0, [r7, #4]
2000762c:	f000 fb48 	bl	20007cc0 <I2C_disable_irq>
                    clear_irq = 0u;
20007630:	f04f 0300 	mov.w	r3, #0
20007634:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = I2C_SUCCESS;
20007636:	687b      	ldr	r3, [r7, #4]
20007638:	f04f 0200 	mov.w	r2, #0
2000763c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }
            break;
20007640:	e29f      	b.n	20007b82 <I2C_isr+0xa5e>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);/* xmt stop condition */
20007642:	687b      	ldr	r3, [r7, #4]
20007644:	681b      	ldr	r3, [r3, #0]
20007646:	4618      	mov	r0, r3
20007648:	f04f 0104 	mov.w	r1, #4
2000764c:	f04f 0210 	mov.w	r2, #16
20007650:	f04f 0301 	mov.w	r3, #1
20007654:	f000 fd6f 	bl	20008136 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20007658:	687b      	ldr	r3, [r7, #4]
2000765a:	f04f 0202 	mov.w	r2, #2
2000765e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20007662:	687b      	ldr	r3, [r7, #4]
20007664:	f04f 0200 	mov.w	r2, #0
20007668:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
2000766a:	6878      	ldr	r0, [r7, #4]
2000766c:	f7ff fd42 	bl	200070f4 <enable_slave_if_required>
            break;
20007670:	e287      	b.n	20007b82 <I2C_isr+0xa5e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20007672:	687b      	ldr	r3, [r7, #4]
20007674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20007676:	2b01      	cmp	r3, #1
20007678:	d90b      	bls.n	20007692 <I2C_isr+0x56e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
2000767a:	687b      	ldr	r3, [r7, #4]
2000767c:	681b      	ldr	r3, [r3, #0]
2000767e:	4618      	mov	r0, r3
20007680:	f04f 0102 	mov.w	r1, #2
20007684:	f04f 0204 	mov.w	r2, #4
20007688:	f04f 0301 	mov.w	r3, #1
2000768c:	f000 fd53 	bl	20008136 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20007690:	e277      	b.n	20007b82 <I2C_isr+0xa5e>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
            }
            else if(1u == this_i2c->master_rx_size)
20007692:	687b      	ldr	r3, [r7, #4]
20007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20007696:	2b01      	cmp	r3, #1
20007698:	d10b      	bne.n	200076b2 <I2C_isr+0x58e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
2000769a:	687b      	ldr	r3, [r7, #4]
2000769c:	681b      	ldr	r3, [r3, #0]
2000769e:	4618      	mov	r0, r3
200076a0:	f04f 0102 	mov.w	r1, #2
200076a4:	f04f 0204 	mov.w	r2, #4
200076a8:	f04f 0300 	mov.w	r3, #0
200076ac:	f000 fd43 	bl	20008136 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
200076b0:	e267      	b.n	20007b82 <I2C_isr+0xa5e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
200076b2:	687b      	ldr	r3, [r7, #4]
200076b4:	681b      	ldr	r3, [r3, #0]
200076b6:	4618      	mov	r0, r3
200076b8:	f04f 0102 	mov.w	r1, #2
200076bc:	f04f 0204 	mov.w	r2, #4
200076c0:	f04f 0301 	mov.w	r3, #1
200076c4:	f000 fd37 	bl	20008136 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
200076c8:	687b      	ldr	r3, [r7, #4]
200076ca:	681b      	ldr	r3, [r3, #0]
200076cc:	4618      	mov	r0, r3
200076ce:	f04f 0104 	mov.w	r1, #4
200076d2:	f04f 0210 	mov.w	r2, #16
200076d6:	f04f 0301 	mov.w	r3, #1
200076da:	f000 fd2c 	bl	20008136 <HW_set_8bit_reg_field>
                this_i2c->master_status = I2C_SUCCESS;
200076de:	687b      	ldr	r3, [r7, #4]
200076e0:	f04f 0200 	mov.w	r2, #0
200076e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                this_i2c->transaction = NO_TRANSACTION;
200076e8:	687b      	ldr	r3, [r7, #4]
200076ea:	f04f 0200 	mov.w	r2, #0
200076ee:	731a      	strb	r2, [r3, #12]
            }
            break;
200076f0:	e247      	b.n	20007b82 <I2C_isr+0xa5e>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
200076f2:	687b      	ldr	r3, [r7, #4]
200076f4:	681b      	ldr	r3, [r3, #0]
200076f6:	4618      	mov	r0, r3
200076f8:	f04f 0104 	mov.w	r1, #4
200076fc:	f04f 0210 	mov.w	r2, #16
20007700:	f04f 0301 	mov.w	r3, #1
20007704:	f000 fd17 	bl	20008136 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20007708:	687b      	ldr	r3, [r7, #4]
2000770a:	f04f 0202 	mov.w	r2, #2
2000770e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20007712:	687b      	ldr	r3, [r7, #4]
20007714:	f04f 0200 	mov.w	r2, #0
20007718:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
2000771a:	6878      	ldr	r0, [r7, #4]
2000771c:	f7ff fcea 	bl	200070f4 <enable_slave_if_required>
            break;
20007720:	e22f      	b.n	20007b82 <I2C_isr+0xa5e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20007722:	687b      	ldr	r3, [r7, #4]
20007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20007726:	687a      	ldr	r2, [r7, #4]
20007728:	6b14      	ldr	r4, [r2, #48]	; 0x30
2000772a:	eb03 0504 	add.w	r5, r3, r4
2000772e:	687b      	ldr	r3, [r7, #4]
20007730:	681b      	ldr	r3, [r3, #0]
20007732:	f103 0308 	add.w	r3, r3, #8
20007736:	4618      	mov	r0, r3
20007738:	f000 fcfb 	bl	20008132 <HW_get_8bit_reg>
2000773c:	4603      	mov	r3, r0
2000773e:	702b      	strb	r3, [r5, #0]
20007740:	f104 0201 	add.w	r2, r4, #1
20007744:	687b      	ldr	r3, [r7, #4]
20007746:	631a      	str	r2, [r3, #48]	; 0x30
            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20007748:	687b      	ldr	r3, [r7, #4]
2000774a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000774c:	687b      	ldr	r3, [r7, #4]
2000774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20007750:	f103 33ff 	add.w	r3, r3, #4294967295
20007754:	429a      	cmp	r2, r3
20007756:	f0c0 820d 	bcc.w	20007b74 <I2C_isr+0xa50>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
2000775a:	687b      	ldr	r3, [r7, #4]
2000775c:	681b      	ldr	r3, [r3, #0]
2000775e:	4618      	mov	r0, r3
20007760:	f04f 0102 	mov.w	r1, #2
20007764:	f04f 0204 	mov.w	r2, #4
20007768:	f04f 0300 	mov.w	r3, #0
2000776c:	f000 fce3 	bl	20008136 <HW_set_8bit_reg_field>
            }
            break;
20007770:	e207      	b.n	20007b82 <I2C_isr+0xa5e>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20007772:	687b      	ldr	r3, [r7, #4]
20007774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20007776:	687b      	ldr	r3, [r7, #4]
20007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000777a:	eb02 0403 	add.w	r4, r2, r3
2000777e:	687b      	ldr	r3, [r7, #4]
20007780:	681b      	ldr	r3, [r3, #0]
20007782:	f103 0308 	add.w	r3, r3, #8
20007786:	4618      	mov	r0, r3
20007788:	f000 fcd3 	bl	20008132 <HW_get_8bit_reg>
2000778c:	4603      	mov	r3, r0
2000778e:	7023      	strb	r3, [r4, #0]
          
            hold_bus = this_i2c->options & I2C_HOLD_BUS; 
20007790:	687b      	ldr	r3, [r7, #4]
20007792:	7d1b      	ldrb	r3, [r3, #20]
20007794:	f003 0301 	and.w	r3, r3, #1
20007798:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
2000779a:	687b      	ldr	r3, [r7, #4]
2000779c:	7b7a      	ldrb	r2, [r7, #13]
2000779e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            if ( hold_bus == 0u )
200077a2:	7b7b      	ldrb	r3, [r7, #13]
200077a4:	2b00      	cmp	r3, #0
200077a6:	d10e      	bne.n	200077c6 <I2C_isr+0x6a2>
            { 
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
200077a8:	687b      	ldr	r3, [r7, #4]
200077aa:	681b      	ldr	r3, [r3, #0]
200077ac:	4618      	mov	r0, r3
200077ae:	f04f 0104 	mov.w	r1, #4
200077b2:	f04f 0210 	mov.w	r2, #16
200077b6:	f04f 0301 	mov.w	r3, #1
200077ba:	f000 fcbc 	bl	20008136 <HW_set_8bit_reg_field>

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
200077be:	6878      	ldr	r0, [r7, #4]
200077c0:	f7ff fc98 	bl	200070f4 <enable_slave_if_required>
200077c4:	e005      	b.n	200077d2 <I2C_isr+0x6ae>
            }
            else
            {
                I2C_disable_irq( this_i2c );
200077c6:	6878      	ldr	r0, [r7, #4]
200077c8:	f000 fa7a 	bl	20007cc0 <I2C_disable_irq>
                clear_irq = 0u;
200077cc:	f04f 0300 	mov.w	r3, #0
200077d0:	73bb      	strb	r3, [r7, #14]
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200077d2:	687b      	ldr	r3, [r7, #4]
200077d4:	f04f 0200 	mov.w	r2, #0
200077d8:	731a      	strb	r2, [r3, #12]
            this_i2c->master_status = I2C_SUCCESS;
200077da:	687b      	ldr	r3, [r7, #4]
200077dc:	f04f 0200 	mov.w	r2, #0
200077e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            break;
200077e4:	e1cd      	b.n	20007b82 <I2C_isr+0xa5e>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
200077e6:	687b      	ldr	r3, [r7, #4]
200077e8:	681b      	ldr	r3, [r3, #0]
200077ea:	4618      	mov	r0, r3
200077ec:	f04f 0102 	mov.w	r1, #2
200077f0:	f04f 0204 	mov.w	r2, #4
200077f4:	f04f 0301 	mov.w	r3, #1
200077f8:	f000 fc9d 	bl	20008136 <HW_set_8bit_reg_field>

            this_i2c->transaction = NO_TRANSACTION;
200077fc:	687b      	ldr	r3, [r7, #4]
200077fe:	f04f 0200 	mov.w	r2, #0
20007802:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_status = I2C_SUCCESS;
20007804:	687b      	ldr	r3, [r7, #4]
20007806:	f04f 0200 	mov.w	r2, #0
2000780a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
2000780e:	687b      	ldr	r3, [r7, #4]
20007810:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20007814:	2b00      	cmp	r3, #0
20007816:	f000 81af 	beq.w	20007b78 <I2C_isr+0xa54>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
2000781a:	687b      	ldr	r3, [r7, #4]
2000781c:	681b      	ldr	r3, [r3, #0]
2000781e:	4618      	mov	r0, r3
20007820:	f04f 0105 	mov.w	r1, #5
20007824:	f04f 0220 	mov.w	r2, #32
20007828:	f04f 0301 	mov.w	r3, #1
2000782c:	f000 fc83 	bl	20008136 <HW_set_8bit_reg_field>
            }
            break;
20007830:	e1a7      	b.n	20007b82 <I2C_isr+0xa5e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20007832:	687b      	ldr	r3, [r7, #4]
20007834:	f04f 0201 	mov.w	r2, #1
20007838:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
2000783c:	687b      	ldr	r3, [r7, #4]
2000783e:	f04f 0204 	mov.w	r2, #4
20007842:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_rx_idx = 0u;
20007844:	687b      	ldr	r3, [r7, #4]
20007846:	f04f 0200 	mov.w	r2, #0
2000784a:	651a      	str	r2, [r3, #80]	; 0x50
            this_i2c->random_read_addr = 0u;
2000784c:	687b      	ldr	r3, [r7, #4]
2000784e:	f04f 0200 	mov.w	r2, #0
20007852:	611a      	str	r2, [r3, #16]
            /*
             * If Start Bit is set clear it, but store that information since it is because of
             * pending transaction
             */
            if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20007854:	687b      	ldr	r3, [r7, #4]
20007856:	681b      	ldr	r3, [r3, #0]
20007858:	4618      	mov	r0, r3
2000785a:	f04f 0105 	mov.w	r1, #5
2000785e:	f04f 0220 	mov.w	r2, #32
20007862:	f000 fc76 	bl	20008152 <HW_get_8bit_reg_field>
20007866:	4603      	mov	r3, r0
20007868:	2b00      	cmp	r3, #0
2000786a:	d00f      	beq.n	2000788c <I2C_isr+0x768>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
2000786c:	687b      	ldr	r3, [r7, #4]
2000786e:	681b      	ldr	r3, [r3, #0]
20007870:	4618      	mov	r0, r3
20007872:	f04f 0105 	mov.w	r1, #5
20007876:	f04f 0220 	mov.w	r2, #32
2000787a:	f04f 0300 	mov.w	r3, #0
2000787e:	f000 fc5a 	bl	20008136 <HW_set_8bit_reg_field>
                this_i2c->is_transaction_pending = 1u;
20007882:	687b      	ldr	r3, [r7, #4]
20007884:	f04f 0201 	mov.w	r2, #1
20007888:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }
            this_i2c->slave_status = I2C_IN_PROGRESS;
2000788c:	687b      	ldr	r3, [r7, #4]
2000788e:	f04f 0201 	mov.w	r2, #1
20007892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20007896:	e174      	b.n	20007b82 <I2C_isr+0xa5e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20007898:	687b      	ldr	r3, [r7, #4]
2000789a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000789c:	2b00      	cmp	r3, #0
2000789e:	d021      	beq.n	200078e4 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
200078a0:	687b      	ldr	r3, [r7, #4]
200078a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200078a4:	687b      	ldr	r3, [r7, #4]
200078a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200078a8:	429a      	cmp	r2, r3
200078aa:	d21b      	bcs.n	200078e4 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = HAL_get_8bit_reg(this_i2c->base_address, DATA);
200078ac:	687b      	ldr	r3, [r7, #4]
200078ae:	681b      	ldr	r3, [r3, #0]
200078b0:	f103 0308 	add.w	r3, r3, #8
200078b4:	4618      	mov	r0, r3
200078b6:	f000 fc3c 	bl	20008132 <HW_get_8bit_reg>
200078ba:	4603      	mov	r3, r0
200078bc:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
200078be:	687b      	ldr	r3, [r7, #4]
200078c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200078c2:	687b      	ldr	r3, [r7, #4]
200078c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200078c6:	441a      	add	r2, r3
200078c8:	7b39      	ldrb	r1, [r7, #12]
200078ca:	7011      	strb	r1, [r2, #0]
200078cc:	f103 0201 	add.w	r2, r3, #1
200078d0:	687b      	ldr	r3, [r7, #4]
200078d2:	651a      	str	r2, [r3, #80]	; 0x50
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
200078d4:	687b      	ldr	r3, [r7, #4]
200078d6:	691b      	ldr	r3, [r3, #16]
200078d8:	ea4f 2203 	mov.w	r2, r3, lsl #8
200078dc:	7b3b      	ldrb	r3, [r7, #12]
200078de:	441a      	add	r2, r3
200078e0:	687b      	ldr	r3, [r7, #4]
200078e2:	611a      	str	r2, [r3, #16]
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
200078e4:	687b      	ldr	r3, [r7, #4]
200078e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200078e8:	687b      	ldr	r3, [r7, #4]
200078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200078ec:	429a      	cmp	r2, r3
200078ee:	f0c0 8145 	bcc.w	20007b7c <I2C_isr+0xa58>
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
200078f2:	687b      	ldr	r3, [r7, #4]
200078f4:	681b      	ldr	r3, [r3, #0]
200078f6:	4618      	mov	r0, r3
200078f8:	f04f 0102 	mov.w	r1, #2
200078fc:	f04f 0204 	mov.w	r2, #4
20007900:	f04f 0300 	mov.w	r3, #0
20007904:	f000 fc17 	bl	20008136 <HW_set_8bit_reg_field>
            }
            break;
20007908:	e13b      	b.n	20007b82 <I2C_isr+0xa5e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
2000790a:	687b      	ldr	r3, [r7, #4]
2000790c:	7b1b      	ldrb	r3, [r3, #12]
2000790e:	2b04      	cmp	r3, #4
20007910:	d13c      	bne.n	2000798c <I2C_isr+0x868>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20007912:	687b      	ldr	r3, [r7, #4]
20007914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20007916:	687b      	ldr	r3, [r7, #4]
20007918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000791a:	429a      	cmp	r2, r3
2000791c:	d103      	bne.n	20007926 <I2C_isr+0x802>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
2000791e:	687b      	ldr	r3, [r7, #4]
20007920:	691a      	ldr	r2, [r3, #16]
20007922:	687b      	ldr	r3, [r7, #4]
20007924:	645a      	str	r2, [r3, #68]	; 0x44
                }
                /* Call the slave's write transaction handler if it exists. */
                if ( this_i2c->slave_write_handler != 0u )
20007926:	687b      	ldr	r3, [r7, #4]
20007928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000792a:	2b00      	cmp	r3, #0
2000792c:	d022      	beq.n	20007974 <I2C_isr+0x850>
                {
                    i2c_slave_handler_ret_t h_ret;
                    h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
2000792e:	687b      	ldr	r3, [r7, #4]
20007930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20007932:	687a      	ldr	r2, [r7, #4]
20007934:	6c91      	ldr	r1, [r2, #72]	; 0x48
20007936:	687a      	ldr	r2, [r7, #4]
20007938:	6d12      	ldr	r2, [r2, #80]	; 0x50
2000793a:	b292      	uxth	r2, r2
2000793c:	6878      	ldr	r0, [r7, #4]
2000793e:	4798      	blx	r3
20007940:	4603      	mov	r3, r0
20007942:	73fb      	strb	r3, [r7, #15]
                    if ( I2C_REENABLE_SLAVE_RX == h_ret )
20007944:	7bfb      	ldrb	r3, [r7, #15]
20007946:	2b00      	cmp	r3, #0
20007948:	d103      	bne.n	20007952 <I2C_isr+0x82e>
                    {
                        /* There is a small risk that the write handler could
                         * call I2C_disable_slave() but return
                         * I2C_REENABLE_SLAVE_RX in error so we only enable
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
2000794a:	6878      	ldr	r0, [r7, #4]
2000794c:	f7ff fbd2 	bl	200070f4 <enable_slave_if_required>
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20007950:	e023      	b.n	2000799a <I2C_isr+0x876>
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
                    }
                    else
                    {
                        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x0u );
20007952:	687b      	ldr	r3, [r7, #4]
20007954:	681b      	ldr	r3, [r3, #0]
20007956:	4618      	mov	r0, r3
20007958:	f04f 0102 	mov.w	r1, #2
2000795c:	f04f 0204 	mov.w	r2, #4
20007960:	f04f 0300 	mov.w	r3, #0
20007964:	f000 fbe7 	bl	20008136 <HW_set_8bit_reg_field>
                        /* Clear slave mode flag as well otherwise in mixed
                         * master/slave applications, the AA bit will get set by
                         * subsequent master operations. */
                        this_i2c->is_slave_enabled = 0u;
20007968:	687b      	ldr	r3, [r7, #4]
2000796a:	f04f 0200 	mov.w	r2, #0
2000796e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20007972:	e012      	b.n	2000799a <I2C_isr+0x876>
20007974:	687b      	ldr	r3, [r7, #4]
20007976:	681b      	ldr	r3, [r3, #0]
20007978:	4618      	mov	r0, r3
2000797a:	f04f 0102 	mov.w	r1, #2
2000797e:	f04f 0204 	mov.w	r2, #4
20007982:	f04f 0301 	mov.w	r3, #1
20007986:	f000 fbd6 	bl	20008136 <HW_set_8bit_reg_field>
2000798a:	e006      	b.n	2000799a <I2C_isr+0x876>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
2000798c:	687b      	ldr	r3, [r7, #4]
2000798e:	f04f 0200 	mov.w	r2, #0
20007992:	645a      	str	r2, [r3, #68]	; 0x44
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20007994:	6878      	ldr	r0, [r7, #4]
20007996:	f7ff fbad 	bl	200070f4 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = I2C_SUCCESS;
2000799a:	687b      	ldr	r3, [r7, #4]
2000799c:	f04f 0200 	mov.w	r2, #0
200079a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200079a4:	687b      	ldr	r3, [r7, #4]
200079a6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200079aa:	2b00      	cmp	r3, #0
200079ac:	d00a      	beq.n	200079c4 <I2C_isr+0x8a0>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200079ae:	687b      	ldr	r3, [r7, #4]
200079b0:	681b      	ldr	r3, [r3, #0]
200079b2:	4618      	mov	r0, r3
200079b4:	f04f 0105 	mov.w	r1, #5
200079b8:	f04f 0220 	mov.w	r2, #32
200079bc:	f04f 0301 	mov.w	r3, #1
200079c0:	f000 fbb9 	bl	20008136 <HW_set_8bit_reg_field>

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200079c4:	687b      	ldr	r3, [r7, #4]
200079c6:	f04f 0200 	mov.w	r2, #0
200079ca:	731a      	strb	r2, [r3, #12]

            break;
200079cc:	e0d9      	b.n	20007b82 <I2C_isr+0xa5e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
200079ce:	687b      	ldr	r3, [r7, #4]
200079d0:	f04f 0200 	mov.w	r2, #0
200079d4:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
200079d6:	687b      	ldr	r3, [r7, #4]
200079d8:	f04f 0200 	mov.w	r2, #0
200079dc:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->slave_status)
200079de:	687b      	ldr	r3, [r7, #4]
200079e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200079e4:	b2db      	uxtb	r3, r3
200079e6:	2b01      	cmp	r3, #1
200079e8:	d104      	bne.n	200079f4 <I2C_isr+0x8d0>
            {
                this_i2c->slave_status = I2C_FAILED;
200079ea:	687b      	ldr	r3, [r7, #4]
200079ec:	f04f 0202 	mov.w	r2, #2
200079f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
200079f4:	6878      	ldr	r0, [r7, #4]
200079f6:	f7ff fb7d 	bl	200070f4 <enable_slave_if_required>

            break;
200079fa:	e0c2      	b.n	20007b82 <I2C_isr+0xa5e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:       /* Arbitration lost, and: */
        case ST_RACK:           /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
200079fc:	7afb      	ldrb	r3, [r7, #11]
200079fe:	b2db      	uxtb	r3, r3
20007a00:	2ba8      	cmp	r3, #168	; 0xa8
20007a02:	d128      	bne.n	20007a56 <I2C_isr+0x932>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20007a04:	687b      	ldr	r3, [r7, #4]
20007a06:	f04f 0205 	mov.w	r2, #5
20007a0a:	731a      	strb	r2, [r3, #12]
                this_i2c->random_read_addr = 0u;
20007a0c:	687b      	ldr	r3, [r7, #4]
20007a0e:	f04f 0200 	mov.w	r2, #0
20007a12:	611a      	str	r2, [r3, #16]
                this_i2c->slave_status = I2C_IN_PROGRESS;
20007a14:	687b      	ldr	r3, [r7, #4]
20007a16:	f04f 0201 	mov.w	r2, #1
20007a1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
                /* If Start Bit is set clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20007a1e:	687b      	ldr	r3, [r7, #4]
20007a20:	681b      	ldr	r3, [r3, #0]
20007a22:	4618      	mov	r0, r3
20007a24:	f04f 0105 	mov.w	r1, #5
20007a28:	f04f 0220 	mov.w	r2, #32
20007a2c:	f000 fb91 	bl	20008152 <HW_get_8bit_reg_field>
20007a30:	4603      	mov	r3, r0
20007a32:	2b00      	cmp	r3, #0
20007a34:	d00f      	beq.n	20007a56 <I2C_isr+0x932>
                {
                    HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20007a36:	687b      	ldr	r3, [r7, #4]
20007a38:	681b      	ldr	r3, [r3, #0]
20007a3a:	4618      	mov	r0, r3
20007a3c:	f04f 0105 	mov.w	r1, #5
20007a40:	f04f 0220 	mov.w	r2, #32
20007a44:	f04f 0300 	mov.w	r3, #0
20007a48:	f000 fb75 	bl	20008136 <HW_set_8bit_reg_field>
                    this_i2c->is_transaction_pending = 1u;
20007a4c:	687b      	ldr	r3, [r7, #4]
20007a4e:	f04f 0201 	mov.w	r2, #1
20007a52:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                 }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20007a56:	687b      	ldr	r3, [r7, #4]
20007a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20007a5a:	687b      	ldr	r3, [r7, #4]
20007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20007a5e:	429a      	cmp	r2, r3
20007a60:	d309      	bcc.n	20007a76 <I2C_isr+0x952>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, 0xFFu);
20007a62:	687b      	ldr	r3, [r7, #4]
20007a64:	681b      	ldr	r3, [r3, #0]
20007a66:	f103 0308 	add.w	r3, r3, #8
20007a6a:	4618      	mov	r0, r3
20007a6c:	f04f 01ff 	mov.w	r1, #255	; 0xff
20007a70:	f000 fb5d 	bl	2000812e <HW_set_8bit_reg>
20007a74:	e011      	b.n	20007a9a <I2C_isr+0x976>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++]);
20007a76:	687b      	ldr	r3, [r7, #4]
20007a78:	681b      	ldr	r3, [r3, #0]
20007a7a:	f103 0108 	add.w	r1, r3, #8
20007a7e:	687b      	ldr	r3, [r7, #4]
20007a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
20007a82:	687b      	ldr	r3, [r7, #4]
20007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20007a86:	441a      	add	r2, r3
20007a88:	7812      	ldrb	r2, [r2, #0]
20007a8a:	f103 0001 	add.w	r0, r3, #1
20007a8e:	687b      	ldr	r3, [r7, #4]
20007a90:	6458      	str	r0, [r3, #68]	; 0x44
20007a92:	4608      	mov	r0, r1
20007a94:	4611      	mov	r1, r2
20007a96:	f000 fb4a 	bl	2000812e <HW_set_8bit_reg>
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20007a9a:	687b      	ldr	r3, [r7, #4]
20007a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20007a9e:	687b      	ldr	r3, [r7, #4]
20007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20007aa2:	429a      	cmp	r2, r3
20007aa4:	d36c      	bcc.n	20007b80 <I2C_isr+0xa5c>
            {
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
20007aa6:	687b      	ldr	r3, [r7, #4]
20007aa8:	681b      	ldr	r3, [r3, #0]
20007aaa:	4618      	mov	r0, r3
20007aac:	f04f 0102 	mov.w	r1, #2
20007ab0:	f04f 0204 	mov.w	r2, #4
20007ab4:	f04f 0300 	mov.w	r3, #0
20007ab8:	f000 fb3d 	bl	20008136 <HW_set_8bit_reg_field>
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20007abc:	687b      	ldr	r3, [r7, #4]
20007abe:	f04f 0200 	mov.w	r2, #0
20007ac2:	645a      	str	r2, [r3, #68]	; 0x44
            }
            break;
20007ac4:	e05d      	b.n	20007b82 <I2C_isr+0xa5e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20007ac6:	687b      	ldr	r3, [r7, #4]
20007ac8:	f04f 0200 	mov.w	r2, #0
20007acc:	645a      	str	r2, [r3, #68]	; 0x44
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u); 
20007ace:	687b      	ldr	r3, [r7, #4]
20007ad0:	681b      	ldr	r3, [r3, #0]
20007ad2:	4618      	mov	r0, r3
20007ad4:	f04f 0102 	mov.w	r1, #2
20007ad8:	f04f 0204 	mov.w	r2, #4
20007adc:	f04f 0301 	mov.w	r3, #1
20007ae0:	f000 fb29 	bl	20008136 <HW_set_8bit_reg_field>

            /*  Mark previous state as complete */
            this_i2c->slave_status = I2C_SUCCESS;
20007ae4:	687b      	ldr	r3, [r7, #4]
20007ae6:	f04f 0200 	mov.w	r2, #0
20007aea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20007aee:	687b      	ldr	r3, [r7, #4]
20007af0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20007af4:	2b00      	cmp	r3, #0
20007af6:	d00a      	beq.n	20007b0e <I2C_isr+0x9ea>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20007af8:	687b      	ldr	r3, [r7, #4]
20007afa:	681b      	ldr	r3, [r3, #0]
20007afc:	4618      	mov	r0, r3
20007afe:	f04f 0105 	mov.w	r1, #5
20007b02:	f04f 0220 	mov.w	r2, #32
20007b06:	f04f 0301 	mov.w	r3, #1
20007b0a:	f000 fb14 	bl	20008136 <HW_set_8bit_reg_field>
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20007b0e:	687b      	ldr	r3, [r7, #4]
20007b10:	f04f 0200 	mov.w	r2, #0
20007b14:	731a      	strb	r2, [r3, #12]

            break;
20007b16:	e034      	b.n	20007b82 <I2C_isr+0xa5e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20007b18:	687b      	ldr	r3, [r7, #4]
20007b1a:	681b      	ldr	r3, [r3, #0]
20007b1c:	4618      	mov	r0, r3
20007b1e:	f04f 0105 	mov.w	r1, #5
20007b22:	f04f 0220 	mov.w	r2, #32
20007b26:	f04f 0300 	mov.w	r3, #0
20007b2a:	f000 fb04 	bl	20008136 <HW_set_8bit_reg_field>
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20007b2e:	687b      	ldr	r3, [r7, #4]
20007b30:	f04f 0200 	mov.w	r2, #0
20007b34:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20007b36:	687b      	ldr	r3, [r7, #4]
20007b38:	f04f 0200 	mov.w	r2, #0
20007b3c:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->master_status)
20007b3e:	687b      	ldr	r3, [r7, #4]
20007b40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20007b44:	b2db      	uxtb	r3, r3
20007b46:	2b01      	cmp	r3, #1
20007b48:	d104      	bne.n	20007b54 <I2C_isr+0xa30>
            {
                this_i2c->master_status = I2C_FAILED;
20007b4a:	687b      	ldr	r3, [r7, #4]
20007b4c:	f04f 0202 	mov.w	r2, #2
20007b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }

            if(I2C_IN_PROGRESS == this_i2c->slave_status)
20007b54:	687b      	ldr	r3, [r7, #4]
20007b56:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20007b5a:	b2db      	uxtb	r3, r3
20007b5c:	2b01      	cmp	r3, #1
20007b5e:	d110      	bne.n	20007b82 <I2C_isr+0xa5e>
            {
                this_i2c->slave_status = I2C_FAILED;
20007b60:	687b      	ldr	r3, [r7, #4]
20007b62:	f04f 0202 	mov.w	r2, #2
20007b66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20007b6a:	e00a      	b.n	20007b82 <I2C_isr+0xa5e>
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
              break;

        case ST_STOP_TRANSMIT:
             /* Stop has been transmitted. Do nothing */
              break;
20007b6c:	bf00      	nop
20007b6e:	e008      	b.n	20007b82 <I2C_isr+0xa5e>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20007b70:	bf00      	nop
20007b72:	e006      	b.n	20007b82 <I2C_isr+0xa5e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            break;
20007b74:	bf00      	nop
20007b76:	e004      	b.n	20007b82 <I2C_isr+0xa5e>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
            }
            break;
20007b78:	bf00      	nop
20007b7a:	e002      	b.n	20007b82 <I2C_isr+0xa5e>
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
            }
            break;
20007b7c:	bf00      	nop
20007b7e:	e000      	b.n	20007b82 <I2C_isr+0xa5e>
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20007b80:	bf00      	nop
            }

            break;
    }
    
    if ( clear_irq )
20007b82:	7bbb      	ldrb	r3, [r7, #14]
20007b84:	2b00      	cmp	r3, #0
20007b86:	d00a      	beq.n	20007b9e <I2C_isr+0xa7a>
    {
        /* clear interrupt. */
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20007b88:	687b      	ldr	r3, [r7, #4]
20007b8a:	681b      	ldr	r3, [r3, #0]
20007b8c:	4618      	mov	r0, r3
20007b8e:	f04f 0103 	mov.w	r1, #3
20007b92:	f04f 0208 	mov.w	r2, #8
20007b96:	f04f 0300 	mov.w	r3, #0
20007b9a:	f000 facc 	bl	20008136 <HW_set_8bit_reg_field>
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20007b9e:	687b      	ldr	r3, [r7, #4]
20007ba0:	681b      	ldr	r3, [r3, #0]
20007ba2:	f103 0304 	add.w	r3, r3, #4
20007ba6:	4618      	mov	r0, r3
20007ba8:	f000 fac3 	bl	20008132 <HW_get_8bit_reg>
20007bac:	4603      	mov	r3, r0
20007bae:	72fb      	strb	r3, [r7, #11]
}
20007bb0:	f107 0710 	add.w	r7, r7, #16
20007bb4:	46bd      	mov	sp, r7
20007bb6:	bdb0      	pop	{r4, r5, r7, pc}

20007bb8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20007bb8:	b480      	push	{r7}
20007bba:	b083      	sub	sp, #12
20007bbc:	af00      	add	r7, sp, #0
20007bbe:	4603      	mov	r3, r0
20007bc0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20007bc2:	f24e 1300 	movw	r3, #57600	; 0xe100
20007bc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20007bca:	f997 2007 	ldrsb.w	r2, [r7, #7]
20007bce:	ea4f 1252 	mov.w	r2, r2, lsr #5
20007bd2:	79f9      	ldrb	r1, [r7, #7]
20007bd4:	f001 011f 	and.w	r1, r1, #31
20007bd8:	f04f 0001 	mov.w	r0, #1
20007bdc:	fa00 f101 	lsl.w	r1, r0, r1
20007be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20007be4:	f107 070c 	add.w	r7, r7, #12
20007be8:	46bd      	mov	sp, r7
20007bea:	bc80      	pop	{r7}
20007bec:	4770      	bx	lr
20007bee:	bf00      	nop

20007bf0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20007bf0:	b480      	push	{r7}
20007bf2:	b083      	sub	sp, #12
20007bf4:	af00      	add	r7, sp, #0
20007bf6:	4603      	mov	r3, r0
20007bf8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20007bfa:	f24e 1300 	movw	r3, #57600	; 0xe100
20007bfe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20007c02:	f997 2007 	ldrsb.w	r2, [r7, #7]
20007c06:	ea4f 1252 	mov.w	r2, r2, lsr #5
20007c0a:	79f9      	ldrb	r1, [r7, #7]
20007c0c:	f001 011f 	and.w	r1, r1, #31
20007c10:	f04f 0001 	mov.w	r0, #1
20007c14:	fa00 f101 	lsl.w	r1, r0, r1
20007c18:	f102 0220 	add.w	r2, r2, #32
20007c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20007c20:	f107 070c 	add.w	r7, r7, #12
20007c24:	46bd      	mov	sp, r7
20007c26:	bc80      	pop	{r7}
20007c28:	4770      	bx	lr
20007c2a:	bf00      	nop

20007c2c <I2C_enable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to enable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_enable_irq( i2c_instance_t * this_i2c )
{
20007c2c:	b580      	push	{r7, lr}
20007c2e:	b082      	sub	sp, #8
20007c30:	af00      	add	r7, sp, #0
20007c32:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
20007c34:	687a      	ldr	r2, [r7, #4]
20007c36:	f64e 5364 	movw	r3, #60772	; 0xed64
20007c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007c3e:	429a      	cmp	r2, r3
20007c40:	d103      	bne.n	20007c4a <I2C_enable_irq+0x1e>
	{
		NVIC_EnableIRQ( FabricIrq0_IRQn );
20007c42:	f04f 0022 	mov.w	r0, #34	; 0x22
20007c46:	f7ff ffb7 	bl	20007bb8 <NVIC_EnableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
20007c4a:	687a      	ldr	r2, [r7, #4]
20007c4c:	f64e 53d0 	movw	r3, #60880	; 0xedd0
20007c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007c54:	429a      	cmp	r2, r3
20007c56:	d103      	bne.n	20007c60 <I2C_enable_irq+0x34>
	{
		NVIC_EnableIRQ( FabricIrq1_IRQn );
20007c58:	f04f 0023 	mov.w	r0, #35	; 0x23
20007c5c:	f7ff ffac 	bl	20007bb8 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c2)
20007c60:	687a      	ldr	r2, [r7, #4]
20007c62:	f64e 0374 	movw	r3, #59508	; 0xe874
20007c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007c6a:	429a      	cmp	r2, r3
20007c6c:	d103      	bne.n	20007c76 <I2C_enable_irq+0x4a>
	{
		NVIC_EnableIRQ( FabricIrq2_IRQn );
20007c6e:	f04f 0024 	mov.w	r0, #36	; 0x24
20007c72:	f7ff ffa1 	bl	20007bb8 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c3)
20007c76:	687a      	ldr	r2, [r7, #4]
20007c78:	f64e 63a8 	movw	r3, #61096	; 0xeea8
20007c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007c80:	429a      	cmp	r2, r3
20007c82:	d103      	bne.n	20007c8c <I2C_enable_irq+0x60>
	{
		NVIC_EnableIRQ( FabricIrq3_IRQn );
20007c84:	f04f 0025 	mov.w	r0, #37	; 0x25
20007c88:	f7ff ff96 	bl	20007bb8 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c4)
20007c8c:	687a      	ldr	r2, [r7, #4]
20007c8e:	f64e 731c 	movw	r3, #61212	; 0xef1c
20007c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007c96:	429a      	cmp	r2, r3
20007c98:	d103      	bne.n	20007ca2 <I2C_enable_irq+0x76>
	{
		NVIC_EnableIRQ( FabricIrq4_IRQn );
20007c9a:	f04f 0026 	mov.w	r0, #38	; 0x26
20007c9e:	f7ff ff8b 	bl	20007bb8 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c5)
20007ca2:	687a      	ldr	r2, [r7, #4]
20007ca4:	f64e 633c 	movw	r3, #60988	; 0xee3c
20007ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007cac:	429a      	cmp	r2, r3
20007cae:	d103      	bne.n	20007cb8 <I2C_enable_irq+0x8c>
	{
		NVIC_EnableIRQ( FabricIrq5_IRQn );
20007cb0:	f04f 0027 	mov.w	r0, #39	; 0x27
20007cb4:	f7ff ff80 	bl	20007bb8 <NVIC_EnableIRQ>
	}
}
20007cb8:	f107 0708 	add.w	r7, r7, #8
20007cbc:	46bd      	mov	sp, r7
20007cbe:	bd80      	pop	{r7, pc}

20007cc0 <I2C_disable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to disable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_disable_irq( i2c_instance_t * this_i2c )
{
20007cc0:	b580      	push	{r7, lr}
20007cc2:	b082      	sub	sp, #8
20007cc4:	af00      	add	r7, sp, #0
20007cc6:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
20007cc8:	687a      	ldr	r2, [r7, #4]
20007cca:	f64e 5364 	movw	r3, #60772	; 0xed64
20007cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007cd2:	429a      	cmp	r2, r3
20007cd4:	d103      	bne.n	20007cde <I2C_disable_irq+0x1e>
	{
		NVIC_DisableIRQ( FabricIrq0_IRQn );
20007cd6:	f04f 0022 	mov.w	r0, #34	; 0x22
20007cda:	f7ff ff89 	bl	20007bf0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
20007cde:	687a      	ldr	r2, [r7, #4]
20007ce0:	f64e 53d0 	movw	r3, #60880	; 0xedd0
20007ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007ce8:	429a      	cmp	r2, r3
20007cea:	d103      	bne.n	20007cf4 <I2C_disable_irq+0x34>
	{
		NVIC_DisableIRQ( FabricIrq1_IRQn );
20007cec:	f04f 0023 	mov.w	r0, #35	; 0x23
20007cf0:	f7ff ff7e 	bl	20007bf0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c2)
20007cf4:	687a      	ldr	r2, [r7, #4]
20007cf6:	f64e 0374 	movw	r3, #59508	; 0xe874
20007cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007cfe:	429a      	cmp	r2, r3
20007d00:	d103      	bne.n	20007d0a <I2C_disable_irq+0x4a>
	{
		NVIC_DisableIRQ( FabricIrq2_IRQn );
20007d02:	f04f 0024 	mov.w	r0, #36	; 0x24
20007d06:	f7ff ff73 	bl	20007bf0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c3)
20007d0a:	687a      	ldr	r2, [r7, #4]
20007d0c:	f64e 63a8 	movw	r3, #61096	; 0xeea8
20007d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007d14:	429a      	cmp	r2, r3
20007d16:	d103      	bne.n	20007d20 <I2C_disable_irq+0x60>
	{
		NVIC_DisableIRQ( FabricIrq3_IRQn );
20007d18:	f04f 0025 	mov.w	r0, #37	; 0x25
20007d1c:	f7ff ff68 	bl	20007bf0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c4)
20007d20:	687a      	ldr	r2, [r7, #4]
20007d22:	f64e 731c 	movw	r3, #61212	; 0xef1c
20007d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007d2a:	429a      	cmp	r2, r3
20007d2c:	d103      	bne.n	20007d36 <I2C_disable_irq+0x76>
	{
		NVIC_DisableIRQ( FabricIrq4_IRQn );
20007d2e:	f04f 0026 	mov.w	r0, #38	; 0x26
20007d32:	f7ff ff5d 	bl	20007bf0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c5)
20007d36:	687a      	ldr	r2, [r7, #4]
20007d38:	f64e 633c 	movw	r3, #60988	; 0xee3c
20007d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007d40:	429a      	cmp	r2, r3
20007d42:	d103      	bne.n	20007d4c <I2C_disable_irq+0x8c>
	{
		NVIC_DisableIRQ( FabricIrq5_IRQn );
20007d44:	f04f 0027 	mov.w	r0, #39	; 0x27
20007d48:	f7ff ff52 	bl	20007bf0 <NVIC_DisableIRQ>
	}
}
20007d4c:	f107 0708 	add.w	r7, r7, #8
20007d50:	46bd      	mov	sp, r7
20007d52:	bd80      	pop	{r7, pc}

20007d54 <SystemInit>:

/***************************************************************************//**
 * See system_m2sxxx.h for details.
 */
void SystemInit(void)
{
20007d54:	b580      	push	{r7, lr}
20007d56:	af00      	add	r7, sp, #0
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
    complete_clock_config();
20007d58:	f000 f96a 	bl	20008030 <complete_clock_config>
#endif

    silicon_workarounds();
20007d5c:	f000 f936 	bl	20007fcc <silicon_workarounds>
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
20007d60:	f64e 5300 	movw	r3, #60672	; 0xed00
20007d64:	f2ce 0300 	movt	r3, #57344	; 0xe000
20007d68:	f64e 5200 	movw	r2, #60672	; 0xed00
20007d6c:	f2ce 0200 	movt	r2, #57344	; 0xe000
20007d70:	6952      	ldr	r2, [r2, #20]
20007d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20007d76:	615a      	str	r2, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
20007d78:	f7f8 fa99 	bl	200002ae <mscc_post_hw_cfg_init>
    while(!CORE_SF2_CFG->INIT_DONE)
    {
        ;   /* Wait for INIT_DONE from CoreSF2Reset. */
    }
#endif
}
20007d7c:	bd80      	pop	{r7, pc}
20007d7e:	bf00      	nop

20007d80 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
20007d80:	b580      	push	{r7, lr}
20007d82:	b088      	sub	sp, #32
20007d84:	af00      	add	r7, sp, #0
#if 1
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
20007d86:	f248 0300 	movw	r3, #32768	; 0x8000
20007d8a:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20007d92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20007d96:	60fb      	str	r3, [r7, #12]
    
    if(0u == controller_pll_init)
20007d98:	68fb      	ldr	r3, [r7, #12]
20007d9a:	2b00      	cmp	r3, #0
20007d9c:	f040 808b 	bne.w	20007eb6 <SystemCoreClockUpdate+0x136>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;
        
        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
20007da0:	f248 0300 	movw	r3, #32768	; 0x8000
20007da4:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20007dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20007db0:	617b      	str	r3, [r7, #20]
        if(0u == global_mux_sel)
20007db2:	697b      	ldr	r3, [r7, #20]
20007db4:	2b00      	cmp	r3, #0
20007db6:	d13f      	bne.n	20007e38 <SystemCoreClockUpdate+0xb8>
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
20007db8:	f248 5304 	movw	r3, #34052	; 0x8504
20007dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007dc0:	f24e 1200 	movw	r2, #57600	; 0xe100
20007dc4:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007dc8:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
20007dca:	f248 5308 	movw	r3, #34056	; 0x8508
20007dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007dd2:	f24e 1200 	movw	r2, #57600	; 0xe100
20007dd6:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007dda:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
20007ddc:	f248 530c 	movw	r3, #34060	; 0x850c
20007de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007de4:	f24e 1200 	movw	r2, #57600	; 0xe100
20007de8:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007dec:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
20007dee:	f248 5310 	movw	r3, #34064	; 0x8510
20007df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007df6:	f24f 0280 	movw	r2, #61568	; 0xf080
20007dfa:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20007dfe:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
20007e00:	f248 5314 	movw	r3, #34068	; 0x8514
20007e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007e08:	f24e 1200 	movw	r2, #57600	; 0xe100
20007e0c:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007e10:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
20007e12:	f248 5318 	movw	r3, #34072	; 0x8518
20007e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007e1a:	f24e 1200 	movw	r2, #57600	; 0xe100
20007e1e:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007e22:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
20007e24:	f248 531c 	movw	r3, #34076	; 0x851c
20007e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007e2c:	f24e 1200 	movw	r2, #57600	; 0xe100
20007e30:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007e34:	601a      	str	r2, [r3, #0]
                break;
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007e36:	e045      	b.n	20007ec4 <SystemCoreClockUpdate+0x144>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
20007e38:	f248 4398 	movw	r3, #33944	; 0x8498
20007e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007e40:	f107 0204 	add.w	r2, r7, #4
20007e44:	e893 0003 	ldmia.w	r3, {r0, r1}
20007e48:	e882 0003 	stmia.w	r2, {r0, r1}
            
            uint32_t standby_sel;
            uint8_t clock_source;
            
            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
20007e4c:	f248 0300 	movw	r3, #32768	; 0x8000
20007e50:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007e54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
20007e58:	ea4f 1393 	mov.w	r3, r3, lsr #6
20007e5c:	f003 0307 	and.w	r3, r3, #7
20007e60:	61bb      	str	r3, [r7, #24]
            clock_source = standby_clock_lut[standby_sel];
20007e62:	69bb      	ldr	r3, [r7, #24]
20007e64:	f107 0220 	add.w	r2, r7, #32
20007e68:	4413      	add	r3, r2
20007e6a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
20007e6e:	77fb      	strb	r3, [r7, #31]
            switch(clock_source)
20007e70:	7ffb      	ldrb	r3, [r7, #31]
20007e72:	2b01      	cmp	r3, #1
20007e74:	d00b      	beq.n	20007e8e <SystemCoreClockUpdate+0x10e>
20007e76:	2b02      	cmp	r3, #2
20007e78:	d00e      	beq.n	20007e98 <SystemCoreClockUpdate+0x118>
20007e7a:	2b00      	cmp	r3, #0
20007e7c:	d114      	bne.n	20007ea8 <SystemCoreClockUpdate+0x128>
            {
                case RCOSC_25_50MHZ_CLK_SRC:
                    clk_src = get_rcosc_25_50mhz_frequency();
20007e7e:	f000 f825 	bl	20007ecc <get_rcosc_25_50mhz_frequency>
20007e82:	4603      	mov	r3, r0
20007e84:	613b      	str	r3, [r7, #16]
                    set_clock_frequency_globals(clk_src);
20007e86:	6938      	ldr	r0, [r7, #16]
20007e88:	f000 f842 	bl	20007f10 <set_clock_frequency_globals>
                break;
20007e8c:	e01a      	b.n	20007ec4 <SystemCoreClockUpdate+0x144>
                
                case CLK_XTAL_CLK_SRC:
                    set_clock_frequency_globals(FREQ_32KHZ);
20007e8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20007e92:	f000 f83d 	bl	20007f10 <set_clock_frequency_globals>
                break;
20007e96:	e015      	b.n	20007ec4 <SystemCoreClockUpdate+0x144>
                
                case RCOSC_1_MHZ_CLK_SRC:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007e98:	f244 2040 	movw	r0, #16960	; 0x4240
20007e9c:	f2c0 000f 	movt	r0, #15
20007ea0:	f000 f836 	bl	20007f10 <set_clock_frequency_globals>
                break;
20007ea4:	bf00      	nop
20007ea6:	e00d      	b.n	20007ec4 <SystemCoreClockUpdate+0x144>
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007ea8:	f244 2040 	movw	r0, #16960	; 0x4240
20007eac:	f2c0 000f 	movt	r0, #15
20007eb0:	f000 f82e 	bl	20007f10 <set_clock_frequency_globals>
20007eb4:	e006      	b.n	20007ec4 <SystemCoreClockUpdate+0x144>
        }
    }
    else
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
20007eb6:	f000 f809 	bl	20007ecc <get_rcosc_25_50mhz_frequency>
20007eba:	4603      	mov	r3, r0
20007ebc:	613b      	str	r3, [r7, #16]
        set_clock_frequency_globals(clk_src);
20007ebe:	6938      	ldr	r0, [r7, #16]
20007ec0:	f000 f826 	bl	20007f10 <set_clock_frequency_globals>
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
#endif
}
20007ec4:	f107 0720 	add.w	r7, r7, #32
20007ec8:	46bd      	mov	sp, r7
20007eca:	bd80      	pop	{r7, pc}

20007ecc <get_rcosc_25_50mhz_frequency>:

/***************************************************************************//**
 * Find out frequency generated by the 25_50mhz RC osciallator.
 */
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
20007ecc:	b480      	push	{r7}
20007ece:	b083      	sub	sp, #12
20007ed0:	af00      	add	r7, sp, #0
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;
    
    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
20007ed2:	f248 0300 	movw	r3, #32768	; 0x8000
20007ed6:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007eda:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20007ede:	f003 0304 	and.w	r3, r3, #4
20007ee2:	603b      	str	r3, [r7, #0]
    if(0u == rcosc_div2)
20007ee4:	683b      	ldr	r3, [r7, #0]
20007ee6:	2b00      	cmp	r3, #0
20007ee8:	d105      	bne.n	20007ef6 <get_rcosc_25_50mhz_frequency+0x2a>
    {
        /* 25_50mhz oscillator is configured for 25 MHz operations. */
        rcosc_frequency = FREQ_25MHZ;
20007eea:	f647 0340 	movw	r3, #30784	; 0x7840
20007eee:	f2c0 137d 	movt	r3, #381	; 0x17d
20007ef2:	607b      	str	r3, [r7, #4]
20007ef4:	e004      	b.n	20007f00 <get_rcosc_25_50mhz_frequency+0x34>
    }
    else
    {
        /* 25_50mhz oscillator is configured for 50 MHz operations. */
        rcosc_frequency = FREQ_50MHZ;
20007ef6:	f24f 0380 	movw	r3, #61568	; 0xf080
20007efa:	f2c0 23fa 	movt	r3, #762	; 0x2fa
20007efe:	607b      	str	r3, [r7, #4]
    }
    
    return rcosc_frequency;
20007f00:	687b      	ldr	r3, [r7, #4]
}
20007f02:	4618      	mov	r0, r3
20007f04:	f107 070c 	add.w	r7, r7, #12
20007f08:	46bd      	mov	sp, r7
20007f0a:	bc80      	pop	{r7}
20007f0c:	4770      	bx	lr
20007f0e:	bf00      	nop

20007f10 <set_clock_frequency_globals>:
        - g_FrequencyFIC0
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
20007f10:	b480      	push	{r7}
20007f12:	b083      	sub	sp, #12
20007f14:	af00      	add	r7, sp, #0
20007f16:	6078      	str	r0, [r7, #4]
    SystemCoreClock = standby_clk;
20007f18:	f248 5304 	movw	r3, #34052	; 0x8504
20007f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007f20:	687a      	ldr	r2, [r7, #4]
20007f22:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = standby_clk;
20007f24:	f248 5308 	movw	r3, #34056	; 0x8508
20007f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007f2c:	687a      	ldr	r2, [r7, #4]
20007f2e:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = standby_clk;
20007f30:	f248 530c 	movw	r3, #34060	; 0x850c
20007f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007f38:	687a      	ldr	r2, [r7, #4]
20007f3a:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
20007f3c:	f248 5310 	movw	r3, #34064	; 0x8510
20007f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007f44:	f24f 0280 	movw	r2, #61568	; 0xf080
20007f48:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20007f4c:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC0 = standby_clk;
20007f4e:	f248 5314 	movw	r3, #34068	; 0x8514
20007f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007f56:	687a      	ldr	r2, [r7, #4]
20007f58:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC1 = standby_clk;
20007f5a:	f248 5318 	movw	r3, #34072	; 0x8518
20007f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007f62:	687a      	ldr	r2, [r7, #4]
20007f64:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC64 = standby_clk;
20007f66:	f248 531c 	movw	r3, #34076	; 0x851c
20007f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007f6e:	687a      	ldr	r2, [r7, #4]
20007f70:	601a      	str	r2, [r3, #0]
}
20007f72:	f107 070c 	add.w	r7, r7, #12
20007f76:	46bd      	mov	sp, r7
20007f78:	bc80      	pop	{r7}
20007f7a:	4770      	bx	lr

20007f7c <get_silicon_revision>:

/*------------------------------------------------------------------------------
  Retrieve silicon revision from system registers.
 */
static uint32_t get_silicon_revision(void)
{
20007f7c:	b480      	push	{r7}
20007f7e:	b083      	sub	sp, #12
20007f80:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    uint32_t device_version;
    
    device_version = SYSREG->DEVICE_VERSION;
20007f82:	f248 0300 	movw	r3, #32768	; 0x8000
20007f86:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007f8a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
20007f8e:	607b      	str	r3, [r7, #4]
    switch(device_version)
20007f90:	687a      	ldr	r2, [r7, #4]
20007f92:	f64f 0302 	movw	r3, #63490	; 0xf802
20007f96:	429a      	cmp	r2, r3
20007f98:	d006      	beq.n	20007fa8 <get_silicon_revision+0x2c>
20007f9a:	f64f 0302 	movw	r3, #63490	; 0xf802
20007f9e:	f2c0 0301 	movt	r3, #1
20007fa2:	429a      	cmp	r2, r3
20007fa4:	d004      	beq.n	20007fb0 <get_silicon_revision+0x34>
20007fa6:	e007      	b.n	20007fb8 <get_silicon_revision+0x3c>
    {
        case 0x0000F802:
            silicon_revision = M2S050_REV_A_SILICON;
20007fa8:	f04f 0301 	mov.w	r3, #1
20007fac:	603b      	str	r3, [r7, #0]
            break;
20007fae:	e006      	b.n	20007fbe <get_silicon_revision+0x42>
            
        case 0x0001F802:
            silicon_revision = M2S050_REV_B_SILICON;
20007fb0:	f04f 0302 	mov.w	r3, #2
20007fb4:	603b      	str	r3, [r7, #0]
            break;
20007fb6:	e002      	b.n	20007fbe <get_silicon_revision+0x42>
            
        default:
            silicon_revision = UNKNOWN_SILICON_REV;
20007fb8:	f04f 0300 	mov.w	r3, #0
20007fbc:	603b      	str	r3, [r7, #0]
            break;
    }
    
    return silicon_revision;
20007fbe:	683b      	ldr	r3, [r7, #0]
}
20007fc0:	4618      	mov	r0, r3
20007fc2:	f107 070c 	add.w	r7, r7, #12
20007fc6:	46bd      	mov	sp, r7
20007fc8:	bc80      	pop	{r7}
20007fca:	4770      	bx	lr

20007fcc <silicon_workarounds>:

/*------------------------------------------------------------------------------
  Workarounds for various silicon versions.
 */
static void silicon_workarounds(void)
{
20007fcc:	b580      	push	{r7, lr}
20007fce:	b082      	sub	sp, #8
20007fd0:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    
    silicon_revision = get_silicon_revision();
20007fd2:	f7ff ffd3 	bl	20007f7c <get_silicon_revision>
20007fd6:	4603      	mov	r3, r0
20007fd8:	607b      	str	r3, [r7, #4]
    
    switch(silicon_revision)
20007fda:	687b      	ldr	r3, [r7, #4]
20007fdc:	2b01      	cmp	r3, #1
20007fde:	d101      	bne.n	20007fe4 <silicon_workarounds+0x18>
    {
        case M2S050_REV_A_SILICON:
            m2s050_rev_a_workarounds();
20007fe0:	f000 f804 	bl	20007fec <m2s050_rev_a_workarounds>
        case UNKNOWN_SILICON_REV:
            /* Fall through. */
        default:
            break;
    }
}
20007fe4:	f107 0708 	add.w	r7, r7, #8
20007fe8:	46bd      	mov	sp, r7
20007fea:	bd80      	pop	{r7, pc}

20007fec <m2s050_rev_a_workarounds>:

/*------------------------------------------------------------------------------
  Silicon workarounds for M2S050 rev A.
 */
static void m2s050_rev_a_workarounds(void)
{
20007fec:	b480      	push	{r7}
20007fee:	af00      	add	r7, sp, #0
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
20007ff0:	f248 0300 	movw	r3, #32768	; 0x8000
20007ff4:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007ff8:	f248 0200 	movw	r2, #32768	; 0x8000
20007ffc:	f2c4 0203 	movt	r2, #16387	; 0x4003
20008000:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20008004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20008008:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
2000800c:	f248 0300 	movw	r3, #32768	; 0x8000
20008010:	f2c4 0303 	movt	r3, #16387	; 0x4003
20008014:	f248 0200 	movw	r2, #32768	; 0x8000
20008018:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000801c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20008020:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
20008024:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
20008028:	46bd      	mov	sp, r7
2000802a:	bc80      	pop	{r7}
2000802c:	4770      	bx	lr
2000802e:	bf00      	nop

20008030 <complete_clock_config>:
/*------------------------------------------------------------------------------
  Complete clock configuration if requested by Libero.
 */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
static void complete_clock_config(void)
{
20008030:	b480      	push	{r7}
20008032:	b083      	sub	sp, #12
20008034:	af00      	add	r7, sp, #0
    uint32_t pll_locked;
    
    /* Wait for fabric PLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & FAB_PLL_LOCK_MASK;
20008036:	f248 0300 	movw	r3, #32768	; 0x8000
2000803a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000803e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20008042:	f003 0301 	and.w	r3, r3, #1
20008046:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
20008048:	687b      	ldr	r3, [r7, #4]
2000804a:	2b00      	cmp	r3, #0
2000804c:	d0f3      	beq.n	20008036 <complete_clock_config+0x6>
    
    /* Negate MPLL bypass. */
    SYSREG->MSSDDR_PLL_STATUS_HIGH_CR &= ~FACC_PLL_BYPASS_MASK;
2000804e:	f248 0300 	movw	r3, #32768	; 0x8000
20008052:	f2c4 0303 	movt	r3, #16387	; 0x4003
20008056:	f248 0200 	movw	r2, #32768	; 0x8000
2000805a:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000805e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
20008062:	f022 0201 	bic.w	r2, r2, #1
20008066:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    
    /* Wait for MPLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & MPLL_LOCK_MASK;
2000806a:	f248 0300 	movw	r3, #32768	; 0x8000
2000806e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20008072:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20008076:	f003 0302 	and.w	r3, r3, #2
2000807a:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
2000807c:	687b      	ldr	r3, [r7, #4]
2000807e:	2b00      	cmp	r3, #0
20008080:	d0f3      	beq.n	2000806a <complete_clock_config+0x3a>
    
    /* Switch FACC from standby to run mode. */
    SYSREG->MSSDDR_FACC1_CR &= ~FACC_GLMUX_SEL_MASK;
20008082:	f248 0300 	movw	r3, #32768	; 0x8000
20008086:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000808a:	f248 0200 	movw	r2, #32768	; 0x8000
2000808e:	f2c4 0203 	movt	r2, #16387	; 0x4003
20008092:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20008096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2000809a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* Negate FPGA_SOFTRESET to de-assert MSS_RESET_N_M2F in the fabric */
    SYSREG->SOFT_RST_CR &= ~SYSREG_FPGA_SOFTRESET_MASK;
2000809e:	f248 0300 	movw	r3, #32768	; 0x8000
200080a2:	f2c4 0303 	movt	r3, #16387	; 0x4003
200080a6:	f248 0200 	movw	r2, #32768	; 0x8000
200080aa:	f2c4 0203 	movt	r2, #16387	; 0x4003
200080ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
200080b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
200080b4:	649a      	str	r2, [r3, #72]	; 0x48
}
200080b6:	f107 070c 	add.w	r7, r7, #12
200080ba:	46bd      	mov	sp, r7
200080bc:	bc80      	pop	{r7}
200080be:	4770      	bx	lr

200080c0 <HAL_disable_interrupts>:
200080c0:	f3ef 8010 	mrs	r0, PRIMASK
200080c4:	b672      	cpsid	i
200080c6:	4770      	bx	lr

200080c8 <HAL_restore_interrupts>:
200080c8:	f380 8810 	msr	PRIMASK, r0
200080cc:	4770      	bx	lr

200080ce <HW_set_32bit_reg>:
200080ce:	6001      	str	r1, [r0, #0]
200080d0:	4770      	bx	lr

200080d2 <HW_get_32bit_reg>:
200080d2:	6800      	ldr	r0, [r0, #0]
200080d4:	4770      	bx	lr

200080d6 <HW_set_32bit_reg_field>:
200080d6:	b50e      	push	{r1, r2, r3, lr}
200080d8:	fa03 f301 	lsl.w	r3, r3, r1
200080dc:	ea03 0302 	and.w	r3, r3, r2
200080e0:	6801      	ldr	r1, [r0, #0]
200080e2:	ea6f 0202 	mvn.w	r2, r2
200080e6:	ea01 0102 	and.w	r1, r1, r2
200080ea:	ea41 0103 	orr.w	r1, r1, r3
200080ee:	6001      	str	r1, [r0, #0]
200080f0:	bd0e      	pop	{r1, r2, r3, pc}

200080f2 <HW_get_32bit_reg_field>:
200080f2:	6800      	ldr	r0, [r0, #0]
200080f4:	ea00 0002 	and.w	r0, r0, r2
200080f8:	fa20 f001 	lsr.w	r0, r0, r1
200080fc:	4770      	bx	lr

200080fe <HW_set_16bit_reg>:
200080fe:	8001      	strh	r1, [r0, #0]
20008100:	4770      	bx	lr

20008102 <HW_get_16bit_reg>:
20008102:	8800      	ldrh	r0, [r0, #0]
20008104:	4770      	bx	lr

20008106 <HW_set_16bit_reg_field>:
20008106:	b50e      	push	{r1, r2, r3, lr}
20008108:	fa03 f301 	lsl.w	r3, r3, r1
2000810c:	ea03 0302 	and.w	r3, r3, r2
20008110:	8801      	ldrh	r1, [r0, #0]
20008112:	ea6f 0202 	mvn.w	r2, r2
20008116:	ea01 0102 	and.w	r1, r1, r2
2000811a:	ea41 0103 	orr.w	r1, r1, r3
2000811e:	8001      	strh	r1, [r0, #0]
20008120:	bd0e      	pop	{r1, r2, r3, pc}

20008122 <HW_get_16bit_reg_field>:
20008122:	8800      	ldrh	r0, [r0, #0]
20008124:	ea00 0002 	and.w	r0, r0, r2
20008128:	fa20 f001 	lsr.w	r0, r0, r1
2000812c:	4770      	bx	lr

2000812e <HW_set_8bit_reg>:
2000812e:	7001      	strb	r1, [r0, #0]
20008130:	4770      	bx	lr

20008132 <HW_get_8bit_reg>:
20008132:	7800      	ldrb	r0, [r0, #0]
20008134:	4770      	bx	lr

20008136 <HW_set_8bit_reg_field>:
20008136:	b50e      	push	{r1, r2, r3, lr}
20008138:	fa03 f301 	lsl.w	r3, r3, r1
2000813c:	ea03 0302 	and.w	r3, r3, r2
20008140:	7801      	ldrb	r1, [r0, #0]
20008142:	ea6f 0202 	mvn.w	r2, r2
20008146:	ea01 0102 	and.w	r1, r1, r2
2000814a:	ea41 0103 	orr.w	r1, r1, r3
2000814e:	7001      	strb	r1, [r0, #0]
20008150:	bd0e      	pop	{r1, r2, r3, pc}

20008152 <HW_get_8bit_reg_field>:
20008152:	7800      	ldrb	r0, [r0, #0]
20008154:	ea00 0002 	and.w	r0, r0, r2
20008158:	fa20 f001 	lsr.w	r0, r0, r1
2000815c:	4770      	bx	lr
	...

20008160 <__libc_init_array>:
20008160:	b570      	push	{r4, r5, r6, lr}
20008162:	f248 46b8 	movw	r6, #33976	; 0x84b8
20008166:	f248 45b8 	movw	r5, #33976	; 0x84b8
2000816a:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000816e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20008172:	1b76      	subs	r6, r6, r5
20008174:	10b6      	asrs	r6, r6, #2
20008176:	d006      	beq.n	20008186 <__libc_init_array+0x26>
20008178:	2400      	movs	r4, #0
2000817a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000817e:	3401      	adds	r4, #1
20008180:	4798      	blx	r3
20008182:	42a6      	cmp	r6, r4
20008184:	d8f9      	bhi.n	2000817a <__libc_init_array+0x1a>
20008186:	f248 45b8 	movw	r5, #33976	; 0x84b8
2000818a:	f248 46bc 	movw	r6, #33980	; 0x84bc
2000818e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20008192:	f2c2 0600 	movt	r6, #8192	; 0x2000
20008196:	1b76      	subs	r6, r6, r5
20008198:	f000 f982 	bl	200084a0 <_init>
2000819c:	10b6      	asrs	r6, r6, #2
2000819e:	d006      	beq.n	200081ae <__libc_init_array+0x4e>
200081a0:	2400      	movs	r4, #0
200081a2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200081a6:	3401      	adds	r4, #1
200081a8:	4798      	blx	r3
200081aa:	42a6      	cmp	r6, r4
200081ac:	d8f9      	bhi.n	200081a2 <__libc_init_array+0x42>
200081ae:	bd70      	pop	{r4, r5, r6, pc}

200081b0 <memcpy>:
200081b0:	2a03      	cmp	r2, #3
200081b2:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
200081b6:	d80b      	bhi.n	200081d0 <memcpy+0x20>
200081b8:	b13a      	cbz	r2, 200081ca <memcpy+0x1a>
200081ba:	2300      	movs	r3, #0
200081bc:	f811 c003 	ldrb.w	ip, [r1, r3]
200081c0:	f800 c003 	strb.w	ip, [r0, r3]
200081c4:	3301      	adds	r3, #1
200081c6:	4293      	cmp	r3, r2
200081c8:	d1f8      	bne.n	200081bc <memcpy+0xc>
200081ca:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
200081ce:	4770      	bx	lr
200081d0:	1882      	adds	r2, r0, r2
200081d2:	460c      	mov	r4, r1
200081d4:	4603      	mov	r3, r0
200081d6:	e003      	b.n	200081e0 <memcpy+0x30>
200081d8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
200081dc:	f803 1c01 	strb.w	r1, [r3, #-1]
200081e0:	f003 0603 	and.w	r6, r3, #3
200081e4:	4619      	mov	r1, r3
200081e6:	46a4      	mov	ip, r4
200081e8:	3301      	adds	r3, #1
200081ea:	3401      	adds	r4, #1
200081ec:	2e00      	cmp	r6, #0
200081ee:	d1f3      	bne.n	200081d8 <memcpy+0x28>
200081f0:	f01c 0403 	ands.w	r4, ip, #3
200081f4:	4663      	mov	r3, ip
200081f6:	bf08      	it	eq
200081f8:	ebc1 0c02 	rsbeq	ip, r1, r2
200081fc:	d068      	beq.n	200082d0 <memcpy+0x120>
200081fe:	4265      	negs	r5, r4
20008200:	f1c4 0a04 	rsb	sl, r4, #4
20008204:	eb0c 0705 	add.w	r7, ip, r5
20008208:	4633      	mov	r3, r6
2000820a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
2000820e:	f85c 6005 	ldr.w	r6, [ip, r5]
20008212:	ea4f 08c4 	mov.w	r8, r4, lsl #3
20008216:	1a55      	subs	r5, r2, r1
20008218:	e008      	b.n	2000822c <memcpy+0x7c>
2000821a:	f857 4f04 	ldr.w	r4, [r7, #4]!
2000821e:	4626      	mov	r6, r4
20008220:	fa04 f40a 	lsl.w	r4, r4, sl
20008224:	ea49 0404 	orr.w	r4, r9, r4
20008228:	50cc      	str	r4, [r1, r3]
2000822a:	3304      	adds	r3, #4
2000822c:	185c      	adds	r4, r3, r1
2000822e:	2d03      	cmp	r5, #3
20008230:	fa26 f908 	lsr.w	r9, r6, r8
20008234:	f1a5 0504 	sub.w	r5, r5, #4
20008238:	eb0c 0603 	add.w	r6, ip, r3
2000823c:	dced      	bgt.n	2000821a <memcpy+0x6a>
2000823e:	2300      	movs	r3, #0
20008240:	e002      	b.n	20008248 <memcpy+0x98>
20008242:	5cf1      	ldrb	r1, [r6, r3]
20008244:	54e1      	strb	r1, [r4, r3]
20008246:	3301      	adds	r3, #1
20008248:	1919      	adds	r1, r3, r4
2000824a:	4291      	cmp	r1, r2
2000824c:	d3f9      	bcc.n	20008242 <memcpy+0x92>
2000824e:	e7bc      	b.n	200081ca <memcpy+0x1a>
20008250:	f853 4c40 	ldr.w	r4, [r3, #-64]
20008254:	f841 4c40 	str.w	r4, [r1, #-64]
20008258:	f853 4c3c 	ldr.w	r4, [r3, #-60]
2000825c:	f841 4c3c 	str.w	r4, [r1, #-60]
20008260:	f853 4c38 	ldr.w	r4, [r3, #-56]
20008264:	f841 4c38 	str.w	r4, [r1, #-56]
20008268:	f853 4c34 	ldr.w	r4, [r3, #-52]
2000826c:	f841 4c34 	str.w	r4, [r1, #-52]
20008270:	f853 4c30 	ldr.w	r4, [r3, #-48]
20008274:	f841 4c30 	str.w	r4, [r1, #-48]
20008278:	f853 4c2c 	ldr.w	r4, [r3, #-44]
2000827c:	f841 4c2c 	str.w	r4, [r1, #-44]
20008280:	f853 4c28 	ldr.w	r4, [r3, #-40]
20008284:	f841 4c28 	str.w	r4, [r1, #-40]
20008288:	f853 4c24 	ldr.w	r4, [r3, #-36]
2000828c:	f841 4c24 	str.w	r4, [r1, #-36]
20008290:	f853 4c20 	ldr.w	r4, [r3, #-32]
20008294:	f841 4c20 	str.w	r4, [r1, #-32]
20008298:	f853 4c1c 	ldr.w	r4, [r3, #-28]
2000829c:	f841 4c1c 	str.w	r4, [r1, #-28]
200082a0:	f853 4c18 	ldr.w	r4, [r3, #-24]
200082a4:	f841 4c18 	str.w	r4, [r1, #-24]
200082a8:	f853 4c14 	ldr.w	r4, [r3, #-20]
200082ac:	f841 4c14 	str.w	r4, [r1, #-20]
200082b0:	f853 4c10 	ldr.w	r4, [r3, #-16]
200082b4:	f841 4c10 	str.w	r4, [r1, #-16]
200082b8:	f853 4c0c 	ldr.w	r4, [r3, #-12]
200082bc:	f841 4c0c 	str.w	r4, [r1, #-12]
200082c0:	f853 4c08 	ldr.w	r4, [r3, #-8]
200082c4:	f841 4c08 	str.w	r4, [r1, #-8]
200082c8:	f853 4c04 	ldr.w	r4, [r3, #-4]
200082cc:	f841 4c04 	str.w	r4, [r1, #-4]
200082d0:	461c      	mov	r4, r3
200082d2:	460d      	mov	r5, r1
200082d4:	3340      	adds	r3, #64	; 0x40
200082d6:	3140      	adds	r1, #64	; 0x40
200082d8:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
200082dc:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
200082e0:	dcb6      	bgt.n	20008250 <memcpy+0xa0>
200082e2:	4621      	mov	r1, r4
200082e4:	462b      	mov	r3, r5
200082e6:	1b54      	subs	r4, r2, r5
200082e8:	e00f      	b.n	2000830a <memcpy+0x15a>
200082ea:	f851 5c10 	ldr.w	r5, [r1, #-16]
200082ee:	f843 5c10 	str.w	r5, [r3, #-16]
200082f2:	f851 5c0c 	ldr.w	r5, [r1, #-12]
200082f6:	f843 5c0c 	str.w	r5, [r3, #-12]
200082fa:	f851 5c08 	ldr.w	r5, [r1, #-8]
200082fe:	f843 5c08 	str.w	r5, [r3, #-8]
20008302:	f851 5c04 	ldr.w	r5, [r1, #-4]
20008306:	f843 5c04 	str.w	r5, [r3, #-4]
2000830a:	2c0f      	cmp	r4, #15
2000830c:	460d      	mov	r5, r1
2000830e:	469c      	mov	ip, r3
20008310:	f101 0110 	add.w	r1, r1, #16
20008314:	f103 0310 	add.w	r3, r3, #16
20008318:	f1a4 0410 	sub.w	r4, r4, #16
2000831c:	dce5      	bgt.n	200082ea <memcpy+0x13a>
2000831e:	ebcc 0102 	rsb	r1, ip, r2
20008322:	2300      	movs	r3, #0
20008324:	e003      	b.n	2000832e <memcpy+0x17e>
20008326:	58ec      	ldr	r4, [r5, r3]
20008328:	f84c 4003 	str.w	r4, [ip, r3]
2000832c:	3304      	adds	r3, #4
2000832e:	195e      	adds	r6, r3, r5
20008330:	2903      	cmp	r1, #3
20008332:	eb03 040c 	add.w	r4, r3, ip
20008336:	f1a1 0104 	sub.w	r1, r1, #4
2000833a:	dcf4      	bgt.n	20008326 <memcpy+0x176>
2000833c:	e77f      	b.n	2000823e <memcpy+0x8e>
2000833e:	bf00      	nop

20008340 <memset>:
20008340:	2a03      	cmp	r2, #3
20008342:	b2c9      	uxtb	r1, r1
20008344:	b430      	push	{r4, r5}
20008346:	d807      	bhi.n	20008358 <memset+0x18>
20008348:	b122      	cbz	r2, 20008354 <memset+0x14>
2000834a:	2300      	movs	r3, #0
2000834c:	54c1      	strb	r1, [r0, r3]
2000834e:	3301      	adds	r3, #1
20008350:	4293      	cmp	r3, r2
20008352:	d1fb      	bne.n	2000834c <memset+0xc>
20008354:	bc30      	pop	{r4, r5}
20008356:	4770      	bx	lr
20008358:	eb00 0c02 	add.w	ip, r0, r2
2000835c:	4603      	mov	r3, r0
2000835e:	e001      	b.n	20008364 <memset+0x24>
20008360:	f803 1c01 	strb.w	r1, [r3, #-1]
20008364:	f003 0403 	and.w	r4, r3, #3
20008368:	461a      	mov	r2, r3
2000836a:	3301      	adds	r3, #1
2000836c:	2c00      	cmp	r4, #0
2000836e:	d1f7      	bne.n	20008360 <memset+0x20>
20008370:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20008374:	ebc2 040c 	rsb	r4, r2, ip
20008378:	fb03 f301 	mul.w	r3, r3, r1
2000837c:	e01f      	b.n	200083be <memset+0x7e>
2000837e:	f842 3c40 	str.w	r3, [r2, #-64]
20008382:	f842 3c3c 	str.w	r3, [r2, #-60]
20008386:	f842 3c38 	str.w	r3, [r2, #-56]
2000838a:	f842 3c34 	str.w	r3, [r2, #-52]
2000838e:	f842 3c30 	str.w	r3, [r2, #-48]
20008392:	f842 3c2c 	str.w	r3, [r2, #-44]
20008396:	f842 3c28 	str.w	r3, [r2, #-40]
2000839a:	f842 3c24 	str.w	r3, [r2, #-36]
2000839e:	f842 3c20 	str.w	r3, [r2, #-32]
200083a2:	f842 3c1c 	str.w	r3, [r2, #-28]
200083a6:	f842 3c18 	str.w	r3, [r2, #-24]
200083aa:	f842 3c14 	str.w	r3, [r2, #-20]
200083ae:	f842 3c10 	str.w	r3, [r2, #-16]
200083b2:	f842 3c0c 	str.w	r3, [r2, #-12]
200083b6:	f842 3c08 	str.w	r3, [r2, #-8]
200083ba:	f842 3c04 	str.w	r3, [r2, #-4]
200083be:	4615      	mov	r5, r2
200083c0:	3240      	adds	r2, #64	; 0x40
200083c2:	2c3f      	cmp	r4, #63	; 0x3f
200083c4:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200083c8:	dcd9      	bgt.n	2000837e <memset+0x3e>
200083ca:	462a      	mov	r2, r5
200083cc:	ebc5 040c 	rsb	r4, r5, ip
200083d0:	e007      	b.n	200083e2 <memset+0xa2>
200083d2:	f842 3c10 	str.w	r3, [r2, #-16]
200083d6:	f842 3c0c 	str.w	r3, [r2, #-12]
200083da:	f842 3c08 	str.w	r3, [r2, #-8]
200083de:	f842 3c04 	str.w	r3, [r2, #-4]
200083e2:	4615      	mov	r5, r2
200083e4:	3210      	adds	r2, #16
200083e6:	2c0f      	cmp	r4, #15
200083e8:	f1a4 0410 	sub.w	r4, r4, #16
200083ec:	dcf1      	bgt.n	200083d2 <memset+0x92>
200083ee:	462a      	mov	r2, r5
200083f0:	ebc5 050c 	rsb	r5, r5, ip
200083f4:	e001      	b.n	200083fa <memset+0xba>
200083f6:	f842 3c04 	str.w	r3, [r2, #-4]
200083fa:	4614      	mov	r4, r2
200083fc:	3204      	adds	r2, #4
200083fe:	2d03      	cmp	r5, #3
20008400:	f1a5 0504 	sub.w	r5, r5, #4
20008404:	dcf7      	bgt.n	200083f6 <memset+0xb6>
20008406:	e001      	b.n	2000840c <memset+0xcc>
20008408:	f804 1b01 	strb.w	r1, [r4], #1
2000840c:	4564      	cmp	r4, ip
2000840e:	d3fb      	bcc.n	20008408 <memset+0xc8>
20008410:	e7a0      	b.n	20008354 <memset+0x14>
20008412:	bf00      	nop

20008414 <C.48.4660>:
20008414:	6a10 0000                                   .j..

20008418 <C.40.4595>:
20008418:	6020 0000 6d63 5f64 6974 656d 0072 0000      `..cmd_timer...
20008428:	4449 454c 0000 0000 2509 0963 7525 2509     IDLE.....%c.%u.%
20008438:	0975 7525 0a0d 0000 2509 0975 2509 2575     u.%u.....%u..%u%
20008448:	0d25 000a 2509 0975 3c09 2531 0d25 000a     %....%u..<1%%...
20008458:	6d54 2072 7653 0063                         Tmr Svc.

20008460 <xHeapStructSize>:
20008460:	0008 0000                                   ....

20008464 <pcInterruptPriorityRegisters>:
20008464:	e3f0 e000 4b48 0000 6150 6c79 616f 0064     ....HK..Payload.
20008474:	6175 7472 695f 7172 0000 0000 4b50 5f54     uart_irq....PKT_
20008484:	6954 656d 0072 0000                         Timer...

2000848c <C.140.6390>:
2000848c:	0020 000f                                    ...

20008490 <C.141.6391>:
20008490:	0030 0001                                   0...

20008494 <C.142.6392>:
20008494:	0028 0001                                   (...

20008498 <C.18.3459>:
20008498:	0100 0100 0202 0303                         ........

200084a0 <_init>:
200084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200084a2:	bf00      	nop
200084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
200084a6:	bc08      	pop	{r3}
200084a8:	469e      	mov	lr, r3
200084aa:	4770      	bx	lr

200084ac <_fini>:
200084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200084ae:	bf00      	nop
200084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
200084b2:	bc08      	pop	{r3}
200084b4:	469e      	mov	lr, r3
200084b6:	4770      	bx	lr

200084b8 <__frame_dummy_init_array_entry>:
200084b8:	0305 2000                                   ... 

200084bc <__do_global_dtors_aux_fini_array_entry>:
200084bc:	02f1 2000                                   ... 
