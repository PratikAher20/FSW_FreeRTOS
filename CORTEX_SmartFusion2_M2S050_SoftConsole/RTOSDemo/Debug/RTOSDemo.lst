
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000070c8  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  200070c8  200070c8  0000f0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006b08  20007128  20007128  0000f128  2**2
                  ALLOC
  3 .stack        00000400  2000dc30  2000dc30  0000f128  2**0
                  ALLOC
  4 .comment      00000408  00000000  00000000  0000f128  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000b68  00000000  00000000  0000f530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001bdb  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d9eb  00000000  00000000  00011c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002166  00000000  00000000  0001f65e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000f043  00000000  00000000  000217c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000262c  00000000  00000000  00030808  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004a2c  00000000  00000000  00032e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003f3d  00000000  00000000  00037860  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000b3025  00000000  00000000  0003b79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  000ee7c2  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000b08  00000000  00000000  000ee7e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	20003da1 	.word	0x20003da1
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	20003fd1 	.word	0x20003fd1
2000003c:	20004021 	.word	0x20004021
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20000213 	.word	0x20000213
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20000219 	.word	0x20000219
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	20005155 	.word	0x20005155
2000006c:	20005179 	.word	0x20005179
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	20004ca5 	.word	0x20004ca5
200000cc:	20004cb9 	.word	0x20004cb9
200000d0:	20004ccd 	.word	0x20004ccd
200000d4:	20004ce1 	.word	0x20004ce1
200000d8:	20004cf5 	.word	0x20004cf5
200000dc:	20004d09 	.word	0x20004d09
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>

20000212 <I2C0_IRQHandler>:
20000212:	e7fe      	b.n	20000212 <I2C0_IRQHandler>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>

20000218 <I2C1_IRQHandler>:
20000218:	e7fe      	b.n	20000218 <I2C1_IRQHandler>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	20006955 	.word	0x20006955
200002b4:	00000000 	.word	0x00000000
200002b8:	20000000 	.word	0x20000000
200002bc:	20000000 	.word	0x20000000
200002c0:	200070c8 	.word	0x200070c8
200002c4:	200070c8 	.word	0x200070c8
200002c8:	200070c8 	.word	0x200070c8
200002cc:	20007128 	.word	0x20007128
200002d0:	00000000 	.word	0x00000000
200002d4:	20007128 	.word	0x20007128
200002d8:	2000dc30 	.word	0x2000dc30
200002dc:	20006d61 	.word	0x20006d61
200002e0:	2000040d 	.word	0x2000040d
	...

200002f0 <__do_global_dtors_aux>:
200002f0:	f247 1328 	movw	r3, #28968	; 0x7128
200002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	b90a      	cbnz	r2, 20000300 <__do_global_dtors_aux+0x10>
200002fc:	2001      	movs	r0, #1
200002fe:	7018      	strb	r0, [r3, #0]
20000300:	4770      	bx	lr
20000302:	bf00      	nop

20000304 <frame_dummy>:
20000304:	f247 00c8 	movw	r0, #28872	; 0x70c8
20000308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000030c:	b508      	push	{r3, lr}
2000030e:	6803      	ldr	r3, [r0, #0]
20000310:	b12b      	cbz	r3, 2000031e <frame_dummy+0x1a>
20000312:	f240 0300 	movw	r3, #0
20000316:	f2c0 0300 	movt	r3, #0
2000031a:	b103      	cbz	r3, 2000031e <frame_dummy+0x1a>
2000031c:	4798      	blx	r3
2000031e:	bd08      	pop	{r3, pc}

20000320 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
20000320:	b480      	push	{r7}
20000322:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
20000324:	f64e 53fc 	movw	r3, #60924	; 0xedfc
20000328:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000032c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
20000330:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000334:	6812      	ldr	r2, [r2, #0]
20000336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2000033a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
2000033c:	f241 0304 	movw	r3, #4100	; 0x1004
20000340:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000344:	f04f 0200 	mov.w	r2, #0
20000348:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
2000034a:	f241 0300 	movw	r3, #4096	; 0x1000
2000034e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000352:	f241 0200 	movw	r2, #4096	; 0x1000
20000356:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000035a:	6812      	ldr	r2, [r2, #0]
2000035c:	f042 0201 	orr.w	r2, r2, #1
20000360:	601a      	str	r2, [r3, #0]
}
20000362:	46bd      	mov	sp, r7
20000364:	bc80      	pop	{r7}
20000366:	4770      	bx	lr

20000368 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
20000368:	b480      	push	{r7}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
2000036e:	f241 0304 	movw	r3, #4100	; 0x1004
20000372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
2000037a:	f247 132c 	movw	r3, #28972	; 0x712c
2000037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	687a      	ldr	r2, [r7, #4]
20000386:	429a      	cmp	r2, r3
20000388:	d20b      	bcs.n	200003a2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
2000038a:	f247 1330 	movw	r3, #28976	; 0x7130
2000038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	f103 0201 	add.w	r2, r3, #1
20000398:	f247 1330 	movw	r3, #28976	; 0x7130
2000039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003a0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
200003a2:	f247 132c 	movw	r3, #28972	; 0x712c
200003a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003aa:	687a      	ldr	r2, [r7, #4]
200003ac:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
200003ae:	f247 130c 	movw	r3, #28940	; 0x710c
200003b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003b6:	681a      	ldr	r2, [r3, #0]
200003b8:	f641 537f 	movw	r3, #7551	; 0x1d7f
200003bc:	f2c0 432c 	movt	r3, #1068	; 0x42c
200003c0:	429a      	cmp	r2, r3
200003c2:	d80e      	bhi.n	200003e2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	ea4f 3353 	mov.w	r3, r3, lsr #13
200003ca:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
200003cc:	f247 1330 	movw	r3, #28976	; 0x7130
200003d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
200003da:	687a      	ldr	r2, [r7, #4]
200003dc:	4413      	add	r3, r2
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e00d      	b.n	200003fe <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	ea4f 3393 	mov.w	r3, r3, lsr #14
200003e8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
200003ea:	f247 1330 	movw	r3, #28976	; 0x7130
200003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	ea4f 4383 	mov.w	r3, r3, lsl #18
200003f8:	687a      	ldr	r2, [r7, #4]
200003fa:	4413      	add	r3, r2
200003fc:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
200003fe:	687b      	ldr	r3, [r7, #4]
}
20000400:	4618      	mov	r0, r3
20000402:	f107 070c 	add.w	r7, r7, #12
20000406:	46bd      	mov	sp, r7
20000408:	bc80      	pop	{r7}
2000040a:	4770      	bx	lr

2000040c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
	#if configCREATE_SIMPLE_BLINKY_DEMO_ONLY == 1
	{
		//main_blinky();


		demo();
20000410:	f004 fb00 	bl	20004a14 <demo>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
20000414:	f04f 0300 	mov.w	r3, #0
}
20000418:	4618      	mov	r0, r3
2000041a:	bd80      	pop	{r7, pc}

2000041c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
2000041c:	b480      	push	{r7}
2000041e:	b083      	sub	sp, #12
20000420:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000426:	f383 8811 	msr	BASEPRI, r3
2000042a:	f3bf 8f6f 	isb	sy
2000042e:	f3bf 8f4f 	dsb	sy
20000432:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000434:	e7fe      	b.n	20000434 <vApplicationMallocFailedHook+0x18>
20000436:	bf00      	nop

20000438 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
20000438:	b480      	push	{r7}
2000043a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
2000043c:	46bd      	mov	sp, r7
2000043e:	bc80      	pop	{r7}
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
20000444:	b480      	push	{r7}
20000446:	b085      	sub	sp, #20
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
2000044c:	6039      	str	r1, [r7, #0]
2000044e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000452:	f383 8811 	msr	BASEPRI, r3
20000456:	f3bf 8f6f 	isb	sy
2000045a:	f3bf 8f4f 	dsb	sy
2000045e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000460:	e7fe      	b.n	20000460 <vApplicationStackOverflowHook+0x1c>
20000462:	bf00      	nop

20000464 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
20000464:	b580      	push	{r7, lr}
20000466:	b092      	sub	sp, #72	; 0x48
20000468:	af04      	add	r7, sp, #16
2000046a:	60f8      	str	r0, [r7, #12]
2000046c:	60b9      	str	r1, [r7, #8]
2000046e:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
20000470:	f247 0318 	movw	r3, #28696	; 0x7018
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	881b      	ldrh	r3, [r3, #0]
2000047a:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
2000047c:	f04f 0328 	mov.w	r3, #40	; 0x28
20000480:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
20000484:	f04f 032a 	mov.w	r3, #42	; 0x2a
20000488:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
2000048c:	f04f 032c 	mov.w	r3, #44	; 0x2c
20000490:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
20000494:	f04f 0329 	mov.w	r3, #41	; 0x29
20000498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
2000049c:	f04f 032b 	mov.w	r3, #43	; 0x2b
200004a0:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
200004a4:	f04f 032d 	mov.w	r3, #45	; 0x2d
200004a8:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
200004aa:	f04f 0300 	mov.w	r3, #0
200004ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
200004b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
200004b6:	f04f 0200 	mov.w	r2, #0
200004ba:	9200      	str	r2, [sp, #0]
200004bc:	f64d 2010 	movw	r0, #55824	; 0xda10
200004c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004c4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200004c8:	461a      	mov	r2, r3
200004ca:	f04f 0302 	mov.w	r3, #2
200004ce:	f005 fa79 	bl	200059c4 <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
200004d2:	f107 0318 	add.w	r3, r7, #24
200004d6:	f04f 0200 	mov.w	r2, #0
200004da:	9200      	str	r2, [sp, #0]
200004dc:	f64d 2010 	movw	r0, #55824	; 0xda10
200004e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004e4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200004e8:	461a      	mov	r2, r3
200004ea:	f04f 0301 	mov.w	r3, #1
200004ee:	f005 fadb 	bl	20005aa8 <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200004f2:	f64d 2010 	movw	r0, #55824	; 0xda10
200004f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004fa:	f04f 0100 	mov.w	r1, #0
200004fe:	f005 fbdd 	bl	20005cbc <I2C_wait_complete>
20000502:	4603      	mov	r3, r0
20000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000508:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000050c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000510:	4413      	add	r3, r2
20000512:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
20000516:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000051a:	f107 0218 	add.w	r2, r7, #24
2000051e:	9200      	str	r2, [sp, #0]
20000520:	f04f 0201 	mov.w	r2, #1
20000524:	9201      	str	r2, [sp, #4]
20000526:	f04f 0200 	mov.w	r2, #0
2000052a:	9202      	str	r2, [sp, #8]
2000052c:	f64d 2010 	movw	r0, #55824	; 0xda10
20000530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000534:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000538:	461a      	mov	r2, r3
2000053a:	f04f 0301 	mov.w	r3, #1
2000053e:	f005 fb25 	bl	20005b8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000542:	f64d 2010 	movw	r0, #55824	; 0xda10
20000546:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054a:	f04f 0100 	mov.w	r1, #0
2000054e:	f005 fbb5 	bl	20005cbc <I2C_wait_complete>
20000552:	4603      	mov	r3, r0
20000554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000558:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000560:	4413      	add	r3, r2
20000562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
20000566:	f107 031c 	add.w	r3, r7, #28
2000056a:	f107 0214 	add.w	r2, r7, #20
2000056e:	9200      	str	r2, [sp, #0]
20000570:	f04f 0201 	mov.w	r2, #1
20000574:	9201      	str	r2, [sp, #4]
20000576:	f04f 0200 	mov.w	r2, #0
2000057a:	9202      	str	r2, [sp, #8]
2000057c:	f64d 2010 	movw	r0, #55824	; 0xda10
20000580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000584:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000588:	461a      	mov	r2, r3
2000058a:	f04f 0301 	mov.w	r3, #1
2000058e:	f005 fafd 	bl	20005b8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000592:	f64d 2010 	movw	r0, #55824	; 0xda10
20000596:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059a:	f04f 0100 	mov.w	r1, #0
2000059e:	f005 fb8d 	bl	20005cbc <I2C_wait_complete>
200005a2:	4603      	mov	r3, r0
200005a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200005b0:	4413      	add	r3, r2
200005b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200005b6:	7d3b      	ldrb	r3, [r7, #20]
200005b8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200005bc:	b29a      	uxth	r2, r3
200005be:	7e3b      	ldrb	r3, [r7, #24]
200005c0:	ea42 0303 	orr.w	r3, r2, r3
200005c4:	b29b      	uxth	r3, r3
200005c6:	b29a      	uxth	r2, r3
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	881b      	ldrh	r3, [r3, #0]
200005d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200005d4:	d906      	bls.n	200005e4 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
200005d6:	687b      	ldr	r3, [r7, #4]
200005d8:	881b      	ldrh	r3, [r3, #0]
200005da:	ea6f 0303 	mvn.w	r3, r3
200005de:	b29a      	uxth	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
200005e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200005e8:	f107 0218 	add.w	r2, r7, #24
200005ec:	9200      	str	r2, [sp, #0]
200005ee:	f04f 0201 	mov.w	r2, #1
200005f2:	9201      	str	r2, [sp, #4]
200005f4:	f04f 0200 	mov.w	r2, #0
200005f8:	9202      	str	r2, [sp, #8]
200005fa:	f64d 2010 	movw	r0, #55824	; 0xda10
200005fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000602:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000606:	461a      	mov	r2, r3
20000608:	f04f 0301 	mov.w	r3, #1
2000060c:	f005 fabe 	bl	20005b8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000610:	f64d 2010 	movw	r0, #55824	; 0xda10
20000614:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000618:	f04f 0100 	mov.w	r1, #0
2000061c:	f005 fb4e 	bl	20005cbc <I2C_wait_complete>
20000620:	4603      	mov	r3, r0
20000622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000626:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000062a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000062e:	4413      	add	r3, r2
20000630:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
20000634:	f107 0320 	add.w	r3, r7, #32
20000638:	f107 0214 	add.w	r2, r7, #20
2000063c:	9200      	str	r2, [sp, #0]
2000063e:	f04f 0201 	mov.w	r2, #1
20000642:	9201      	str	r2, [sp, #4]
20000644:	f04f 0200 	mov.w	r2, #0
20000648:	9202      	str	r2, [sp, #8]
2000064a:	f64d 2010 	movw	r0, #55824	; 0xda10
2000064e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000652:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000656:	461a      	mov	r2, r3
20000658:	f04f 0301 	mov.w	r3, #1
2000065c:	f005 fa96 	bl	20005b8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000660:	f64d 2010 	movw	r0, #55824	; 0xda10
20000664:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000668:	f04f 0100 	mov.w	r1, #0
2000066c:	f005 fb26 	bl	20005cbc <I2C_wait_complete>
20000670:	4603      	mov	r3, r0
20000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000676:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000067a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000067e:	4413      	add	r3, r2
20000680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000684:	7d3b      	ldrb	r3, [r7, #20]
20000686:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000068a:	b29a      	uxth	r2, r3
2000068c:	7e3b      	ldrb	r3, [r7, #24]
2000068e:	ea42 0303 	orr.w	r3, r2, r3
20000692:	b29b      	uxth	r3, r3
20000694:	b29a      	uxth	r2, r3
20000696:	68bb      	ldr	r3, [r7, #8]
20000698:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
2000069a:	68bb      	ldr	r3, [r7, #8]
2000069c:	881b      	ldrh	r3, [r3, #0]
2000069e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200006a2:	d906      	bls.n	200006b2 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
200006a4:	68bb      	ldr	r3, [r7, #8]
200006a6:	881b      	ldrh	r3, [r3, #0]
200006a8:	ea6f 0303 	mvn.w	r3, r3
200006ac:	b29a      	uxth	r2, r3
200006ae:	68bb      	ldr	r3, [r7, #8]
200006b0:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
200006b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
200006b6:	f107 0218 	add.w	r2, r7, #24
200006ba:	9200      	str	r2, [sp, #0]
200006bc:	f04f 0201 	mov.w	r2, #1
200006c0:	9201      	str	r2, [sp, #4]
200006c2:	f04f 0200 	mov.w	r2, #0
200006c6:	9202      	str	r2, [sp, #8]
200006c8:	f64d 2010 	movw	r0, #55824	; 0xda10
200006cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006d0:	f04f 016a 	mov.w	r1, #106	; 0x6a
200006d4:	461a      	mov	r2, r3
200006d6:	f04f 0301 	mov.w	r3, #1
200006da:	f005 fa57 	bl	20005b8c <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200006de:	f64d 2010 	movw	r0, #55824	; 0xda10
200006e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006e6:	f04f 0100 	mov.w	r1, #0
200006ea:	f005 fae7 	bl	20005cbc <I2C_wait_complete>
200006ee:	4603      	mov	r3, r0
200006f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200006f4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200006f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200006fc:	4413      	add	r3, r2
200006fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
20000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000706:	f107 0214 	add.w	r2, r7, #20
2000070a:	9200      	str	r2, [sp, #0]
2000070c:	f04f 0201 	mov.w	r2, #1
20000710:	9201      	str	r2, [sp, #4]
20000712:	f04f 0200 	mov.w	r2, #0
20000716:	9202      	str	r2, [sp, #8]
20000718:	f64d 2010 	movw	r0, #55824	; 0xda10
2000071c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000720:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000724:	461a      	mov	r2, r3
20000726:	f04f 0301 	mov.w	r3, #1
2000072a:	f005 fa2f 	bl	20005b8c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000072e:	f64d 2010 	movw	r0, #55824	; 0xda10
20000732:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000736:	f04f 0100 	mov.w	r1, #0
2000073a:	f005 fabf 	bl	20005cbc <I2C_wait_complete>
2000073e:	4603      	mov	r3, r0
20000740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000744:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000074c:	4413      	add	r3, r2
2000074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000752:	7d3b      	ldrb	r3, [r7, #20]
20000754:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000758:	b29a      	uxth	r2, r3
2000075a:	7e3b      	ldrb	r3, [r7, #24]
2000075c:	ea42 0303 	orr.w	r3, r2, r3
20000760:	b29b      	uxth	r3, r3
20000762:	b29a      	uxth	r2, r3
20000764:	68fb      	ldr	r3, [r7, #12]
20000766:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
20000768:	68fb      	ldr	r3, [r7, #12]
2000076a:	881b      	ldrh	r3, [r3, #0]
2000076c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000770:	d906      	bls.n	20000780 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
20000772:	68fb      	ldr	r3, [r7, #12]
20000774:	881b      	ldrh	r3, [r3, #0]
20000776:	ea6f 0303 	mvn.w	r3, r3
2000077a:	b29a      	uxth	r2, r3
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	801a      	strh	r2, [r3, #0]
	}

	return status;
20000780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
20000784:	4618      	mov	r0, r3
20000786:	f107 0738 	add.w	r7, r7, #56	; 0x38
2000078a:	46bd      	mov	sp, r7
2000078c:	bd80      	pop	{r7, pc}
2000078e:	bf00      	nop

20000790 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
20000790:	b580      	push	{r7, lr}
20000792:	b092      	sub	sp, #72	; 0x48
20000794:	af04      	add	r7, sp, #16
20000796:	60f8      	str	r0, [r7, #12]
20000798:	60b9      	str	r1, [r7, #8]
2000079a:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
2000079c:	f247 0314 	movw	r3, #28692	; 0x7014
200007a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007a4:	881b      	ldrh	r3, [r3, #0]
200007a6:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
200007a8:	f04f 0318 	mov.w	r3, #24
200007ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
200007b0:	f04f 031a 	mov.w	r3, #26
200007b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
200007b8:	f04f 031c 	mov.w	r3, #28
200007bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
200007c0:	f04f 0319 	mov.w	r3, #25
200007c4:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
200007c8:	f04f 031b 	mov.w	r3, #27
200007cc:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
200007ce:	f04f 031d 	mov.w	r3, #29
200007d2:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
200007d4:	f04f 036a 	mov.w	r3, #106	; 0x6a
200007d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
200007dc:	f04f 0300 	mov.w	r3, #0
200007e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
200007e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
200007ec:	f107 0114 	add.w	r1, r7, #20
200007f0:	9100      	str	r1, [sp, #0]
200007f2:	f04f 0101 	mov.w	r1, #1
200007f6:	9101      	str	r1, [sp, #4]
200007f8:	f04f 0100 	mov.w	r1, #0
200007fc:	9102      	str	r1, [sp, #8]
200007fe:	f64d 2010 	movw	r0, #55824	; 0xda10
20000802:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000806:	4611      	mov	r1, r2
20000808:	461a      	mov	r2, r3
2000080a:	f04f 0302 	mov.w	r3, #2
2000080e:	f005 f9bd 	bl	20005b8c <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000812:	f64d 2010 	movw	r0, #55824	; 0xda10
20000816:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000081a:	f04f 0100 	mov.w	r1, #0
2000081e:	f005 fa4d 	bl	20005cbc <I2C_wait_complete>
20000822:	4603      	mov	r3, r0
20000824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000828:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000082c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000830:	4413      	add	r3, r2
20000832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
20000836:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000083e:	f107 0114 	add.w	r1, r7, #20
20000842:	9100      	str	r1, [sp, #0]
20000844:	f04f 0101 	mov.w	r1, #1
20000848:	9101      	str	r1, [sp, #4]
2000084a:	f04f 0100 	mov.w	r1, #0
2000084e:	9102      	str	r1, [sp, #8]
20000850:	f64d 2010 	movw	r0, #55824	; 0xda10
20000854:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000858:	4611      	mov	r1, r2
2000085a:	461a      	mov	r2, r3
2000085c:	f04f 0301 	mov.w	r3, #1
20000860:	f005 f994 	bl	20005b8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000864:	f64d 2010 	movw	r0, #55824	; 0xda10
20000868:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086c:	f04f 0100 	mov.w	r1, #0
20000870:	f005 fa24 	bl	20005cbc <I2C_wait_complete>
20000874:	4603      	mov	r3, r0
20000876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
2000087a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000087e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000882:	4413      	add	r3, r2
20000884:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
20000888:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000088c:	f107 0318 	add.w	r3, r7, #24
20000890:	f107 0110 	add.w	r1, r7, #16
20000894:	9100      	str	r1, [sp, #0]
20000896:	f04f 0101 	mov.w	r1, #1
2000089a:	9101      	str	r1, [sp, #4]
2000089c:	f04f 0100 	mov.w	r1, #0
200008a0:	9102      	str	r1, [sp, #8]
200008a2:	f64d 2010 	movw	r0, #55824	; 0xda10
200008a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008aa:	4611      	mov	r1, r2
200008ac:	461a      	mov	r2, r3
200008ae:	f04f 0301 	mov.w	r3, #1
200008b2:	f005 f96b 	bl	20005b8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200008b6:	f64d 2010 	movw	r0, #55824	; 0xda10
200008ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008be:	f04f 0100 	mov.w	r1, #0
200008c2:	f005 f9fb 	bl	20005cbc <I2C_wait_complete>
200008c6:	4603      	mov	r3, r0
200008c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200008cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200008d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200008d4:	4413      	add	r3, r2
200008d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200008da:	7c3b      	ldrb	r3, [r7, #16]
200008dc:	ea4f 2303 	mov.w	r3, r3, lsl #8
200008e0:	b29a      	uxth	r2, r3
200008e2:	7d3b      	ldrb	r3, [r7, #20]
200008e4:	ea42 0303 	orr.w	r3, r2, r3
200008e8:	b29b      	uxth	r3, r3
200008ea:	b29a      	uxth	r2, r3
200008ec:	68fb      	ldr	r3, [r7, #12]
200008ee:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
200008f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200008f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
200008f8:	f107 0114 	add.w	r1, r7, #20
200008fc:	9100      	str	r1, [sp, #0]
200008fe:	f04f 0101 	mov.w	r1, #1
20000902:	9101      	str	r1, [sp, #4]
20000904:	f04f 0100 	mov.w	r1, #0
20000908:	9102      	str	r1, [sp, #8]
2000090a:	f64d 2010 	movw	r0, #55824	; 0xda10
2000090e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000912:	4611      	mov	r1, r2
20000914:	461a      	mov	r2, r3
20000916:	f04f 0301 	mov.w	r3, #1
2000091a:	f005 f937 	bl	20005b8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000091e:	f64d 2010 	movw	r0, #55824	; 0xda10
20000922:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000926:	f04f 0100 	mov.w	r1, #0
2000092a:	f005 f9c7 	bl	20005cbc <I2C_wait_complete>
2000092e:	4603      	mov	r3, r0
20000930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000934:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000093c:	4413      	add	r3, r2
2000093e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
20000942:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000946:	f107 031c 	add.w	r3, r7, #28
2000094a:	f107 0110 	add.w	r1, r7, #16
2000094e:	9100      	str	r1, [sp, #0]
20000950:	f04f 0101 	mov.w	r1, #1
20000954:	9101      	str	r1, [sp, #4]
20000956:	f04f 0100 	mov.w	r1, #0
2000095a:	9102      	str	r1, [sp, #8]
2000095c:	f64d 2010 	movw	r0, #55824	; 0xda10
20000960:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000964:	4611      	mov	r1, r2
20000966:	461a      	mov	r2, r3
20000968:	f04f 0301 	mov.w	r3, #1
2000096c:	f005 f90e 	bl	20005b8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000970:	f64d 2010 	movw	r0, #55824	; 0xda10
20000974:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000978:	f04f 0100 	mov.w	r1, #0
2000097c:	f005 f99e 	bl	20005cbc <I2C_wait_complete>
20000980:	4603      	mov	r3, r0
20000982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000986:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000098a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000098e:	4413      	add	r3, r2
20000990:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000994:	7c3b      	ldrb	r3, [r7, #16]
20000996:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000099a:	b29a      	uxth	r2, r3
2000099c:	7d3b      	ldrb	r3, [r7, #20]
2000099e:	ea42 0303 	orr.w	r3, r2, r3
200009a2:	b29b      	uxth	r3, r3
200009a4:	b29a      	uxth	r2, r3
200009a6:	68bb      	ldr	r3, [r7, #8]
200009a8:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
200009aa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200009b2:	f107 0114 	add.w	r1, r7, #20
200009b6:	9100      	str	r1, [sp, #0]
200009b8:	f04f 0101 	mov.w	r1, #1
200009bc:	9101      	str	r1, [sp, #4]
200009be:	f04f 0100 	mov.w	r1, #0
200009c2:	9102      	str	r1, [sp, #8]
200009c4:	f64d 2010 	movw	r0, #55824	; 0xda10
200009c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009cc:	4611      	mov	r1, r2
200009ce:	461a      	mov	r2, r3
200009d0:	f04f 0301 	mov.w	r3, #1
200009d4:	f005 f8da 	bl	20005b8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200009d8:	f64d 2010 	movw	r0, #55824	; 0xda10
200009dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009e0:	f04f 0100 	mov.w	r1, #0
200009e4:	f005 f96a 	bl	20005cbc <I2C_wait_complete>
200009e8:	4603      	mov	r3, r0
200009ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200009ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200009f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200009f6:	4413      	add	r3, r2
200009f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
200009fc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a00:	f107 0320 	add.w	r3, r7, #32
20000a04:	f107 0110 	add.w	r1, r7, #16
20000a08:	9100      	str	r1, [sp, #0]
20000a0a:	f04f 0101 	mov.w	r1, #1
20000a0e:	9101      	str	r1, [sp, #4]
20000a10:	f04f 0100 	mov.w	r1, #0
20000a14:	9102      	str	r1, [sp, #8]
20000a16:	f64d 2010 	movw	r0, #55824	; 0xda10
20000a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a1e:	4611      	mov	r1, r2
20000a20:	461a      	mov	r2, r3
20000a22:	f04f 0301 	mov.w	r3, #1
20000a26:	f005 f8b1 	bl	20005b8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a2a:	f64d 2010 	movw	r0, #55824	; 0xda10
20000a2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a32:	f04f 0100 	mov.w	r1, #0
20000a36:	f005 f941 	bl	20005cbc <I2C_wait_complete>
20000a3a:	4603      	mov	r3, r0
20000a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a40:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a48:	4413      	add	r3, r2
20000a4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000a4e:	7c3b      	ldrb	r3, [r7, #16]
20000a50:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000a54:	b29a      	uxth	r2, r3
20000a56:	7d3b      	ldrb	r3, [r7, #20]
20000a58:	ea42 0303 	orr.w	r3, r2, r3
20000a5c:	b29b      	uxth	r3, r3
20000a5e:	b29a      	uxth	r2, r3
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	801a      	strh	r2, [r3, #0]

		return status;
20000a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
20000a68:	4618      	mov	r0, r3
20000a6a:	f107 0738 	add.w	r7, r7, #56	; 0x38
20000a6e:	46bd      	mov	sp, r7
20000a70:	bd80      	pop	{r7, pc}
20000a72:	bf00      	nop

20000a74 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
20000a74:	b580      	push	{r7, lr}
20000a76:	b08a      	sub	sp, #40	; 0x28
20000a78:	af04      	add	r7, sp, #16
20000a7a:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
20000a7c:	f04f 0315 	mov.w	r3, #21
20000a80:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
20000a82:	f04f 0316 	mov.w	r3, #22
20000a86:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
20000a88:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000a8c:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
20000a8e:	7dba      	ldrb	r2, [r7, #22]
20000a90:	f107 0314 	add.w	r3, r7, #20
20000a94:	f107 010c 	add.w	r1, r7, #12
20000a98:	9100      	str	r1, [sp, #0]
20000a9a:	f04f 0101 	mov.w	r1, #1
20000a9e:	9101      	str	r1, [sp, #4]
20000aa0:	f04f 0100 	mov.w	r1, #0
20000aa4:	9102      	str	r1, [sp, #8]
20000aa6:	f64d 2010 	movw	r0, #55824	; 0xda10
20000aaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aae:	4611      	mov	r1, r2
20000ab0:	461a      	mov	r2, r3
20000ab2:	f04f 0301 	mov.w	r3, #1
20000ab6:	f005 f869 	bl	20005b8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000aba:	f64d 2010 	movw	r0, #55824	; 0xda10
20000abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ac2:	f04f 0100 	mov.w	r1, #0
20000ac6:	f005 f8f9 	bl	20005cbc <I2C_wait_complete>
20000aca:	4603      	mov	r3, r0
20000acc:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
20000ace:	7dba      	ldrb	r2, [r7, #22]
20000ad0:	f107 0310 	add.w	r3, r7, #16
20000ad4:	f107 0108 	add.w	r1, r7, #8
20000ad8:	9100      	str	r1, [sp, #0]
20000ada:	f04f 0101 	mov.w	r1, #1
20000ade:	9101      	str	r1, [sp, #4]
20000ae0:	f04f 0100 	mov.w	r1, #0
20000ae4:	9102      	str	r1, [sp, #8]
20000ae6:	f64d 2010 	movw	r0, #55824	; 0xda10
20000aea:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aee:	4611      	mov	r1, r2
20000af0:	461a      	mov	r2, r3
20000af2:	f04f 0301 	mov.w	r3, #1
20000af6:	f005 f849 	bl	20005b8c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000afa:	f64d 2010 	movw	r0, #55824	; 0xda10
20000afe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b02:	f04f 0100 	mov.w	r1, #0
20000b06:	f005 f8d9 	bl	20005cbc <I2C_wait_complete>
20000b0a:	4603      	mov	r3, r0
20000b0c:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
20000b0e:	7b3b      	ldrb	r3, [r7, #12]
20000b10:	461a      	mov	r2, r3
20000b12:	7a3b      	ldrb	r3, [r7, #8]
20000b14:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b18:	b29b      	uxth	r3, r3
20000b1a:	ea42 0303 	orr.w	r3, r2, r3
20000b1e:	b29b      	uxth	r3, r3
20000b20:	b29a      	uxth	r2, r3
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	801a      	strh	r2, [r3, #0]

		return 0;
20000b26:	f04f 0300 	mov.w	r3, #0

}
20000b2a:	4618      	mov	r0, r3
20000b2c:	f107 0718 	add.w	r7, r7, #24
20000b30:	46bd      	mov	sp, r7
20000b32:	bd80      	pop	{r7, pc}

20000b34 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
20000b34:	b580      	push	{r7, lr}
20000b36:	b086      	sub	sp, #24
20000b38:	af02      	add	r7, sp, #8
20000b3a:	60b9      	str	r1, [r7, #8]
20000b3c:	4613      	mov	r3, r2
20000b3e:	4602      	mov	r2, r0
20000b40:	73fa      	strb	r2, [r7, #15]
20000b42:	71fb      	strb	r3, [r7, #7]
     count = 0;
20000b44:	f64d 1334 	movw	r3, #55604	; 0xd934
20000b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b4c:	f04f 0200 	mov.w	r2, #0
20000b50:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000b52:	e032      	b.n	20000bba <vc_write+0x86>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
20000b54:	79fb      	ldrb	r3, [r7, #7]
20000b56:	7bfa      	ldrb	r2, [r7, #15]
20000b58:	f04f 0100 	mov.w	r1, #0
20000b5c:	9100      	str	r1, [sp, #0]
20000b5e:	f24d 407c 	movw	r0, #54396	; 0xd47c
20000b62:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b66:	4611      	mov	r1, r2
20000b68:	68ba      	ldr	r2, [r7, #8]
20000b6a:	f004 ff2b 	bl	200059c4 <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000b6e:	f24d 407c 	movw	r0, #54396	; 0xd47c
20000b72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b76:	f04f 0100 	mov.w	r1, #0
20000b7a:	f005 f89f 	bl	20005cbc <I2C_wait_complete>
20000b7e:	4603      	mov	r3, r0
20000b80:	461a      	mov	r2, r3
20000b82:	f64d 1336 	movw	r3, #55606	; 0xd936
20000b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b8a:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000b8c:	f64d 1336 	movw	r3, #55606	; 0xd936
20000b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b94:	781b      	ldrb	r3, [r3, #0]
20000b96:	2b00      	cmp	r3, #0
20000b98:	d102      	bne.n	20000ba0 <vc_write+0x6c>
            return 0;
20000b9a:	f04f 0300 	mov.w	r3, #0
20000b9e:	e018      	b.n	20000bd2 <vc_write+0x9e>
        }
        count++;
20000ba0:	f64d 1334 	movw	r3, #55604	; 0xd934
20000ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	f103 0301 	add.w	r3, r3, #1
20000bae:	b2da      	uxtb	r2, r3
20000bb0:	f64d 1334 	movw	r3, #55604	; 0xd934
20000bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bb8:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
20000bba:	f64d 1334 	movw	r3, #55604	; 0xd934
20000bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bc2:	781b      	ldrb	r3, [r3, #0]
20000bc4:	2b09      	cmp	r3, #9
20000bc6:	d9c5      	bls.n	20000b54 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000bc8:	f64d 1334 	movw	r3, #55604	; 0xd934
20000bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bd0:	781b      	ldrb	r3, [r3, #0]

}
20000bd2:	4618      	mov	r0, r3
20000bd4:	f107 0710 	add.w	r7, r7, #16
20000bd8:	46bd      	mov	sp, r7
20000bda:	bd80      	pop	{r7, pc}

20000bdc <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
20000bdc:	b580      	push	{r7, lr}
20000bde:	b086      	sub	sp, #24
20000be0:	af02      	add	r7, sp, #8
20000be2:	60b9      	str	r1, [r7, #8]
20000be4:	4613      	mov	r3, r2
20000be6:	4602      	mov	r2, r0
20000be8:	73fa      	strb	r2, [r7, #15]
20000bea:	71fb      	strb	r3, [r7, #7]
    count = 0;
20000bec:	f64d 1334 	movw	r3, #55604	; 0xd934
20000bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bf4:	f04f 0200 	mov.w	r2, #0
20000bf8:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000bfa:	e032      	b.n	20000c62 <vc_read+0x86>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
20000bfc:	79fb      	ldrb	r3, [r7, #7]
20000bfe:	7bfa      	ldrb	r2, [r7, #15]
20000c00:	f04f 0100 	mov.w	r1, #0
20000c04:	9100      	str	r1, [sp, #0]
20000c06:	f24d 407c 	movw	r0, #54396	; 0xd47c
20000c0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c0e:	4611      	mov	r1, r2
20000c10:	68ba      	ldr	r2, [r7, #8]
20000c12:	f004 ff49 	bl	20005aa8 <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000c16:	f24d 407c 	movw	r0, #54396	; 0xd47c
20000c1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c1e:	f04f 0100 	mov.w	r1, #0
20000c22:	f005 f84b 	bl	20005cbc <I2C_wait_complete>
20000c26:	4603      	mov	r3, r0
20000c28:	461a      	mov	r2, r3
20000c2a:	f64d 1336 	movw	r3, #55606	; 0xd936
20000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c32:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000c34:	f64d 1336 	movw	r3, #55606	; 0xd936
20000c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c3c:	781b      	ldrb	r3, [r3, #0]
20000c3e:	2b00      	cmp	r3, #0
20000c40:	d102      	bne.n	20000c48 <vc_read+0x6c>
            return 0;
20000c42:	f04f 0300 	mov.w	r3, #0
20000c46:	e018      	b.n	20000c7a <vc_read+0x9e>
        }
        count++;
20000c48:	f64d 1334 	movw	r3, #55604	; 0xd934
20000c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c50:	781b      	ldrb	r3, [r3, #0]
20000c52:	f103 0301 	add.w	r3, r3, #1
20000c56:	b2da      	uxtb	r2, r3
20000c58:	f64d 1334 	movw	r3, #55604	; 0xd934
20000c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c60:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
20000c62:	f64d 1334 	movw	r3, #55604	; 0xd934
20000c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c6a:	781b      	ldrb	r3, [r3, #0]
20000c6c:	2b09      	cmp	r3, #9
20000c6e:	d9c5      	bls.n	20000bfc <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000c70:	f64d 1334 	movw	r3, #55604	; 0xd934
20000c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c78:	781b      	ldrb	r3, [r3, #0]

}
20000c7a:	4618      	mov	r0, r3
20000c7c:	f107 0710 	add.w	r7, r7, #16
20000c80:	46bd      	mov	sp, r7
20000c82:	bd80      	pop	{r7, pc}

20000c84 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
20000c84:	b580      	push	{r7, lr}
20000c86:	b082      	sub	sp, #8
20000c88:	af00      	add	r7, sp, #0
20000c8a:	460b      	mov	r3, r1
20000c8c:	603a      	str	r2, [r7, #0]
20000c8e:	4602      	mov	r2, r0
20000c90:	71fa      	strb	r2, [r7, #7]
20000c92:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
20000c94:	79fa      	ldrb	r2, [r7, #7]
20000c96:	f107 0306 	add.w	r3, r7, #6
20000c9a:	4610      	mov	r0, r2
20000c9c:	4619      	mov	r1, r3
20000c9e:	f04f 0201 	mov.w	r2, #1
20000ca2:	f7ff ff47 	bl	20000b34 <vc_write>
20000ca6:	4603      	mov	r3, r0
20000ca8:	2b09      	cmp	r3, #9
20000caa:	d902      	bls.n	20000cb2 <vc_read_reg+0x2e>
        return 1;
20000cac:	f04f 0301 	mov.w	r3, #1
20000cb0:	e00e      	b.n	20000cd0 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
20000cb2:	79fb      	ldrb	r3, [r7, #7]
20000cb4:	4618      	mov	r0, r3
20000cb6:	6839      	ldr	r1, [r7, #0]
20000cb8:	f04f 0202 	mov.w	r2, #2
20000cbc:	f7ff ff8e 	bl	20000bdc <vc_read>
20000cc0:	4603      	mov	r3, r0
20000cc2:	2b09      	cmp	r3, #9
20000cc4:	d902      	bls.n	20000ccc <vc_read_reg+0x48>
        return 1;
20000cc6:	f04f 0301 	mov.w	r3, #1
20000cca:	e001      	b.n	20000cd0 <vc_read_reg+0x4c>
    }

    return 0;
20000ccc:	f04f 0300 	mov.w	r3, #0
}
20000cd0:	4618      	mov	r0, r3
20000cd2:	f107 0708 	add.w	r7, r7, #8
20000cd6:	46bd      	mov	sp, r7
20000cd8:	bd80      	pop	{r7, pc}
20000cda:	bf00      	nop

20000cdc <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000cdc:	b580      	push	{r7, lr}
20000cde:	b082      	sub	sp, #8
20000ce0:	af00      	add	r7, sp, #0
20000ce2:	460b      	mov	r3, r1
20000ce4:	603a      	str	r2, [r7, #0]
20000ce6:	4602      	mov	r2, r0
20000ce8:	71fa      	strb	r2, [r7, #7]
20000cea:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000cec:	f64d 1330 	movw	r3, #55600	; 0xd930
20000cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cf4:	f04f 0200 	mov.w	r2, #0
20000cf8:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000cfa:	f64d 1330 	movw	r3, #55600	; 0xd930
20000cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d02:	f04f 0200 	mov.w	r2, #0
20000d06:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000d08:	f64d 1332 	movw	r3, #55602	; 0xd932
20000d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d10:	f04f 0200 	mov.w	r2, #0
20000d14:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
20000d16:	79bb      	ldrb	r3, [r7, #6]
20000d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d1c:	b2db      	uxtb	r3, r3
20000d1e:	79fa      	ldrb	r2, [r7, #7]
20000d20:	4610      	mov	r0, r2
20000d22:	4619      	mov	r1, r3
20000d24:	f64d 1230 	movw	r2, #55600	; 0xd930
20000d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000d2c:	f7ff ffaa 	bl	20000c84 <vc_read_reg>
20000d30:	4603      	mov	r3, r0
20000d32:	2b00      	cmp	r3, #0
20000d34:	d11a      	bne.n	20000d6c <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
20000d36:	f64d 1330 	movw	r3, #55600	; 0xd930
20000d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d3e:	781b      	ldrb	r3, [r3, #0]
20000d40:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000d44:	b29a      	uxth	r2, r3
20000d46:	f64d 1330 	movw	r3, #55600	; 0xd930
20000d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d4e:	785b      	ldrb	r3, [r3, #1]
20000d50:	ea42 0303 	orr.w	r3, r2, r3
20000d54:	b29b      	uxth	r3, r3
20000d56:	b29a      	uxth	r2, r3
20000d58:	f64d 1332 	movw	r3, #55602	; 0xd932
20000d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d60:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000d62:	683b      	ldr	r3, [r7, #0]
20000d64:	f04f 0200 	mov.w	r2, #0
20000d68:	701a      	strb	r2, [r3, #0]
20000d6a:	e00a      	b.n	20000d82 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
20000d6c:	683b      	ldr	r3, [r7, #0]
20000d6e:	f04f 0201 	mov.w	r2, #1
20000d72:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000d74:	f64d 1332 	movw	r3, #55602	; 0xd932
20000d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d7c:	f04f 0200 	mov.w	r2, #0
20000d80:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000d82:	f64d 1332 	movw	r3, #55602	; 0xd932
20000d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d8a:	881b      	ldrh	r3, [r3, #0]
}
20000d8c:	4618      	mov	r0, r3
20000d8e:	f107 0708 	add.w	r7, r7, #8
20000d92:	46bd      	mov	sp, r7
20000d94:	bd80      	pop	{r7, pc}
20000d96:	bf00      	nop

20000d98 <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000d98:	b580      	push	{r7, lr}
20000d9a:	b082      	sub	sp, #8
20000d9c:	af00      	add	r7, sp, #0
20000d9e:	460b      	mov	r3, r1
20000da0:	603a      	str	r2, [r7, #0]
20000da2:	4602      	mov	r2, r0
20000da4:	71fa      	strb	r2, [r7, #7]
20000da6:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000da8:	f64d 1330 	movw	r3, #55600	; 0xd930
20000dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db0:	f04f 0200 	mov.w	r2, #0
20000db4:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000db6:	f64d 1330 	movw	r3, #55600	; 0xd930
20000dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dbe:	f04f 0200 	mov.w	r2, #0
20000dc2:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000dc4:	f64d 1332 	movw	r3, #55602	; 0xd932
20000dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dcc:	f04f 0200 	mov.w	r2, #0
20000dd0:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
20000dd2:	79bb      	ldrb	r3, [r7, #6]
20000dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000dd8:	b2db      	uxtb	r3, r3
20000dda:	f103 33ff 	add.w	r3, r3, #4294967295
20000dde:	b2db      	uxtb	r3, r3
20000de0:	79fa      	ldrb	r2, [r7, #7]
20000de2:	4610      	mov	r0, r2
20000de4:	4619      	mov	r1, r3
20000de6:	f64d 1230 	movw	r2, #55600	; 0xd930
20000dea:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000dee:	f7ff ff49 	bl	20000c84 <vc_read_reg>
20000df2:	4603      	mov	r3, r0
20000df4:	2b00      	cmp	r3, #0
20000df6:	d11a      	bne.n	20000e2e <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
20000df8:	f64d 1330 	movw	r3, #55600	; 0xd930
20000dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e00:	781b      	ldrb	r3, [r3, #0]
20000e02:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e06:	b29a      	uxth	r2, r3
20000e08:	f64d 1330 	movw	r3, #55600	; 0xd930
20000e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e10:	785b      	ldrb	r3, [r3, #1]
20000e12:	ea42 0303 	orr.w	r3, r2, r3
20000e16:	b29b      	uxth	r3, r3
20000e18:	b29a      	uxth	r2, r3
20000e1a:	f64d 1332 	movw	r3, #55602	; 0xd932
20000e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e22:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000e24:	683b      	ldr	r3, [r7, #0]
20000e26:	f04f 0200 	mov.w	r2, #0
20000e2a:	701a      	strb	r2, [r3, #0]
20000e2c:	e00a      	b.n	20000e44 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
20000e2e:	683b      	ldr	r3, [r7, #0]
20000e30:	f04f 0201 	mov.w	r2, #1
20000e34:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000e36:	f64d 1332 	movw	r3, #55602	; 0xd932
20000e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e3e:	f04f 0200 	mov.w	r2, #0
20000e42:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000e44:	f64d 1332 	movw	r3, #55602	; 0xd932
20000e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e4c:	881b      	ldrh	r3, [r3, #0]
}
20000e4e:	4618      	mov	r0, r3
20000e50:	f107 0708 	add.w	r7, r7, #8
20000e54:	46bd      	mov	sp, r7
20000e56:	bd80      	pop	{r7, pc}

20000e58 <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
20000e58:	b580      	push	{r7, lr}
20000e5a:	b08c      	sub	sp, #48	; 0x30
20000e5c:	af04      	add	r7, sp, #16
20000e5e:	60f8      	str	r0, [r7, #12]
20000e60:	607b      	str	r3, [r7, #4]
20000e62:	460b      	mov	r3, r1
20000e64:	72fb      	strb	r3, [r7, #11]
20000e66:	4613      	mov	r3, r2
20000e68:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
20000e6a:	7abb      	ldrb	r3, [r7, #10]
20000e6c:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
20000e6e:	7d3b      	ldrb	r3, [r7, #20]
20000e70:	f043 0308 	orr.w	r3, r3, #8
20000e74:	b2db      	uxtb	r3, r3
20000e76:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
20000e78:	7d3b      	ldrb	r3, [r7, #20]
20000e7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000e7e:	b2db      	uxtb	r3, r3
20000e80:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
20000e82:	7afa      	ldrb	r2, [r7, #11]
20000e84:	f107 0314 	add.w	r3, r7, #20
20000e88:	f107 0118 	add.w	r1, r7, #24
20000e8c:	9100      	str	r1, [sp, #0]
20000e8e:	f04f 0102 	mov.w	r1, #2
20000e92:	9101      	str	r1, [sp, #4]
20000e94:	f04f 0100 	mov.w	r1, #0
20000e98:	9102      	str	r1, [sp, #8]
20000e9a:	68f8      	ldr	r0, [r7, #12]
20000e9c:	4611      	mov	r1, r2
20000e9e:	461a      	mov	r2, r3
20000ea0:	f04f 0301 	mov.w	r3, #1
20000ea4:	f004 fe72 	bl	20005b8c <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
20000ea8:	68f8      	ldr	r0, [r7, #12]
20000eaa:	f04f 0100 	mov.w	r1, #0
20000eae:	f004 ff05 	bl	20005cbc <I2C_wait_complete>
20000eb2:	4603      	mov	r3, r0
20000eb4:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
20000eb6:	7f7b      	ldrb	r3, [r7, #29]
20000eb8:	2b00      	cmp	r3, #0
20000eba:	d004      	beq.n	20000ec6 <get_ADC_value+0x6e>
		*flag = 1;
20000ebc:	687b      	ldr	r3, [r7, #4]
20000ebe:	f04f 0201 	mov.w	r2, #1
20000ec2:	701a      	strb	r2, [r3, #0]
20000ec4:	e012      	b.n	20000eec <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
20000ec6:	7e3b      	ldrb	r3, [r7, #24]
20000ec8:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000ecc:	b29a      	uxth	r2, r3
20000ece:	7e7b      	ldrb	r3, [r7, #25]
20000ed0:	ea42 0303 	orr.w	r3, r2, r3
20000ed4:	b29b      	uxth	r3, r3
20000ed6:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
20000ed8:	8bfb      	ldrh	r3, [r7, #30]
20000eda:	ea4f 5303 	mov.w	r3, r3, lsl #20
20000ede:	ea4f 5313 	mov.w	r3, r3, lsr #20
20000ee2:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
20000ee4:	687b      	ldr	r3, [r7, #4]
20000ee6:	f04f 0200 	mov.w	r2, #0
20000eea:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
20000eec:	8bfb      	ldrh	r3, [r7, #30]
}
20000eee:	4618      	mov	r0, r3
20000ef0:	f107 0720 	add.w	r7, r7, #32
20000ef4:	46bd      	mov	sp, r7
20000ef6:	bd80      	pop	{r7, pc}

20000ef8 <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
20000ef8:	b580      	push	{r7, lr}
20000efa:	b084      	sub	sp, #16
20000efc:	af00      	add	r7, sp, #0
20000efe:	4603      	mov	r3, r0
20000f00:	6039      	str	r1, [r7, #0]
20000f02:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
20000f04:	79fb      	ldrb	r3, [r7, #7]
20000f06:	2b00      	cmp	r3, #0
20000f08:	d10e      	bne.n	20000f28 <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
20000f0a:	683b      	ldr	r3, [r7, #0]
20000f0c:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
20000f0e:	68bb      	ldr	r3, [r7, #8]
20000f10:	6859      	ldr	r1, [r3, #4]
20000f12:	68bb      	ldr	r3, [r7, #8]
20000f14:	689a      	ldr	r2, [r3, #8]
20000f16:	68bb      	ldr	r3, [r7, #8]
20000f18:	7b1b      	ldrb	r3, [r3, #12]
20000f1a:	4608      	mov	r0, r1
20000f1c:	4611      	mov	r1, r2
20000f1e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f22:	f004 fcd9 	bl	200058d8 <I2C_init>
20000f26:	e030      	b.n	20000f8a <init+0x92>
	}
	else if(d == vc_sensor){
20000f28:	79fb      	ldrb	r3, [r7, #7]
20000f2a:	2b0a      	cmp	r3, #10
20000f2c:	d10e      	bne.n	20000f4c <init+0x54>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
20000f2e:	683b      	ldr	r3, [r7, #0]
20000f30:	60fb      	str	r3, [r7, #12]
		I2C_init(vc_pkt->g_core_i2c2, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
20000f32:	68fb      	ldr	r3, [r7, #12]
20000f34:	6859      	ldr	r1, [r3, #4]
20000f36:	68fb      	ldr	r3, [r7, #12]
20000f38:	689a      	ldr	r2, [r3, #8]
20000f3a:	68fb      	ldr	r3, [r7, #12]
20000f3c:	7b1b      	ldrb	r3, [r3, #12]
20000f3e:	4608      	mov	r0, r1
20000f40:	4611      	mov	r1, r2
20000f42:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f46:	f004 fcc7 	bl	200058d8 <I2C_init>
20000f4a:	e01e      	b.n	20000f8a <init+0x92>
	}
	else if(d == all){
20000f4c:	79fb      	ldrb	r3, [r7, #7]
20000f4e:	2b0b      	cmp	r3, #11
20000f50:	d11b      	bne.n	20000f8a <init+0x92>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f52:	f64d 2010 	movw	r0, #55824	; 0xda10
20000f56:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f5a:	f245 0100 	movw	r1, #20480	; 0x5000
20000f5e:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000f62:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f66:	f04f 0300 	mov.w	r3, #0
20000f6a:	f004 fcb5 	bl	200058d8 <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f6e:	f24d 407c 	movw	r0, #54396	; 0xd47c
20000f72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f76:	f242 0100 	movw	r1, #8192	; 0x2000
20000f7a:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000f7e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f82:	f04f 0300 	mov.w	r3, #0
20000f86:	f004 fca7 	bl	200058d8 <I2C_init>
	}
	else{

	}

}
20000f8a:	f107 0710 	add.w	r7, r7, #16
20000f8e:	46bd      	mov	sp, r7
20000f90:	bd80      	pop	{r7, pc}
20000f92:	bf00      	nop

20000f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20000f94:	b480      	push	{r7}
20000f96:	b083      	sub	sp, #12
20000f98:	af00      	add	r7, sp, #0
20000f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	f103 0308 	add.w	r3, r3, #8
20000fa2:	461a      	mov	r2, r3
20000fa4:	687b      	ldr	r3, [r7, #4]
20000fa6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20000fa8:	687b      	ldr	r3, [r7, #4]
20000faa:	f04f 32ff 	mov.w	r2, #4294967295
20000fae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fb0:	687b      	ldr	r3, [r7, #4]
20000fb2:	f103 0308 	add.w	r3, r3, #8
20000fb6:	461a      	mov	r2, r3
20000fb8:	687b      	ldr	r3, [r7, #4]
20000fba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	f103 0308 	add.w	r3, r3, #8
20000fc2:	461a      	mov	r2, r3
20000fc4:	687b      	ldr	r3, [r7, #4]
20000fc6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20000fc8:	687b      	ldr	r3, [r7, #4]
20000fca:	f04f 0200 	mov.w	r2, #0
20000fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20000fd0:	f107 070c 	add.w	r7, r7, #12
20000fd4:	46bd      	mov	sp, r7
20000fd6:	bc80      	pop	{r7}
20000fd8:	4770      	bx	lr
20000fda:	bf00      	nop

20000fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20000fdc:	b480      	push	{r7}
20000fde:	b083      	sub	sp, #12
20000fe0:	af00      	add	r7, sp, #0
20000fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	f04f 0200 	mov.w	r2, #0
20000fea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20000fec:	f107 070c 	add.w	r7, r7, #12
20000ff0:	46bd      	mov	sp, r7
20000ff2:	bc80      	pop	{r7}
20000ff4:	4770      	bx	lr
20000ff6:	bf00      	nop

20000ff8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20000ff8:	b480      	push	{r7}
20000ffa:	b085      	sub	sp, #20
20000ffc:	af00      	add	r7, sp, #0
20000ffe:	6078      	str	r0, [r7, #4]
20001000:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
20001002:	687b      	ldr	r3, [r7, #4]
20001004:	685b      	ldr	r3, [r3, #4]
20001006:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20001008:	683b      	ldr	r3, [r7, #0]
2000100a:	68fa      	ldr	r2, [r7, #12]
2000100c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
2000100e:	68fb      	ldr	r3, [r7, #12]
20001010:	689a      	ldr	r2, [r3, #8]
20001012:	683b      	ldr	r3, [r7, #0]
20001014:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20001016:	68fb      	ldr	r3, [r7, #12]
20001018:	689b      	ldr	r3, [r3, #8]
2000101a:	683a      	ldr	r2, [r7, #0]
2000101c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
2000101e:	68fb      	ldr	r3, [r7, #12]
20001020:	683a      	ldr	r2, [r7, #0]
20001022:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001024:	683b      	ldr	r3, [r7, #0]
20001026:	687a      	ldr	r2, [r7, #4]
20001028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000102a:	687b      	ldr	r3, [r7, #4]
2000102c:	681b      	ldr	r3, [r3, #0]
2000102e:	f103 0201 	add.w	r2, r3, #1
20001032:	687b      	ldr	r3, [r7, #4]
20001034:	601a      	str	r2, [r3, #0]
}
20001036:	f107 0714 	add.w	r7, r7, #20
2000103a:	46bd      	mov	sp, r7
2000103c:	bc80      	pop	{r7}
2000103e:	4770      	bx	lr

20001040 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001040:	b480      	push	{r7}
20001042:	b085      	sub	sp, #20
20001044:	af00      	add	r7, sp, #0
20001046:	6078      	str	r0, [r7, #4]
20001048:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
2000104a:	683b      	ldr	r3, [r7, #0]
2000104c:	681b      	ldr	r3, [r3, #0]
2000104e:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
20001050:	68fb      	ldr	r3, [r7, #12]
20001052:	f1b3 3fff 	cmp.w	r3, #4294967295
20001056:	d103      	bne.n	20001060 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
20001058:	687b      	ldr	r3, [r7, #4]
2000105a:	691b      	ldr	r3, [r3, #16]
2000105c:	60bb      	str	r3, [r7, #8]
2000105e:	e00d      	b.n	2000107c <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001060:	687b      	ldr	r3, [r7, #4]
20001062:	f103 0308 	add.w	r3, r3, #8
20001066:	60bb      	str	r3, [r7, #8]
20001068:	e002      	b.n	20001070 <vListInsert+0x30>
2000106a:	68bb      	ldr	r3, [r7, #8]
2000106c:	685b      	ldr	r3, [r3, #4]
2000106e:	60bb      	str	r3, [r7, #8]
20001070:	68bb      	ldr	r3, [r7, #8]
20001072:	685b      	ldr	r3, [r3, #4]
20001074:	681a      	ldr	r2, [r3, #0]
20001076:	68fb      	ldr	r3, [r7, #12]
20001078:	429a      	cmp	r2, r3
2000107a:	d9f6      	bls.n	2000106a <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
2000107c:	68bb      	ldr	r3, [r7, #8]
2000107e:	685a      	ldr	r2, [r3, #4]
20001080:	683b      	ldr	r3, [r7, #0]
20001082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20001084:	683b      	ldr	r3, [r7, #0]
20001086:	685b      	ldr	r3, [r3, #4]
20001088:	683a      	ldr	r2, [r7, #0]
2000108a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
2000108c:	683b      	ldr	r3, [r7, #0]
2000108e:	68ba      	ldr	r2, [r7, #8]
20001090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20001092:	68bb      	ldr	r3, [r7, #8]
20001094:	683a      	ldr	r2, [r7, #0]
20001096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001098:	683b      	ldr	r3, [r7, #0]
2000109a:	687a      	ldr	r2, [r7, #4]
2000109c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000109e:	687b      	ldr	r3, [r7, #4]
200010a0:	681b      	ldr	r3, [r3, #0]
200010a2:	f103 0201 	add.w	r2, r3, #1
200010a6:	687b      	ldr	r3, [r7, #4]
200010a8:	601a      	str	r2, [r3, #0]
}
200010aa:	f107 0714 	add.w	r7, r7, #20
200010ae:	46bd      	mov	sp, r7
200010b0:	bc80      	pop	{r7}
200010b2:	4770      	bx	lr

200010b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
200010b4:	b480      	push	{r7}
200010b6:	b085      	sub	sp, #20
200010b8:	af00      	add	r7, sp, #0
200010ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
200010bc:	687b      	ldr	r3, [r7, #4]
200010be:	691b      	ldr	r3, [r3, #16]
200010c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
200010c2:	687b      	ldr	r3, [r7, #4]
200010c4:	685b      	ldr	r3, [r3, #4]
200010c6:	687a      	ldr	r2, [r7, #4]
200010c8:	6892      	ldr	r2, [r2, #8]
200010ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	689b      	ldr	r3, [r3, #8]
200010d0:	687a      	ldr	r2, [r7, #4]
200010d2:	6852      	ldr	r2, [r2, #4]
200010d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
200010d6:	68fb      	ldr	r3, [r7, #12]
200010d8:	685a      	ldr	r2, [r3, #4]
200010da:	687b      	ldr	r3, [r7, #4]
200010dc:	429a      	cmp	r2, r3
200010de:	d103      	bne.n	200010e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
200010e0:	687b      	ldr	r3, [r7, #4]
200010e2:	689a      	ldr	r2, [r3, #8]
200010e4:	68fb      	ldr	r3, [r7, #12]
200010e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
200010e8:	687b      	ldr	r3, [r7, #4]
200010ea:	f04f 0200 	mov.w	r2, #0
200010ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
200010f0:	68fb      	ldr	r3, [r7, #12]
200010f2:	681b      	ldr	r3, [r3, #0]
200010f4:	f103 32ff 	add.w	r2, r3, #4294967295
200010f8:	68fb      	ldr	r3, [r7, #12]
200010fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
200010fc:	68fb      	ldr	r3, [r7, #12]
200010fe:	681b      	ldr	r3, [r3, #0]
}
20001100:	4618      	mov	r0, r3
20001102:	f107 0714 	add.w	r7, r7, #20
20001106:	46bd      	mov	sp, r7
20001108:	bc80      	pop	{r7}
2000110a:	4770      	bx	lr

2000110c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
2000110c:	b580      	push	{r7, lr}
2000110e:	b084      	sub	sp, #16
20001110:	af00      	add	r7, sp, #0
20001112:	6078      	str	r0, [r7, #4]
20001114:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
2000111a:	68bb      	ldr	r3, [r7, #8]
2000111c:	2b00      	cmp	r3, #0
2000111e:	d109      	bne.n	20001134 <xQueueGenericReset+0x28>
20001120:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001124:	f383 8811 	msr	BASEPRI, r3
20001128:	f3bf 8f6f 	isb	sy
2000112c:	f3bf 8f4f 	dsb	sy
20001130:	60fb      	str	r3, [r7, #12]
20001132:	e7fe      	b.n	20001132 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
20001134:	f002 fee2 	bl	20003efc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
20001138:	68bb      	ldr	r3, [r7, #8]
2000113a:	681a      	ldr	r2, [r3, #0]
2000113c:	68bb      	ldr	r3, [r7, #8]
2000113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001140:	68b9      	ldr	r1, [r7, #8]
20001142:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001144:	fb01 f303 	mul.w	r3, r1, r3
20001148:	441a      	add	r2, r3
2000114a:	68bb      	ldr	r3, [r7, #8]
2000114c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
2000114e:	68bb      	ldr	r3, [r7, #8]
20001150:	f04f 0200 	mov.w	r2, #0
20001154:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
20001156:	68bb      	ldr	r3, [r7, #8]
20001158:	681a      	ldr	r2, [r3, #0]
2000115a:	68bb      	ldr	r3, [r7, #8]
2000115c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
2000115e:	68bb      	ldr	r3, [r7, #8]
20001160:	681a      	ldr	r2, [r3, #0]
20001162:	68bb      	ldr	r3, [r7, #8]
20001164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001166:	f103 33ff 	add.w	r3, r3, #4294967295
2000116a:	68b9      	ldr	r1, [r7, #8]
2000116c:	6c09      	ldr	r1, [r1, #64]	; 0x40
2000116e:	fb01 f303 	mul.w	r3, r1, r3
20001172:	441a      	add	r2, r3
20001174:	68bb      	ldr	r3, [r7, #8]
20001176:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
20001178:	68bb      	ldr	r3, [r7, #8]
2000117a:	f04f 32ff 	mov.w	r2, #4294967295
2000117e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
20001182:	68bb      	ldr	r3, [r7, #8]
20001184:	f04f 32ff 	mov.w	r2, #4294967295
20001188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
2000118c:	683b      	ldr	r3, [r7, #0]
2000118e:	2b00      	cmp	r3, #0
20001190:	d118      	bne.n	200011c4 <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001192:	68bb      	ldr	r3, [r7, #8]
20001194:	691b      	ldr	r3, [r3, #16]
20001196:	2b00      	cmp	r3, #0
20001198:	d021      	beq.n	200011de <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000119a:	68bb      	ldr	r3, [r7, #8]
2000119c:	f103 0310 	add.w	r3, r3, #16
200011a0:	4618      	mov	r0, r3
200011a2:	f001 fa13 	bl	200025cc <xTaskRemoveFromEventList>
200011a6:	4603      	mov	r3, r0
200011a8:	2b00      	cmp	r3, #0
200011aa:	d01a      	beq.n	200011e2 <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
200011ac:	f64e 5304 	movw	r3, #60676	; 0xed04
200011b0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200011b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200011b8:	601a      	str	r2, [r3, #0]
200011ba:	f3bf 8f4f 	dsb	sy
200011be:	f3bf 8f6f 	isb	sy
200011c2:	e00f      	b.n	200011e4 <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
200011c4:	68bb      	ldr	r3, [r7, #8]
200011c6:	f103 0310 	add.w	r3, r3, #16
200011ca:	4618      	mov	r0, r3
200011cc:	f7ff fee2 	bl	20000f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
200011d0:	68bb      	ldr	r3, [r7, #8]
200011d2:	f103 0324 	add.w	r3, r3, #36	; 0x24
200011d6:	4618      	mov	r0, r3
200011d8:	f7ff fedc 	bl	20000f94 <vListInitialise>
200011dc:	e002      	b.n	200011e4 <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
200011de:	bf00      	nop
200011e0:	e000      	b.n	200011e4 <xQueueGenericReset+0xd8>
200011e2:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
200011e4:	f002 fec2 	bl	20003f6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
200011e8:	f04f 0301 	mov.w	r3, #1
}
200011ec:	4618      	mov	r0, r3
200011ee:	f107 0710 	add.w	r7, r7, #16
200011f2:	46bd      	mov	sp, r7
200011f4:	bd80      	pop	{r7, pc}
200011f6:	bf00      	nop

200011f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
200011f8:	b580      	push	{r7, lr}
200011fa:	b08a      	sub	sp, #40	; 0x28
200011fc:	af02      	add	r7, sp, #8
200011fe:	60f8      	str	r0, [r7, #12]
20001200:	60b9      	str	r1, [r7, #8]
20001202:	4613      	mov	r3, r2
20001204:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
20001206:	68fb      	ldr	r3, [r7, #12]
20001208:	2b00      	cmp	r3, #0
2000120a:	d109      	bne.n	20001220 <xQueueGenericCreate+0x28>
2000120c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001210:	f383 8811 	msr	BASEPRI, r3
20001214:	f3bf 8f6f 	isb	sy
20001218:	f3bf 8f4f 	dsb	sy
2000121c:	61fb      	str	r3, [r7, #28]
2000121e:	e7fe      	b.n	2000121e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
20001220:	68bb      	ldr	r3, [r7, #8]
20001222:	2b00      	cmp	r3, #0
20001224:	d103      	bne.n	2000122e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
20001226:	f04f 0300 	mov.w	r3, #0
2000122a:	617b      	str	r3, [r7, #20]
2000122c:	e004      	b.n	20001238 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000122e:	68fb      	ldr	r3, [r7, #12]
20001230:	68ba      	ldr	r2, [r7, #8]
20001232:	fb02 f303 	mul.w	r3, r2, r3
20001236:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
20001238:	697b      	ldr	r3, [r7, #20]
2000123a:	f103 0350 	add.w	r3, r3, #80	; 0x50
2000123e:	4618      	mov	r0, r3
20001240:	f002 fb12 	bl	20003868 <pvPortMalloc>
20001244:	4603      	mov	r3, r0
20001246:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
20001248:	693b      	ldr	r3, [r7, #16]
2000124a:	2b00      	cmp	r3, #0
2000124c:	d00b      	beq.n	20001266 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
2000124e:	693b      	ldr	r3, [r7, #16]
20001250:	f103 0350 	add.w	r3, r3, #80	; 0x50
20001254:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
20001256:	79fb      	ldrb	r3, [r7, #7]
20001258:	693a      	ldr	r2, [r7, #16]
2000125a:	9200      	str	r2, [sp, #0]
2000125c:	68f8      	ldr	r0, [r7, #12]
2000125e:	68b9      	ldr	r1, [r7, #8]
20001260:	69ba      	ldr	r2, [r7, #24]
20001262:	f000 f807 	bl	20001274 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
20001266:	693b      	ldr	r3, [r7, #16]
	}
20001268:	4618      	mov	r0, r3
2000126a:	f107 0720 	add.w	r7, r7, #32
2000126e:	46bd      	mov	sp, r7
20001270:	bd80      	pop	{r7, pc}
20001272:	bf00      	nop

20001274 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
20001274:	b580      	push	{r7, lr}
20001276:	b084      	sub	sp, #16
20001278:	af00      	add	r7, sp, #0
2000127a:	60f8      	str	r0, [r7, #12]
2000127c:	60b9      	str	r1, [r7, #8]
2000127e:	607a      	str	r2, [r7, #4]
20001280:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
20001282:	68bb      	ldr	r3, [r7, #8]
20001284:	2b00      	cmp	r3, #0
20001286:	d103      	bne.n	20001290 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
20001288:	69ba      	ldr	r2, [r7, #24]
2000128a:	69bb      	ldr	r3, [r7, #24]
2000128c:	601a      	str	r2, [r3, #0]
2000128e:	e002      	b.n	20001296 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001290:	687a      	ldr	r2, [r7, #4]
20001292:	69bb      	ldr	r3, [r7, #24]
20001294:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
20001296:	69bb      	ldr	r3, [r7, #24]
20001298:	68fa      	ldr	r2, [r7, #12]
2000129a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
2000129c:	69bb      	ldr	r3, [r7, #24]
2000129e:	68ba      	ldr	r2, [r7, #8]
200012a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
200012a2:	69b8      	ldr	r0, [r7, #24]
200012a4:	f04f 0101 	mov.w	r1, #1
200012a8:	f7ff ff30 	bl	2000110c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
200012ac:	69bb      	ldr	r3, [r7, #24]
200012ae:	78fa      	ldrb	r2, [r7, #3]
200012b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
200012b4:	f107 0710 	add.w	r7, r7, #16
200012b8:	46bd      	mov	sp, r7
200012ba:	bd80      	pop	{r7, pc}

200012bc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
200012bc:	b580      	push	{r7, lr}
200012be:	b082      	sub	sp, #8
200012c0:	af00      	add	r7, sp, #0
200012c2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	2b00      	cmp	r3, #0
200012c8:	d014      	beq.n	200012f4 <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	f04f 0200 	mov.w	r2, #0
200012d0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
200012d2:	687b      	ldr	r3, [r7, #4]
200012d4:	f04f 0200 	mov.w	r2, #0
200012d8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
200012da:	687b      	ldr	r3, [r7, #4]
200012dc:	f04f 0200 	mov.w	r2, #0
200012e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
200012e2:	6878      	ldr	r0, [r7, #4]
200012e4:	f04f 0100 	mov.w	r1, #0
200012e8:	f04f 0200 	mov.w	r2, #0
200012ec:	f04f 0300 	mov.w	r3, #0
200012f0:	f000 f820 	bl	20001334 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
200012f4:	f107 0708 	add.w	r7, r7, #8
200012f8:	46bd      	mov	sp, r7
200012fa:	bd80      	pop	{r7, pc}

200012fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
200012fc:	b580      	push	{r7, lr}
200012fe:	b086      	sub	sp, #24
20001300:	af00      	add	r7, sp, #0
20001302:	4603      	mov	r3, r0
20001304:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
20001306:	f04f 0301 	mov.w	r3, #1
2000130a:	613b      	str	r3, [r7, #16]
2000130c:	f04f 0300 	mov.w	r3, #0
20001310:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
20001312:	79fb      	ldrb	r3, [r7, #7]
20001314:	6938      	ldr	r0, [r7, #16]
20001316:	6979      	ldr	r1, [r7, #20]
20001318:	461a      	mov	r2, r3
2000131a:	f7ff ff6d 	bl	200011f8 <xQueueGenericCreate>
2000131e:	4603      	mov	r3, r0
20001320:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
20001322:	68f8      	ldr	r0, [r7, #12]
20001324:	f7ff ffca 	bl	200012bc <prvInitialiseMutex>

		return pxNewQueue;
20001328:	68fb      	ldr	r3, [r7, #12]
	}
2000132a:	4618      	mov	r0, r3
2000132c:	f107 0718 	add.w	r7, r7, #24
20001330:	46bd      	mov	sp, r7
20001332:	bd80      	pop	{r7, pc}

20001334 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
20001334:	b580      	push	{r7, lr}
20001336:	b08e      	sub	sp, #56	; 0x38
20001338:	af00      	add	r7, sp, #0
2000133a:	60f8      	str	r0, [r7, #12]
2000133c:	60b9      	str	r1, [r7, #8]
2000133e:	607a      	str	r2, [r7, #4]
20001340:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
20001342:	f04f 0300 	mov.w	r3, #0
20001346:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001348:	68fb      	ldr	r3, [r7, #12]
2000134a:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
2000134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000134e:	2b00      	cmp	r3, #0
20001350:	d109      	bne.n	20001366 <xQueueGenericSend+0x32>
20001352:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001356:	f383 8811 	msr	BASEPRI, r3
2000135a:	f3bf 8f6f 	isb	sy
2000135e:	f3bf 8f4f 	dsb	sy
20001362:	62bb      	str	r3, [r7, #40]	; 0x28
20001364:	e7fe      	b.n	20001364 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001366:	68bb      	ldr	r3, [r7, #8]
20001368:	2b00      	cmp	r3, #0
2000136a:	d103      	bne.n	20001374 <xQueueGenericSend+0x40>
2000136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001370:	2b00      	cmp	r3, #0
20001372:	d102      	bne.n	2000137a <xQueueGenericSend+0x46>
20001374:	f04f 0301 	mov.w	r3, #1
20001378:	e001      	b.n	2000137e <xQueueGenericSend+0x4a>
2000137a:	f04f 0300 	mov.w	r3, #0
2000137e:	2b00      	cmp	r3, #0
20001380:	d109      	bne.n	20001396 <xQueueGenericSend+0x62>
20001382:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001386:	f383 8811 	msr	BASEPRI, r3
2000138a:	f3bf 8f6f 	isb	sy
2000138e:	f3bf 8f4f 	dsb	sy
20001392:	62fb      	str	r3, [r7, #44]	; 0x2c
20001394:	e7fe      	b.n	20001394 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001396:	683b      	ldr	r3, [r7, #0]
20001398:	2b02      	cmp	r3, #2
2000139a:	d103      	bne.n	200013a4 <xQueueGenericSend+0x70>
2000139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200013a0:	2b01      	cmp	r3, #1
200013a2:	d102      	bne.n	200013aa <xQueueGenericSend+0x76>
200013a4:	f04f 0301 	mov.w	r3, #1
200013a8:	e001      	b.n	200013ae <xQueueGenericSend+0x7a>
200013aa:	f04f 0300 	mov.w	r3, #0
200013ae:	2b00      	cmp	r3, #0
200013b0:	d109      	bne.n	200013c6 <xQueueGenericSend+0x92>
200013b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200013b6:	f383 8811 	msr	BASEPRI, r3
200013ba:	f3bf 8f6f 	isb	sy
200013be:	f3bf 8f4f 	dsb	sy
200013c2:	633b      	str	r3, [r7, #48]	; 0x30
200013c4:	e7fe      	b.n	200013c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200013c6:	f001 fb09 	bl	200029dc <xTaskGetSchedulerState>
200013ca:	4603      	mov	r3, r0
200013cc:	2b00      	cmp	r3, #0
200013ce:	d102      	bne.n	200013d6 <xQueueGenericSend+0xa2>
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	2b00      	cmp	r3, #0
200013d4:	d102      	bne.n	200013dc <xQueueGenericSend+0xa8>
200013d6:	f04f 0301 	mov.w	r3, #1
200013da:	e001      	b.n	200013e0 <xQueueGenericSend+0xac>
200013dc:	f04f 0300 	mov.w	r3, #0
200013e0:	2b00      	cmp	r3, #0
200013e2:	d10a      	bne.n	200013fa <xQueueGenericSend+0xc6>
200013e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200013e8:	f383 8811 	msr	BASEPRI, r3
200013ec:	f3bf 8f6f 	isb	sy
200013f0:	f3bf 8f4f 	dsb	sy
200013f4:	637b      	str	r3, [r7, #52]	; 0x34
200013f6:	e7fe      	b.n	200013f6 <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200013f8:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
200013fa:	f002 fd7f 	bl	20003efc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001406:	429a      	cmp	r2, r3
20001408:	d302      	bcc.n	20001410 <xQueueGenericSend+0xdc>
2000140a:	683b      	ldr	r3, [r7, #0]
2000140c:	2b02      	cmp	r3, #2
2000140e:	d134      	bne.n	2000147a <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001410:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001412:	68b9      	ldr	r1, [r7, #8]
20001414:	683a      	ldr	r2, [r7, #0]
20001416:	f000 fa7b 	bl	20001910 <prvCopyDataToQueue>
2000141a:	4603      	mov	r3, r0
2000141c:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001422:	2b00      	cmp	r3, #0
20001424:	d014      	beq.n	20001450 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001428:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000142c:	4618      	mov	r0, r3
2000142e:	f001 f8cd 	bl	200025cc <xTaskRemoveFromEventList>
20001432:	4603      	mov	r3, r0
20001434:	2b00      	cmp	r3, #0
20001436:	d01a      	beq.n	2000146e <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001438:	f64e 5304 	movw	r3, #60676	; 0xed04
2000143c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001444:	601a      	str	r2, [r3, #0]
20001446:	f3bf 8f4f 	dsb	sy
2000144a:	f3bf 8f6f 	isb	sy
2000144e:	e00f      	b.n	20001470 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
20001450:	6a3b      	ldr	r3, [r7, #32]
20001452:	2b00      	cmp	r3, #0
20001454:	d00c      	beq.n	20001470 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
20001456:	f64e 5304 	movw	r3, #60676	; 0xed04
2000145a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000145e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001462:	601a      	str	r2, [r3, #0]
20001464:	f3bf 8f4f 	dsb	sy
20001468:	f3bf 8f6f 	isb	sy
2000146c:	e000      	b.n	20001470 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
2000146e:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
20001470:	f002 fd7c 	bl	20003f6c <vPortExitCritical>
				return pdPASS;
20001474:	f04f 0301 	mov.w	r3, #1
20001478:	e06f      	b.n	2000155a <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
2000147a:	687b      	ldr	r3, [r7, #4]
2000147c:	2b00      	cmp	r3, #0
2000147e:	d104      	bne.n	2000148a <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001480:	f002 fd74 	bl	20003f6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
20001484:	f04f 0300 	mov.w	r3, #0
20001488:	e067      	b.n	2000155a <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
2000148a:	69fb      	ldr	r3, [r7, #28]
2000148c:	2b00      	cmp	r3, #0
2000148e:	d107      	bne.n	200014a0 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001490:	f107 0314 	add.w	r3, r7, #20
20001494:	4618      	mov	r0, r3
20001496:	f001 f911 	bl	200026bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000149a:	f04f 0301 	mov.w	r3, #1
2000149e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
200014a0:	f002 fd64 	bl	20003f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
200014a4:	f000 fd72 	bl	20001f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
200014a8:	f002 fd28 	bl	20003efc <vPortEnterCritical>
200014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200014b2:	b2db      	uxtb	r3, r3
200014b4:	b25b      	sxtb	r3, r3
200014b6:	f1b3 3fff 	cmp.w	r3, #4294967295
200014ba:	d104      	bne.n	200014c6 <xQueueGenericSend+0x192>
200014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014be:	f04f 0200 	mov.w	r2, #0
200014c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200014cc:	b2db      	uxtb	r3, r3
200014ce:	b25b      	sxtb	r3, r3
200014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
200014d4:	d104      	bne.n	200014e0 <xQueueGenericSend+0x1ac>
200014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200014d8:	f04f 0200 	mov.w	r2, #0
200014dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200014e0:	f002 fd44 	bl	20003f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200014e4:	f107 0214 	add.w	r2, r7, #20
200014e8:	f107 0304 	add.w	r3, r7, #4
200014ec:	4610      	mov	r0, r2
200014ee:	4619      	mov	r1, r3
200014f0:	f001 f908 	bl	20002704 <xTaskCheckForTimeOut>
200014f4:	4603      	mov	r3, r0
200014f6:	2b00      	cmp	r3, #0
200014f8:	d128      	bne.n	2000154c <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
200014fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
200014fc:	f000 fb18 	bl	20001b30 <prvIsQueueFull>
20001500:	4603      	mov	r3, r0
20001502:	2b00      	cmp	r3, #0
20001504:	d01c      	beq.n	20001540 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
20001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001508:	f103 0210 	add.w	r2, r3, #16
2000150c:	687b      	ldr	r3, [r7, #4]
2000150e:	4610      	mov	r0, r2
20001510:	4619      	mov	r1, r3
20001512:	f001 f809 	bl	20002528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
20001516:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001518:	f000 fa9a 	bl	20001a50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
2000151c:	f000 fd48 	bl	20001fb0 <xTaskResumeAll>
20001520:	4603      	mov	r3, r0
20001522:	2b00      	cmp	r3, #0
20001524:	f47f af68 	bne.w	200013f8 <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
20001528:	f64e 5304 	movw	r3, #60676	; 0xed04
2000152c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001534:	601a      	str	r2, [r3, #0]
20001536:	f3bf 8f4f 	dsb	sy
2000153a:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
2000153e:	e75c      	b.n	200013fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001540:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001542:	f000 fa85 	bl	20001a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001546:	f000 fd33 	bl	20001fb0 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
2000154a:	e756      	b.n	200013fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
2000154c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000154e:	f000 fa7f 	bl	20001a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001552:	f000 fd2d 	bl	20001fb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
20001556:	f04f 0300 	mov.w	r3, #0
		}
	}
}
2000155a:	4618      	mov	r0, r3
2000155c:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001560:	46bd      	mov	sp, r7
20001562:	bd80      	pop	{r7, pc}

20001564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001564:	b580      	push	{r7, lr}
20001566:	b08e      	sub	sp, #56	; 0x38
20001568:	af00      	add	r7, sp, #0
2000156a:	60f8      	str	r0, [r7, #12]
2000156c:	60b9      	str	r1, [r7, #8]
2000156e:	607a      	str	r2, [r7, #4]
20001570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001572:	68fb      	ldr	r3, [r7, #12]
20001574:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
20001576:	69bb      	ldr	r3, [r7, #24]
20001578:	2b00      	cmp	r3, #0
2000157a:	d109      	bne.n	20001590 <xQueueGenericSendFromISR+0x2c>
2000157c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001580:	f383 8811 	msr	BASEPRI, r3
20001584:	f3bf 8f6f 	isb	sy
20001588:	f3bf 8f4f 	dsb	sy
2000158c:	623b      	str	r3, [r7, #32]
2000158e:	e7fe      	b.n	2000158e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001590:	68bb      	ldr	r3, [r7, #8]
20001592:	2b00      	cmp	r3, #0
20001594:	d103      	bne.n	2000159e <xQueueGenericSendFromISR+0x3a>
20001596:	69bb      	ldr	r3, [r7, #24]
20001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000159a:	2b00      	cmp	r3, #0
2000159c:	d102      	bne.n	200015a4 <xQueueGenericSendFromISR+0x40>
2000159e:	f04f 0301 	mov.w	r3, #1
200015a2:	e001      	b.n	200015a8 <xQueueGenericSendFromISR+0x44>
200015a4:	f04f 0300 	mov.w	r3, #0
200015a8:	2b00      	cmp	r3, #0
200015aa:	d109      	bne.n	200015c0 <xQueueGenericSendFromISR+0x5c>
200015ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015b0:	f383 8811 	msr	BASEPRI, r3
200015b4:	f3bf 8f6f 	isb	sy
200015b8:	f3bf 8f4f 	dsb	sy
200015bc:	627b      	str	r3, [r7, #36]	; 0x24
200015be:	e7fe      	b.n	200015be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
200015c0:	683b      	ldr	r3, [r7, #0]
200015c2:	2b02      	cmp	r3, #2
200015c4:	d103      	bne.n	200015ce <xQueueGenericSendFromISR+0x6a>
200015c6:	69bb      	ldr	r3, [r7, #24]
200015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015ca:	2b01      	cmp	r3, #1
200015cc:	d102      	bne.n	200015d4 <xQueueGenericSendFromISR+0x70>
200015ce:	f04f 0301 	mov.w	r3, #1
200015d2:	e001      	b.n	200015d8 <xQueueGenericSendFromISR+0x74>
200015d4:	f04f 0300 	mov.w	r3, #0
200015d8:	2b00      	cmp	r3, #0
200015da:	d109      	bne.n	200015f0 <xQueueGenericSendFromISR+0x8c>
200015dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015e0:	f383 8811 	msr	BASEPRI, r3
200015e4:	f3bf 8f6f 	isb	sy
200015e8:	f3bf 8f4f 	dsb	sy
200015ec:	62bb      	str	r3, [r7, #40]	; 0x28
200015ee:	e7fe      	b.n	200015ee <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200015f0:	f002 fd58 	bl	200040a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200015f4:	f3ef 8211 	mrs	r2, BASEPRI
200015f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015fc:	f383 8811 	msr	BASEPRI, r3
20001600:	f3bf 8f6f 	isb	sy
20001604:	f3bf 8f4f 	dsb	sy
20001608:	633a      	str	r2, [r7, #48]	; 0x30
2000160a:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
2000160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2000160e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001610:	69bb      	ldr	r3, [r7, #24]
20001612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001614:	69bb      	ldr	r3, [r7, #24]
20001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001618:	429a      	cmp	r2, r3
2000161a:	d302      	bcc.n	20001622 <xQueueGenericSendFromISR+0xbe>
2000161c:	683b      	ldr	r3, [r7, #0]
2000161e:	2b02      	cmp	r3, #2
20001620:	d134      	bne.n	2000168c <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001622:	69bb      	ldr	r3, [r7, #24]
20001624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001628:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
2000162a:	69b8      	ldr	r0, [r7, #24]
2000162c:	68b9      	ldr	r1, [r7, #8]
2000162e:	683a      	ldr	r2, [r7, #0]
20001630:	f000 f96e 	bl	20001910 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001634:	f997 301f 	ldrsb.w	r3, [r7, #31]
20001638:	f1b3 3fff 	cmp.w	r3, #4294967295
2000163c:	d114      	bne.n	20001668 <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000163e:	69bb      	ldr	r3, [r7, #24]
20001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001642:	2b00      	cmp	r3, #0
20001644:	d019      	beq.n	2000167a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001646:	69bb      	ldr	r3, [r7, #24]
20001648:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000164c:	4618      	mov	r0, r3
2000164e:	f000 ffbd 	bl	200025cc <xTaskRemoveFromEventList>
20001652:	4603      	mov	r3, r0
20001654:	2b00      	cmp	r3, #0
20001656:	d012      	beq.n	2000167e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001658:	687b      	ldr	r3, [r7, #4]
2000165a:	2b00      	cmp	r3, #0
2000165c:	d011      	beq.n	20001682 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
2000165e:	687b      	ldr	r3, [r7, #4]
20001660:	f04f 0201 	mov.w	r2, #1
20001664:	601a      	str	r2, [r3, #0]
20001666:	e00d      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001668:	7ffb      	ldrb	r3, [r7, #31]
2000166a:	f103 0301 	add.w	r3, r3, #1
2000166e:	b2db      	uxtb	r3, r3
20001670:	461a      	mov	r2, r3
20001672:	69bb      	ldr	r3, [r7, #24]
20001674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001678:	e004      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
2000167a:	bf00      	nop
2000167c:	e002      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
2000167e:	bf00      	nop
20001680:	e000      	b.n	20001684 <xQueueGenericSendFromISR+0x120>
20001682:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
20001684:	f04f 0301 	mov.w	r3, #1
20001688:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
2000168a:	e002      	b.n	20001692 <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
2000168c:	f04f 0300 	mov.w	r3, #0
20001690:	613b      	str	r3, [r7, #16]
20001692:	697b      	ldr	r3, [r7, #20]
20001694:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001698:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
2000169c:	693b      	ldr	r3, [r7, #16]
}
2000169e:	4618      	mov	r0, r3
200016a0:	f107 0738 	add.w	r7, r7, #56	; 0x38
200016a4:	46bd      	mov	sp, r7
200016a6:	bd80      	pop	{r7, pc}

200016a8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
200016a8:	b580      	push	{r7, lr}
200016aa:	b08e      	sub	sp, #56	; 0x38
200016ac:	af00      	add	r7, sp, #0
200016ae:	60f8      	str	r0, [r7, #12]
200016b0:	60b9      	str	r1, [r7, #8]
200016b2:	607a      	str	r2, [r7, #4]
200016b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
200016b6:	f04f 0300 	mov.w	r3, #0
200016ba:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200016bc:	68fb      	ldr	r3, [r7, #12]
200016be:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
200016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016c2:	2b00      	cmp	r3, #0
200016c4:	d109      	bne.n	200016da <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200016c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200016ca:	f383 8811 	msr	BASEPRI, r3
200016ce:	f3bf 8f6f 	isb	sy
200016d2:	f3bf 8f4f 	dsb	sy
200016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
200016d8:	e7fe      	b.n	200016d8 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
200016da:	68bb      	ldr	r3, [r7, #8]
200016dc:	2b00      	cmp	r3, #0
200016de:	d103      	bne.n	200016e8 <xQueueGenericReceive+0x40>
200016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200016e4:	2b00      	cmp	r3, #0
200016e6:	d102      	bne.n	200016ee <xQueueGenericReceive+0x46>
200016e8:	f04f 0301 	mov.w	r3, #1
200016ec:	e001      	b.n	200016f2 <xQueueGenericReceive+0x4a>
200016ee:	f04f 0300 	mov.w	r3, #0
200016f2:	2b00      	cmp	r3, #0
200016f4:	d109      	bne.n	2000170a <xQueueGenericReceive+0x62>
200016f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200016fa:	f383 8811 	msr	BASEPRI, r3
200016fe:	f3bf 8f6f 	isb	sy
20001702:	f3bf 8f4f 	dsb	sy
20001706:	633b      	str	r3, [r7, #48]	; 0x30
20001708:	e7fe      	b.n	20001708 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
2000170a:	f001 f967 	bl	200029dc <xTaskGetSchedulerState>
2000170e:	4603      	mov	r3, r0
20001710:	2b00      	cmp	r3, #0
20001712:	d102      	bne.n	2000171a <xQueueGenericReceive+0x72>
20001714:	687b      	ldr	r3, [r7, #4]
20001716:	2b00      	cmp	r3, #0
20001718:	d102      	bne.n	20001720 <xQueueGenericReceive+0x78>
2000171a:	f04f 0301 	mov.w	r3, #1
2000171e:	e001      	b.n	20001724 <xQueueGenericReceive+0x7c>
20001720:	f04f 0300 	mov.w	r3, #0
20001724:	2b00      	cmp	r3, #0
20001726:	d10c      	bne.n	20001742 <xQueueGenericReceive+0x9a>
20001728:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000172c:	f383 8811 	msr	BASEPRI, r3
20001730:	f3bf 8f6f 	isb	sy
20001734:	f3bf 8f4f 	dsb	sy
20001738:	637b      	str	r3, [r7, #52]	; 0x34
2000173a:	e7fe      	b.n	2000173a <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
2000173c:	bf00      	nop
2000173e:	e000      	b.n	20001742 <xQueueGenericReceive+0x9a>
20001740:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
20001742:	f002 fbdb 	bl	20003efc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000174a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2000174c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000174e:	2b00      	cmp	r3, #0
20001750:	d055      	beq.n	200017fe <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
20001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001754:	68db      	ldr	r3, [r3, #12]
20001756:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001758:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000175a:	68b9      	ldr	r1, [r7, #8]
2000175c:	f000 f950 	bl	20001a00 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
20001760:	683b      	ldr	r3, [r7, #0]
20001762:	2b00      	cmp	r3, #0
20001764:	d127      	bne.n	200017b6 <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
20001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001768:	f103 32ff 	add.w	r2, r3, #4294967295
2000176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000176e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001772:	681b      	ldr	r3, [r3, #0]
20001774:	2b00      	cmp	r3, #0
20001776:	d105      	bne.n	20001784 <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
20001778:	f001 faa0 	bl	20002cbc <pvTaskIncrementMutexHeldCount>
2000177c:	4603      	mov	r3, r0
2000177e:	461a      	mov	r2, r3
20001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001782:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001786:	691b      	ldr	r3, [r3, #16]
20001788:	2b00      	cmp	r3, #0
2000178a:	d030      	beq.n	200017ee <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000178e:	f103 0310 	add.w	r3, r3, #16
20001792:	4618      	mov	r0, r3
20001794:	f000 ff1a 	bl	200025cc <xTaskRemoveFromEventList>
20001798:	4603      	mov	r3, r0
2000179a:	2b00      	cmp	r3, #0
2000179c:	d029      	beq.n	200017f2 <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
2000179e:	f64e 5304 	movw	r3, #60676	; 0xed04
200017a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017aa:	601a      	str	r2, [r3, #0]
200017ac:	f3bf 8f4f 	dsb	sy
200017b0:	f3bf 8f6f 	isb	sy
200017b4:	e01e      	b.n	200017f4 <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
200017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017b8:	6a3a      	ldr	r2, [r7, #32]
200017ba:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
200017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200017c0:	2b00      	cmp	r3, #0
200017c2:	d017      	beq.n	200017f4 <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
200017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017c6:	f103 0324 	add.w	r3, r3, #36	; 0x24
200017ca:	4618      	mov	r0, r3
200017cc:	f000 fefe 	bl	200025cc <xTaskRemoveFromEventList>
200017d0:	4603      	mov	r3, r0
200017d2:	2b00      	cmp	r3, #0
200017d4:	d00e      	beq.n	200017f4 <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
200017d6:	f64e 5304 	movw	r3, #60676	; 0xed04
200017da:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017e2:	601a      	str	r2, [r3, #0]
200017e4:	f3bf 8f4f 	dsb	sy
200017e8:	f3bf 8f6f 	isb	sy
200017ec:	e002      	b.n	200017f4 <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
200017ee:	bf00      	nop
200017f0:	e000      	b.n	200017f4 <xQueueGenericReceive+0x14c>
200017f2:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
200017f4:	f002 fbba 	bl	20003f6c <vPortExitCritical>
				return pdPASS;
200017f8:	f04f 0301 	mov.w	r3, #1
200017fc:	e083      	b.n	20001906 <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
200017fe:	687b      	ldr	r3, [r7, #4]
20001800:	2b00      	cmp	r3, #0
20001802:	d104      	bne.n	2000180e <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001804:	f002 fbb2 	bl	20003f6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001808:	f04f 0300 	mov.w	r3, #0
2000180c:	e07b      	b.n	20001906 <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
2000180e:	69fb      	ldr	r3, [r7, #28]
20001810:	2b00      	cmp	r3, #0
20001812:	d107      	bne.n	20001824 <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001814:	f107 0314 	add.w	r3, r7, #20
20001818:	4618      	mov	r0, r3
2000181a:	f000 ff4f 	bl	200026bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000181e:	f04f 0301 	mov.w	r3, #1
20001822:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001824:	f002 fba2 	bl	20003f6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001828:	f000 fbb0 	bl	20001f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
2000182c:	f002 fb66 	bl	20003efc <vPortEnterCritical>
20001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001836:	b2db      	uxtb	r3, r3
20001838:	b25b      	sxtb	r3, r3
2000183a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000183e:	d104      	bne.n	2000184a <xQueueGenericReceive+0x1a2>
20001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001842:	f04f 0200 	mov.w	r2, #0
20001846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2000184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000184c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001850:	b2db      	uxtb	r3, r3
20001852:	b25b      	sxtb	r3, r3
20001854:	f1b3 3fff 	cmp.w	r3, #4294967295
20001858:	d104      	bne.n	20001864 <xQueueGenericReceive+0x1bc>
2000185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000185c:	f04f 0200 	mov.w	r2, #0
20001860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001864:	f002 fb82 	bl	20003f6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001868:	f107 0214 	add.w	r2, r7, #20
2000186c:	f107 0304 	add.w	r3, r7, #4
20001870:	4610      	mov	r0, r2
20001872:	4619      	mov	r1, r3
20001874:	f000 ff46 	bl	20002704 <xTaskCheckForTimeOut>
20001878:	4603      	mov	r3, r0
2000187a:	2b00      	cmp	r3, #0
2000187c:	d135      	bne.n	200018ea <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
2000187e:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001880:	f000 f93c 	bl	20001afc <prvIsQueueEmpty>
20001884:	4603      	mov	r3, r0
20001886:	2b00      	cmp	r3, #0
20001888:	d029      	beq.n	200018de <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2000188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000188c:	681b      	ldr	r3, [r3, #0]
2000188e:	2b00      	cmp	r3, #0
20001890:	d108      	bne.n	200018a4 <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
20001892:	f002 fb33 	bl	20003efc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
20001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001898:	685b      	ldr	r3, [r3, #4]
2000189a:	4618      	mov	r0, r3
2000189c:	f001 f8c2 	bl	20002a24 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
200018a0:	f002 fb64 	bl	20003f6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
200018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200018a6:	f103 0224 	add.w	r2, r3, #36	; 0x24
200018aa:	687b      	ldr	r3, [r7, #4]
200018ac:	4610      	mov	r0, r2
200018ae:	4619      	mov	r1, r3
200018b0:	f000 fe3a 	bl	20002528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
200018b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018b6:	f000 f8cb 	bl	20001a50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
200018ba:	f000 fb79 	bl	20001fb0 <xTaskResumeAll>
200018be:	4603      	mov	r3, r0
200018c0:	2b00      	cmp	r3, #0
200018c2:	f47f af3b 	bne.w	2000173c <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
200018c6:	f64e 5304 	movw	r3, #60676	; 0xed04
200018ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
200018ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200018d2:	601a      	str	r2, [r3, #0]
200018d4:	f3bf 8f4f 	dsb	sy
200018d8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
200018dc:	e731      	b.n	20001742 <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
200018de:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018e0:	f000 f8b6 	bl	20001a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
200018e4:	f000 fb64 	bl	20001fb0 <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
200018e8:	e72b      	b.n	20001742 <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
200018ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018ec:	f000 f8b0 	bl	20001a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
200018f0:	f000 fb5e 	bl	20001fb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
200018f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200018f6:	f000 f901 	bl	20001afc <prvIsQueueEmpty>
200018fa:	4603      	mov	r3, r0
200018fc:	2b00      	cmp	r3, #0
200018fe:	f43f af1f 	beq.w	20001740 <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001902:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
20001906:	4618      	mov	r0, r3
20001908:	f107 0738 	add.w	r7, r7, #56	; 0x38
2000190c:	46bd      	mov	sp, r7
2000190e:	bd80      	pop	{r7, pc}

20001910 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001910:	b580      	push	{r7, lr}
20001912:	b086      	sub	sp, #24
20001914:	af00      	add	r7, sp, #0
20001916:	60f8      	str	r0, [r7, #12]
20001918:	60b9      	str	r1, [r7, #8]
2000191a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
2000191c:	f04f 0300 	mov.w	r3, #0
20001920:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001922:	68fb      	ldr	r3, [r7, #12]
20001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001926:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001928:	68fb      	ldr	r3, [r7, #12]
2000192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000192c:	2b00      	cmp	r3, #0
2000192e:	d10f      	bne.n	20001950 <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001930:	68fb      	ldr	r3, [r7, #12]
20001932:	681b      	ldr	r3, [r3, #0]
20001934:	2b00      	cmp	r3, #0
20001936:	d155      	bne.n	200019e4 <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
20001938:	68fb      	ldr	r3, [r7, #12]
2000193a:	685b      	ldr	r3, [r3, #4]
2000193c:	4618      	mov	r0, r3
2000193e:	f001 f917 	bl	20002b70 <xTaskPriorityDisinherit>
20001942:	4603      	mov	r3, r0
20001944:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
20001946:	68fb      	ldr	r3, [r7, #12]
20001948:	f04f 0200 	mov.w	r2, #0
2000194c:	605a      	str	r2, [r3, #4]
2000194e:	e04c      	b.n	200019ea <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001950:	687b      	ldr	r3, [r7, #4]
20001952:	2b00      	cmp	r3, #0
20001954:	d11a      	bne.n	2000198c <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
20001956:	68fb      	ldr	r3, [r7, #12]
20001958:	689a      	ldr	r2, [r3, #8]
2000195a:	68fb      	ldr	r3, [r7, #12]
2000195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000195e:	4610      	mov	r0, r2
20001960:	68b9      	ldr	r1, [r7, #8]
20001962:	461a      	mov	r2, r3
20001964:	f005 fa24 	bl	20006db0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
20001968:	68fb      	ldr	r3, [r7, #12]
2000196a:	689a      	ldr	r2, [r3, #8]
2000196c:	68fb      	ldr	r3, [r7, #12]
2000196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001970:	441a      	add	r2, r3
20001972:	68fb      	ldr	r3, [r7, #12]
20001974:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001976:	68fb      	ldr	r3, [r7, #12]
20001978:	689a      	ldr	r2, [r3, #8]
2000197a:	68fb      	ldr	r3, [r7, #12]
2000197c:	685b      	ldr	r3, [r3, #4]
2000197e:	429a      	cmp	r2, r3
20001980:	d332      	bcc.n	200019e8 <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001982:	68fb      	ldr	r3, [r7, #12]
20001984:	681a      	ldr	r2, [r3, #0]
20001986:	68fb      	ldr	r3, [r7, #12]
20001988:	609a      	str	r2, [r3, #8]
2000198a:	e02e      	b.n	200019ea <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000198c:	68fb      	ldr	r3, [r7, #12]
2000198e:	68da      	ldr	r2, [r3, #12]
20001990:	68fb      	ldr	r3, [r7, #12]
20001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001994:	4610      	mov	r0, r2
20001996:	68b9      	ldr	r1, [r7, #8]
20001998:	461a      	mov	r2, r3
2000199a:	f005 fa09 	bl	20006db0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2000199e:	68fb      	ldr	r3, [r7, #12]
200019a0:	68da      	ldr	r2, [r3, #12]
200019a2:	68fb      	ldr	r3, [r7, #12]
200019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200019a6:	f1c3 0300 	rsb	r3, r3, #0
200019aa:	441a      	add	r2, r3
200019ac:	68fb      	ldr	r3, [r7, #12]
200019ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
200019b0:	68fb      	ldr	r3, [r7, #12]
200019b2:	68da      	ldr	r2, [r3, #12]
200019b4:	68fb      	ldr	r3, [r7, #12]
200019b6:	681b      	ldr	r3, [r3, #0]
200019b8:	429a      	cmp	r2, r3
200019ba:	d208      	bcs.n	200019ce <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
200019bc:	68fb      	ldr	r3, [r7, #12]
200019be:	685a      	ldr	r2, [r3, #4]
200019c0:	68fb      	ldr	r3, [r7, #12]
200019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200019c4:	f1c3 0300 	rsb	r3, r3, #0
200019c8:	441a      	add	r2, r3
200019ca:	68fb      	ldr	r3, [r7, #12]
200019cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
200019ce:	687b      	ldr	r3, [r7, #4]
200019d0:	2b02      	cmp	r3, #2
200019d2:	d10a      	bne.n	200019ea <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
200019d4:	697b      	ldr	r3, [r7, #20]
200019d6:	2b00      	cmp	r3, #0
200019d8:	d007      	beq.n	200019ea <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
200019da:	697b      	ldr	r3, [r7, #20]
200019dc:	f103 33ff 	add.w	r3, r3, #4294967295
200019e0:	617b      	str	r3, [r7, #20]
200019e2:	e002      	b.n	200019ea <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
200019e4:	bf00      	nop
200019e6:	e000      	b.n	200019ea <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
200019e8:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
200019ea:	697b      	ldr	r3, [r7, #20]
200019ec:	f103 0201 	add.w	r2, r3, #1
200019f0:	68fb      	ldr	r3, [r7, #12]
200019f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
200019f4:	693b      	ldr	r3, [r7, #16]
}
200019f6:	4618      	mov	r0, r3
200019f8:	f107 0718 	add.w	r7, r7, #24
200019fc:	46bd      	mov	sp, r7
200019fe:	bd80      	pop	{r7, pc}

20001a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001a00:	b580      	push	{r7, lr}
20001a02:	b082      	sub	sp, #8
20001a04:	af00      	add	r7, sp, #0
20001a06:	6078      	str	r0, [r7, #4]
20001a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001a0a:	687b      	ldr	r3, [r7, #4]
20001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a0e:	2b00      	cmp	r3, #0
20001a10:	d019      	beq.n	20001a46 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
20001a12:	687b      	ldr	r3, [r7, #4]
20001a14:	68da      	ldr	r2, [r3, #12]
20001a16:	687b      	ldr	r3, [r7, #4]
20001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a1a:	441a      	add	r2, r3
20001a1c:	687b      	ldr	r3, [r7, #4]
20001a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001a20:	687b      	ldr	r3, [r7, #4]
20001a22:	68da      	ldr	r2, [r3, #12]
20001a24:	687b      	ldr	r3, [r7, #4]
20001a26:	685b      	ldr	r3, [r3, #4]
20001a28:	429a      	cmp	r2, r3
20001a2a:	d303      	bcc.n	20001a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
20001a2c:	687b      	ldr	r3, [r7, #4]
20001a2e:	681a      	ldr	r2, [r3, #0]
20001a30:	687b      	ldr	r3, [r7, #4]
20001a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
20001a34:	687b      	ldr	r3, [r7, #4]
20001a36:	68da      	ldr	r2, [r3, #12]
20001a38:	687b      	ldr	r3, [r7, #4]
20001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a3c:	6838      	ldr	r0, [r7, #0]
20001a3e:	4611      	mov	r1, r2
20001a40:	461a      	mov	r2, r3
20001a42:	f005 f9b5 	bl	20006db0 <memcpy>
	}
}
20001a46:	f107 0708 	add.w	r7, r7, #8
20001a4a:	46bd      	mov	sp, r7
20001a4c:	bd80      	pop	{r7, pc}
20001a4e:	bf00      	nop

20001a50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001a50:	b580      	push	{r7, lr}
20001a52:	b084      	sub	sp, #16
20001a54:	af00      	add	r7, sp, #0
20001a56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001a58:	f002 fa50 	bl	20003efc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001a5c:	687b      	ldr	r3, [r7, #4]
20001a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001a62:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001a64:	e012      	b.n	20001a8c <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001a66:	687b      	ldr	r3, [r7, #4]
20001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001a6a:	2b00      	cmp	r3, #0
20001a6c:	d013      	beq.n	20001a96 <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001a6e:	687b      	ldr	r3, [r7, #4]
20001a70:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001a74:	4618      	mov	r0, r3
20001a76:	f000 fda9 	bl	200025cc <xTaskRemoveFromEventList>
20001a7a:	4603      	mov	r3, r0
20001a7c:	2b00      	cmp	r3, #0
20001a7e:	d001      	beq.n	20001a84 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001a80:	f000 fea8 	bl	200027d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001a84:	7bbb      	ldrb	r3, [r7, #14]
20001a86:	f103 33ff 	add.w	r3, r3, #4294967295
20001a8a:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001a90:	2b00      	cmp	r3, #0
20001a92:	dce8      	bgt.n	20001a66 <prvUnlockQueue+0x16>
20001a94:	e000      	b.n	20001a98 <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
20001a96:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001a98:	687b      	ldr	r3, [r7, #4]
20001a9a:	f04f 32ff 	mov.w	r2, #4294967295
20001a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001aa2:	f002 fa63 	bl	20003f6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001aa6:	f002 fa29 	bl	20003efc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001aaa:	687b      	ldr	r3, [r7, #4]
20001aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ab0:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001ab2:	e012      	b.n	20001ada <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001ab4:	687b      	ldr	r3, [r7, #4]
20001ab6:	691b      	ldr	r3, [r3, #16]
20001ab8:	2b00      	cmp	r3, #0
20001aba:	d013      	beq.n	20001ae4 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001abc:	687b      	ldr	r3, [r7, #4]
20001abe:	f103 0310 	add.w	r3, r3, #16
20001ac2:	4618      	mov	r0, r3
20001ac4:	f000 fd82 	bl	200025cc <xTaskRemoveFromEventList>
20001ac8:	4603      	mov	r3, r0
20001aca:	2b00      	cmp	r3, #0
20001acc:	d001      	beq.n	20001ad2 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
20001ace:	f000 fe81 	bl	200027d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001ad2:	7bfb      	ldrb	r3, [r7, #15]
20001ad4:	f103 33ff 	add.w	r3, r3, #4294967295
20001ad8:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001ade:	2b00      	cmp	r3, #0
20001ae0:	dce8      	bgt.n	20001ab4 <prvUnlockQueue+0x64>
20001ae2:	e000      	b.n	20001ae6 <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
20001ae4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001ae6:	687b      	ldr	r3, [r7, #4]
20001ae8:	f04f 32ff 	mov.w	r2, #4294967295
20001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001af0:	f002 fa3c 	bl	20003f6c <vPortExitCritical>
}
20001af4:	f107 0710 	add.w	r7, r7, #16
20001af8:	46bd      	mov	sp, r7
20001afa:	bd80      	pop	{r7, pc}

20001afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001afc:	b580      	push	{r7, lr}
20001afe:	b084      	sub	sp, #16
20001b00:	af00      	add	r7, sp, #0
20001b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001b04:	f002 f9fa 	bl	20003efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001b08:	687b      	ldr	r3, [r7, #4]
20001b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001b0c:	2b00      	cmp	r3, #0
20001b0e:	d103      	bne.n	20001b18 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
20001b10:	f04f 0301 	mov.w	r3, #1
20001b14:	60fb      	str	r3, [r7, #12]
20001b16:	e002      	b.n	20001b1e <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001b18:	f04f 0300 	mov.w	r3, #0
20001b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001b1e:	f002 fa25 	bl	20003f6c <vPortExitCritical>

	return xReturn;
20001b22:	68fb      	ldr	r3, [r7, #12]
}
20001b24:	4618      	mov	r0, r3
20001b26:	f107 0710 	add.w	r7, r7, #16
20001b2a:	46bd      	mov	sp, r7
20001b2c:	bd80      	pop	{r7, pc}
20001b2e:	bf00      	nop

20001b30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001b30:	b580      	push	{r7, lr}
20001b32:	b084      	sub	sp, #16
20001b34:	af00      	add	r7, sp, #0
20001b36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001b38:	f002 f9e0 	bl	20003efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001b3c:	687b      	ldr	r3, [r7, #4]
20001b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001b40:	687b      	ldr	r3, [r7, #4]
20001b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001b44:	429a      	cmp	r2, r3
20001b46:	d103      	bne.n	20001b50 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
20001b48:	f04f 0301 	mov.w	r3, #1
20001b4c:	60fb      	str	r3, [r7, #12]
20001b4e:	e002      	b.n	20001b56 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
20001b50:	f04f 0300 	mov.w	r3, #0
20001b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001b56:	f002 fa09 	bl	20003f6c <vPortExitCritical>

	return xReturn;
20001b5a:	68fb      	ldr	r3, [r7, #12]
}
20001b5c:	4618      	mov	r0, r3
20001b5e:	f107 0710 	add.w	r7, r7, #16
20001b62:	46bd      	mov	sp, r7
20001b64:	bd80      	pop	{r7, pc}
20001b66:	bf00      	nop

20001b68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001b68:	b580      	push	{r7, lr}
20001b6a:	b086      	sub	sp, #24
20001b6c:	af00      	add	r7, sp, #0
20001b6e:	60f8      	str	r0, [r7, #12]
20001b70:	60b9      	str	r1, [r7, #8]
20001b72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001b74:	68fb      	ldr	r3, [r7, #12]
20001b76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001b78:	f002 f9c0 	bl	20003efc <vPortEnterCritical>
20001b7c:	697b      	ldr	r3, [r7, #20]
20001b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001b82:	b2db      	uxtb	r3, r3
20001b84:	b25b      	sxtb	r3, r3
20001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
20001b8a:	d104      	bne.n	20001b96 <vQueueWaitForMessageRestricted+0x2e>
20001b8c:	697b      	ldr	r3, [r7, #20]
20001b8e:	f04f 0200 	mov.w	r2, #0
20001b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001b96:	697b      	ldr	r3, [r7, #20]
20001b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001b9c:	b2db      	uxtb	r3, r3
20001b9e:	b25b      	sxtb	r3, r3
20001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
20001ba4:	d104      	bne.n	20001bb0 <vQueueWaitForMessageRestricted+0x48>
20001ba6:	697b      	ldr	r3, [r7, #20]
20001ba8:	f04f 0200 	mov.w	r2, #0
20001bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001bb0:	f002 f9dc 	bl	20003f6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20001bb4:	697b      	ldr	r3, [r7, #20]
20001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001bb8:	2b00      	cmp	r3, #0
20001bba:	d107      	bne.n	20001bcc <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20001bbc:	697b      	ldr	r3, [r7, #20]
20001bbe:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001bc2:	4618      	mov	r0, r3
20001bc4:	68b9      	ldr	r1, [r7, #8]
20001bc6:	687a      	ldr	r2, [r7, #4]
20001bc8:	f000 fcd4 	bl	20002574 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20001bcc:	6978      	ldr	r0, [r7, #20]
20001bce:	f7ff ff3f 	bl	20001a50 <prvUnlockQueue>
	}
20001bd2:	f107 0718 	add.w	r7, r7, #24
20001bd6:	46bd      	mov	sp, r7
20001bd8:	bd80      	pop	{r7, pc}
20001bda:	bf00      	nop

20001bdc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20001bdc:	b580      	push	{r7, lr}
20001bde:	b08c      	sub	sp, #48	; 0x30
20001be0:	af04      	add	r7, sp, #16
20001be2:	60f8      	str	r0, [r7, #12]
20001be4:	60b9      	str	r1, [r7, #8]
20001be6:	603b      	str	r3, [r7, #0]
20001be8:	4613      	mov	r3, r2
20001bea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001bec:	88fb      	ldrh	r3, [r7, #6]
20001bee:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001bf2:	4618      	mov	r0, r3
20001bf4:	f001 fe38 	bl	20003868 <pvPortMalloc>
20001bf8:	4603      	mov	r3, r0
20001bfa:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
20001bfc:	69fb      	ldr	r3, [r7, #28]
20001bfe:	2b00      	cmp	r3, #0
20001c00:	d010      	beq.n	20001c24 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
20001c02:	f04f 005c 	mov.w	r0, #92	; 0x5c
20001c06:	f001 fe2f 	bl	20003868 <pvPortMalloc>
20001c0a:	4603      	mov	r3, r0
20001c0c:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
20001c0e:	697b      	ldr	r3, [r7, #20]
20001c10:	2b00      	cmp	r3, #0
20001c12:	d003      	beq.n	20001c1c <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20001c14:	697b      	ldr	r3, [r7, #20]
20001c16:	69fa      	ldr	r2, [r7, #28]
20001c18:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20001c1a:	e006      	b.n	20001c2a <xTaskCreate+0x4e>
20001c1c:	69f8      	ldr	r0, [r7, #28]
20001c1e:	f001 ff1f 	bl	20003a60 <vPortFree>
20001c22:	e002      	b.n	20001c2a <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
20001c24:	f04f 0300 	mov.w	r3, #0
20001c28:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20001c2a:	697b      	ldr	r3, [r7, #20]
20001c2c:	2b00      	cmp	r3, #0
20001c2e:	d016      	beq.n	20001c5e <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
20001c30:	88fb      	ldrh	r3, [r7, #6]
20001c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001c34:	9200      	str	r2, [sp, #0]
20001c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001c38:	9201      	str	r2, [sp, #4]
20001c3a:	697a      	ldr	r2, [r7, #20]
20001c3c:	9202      	str	r2, [sp, #8]
20001c3e:	f04f 0200 	mov.w	r2, #0
20001c42:	9203      	str	r2, [sp, #12]
20001c44:	68f8      	ldr	r0, [r7, #12]
20001c46:	68b9      	ldr	r1, [r7, #8]
20001c48:	461a      	mov	r2, r3
20001c4a:	683b      	ldr	r3, [r7, #0]
20001c4c:	f000 f810 	bl	20001c70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001c50:	6978      	ldr	r0, [r7, #20]
20001c52:	f000 f8a3 	bl	20001d9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20001c56:	f04f 0301 	mov.w	r3, #1
20001c5a:	61bb      	str	r3, [r7, #24]
20001c5c:	e002      	b.n	20001c64 <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
20001c5e:	f04f 33ff 	mov.w	r3, #4294967295
20001c62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
20001c64:	69bb      	ldr	r3, [r7, #24]
	}
20001c66:	4618      	mov	r0, r3
20001c68:	f107 0720 	add.w	r7, r7, #32
20001c6c:	46bd      	mov	sp, r7
20001c6e:	bd80      	pop	{r7, pc}

20001c70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
20001c70:	b580      	push	{r7, lr}
20001c72:	b088      	sub	sp, #32
20001c74:	af00      	add	r7, sp, #0
20001c76:	60f8      	str	r0, [r7, #12]
20001c78:	60b9      	str	r1, [r7, #8]
20001c7a:	607a      	str	r2, [r7, #4]
20001c7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
20001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c82:	687b      	ldr	r3, [r7, #4]
20001c84:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001c88:	4610      	mov	r0, r2
20001c8a:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20001c8e:	461a      	mov	r2, r3
20001c90:	f005 f956 	bl	20006f40 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
20001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c98:	687b      	ldr	r3, [r7, #4]
20001c9a:	f103 33ff 	add.w	r3, r3, #4294967295
20001c9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001ca2:	4413      	add	r3, r2
20001ca4:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
20001ca6:	697b      	ldr	r3, [r7, #20]
20001ca8:	f023 0307 	bic.w	r3, r3, #7
20001cac:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20001cae:	697b      	ldr	r3, [r7, #20]
20001cb0:	f003 0307 	and.w	r3, r3, #7
20001cb4:	2b00      	cmp	r3, #0
20001cb6:	d009      	beq.n	20001ccc <prvInitialiseNewTask+0x5c>
20001cb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001cbc:	f383 8811 	msr	BASEPRI, r3
20001cc0:	f3bf 8f6f 	isb	sy
20001cc4:	f3bf 8f4f 	dsb	sy
20001cc8:	61fb      	str	r3, [r7, #28]
20001cca:	e7fe      	b.n	20001cca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001ccc:	f04f 0300 	mov.w	r3, #0
20001cd0:	61bb      	str	r3, [r7, #24]
20001cd2:	e012      	b.n	20001cfa <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20001cd4:	69b9      	ldr	r1, [r7, #24]
20001cd6:	68ba      	ldr	r2, [r7, #8]
20001cd8:	69bb      	ldr	r3, [r7, #24]
20001cda:	4413      	add	r3, r2
20001cdc:	781a      	ldrb	r2, [r3, #0]
20001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ce0:	440b      	add	r3, r1
20001ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
20001ce6:	68ba      	ldr	r2, [r7, #8]
20001ce8:	69bb      	ldr	r3, [r7, #24]
20001cea:	4413      	add	r3, r2
20001cec:	781b      	ldrb	r3, [r3, #0]
20001cee:	2b00      	cmp	r3, #0
20001cf0:	d007      	beq.n	20001d02 <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001cf2:	69bb      	ldr	r3, [r7, #24]
20001cf4:	f103 0301 	add.w	r3, r3, #1
20001cf8:	61bb      	str	r3, [r7, #24]
20001cfa:	69bb      	ldr	r3, [r7, #24]
20001cfc:	2b09      	cmp	r3, #9
20001cfe:	d9e9      	bls.n	20001cd4 <prvInitialiseNewTask+0x64>
20001d00:	e000      	b.n	20001d04 <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
20001d02:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d06:	f04f 0200 	mov.w	r2, #0
20001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d10:	2b04      	cmp	r3, #4
20001d12:	d902      	bls.n	20001d1a <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20001d14:	f04f 0304 	mov.w	r3, #4
20001d18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001d24:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
20001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d28:	f04f 0200 	mov.w	r2, #0
20001d2c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
20001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d30:	f103 0304 	add.w	r3, r3, #4
20001d34:	4618      	mov	r0, r3
20001d36:	f7ff f951 	bl	20000fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d3c:	f103 0318 	add.w	r3, r3, #24
20001d40:	4618      	mov	r0, r3
20001d42:	f7ff f94b 	bl	20000fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
20001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d4e:	f1c3 0205 	rsb	r2, r3, #5
20001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
20001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
20001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d5e:	f04f 0200 	mov.w	r2, #0
20001d62:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
20001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d66:	f04f 0200 	mov.w	r2, #0
20001d6a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d6e:	f04f 0200 	mov.w	r2, #0
20001d72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
20001d76:	6978      	ldr	r0, [r7, #20]
20001d78:	68f9      	ldr	r1, [r7, #12]
20001d7a:	683a      	ldr	r2, [r7, #0]
20001d7c:	f001 ffbc 	bl	20003cf8 <pxPortInitialiseStack>
20001d80:	4603      	mov	r3, r0
20001d82:	461a      	mov	r2, r3
20001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
20001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001d8a:	2b00      	cmp	r3, #0
20001d8c:	d002      	beq.n	20001d94 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
20001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001d94:	f107 0720 	add.w	r7, r7, #32
20001d98:	46bd      	mov	sp, r7
20001d9a:	bd80      	pop	{r7, pc}

20001d9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20001d9c:	b580      	push	{r7, lr}
20001d9e:	b082      	sub	sp, #8
20001da0:	af00      	add	r7, sp, #0
20001da2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
20001da4:	f002 f8aa 	bl	20003efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20001da8:	f247 230c 	movw	r3, #29196	; 0x720c
20001dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001db0:	681b      	ldr	r3, [r3, #0]
20001db2:	f103 0201 	add.w	r2, r3, #1
20001db6:	f247 230c 	movw	r3, #29196	; 0x720c
20001dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dbe:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
20001dc0:	f247 1334 	movw	r3, #28980	; 0x7134
20001dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dc8:	681b      	ldr	r3, [r3, #0]
20001dca:	2b00      	cmp	r3, #0
20001dcc:	d10f      	bne.n	20001dee <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
20001dce:	f247 1334 	movw	r3, #28980	; 0x7134
20001dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001dd6:	687a      	ldr	r2, [r7, #4]
20001dd8:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20001dda:	f247 230c 	movw	r3, #29196	; 0x720c
20001dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001de2:	681b      	ldr	r3, [r3, #0]
20001de4:	2b01      	cmp	r3, #1
20001de6:	d11a      	bne.n	20001e1e <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20001de8:	f000 fd1c 	bl	20002824 <prvInitialiseTaskLists>
20001dec:	e018      	b.n	20001e20 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
20001dee:	f247 2318 	movw	r3, #29208	; 0x7218
20001df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001df6:	681b      	ldr	r3, [r3, #0]
20001df8:	2b00      	cmp	r3, #0
20001dfa:	d111      	bne.n	20001e20 <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
20001dfc:	f247 1334 	movw	r3, #28980	; 0x7134
20001e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e04:	681b      	ldr	r3, [r3, #0]
20001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e08:	687b      	ldr	r3, [r7, #4]
20001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001e0c:	429a      	cmp	r2, r3
20001e0e:	d807      	bhi.n	20001e20 <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
20001e10:	f247 1334 	movw	r3, #28980	; 0x7134
20001e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e18:	687a      	ldr	r2, [r7, #4]
20001e1a:	601a      	str	r2, [r3, #0]
20001e1c:	e000      	b.n	20001e20 <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20001e1e:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20001e20:	f247 2328 	movw	r3, #29224	; 0x7228
20001e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e28:	681b      	ldr	r3, [r3, #0]
20001e2a:	f103 0201 	add.w	r2, r3, #1
20001e2e:	f247 2328 	movw	r3, #29224	; 0x7228
20001e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e36:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
20001e38:	f247 2328 	movw	r3, #29224	; 0x7228
20001e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e40:	681a      	ldr	r2, [r3, #0]
20001e42:	687b      	ldr	r3, [r7, #4]
20001e44:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
20001e46:	687b      	ldr	r3, [r7, #4]
20001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001e4a:	f04f 0201 	mov.w	r2, #1
20001e4e:	fa02 f203 	lsl.w	r2, r2, r3
20001e52:	f247 2314 	movw	r3, #29204	; 0x7214
20001e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e5a:	681b      	ldr	r3, [r3, #0]
20001e5c:	ea42 0203 	orr.w	r2, r2, r3
20001e60:	f247 2314 	movw	r3, #29204	; 0x7214
20001e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e68:	601a      	str	r2, [r3, #0]
20001e6a:	687b      	ldr	r3, [r7, #4]
20001e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e6e:	4613      	mov	r3, r2
20001e70:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001e74:	4413      	add	r3, r2
20001e76:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001e7a:	461a      	mov	r2, r3
20001e7c:	f247 1338 	movw	r3, #28984	; 0x7138
20001e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e84:	441a      	add	r2, r3
20001e86:	687b      	ldr	r3, [r7, #4]
20001e88:	f103 0304 	add.w	r3, r3, #4
20001e8c:	4610      	mov	r0, r2
20001e8e:	4619      	mov	r1, r3
20001e90:	f7ff f8b2 	bl	20000ff8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20001e94:	f002 f86a 	bl	20003f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
20001e98:	f247 2318 	movw	r3, #29208	; 0x7218
20001e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ea0:	681b      	ldr	r3, [r3, #0]
20001ea2:	2b00      	cmp	r3, #0
20001ea4:	d014      	beq.n	20001ed0 <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20001ea6:	f247 1334 	movw	r3, #28980	; 0x7134
20001eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001eae:	681b      	ldr	r3, [r3, #0]
20001eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001eb2:	687b      	ldr	r3, [r7, #4]
20001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001eb6:	429a      	cmp	r2, r3
20001eb8:	d20a      	bcs.n	20001ed0 <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
20001eba:	f64e 5304 	movw	r3, #60676	; 0xed04
20001ebe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001ec6:	601a      	str	r2, [r3, #0]
20001ec8:	f3bf 8f4f 	dsb	sy
20001ecc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001ed0:	f107 0708 	add.w	r7, r7, #8
20001ed4:	46bd      	mov	sp, r7
20001ed6:	bd80      	pop	{r7, pc}

20001ed8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
20001ed8:	b580      	push	{r7, lr}
20001eda:	b086      	sub	sp, #24
20001edc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
20001ede:	f04f 0300 	mov.w	r3, #0
20001ee2:	9300      	str	r3, [sp, #0]
20001ee4:	f247 2330 	movw	r3, #29232	; 0x7230
20001ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001eec:	9301      	str	r3, [sp, #4]
20001eee:	f242 70ed 	movw	r0, #10221	; 0x27ed
20001ef2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001ef6:	f247 011c 	movw	r1, #28700	; 0x701c
20001efa:	f2c2 0100 	movt	r1, #8192	; 0x2000
20001efe:	f04f 0250 	mov.w	r2, #80	; 0x50
20001f02:	f04f 0300 	mov.w	r3, #0
20001f06:	f7ff fe69 	bl	20001bdc <xTaskCreate>
20001f0a:	4603      	mov	r3, r0
20001f0c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
20001f0e:	687b      	ldr	r3, [r7, #4]
20001f10:	2b01      	cmp	r3, #1
20001f12:	d103      	bne.n	20001f1c <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
20001f14:	f001 f8f4 	bl	20003100 <xTimerCreateTimerTask>
20001f18:	4603      	mov	r3, r0
20001f1a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
20001f1c:	687b      	ldr	r3, [r7, #4]
20001f1e:	2b01      	cmp	r3, #1
20001f20:	d122      	bne.n	20001f68 <vTaskStartScheduler+0x90>
20001f22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001f26:	f383 8811 	msr	BASEPRI, r3
20001f2a:	f3bf 8f6f 	isb	sy
20001f2e:	f3bf 8f4f 	dsb	sy
20001f32:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
20001f34:	f247 232c 	movw	r3, #29228	; 0x722c
20001f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f3c:	f04f 32ff 	mov.w	r2, #4294967295
20001f40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
20001f42:	f247 2318 	movw	r3, #29208	; 0x7218
20001f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f4a:	f04f 0201 	mov.w	r2, #1
20001f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
20001f50:	f247 2310 	movw	r3, #29200	; 0x7210
20001f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f58:	f04f 0200 	mov.w	r2, #0
20001f5c:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
20001f5e:	f7fe f9df 	bl	20000320 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
20001f62:	f001 ff45 	bl	20003df0 <xPortStartScheduler>
20001f66:	e00d      	b.n	20001f84 <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20001f68:	687b      	ldr	r3, [r7, #4]
20001f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
20001f6e:	d109      	bne.n	20001f84 <vTaskStartScheduler+0xac>
20001f70:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001f74:	f383 8811 	msr	BASEPRI, r3
20001f78:	f3bf 8f6f 	isb	sy
20001f7c:	f3bf 8f4f 	dsb	sy
20001f80:	60fb      	str	r3, [r7, #12]
20001f82:	e7fe      	b.n	20001f82 <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
20001f84:	f107 0710 	add.w	r7, r7, #16
20001f88:	46bd      	mov	sp, r7
20001f8a:	bd80      	pop	{r7, pc}

20001f8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
20001f8c:	b480      	push	{r7}
20001f8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
20001f90:	f247 2334 	movw	r3, #29236	; 0x7234
20001f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f98:	681b      	ldr	r3, [r3, #0]
20001f9a:	f103 0201 	add.w	r2, r3, #1
20001f9e:	f247 2334 	movw	r3, #29236	; 0x7234
20001fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001fa6:	601a      	str	r2, [r3, #0]
}
20001fa8:	46bd      	mov	sp, r7
20001faa:	bc80      	pop	{r7}
20001fac:	4770      	bx	lr
20001fae:	bf00      	nop

20001fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
20001fb0:	b580      	push	{r7, lr}
20001fb2:	b084      	sub	sp, #16
20001fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
20001fb6:	f04f 0300 	mov.w	r3, #0
20001fba:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
20001fbc:	f04f 0300 	mov.w	r3, #0
20001fc0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
20001fc2:	f247 2334 	movw	r3, #29236	; 0x7234
20001fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001fca:	681b      	ldr	r3, [r3, #0]
20001fcc:	2b00      	cmp	r3, #0
20001fce:	d109      	bne.n	20001fe4 <xTaskResumeAll+0x34>
20001fd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001fd4:	f383 8811 	msr	BASEPRI, r3
20001fd8:	f3bf 8f6f 	isb	sy
20001fdc:	f3bf 8f4f 	dsb	sy
20001fe0:	60fb      	str	r3, [r7, #12]
20001fe2:	e7fe      	b.n	20001fe2 <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20001fe4:	f001 ff8a 	bl	20003efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
20001fe8:	f247 2334 	movw	r3, #29236	; 0x7234
20001fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ff0:	681b      	ldr	r3, [r3, #0]
20001ff2:	f103 32ff 	add.w	r2, r3, #4294967295
20001ff6:	f247 2334 	movw	r3, #29236	; 0x7234
20001ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ffe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002000:	f247 2334 	movw	r3, #29236	; 0x7234
20002004:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002008:	681b      	ldr	r3, [r3, #0]
2000200a:	2b00      	cmp	r3, #0
2000200c:	f040 8098 	bne.w	20002140 <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
20002010:	f247 230c 	movw	r3, #29196	; 0x720c
20002014:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002018:	681b      	ldr	r3, [r3, #0]
2000201a:	2b00      	cmp	r3, #0
2000201c:	f000 8090 	beq.w	20002140 <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002020:	e04a      	b.n	200020b8 <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
20002022:	f247 13cc 	movw	r3, #29132	; 0x71cc
20002026:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000202a:	68db      	ldr	r3, [r3, #12]
2000202c:	68db      	ldr	r3, [r3, #12]
2000202e:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002030:	683b      	ldr	r3, [r7, #0]
20002032:	f103 0318 	add.w	r3, r3, #24
20002036:	4618      	mov	r0, r3
20002038:	f7ff f83c 	bl	200010b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2000203c:	683b      	ldr	r3, [r7, #0]
2000203e:	f103 0304 	add.w	r3, r3, #4
20002042:	4618      	mov	r0, r3
20002044:	f7ff f836 	bl	200010b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20002048:	683b      	ldr	r3, [r7, #0]
2000204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000204c:	f04f 0201 	mov.w	r2, #1
20002050:	fa02 f203 	lsl.w	r2, r2, r3
20002054:	f247 2314 	movw	r3, #29204	; 0x7214
20002058:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000205c:	681b      	ldr	r3, [r3, #0]
2000205e:	ea42 0203 	orr.w	r2, r2, r3
20002062:	f247 2314 	movw	r3, #29204	; 0x7214
20002066:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000206a:	601a      	str	r2, [r3, #0]
2000206c:	683b      	ldr	r3, [r7, #0]
2000206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002070:	4613      	mov	r3, r2
20002072:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002076:	4413      	add	r3, r2
20002078:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000207c:	461a      	mov	r2, r3
2000207e:	f247 1338 	movw	r3, #28984	; 0x7138
20002082:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002086:	441a      	add	r2, r3
20002088:	683b      	ldr	r3, [r7, #0]
2000208a:	f103 0304 	add.w	r3, r3, #4
2000208e:	4610      	mov	r0, r2
20002090:	4619      	mov	r1, r3
20002092:	f7fe ffb1 	bl	20000ff8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002096:	683b      	ldr	r3, [r7, #0]
20002098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000209a:	f247 1334 	movw	r3, #28980	; 0x7134
2000209e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020a2:	681b      	ldr	r3, [r3, #0]
200020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200020a6:	429a      	cmp	r2, r3
200020a8:	d306      	bcc.n	200020b8 <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
200020aa:	f247 2320 	movw	r3, #29216	; 0x7220
200020ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020b2:	f04f 0201 	mov.w	r2, #1
200020b6:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200020b8:	f247 13cc 	movw	r3, #29132	; 0x71cc
200020bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020c0:	681b      	ldr	r3, [r3, #0]
200020c2:	2b00      	cmp	r3, #0
200020c4:	d1ad      	bne.n	20002022 <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
200020c6:	683b      	ldr	r3, [r7, #0]
200020c8:	2b00      	cmp	r3, #0
200020ca:	d001      	beq.n	200020d0 <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
200020cc:	f000 fc58 	bl	20002980 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
200020d0:	f247 231c 	movw	r3, #29212	; 0x721c
200020d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020d8:	681b      	ldr	r3, [r3, #0]
200020da:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
200020dc:	68bb      	ldr	r3, [r7, #8]
200020de:	2b00      	cmp	r3, #0
200020e0:	d019      	beq.n	20002116 <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
200020e2:	f000 f845 	bl	20002170 <xTaskIncrementTick>
200020e6:	4603      	mov	r3, r0
200020e8:	2b00      	cmp	r3, #0
200020ea:	d006      	beq.n	200020fa <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
200020ec:	f247 2320 	movw	r3, #29216	; 0x7220
200020f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020f4:	f04f 0201 	mov.w	r2, #1
200020f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
200020fa:	68bb      	ldr	r3, [r7, #8]
200020fc:	f103 33ff 	add.w	r3, r3, #4294967295
20002100:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
20002102:	68bb      	ldr	r3, [r7, #8]
20002104:	2b00      	cmp	r3, #0
20002106:	d1ec      	bne.n	200020e2 <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
20002108:	f247 231c 	movw	r3, #29212	; 0x721c
2000210c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002110:	f04f 0200 	mov.w	r2, #0
20002114:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
20002116:	f247 2320 	movw	r3, #29216	; 0x7220
2000211a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000211e:	681b      	ldr	r3, [r3, #0]
20002120:	2b00      	cmp	r3, #0
20002122:	d00d      	beq.n	20002140 <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
20002124:	f04f 0301 	mov.w	r3, #1
20002128:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
2000212a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000212e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002136:	601a      	str	r2, [r3, #0]
20002138:	f3bf 8f4f 	dsb	sy
2000213c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002140:	f001 ff14 	bl	20003f6c <vPortExitCritical>

	return xAlreadyYielded;
20002144:	687b      	ldr	r3, [r7, #4]
}
20002146:	4618      	mov	r0, r3
20002148:	f107 0710 	add.w	r7, r7, #16
2000214c:	46bd      	mov	sp, r7
2000214e:	bd80      	pop	{r7, pc}

20002150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002150:	b480      	push	{r7}
20002152:	b083      	sub	sp, #12
20002154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
20002156:	f247 2310 	movw	r3, #29200	; 0x7210
2000215a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000215e:	681b      	ldr	r3, [r3, #0]
20002160:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
20002162:	687b      	ldr	r3, [r7, #4]
}
20002164:	4618      	mov	r0, r3
20002166:	f107 070c 	add.w	r7, r7, #12
2000216a:	46bd      	mov	sp, r7
2000216c:	bc80      	pop	{r7}
2000216e:	4770      	bx	lr

20002170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
20002170:	b580      	push	{r7, lr}
20002172:	b086      	sub	sp, #24
20002174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
20002176:	f04f 0300 	mov.w	r3, #0
2000217a:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000217c:	f247 2334 	movw	r3, #29236	; 0x7234
20002180:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002184:	681b      	ldr	r3, [r3, #0]
20002186:	2b00      	cmp	r3, #0
20002188:	f040 80dc 	bne.w	20002344 <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
2000218c:	f247 2310 	movw	r3, #29200	; 0x7210
20002190:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002194:	681b      	ldr	r3, [r3, #0]
20002196:	f103 0301 	add.w	r3, r3, #1
2000219a:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
2000219c:	f247 2310 	movw	r3, #29200	; 0x7210
200021a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021a4:	68fa      	ldr	r2, [r7, #12]
200021a6:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
200021a8:	68fb      	ldr	r3, [r7, #12]
200021aa:	2b00      	cmp	r3, #0
200021ac:	d135      	bne.n	2000221a <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
200021ae:	f247 13c4 	movw	r3, #29124	; 0x71c4
200021b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021b6:	681b      	ldr	r3, [r3, #0]
200021b8:	681b      	ldr	r3, [r3, #0]
200021ba:	2b00      	cmp	r3, #0
200021bc:	d009      	beq.n	200021d2 <xTaskIncrementTick+0x62>
200021be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200021c2:	f383 8811 	msr	BASEPRI, r3
200021c6:	f3bf 8f6f 	isb	sy
200021ca:	f3bf 8f4f 	dsb	sy
200021ce:	617b      	str	r3, [r7, #20]
200021d0:	e7fe      	b.n	200021d0 <xTaskIncrementTick+0x60>
200021d2:	f247 13c4 	movw	r3, #29124	; 0x71c4
200021d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021da:	681b      	ldr	r3, [r3, #0]
200021dc:	613b      	str	r3, [r7, #16]
200021de:	f247 13c8 	movw	r3, #29128	; 0x71c8
200021e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021e6:	681a      	ldr	r2, [r3, #0]
200021e8:	f247 13c4 	movw	r3, #29124	; 0x71c4
200021ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021f0:	601a      	str	r2, [r3, #0]
200021f2:	f247 13c8 	movw	r3, #29128	; 0x71c8
200021f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021fa:	693a      	ldr	r2, [r7, #16]
200021fc:	601a      	str	r2, [r3, #0]
200021fe:	f247 2324 	movw	r3, #29220	; 0x7224
20002202:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002206:	681b      	ldr	r3, [r3, #0]
20002208:	f103 0201 	add.w	r2, r3, #1
2000220c:	f247 2324 	movw	r3, #29220	; 0x7224
20002210:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002214:	601a      	str	r2, [r3, #0]
20002216:	f000 fbb3 	bl	20002980 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
2000221a:	f247 232c 	movw	r3, #29228	; 0x722c
2000221e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002222:	681b      	ldr	r3, [r3, #0]
20002224:	68fa      	ldr	r2, [r7, #12]
20002226:	429a      	cmp	r2, r3
20002228:	d373      	bcc.n	20002312 <xTaskIncrementTick+0x1a2>
2000222a:	e000      	b.n	2000222e <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
2000222c:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2000222e:	f247 13c4 	movw	r3, #29124	; 0x71c4
20002232:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002236:	681b      	ldr	r3, [r3, #0]
20002238:	681b      	ldr	r3, [r3, #0]
2000223a:	2b00      	cmp	r3, #0
2000223c:	d102      	bne.n	20002244 <xTaskIncrementTick+0xd4>
2000223e:	f04f 0301 	mov.w	r3, #1
20002242:	e001      	b.n	20002248 <xTaskIncrementTick+0xd8>
20002244:	f04f 0300 	mov.w	r3, #0
20002248:	2b00      	cmp	r3, #0
2000224a:	d007      	beq.n	2000225c <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000224c:	f247 232c 	movw	r3, #29228	; 0x722c
20002250:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002254:	f04f 32ff 	mov.w	r2, #4294967295
20002258:	601a      	str	r2, [r3, #0]
					break;
2000225a:	e05a      	b.n	20002312 <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2000225c:	f247 13c4 	movw	r3, #29124	; 0x71c4
20002260:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002264:	681b      	ldr	r3, [r3, #0]
20002266:	68db      	ldr	r3, [r3, #12]
20002268:	68db      	ldr	r3, [r3, #12]
2000226a:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2000226c:	683b      	ldr	r3, [r7, #0]
2000226e:	685b      	ldr	r3, [r3, #4]
20002270:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
20002272:	68fa      	ldr	r2, [r7, #12]
20002274:	687b      	ldr	r3, [r7, #4]
20002276:	429a      	cmp	r2, r3
20002278:	d206      	bcs.n	20002288 <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
2000227a:	f247 232c 	movw	r3, #29228	; 0x722c
2000227e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002282:	687a      	ldr	r2, [r7, #4]
20002284:	601a      	str	r2, [r3, #0]
						break;
20002286:	e044      	b.n	20002312 <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002288:	683b      	ldr	r3, [r7, #0]
2000228a:	f103 0304 	add.w	r3, r3, #4
2000228e:	4618      	mov	r0, r3
20002290:	f7fe ff10 	bl	200010b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20002294:	683b      	ldr	r3, [r7, #0]
20002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002298:	2b00      	cmp	r3, #0
2000229a:	d005      	beq.n	200022a8 <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2000229c:	683b      	ldr	r3, [r7, #0]
2000229e:	f103 0318 	add.w	r3, r3, #24
200022a2:	4618      	mov	r0, r3
200022a4:	f7fe ff06 	bl	200010b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
200022a8:	683b      	ldr	r3, [r7, #0]
200022aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200022ac:	f04f 0201 	mov.w	r2, #1
200022b0:	fa02 f203 	lsl.w	r2, r2, r3
200022b4:	f247 2314 	movw	r3, #29204	; 0x7214
200022b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022bc:	681b      	ldr	r3, [r3, #0]
200022be:	ea42 0203 	orr.w	r2, r2, r3
200022c2:	f247 2314 	movw	r3, #29204	; 0x7214
200022c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022ca:	601a      	str	r2, [r3, #0]
200022cc:	683b      	ldr	r3, [r7, #0]
200022ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022d0:	4613      	mov	r3, r2
200022d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022d6:	4413      	add	r3, r2
200022d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022dc:	461a      	mov	r2, r3
200022de:	f247 1338 	movw	r3, #28984	; 0x7138
200022e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022e6:	441a      	add	r2, r3
200022e8:	683b      	ldr	r3, [r7, #0]
200022ea:	f103 0304 	add.w	r3, r3, #4
200022ee:	4610      	mov	r0, r2
200022f0:	4619      	mov	r1, r3
200022f2:	f7fe fe81 	bl	20000ff8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
200022f6:	683b      	ldr	r3, [r7, #0]
200022f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022fa:	f247 1334 	movw	r3, #28980	; 0x7134
200022fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002302:	681b      	ldr	r3, [r3, #0]
20002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002306:	429a      	cmp	r2, r3
20002308:	d390      	bcc.n	2000222c <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
2000230a:	f04f 0301 	mov.w	r3, #1
2000230e:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002310:	e78d      	b.n	2000222e <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
20002312:	f247 1334 	movw	r3, #28980	; 0x7134
20002316:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000231a:	681b      	ldr	r3, [r3, #0]
2000231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000231e:	4613      	mov	r3, r2
20002320:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002324:	4413      	add	r3, r2
20002326:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000232a:	461a      	mov	r2, r3
2000232c:	f247 1338 	movw	r3, #28984	; 0x7138
20002330:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002334:	4413      	add	r3, r2
20002336:	681b      	ldr	r3, [r3, #0]
20002338:	2b01      	cmp	r3, #1
2000233a:	d910      	bls.n	2000235e <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
2000233c:	f04f 0301 	mov.w	r3, #1
20002340:	60bb      	str	r3, [r7, #8]
20002342:	e00d      	b.n	20002360 <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
20002344:	f247 231c 	movw	r3, #29212	; 0x721c
20002348:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000234c:	681b      	ldr	r3, [r3, #0]
2000234e:	f103 0201 	add.w	r2, r3, #1
20002352:	f247 231c 	movw	r3, #29212	; 0x721c
20002356:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000235a:	601a      	str	r2, [r3, #0]
2000235c:	e000      	b.n	20002360 <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
2000235e:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
20002360:	f247 2320 	movw	r3, #29216	; 0x7220
20002364:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002368:	681b      	ldr	r3, [r3, #0]
2000236a:	2b00      	cmp	r3, #0
2000236c:	d002      	beq.n	20002374 <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
2000236e:	f04f 0301 	mov.w	r3, #1
20002372:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
20002374:	68bb      	ldr	r3, [r7, #8]
}
20002376:	4618      	mov	r0, r3
20002378:	f107 0718 	add.w	r7, r7, #24
2000237c:	46bd      	mov	sp, r7
2000237e:	bd80      	pop	{r7, pc}

20002380 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
20002380:	b580      	push	{r7, lr}
20002382:	b088      	sub	sp, #32
20002384:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
20002386:	f247 2334 	movw	r3, #29236	; 0x7234
2000238a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000238e:	681b      	ldr	r3, [r3, #0]
20002390:	2b00      	cmp	r3, #0
20002392:	d007      	beq.n	200023a4 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
20002394:	f247 2320 	movw	r3, #29216	; 0x7220
20002398:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000239c:	f04f 0201 	mov.w	r2, #1
200023a0:	601a      	str	r2, [r3, #0]
200023a2:	e0bc      	b.n	2000251e <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
200023a4:	f247 2320 	movw	r3, #29216	; 0x7220
200023a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023ac:	f04f 0200 	mov.w	r2, #0
200023b0:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
200023b2:	f7fd ffd9 	bl	20000368 <ulGetRunTimeCounterValue>
200023b6:	4602      	mov	r2, r0
200023b8:	f247 233c 	movw	r3, #29244	; 0x723c
200023bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023c0:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
200023c2:	f247 233c 	movw	r3, #29244	; 0x723c
200023c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023ca:	681a      	ldr	r2, [r3, #0]
200023cc:	f247 2338 	movw	r3, #29240	; 0x7238
200023d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023d4:	681b      	ldr	r3, [r3, #0]
200023d6:	429a      	cmp	r2, r3
200023d8:	d913      	bls.n	20002402 <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
200023da:	f247 1334 	movw	r3, #28980	; 0x7134
200023de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023e2:	681a      	ldr	r2, [r3, #0]
200023e4:	6d11      	ldr	r1, [r2, #80]	; 0x50
200023e6:	f247 233c 	movw	r3, #29244	; 0x723c
200023ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023ee:	6818      	ldr	r0, [r3, #0]
200023f0:	f247 2338 	movw	r3, #29240	; 0x7238
200023f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023f8:	681b      	ldr	r3, [r3, #0]
200023fa:	ebc3 0300 	rsb	r3, r3, r0
200023fe:	440b      	add	r3, r1
20002400:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
20002402:	f247 233c 	movw	r3, #29244	; 0x723c
20002406:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000240a:	681a      	ldr	r2, [r3, #0]
2000240c:	f247 2338 	movw	r3, #29240	; 0x7238
20002410:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002414:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
20002416:	f247 1334 	movw	r3, #28980	; 0x7134
2000241a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000241e:	681b      	ldr	r3, [r3, #0]
20002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002422:	607b      	str	r3, [r7, #4]
20002424:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
20002428:	60bb      	str	r3, [r7, #8]
2000242a:	687b      	ldr	r3, [r7, #4]
2000242c:	681a      	ldr	r2, [r3, #0]
2000242e:	68bb      	ldr	r3, [r7, #8]
20002430:	429a      	cmp	r2, r3
20002432:	d114      	bne.n	2000245e <vTaskSwitchContext+0xde>
20002434:	687b      	ldr	r3, [r7, #4]
20002436:	f103 0304 	add.w	r3, r3, #4
2000243a:	681a      	ldr	r2, [r3, #0]
2000243c:	68bb      	ldr	r3, [r7, #8]
2000243e:	429a      	cmp	r2, r3
20002440:	d10d      	bne.n	2000245e <vTaskSwitchContext+0xde>
20002442:	687b      	ldr	r3, [r7, #4]
20002444:	f103 0308 	add.w	r3, r3, #8
20002448:	681a      	ldr	r2, [r3, #0]
2000244a:	68bb      	ldr	r3, [r7, #8]
2000244c:	429a      	cmp	r2, r3
2000244e:	d106      	bne.n	2000245e <vTaskSwitchContext+0xde>
20002450:	687b      	ldr	r3, [r7, #4]
20002452:	f103 030c 	add.w	r3, r3, #12
20002456:	681a      	ldr	r2, [r3, #0]
20002458:	68bb      	ldr	r3, [r7, #8]
2000245a:	429a      	cmp	r2, r3
2000245c:	d00f      	beq.n	2000247e <vTaskSwitchContext+0xfe>
2000245e:	f247 1334 	movw	r3, #28980	; 0x7134
20002462:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002466:	681a      	ldr	r2, [r3, #0]
20002468:	f247 1334 	movw	r3, #28980	; 0x7134
2000246c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002470:	681b      	ldr	r3, [r3, #0]
20002472:	f103 0334 	add.w	r3, r3, #52	; 0x34
20002476:	4610      	mov	r0, r2
20002478:	4619      	mov	r1, r3
2000247a:	f7fd ffe3 	bl	20000444 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
2000247e:	f247 2314 	movw	r3, #29204	; 0x7214
20002482:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002486:	681b      	ldr	r3, [r3, #0]
20002488:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
2000248a:	697b      	ldr	r3, [r7, #20]
2000248c:	fab3 f383 	clz	r3, r3
20002490:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
20002492:	7efb      	ldrb	r3, [r7, #27]
20002494:	f1c3 031f 	rsb	r3, r3, #31
20002498:	60fb      	str	r3, [r7, #12]
2000249a:	68fa      	ldr	r2, [r7, #12]
2000249c:	4613      	mov	r3, r2
2000249e:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024a2:	4413      	add	r3, r2
200024a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024a8:	461a      	mov	r2, r3
200024aa:	f247 1338 	movw	r3, #28984	; 0x7138
200024ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024b2:	4413      	add	r3, r2
200024b4:	681b      	ldr	r3, [r3, #0]
200024b6:	2b00      	cmp	r3, #0
200024b8:	d109      	bne.n	200024ce <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200024ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200024be:	f383 8811 	msr	BASEPRI, r3
200024c2:	f3bf 8f6f 	isb	sy
200024c6:	f3bf 8f4f 	dsb	sy
200024ca:	61fb      	str	r3, [r7, #28]
200024cc:	e7fe      	b.n	200024cc <vTaskSwitchContext+0x14c>
200024ce:	68fa      	ldr	r2, [r7, #12]
200024d0:	4613      	mov	r3, r2
200024d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024d6:	4413      	add	r3, r2
200024d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024dc:	461a      	mov	r2, r3
200024de:	f247 1338 	movw	r3, #28984	; 0x7138
200024e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024e6:	4413      	add	r3, r2
200024e8:	613b      	str	r3, [r7, #16]
200024ea:	693b      	ldr	r3, [r7, #16]
200024ec:	685b      	ldr	r3, [r3, #4]
200024ee:	685a      	ldr	r2, [r3, #4]
200024f0:	693b      	ldr	r3, [r7, #16]
200024f2:	605a      	str	r2, [r3, #4]
200024f4:	693b      	ldr	r3, [r7, #16]
200024f6:	685a      	ldr	r2, [r3, #4]
200024f8:	693b      	ldr	r3, [r7, #16]
200024fa:	f103 0308 	add.w	r3, r3, #8
200024fe:	429a      	cmp	r2, r3
20002500:	d104      	bne.n	2000250c <vTaskSwitchContext+0x18c>
20002502:	693b      	ldr	r3, [r7, #16]
20002504:	685b      	ldr	r3, [r3, #4]
20002506:	685a      	ldr	r2, [r3, #4]
20002508:	693b      	ldr	r3, [r7, #16]
2000250a:	605a      	str	r2, [r3, #4]
2000250c:	693b      	ldr	r3, [r7, #16]
2000250e:	685b      	ldr	r3, [r3, #4]
20002510:	68db      	ldr	r3, [r3, #12]
20002512:	461a      	mov	r2, r3
20002514:	f247 1334 	movw	r3, #28980	; 0x7134
20002518:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000251c:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
2000251e:	f107 0720 	add.w	r7, r7, #32
20002522:	46bd      	mov	sp, r7
20002524:	bd80      	pop	{r7, pc}
20002526:	bf00      	nop

20002528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002528:	b580      	push	{r7, lr}
2000252a:	b084      	sub	sp, #16
2000252c:	af00      	add	r7, sp, #0
2000252e:	6078      	str	r0, [r7, #4]
20002530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002532:	687b      	ldr	r3, [r7, #4]
20002534:	2b00      	cmp	r3, #0
20002536:	d109      	bne.n	2000254c <vTaskPlaceOnEventList+0x24>
20002538:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000253c:	f383 8811 	msr	BASEPRI, r3
20002540:	f3bf 8f6f 	isb	sy
20002544:	f3bf 8f4f 	dsb	sy
20002548:	60fb      	str	r3, [r7, #12]
2000254a:	e7fe      	b.n	2000254a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2000254c:	f247 1334 	movw	r3, #28980	; 0x7134
20002550:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002554:	681b      	ldr	r3, [r3, #0]
20002556:	f103 0318 	add.w	r3, r3, #24
2000255a:	6878      	ldr	r0, [r7, #4]
2000255c:	4619      	mov	r1, r3
2000255e:	f7fe fd6f 	bl	20001040 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002562:	6838      	ldr	r0, [r7, #0]
20002564:	f04f 0101 	mov.w	r1, #1
20002568:	f000 fd42 	bl	20002ff0 <prvAddCurrentTaskToDelayedList>
}
2000256c:	f107 0710 	add.w	r7, r7, #16
20002570:	46bd      	mov	sp, r7
20002572:	bd80      	pop	{r7, pc}

20002574 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002574:	b580      	push	{r7, lr}
20002576:	b086      	sub	sp, #24
20002578:	af00      	add	r7, sp, #0
2000257a:	60f8      	str	r0, [r7, #12]
2000257c:	60b9      	str	r1, [r7, #8]
2000257e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002580:	68fb      	ldr	r3, [r7, #12]
20002582:	2b00      	cmp	r3, #0
20002584:	d109      	bne.n	2000259a <vTaskPlaceOnEventListRestricted+0x26>
20002586:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000258a:	f383 8811 	msr	BASEPRI, r3
2000258e:	f3bf 8f6f 	isb	sy
20002592:	f3bf 8f4f 	dsb	sy
20002596:	617b      	str	r3, [r7, #20]
20002598:	e7fe      	b.n	20002598 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2000259a:	f247 1334 	movw	r3, #28980	; 0x7134
2000259e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025a2:	681b      	ldr	r3, [r3, #0]
200025a4:	f103 0318 	add.w	r3, r3, #24
200025a8:	68f8      	ldr	r0, [r7, #12]
200025aa:	4619      	mov	r1, r3
200025ac:	f7fe fd24 	bl	20000ff8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
200025b0:	687b      	ldr	r3, [r7, #4]
200025b2:	2b00      	cmp	r3, #0
200025b4:	d002      	beq.n	200025bc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
200025b6:	f04f 33ff 	mov.w	r3, #4294967295
200025ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
200025bc:	68b8      	ldr	r0, [r7, #8]
200025be:	6879      	ldr	r1, [r7, #4]
200025c0:	f000 fd16 	bl	20002ff0 <prvAddCurrentTaskToDelayedList>
	}
200025c4:	f107 0718 	add.w	r7, r7, #24
200025c8:	46bd      	mov	sp, r7
200025ca:	bd80      	pop	{r7, pc}

200025cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
200025cc:	b580      	push	{r7, lr}
200025ce:	b086      	sub	sp, #24
200025d0:	af00      	add	r7, sp, #0
200025d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
200025d4:	687b      	ldr	r3, [r7, #4]
200025d6:	68db      	ldr	r3, [r3, #12]
200025d8:	68db      	ldr	r3, [r3, #12]
200025da:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
200025dc:	68fb      	ldr	r3, [r7, #12]
200025de:	2b00      	cmp	r3, #0
200025e0:	d109      	bne.n	200025f6 <xTaskRemoveFromEventList+0x2a>
200025e2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200025e6:	f383 8811 	msr	BASEPRI, r3
200025ea:	f3bf 8f6f 	isb	sy
200025ee:	f3bf 8f4f 	dsb	sy
200025f2:	617b      	str	r3, [r7, #20]
200025f4:	e7fe      	b.n	200025f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
200025f6:	68fb      	ldr	r3, [r7, #12]
200025f8:	f103 0318 	add.w	r3, r3, #24
200025fc:	4618      	mov	r0, r3
200025fe:	f7fe fd59 	bl	200010b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002602:	f247 2334 	movw	r3, #29236	; 0x7234
20002606:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000260a:	681b      	ldr	r3, [r3, #0]
2000260c:	2b00      	cmp	r3, #0
2000260e:	d12d      	bne.n	2000266c <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002610:	68fb      	ldr	r3, [r7, #12]
20002612:	f103 0304 	add.w	r3, r3, #4
20002616:	4618      	mov	r0, r3
20002618:	f7fe fd4c 	bl	200010b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
2000261c:	68fb      	ldr	r3, [r7, #12]
2000261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002620:	f04f 0201 	mov.w	r2, #1
20002624:	fa02 f203 	lsl.w	r2, r2, r3
20002628:	f247 2314 	movw	r3, #29204	; 0x7214
2000262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002630:	681b      	ldr	r3, [r3, #0]
20002632:	ea42 0203 	orr.w	r2, r2, r3
20002636:	f247 2314 	movw	r3, #29204	; 0x7214
2000263a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000263e:	601a      	str	r2, [r3, #0]
20002640:	68fb      	ldr	r3, [r7, #12]
20002642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002644:	4613      	mov	r3, r2
20002646:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000264a:	4413      	add	r3, r2
2000264c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002650:	461a      	mov	r2, r3
20002652:	f247 1338 	movw	r3, #28984	; 0x7138
20002656:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000265a:	441a      	add	r2, r3
2000265c:	68fb      	ldr	r3, [r7, #12]
2000265e:	f103 0304 	add.w	r3, r3, #4
20002662:	4610      	mov	r0, r2
20002664:	4619      	mov	r1, r3
20002666:	f7fe fcc7 	bl	20000ff8 <vListInsertEnd>
2000266a:	e009      	b.n	20002680 <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2000266c:	68fb      	ldr	r3, [r7, #12]
2000266e:	f103 0318 	add.w	r3, r3, #24
20002672:	f247 10cc 	movw	r0, #29132	; 0x71cc
20002676:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000267a:	4619      	mov	r1, r3
2000267c:	f7fe fcbc 	bl	20000ff8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002680:	68fb      	ldr	r3, [r7, #12]
20002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002684:	f247 1334 	movw	r3, #28980	; 0x7134
20002688:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000268c:	681b      	ldr	r3, [r3, #0]
2000268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002690:	429a      	cmp	r2, r3
20002692:	d90a      	bls.n	200026aa <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002694:	f04f 0301 	mov.w	r3, #1
20002698:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
2000269a:	f247 2320 	movw	r3, #29216	; 0x7220
2000269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026a2:	f04f 0201 	mov.w	r2, #1
200026a6:	601a      	str	r2, [r3, #0]
200026a8:	e002      	b.n	200026b0 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
200026aa:	f04f 0300 	mov.w	r3, #0
200026ae:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
200026b0:	693b      	ldr	r3, [r7, #16]
}
200026b2:	4618      	mov	r0, r3
200026b4:	f107 0718 	add.w	r7, r7, #24
200026b8:	46bd      	mov	sp, r7
200026ba:	bd80      	pop	{r7, pc}

200026bc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
200026bc:	b480      	push	{r7}
200026be:	b085      	sub	sp, #20
200026c0:	af00      	add	r7, sp, #0
200026c2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
200026c4:	687b      	ldr	r3, [r7, #4]
200026c6:	2b00      	cmp	r3, #0
200026c8:	d109      	bne.n	200026de <vTaskSetTimeOutState+0x22>
200026ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200026ce:	f383 8811 	msr	BASEPRI, r3
200026d2:	f3bf 8f6f 	isb	sy
200026d6:	f3bf 8f4f 	dsb	sy
200026da:	60fb      	str	r3, [r7, #12]
200026dc:	e7fe      	b.n	200026dc <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
200026de:	f247 2324 	movw	r3, #29220	; 0x7224
200026e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026e6:	681a      	ldr	r2, [r3, #0]
200026e8:	687b      	ldr	r3, [r7, #4]
200026ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
200026ec:	f247 2310 	movw	r3, #29200	; 0x7210
200026f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026f4:	681a      	ldr	r2, [r3, #0]
200026f6:	687b      	ldr	r3, [r7, #4]
200026f8:	605a      	str	r2, [r3, #4]
}
200026fa:	f107 0714 	add.w	r7, r7, #20
200026fe:	46bd      	mov	sp, r7
20002700:	bc80      	pop	{r7}
20002702:	4770      	bx	lr

20002704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002704:	b580      	push	{r7, lr}
20002706:	b086      	sub	sp, #24
20002708:	af00      	add	r7, sp, #0
2000270a:	6078      	str	r0, [r7, #4]
2000270c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
2000270e:	687b      	ldr	r3, [r7, #4]
20002710:	2b00      	cmp	r3, #0
20002712:	d109      	bne.n	20002728 <xTaskCheckForTimeOut+0x24>
20002714:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002718:	f383 8811 	msr	BASEPRI, r3
2000271c:	f3bf 8f6f 	isb	sy
20002720:	f3bf 8f4f 	dsb	sy
20002724:	613b      	str	r3, [r7, #16]
20002726:	e7fe      	b.n	20002726 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
20002728:	683b      	ldr	r3, [r7, #0]
2000272a:	2b00      	cmp	r3, #0
2000272c:	d109      	bne.n	20002742 <xTaskCheckForTimeOut+0x3e>
2000272e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002732:	f383 8811 	msr	BASEPRI, r3
20002736:	f3bf 8f6f 	isb	sy
2000273a:	f3bf 8f4f 	dsb	sy
2000273e:	617b      	str	r3, [r7, #20]
20002740:	e7fe      	b.n	20002740 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
20002742:	f001 fbdb 	bl	20003efc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002746:	f247 2310 	movw	r3, #29200	; 0x7210
2000274a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000274e:	681b      	ldr	r3, [r3, #0]
20002750:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002752:	683b      	ldr	r3, [r7, #0]
20002754:	681b      	ldr	r3, [r3, #0]
20002756:	f1b3 3fff 	cmp.w	r3, #4294967295
2000275a:	d103      	bne.n	20002764 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
2000275c:	f04f 0300 	mov.w	r3, #0
20002760:	60bb      	str	r3, [r7, #8]
20002762:	e02e      	b.n	200027c2 <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002764:	687b      	ldr	r3, [r7, #4]
20002766:	681a      	ldr	r2, [r3, #0]
20002768:	f247 2324 	movw	r3, #29220	; 0x7224
2000276c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002770:	681b      	ldr	r3, [r3, #0]
20002772:	429a      	cmp	r2, r3
20002774:	d008      	beq.n	20002788 <xTaskCheckForTimeOut+0x84>
20002776:	687b      	ldr	r3, [r7, #4]
20002778:	685a      	ldr	r2, [r3, #4]
2000277a:	68fb      	ldr	r3, [r7, #12]
2000277c:	429a      	cmp	r2, r3
2000277e:	d803      	bhi.n	20002788 <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002780:	f04f 0301 	mov.w	r3, #1
20002784:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002786:	e01c      	b.n	200027c2 <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002788:	687b      	ldr	r3, [r7, #4]
2000278a:	685b      	ldr	r3, [r3, #4]
2000278c:	68fa      	ldr	r2, [r7, #12]
2000278e:	ebc3 0202 	rsb	r2, r3, r2
20002792:	683b      	ldr	r3, [r7, #0]
20002794:	681b      	ldr	r3, [r3, #0]
20002796:	429a      	cmp	r2, r3
20002798:	d210      	bcs.n	200027bc <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
2000279a:	683b      	ldr	r3, [r7, #0]
2000279c:	681a      	ldr	r2, [r3, #0]
2000279e:	687b      	ldr	r3, [r7, #4]
200027a0:	6859      	ldr	r1, [r3, #4]
200027a2:	68fb      	ldr	r3, [r7, #12]
200027a4:	ebc3 0301 	rsb	r3, r3, r1
200027a8:	441a      	add	r2, r3
200027aa:	683b      	ldr	r3, [r7, #0]
200027ac:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
200027ae:	6878      	ldr	r0, [r7, #4]
200027b0:	f7ff ff84 	bl	200026bc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
200027b4:	f04f 0300 	mov.w	r3, #0
200027b8:	60bb      	str	r3, [r7, #8]
200027ba:	e002      	b.n	200027c2 <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
200027bc:	f04f 0301 	mov.w	r3, #1
200027c0:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
200027c2:	f001 fbd3 	bl	20003f6c <vPortExitCritical>

	return xReturn;
200027c6:	68bb      	ldr	r3, [r7, #8]
}
200027c8:	4618      	mov	r0, r3
200027ca:	f107 0718 	add.w	r7, r7, #24
200027ce:	46bd      	mov	sp, r7
200027d0:	bd80      	pop	{r7, pc}
200027d2:	bf00      	nop

200027d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
200027d4:	b480      	push	{r7}
200027d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
200027d8:	f247 2320 	movw	r3, #29216	; 0x7220
200027dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027e0:	f04f 0201 	mov.w	r2, #1
200027e4:	601a      	str	r2, [r3, #0]
}
200027e6:	46bd      	mov	sp, r7
200027e8:	bc80      	pop	{r7}
200027ea:	4770      	bx	lr

200027ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
200027ec:	b580      	push	{r7, lr}
200027ee:	b082      	sub	sp, #8
200027f0:	af00      	add	r7, sp, #0
200027f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
200027f4:	f000 f868 	bl	200028c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
200027f8:	f247 1338 	movw	r3, #28984	; 0x7138
200027fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002800:	681b      	ldr	r3, [r3, #0]
20002802:	2b01      	cmp	r3, #1
20002804:	d90a      	bls.n	2000281c <prvIdleTask+0x30>
			{
				taskYIELD();
20002806:	f64e 5304 	movw	r3, #60676	; 0xed04
2000280a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000280e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002812:	601a      	str	r2, [r3, #0]
20002814:	f3bf 8f4f 	dsb	sy
20002818:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
2000281c:	f7fd fe0c 	bl	20000438 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
20002820:	e7e8      	b.n	200027f4 <prvIdleTask+0x8>
20002822:	bf00      	nop

20002824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002824:	b580      	push	{r7, lr}
20002826:	b082      	sub	sp, #8
20002828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
2000282a:	f04f 0300 	mov.w	r3, #0
2000282e:	607b      	str	r3, [r7, #4]
20002830:	e013      	b.n	2000285a <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002832:	687a      	ldr	r2, [r7, #4]
20002834:	4613      	mov	r3, r2
20002836:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000283a:	4413      	add	r3, r2
2000283c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002840:	461a      	mov	r2, r3
20002842:	f247 1338 	movw	r3, #28984	; 0x7138
20002846:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000284a:	4413      	add	r3, r2
2000284c:	4618      	mov	r0, r3
2000284e:	f7fe fba1 	bl	20000f94 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002852:	687b      	ldr	r3, [r7, #4]
20002854:	f103 0301 	add.w	r3, r3, #1
20002858:	607b      	str	r3, [r7, #4]
2000285a:	687b      	ldr	r3, [r7, #4]
2000285c:	2b04      	cmp	r3, #4
2000285e:	d9e8      	bls.n	20002832 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
20002860:	f247 109c 	movw	r0, #29084	; 0x719c
20002864:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002868:	f7fe fb94 	bl	20000f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
2000286c:	f247 10b0 	movw	r0, #29104	; 0x71b0
20002870:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002874:	f7fe fb8e 	bl	20000f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002878:	f247 10cc 	movw	r0, #29132	; 0x71cc
2000287c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002880:	f7fe fb88 	bl	20000f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002884:	f247 10e0 	movw	r0, #29152	; 0x71e0
20002888:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000288c:	f7fe fb82 	bl	20000f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002890:	f247 10f8 	movw	r0, #29176	; 0x71f8
20002894:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002898:	f7fe fb7c 	bl	20000f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
2000289c:	f247 13c4 	movw	r3, #29124	; 0x71c4
200028a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028a4:	f247 129c 	movw	r2, #29084	; 0x719c
200028a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200028ac:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
200028ae:	f247 13c8 	movw	r3, #29128	; 0x71c8
200028b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028b6:	f247 12b0 	movw	r2, #29104	; 0x71b0
200028ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
200028be:	601a      	str	r2, [r3, #0]
}
200028c0:	f107 0708 	add.w	r7, r7, #8
200028c4:	46bd      	mov	sp, r7
200028c6:	bd80      	pop	{r7, pc}

200028c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
200028c8:	b580      	push	{r7, lr}
200028ca:	b082      	sub	sp, #8
200028cc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
200028ce:	e03c      	b.n	2000294a <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
200028d0:	f7ff fb5c 	bl	20001f8c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
200028d4:	f247 13e0 	movw	r3, #29152	; 0x71e0
200028d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028dc:	681b      	ldr	r3, [r3, #0]
200028de:	2b00      	cmp	r3, #0
200028e0:	bf14      	ite	ne
200028e2:	2300      	movne	r3, #0
200028e4:	2301      	moveq	r3, #1
200028e6:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
200028e8:	f7ff fb62 	bl	20001fb0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
200028ec:	683b      	ldr	r3, [r7, #0]
200028ee:	2b00      	cmp	r3, #0
200028f0:	d12b      	bne.n	2000294a <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
200028f2:	f001 fb03 	bl	20003efc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
200028f6:	f247 13e0 	movw	r3, #29152	; 0x71e0
200028fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028fe:	68db      	ldr	r3, [r3, #12]
20002900:	68db      	ldr	r3, [r3, #12]
20002902:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002904:	687b      	ldr	r3, [r7, #4]
20002906:	f103 0304 	add.w	r3, r3, #4
2000290a:	4618      	mov	r0, r3
2000290c:	f7fe fbd2 	bl	200010b4 <uxListRemove>
					--uxCurrentNumberOfTasks;
20002910:	f247 230c 	movw	r3, #29196	; 0x720c
20002914:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002918:	681b      	ldr	r3, [r3, #0]
2000291a:	f103 32ff 	add.w	r2, r3, #4294967295
2000291e:	f247 230c 	movw	r3, #29196	; 0x720c
20002922:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002926:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
20002928:	f247 13f4 	movw	r3, #29172	; 0x71f4
2000292c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002930:	681b      	ldr	r3, [r3, #0]
20002932:	f103 32ff 	add.w	r2, r3, #4294967295
20002936:	f247 13f4 	movw	r3, #29172	; 0x71f4
2000293a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000293e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
20002940:	f001 fb14 	bl	20003f6c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
20002944:	6878      	ldr	r0, [r7, #4]
20002946:	f000 f80b 	bl	20002960 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
2000294a:	f247 13f4 	movw	r3, #29172	; 0x71f4
2000294e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002952:	681b      	ldr	r3, [r3, #0]
20002954:	2b00      	cmp	r3, #0
20002956:	d1bb      	bne.n	200028d0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002958:	f107 0708 	add.w	r7, r7, #8
2000295c:	46bd      	mov	sp, r7
2000295e:	bd80      	pop	{r7, pc}

20002960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20002960:	b580      	push	{r7, lr}
20002962:	b082      	sub	sp, #8
20002964:	af00      	add	r7, sp, #0
20002966:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
20002968:	687b      	ldr	r3, [r7, #4]
2000296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000296c:	4618      	mov	r0, r3
2000296e:	f001 f877 	bl	20003a60 <vPortFree>
			vPortFree( pxTCB );
20002972:	6878      	ldr	r0, [r7, #4]
20002974:	f001 f874 	bl	20003a60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20002978:	f107 0708 	add.w	r7, r7, #8
2000297c:	46bd      	mov	sp, r7
2000297e:	bd80      	pop	{r7, pc}

20002980 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002980:	b480      	push	{r7}
20002982:	b083      	sub	sp, #12
20002984:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002986:	f247 13c4 	movw	r3, #29124	; 0x71c4
2000298a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000298e:	681b      	ldr	r3, [r3, #0]
20002990:	681b      	ldr	r3, [r3, #0]
20002992:	2b00      	cmp	r3, #0
20002994:	d102      	bne.n	2000299c <prvResetNextTaskUnblockTime+0x1c>
20002996:	f04f 0301 	mov.w	r3, #1
2000299a:	e001      	b.n	200029a0 <prvResetNextTaskUnblockTime+0x20>
2000299c:	f04f 0300 	mov.w	r3, #0
200029a0:	2b00      	cmp	r3, #0
200029a2:	d007      	beq.n	200029b4 <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
200029a4:	f247 232c 	movw	r3, #29228	; 0x722c
200029a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029ac:	f04f 32ff 	mov.w	r2, #4294967295
200029b0:	601a      	str	r2, [r3, #0]
200029b2:	e00e      	b.n	200029d2 <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
200029b4:	f247 13c4 	movw	r3, #29124	; 0x71c4
200029b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029bc:	681b      	ldr	r3, [r3, #0]
200029be:	68db      	ldr	r3, [r3, #12]
200029c0:	68db      	ldr	r3, [r3, #12]
200029c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
200029c4:	687b      	ldr	r3, [r7, #4]
200029c6:	685a      	ldr	r2, [r3, #4]
200029c8:	f247 232c 	movw	r3, #29228	; 0x722c
200029cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029d0:	601a      	str	r2, [r3, #0]
	}
}
200029d2:	f107 070c 	add.w	r7, r7, #12
200029d6:	46bd      	mov	sp, r7
200029d8:	bc80      	pop	{r7}
200029da:	4770      	bx	lr

200029dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
200029dc:	b480      	push	{r7}
200029de:	b083      	sub	sp, #12
200029e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
200029e2:	f247 2318 	movw	r3, #29208	; 0x7218
200029e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029ea:	681b      	ldr	r3, [r3, #0]
200029ec:	2b00      	cmp	r3, #0
200029ee:	d103      	bne.n	200029f8 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
200029f0:	f04f 0301 	mov.w	r3, #1
200029f4:	607b      	str	r3, [r7, #4]
200029f6:	e00d      	b.n	20002a14 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200029f8:	f247 2334 	movw	r3, #29236	; 0x7234
200029fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a00:	681b      	ldr	r3, [r3, #0]
20002a02:	2b00      	cmp	r3, #0
20002a04:	d103      	bne.n	20002a0e <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
20002a06:	f04f 0302 	mov.w	r3, #2
20002a0a:	607b      	str	r3, [r7, #4]
20002a0c:	e002      	b.n	20002a14 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20002a0e:	f04f 0300 	mov.w	r3, #0
20002a12:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
20002a14:	687b      	ldr	r3, [r7, #4]
	}
20002a16:	4618      	mov	r0, r3
20002a18:	f107 070c 	add.w	r7, r7, #12
20002a1c:	46bd      	mov	sp, r7
20002a1e:	bc80      	pop	{r7}
20002a20:	4770      	bx	lr
20002a22:	bf00      	nop

20002a24 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
20002a24:	b580      	push	{r7, lr}
20002a26:	b084      	sub	sp, #16
20002a28:	af00      	add	r7, sp, #0
20002a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20002a2c:	687b      	ldr	r3, [r7, #4]
20002a2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
20002a30:	687b      	ldr	r3, [r7, #4]
20002a32:	2b00      	cmp	r3, #0
20002a34:	f000 8098 	beq.w	20002b68 <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
20002a38:	68fb      	ldr	r3, [r7, #12]
20002a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a3c:	f247 1334 	movw	r3, #28980	; 0x7134
20002a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a44:	681b      	ldr	r3, [r3, #0]
20002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a48:	429a      	cmp	r2, r3
20002a4a:	f080 808d 	bcs.w	20002b68 <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20002a4e:	68fb      	ldr	r3, [r7, #12]
20002a50:	699b      	ldr	r3, [r3, #24]
20002a52:	2b00      	cmp	r3, #0
20002a54:	db09      	blt.n	20002a6a <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002a56:	f247 1334 	movw	r3, #28980	; 0x7134
20002a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a5e:	681b      	ldr	r3, [r3, #0]
20002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a62:	f1c3 0205 	rsb	r2, r3, #5
20002a66:	68fb      	ldr	r3, [r7, #12]
20002a68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20002a6a:	68fb      	ldr	r3, [r7, #12]
20002a6c:	6959      	ldr	r1, [r3, #20]
20002a6e:	68fb      	ldr	r3, [r7, #12]
20002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a72:	4613      	mov	r3, r2
20002a74:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a78:	4413      	add	r3, r2
20002a7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a7e:	461a      	mov	r2, r3
20002a80:	f247 1338 	movw	r3, #28984	; 0x7138
20002a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a88:	4413      	add	r3, r2
20002a8a:	4299      	cmp	r1, r3
20002a8c:	d102      	bne.n	20002a94 <vTaskPriorityInherit+0x70>
20002a8e:	f04f 0301 	mov.w	r3, #1
20002a92:	e001      	b.n	20002a98 <vTaskPriorityInherit+0x74>
20002a94:	f04f 0300 	mov.w	r3, #0
20002a98:	2b00      	cmp	r3, #0
20002a9a:	d05d      	beq.n	20002b58 <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002a9c:	68fb      	ldr	r3, [r7, #12]
20002a9e:	f103 0304 	add.w	r3, r3, #4
20002aa2:	4618      	mov	r0, r3
20002aa4:	f7fe fb06 	bl	200010b4 <uxListRemove>
20002aa8:	4603      	mov	r3, r0
20002aaa:	2b00      	cmp	r3, #0
20002aac:	d124      	bne.n	20002af8 <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20002aae:	68fb      	ldr	r3, [r7, #12]
20002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002ab2:	4613      	mov	r3, r2
20002ab4:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002ab8:	4413      	add	r3, r2
20002aba:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002abe:	461a      	mov	r2, r3
20002ac0:	f247 1338 	movw	r3, #28984	; 0x7138
20002ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ac8:	4413      	add	r3, r2
20002aca:	681b      	ldr	r3, [r3, #0]
20002acc:	2b00      	cmp	r3, #0
20002ace:	d113      	bne.n	20002af8 <vTaskPriorityInherit+0xd4>
20002ad0:	68fb      	ldr	r3, [r7, #12]
20002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002ad4:	f04f 0201 	mov.w	r2, #1
20002ad8:	fa02 f303 	lsl.w	r3, r2, r3
20002adc:	ea6f 0203 	mvn.w	r2, r3
20002ae0:	f247 2314 	movw	r3, #29204	; 0x7214
20002ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ae8:	681b      	ldr	r3, [r3, #0]
20002aea:	ea02 0203 	and.w	r2, r2, r3
20002aee:	f247 2314 	movw	r3, #29204	; 0x7214
20002af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002af6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20002af8:	f247 1334 	movw	r3, #28980	; 0x7134
20002afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b00:	681b      	ldr	r3, [r3, #0]
20002b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b04:	68fb      	ldr	r3, [r7, #12]
20002b06:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
20002b08:	68fb      	ldr	r3, [r7, #12]
20002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002b0c:	f04f 0201 	mov.w	r2, #1
20002b10:	fa02 f203 	lsl.w	r2, r2, r3
20002b14:	f247 2314 	movw	r3, #29204	; 0x7214
20002b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b1c:	681b      	ldr	r3, [r3, #0]
20002b1e:	ea42 0203 	orr.w	r2, r2, r3
20002b22:	f247 2314 	movw	r3, #29204	; 0x7214
20002b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b2a:	601a      	str	r2, [r3, #0]
20002b2c:	68fb      	ldr	r3, [r7, #12]
20002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b30:	4613      	mov	r3, r2
20002b32:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b36:	4413      	add	r3, r2
20002b38:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b3c:	461a      	mov	r2, r3
20002b3e:	f247 1338 	movw	r3, #28984	; 0x7138
20002b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b46:	441a      	add	r2, r3
20002b48:	68fb      	ldr	r3, [r7, #12]
20002b4a:	f103 0304 	add.w	r3, r3, #4
20002b4e:	4610      	mov	r0, r2
20002b50:	4619      	mov	r1, r3
20002b52:	f7fe fa51 	bl	20000ff8 <vListInsertEnd>
20002b56:	e007      	b.n	20002b68 <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20002b58:	f247 1334 	movw	r3, #28980	; 0x7134
20002b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b60:	681b      	ldr	r3, [r3, #0]
20002b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b64:	68fb      	ldr	r3, [r7, #12]
20002b66:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20002b68:	f107 0710 	add.w	r7, r7, #16
20002b6c:	46bd      	mov	sp, r7
20002b6e:	bd80      	pop	{r7, pc}

20002b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20002b70:	b580      	push	{r7, lr}
20002b72:	b086      	sub	sp, #24
20002b74:	af00      	add	r7, sp, #0
20002b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20002b78:	687b      	ldr	r3, [r7, #4]
20002b7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
20002b7c:	f04f 0300 	mov.w	r3, #0
20002b80:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
20002b82:	687b      	ldr	r3, [r7, #4]
20002b84:	2b00      	cmp	r3, #0
20002b86:	f000 8092 	beq.w	20002cae <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20002b8a:	f247 1334 	movw	r3, #28980	; 0x7134
20002b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b92:	681b      	ldr	r3, [r3, #0]
20002b94:	68ba      	ldr	r2, [r7, #8]
20002b96:	429a      	cmp	r2, r3
20002b98:	d009      	beq.n	20002bae <xTaskPriorityDisinherit+0x3e>
20002b9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002b9e:	f383 8811 	msr	BASEPRI, r3
20002ba2:	f3bf 8f6f 	isb	sy
20002ba6:	f3bf 8f4f 	dsb	sy
20002baa:	613b      	str	r3, [r7, #16]
20002bac:	e7fe      	b.n	20002bac <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
20002bae:	68bb      	ldr	r3, [r7, #8]
20002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002bb2:	2b00      	cmp	r3, #0
20002bb4:	d109      	bne.n	20002bca <xTaskPriorityDisinherit+0x5a>
20002bb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002bba:	f383 8811 	msr	BASEPRI, r3
20002bbe:	f3bf 8f6f 	isb	sy
20002bc2:	f3bf 8f4f 	dsb	sy
20002bc6:	617b      	str	r3, [r7, #20]
20002bc8:	e7fe      	b.n	20002bc8 <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
20002bca:	68bb      	ldr	r3, [r7, #8]
20002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002bce:	f103 32ff 	add.w	r2, r3, #4294967295
20002bd2:	68bb      	ldr	r3, [r7, #8]
20002bd4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
20002bd6:	68bb      	ldr	r3, [r7, #8]
20002bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002bda:	68bb      	ldr	r3, [r7, #8]
20002bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002bde:	429a      	cmp	r2, r3
20002be0:	d065      	beq.n	20002cae <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
20002be2:	68bb      	ldr	r3, [r7, #8]
20002be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002be6:	2b00      	cmp	r3, #0
20002be8:	d161      	bne.n	20002cae <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002bea:	68bb      	ldr	r3, [r7, #8]
20002bec:	f103 0304 	add.w	r3, r3, #4
20002bf0:	4618      	mov	r0, r3
20002bf2:	f7fe fa5f 	bl	200010b4 <uxListRemove>
20002bf6:	4603      	mov	r3, r0
20002bf8:	2b00      	cmp	r3, #0
20002bfa:	d124      	bne.n	20002c46 <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20002bfc:	68bb      	ldr	r3, [r7, #8]
20002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c00:	4613      	mov	r3, r2
20002c02:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c06:	4413      	add	r3, r2
20002c08:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c0c:	461a      	mov	r2, r3
20002c0e:	f247 1338 	movw	r3, #28984	; 0x7138
20002c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c16:	4413      	add	r3, r2
20002c18:	681b      	ldr	r3, [r3, #0]
20002c1a:	2b00      	cmp	r3, #0
20002c1c:	d113      	bne.n	20002c46 <xTaskPriorityDisinherit+0xd6>
20002c1e:	68bb      	ldr	r3, [r7, #8]
20002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c22:	f04f 0201 	mov.w	r2, #1
20002c26:	fa02 f303 	lsl.w	r3, r2, r3
20002c2a:	ea6f 0203 	mvn.w	r2, r3
20002c2e:	f247 2314 	movw	r3, #29204	; 0x7214
20002c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c36:	681b      	ldr	r3, [r3, #0]
20002c38:	ea02 0203 	and.w	r2, r2, r3
20002c3c:	f247 2314 	movw	r3, #29204	; 0x7214
20002c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c44:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
20002c46:	68bb      	ldr	r3, [r7, #8]
20002c48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20002c4a:	68bb      	ldr	r3, [r7, #8]
20002c4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002c4e:	68bb      	ldr	r3, [r7, #8]
20002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c52:	f1c3 0205 	rsb	r2, r3, #5
20002c56:	68bb      	ldr	r3, [r7, #8]
20002c58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
20002c5a:	68bb      	ldr	r3, [r7, #8]
20002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c5e:	f04f 0201 	mov.w	r2, #1
20002c62:	fa02 f203 	lsl.w	r2, r2, r3
20002c66:	f247 2314 	movw	r3, #29204	; 0x7214
20002c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c6e:	681b      	ldr	r3, [r3, #0]
20002c70:	ea42 0203 	orr.w	r2, r2, r3
20002c74:	f247 2314 	movw	r3, #29204	; 0x7214
20002c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c7c:	601a      	str	r2, [r3, #0]
20002c7e:	68bb      	ldr	r3, [r7, #8]
20002c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c82:	4613      	mov	r3, r2
20002c84:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c88:	4413      	add	r3, r2
20002c8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c8e:	461a      	mov	r2, r3
20002c90:	f247 1338 	movw	r3, #28984	; 0x7138
20002c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c98:	441a      	add	r2, r3
20002c9a:	68bb      	ldr	r3, [r7, #8]
20002c9c:	f103 0304 	add.w	r3, r3, #4
20002ca0:	4610      	mov	r0, r2
20002ca2:	4619      	mov	r1, r3
20002ca4:	f7fe f9a8 	bl	20000ff8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20002ca8:	f04f 0301 	mov.w	r3, #1
20002cac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20002cae:	68fb      	ldr	r3, [r7, #12]
	}
20002cb0:	4618      	mov	r0, r3
20002cb2:	f107 0718 	add.w	r7, r7, #24
20002cb6:	46bd      	mov	sp, r7
20002cb8:	bd80      	pop	{r7, pc}
20002cba:	bf00      	nop

20002cbc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
20002cbc:	b480      	push	{r7}
20002cbe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
20002cc0:	f247 1334 	movw	r3, #28980	; 0x7134
20002cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cc8:	681b      	ldr	r3, [r3, #0]
20002cca:	2b00      	cmp	r3, #0
20002ccc:	d008      	beq.n	20002ce0 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
20002cce:	f247 1334 	movw	r3, #28980	; 0x7134
20002cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cd6:	681b      	ldr	r3, [r3, #0]
20002cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002cda:	f102 0201 	add.w	r2, r2, #1
20002cde:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
20002ce0:	f247 1334 	movw	r3, #28980	; 0x7134
20002ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ce8:	681b      	ldr	r3, [r3, #0]
	}
20002cea:	4618      	mov	r0, r3
20002cec:	46bd      	mov	sp, r7
20002cee:	bc80      	pop	{r7}
20002cf0:	4770      	bx	lr
20002cf2:	bf00      	nop

20002cf4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
20002cf4:	b580      	push	{r7, lr}
20002cf6:	b084      	sub	sp, #16
20002cf8:	af00      	add	r7, sp, #0
20002cfa:	6078      	str	r0, [r7, #4]
20002cfc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
20002cfe:	f001 f8fd 	bl	20003efc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
20002d02:	f247 1334 	movw	r3, #28980	; 0x7134
20002d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d0a:	681b      	ldr	r3, [r3, #0]
20002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002d0e:	2b00      	cmp	r3, #0
20002d10:	d11b      	bne.n	20002d4a <ulTaskNotifyTake+0x56>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
20002d12:	f247 1334 	movw	r3, #28980	; 0x7134
20002d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d1a:	681b      	ldr	r3, [r3, #0]
20002d1c:	f04f 0201 	mov.w	r2, #1
20002d20:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
20002d24:	683b      	ldr	r3, [r7, #0]
20002d26:	2b00      	cmp	r3, #0
20002d28:	d00f      	beq.n	20002d4a <ulTaskNotifyTake+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002d2a:	6838      	ldr	r0, [r7, #0]
20002d2c:	f04f 0101 	mov.w	r1, #1
20002d30:	f000 f95e 	bl	20002ff0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
20002d34:	f64e 5304 	movw	r3, #60676	; 0xed04
20002d38:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002d40:	601a      	str	r2, [r3, #0]
20002d42:	f3bf 8f4f 	dsb	sy
20002d46:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
20002d4a:	f001 f90f 	bl	20003f6c <vPortExitCritical>

		taskENTER_CRITICAL();
20002d4e:	f001 f8d5 	bl	20003efc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
20002d52:	f247 1334 	movw	r3, #28980	; 0x7134
20002d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d5a:	681b      	ldr	r3, [r3, #0]
20002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002d5e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
20002d60:	68fb      	ldr	r3, [r7, #12]
20002d62:	2b00      	cmp	r3, #0
20002d64:	d014      	beq.n	20002d90 <ulTaskNotifyTake+0x9c>
			{
				if( xClearCountOnExit != pdFALSE )
20002d66:	687b      	ldr	r3, [r7, #4]
20002d68:	2b00      	cmp	r3, #0
20002d6a:	d008      	beq.n	20002d7e <ulTaskNotifyTake+0x8a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
20002d6c:	f247 1334 	movw	r3, #28980	; 0x7134
20002d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d74:	681b      	ldr	r3, [r3, #0]
20002d76:	f04f 0200 	mov.w	r2, #0
20002d7a:	655a      	str	r2, [r3, #84]	; 0x54
20002d7c:	e008      	b.n	20002d90 <ulTaskNotifyTake+0x9c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
20002d7e:	f247 1334 	movw	r3, #28980	; 0x7134
20002d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d86:	681b      	ldr	r3, [r3, #0]
20002d88:	68fa      	ldr	r2, [r7, #12]
20002d8a:	f102 32ff 	add.w	r2, r2, #4294967295
20002d8e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20002d90:	f247 1334 	movw	r3, #28980	; 0x7134
20002d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d98:	681b      	ldr	r3, [r3, #0]
20002d9a:	f04f 0200 	mov.w	r2, #0
20002d9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
20002da2:	f001 f8e3 	bl	20003f6c <vPortExitCritical>

		return ulReturn;
20002da6:	68fb      	ldr	r3, [r7, #12]
	}
20002da8:	4618      	mov	r0, r3
20002daa:	f107 0710 	add.w	r7, r7, #16
20002dae:	46bd      	mov	sp, r7
20002db0:	bd80      	pop	{r7, pc}
20002db2:	bf00      	nop

20002db4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
20002db4:	b580      	push	{r7, lr}
20002db6:	b086      	sub	sp, #24
20002db8:	af00      	add	r7, sp, #0
20002dba:	60f8      	str	r0, [r7, #12]
20002dbc:	60b9      	str	r1, [r7, #8]
20002dbe:	607a      	str	r2, [r7, #4]
20002dc0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
20002dc2:	f001 f89b 	bl	20003efc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
20002dc6:	f247 1334 	movw	r3, #28980	; 0x7134
20002dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dce:	681b      	ldr	r3, [r3, #0]
20002dd0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
20002dd4:	b2db      	uxtb	r3, r3
20002dd6:	2b02      	cmp	r3, #2
20002dd8:	d027      	beq.n	20002e2a <xTaskNotifyWait+0x76>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
20002dda:	f247 1334 	movw	r3, #28980	; 0x7134
20002dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002de2:	681b      	ldr	r3, [r3, #0]
20002de4:	6d59      	ldr	r1, [r3, #84]	; 0x54
20002de6:	68fa      	ldr	r2, [r7, #12]
20002de8:	ea6f 0202 	mvn.w	r2, r2
20002dec:	ea01 0202 	and.w	r2, r1, r2
20002df0:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
20002df2:	f247 1334 	movw	r3, #28980	; 0x7134
20002df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dfa:	681b      	ldr	r3, [r3, #0]
20002dfc:	f04f 0201 	mov.w	r2, #1
20002e00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
20002e04:	683b      	ldr	r3, [r7, #0]
20002e06:	2b00      	cmp	r3, #0
20002e08:	d00f      	beq.n	20002e2a <xTaskNotifyWait+0x76>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002e0a:	6838      	ldr	r0, [r7, #0]
20002e0c:	f04f 0101 	mov.w	r1, #1
20002e10:	f000 f8ee 	bl	20002ff0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
20002e14:	f64e 5304 	movw	r3, #60676	; 0xed04
20002e18:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002e20:	601a      	str	r2, [r3, #0]
20002e22:	f3bf 8f4f 	dsb	sy
20002e26:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
20002e2a:	f001 f89f 	bl	20003f6c <vPortExitCritical>

		taskENTER_CRITICAL();
20002e2e:	f001 f865 	bl	20003efc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
20002e32:	687b      	ldr	r3, [r7, #4]
20002e34:	2b00      	cmp	r3, #0
20002e36:	d007      	beq.n	20002e48 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
20002e38:	f247 1334 	movw	r3, #28980	; 0x7134
20002e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e40:	681b      	ldr	r3, [r3, #0]
20002e42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20002e44:	687b      	ldr	r3, [r7, #4]
20002e46:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
20002e48:	f247 1334 	movw	r3, #28980	; 0x7134
20002e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e50:	681b      	ldr	r3, [r3, #0]
20002e52:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
20002e56:	b2db      	uxtb	r3, r3
20002e58:	2b01      	cmp	r3, #1
20002e5a:	d103      	bne.n	20002e64 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
20002e5c:	f04f 0300 	mov.w	r3, #0
20002e60:	617b      	str	r3, [r7, #20]
20002e62:	e00e      	b.n	20002e82 <xTaskNotifyWait+0xce>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
20002e64:	f247 1334 	movw	r3, #28980	; 0x7134
20002e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e6c:	681b      	ldr	r3, [r3, #0]
20002e6e:	6d59      	ldr	r1, [r3, #84]	; 0x54
20002e70:	68ba      	ldr	r2, [r7, #8]
20002e72:	ea6f 0202 	mvn.w	r2, r2
20002e76:	ea01 0202 	and.w	r2, r1, r2
20002e7a:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
20002e7c:	f04f 0301 	mov.w	r3, #1
20002e80:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20002e82:	f247 1334 	movw	r3, #28980	; 0x7134
20002e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e8a:	681b      	ldr	r3, [r3, #0]
20002e8c:	f04f 0200 	mov.w	r2, #0
20002e90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
20002e94:	f001 f86a 	bl	20003f6c <vPortExitCritical>

		return xReturn;
20002e98:	697b      	ldr	r3, [r7, #20]
	}
20002e9a:	4618      	mov	r0, r3
20002e9c:	f107 0718 	add.w	r7, r7, #24
20002ea0:	46bd      	mov	sp, r7
20002ea2:	bd80      	pop	{r7, pc}

20002ea4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
20002ea4:	b580      	push	{r7, lr}
20002ea6:	b08a      	sub	sp, #40	; 0x28
20002ea8:	af00      	add	r7, sp, #0
20002eaa:	6078      	str	r0, [r7, #4]
20002eac:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
20002eae:	687b      	ldr	r3, [r7, #4]
20002eb0:	2b00      	cmp	r3, #0
20002eb2:	d109      	bne.n	20002ec8 <vTaskNotifyGiveFromISR+0x24>
20002eb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002eb8:	f383 8811 	msr	BASEPRI, r3
20002ebc:	f3bf 8f6f 	isb	sy
20002ec0:	f3bf 8f4f 	dsb	sy
20002ec4:	617b      	str	r3, [r7, #20]
20002ec6:	e7fe      	b.n	20002ec6 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20002ec8:	f001 f8ec 	bl	200040a4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
20002ecc:	687b      	ldr	r3, [r7, #4]
20002ece:	60bb      	str	r3, [r7, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20002ed0:	f3ef 8211 	mrs	r2, BASEPRI
20002ed4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002ed8:	f383 8811 	msr	BASEPRI, r3
20002edc:	f3bf 8f6f 	isb	sy
20002ee0:	f3bf 8f4f 	dsb	sy
20002ee4:	61fa      	str	r2, [r7, #28]
20002ee6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
20002ee8:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20002eea:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
20002eec:	68bb      	ldr	r3, [r7, #8]
20002eee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
20002ef2:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
20002ef4:	68bb      	ldr	r3, [r7, #8]
20002ef6:	f04f 0202 	mov.w	r2, #2
20002efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
20002efe:	68bb      	ldr	r3, [r7, #8]
20002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002f02:	f103 0201 	add.w	r2, r3, #1
20002f06:	68bb      	ldr	r3, [r7, #8]
20002f08:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
20002f0a:	7bfb      	ldrb	r3, [r7, #15]
20002f0c:	2b01      	cmp	r3, #1
20002f0e:	d165      	bne.n	20002fdc <vTaskNotifyGiveFromISR+0x138>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
20002f10:	68bb      	ldr	r3, [r7, #8]
20002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002f14:	2b00      	cmp	r3, #0
20002f16:	d009      	beq.n	20002f2c <vTaskNotifyGiveFromISR+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20002f18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002f1c:	f383 8811 	msr	BASEPRI, r3
20002f20:	f3bf 8f6f 	isb	sy
20002f24:	f3bf 8f4f 	dsb	sy
20002f28:	623b      	str	r3, [r7, #32]
20002f2a:	e7fe      	b.n	20002f2a <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002f2c:	f247 2334 	movw	r3, #29236	; 0x7234
20002f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f34:	681b      	ldr	r3, [r3, #0]
20002f36:	2b00      	cmp	r3, #0
20002f38:	d12d      	bne.n	20002f96 <vTaskNotifyGiveFromISR+0xf2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002f3a:	68bb      	ldr	r3, [r7, #8]
20002f3c:	f103 0304 	add.w	r3, r3, #4
20002f40:	4618      	mov	r0, r3
20002f42:	f7fe f8b7 	bl	200010b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20002f46:	68bb      	ldr	r3, [r7, #8]
20002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002f4a:	f04f 0201 	mov.w	r2, #1
20002f4e:	fa02 f203 	lsl.w	r2, r2, r3
20002f52:	f247 2314 	movw	r3, #29204	; 0x7214
20002f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f5a:	681b      	ldr	r3, [r3, #0]
20002f5c:	ea42 0203 	orr.w	r2, r2, r3
20002f60:	f247 2314 	movw	r3, #29204	; 0x7214
20002f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f68:	601a      	str	r2, [r3, #0]
20002f6a:	68bb      	ldr	r3, [r7, #8]
20002f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002f6e:	4613      	mov	r3, r2
20002f70:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f74:	4413      	add	r3, r2
20002f76:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f7a:	461a      	mov	r2, r3
20002f7c:	f247 1338 	movw	r3, #28984	; 0x7138
20002f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f84:	441a      	add	r2, r3
20002f86:	68bb      	ldr	r3, [r7, #8]
20002f88:	f103 0304 	add.w	r3, r3, #4
20002f8c:	4610      	mov	r0, r2
20002f8e:	4619      	mov	r1, r3
20002f90:	f7fe f832 	bl	20000ff8 <vListInsertEnd>
20002f94:	e009      	b.n	20002faa <vTaskNotifyGiveFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
20002f96:	68bb      	ldr	r3, [r7, #8]
20002f98:	f103 0318 	add.w	r3, r3, #24
20002f9c:	f247 10cc 	movw	r0, #29132	; 0x71cc
20002fa0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002fa4:	4619      	mov	r1, r3
20002fa6:	f7fe f827 	bl	20000ff8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
20002faa:	68bb      	ldr	r3, [r7, #8]
20002fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002fae:	f247 1334 	movw	r3, #28980	; 0x7134
20002fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fb6:	681b      	ldr	r3, [r3, #0]
20002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002fba:	429a      	cmp	r2, r3
20002fbc:	d90e      	bls.n	20002fdc <vTaskNotifyGiveFromISR+0x138>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
20002fbe:	683b      	ldr	r3, [r7, #0]
20002fc0:	2b00      	cmp	r3, #0
20002fc2:	d004      	beq.n	20002fce <vTaskNotifyGiveFromISR+0x12a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
20002fc4:	683b      	ldr	r3, [r7, #0]
20002fc6:	f04f 0201 	mov.w	r2, #1
20002fca:	601a      	str	r2, [r3, #0]
20002fcc:	e006      	b.n	20002fdc <vTaskNotifyGiveFromISR+0x138>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
20002fce:	f247 2320 	movw	r3, #29216	; 0x7220
20002fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fd6:	f04f 0201 	mov.w	r2, #1
20002fda:	601a      	str	r2, [r3, #0]
20002fdc:	693b      	ldr	r3, [r7, #16]
20002fde:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002fe2:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
20002fe6:	f107 0728 	add.w	r7, r7, #40	; 0x28
20002fea:	46bd      	mov	sp, r7
20002fec:	bd80      	pop	{r7, pc}
20002fee:	bf00      	nop

20002ff0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
20002ff0:	b580      	push	{r7, lr}
20002ff2:	b084      	sub	sp, #16
20002ff4:	af00      	add	r7, sp, #0
20002ff6:	6078      	str	r0, [r7, #4]
20002ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
20002ffa:	f247 2310 	movw	r3, #29200	; 0x7210
20002ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003002:	681b      	ldr	r3, [r3, #0]
20003004:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20003006:	f247 1334 	movw	r3, #28980	; 0x7134
2000300a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000300e:	681b      	ldr	r3, [r3, #0]
20003010:	f103 0304 	add.w	r3, r3, #4
20003014:	4618      	mov	r0, r3
20003016:	f7fe f84d 	bl	200010b4 <uxListRemove>
2000301a:	4603      	mov	r3, r0
2000301c:	2b00      	cmp	r3, #0
2000301e:	d117      	bne.n	20003050 <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
20003020:	f247 1334 	movw	r3, #28980	; 0x7134
20003024:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003028:	681b      	ldr	r3, [r3, #0]
2000302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000302c:	f04f 0201 	mov.w	r2, #1
20003030:	fa02 f303 	lsl.w	r3, r2, r3
20003034:	ea6f 0203 	mvn.w	r2, r3
20003038:	f247 2314 	movw	r3, #29204	; 0x7214
2000303c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003040:	681b      	ldr	r3, [r3, #0]
20003042:	ea02 0203 	and.w	r2, r2, r3
20003046:	f247 2314 	movw	r3, #29204	; 0x7214
2000304a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000304e:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003050:	687b      	ldr	r3, [r7, #4]
20003052:	f1b3 3fff 	cmp.w	r3, #4294967295
20003056:	d111      	bne.n	2000307c <prvAddCurrentTaskToDelayedList+0x8c>
20003058:	683b      	ldr	r3, [r7, #0]
2000305a:	2b00      	cmp	r3, #0
2000305c:	d00e      	beq.n	2000307c <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
2000305e:	f247 1334 	movw	r3, #28980	; 0x7134
20003062:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003066:	681b      	ldr	r3, [r3, #0]
20003068:	f103 0304 	add.w	r3, r3, #4
2000306c:	f247 10f8 	movw	r0, #29176	; 0x71f8
20003070:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003074:	4619      	mov	r1, r3
20003076:	f7fd ffbf 	bl	20000ff8 <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
2000307a:	e03d      	b.n	200030f8 <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
2000307c:	68fa      	ldr	r2, [r7, #12]
2000307e:	687b      	ldr	r3, [r7, #4]
20003080:	4413      	add	r3, r2
20003082:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
20003084:	f247 1334 	movw	r3, #28980	; 0x7134
20003088:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000308c:	681b      	ldr	r3, [r3, #0]
2000308e:	68ba      	ldr	r2, [r7, #8]
20003090:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
20003092:	68ba      	ldr	r2, [r7, #8]
20003094:	68fb      	ldr	r3, [r7, #12]
20003096:	429a      	cmp	r2, r3
20003098:	d210      	bcs.n	200030bc <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
2000309a:	f247 13c8 	movw	r3, #29128	; 0x71c8
2000309e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030a2:	681a      	ldr	r2, [r3, #0]
200030a4:	f247 1334 	movw	r3, #28980	; 0x7134
200030a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030ac:	681b      	ldr	r3, [r3, #0]
200030ae:	f103 0304 	add.w	r3, r3, #4
200030b2:	4610      	mov	r0, r2
200030b4:	4619      	mov	r1, r3
200030b6:	f7fd ffc3 	bl	20001040 <vListInsert>
200030ba:	e01d      	b.n	200030f8 <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
200030bc:	f247 13c4 	movw	r3, #29124	; 0x71c4
200030c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030c4:	681a      	ldr	r2, [r3, #0]
200030c6:	f247 1334 	movw	r3, #28980	; 0x7134
200030ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030ce:	681b      	ldr	r3, [r3, #0]
200030d0:	f103 0304 	add.w	r3, r3, #4
200030d4:	4610      	mov	r0, r2
200030d6:	4619      	mov	r1, r3
200030d8:	f7fd ffb2 	bl	20001040 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
200030dc:	f247 232c 	movw	r3, #29228	; 0x722c
200030e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030e4:	681b      	ldr	r3, [r3, #0]
200030e6:	68ba      	ldr	r2, [r7, #8]
200030e8:	429a      	cmp	r2, r3
200030ea:	d205      	bcs.n	200030f8 <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
200030ec:	f247 232c 	movw	r3, #29228	; 0x722c
200030f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030f4:	68ba      	ldr	r2, [r7, #8]
200030f6:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
200030f8:	f107 0710 	add.w	r7, r7, #16
200030fc:	46bd      	mov	sp, r7
200030fe:	bd80      	pop	{r7, pc}

20003100 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
20003100:	b580      	push	{r7, lr}
20003102:	b084      	sub	sp, #16
20003104:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
20003106:	f04f 0300 	mov.w	r3, #0
2000310a:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
2000310c:	f000 fb72 	bl	200037f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
20003110:	f247 2370 	movw	r3, #29296	; 0x7270
20003114:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003118:	681b      	ldr	r3, [r3, #0]
2000311a:	2b00      	cmp	r3, #0
2000311c:	d017      	beq.n	2000314e <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
2000311e:	f04f 0302 	mov.w	r3, #2
20003122:	9300      	str	r3, [sp, #0]
20003124:	f247 2374 	movw	r3, #29300	; 0x7274
20003128:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000312c:	9301      	str	r3, [sp, #4]
2000312e:	f243 3071 	movw	r0, #13169	; 0x3371
20003132:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003136:	f247 014c 	movw	r1, #28748	; 0x704c
2000313a:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000313e:	f04f 02a0 	mov.w	r2, #160	; 0xa0
20003142:	f04f 0300 	mov.w	r3, #0
20003146:	f7fe fd49 	bl	20001bdc <xTaskCreate>
2000314a:	4603      	mov	r3, r0
2000314c:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
2000314e:	683b      	ldr	r3, [r7, #0]
20003150:	2b00      	cmp	r3, #0
20003152:	d109      	bne.n	20003168 <xTimerCreateTimerTask+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20003154:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003158:	f383 8811 	msr	BASEPRI, r3
2000315c:	f3bf 8f6f 	isb	sy
20003160:	f3bf 8f4f 	dsb	sy
20003164:	607b      	str	r3, [r7, #4]
20003166:	e7fe      	b.n	20003166 <xTimerCreateTimerTask+0x66>
	return xReturn;
20003168:	683b      	ldr	r3, [r7, #0]
}
2000316a:	4618      	mov	r0, r3
2000316c:	f107 0708 	add.w	r7, r7, #8
20003170:	46bd      	mov	sp, r7
20003172:	bd80      	pop	{r7, pc}

20003174 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20003174:	b580      	push	{r7, lr}
20003176:	b088      	sub	sp, #32
20003178:	af02      	add	r7, sp, #8
2000317a:	60f8      	str	r0, [r7, #12]
2000317c:	60b9      	str	r1, [r7, #8]
2000317e:	607a      	str	r2, [r7, #4]
20003180:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
20003182:	f04f 002c 	mov.w	r0, #44	; 0x2c
20003186:	f000 fb6f 	bl	20003868 <pvPortMalloc>
2000318a:	4603      	mov	r3, r0
2000318c:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
2000318e:	697b      	ldr	r3, [r7, #20]
20003190:	2b00      	cmp	r3, #0
20003192:	d009      	beq.n	200031a8 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
20003194:	6a3b      	ldr	r3, [r7, #32]
20003196:	9300      	str	r3, [sp, #0]
20003198:	697b      	ldr	r3, [r7, #20]
2000319a:	9301      	str	r3, [sp, #4]
2000319c:	68f8      	ldr	r0, [r7, #12]
2000319e:	68b9      	ldr	r1, [r7, #8]
200031a0:	687a      	ldr	r2, [r7, #4]
200031a2:	683b      	ldr	r3, [r7, #0]
200031a4:	f000 f806 	bl	200031b4 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
200031a8:	697b      	ldr	r3, [r7, #20]
	}
200031aa:	4618      	mov	r0, r3
200031ac:	f107 0718 	add.w	r7, r7, #24
200031b0:	46bd      	mov	sp, r7
200031b2:	bd80      	pop	{r7, pc}

200031b4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
200031b4:	b580      	push	{r7, lr}
200031b6:	b086      	sub	sp, #24
200031b8:	af00      	add	r7, sp, #0
200031ba:	60f8      	str	r0, [r7, #12]
200031bc:	60b9      	str	r1, [r7, #8]
200031be:	607a      	str	r2, [r7, #4]
200031c0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
200031c2:	68bb      	ldr	r3, [r7, #8]
200031c4:	2b00      	cmp	r3, #0
200031c6:	d109      	bne.n	200031dc <prvInitialiseNewTimer+0x28>
200031c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200031cc:	f383 8811 	msr	BASEPRI, r3
200031d0:	f3bf 8f6f 	isb	sy
200031d4:	f3bf 8f4f 	dsb	sy
200031d8:	617b      	str	r3, [r7, #20]
200031da:	e7fe      	b.n	200031da <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
200031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200031de:	2b00      	cmp	r3, #0
200031e0:	d016      	beq.n	20003210 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
200031e2:	f000 fb07 	bl	200037f4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
200031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200031e8:	68fa      	ldr	r2, [r7, #12]
200031ea:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
200031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200031ee:	68ba      	ldr	r2, [r7, #8]
200031f0:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
200031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200031f4:	687a      	ldr	r2, [r7, #4]
200031f6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
200031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200031fa:	683a      	ldr	r2, [r7, #0]
200031fc:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
200031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003200:	6a3a      	ldr	r2, [r7, #32]
20003202:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
20003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003206:	f103 0304 	add.w	r3, r3, #4
2000320a:	4618      	mov	r0, r3
2000320c:	f7fd fee6 	bl	20000fdc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
20003210:	f107 0718 	add.w	r7, r7, #24
20003214:	46bd      	mov	sp, r7
20003216:	bd80      	pop	{r7, pc}

20003218 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
20003218:	b580      	push	{r7, lr}
2000321a:	b08a      	sub	sp, #40	; 0x28
2000321c:	af00      	add	r7, sp, #0
2000321e:	60f8      	str	r0, [r7, #12]
20003220:	60b9      	str	r1, [r7, #8]
20003222:	607a      	str	r2, [r7, #4]
20003224:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
20003226:	f04f 0300 	mov.w	r3, #0
2000322a:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
2000322c:	68fb      	ldr	r3, [r7, #12]
2000322e:	2b00      	cmp	r3, #0
20003230:	d109      	bne.n	20003246 <xTimerGenericCommand+0x2e>
20003232:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003236:	f383 8811 	msr	BASEPRI, r3
2000323a:	f3bf 8f6f 	isb	sy
2000323e:	f3bf 8f4f 	dsb	sy
20003242:	627b      	str	r3, [r7, #36]	; 0x24
20003244:	e7fe      	b.n	20003244 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
20003246:	f247 2370 	movw	r3, #29296	; 0x7270
2000324a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000324e:	681b      	ldr	r3, [r3, #0]
20003250:	2b00      	cmp	r3, #0
20003252:	d040      	beq.n	200032d6 <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
20003254:	68bb      	ldr	r3, [r7, #8]
20003256:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
20003258:	687b      	ldr	r3, [r7, #4]
2000325a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
2000325c:	68fb      	ldr	r3, [r7, #12]
2000325e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20003260:	68bb      	ldr	r3, [r7, #8]
20003262:	2b05      	cmp	r3, #5
20003264:	dc27      	bgt.n	200032b6 <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
20003266:	f7ff fbb9 	bl	200029dc <xTaskGetSchedulerState>
2000326a:	4603      	mov	r3, r0
2000326c:	2b02      	cmp	r3, #2
2000326e:	d110      	bne.n	20003292 <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
20003270:	f247 2370 	movw	r3, #29296	; 0x7270
20003274:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003278:	681a      	ldr	r2, [r3, #0]
2000327a:	f107 0310 	add.w	r3, r7, #16
2000327e:	4610      	mov	r0, r2
20003280:	4619      	mov	r1, r3
20003282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20003284:	f04f 0300 	mov.w	r3, #0
20003288:	f7fe f854 	bl	20001334 <xQueueGenericSend>
2000328c:	4603      	mov	r3, r0
2000328e:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
20003290:	e021      	b.n	200032d6 <xTimerGenericCommand+0xbe>
20003292:	f247 2370 	movw	r3, #29296	; 0x7270
20003296:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000329a:	681a      	ldr	r2, [r3, #0]
2000329c:	f107 0310 	add.w	r3, r7, #16
200032a0:	4610      	mov	r0, r2
200032a2:	4619      	mov	r1, r3
200032a4:	f04f 0200 	mov.w	r2, #0
200032a8:	f04f 0300 	mov.w	r3, #0
200032ac:	f7fe f842 	bl	20001334 <xQueueGenericSend>
200032b0:	4603      	mov	r3, r0
200032b2:	623b      	str	r3, [r7, #32]
200032b4:	e00f      	b.n	200032d6 <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
200032b6:	f247 2370 	movw	r3, #29296	; 0x7270
200032ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032be:	681a      	ldr	r2, [r3, #0]
200032c0:	f107 0310 	add.w	r3, r7, #16
200032c4:	4610      	mov	r0, r2
200032c6:	4619      	mov	r1, r3
200032c8:	683a      	ldr	r2, [r7, #0]
200032ca:	f04f 0300 	mov.w	r3, #0
200032ce:	f7fe f949 	bl	20001564 <xQueueGenericSendFromISR>
200032d2:	4603      	mov	r3, r0
200032d4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
200032d6:	6a3b      	ldr	r3, [r7, #32]
}
200032d8:	4618      	mov	r0, r3
200032da:	f107 0728 	add.w	r7, r7, #40	; 0x28
200032de:	46bd      	mov	sp, r7
200032e0:	bd80      	pop	{r7, pc}
200032e2:	bf00      	nop

200032e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
200032e4:	b580      	push	{r7, lr}
200032e6:	b088      	sub	sp, #32
200032e8:	af02      	add	r7, sp, #8
200032ea:	6078      	str	r0, [r7, #4]
200032ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
200032ee:	f247 2368 	movw	r3, #29288	; 0x7268
200032f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032f6:	681b      	ldr	r3, [r3, #0]
200032f8:	68db      	ldr	r3, [r3, #12]
200032fa:	68db      	ldr	r3, [r3, #12]
200032fc:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200032fe:	693b      	ldr	r3, [r7, #16]
20003300:	f103 0304 	add.w	r3, r3, #4
20003304:	4618      	mov	r0, r3
20003306:	f7fd fed5 	bl	200010b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
2000330a:	693b      	ldr	r3, [r7, #16]
2000330c:	69db      	ldr	r3, [r3, #28]
2000330e:	2b01      	cmp	r3, #1
20003310:	d126      	bne.n	20003360 <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
20003312:	693b      	ldr	r3, [r7, #16]
20003314:	699a      	ldr	r2, [r3, #24]
20003316:	687b      	ldr	r3, [r7, #4]
20003318:	4413      	add	r3, r2
2000331a:	6938      	ldr	r0, [r7, #16]
2000331c:	4619      	mov	r1, r3
2000331e:	683a      	ldr	r2, [r7, #0]
20003320:	687b      	ldr	r3, [r7, #4]
20003322:	f000 f8df 	bl	200034e4 <prvInsertTimerInActiveList>
20003326:	4603      	mov	r3, r0
20003328:	2b00      	cmp	r3, #0
2000332a:	d019      	beq.n	20003360 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
2000332c:	f04f 0300 	mov.w	r3, #0
20003330:	9300      	str	r3, [sp, #0]
20003332:	6938      	ldr	r0, [r7, #16]
20003334:	f04f 0100 	mov.w	r1, #0
20003338:	687a      	ldr	r2, [r7, #4]
2000333a:	f04f 0300 	mov.w	r3, #0
2000333e:	f7ff ff6b 	bl	20003218 <xTimerGenericCommand>
20003342:	4603      	mov	r3, r0
20003344:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
20003346:	68fb      	ldr	r3, [r7, #12]
20003348:	2b00      	cmp	r3, #0
2000334a:	d109      	bne.n	20003360 <prvProcessExpiredTimer+0x7c>
2000334c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003350:	f383 8811 	msr	BASEPRI, r3
20003354:	f3bf 8f6f 	isb	sy
20003358:	f3bf 8f4f 	dsb	sy
2000335c:	617b      	str	r3, [r7, #20]
2000335e:	e7fe      	b.n	2000335e <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003360:	693b      	ldr	r3, [r7, #16]
20003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003364:	6938      	ldr	r0, [r7, #16]
20003366:	4798      	blx	r3
}
20003368:	f107 0718 	add.w	r7, r7, #24
2000336c:	46bd      	mov	sp, r7
2000336e:	bd80      	pop	{r7, pc}

20003370 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
20003370:	b580      	push	{r7, lr}
20003372:	b084      	sub	sp, #16
20003374:	af00      	add	r7, sp, #0
20003376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20003378:	f107 0308 	add.w	r3, r7, #8
2000337c:	4618      	mov	r0, r3
2000337e:	f000 f861 	bl	20003444 <prvGetNextExpireTime>
20003382:	4603      	mov	r3, r0
20003384:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
20003386:	68bb      	ldr	r3, [r7, #8]
20003388:	68f8      	ldr	r0, [r7, #12]
2000338a:	4619      	mov	r1, r3
2000338c:	f000 f804 	bl	20003398 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
20003390:	f000 f8f4 	bl	2000357c <prvProcessReceivedCommands>
	}
20003394:	e7f0      	b.n	20003378 <prvTimerTask+0x8>
20003396:	bf00      	nop

20003398 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20003398:	b580      	push	{r7, lr}
2000339a:	b084      	sub	sp, #16
2000339c:	af00      	add	r7, sp, #0
2000339e:	6078      	str	r0, [r7, #4]
200033a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
200033a2:	f7fe fdf3 	bl	20001f8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
200033a6:	f107 0308 	add.w	r3, r7, #8
200033aa:	4618      	mov	r0, r3
200033ac:	f000 f872 	bl	20003494 <prvSampleTimeNow>
200033b0:	4603      	mov	r3, r0
200033b2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
200033b4:	68bb      	ldr	r3, [r7, #8]
200033b6:	2b00      	cmp	r3, #0
200033b8:	d13b      	bne.n	20003432 <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
200033ba:	683b      	ldr	r3, [r7, #0]
200033bc:	2b00      	cmp	r3, #0
200033be:	d10b      	bne.n	200033d8 <prvProcessTimerOrBlockTask+0x40>
200033c0:	687a      	ldr	r2, [r7, #4]
200033c2:	68fb      	ldr	r3, [r7, #12]
200033c4:	429a      	cmp	r2, r3
200033c6:	d807      	bhi.n	200033d8 <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
200033c8:	f7fe fdf2 	bl	20001fb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
200033cc:	6878      	ldr	r0, [r7, #4]
200033ce:	68f9      	ldr	r1, [r7, #12]
200033d0:	f7ff ff88 	bl	200032e4 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
200033d4:	bf00      	nop
200033d6:	e030      	b.n	2000343a <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
200033d8:	683b      	ldr	r3, [r7, #0]
200033da:	2b00      	cmp	r3, #0
200033dc:	d00a      	beq.n	200033f4 <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
200033de:	f247 236c 	movw	r3, #29292	; 0x726c
200033e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033e6:	681b      	ldr	r3, [r3, #0]
200033e8:	681b      	ldr	r3, [r3, #0]
200033ea:	2b00      	cmp	r3, #0
200033ec:	bf14      	ite	ne
200033ee:	2300      	movne	r3, #0
200033f0:	2301      	moveq	r3, #1
200033f2:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
200033f4:	f247 2370 	movw	r3, #29296	; 0x7270
200033f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033fc:	681a      	ldr	r2, [r3, #0]
200033fe:	6879      	ldr	r1, [r7, #4]
20003400:	68fb      	ldr	r3, [r7, #12]
20003402:	ebc3 0301 	rsb	r3, r3, r1
20003406:	4610      	mov	r0, r2
20003408:	4619      	mov	r1, r3
2000340a:	683a      	ldr	r2, [r7, #0]
2000340c:	f7fe fbac 	bl	20001b68 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
20003410:	f7fe fdce 	bl	20001fb0 <xTaskResumeAll>
20003414:	4603      	mov	r3, r0
20003416:	2b00      	cmp	r3, #0
20003418:	d10e      	bne.n	20003438 <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
2000341a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000341e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003426:	601a      	str	r2, [r3, #0]
20003428:	f3bf 8f4f 	dsb	sy
2000342c:	f3bf 8f6f 	isb	sy
20003430:	e003      	b.n	2000343a <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
20003432:	f7fe fdbd 	bl	20001fb0 <xTaskResumeAll>
20003436:	e000      	b.n	2000343a <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003438:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
2000343a:	f107 0710 	add.w	r7, r7, #16
2000343e:	46bd      	mov	sp, r7
20003440:	bd80      	pop	{r7, pc}
20003442:	bf00      	nop

20003444 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
20003444:	b480      	push	{r7}
20003446:	b085      	sub	sp, #20
20003448:	af00      	add	r7, sp, #0
2000344a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
2000344c:	f247 2368 	movw	r3, #29288	; 0x7268
20003450:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003454:	681b      	ldr	r3, [r3, #0]
20003456:	681b      	ldr	r3, [r3, #0]
20003458:	2b00      	cmp	r3, #0
2000345a:	bf14      	ite	ne
2000345c:	2200      	movne	r2, #0
2000345e:	2201      	moveq	r2, #1
20003460:	687b      	ldr	r3, [r7, #4]
20003462:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20003464:	687b      	ldr	r3, [r7, #4]
20003466:	681b      	ldr	r3, [r3, #0]
20003468:	2b00      	cmp	r3, #0
2000346a:	d108      	bne.n	2000347e <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
2000346c:	f247 2368 	movw	r3, #29288	; 0x7268
20003470:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003474:	681b      	ldr	r3, [r3, #0]
20003476:	68db      	ldr	r3, [r3, #12]
20003478:	681b      	ldr	r3, [r3, #0]
2000347a:	60fb      	str	r3, [r7, #12]
2000347c:	e002      	b.n	20003484 <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
2000347e:	f04f 0300 	mov.w	r3, #0
20003482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
20003484:	68fb      	ldr	r3, [r7, #12]
}
20003486:	4618      	mov	r0, r3
20003488:	f107 0714 	add.w	r7, r7, #20
2000348c:	46bd      	mov	sp, r7
2000348e:	bc80      	pop	{r7}
20003490:	4770      	bx	lr
20003492:	bf00      	nop

20003494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003494:	b580      	push	{r7, lr}
20003496:	b084      	sub	sp, #16
20003498:	af00      	add	r7, sp, #0
2000349a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
2000349c:	f7fe fe58 	bl	20002150 <xTaskGetTickCount>
200034a0:	4603      	mov	r3, r0
200034a2:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
200034a4:	f247 2378 	movw	r3, #29304	; 0x7278
200034a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034ac:	681b      	ldr	r3, [r3, #0]
200034ae:	68fa      	ldr	r2, [r7, #12]
200034b0:	429a      	cmp	r2, r3
200034b2:	d206      	bcs.n	200034c2 <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
200034b4:	f000 f924 	bl	20003700 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
200034b8:	687b      	ldr	r3, [r7, #4]
200034ba:	f04f 0201 	mov.w	r2, #1
200034be:	601a      	str	r2, [r3, #0]
200034c0:	e003      	b.n	200034ca <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
200034c2:	687b      	ldr	r3, [r7, #4]
200034c4:	f04f 0200 	mov.w	r2, #0
200034c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
200034ca:	f247 2378 	movw	r3, #29304	; 0x7278
200034ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034d2:	68fa      	ldr	r2, [r7, #12]
200034d4:	601a      	str	r2, [r3, #0]

	return xTimeNow;
200034d6:	68fb      	ldr	r3, [r7, #12]
}
200034d8:	4618      	mov	r0, r3
200034da:	f107 0710 	add.w	r7, r7, #16
200034de:	46bd      	mov	sp, r7
200034e0:	bd80      	pop	{r7, pc}
200034e2:	bf00      	nop

200034e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
200034e4:	b580      	push	{r7, lr}
200034e6:	b086      	sub	sp, #24
200034e8:	af00      	add	r7, sp, #0
200034ea:	60f8      	str	r0, [r7, #12]
200034ec:	60b9      	str	r1, [r7, #8]
200034ee:	607a      	str	r2, [r7, #4]
200034f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
200034f2:	f04f 0300 	mov.w	r3, #0
200034f6:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
200034f8:	68fb      	ldr	r3, [r7, #12]
200034fa:	68ba      	ldr	r2, [r7, #8]
200034fc:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
200034fe:	68fb      	ldr	r3, [r7, #12]
20003500:	68fa      	ldr	r2, [r7, #12]
20003502:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
20003504:	68ba      	ldr	r2, [r7, #8]
20003506:	687b      	ldr	r3, [r7, #4]
20003508:	429a      	cmp	r2, r3
2000350a:	d818      	bhi.n	2000353e <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000350c:	687a      	ldr	r2, [r7, #4]
2000350e:	683b      	ldr	r3, [r7, #0]
20003510:	ebc3 0202 	rsb	r2, r3, r2
20003514:	68fb      	ldr	r3, [r7, #12]
20003516:	699b      	ldr	r3, [r3, #24]
20003518:	429a      	cmp	r2, r3
2000351a:	d303      	bcc.n	20003524 <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
2000351c:	f04f 0301 	mov.w	r3, #1
20003520:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
20003522:	e024      	b.n	2000356e <prvInsertTimerInActiveList+0x8a>
20003524:	f247 236c 	movw	r3, #29292	; 0x726c
20003528:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000352c:	681a      	ldr	r2, [r3, #0]
2000352e:	68fb      	ldr	r3, [r7, #12]
20003530:	f103 0304 	add.w	r3, r3, #4
20003534:	4610      	mov	r0, r2
20003536:	4619      	mov	r1, r3
20003538:	f7fd fd82 	bl	20001040 <vListInsert>
2000353c:	e017      	b.n	2000356e <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
2000353e:	687a      	ldr	r2, [r7, #4]
20003540:	683b      	ldr	r3, [r7, #0]
20003542:	429a      	cmp	r2, r3
20003544:	d207      	bcs.n	20003556 <prvInsertTimerInActiveList+0x72>
20003546:	68ba      	ldr	r2, [r7, #8]
20003548:	683b      	ldr	r3, [r7, #0]
2000354a:	429a      	cmp	r2, r3
2000354c:	d303      	bcc.n	20003556 <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
2000354e:	f04f 0301 	mov.w	r3, #1
20003552:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003554:	e00b      	b.n	2000356e <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003556:	f247 2368 	movw	r3, #29288	; 0x7268
2000355a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000355e:	681a      	ldr	r2, [r3, #0]
20003560:	68fb      	ldr	r3, [r7, #12]
20003562:	f103 0304 	add.w	r3, r3, #4
20003566:	4610      	mov	r0, r2
20003568:	4619      	mov	r1, r3
2000356a:	f7fd fd69 	bl	20001040 <vListInsert>
		}
	}

	return xProcessTimerNow;
2000356e:	697b      	ldr	r3, [r7, #20]
}
20003570:	4618      	mov	r0, r3
20003572:	f107 0718 	add.w	r7, r7, #24
20003576:	46bd      	mov	sp, r7
20003578:	bd80      	pop	{r7, pc}
2000357a:	bf00      	nop

2000357c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
2000357c:	b580      	push	{r7, lr}
2000357e:	b08e      	sub	sp, #56	; 0x38
20003580:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003582:	e0a5      	b.n	200036d0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20003584:	687b      	ldr	r3, [r7, #4]
20003586:	2b00      	cmp	r3, #0
20003588:	da1a      	bge.n	200035c0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
2000358a:	f107 0304 	add.w	r3, r7, #4
2000358e:	f103 0304 	add.w	r3, r3, #4
20003592:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003594:	6a3b      	ldr	r3, [r7, #32]
20003596:	2b00      	cmp	r3, #0
20003598:	d109      	bne.n	200035ae <prvProcessReceivedCommands+0x32>
2000359a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000359e:	f383 8811 	msr	BASEPRI, r3
200035a2:	f3bf 8f6f 	isb	sy
200035a6:	f3bf 8f4f 	dsb	sy
200035aa:	627b      	str	r3, [r7, #36]	; 0x24
200035ac:	e7fe      	b.n	200035ac <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
200035ae:	6a3b      	ldr	r3, [r7, #32]
200035b0:	681b      	ldr	r3, [r3, #0]
200035b2:	6a3a      	ldr	r2, [r7, #32]
200035b4:	6851      	ldr	r1, [r2, #4]
200035b6:	6a3a      	ldr	r2, [r7, #32]
200035b8:	6892      	ldr	r2, [r2, #8]
200035ba:	4608      	mov	r0, r1
200035bc:	4611      	mov	r1, r2
200035be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
200035c0:	687b      	ldr	r3, [r7, #4]
200035c2:	2b00      	cmp	r3, #0
200035c4:	f2c0 8084 	blt.w	200036d0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
200035c8:	68fb      	ldr	r3, [r7, #12]
200035ca:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
200035cc:	697b      	ldr	r3, [r7, #20]
200035ce:	695b      	ldr	r3, [r3, #20]
200035d0:	2b00      	cmp	r3, #0
200035d2:	d005      	beq.n	200035e0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200035d4:	697b      	ldr	r3, [r7, #20]
200035d6:	f103 0304 	add.w	r3, r3, #4
200035da:	4618      	mov	r0, r3
200035dc:	f7fd fd6a 	bl	200010b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
200035e0:	463b      	mov	r3, r7
200035e2:	4618      	mov	r0, r3
200035e4:	f7ff ff56 	bl	20003494 <prvSampleTimeNow>
200035e8:	4603      	mov	r3, r0
200035ea:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
200035ec:	687b      	ldr	r3, [r7, #4]
200035ee:	2b09      	cmp	r3, #9
200035f0:	d86e      	bhi.n	200036d0 <prvProcessReceivedCommands+0x154>
200035f2:	a201      	add	r2, pc, #4	; (adr r2, 200035f8 <prvProcessReceivedCommands+0x7c>)
200035f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200035f8:	20003621 	.word	0x20003621
200035fc:	20003621 	.word	0x20003621
20003600:	20003621 	.word	0x20003621
20003604:	200036d1 	.word	0x200036d1
20003608:	20003687 	.word	0x20003687
2000360c:	200036bf 	.word	0x200036bf
20003610:	20003621 	.word	0x20003621
20003614:	20003621 	.word	0x20003621
20003618:	200036d1 	.word	0x200036d1
2000361c:	20003687 	.word	0x20003687
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003620:	68ba      	ldr	r2, [r7, #8]
20003622:	697b      	ldr	r3, [r7, #20]
20003624:	699b      	ldr	r3, [r3, #24]
20003626:	441a      	add	r2, r3
20003628:	68bb      	ldr	r3, [r7, #8]
2000362a:	6978      	ldr	r0, [r7, #20]
2000362c:	4611      	mov	r1, r2
2000362e:	69fa      	ldr	r2, [r7, #28]
20003630:	f7ff ff58 	bl	200034e4 <prvInsertTimerInActiveList>
20003634:	4603      	mov	r3, r0
20003636:	2b00      	cmp	r3, #0
20003638:	d045      	beq.n	200036c6 <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
2000363a:	697b      	ldr	r3, [r7, #20]
2000363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000363e:	6978      	ldr	r0, [r7, #20]
20003640:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003642:	697b      	ldr	r3, [r7, #20]
20003644:	69db      	ldr	r3, [r3, #28]
20003646:	2b01      	cmp	r3, #1
20003648:	d13f      	bne.n	200036ca <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
2000364a:	68ba      	ldr	r2, [r7, #8]
2000364c:	697b      	ldr	r3, [r7, #20]
2000364e:	699b      	ldr	r3, [r3, #24]
20003650:	4413      	add	r3, r2
20003652:	f04f 0200 	mov.w	r2, #0
20003656:	9200      	str	r2, [sp, #0]
20003658:	6978      	ldr	r0, [r7, #20]
2000365a:	f04f 0100 	mov.w	r1, #0
2000365e:	461a      	mov	r2, r3
20003660:	f04f 0300 	mov.w	r3, #0
20003664:	f7ff fdd8 	bl	20003218 <xTimerGenericCommand>
20003668:	4603      	mov	r3, r0
2000366a:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
2000366c:	69bb      	ldr	r3, [r7, #24]
2000366e:	2b00      	cmp	r3, #0
20003670:	d12d      	bne.n	200036ce <prvProcessReceivedCommands+0x152>
20003672:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003676:	f383 8811 	msr	BASEPRI, r3
2000367a:	f3bf 8f6f 	isb	sy
2000367e:	f3bf 8f4f 	dsb	sy
20003682:	62bb      	str	r3, [r7, #40]	; 0x28
20003684:	e7fe      	b.n	20003684 <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20003686:	68ba      	ldr	r2, [r7, #8]
20003688:	697b      	ldr	r3, [r7, #20]
2000368a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
2000368c:	697b      	ldr	r3, [r7, #20]
2000368e:	699b      	ldr	r3, [r3, #24]
20003690:	2b00      	cmp	r3, #0
20003692:	d109      	bne.n	200036a8 <prvProcessReceivedCommands+0x12c>
20003694:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003698:	f383 8811 	msr	BASEPRI, r3
2000369c:	f3bf 8f6f 	isb	sy
200036a0:	f3bf 8f4f 	dsb	sy
200036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
200036a6:	e7fe      	b.n	200036a6 <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
200036a8:	697b      	ldr	r3, [r7, #20]
200036aa:	699a      	ldr	r2, [r3, #24]
200036ac:	69fb      	ldr	r3, [r7, #28]
200036ae:	4413      	add	r3, r2
200036b0:	6978      	ldr	r0, [r7, #20]
200036b2:	4619      	mov	r1, r3
200036b4:	69fa      	ldr	r2, [r7, #28]
200036b6:	69fb      	ldr	r3, [r7, #28]
200036b8:	f7ff ff14 	bl	200034e4 <prvInsertTimerInActiveList>
					break;
200036bc:	e008      	b.n	200036d0 <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
200036be:	6978      	ldr	r0, [r7, #20]
200036c0:	f000 f9ce 	bl	20003a60 <vPortFree>
200036c4:	e004      	b.n	200036d0 <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
200036c6:	bf00      	nop
200036c8:	e002      	b.n	200036d0 <prvProcessReceivedCommands+0x154>
200036ca:	bf00      	nop
200036cc:	e000      	b.n	200036d0 <prvProcessReceivedCommands+0x154>
200036ce:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
200036d0:	f247 2370 	movw	r3, #29296	; 0x7270
200036d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036d8:	681a      	ldr	r2, [r3, #0]
200036da:	f107 0304 	add.w	r3, r7, #4
200036de:	4610      	mov	r0, r2
200036e0:	4619      	mov	r1, r3
200036e2:	f04f 0200 	mov.w	r2, #0
200036e6:	f04f 0300 	mov.w	r3, #0
200036ea:	f7fd ffdd 	bl	200016a8 <xQueueGenericReceive>
200036ee:	4603      	mov	r3, r0
200036f0:	2b00      	cmp	r3, #0
200036f2:	f47f af47 	bne.w	20003584 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
200036f6:	f107 0730 	add.w	r7, r7, #48	; 0x30
200036fa:	46bd      	mov	sp, r7
200036fc:	bd80      	pop	{r7, pc}
200036fe:	bf00      	nop

20003700 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003700:	b580      	push	{r7, lr}
20003702:	b088      	sub	sp, #32
20003704:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003706:	e053      	b.n	200037b0 <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003708:	f247 2368 	movw	r3, #29288	; 0x7268
2000370c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003710:	681b      	ldr	r3, [r3, #0]
20003712:	68db      	ldr	r3, [r3, #12]
20003714:	681b      	ldr	r3, [r3, #0]
20003716:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003718:	f247 2368 	movw	r3, #29288	; 0x7268
2000371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003720:	681b      	ldr	r3, [r3, #0]
20003722:	68db      	ldr	r3, [r3, #12]
20003724:	68db      	ldr	r3, [r3, #12]
20003726:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003728:	68fb      	ldr	r3, [r7, #12]
2000372a:	f103 0304 	add.w	r3, r3, #4
2000372e:	4618      	mov	r0, r3
20003730:	f7fd fcc0 	bl	200010b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003734:	68fb      	ldr	r3, [r7, #12]
20003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003738:	68f8      	ldr	r0, [r7, #12]
2000373a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
2000373c:	68fb      	ldr	r3, [r7, #12]
2000373e:	69db      	ldr	r3, [r3, #28]
20003740:	2b01      	cmp	r3, #1
20003742:	d135      	bne.n	200037b0 <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003744:	68fb      	ldr	r3, [r7, #12]
20003746:	699a      	ldr	r2, [r3, #24]
20003748:	683b      	ldr	r3, [r7, #0]
2000374a:	4413      	add	r3, r2
2000374c:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
2000374e:	687a      	ldr	r2, [r7, #4]
20003750:	683b      	ldr	r3, [r7, #0]
20003752:	429a      	cmp	r2, r3
20003754:	d912      	bls.n	2000377c <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20003756:	68fb      	ldr	r3, [r7, #12]
20003758:	687a      	ldr	r2, [r7, #4]
2000375a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
2000375c:	68fb      	ldr	r3, [r7, #12]
2000375e:	68fa      	ldr	r2, [r7, #12]
20003760:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003762:	f247 2368 	movw	r3, #29288	; 0x7268
20003766:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000376a:	681a      	ldr	r2, [r3, #0]
2000376c:	68fb      	ldr	r3, [r7, #12]
2000376e:	f103 0304 	add.w	r3, r3, #4
20003772:	4610      	mov	r0, r2
20003774:	4619      	mov	r1, r3
20003776:	f7fd fc63 	bl	20001040 <vListInsert>
2000377a:	e019      	b.n	200037b0 <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
2000377c:	f04f 0300 	mov.w	r3, #0
20003780:	9300      	str	r3, [sp, #0]
20003782:	68f8      	ldr	r0, [r7, #12]
20003784:	f04f 0100 	mov.w	r1, #0
20003788:	683a      	ldr	r2, [r7, #0]
2000378a:	f04f 0300 	mov.w	r3, #0
2000378e:	f7ff fd43 	bl	20003218 <xTimerGenericCommand>
20003792:	4603      	mov	r3, r0
20003794:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
20003796:	693b      	ldr	r3, [r7, #16]
20003798:	2b00      	cmp	r3, #0
2000379a:	d109      	bne.n	200037b0 <prvSwitchTimerLists+0xb0>
2000379c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200037a0:	f383 8811 	msr	BASEPRI, r3
200037a4:	f3bf 8f6f 	isb	sy
200037a8:	f3bf 8f4f 	dsb	sy
200037ac:	617b      	str	r3, [r7, #20]
200037ae:	e7fe      	b.n	200037ae <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
200037b0:	f247 2368 	movw	r3, #29288	; 0x7268
200037b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037b8:	681b      	ldr	r3, [r3, #0]
200037ba:	681b      	ldr	r3, [r3, #0]
200037bc:	2b00      	cmp	r3, #0
200037be:	d1a3      	bne.n	20003708 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
200037c0:	f247 2368 	movw	r3, #29288	; 0x7268
200037c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037c8:	681b      	ldr	r3, [r3, #0]
200037ca:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
200037cc:	f247 236c 	movw	r3, #29292	; 0x726c
200037d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037d4:	681a      	ldr	r2, [r3, #0]
200037d6:	f247 2368 	movw	r3, #29288	; 0x7268
200037da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037de:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
200037e0:	f247 236c 	movw	r3, #29292	; 0x726c
200037e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037e8:	68ba      	ldr	r2, [r7, #8]
200037ea:	601a      	str	r2, [r3, #0]
}
200037ec:	f107 0718 	add.w	r7, r7, #24
200037f0:	46bd      	mov	sp, r7
200037f2:	bd80      	pop	{r7, pc}

200037f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
200037f4:	b580      	push	{r7, lr}
200037f6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
200037f8:	f000 fb80 	bl	20003efc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
200037fc:	f247 2370 	movw	r3, #29296	; 0x7270
20003800:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003804:	681b      	ldr	r3, [r3, #0]
20003806:	2b00      	cmp	r3, #0
20003808:	d12b      	bne.n	20003862 <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
2000380a:	f247 2040 	movw	r0, #29248	; 0x7240
2000380e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003812:	f7fd fbbf 	bl	20000f94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003816:	f247 2054 	movw	r0, #29268	; 0x7254
2000381a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000381e:	f7fd fbb9 	bl	20000f94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003822:	f247 2368 	movw	r3, #29288	; 0x7268
20003826:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000382a:	f247 2240 	movw	r2, #29248	; 0x7240
2000382e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003832:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003834:	f247 236c 	movw	r3, #29292	; 0x726c
20003838:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000383c:	f247 2254 	movw	r2, #29268	; 0x7254
20003840:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003844:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
20003846:	f04f 0005 	mov.w	r0, #5
2000384a:	f04f 0110 	mov.w	r1, #16
2000384e:	f04f 0200 	mov.w	r2, #0
20003852:	f7fd fcd1 	bl	200011f8 <xQueueGenericCreate>
20003856:	4602      	mov	r2, r0
20003858:	f247 2370 	movw	r3, #29296	; 0x7270
2000385c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003860:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003862:	f000 fb83 	bl	20003f6c <vPortExitCritical>
}
20003866:	bd80      	pop	{r7, pc}

20003868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003868:	b580      	push	{r7, lr}
2000386a:	b08a      	sub	sp, #40	; 0x28
2000386c:	af00      	add	r7, sp, #0
2000386e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003870:	f04f 0300 	mov.w	r3, #0
20003874:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
20003876:	f7fe fb89 	bl	20001f8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
2000387a:	f24d 432c 	movw	r3, #54316	; 0xd42c
2000387e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003882:	681b      	ldr	r3, [r3, #0]
20003884:	2b00      	cmp	r3, #0
20003886:	d101      	bne.n	2000388c <pvPortMalloc+0x24>
		{
			prvHeapInit();
20003888:	f000 f956 	bl	20003b38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
2000388c:	f24d 4338 	movw	r3, #54328	; 0xd438
20003890:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003894:	681a      	ldr	r2, [r3, #0]
20003896:	687b      	ldr	r3, [r7, #4]
20003898:	ea02 0303 	and.w	r3, r2, r3
2000389c:	2b00      	cmp	r3, #0
2000389e:	f040 80c2 	bne.w	20003a26 <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
200038a2:	687b      	ldr	r3, [r7, #4]
200038a4:	2b00      	cmp	r3, #0
200038a6:	d021      	beq.n	200038ec <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
200038a8:	f247 0354 	movw	r3, #28756	; 0x7054
200038ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038b0:	681b      	ldr	r3, [r3, #0]
200038b2:	687a      	ldr	r2, [r7, #4]
200038b4:	4413      	add	r3, r2
200038b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
200038b8:	687b      	ldr	r3, [r7, #4]
200038ba:	f003 0307 	and.w	r3, r3, #7
200038be:	2b00      	cmp	r3, #0
200038c0:	d014      	beq.n	200038ec <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
200038c2:	687b      	ldr	r3, [r7, #4]
200038c4:	f023 0307 	bic.w	r3, r3, #7
200038c8:	f103 0308 	add.w	r3, r3, #8
200038cc:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
200038ce:	687b      	ldr	r3, [r7, #4]
200038d0:	f003 0307 	and.w	r3, r3, #7
200038d4:	2b00      	cmp	r3, #0
200038d6:	d009      	beq.n	200038ec <pvPortMalloc+0x84>
200038d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200038dc:	f383 8811 	msr	BASEPRI, r3
200038e0:	f3bf 8f6f 	isb	sy
200038e4:	f3bf 8f4f 	dsb	sy
200038e8:	61fb      	str	r3, [r7, #28]
200038ea:	e7fe      	b.n	200038ea <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
200038ec:	687b      	ldr	r3, [r7, #4]
200038ee:	2b00      	cmp	r3, #0
200038f0:	f000 8099 	beq.w	20003a26 <pvPortMalloc+0x1be>
200038f4:	f24d 4330 	movw	r3, #54320	; 0xd430
200038f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038fc:	681b      	ldr	r3, [r3, #0]
200038fe:	687a      	ldr	r2, [r7, #4]
20003900:	429a      	cmp	r2, r3
20003902:	f200 8090 	bhi.w	20003a26 <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003906:	f24d 4324 	movw	r3, #54308	; 0xd424
2000390a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000390e:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
20003910:	f24d 4324 	movw	r3, #54308	; 0xd424
20003914:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003918:	681b      	ldr	r3, [r3, #0]
2000391a:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
2000391c:	e004      	b.n	20003928 <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
2000391e:	68fb      	ldr	r3, [r7, #12]
20003920:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
20003922:	68fb      	ldr	r3, [r7, #12]
20003924:	681b      	ldr	r3, [r3, #0]
20003926:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003928:	68fb      	ldr	r3, [r7, #12]
2000392a:	685a      	ldr	r2, [r3, #4]
2000392c:	687b      	ldr	r3, [r7, #4]
2000392e:	429a      	cmp	r2, r3
20003930:	d203      	bcs.n	2000393a <pvPortMalloc+0xd2>
20003932:	68fb      	ldr	r3, [r7, #12]
20003934:	681b      	ldr	r3, [r3, #0]
20003936:	2b00      	cmp	r3, #0
20003938:	d1f1      	bne.n	2000391e <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
2000393a:	f24d 432c 	movw	r3, #54316	; 0xd42c
2000393e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003942:	681b      	ldr	r3, [r3, #0]
20003944:	68fa      	ldr	r2, [r7, #12]
20003946:	429a      	cmp	r2, r3
20003948:	d06d      	beq.n	20003a26 <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
2000394a:	693b      	ldr	r3, [r7, #16]
2000394c:	681a      	ldr	r2, [r3, #0]
2000394e:	f247 0354 	movw	r3, #28756	; 0x7054
20003952:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003956:	681b      	ldr	r3, [r3, #0]
20003958:	4413      	add	r3, r2
2000395a:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
2000395c:	68fb      	ldr	r3, [r7, #12]
2000395e:	681a      	ldr	r2, [r3, #0]
20003960:	693b      	ldr	r3, [r7, #16]
20003962:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003964:	68fb      	ldr	r3, [r7, #12]
20003966:	685a      	ldr	r2, [r3, #4]
20003968:	687b      	ldr	r3, [r7, #4]
2000396a:	ebc3 0202 	rsb	r2, r3, r2
2000396e:	f247 0354 	movw	r3, #28756	; 0x7054
20003972:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003976:	681b      	ldr	r3, [r3, #0]
20003978:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000397c:	429a      	cmp	r2, r3
2000397e:	d91f      	bls.n	200039c0 <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003980:	68fa      	ldr	r2, [r7, #12]
20003982:	687b      	ldr	r3, [r7, #4]
20003984:	4413      	add	r3, r2
20003986:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20003988:	697b      	ldr	r3, [r7, #20]
2000398a:	f003 0307 	and.w	r3, r3, #7
2000398e:	2b00      	cmp	r3, #0
20003990:	d009      	beq.n	200039a6 <pvPortMalloc+0x13e>
20003992:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003996:	f383 8811 	msr	BASEPRI, r3
2000399a:	f3bf 8f6f 	isb	sy
2000399e:	f3bf 8f4f 	dsb	sy
200039a2:	623b      	str	r3, [r7, #32]
200039a4:	e7fe      	b.n	200039a4 <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
200039a6:	68fb      	ldr	r3, [r7, #12]
200039a8:	685a      	ldr	r2, [r3, #4]
200039aa:	687b      	ldr	r3, [r7, #4]
200039ac:	ebc3 0202 	rsb	r2, r3, r2
200039b0:	697b      	ldr	r3, [r7, #20]
200039b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
200039b4:	68fb      	ldr	r3, [r7, #12]
200039b6:	687a      	ldr	r2, [r7, #4]
200039b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
200039ba:	6978      	ldr	r0, [r7, #20]
200039bc:	f000 f93e 	bl	20003c3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
200039c0:	f24d 4330 	movw	r3, #54320	; 0xd430
200039c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039c8:	681a      	ldr	r2, [r3, #0]
200039ca:	68fb      	ldr	r3, [r7, #12]
200039cc:	685b      	ldr	r3, [r3, #4]
200039ce:	ebc3 0202 	rsb	r2, r3, r2
200039d2:	f24d 4330 	movw	r3, #54320	; 0xd430
200039d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039da:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
200039dc:	f24d 4330 	movw	r3, #54320	; 0xd430
200039e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039e4:	681a      	ldr	r2, [r3, #0]
200039e6:	f24d 4334 	movw	r3, #54324	; 0xd434
200039ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039ee:	681b      	ldr	r3, [r3, #0]
200039f0:	429a      	cmp	r2, r3
200039f2:	d209      	bcs.n	20003a08 <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
200039f4:	f24d 4330 	movw	r3, #54320	; 0xd430
200039f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039fc:	681a      	ldr	r2, [r3, #0]
200039fe:	f24d 4334 	movw	r3, #54324	; 0xd434
20003a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a06:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
20003a08:	68fb      	ldr	r3, [r7, #12]
20003a0a:	685a      	ldr	r2, [r3, #4]
20003a0c:	f24d 4338 	movw	r3, #54328	; 0xd438
20003a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a14:	681b      	ldr	r3, [r3, #0]
20003a16:	ea42 0203 	orr.w	r2, r2, r3
20003a1a:	68fb      	ldr	r3, [r7, #12]
20003a1c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20003a1e:	68fb      	ldr	r3, [r7, #12]
20003a20:	f04f 0200 	mov.w	r2, #0
20003a24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
20003a26:	f7fe fac3 	bl	20001fb0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
20003a2a:	69bb      	ldr	r3, [r7, #24]
20003a2c:	2b00      	cmp	r3, #0
20003a2e:	d101      	bne.n	20003a34 <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
20003a30:	f7fc fcf4 	bl	2000041c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
20003a34:	69bb      	ldr	r3, [r7, #24]
20003a36:	f003 0307 	and.w	r3, r3, #7
20003a3a:	2b00      	cmp	r3, #0
20003a3c:	d009      	beq.n	20003a52 <pvPortMalloc+0x1ea>
20003a3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003a42:	f383 8811 	msr	BASEPRI, r3
20003a46:	f3bf 8f6f 	isb	sy
20003a4a:	f3bf 8f4f 	dsb	sy
20003a4e:	627b      	str	r3, [r7, #36]	; 0x24
20003a50:	e7fe      	b.n	20003a50 <pvPortMalloc+0x1e8>
	return pvReturn;
20003a52:	69bb      	ldr	r3, [r7, #24]
}
20003a54:	4618      	mov	r0, r3
20003a56:	f107 0728 	add.w	r7, r7, #40	; 0x28
20003a5a:	46bd      	mov	sp, r7
20003a5c:	bd80      	pop	{r7, pc}
20003a5e:	bf00      	nop

20003a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20003a60:	b580      	push	{r7, lr}
20003a62:	b086      	sub	sp, #24
20003a64:	af00      	add	r7, sp, #0
20003a66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20003a68:	687b      	ldr	r3, [r7, #4]
20003a6a:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
20003a6c:	687b      	ldr	r3, [r7, #4]
20003a6e:	2b00      	cmp	r3, #0
20003a70:	d05e      	beq.n	20003b30 <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20003a72:	f247 0354 	movw	r3, #28756	; 0x7054
20003a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a7a:	681b      	ldr	r3, [r3, #0]
20003a7c:	f1c3 0300 	rsb	r3, r3, #0
20003a80:	68ba      	ldr	r2, [r7, #8]
20003a82:	4413      	add	r3, r2
20003a84:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
20003a86:	68bb      	ldr	r3, [r7, #8]
20003a88:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
20003a8a:	68fb      	ldr	r3, [r7, #12]
20003a8c:	685a      	ldr	r2, [r3, #4]
20003a8e:	f24d 4338 	movw	r3, #54328	; 0xd438
20003a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a96:	681b      	ldr	r3, [r3, #0]
20003a98:	ea02 0303 	and.w	r3, r2, r3
20003a9c:	2b00      	cmp	r3, #0
20003a9e:	d109      	bne.n	20003ab4 <vPortFree+0x54>
20003aa0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003aa4:	f383 8811 	msr	BASEPRI, r3
20003aa8:	f3bf 8f6f 	isb	sy
20003aac:	f3bf 8f4f 	dsb	sy
20003ab0:	613b      	str	r3, [r7, #16]
20003ab2:	e7fe      	b.n	20003ab2 <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
20003ab4:	68fb      	ldr	r3, [r7, #12]
20003ab6:	681b      	ldr	r3, [r3, #0]
20003ab8:	2b00      	cmp	r3, #0
20003aba:	d009      	beq.n	20003ad0 <vPortFree+0x70>
20003abc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003ac0:	f383 8811 	msr	BASEPRI, r3
20003ac4:	f3bf 8f6f 	isb	sy
20003ac8:	f3bf 8f4f 	dsb	sy
20003acc:	617b      	str	r3, [r7, #20]
20003ace:	e7fe      	b.n	20003ace <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20003ad0:	68fb      	ldr	r3, [r7, #12]
20003ad2:	685a      	ldr	r2, [r3, #4]
20003ad4:	f24d 4338 	movw	r3, #54328	; 0xd438
20003ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003adc:	681b      	ldr	r3, [r3, #0]
20003ade:	ea02 0303 	and.w	r3, r2, r3
20003ae2:	2b00      	cmp	r3, #0
20003ae4:	d024      	beq.n	20003b30 <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20003ae6:	68fb      	ldr	r3, [r7, #12]
20003ae8:	681b      	ldr	r3, [r3, #0]
20003aea:	2b00      	cmp	r3, #0
20003aec:	d120      	bne.n	20003b30 <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20003aee:	68fb      	ldr	r3, [r7, #12]
20003af0:	685a      	ldr	r2, [r3, #4]
20003af2:	f24d 4338 	movw	r3, #54328	; 0xd438
20003af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003afa:	681b      	ldr	r3, [r3, #0]
20003afc:	ea6f 0303 	mvn.w	r3, r3
20003b00:	ea02 0203 	and.w	r2, r2, r3
20003b04:	68fb      	ldr	r3, [r7, #12]
20003b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20003b08:	f7fe fa40 	bl	20001f8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20003b0c:	68fb      	ldr	r3, [r7, #12]
20003b0e:	685a      	ldr	r2, [r3, #4]
20003b10:	f24d 4330 	movw	r3, #54320	; 0xd430
20003b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b18:	681b      	ldr	r3, [r3, #0]
20003b1a:	441a      	add	r2, r3
20003b1c:	f24d 4330 	movw	r3, #54320	; 0xd430
20003b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b24:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
20003b26:	68f8      	ldr	r0, [r7, #12]
20003b28:	f000 f888 	bl	20003c3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
20003b2c:	f7fe fa40 	bl	20001fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20003b30:	f107 0718 	add.w	r7, r7, #24
20003b34:	46bd      	mov	sp, r7
20003b36:	bd80      	pop	{r7, pc}

20003b38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20003b38:	b480      	push	{r7}
20003b3a:	b085      	sub	sp, #20
20003b3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20003b3e:	f246 13a8 	movw	r3, #25000	; 0x61a8
20003b42:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20003b44:	f247 237c 	movw	r3, #29308	; 0x727c
20003b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b4c:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20003b4e:	68bb      	ldr	r3, [r7, #8]
20003b50:	f003 0307 	and.w	r3, r3, #7
20003b54:	2b00      	cmp	r3, #0
20003b56:	d011      	beq.n	20003b7c <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20003b58:	68bb      	ldr	r3, [r7, #8]
20003b5a:	f103 0307 	add.w	r3, r3, #7
20003b5e:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003b60:	68bb      	ldr	r3, [r7, #8]
20003b62:	f023 0307 	bic.w	r3, r3, #7
20003b66:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20003b68:	68fa      	ldr	r2, [r7, #12]
20003b6a:	68bb      	ldr	r3, [r7, #8]
20003b6c:	ebc3 0202 	rsb	r2, r3, r2
20003b70:	f247 237c 	movw	r3, #29308	; 0x727c
20003b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b78:	4413      	add	r3, r2
20003b7a:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20003b7c:	68bb      	ldr	r3, [r7, #8]
20003b7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
20003b80:	687a      	ldr	r2, [r7, #4]
20003b82:	f24d 4324 	movw	r3, #54308	; 0xd424
20003b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b8a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
20003b8c:	f24d 4324 	movw	r3, #54308	; 0xd424
20003b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b94:	f04f 0200 	mov.w	r2, #0
20003b98:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
20003b9a:	687a      	ldr	r2, [r7, #4]
20003b9c:	68fb      	ldr	r3, [r7, #12]
20003b9e:	4413      	add	r3, r2
20003ba0:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
20003ba2:	f247 0354 	movw	r3, #28756	; 0x7054
20003ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003baa:	681b      	ldr	r3, [r3, #0]
20003bac:	68ba      	ldr	r2, [r7, #8]
20003bae:	ebc3 0302 	rsb	r3, r3, r2
20003bb2:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003bb4:	68bb      	ldr	r3, [r7, #8]
20003bb6:	f023 0307 	bic.w	r3, r3, #7
20003bba:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
20003bbc:	68ba      	ldr	r2, [r7, #8]
20003bbe:	f24d 432c 	movw	r3, #54316	; 0xd42c
20003bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bc6:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
20003bc8:	f24d 432c 	movw	r3, #54316	; 0xd42c
20003bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bd0:	681b      	ldr	r3, [r3, #0]
20003bd2:	f04f 0200 	mov.w	r2, #0
20003bd6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
20003bd8:	f24d 432c 	movw	r3, #54316	; 0xd42c
20003bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003be0:	681b      	ldr	r3, [r3, #0]
20003be2:	f04f 0200 	mov.w	r2, #0
20003be6:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20003be8:	687b      	ldr	r3, [r7, #4]
20003bea:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
20003bec:	683b      	ldr	r3, [r7, #0]
20003bee:	68ba      	ldr	r2, [r7, #8]
20003bf0:	ebc3 0202 	rsb	r2, r3, r2
20003bf4:	683b      	ldr	r3, [r7, #0]
20003bf6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20003bf8:	f24d 432c 	movw	r3, #54316	; 0xd42c
20003bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c00:	681a      	ldr	r2, [r3, #0]
20003c02:	683b      	ldr	r3, [r7, #0]
20003c04:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003c06:	683b      	ldr	r3, [r7, #0]
20003c08:	685a      	ldr	r2, [r3, #4]
20003c0a:	f24d 4334 	movw	r3, #54324	; 0xd434
20003c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c12:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003c14:	683b      	ldr	r3, [r7, #0]
20003c16:	685a      	ldr	r2, [r3, #4]
20003c18:	f24d 4330 	movw	r3, #54320	; 0xd430
20003c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c20:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
20003c22:	f24d 4338 	movw	r3, #54328	; 0xd438
20003c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20003c2e:	601a      	str	r2, [r3, #0]
}
20003c30:	f107 0714 	add.w	r7, r7, #20
20003c34:	46bd      	mov	sp, r7
20003c36:	bc80      	pop	{r7}
20003c38:	4770      	bx	lr
20003c3a:	bf00      	nop

20003c3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20003c3c:	b480      	push	{r7}
20003c3e:	b085      	sub	sp, #20
20003c40:	af00      	add	r7, sp, #0
20003c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
20003c44:	f24d 4324 	movw	r3, #54308	; 0xd424
20003c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c4c:	60bb      	str	r3, [r7, #8]
20003c4e:	e002      	b.n	20003c56 <prvInsertBlockIntoFreeList+0x1a>
20003c50:	68bb      	ldr	r3, [r7, #8]
20003c52:	681b      	ldr	r3, [r3, #0]
20003c54:	60bb      	str	r3, [r7, #8]
20003c56:	68bb      	ldr	r3, [r7, #8]
20003c58:	681a      	ldr	r2, [r3, #0]
20003c5a:	687b      	ldr	r3, [r7, #4]
20003c5c:	429a      	cmp	r2, r3
20003c5e:	d3f7      	bcc.n	20003c50 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20003c60:	68bb      	ldr	r3, [r7, #8]
20003c62:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
20003c64:	68bb      	ldr	r3, [r7, #8]
20003c66:	685a      	ldr	r2, [r3, #4]
20003c68:	68fb      	ldr	r3, [r7, #12]
20003c6a:	441a      	add	r2, r3
20003c6c:	687b      	ldr	r3, [r7, #4]
20003c6e:	429a      	cmp	r2, r3
20003c70:	d108      	bne.n	20003c84 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
20003c72:	68bb      	ldr	r3, [r7, #8]
20003c74:	685a      	ldr	r2, [r3, #4]
20003c76:	687b      	ldr	r3, [r7, #4]
20003c78:	685b      	ldr	r3, [r3, #4]
20003c7a:	441a      	add	r2, r3
20003c7c:	68bb      	ldr	r3, [r7, #8]
20003c7e:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20003c80:	68bb      	ldr	r3, [r7, #8]
20003c82:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
20003c84:	687b      	ldr	r3, [r7, #4]
20003c86:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
20003c88:	687b      	ldr	r3, [r7, #4]
20003c8a:	685a      	ldr	r2, [r3, #4]
20003c8c:	68fb      	ldr	r3, [r7, #12]
20003c8e:	441a      	add	r2, r3
20003c90:	68bb      	ldr	r3, [r7, #8]
20003c92:	681b      	ldr	r3, [r3, #0]
20003c94:	429a      	cmp	r2, r3
20003c96:	d11e      	bne.n	20003cd6 <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
20003c98:	68bb      	ldr	r3, [r7, #8]
20003c9a:	681a      	ldr	r2, [r3, #0]
20003c9c:	f24d 432c 	movw	r3, #54316	; 0xd42c
20003ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ca4:	681b      	ldr	r3, [r3, #0]
20003ca6:	429a      	cmp	r2, r3
20003ca8:	d00d      	beq.n	20003cc6 <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
20003caa:	687b      	ldr	r3, [r7, #4]
20003cac:	685a      	ldr	r2, [r3, #4]
20003cae:	68bb      	ldr	r3, [r7, #8]
20003cb0:	681b      	ldr	r3, [r3, #0]
20003cb2:	685b      	ldr	r3, [r3, #4]
20003cb4:	441a      	add	r2, r3
20003cb6:	687b      	ldr	r3, [r7, #4]
20003cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
20003cba:	68bb      	ldr	r3, [r7, #8]
20003cbc:	681b      	ldr	r3, [r3, #0]
20003cbe:	681a      	ldr	r2, [r3, #0]
20003cc0:	687b      	ldr	r3, [r7, #4]
20003cc2:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
20003cc4:	e00b      	b.n	20003cde <prvInsertBlockIntoFreeList+0xa2>
20003cc6:	f24d 432c 	movw	r3, #54316	; 0xd42c
20003cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cce:	681a      	ldr	r2, [r3, #0]
20003cd0:	687b      	ldr	r3, [r7, #4]
20003cd2:	601a      	str	r2, [r3, #0]
20003cd4:	e003      	b.n	20003cde <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
20003cd6:	68bb      	ldr	r3, [r7, #8]
20003cd8:	681a      	ldr	r2, [r3, #0]
20003cda:	687b      	ldr	r3, [r7, #4]
20003cdc:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
20003cde:	68ba      	ldr	r2, [r7, #8]
20003ce0:	687b      	ldr	r3, [r7, #4]
20003ce2:	429a      	cmp	r2, r3
20003ce4:	d002      	beq.n	20003cec <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
20003ce6:	68bb      	ldr	r3, [r7, #8]
20003ce8:	687a      	ldr	r2, [r7, #4]
20003cea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20003cec:	f107 0714 	add.w	r7, r7, #20
20003cf0:	46bd      	mov	sp, r7
20003cf2:	bc80      	pop	{r7}
20003cf4:	4770      	bx	lr
20003cf6:	bf00      	nop

20003cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20003cf8:	b480      	push	{r7}
20003cfa:	b085      	sub	sp, #20
20003cfc:	af00      	add	r7, sp, #0
20003cfe:	60f8      	str	r0, [r7, #12]
20003d00:	60b9      	str	r1, [r7, #8]
20003d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
20003d04:	68fb      	ldr	r3, [r7, #12]
20003d06:	f1a3 0304 	sub.w	r3, r3, #4
20003d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20003d0c:	68fb      	ldr	r3, [r7, #12]
20003d0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20003d12:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003d14:	68fb      	ldr	r3, [r7, #12]
20003d16:	f1a3 0304 	sub.w	r3, r3, #4
20003d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20003d1c:	68bb      	ldr	r3, [r7, #8]
20003d1e:	f023 0201 	bic.w	r2, r3, #1
20003d22:	68fb      	ldr	r3, [r7, #12]
20003d24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003d26:	68fb      	ldr	r3, [r7, #12]
20003d28:	f1a3 0304 	sub.w	r3, r3, #4
20003d2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
20003d2e:	f643 5361 	movw	r3, #15713	; 0x3d61
20003d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d36:	68fa      	ldr	r2, [r7, #12]
20003d38:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
20003d3a:	68fb      	ldr	r3, [r7, #12]
20003d3c:	f1a3 0314 	sub.w	r3, r3, #20
20003d40:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
20003d42:	687a      	ldr	r2, [r7, #4]
20003d44:	68fb      	ldr	r3, [r7, #12]
20003d46:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20003d48:	68fb      	ldr	r3, [r7, #12]
20003d4a:	f1a3 0320 	sub.w	r3, r3, #32
20003d4e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
20003d50:	68fb      	ldr	r3, [r7, #12]
}
20003d52:	4618      	mov	r0, r3
20003d54:	f107 0714 	add.w	r7, r7, #20
20003d58:	46bd      	mov	sp, r7
20003d5a:	bc80      	pop	{r7}
20003d5c:	4770      	bx	lr
20003d5e:	bf00      	nop

20003d60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20003d60:	b480      	push	{r7}
20003d62:	b083      	sub	sp, #12
20003d64:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
20003d66:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d6e:	681b      	ldr	r3, [r3, #0]
20003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
20003d74:	d009      	beq.n	20003d8a <prvTaskExitError+0x2a>
20003d76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d7a:	f383 8811 	msr	BASEPRI, r3
20003d7e:	f3bf 8f6f 	isb	sy
20003d82:	f3bf 8f4f 	dsb	sy
20003d86:	603b      	str	r3, [r7, #0]
20003d88:	e7fe      	b.n	20003d88 <prvTaskExitError+0x28>
20003d8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d8e:	f383 8811 	msr	BASEPRI, r3
20003d92:	f3bf 8f6f 	isb	sy
20003d96:	f3bf 8f4f 	dsb	sy
20003d9a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
20003d9c:	e7fe      	b.n	20003d9c <prvTaskExitError+0x3c>
20003d9e:	bf00      	nop

20003da0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20003da0:	4b07      	ldr	r3, [pc, #28]	; (20003dc0 <pxCurrentTCBConst2>)
20003da2:	6819      	ldr	r1, [r3, #0]
20003da4:	6808      	ldr	r0, [r1, #0]
20003da6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20003daa:	f380 8809 	msr	PSP, r0
20003dae:	f3bf 8f6f 	isb	sy
20003db2:	f04f 0000 	mov.w	r0, #0
20003db6:	f380 8811 	msr	BASEPRI, r0
20003dba:	f04e 0e0d 	orr.w	lr, lr, #13
20003dbe:	4770      	bx	lr

20003dc0 <pxCurrentTCBConst2>:
20003dc0:	20007134 	.word	0x20007134
20003dc4:	f3af 8000 	nop.w
20003dc8:	f3af 8000 	nop.w
20003dcc:	f3af 8000 	nop.w

20003dd0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
20003dd0:	4806      	ldr	r0, [pc, #24]	; (20003dec <prvPortStartFirstTask+0x1c>)
20003dd2:	6800      	ldr	r0, [r0, #0]
20003dd4:	6800      	ldr	r0, [r0, #0]
20003dd6:	f380 8808 	msr	MSP, r0
20003dda:	b662      	cpsie	i
20003ddc:	b661      	cpsie	f
20003dde:	f3bf 8f4f 	dsb	sy
20003de2:	f3bf 8f6f 	isb	sy
20003de6:	df00      	svc	0
20003de8:	bf00      	nop
20003dea:	0000      	.short	0x0000
20003dec:	e000ed08 	.word	0xe000ed08

20003df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20003df0:	b580      	push	{r7, lr}
20003df2:	b084      	sub	sp, #16
20003df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20003df6:	f24e 4300 	movw	r3, #58368	; 0xe400
20003dfa:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003dfe:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
20003e00:	68fb      	ldr	r3, [r7, #12]
20003e02:	781b      	ldrb	r3, [r3, #0]
20003e04:	b2db      	uxtb	r3, r3
20003e06:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20003e08:	68fb      	ldr	r3, [r7, #12]
20003e0a:	f04f 32ff 	mov.w	r2, #4294967295
20003e0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20003e10:	68fb      	ldr	r3, [r7, #12]
20003e12:	781b      	ldrb	r3, [r3, #0]
20003e14:	b2db      	uxtb	r3, r3
20003e16:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20003e18:	79fb      	ldrb	r3, [r7, #7]
20003e1a:	b2db      	uxtb	r3, r3
20003e1c:	461a      	mov	r2, r3
20003e1e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
20003e22:	f24d 433c 	movw	r3, #54332	; 0xd43c
20003e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e2a:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
20003e2c:	f24d 4340 	movw	r3, #54336	; 0xd440
20003e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e34:	f04f 0207 	mov.w	r2, #7
20003e38:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003e3a:	e011      	b.n	20003e60 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
20003e3c:	f24d 4340 	movw	r3, #54336	; 0xd440
20003e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e44:	681b      	ldr	r3, [r3, #0]
20003e46:	f103 32ff 	add.w	r2, r3, #4294967295
20003e4a:	f24d 4340 	movw	r3, #54336	; 0xd440
20003e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e52:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20003e54:	79fb      	ldrb	r3, [r7, #7]
20003e56:	b2db      	uxtb	r3, r3
20003e58:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003e5c:	b2db      	uxtb	r3, r3
20003e5e:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003e60:	79fb      	ldrb	r3, [r7, #7]
20003e62:	b2db      	uxtb	r3, r3
20003e64:	b25b      	sxtb	r3, r3
20003e66:	2b00      	cmp	r3, #0
20003e68:	dbe8      	blt.n	20003e3c <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
20003e6a:	f24d 4340 	movw	r3, #54336	; 0xd440
20003e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e72:	681b      	ldr	r3, [r3, #0]
20003e74:	ea4f 2203 	mov.w	r2, r3, lsl #8
20003e78:	f24d 4340 	movw	r3, #54336	; 0xd440
20003e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e80:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20003e82:	f24d 4340 	movw	r3, #54336	; 0xd440
20003e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e8a:	681b      	ldr	r3, [r3, #0]
20003e8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20003e90:	f24d 4340 	movw	r3, #54336	; 0xd440
20003e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e98:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
20003e9a:	68bb      	ldr	r3, [r7, #8]
20003e9c:	b2da      	uxtb	r2, r3
20003e9e:	68fb      	ldr	r3, [r7, #12]
20003ea0:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
20003ea2:	f64e 5320 	movw	r3, #60704	; 0xed20
20003ea6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003eaa:	f64e 5220 	movw	r2, #60704	; 0xed20
20003eae:	f2ce 0200 	movt	r2, #57344	; 0xe000
20003eb2:	6812      	ldr	r2, [r2, #0]
20003eb4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
20003eb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
20003eba:	f64e 5320 	movw	r3, #60704	; 0xed20
20003ebe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003ec2:	f64e 5220 	movw	r2, #60704	; 0xed20
20003ec6:	f2ce 0200 	movt	r2, #57344	; 0xe000
20003eca:	6812      	ldr	r2, [r2, #0]
20003ecc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
20003ed0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
20003ed2:	f000 f8c7 	bl	20004064 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
20003ed6:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ede:	f04f 0200 	mov.w	r2, #0
20003ee2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20003ee4:	f7ff ff74 	bl	20003dd0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
20003ee8:	f7ff ff3a 	bl	20003d60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
20003eec:	f04f 0300 	mov.w	r3, #0
}
20003ef0:	4618      	mov	r0, r3
20003ef2:	f107 0710 	add.w	r7, r7, #16
20003ef6:	46bd      	mov	sp, r7
20003ef8:	bd80      	pop	{r7, pc}
20003efa:	bf00      	nop

20003efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
20003efc:	b480      	push	{r7}
20003efe:	b083      	sub	sp, #12
20003f00:	af00      	add	r7, sp, #0
20003f02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f06:	f383 8811 	msr	BASEPRI, r3
20003f0a:	f3bf 8f6f 	isb	sy
20003f0e:	f3bf 8f4f 	dsb	sy
20003f12:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20003f14:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f1c:	681b      	ldr	r3, [r3, #0]
20003f1e:	f103 0201 	add.w	r2, r3, #1
20003f22:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003f26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f2a:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
20003f2c:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f34:	681b      	ldr	r3, [r3, #0]
20003f36:	2b01      	cmp	r3, #1
20003f38:	d112      	bne.n	20003f60 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
20003f3a:	f64e 5304 	movw	r3, #60676	; 0xed04
20003f3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003f42:	681b      	ldr	r3, [r3, #0]
20003f44:	f003 03ff 	and.w	r3, r3, #255	; 0xff
20003f48:	2b00      	cmp	r3, #0
20003f4a:	d009      	beq.n	20003f60 <vPortEnterCritical+0x64>
20003f4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f50:	f383 8811 	msr	BASEPRI, r3
20003f54:	f3bf 8f6f 	isb	sy
20003f58:	f3bf 8f4f 	dsb	sy
20003f5c:	607b      	str	r3, [r7, #4]
20003f5e:	e7fe      	b.n	20003f5e <vPortEnterCritical+0x62>
	}
}
20003f60:	f107 070c 	add.w	r7, r7, #12
20003f64:	46bd      	mov	sp, r7
20003f66:	bc80      	pop	{r7}
20003f68:	4770      	bx	lr
20003f6a:	bf00      	nop

20003f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
20003f6c:	b480      	push	{r7}
20003f6e:	b083      	sub	sp, #12
20003f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20003f72:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f7a:	681b      	ldr	r3, [r3, #0]
20003f7c:	2b00      	cmp	r3, #0
20003f7e:	d109      	bne.n	20003f94 <vPortExitCritical+0x28>
20003f80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f84:	f383 8811 	msr	BASEPRI, r3
20003f88:	f3bf 8f6f 	isb	sy
20003f8c:	f3bf 8f4f 	dsb	sy
20003f90:	603b      	str	r3, [r7, #0]
20003f92:	e7fe      	b.n	20003f92 <vPortExitCritical+0x26>
	uxCriticalNesting--;
20003f94:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f9c:	681b      	ldr	r3, [r3, #0]
20003f9e:	f103 32ff 	add.w	r2, r3, #4294967295
20003fa2:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003faa:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
20003fac:	f247 03cc 	movw	r3, #28876	; 0x70cc
20003fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fb4:	681b      	ldr	r3, [r3, #0]
20003fb6:	2b00      	cmp	r3, #0
20003fb8:	d105      	bne.n	20003fc6 <vPortExitCritical+0x5a>
20003fba:	f04f 0300 	mov.w	r3, #0
20003fbe:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20003fc0:	687b      	ldr	r3, [r7, #4]
20003fc2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
20003fc6:	f107 070c 	add.w	r7, r7, #12
20003fca:	46bd      	mov	sp, r7
20003fcc:	bc80      	pop	{r7}
20003fce:	4770      	bx	lr

20003fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20003fd0:	f3ef 8009 	mrs	r0, PSP
20003fd4:	f3bf 8f6f 	isb	sy
20003fd8:	4b0d      	ldr	r3, [pc, #52]	; (20004010 <pxCurrentTCBConst>)
20003fda:	681a      	ldr	r2, [r3, #0]
20003fdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20003fe0:	6010      	str	r0, [r2, #0]
20003fe2:	e92d 4008 	stmdb	sp!, {r3, lr}
20003fe6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
20003fea:	f380 8811 	msr	BASEPRI, r0
20003fee:	f7fe f9c7 	bl	20002380 <vTaskSwitchContext>
20003ff2:	f04f 0000 	mov.w	r0, #0
20003ff6:	f380 8811 	msr	BASEPRI, r0
20003ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20003ffe:	6819      	ldr	r1, [r3, #0]
20004000:	6808      	ldr	r0, [r1, #0]
20004002:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004006:	f380 8809 	msr	PSP, r0
2000400a:	f3bf 8f6f 	isb	sy
2000400e:	4770      	bx	lr

20004010 <pxCurrentTCBConst>:
20004010:	20007134 	.word	0x20007134
20004014:	f3af 8000 	nop.w
20004018:	f3af 8000 	nop.w
2000401c:	f3af 8000 	nop.w

20004020 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20004020:	b580      	push	{r7, lr}
20004022:	b082      	sub	sp, #8
20004024:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20004026:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000402a:	f383 8811 	msr	BASEPRI, r3
2000402e:	f3bf 8f6f 	isb	sy
20004032:	f3bf 8f4f 	dsb	sy
20004036:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20004038:	f7fe f89a 	bl	20002170 <xTaskIncrementTick>
2000403c:	4603      	mov	r3, r0
2000403e:	2b00      	cmp	r3, #0
20004040:	d006      	beq.n	20004050 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20004042:	f64e 5304 	movw	r3, #60676	; 0xed04
20004046:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000404a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000404e:	601a      	str	r2, [r3, #0]
20004050:	f04f 0300 	mov.w	r3, #0
20004054:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20004056:	687b      	ldr	r3, [r7, #4]
20004058:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
2000405c:	f107 0708 	add.w	r7, r7, #8
20004060:	46bd      	mov	sp, r7
20004062:	bd80      	pop	{r7, pc}

20004064 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20004064:	b480      	push	{r7}
20004066:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20004068:	f24e 0314 	movw	r3, #57364	; 0xe014
2000406c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004070:	f247 120c 	movw	r2, #28940	; 0x710c
20004074:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004078:	6811      	ldr	r1, [r2, #0]
2000407a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
2000407e:	f2c1 0262 	movt	r2, #4194	; 0x1062
20004082:	fba2 0201 	umull	r0, r2, r2, r1
20004086:	ea4f 1292 	mov.w	r2, r2, lsr #6
2000408a:	f102 32ff 	add.w	r2, r2, #4294967295
2000408e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20004090:	f24e 0310 	movw	r3, #57360	; 0xe010
20004094:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004098:	f04f 0207 	mov.w	r2, #7
2000409c:	601a      	str	r2, [r3, #0]
}
2000409e:	46bd      	mov	sp, r7
200040a0:	bc80      	pop	{r7}
200040a2:	4770      	bx	lr

200040a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
200040a4:	b480      	push	{r7}
200040a6:	b085      	sub	sp, #20
200040a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
200040aa:	f3ef 8305 	mrs	r3, IPSR
200040ae:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
200040b0:	683b      	ldr	r3, [r7, #0]
200040b2:	2b0f      	cmp	r3, #15
200040b4:	d91a      	bls.n	200040ec <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
200040b6:	f247 0358 	movw	r3, #28760	; 0x7058
200040ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040be:	681a      	ldr	r2, [r3, #0]
200040c0:	683b      	ldr	r3, [r7, #0]
200040c2:	4413      	add	r3, r2
200040c4:	781b      	ldrb	r3, [r3, #0]
200040c6:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
200040c8:	f24d 433c 	movw	r3, #54332	; 0xd43c
200040cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040d0:	781b      	ldrb	r3, [r3, #0]
200040d2:	79fa      	ldrb	r2, [r7, #7]
200040d4:	429a      	cmp	r2, r3
200040d6:	d209      	bcs.n	200040ec <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200040d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200040dc:	f383 8811 	msr	BASEPRI, r3
200040e0:	f3bf 8f6f 	isb	sy
200040e4:	f3bf 8f4f 	dsb	sy
200040e8:	60bb      	str	r3, [r7, #8]
200040ea:	e7fe      	b.n	200040ea <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
200040ec:	f64e 530c 	movw	r3, #60684	; 0xed0c
200040f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200040f4:	681b      	ldr	r3, [r3, #0]
200040f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200040fa:	f24d 4340 	movw	r3, #54336	; 0xd440
200040fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004102:	681b      	ldr	r3, [r3, #0]
20004104:	429a      	cmp	r2, r3
20004106:	d909      	bls.n	2000411c <vPortValidateInterruptPriority+0x78>
20004108:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000410c:	f383 8811 	msr	BASEPRI, r3
20004110:	f3bf 8f6f 	isb	sy
20004114:	f3bf 8f4f 	dsb	sy
20004118:	60fb      	str	r3, [r7, #12]
2000411a:	e7fe      	b.n	2000411a <vPortValidateInterruptPriority+0x76>
	}
2000411c:	f107 0714 	add.w	r7, r7, #20
20004120:	46bd      	mov	sp, r7
20004122:	bc80      	pop	{r7}
20004124:	4770      	bx	lr
20004126:	bf00      	nop

20004128 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004128:	b480      	push	{r7}
2000412a:	b083      	sub	sp, #12
2000412c:	af00      	add	r7, sp, #0
2000412e:	4603      	mov	r3, r0
20004130:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20004132:	f24e 1300 	movw	r3, #57600	; 0xe100
20004136:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000413a:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000413e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004142:	79f9      	ldrb	r1, [r7, #7]
20004144:	f001 011f 	and.w	r1, r1, #31
20004148:	f04f 0001 	mov.w	r0, #1
2000414c:	fa00 f101 	lsl.w	r1, r0, r1
20004150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004154:	f107 070c 	add.w	r7, r7, #12
20004158:	46bd      	mov	sp, r7
2000415a:	bc80      	pop	{r7}
2000415c:	4770      	bx	lr
2000415e:	bf00      	nop

20004160 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20004160:	b480      	push	{r7}
20004162:	b083      	sub	sp, #12
20004164:	af00      	add	r7, sp, #0
20004166:	4603      	mov	r3, r0
20004168:	6039      	str	r1, [r7, #0]
2000416a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
2000416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004170:	2b00      	cmp	r3, #0
20004172:	da10      	bge.n	20004196 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
20004174:	f64e 5300 	movw	r3, #60672	; 0xed00
20004178:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000417c:	79fa      	ldrb	r2, [r7, #7]
2000417e:	f002 020f 	and.w	r2, r2, #15
20004182:	f1a2 0104 	sub.w	r1, r2, #4
20004186:	683a      	ldr	r2, [r7, #0]
20004188:	b2d2      	uxtb	r2, r2
2000418a:	ea4f 1202 	mov.w	r2, r2, lsl #4
2000418e:	b2d2      	uxtb	r2, r2
20004190:	440b      	add	r3, r1
20004192:	761a      	strb	r2, [r3, #24]
20004194:	e00d      	b.n	200041b2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
20004196:	f24e 1300 	movw	r3, #57600	; 0xe100
2000419a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000419e:	f997 1007 	ldrsb.w	r1, [r7, #7]
200041a2:	683a      	ldr	r2, [r7, #0]
200041a4:	b2d2      	uxtb	r2, r2
200041a6:	ea4f 1202 	mov.w	r2, r2, lsl #4
200041aa:	b2d2      	uxtb	r2, r2
200041ac:	440b      	add	r3, r1
200041ae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
200041b2:	f107 070c 	add.w	r7, r7, #12
200041b6:	46bd      	mov	sp, r7
200041b8:	bc80      	pop	{r7}
200041ba:	4770      	bx	lr

200041bc <vhk_callback>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void vhk_callback(void* d){
200041bc:	b590      	push	{r4, r7, lr}
200041be:	b089      	sub	sp, #36	; 0x24
200041c0:	af00      	add	r7, sp, #0
200041c2:	6078      	str	r0, [r7, #4]

//	if(feed_get_hk_data != pdFAIL){

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
200041c4:	f04f 0300 	mov.w	r3, #0
200041c8:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
200041ca:	f04f 0300 	mov.w	r3, #0
200041ce:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
200041d0:	f24d 5228 	movw	r2, #54568	; 0xd528
200041d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
200041d8:	f64d 3380 	movw	r3, #56192	; 0xdb80
200041dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041e0:	601a      	str	r2, [r3, #0]


//		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
200041e2:	f107 011c 	add.w	r1, r7, #28
200041e6:	f107 021a 	add.w	r2, r7, #26
200041ea:	f107 0318 	add.w	r3, r7, #24
200041ee:	4608      	mov	r0, r1
200041f0:	4611      	mov	r1, r2
200041f2:	461a      	mov	r2, r3
200041f4:	f7fc f936 	bl	20000464 <get_IMU_acc>
200041f8:	4603      	mov	r3, r0
200041fa:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
200041fc:	f107 0114 	add.w	r1, r7, #20
20004200:	f107 0212 	add.w	r2, r7, #18
20004204:	f107 0310 	add.w	r3, r7, #16
20004208:	4608      	mov	r0, r1
2000420a:	4611      	mov	r1, r2
2000420c:	461a      	mov	r2, r3
2000420e:	f7fc fabf 	bl	20000790 <get_IMU_gyro>
20004212:	4603      	mov	r3, r0
20004214:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;

			hk_pkt->cmd_cnt = command_cnt;
20004216:	f64d 3380 	movw	r3, #56192	; 0xdb80
2000421a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000421e:	681a      	ldr	r2, [r3, #0]
20004220:	f64d 3370 	movw	r3, #56176	; 0xdb70
20004224:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004228:	881b      	ldrh	r3, [r3, #0]
2000422a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
2000422e:	f04f 0000 	mov.w	r0, #0
20004232:	ea40 0101 	orr.w	r1, r0, r1
20004236:	7391      	strb	r1, [r2, #14]
20004238:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000423c:	b29b      	uxth	r3, r3
2000423e:	f04f 0100 	mov.w	r1, #0
20004242:	ea41 0303 	orr.w	r3, r1, r3
20004246:	73d3      	strb	r3, [r2, #15]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
20004248:	f64d 3380 	movw	r3, #56192	; 0xdb80
2000424c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004250:	681b      	ldr	r3, [r3, #0]
20004252:	8bba      	ldrh	r2, [r7, #28]
20004254:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004258:	f04f 0000 	mov.w	r0, #0
2000425c:	ea40 0101 	orr.w	r1, r0, r1
20004260:	7419      	strb	r1, [r3, #16]
20004262:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004266:	b292      	uxth	r2, r2
20004268:	f04f 0100 	mov.w	r1, #0
2000426c:	ea41 0202 	orr.w	r2, r1, r2
20004270:	745a      	strb	r2, [r3, #17]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
20004272:	f64d 3380 	movw	r3, #56192	; 0xdb80
20004276:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000427a:	681b      	ldr	r3, [r3, #0]
2000427c:	8b7a      	ldrh	r2, [r7, #26]
2000427e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004282:	f04f 0000 	mov.w	r0, #0
20004286:	ea40 0101 	orr.w	r1, r0, r1
2000428a:	7499      	strb	r1, [r3, #18]
2000428c:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004290:	b292      	uxth	r2, r2
20004292:	f04f 0100 	mov.w	r1, #0
20004296:	ea41 0202 	orr.w	r2, r1, r2
2000429a:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[2] = ((az));
2000429c:	f64d 3380 	movw	r3, #56192	; 0xdb80
200042a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042a4:	681b      	ldr	r3, [r3, #0]
200042a6:	8b3a      	ldrh	r2, [r7, #24]
200042a8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200042ac:	f04f 0000 	mov.w	r0, #0
200042b0:	ea40 0101 	orr.w	r1, r0, r1
200042b4:	7519      	strb	r1, [r3, #20]
200042b6:	ea4f 2212 	mov.w	r2, r2, lsr #8
200042ba:	b292      	uxth	r2, r2
200042bc:	f04f 0100 	mov.w	r1, #0
200042c0:	ea41 0202 	orr.w	r2, r1, r2
200042c4:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
200042c6:	f64d 3380 	movw	r3, #56192	; 0xdb80
200042ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042ce:	681b      	ldr	r3, [r3, #0]
200042d0:	8aba      	ldrh	r2, [r7, #20]
200042d2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200042d6:	f04f 0000 	mov.w	r0, #0
200042da:	ea40 0101 	orr.w	r1, r0, r1
200042de:	7599      	strb	r1, [r3, #22]
200042e0:	ea4f 2212 	mov.w	r2, r2, lsr #8
200042e4:	b292      	uxth	r2, r2
200042e6:	f04f 0100 	mov.w	r1, #0
200042ea:	ea41 0202 	orr.w	r2, r1, r2
200042ee:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
200042f0:	f64d 3380 	movw	r3, #56192	; 0xdb80
200042f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042f8:	681b      	ldr	r3, [r3, #0]
200042fa:	8a7a      	ldrh	r2, [r7, #18]
200042fc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004300:	f04f 0000 	mov.w	r0, #0
20004304:	ea40 0101 	orr.w	r1, r0, r1
20004308:	7619      	strb	r1, [r3, #24]
2000430a:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000430e:	b292      	uxth	r2, r2
20004310:	f04f 0100 	mov.w	r1, #0
20004314:	ea41 0202 	orr.w	r2, r1, r2
20004318:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
2000431a:	f64d 3380 	movw	r3, #56192	; 0xdb80
2000431e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004322:	681b      	ldr	r3, [r3, #0]
20004324:	8a3a      	ldrh	r2, [r7, #16]
20004326:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2000432a:	f04f 0000 	mov.w	r0, #0
2000432e:	ea40 0101 	orr.w	r1, r0, r1
20004332:	7699      	strb	r1, [r3, #26]
20004334:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004338:	b292      	uxth	r2, r2
2000433a:	f04f 0100 	mov.w	r1, #0
2000433e:	ea41 0202 	orr.w	r2, r1, r2
20004342:	76da      	strb	r2, [r3, #27]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
20004344:	f107 030e 	add.w	r3, r7, #14
20004348:	4618      	mov	r0, r3
2000434a:	f7fc fb93 	bl	20000a74 <get_IMU_temp>
2000434e:	4603      	mov	r3, r0
20004350:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
20004352:	f64d 3380 	movw	r3, #56192	; 0xdb80
20004356:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000435a:	681b      	ldr	r3, [r3, #0]
2000435c:	89fa      	ldrh	r2, [r7, #14]
2000435e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004362:	f04f 0000 	mov.w	r0, #0
20004366:	ea40 0101 	orr.w	r1, r0, r1
2000436a:	7719      	strb	r1, [r3, #28]
2000436c:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004370:	b292      	uxth	r2, r2
20004372:	f04f 0100 	mov.w	r1, #0
20004376:	ea41 0202 	orr.w	r2, r1, r2
2000437a:	775a      	strb	r2, [r3, #29]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
2000437c:	f64d 3380 	movw	r3, #56192	; 0xdb80
20004380:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004384:	681c      	ldr	r4, [r3, #0]
20004386:	f107 0317 	add.w	r3, r7, #23
2000438a:	f04f 0040 	mov.w	r0, #64	; 0x40
2000438e:	f04f 0101 	mov.w	r1, #1
20004392:	461a      	mov	r2, r3
20004394:	f7fc fca2 	bl	20000cdc <read_bus_voltage>
20004398:	4603      	mov	r3, r0
2000439a:	b29b      	uxth	r3, r3
2000439c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200043a0:	f04f 0100 	mov.w	r1, #0
200043a4:	ea41 0202 	orr.w	r2, r1, r2
200043a8:	77e2      	strb	r2, [r4, #31]
200043aa:	ea4f 2313 	mov.w	r3, r3, lsr #8
200043ae:	b29b      	uxth	r3, r3
200043b0:	f04f 0200 	mov.w	r2, #0
200043b4:	ea42 0303 	orr.w	r3, r2, r3
200043b8:	f884 3020 	strb.w	r3, [r4, #32]
			loss_count+= flag;
200043bc:	7dfa      	ldrb	r2, [r7, #23]
200043be:	7ffb      	ldrb	r3, [r7, #31]
200043c0:	4413      	add	r3, r2
200043c2:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
200043c4:	f64d 3380 	movw	r3, #56192	; 0xdb80
200043c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043cc:	681c      	ldr	r4, [r3, #0]
200043ce:	f107 0317 	add.w	r3, r7, #23
200043d2:	f04f 0040 	mov.w	r0, #64	; 0x40
200043d6:	f04f 0102 	mov.w	r1, #2
200043da:	461a      	mov	r2, r3
200043dc:	f7fc fc7e 	bl	20000cdc <read_bus_voltage>
200043e0:	4603      	mov	r3, r0
200043e2:	b29b      	uxth	r3, r3
200043e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200043e8:	f04f 0100 	mov.w	r1, #0
200043ec:	ea41 0202 	orr.w	r2, r1, r2
200043f0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
200043f4:	ea4f 2313 	mov.w	r3, r3, lsr #8
200043f8:	b29b      	uxth	r3, r3
200043fa:	f04f 0200 	mov.w	r2, #0
200043fe:	ea42 0303 	orr.w	r3, r2, r3
20004402:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
20004406:	7dfa      	ldrb	r2, [r7, #23]
20004408:	7ffb      	ldrb	r3, [r7, #31]
2000440a:	4413      	add	r3, r2
2000440c:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
2000440e:	f64d 3380 	movw	r3, #56192	; 0xdb80
20004412:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004416:	681c      	ldr	r4, [r3, #0]
20004418:	f107 0317 	add.w	r3, r7, #23
2000441c:	f04f 0040 	mov.w	r0, #64	; 0x40
20004420:	f04f 0103 	mov.w	r1, #3
20004424:	461a      	mov	r2, r3
20004426:	f7fc fc59 	bl	20000cdc <read_bus_voltage>
2000442a:	4603      	mov	r3, r0
2000442c:	b29b      	uxth	r3, r3
2000442e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004432:	f04f 0100 	mov.w	r1, #0
20004436:	ea41 0202 	orr.w	r2, r1, r2
2000443a:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
2000443e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004442:	b29b      	uxth	r3, r3
20004444:	f04f 0200 	mov.w	r2, #0
20004448:	ea42 0303 	orr.w	r3, r2, r3
2000444c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
20004450:	7dfa      	ldrb	r2, [r7, #23]
20004452:	7ffb      	ldrb	r3, [r7, #31]
20004454:	4413      	add	r3, r2
20004456:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
20004458:	f64d 3380 	movw	r3, #56192	; 0xdb80
2000445c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004460:	681c      	ldr	r4, [r3, #0]
20004462:	f107 0317 	add.w	r3, r7, #23
20004466:	f04f 0040 	mov.w	r0, #64	; 0x40
2000446a:	f04f 0101 	mov.w	r1, #1
2000446e:	461a      	mov	r2, r3
20004470:	f7fc fc92 	bl	20000d98 <read_shunt_voltage>
20004474:	4603      	mov	r3, r0
20004476:	b29b      	uxth	r3, r3
20004478:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2000447c:	f04f 0100 	mov.w	r1, #0
20004480:	ea41 0202 	orr.w	r2, r1, r2
20004484:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
20004488:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000448c:	b29b      	uxth	r3, r3
2000448e:	f04f 0200 	mov.w	r2, #0
20004492:	ea42 0303 	orr.w	r3, r2, r3
20004496:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
2000449a:	7dfa      	ldrb	r2, [r7, #23]
2000449c:	7ffb      	ldrb	r3, [r7, #31]
2000449e:	4413      	add	r3, r2
200044a0:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
200044a2:	f64d 3380 	movw	r3, #56192	; 0xdb80
200044a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044aa:	681c      	ldr	r4, [r3, #0]
200044ac:	f107 0317 	add.w	r3, r7, #23
200044b0:	f04f 0040 	mov.w	r0, #64	; 0x40
200044b4:	f04f 0102 	mov.w	r1, #2
200044b8:	461a      	mov	r2, r3
200044ba:	f7fc fc6d 	bl	20000d98 <read_shunt_voltage>
200044be:	4603      	mov	r3, r0
200044c0:	b29b      	uxth	r3, r3
200044c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200044c6:	f04f 0100 	mov.w	r1, #0
200044ca:	ea41 0202 	orr.w	r2, r1, r2
200044ce:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
200044d2:	ea4f 2313 	mov.w	r3, r3, lsr #8
200044d6:	b29b      	uxth	r3, r3
200044d8:	f04f 0200 	mov.w	r2, #0
200044dc:	ea42 0303 	orr.w	r3, r2, r3
200044e0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
200044e4:	7dfa      	ldrb	r2, [r7, #23]
200044e6:	7ffb      	ldrb	r3, [r7, #31]
200044e8:	4413      	add	r3, r2
200044ea:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
200044ec:	f64d 3380 	movw	r3, #56192	; 0xdb80
200044f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044f4:	681c      	ldr	r4, [r3, #0]
200044f6:	f107 0317 	add.w	r3, r7, #23
200044fa:	f04f 0040 	mov.w	r0, #64	; 0x40
200044fe:	f04f 0103 	mov.w	r1, #3
20004502:	461a      	mov	r2, r3
20004504:	f7fc fc48 	bl	20000d98 <read_shunt_voltage>
20004508:	4603      	mov	r3, r0
2000450a:	b29b      	uxth	r3, r3
2000450c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004510:	f04f 0100 	mov.w	r1, #0
20004514:	ea41 0202 	orr.w	r2, r1, r2
20004518:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
2000451c:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004520:	b29b      	uxth	r3, r3
20004522:	f04f 0200 	mov.w	r2, #0
20004526:	ea42 0303 	orr.w	r3, r2, r3
2000452a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
2000452e:	7dfa      	ldrb	r2, [r7, #23]
20004530:	7ffb      	ldrb	r3, [r7, #31]
20004532:	4413      	add	r3, r2
20004534:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
20004536:	f24d 5328 	movw	r3, #54568	; 0xd528
2000453a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000453e:	f04f 0201 	mov.w	r2, #1
20004542:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);

//		}

//	}
}
20004546:	f107 0724 	add.w	r7, r7, #36	; 0x24
2000454a:	46bd      	mov	sp, r7
2000454c:	bd90      	pop	{r4, r7, pc}
2000454e:	bf00      	nop

20004550 <vpld_callback>:

void vpld_callback(void* d1){
20004550:	b5b0      	push	{r4, r5, r7, lr}
20004552:	b084      	sub	sp, #16
20004554:	af00      	add	r7, sp, #0
20004556:	6078      	str	r0, [r7, #4]

//	if(feed_get_payload_data != pdFAIL){

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
20004558:	f24d 4248 	movw	r2, #54344	; 0xd448
2000455c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004560:	f64d 33a8 	movw	r3, #56232	; 0xdba8
20004564:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004568:	601a      	str	r2, [r3, #0]
		uint8_t i;
//		while(1){
			for(i=0;i<7;i++){
2000456a:	f04f 0300 	mov.w	r3, #0
2000456e:	73fb      	strb	r3, [r7, #15]
20004570:	e02e      	b.n	200045d0 <vpld_callback+0x80>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
20004572:	f64d 33a8 	movw	r3, #56232	; 0xdba8
20004576:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000457a:	681c      	ldr	r4, [r3, #0]
2000457c:	7bfd      	ldrb	r5, [r7, #15]
2000457e:	7bbb      	ldrb	r3, [r7, #14]
20004580:	7bfa      	ldrb	r2, [r7, #15]
20004582:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
20004586:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000458a:	f04f 0121 	mov.w	r1, #33	; 0x21
2000458e:	f7fc fc63 	bl	20000e58 <get_ADC_value>
20004592:	4603      	mov	r3, r0
20004594:	4619      	mov	r1, r3
20004596:	f105 0204 	add.w	r2, r5, #4
2000459a:	f001 00ff 	and.w	r0, r1, #255	; 0xff
2000459e:	ea4f 0342 	mov.w	r3, r2, lsl #1
200045a2:	4423      	add	r3, r4
200045a4:	f04f 0c00 	mov.w	ip, #0
200045a8:	ea4c 0000 	orr.w	r0, ip, r0
200045ac:	7198      	strb	r0, [r3, #6]
200045ae:	ea4f 2311 	mov.w	r3, r1, lsr #8
200045b2:	b298      	uxth	r0, r3
200045b4:	ea4f 0342 	mov.w	r3, r2, lsl #1
200045b8:	4423      	add	r3, r4
200045ba:	f04f 0200 	mov.w	r2, #0
200045be:	4611      	mov	r1, r2
200045c0:	4602      	mov	r2, r0
200045c2:	ea41 0202 	orr.w	r2, r1, r2
200045c6:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
//		while(1){
			for(i=0;i<7;i++){
200045c8:	7bfb      	ldrb	r3, [r7, #15]
200045ca:	f103 0301 	add.w	r3, r3, #1
200045ce:	73fb      	strb	r3, [r7, #15]
200045d0:	7bfb      	ldrb	r3, [r7, #15]
200045d2:	2b06      	cmp	r3, #6
200045d4:	d9cd      	bls.n	20004572 <vpld_callback+0x22>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
200045d6:	f24d 4348 	movw	r3, #54344	; 0xd448
200045da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045de:	f04f 0202 	mov.w	r2, #2
200045e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);

//		}

//	}
}
200045e6:	f107 0710 	add.w	r7, r7, #16
200045ea:	46bd      	mov	sp, r7
200045ec:	bdb0      	pop	{r4, r5, r7, pc}
200045ee:	bf00      	nop

200045f0 <vtlm_task>:


void vtlm_task(void* d){
200045f0:	b480      	push	{r7}
200045f2:	b085      	sub	sp, #20
200045f4:	af00      	add	r7, sp, #0
200045f6:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;
200045f8:	f04f 0300 	mov.w	r3, #0
200045fc:	81fb      	strh	r3, [r7, #14]

//	xQueueReceive(Data_Queue, data, 10);

//	if(feed_tlm_task != pdFAIL){
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		if(data[511] == HK_API_ID){
200045fe:	f24d 5328 	movw	r3, #54568	; 0xd528
20004602:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004606:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
2000460a:	2b01      	cmp	r3, #1
2000460c:	d17b      	bne.n	20004706 <vtlm_task+0x116>
//			while(1){
				hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
2000460e:	f64d 3380 	movw	r3, #56192	; 0xdb80
20004612:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004616:	681b      	ldr	r3, [r3, #0]
20004618:	f04f 0200 	mov.w	r2, #0
2000461c:	f042 0208 	orr.w	r2, r2, #8
20004620:	701a      	strb	r2, [r3, #0]
20004622:	f04f 0200 	mov.w	r2, #0
20004626:	f042 0201 	orr.w	r2, r2, #1
2000462a:	705a      	strb	r2, [r3, #1]
				hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
2000462c:	f64d 3380 	movw	r3, #56192	; 0xdb80
20004630:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004634:	681a      	ldr	r2, [r3, #0]
20004636:	89fb      	ldrh	r3, [r7, #14]
20004638:	f103 0301 	add.w	r3, r3, #1
2000463c:	81fb      	strh	r3, [r7, #14]
2000463e:	89fb      	ldrh	r3, [r7, #14]
20004640:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004644:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004648:	b29b      	uxth	r3, r3
2000464a:	b29b      	uxth	r3, r3
2000464c:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004650:	b299      	uxth	r1, r3
20004652:	89fb      	ldrh	r3, [r7, #14]
20004654:	f103 0301 	add.w	r3, r3, #1
20004658:	81fb      	strh	r3, [r7, #14]
2000465a:	89fb      	ldrh	r3, [r7, #14]
2000465c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004660:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004664:	b29b      	uxth	r3, r3
20004666:	b29b      	uxth	r3, r3
20004668:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000466c:	b29b      	uxth	r3, r3
2000466e:	ea41 0303 	orr.w	r3, r1, r3
20004672:	b29b      	uxth	r3, r3
20004674:	b29b      	uxth	r3, r3
20004676:	f003 01ff 	and.w	r1, r3, #255	; 0xff
2000467a:	f04f 0000 	mov.w	r0, #0
2000467e:	ea40 0101 	orr.w	r1, r0, r1
20004682:	7091      	strb	r1, [r2, #2]
20004684:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004688:	b29b      	uxth	r3, r3
2000468a:	f04f 0100 	mov.w	r1, #0
2000468e:	ea41 0303 	orr.w	r3, r1, r3
20004692:	70d3      	strb	r3, [r2, #3]
				hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
20004694:	f64d 3380 	movw	r3, #56192	; 0xdb80
20004698:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000469c:	681b      	ldr	r3, [r3, #0]
2000469e:	f04f 0200 	mov.w	r2, #0
200046a2:	711a      	strb	r2, [r3, #4]
200046a4:	f04f 0200 	mov.w	r2, #0
200046a8:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
200046ac:	715a      	strb	r2, [r3, #5]
				hk_pkt->ccsds_s1 = 0;
200046ae:	f64d 3380 	movw	r3, #56192	; 0xdb80
200046b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046b6:	681b      	ldr	r3, [r3, #0]
200046b8:	f04f 0200 	mov.w	r2, #0
200046bc:	719a      	strb	r2, [r3, #6]
200046be:	f04f 0200 	mov.w	r2, #0
200046c2:	71da      	strb	r2, [r3, #7]
200046c4:	f04f 0200 	mov.w	r2, #0
200046c8:	721a      	strb	r2, [r3, #8]
200046ca:	f04f 0200 	mov.w	r2, #0
200046ce:	725a      	strb	r2, [r3, #9]
				hk_pkt->ccsds_s2 = 0;
200046d0:	f64d 3380 	movw	r3, #56192	; 0xdb80
200046d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046d8:	681b      	ldr	r3, [r3, #0]
200046da:	f04f 0200 	mov.w	r2, #0
200046de:	729a      	strb	r2, [r3, #10]
200046e0:	f04f 0200 	mov.w	r2, #0
200046e4:	72da      	strb	r2, [r3, #11]
200046e6:	f04f 0200 	mov.w	r2, #0
200046ea:	731a      	strb	r2, [r3, #12]
200046ec:	f04f 0200 	mov.w	r2, #0
200046f0:	735a      	strb	r2, [r3, #13]
				Data_HK_Queue = hk_pkt;
200046f2:	f64d 3380 	movw	r3, #56192	; 0xdb80
200046f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046fa:	681a      	ldr	r2, [r3, #0]
200046fc:	f64d 3390 	movw	r3, #56208	; 0xdb90
20004700:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004704:	601a      	str	r2, [r3, #0]

//			}
		}


		if(data_pld[49] == PLD_API_ID){
20004706:	f24d 4348 	movw	r3, #54344	; 0xd448
2000470a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000470e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
20004712:	2b02      	cmp	r3, #2
20004714:	d17b      	bne.n	2000480e <vtlm_task+0x21e>
//			while(1){

				pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
20004716:	f64d 33a8 	movw	r3, #56232	; 0xdba8
2000471a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000471e:	681b      	ldr	r3, [r3, #0]
20004720:	f04f 0200 	mov.w	r2, #0
20004724:	f042 0208 	orr.w	r2, r2, #8
20004728:	701a      	strb	r2, [r3, #0]
2000472a:	f04f 0200 	mov.w	r2, #0
2000472e:	f042 0202 	orr.w	r2, r2, #2
20004732:	705a      	strb	r2, [r3, #1]
				pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004734:	f64d 33a8 	movw	r3, #56232	; 0xdba8
20004738:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000473c:	681a      	ldr	r2, [r3, #0]
2000473e:	89fb      	ldrh	r3, [r7, #14]
20004740:	f103 0301 	add.w	r3, r3, #1
20004744:	81fb      	strh	r3, [r7, #14]
20004746:	89fb      	ldrh	r3, [r7, #14]
20004748:	ea6f 4383 	mvn.w	r3, r3, lsl #18
2000474c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004750:	b29b      	uxth	r3, r3
20004752:	b29b      	uxth	r3, r3
20004754:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004758:	b299      	uxth	r1, r3
2000475a:	89fb      	ldrh	r3, [r7, #14]
2000475c:	f103 0301 	add.w	r3, r3, #1
20004760:	81fb      	strh	r3, [r7, #14]
20004762:	89fb      	ldrh	r3, [r7, #14]
20004764:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004768:	ea6f 4393 	mvn.w	r3, r3, lsr #18
2000476c:	b29b      	uxth	r3, r3
2000476e:	b29b      	uxth	r3, r3
20004770:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004774:	b29b      	uxth	r3, r3
20004776:	ea41 0303 	orr.w	r3, r1, r3
2000477a:	b29b      	uxth	r3, r3
2000477c:	b29b      	uxth	r3, r3
2000477e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004782:	f04f 0000 	mov.w	r0, #0
20004786:	ea40 0101 	orr.w	r1, r0, r1
2000478a:	7091      	strb	r1, [r2, #2]
2000478c:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004790:	b29b      	uxth	r3, r3
20004792:	f04f 0100 	mov.w	r1, #0
20004796:	ea41 0303 	orr.w	r3, r1, r3
2000479a:	70d3      	strb	r3, [r2, #3]
				pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
2000479c:	f64d 33a8 	movw	r3, #56232	; 0xdba8
200047a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047a4:	681b      	ldr	r3, [r3, #0]
200047a6:	f04f 0200 	mov.w	r2, #0
200047aa:	711a      	strb	r2, [r3, #4]
200047ac:	f04f 0200 	mov.w	r2, #0
200047b0:	f042 021e 	orr.w	r2, r2, #30
200047b4:	715a      	strb	r2, [r3, #5]

				pld_pkt->ccsds_s1 = 0;
200047b6:	f64d 33a8 	movw	r3, #56232	; 0xdba8
200047ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047be:	681b      	ldr	r3, [r3, #0]
200047c0:	f04f 0200 	mov.w	r2, #0
200047c4:	719a      	strb	r2, [r3, #6]
200047c6:	f04f 0200 	mov.w	r2, #0
200047ca:	71da      	strb	r2, [r3, #7]
200047cc:	f04f 0200 	mov.w	r2, #0
200047d0:	721a      	strb	r2, [r3, #8]
200047d2:	f04f 0200 	mov.w	r2, #0
200047d6:	725a      	strb	r2, [r3, #9]
				pld_pkt->ccsds_s2 = 0;
200047d8:	f64d 33a8 	movw	r3, #56232	; 0xdba8
200047dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047e0:	681b      	ldr	r3, [r3, #0]
200047e2:	f04f 0200 	mov.w	r2, #0
200047e6:	729a      	strb	r2, [r3, #10]
200047e8:	f04f 0200 	mov.w	r2, #0
200047ec:	72da      	strb	r2, [r3, #11]
200047ee:	f04f 0200 	mov.w	r2, #0
200047f2:	731a      	strb	r2, [r3, #12]
200047f4:	f04f 0200 	mov.w	r2, #0
200047f8:	735a      	strb	r2, [r3, #13]
				Data_PLD_Queue  = pld_pkt ;
200047fa:	f64d 33a8 	movw	r3, #56232	; 0xdba8
200047fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004802:	681a      	ldr	r2, [r3, #0]
20004804:	f64d 33a0 	movw	r3, #56224	; 0xdba0
20004808:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000480c:	601a      	str	r2, [r3, #0]
		else{

		}
//	}

}
2000480e:	f107 0714 	add.w	r7, r7, #20
20004812:	46bd      	mov	sp, r7
20004814:	bc80      	pop	{r7}
20004816:	4770      	bx	lr

20004818 <vtlm_sender>:


void vtlm_sender(void* d){
20004818:	b580      	push	{r7, lr}
2000481a:	b082      	sub	sp, #8
2000481c:	af00      	add	r7, sp, #0
2000481e:	6078      	str	r0, [r7, #4]
//	Queue_Data = (QueueHandle_t*) d1;
//	uint8_t a;

//	if(feed_tlm_sender != pdFAIL){
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		if(data[511] == HK_API_ID){
20004820:	f24d 5328 	movw	r3, #54568	; 0xd528
20004824:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004828:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
2000482c:	2b01      	cmp	r3, #1
2000482e:	d10d      	bne.n	2000484c <vtlm_sender+0x34>
//			while(1){

				MSS_UART_polled_tx(&g_mss_uart0, Data_HK_Queue, sizeof(pkt_hk_t));
20004830:	f64d 3390 	movw	r3, #56208	; 0xdb90
20004834:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004838:	681b      	ldr	r3, [r3, #0]
2000483a:	f64d 30ec 	movw	r0, #56300	; 0xdbec
2000483e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004842:	4619      	mov	r1, r3
20004844:	f04f 022c 	mov.w	r2, #44	; 0x2c
20004848:	f000 fb44 	bl	20004ed4 <MSS_UART_polled_tx>
//				vTaskResume(get_hk_pkt_handle);
//				xTaskNotifyGive(get_pld_pkt_handle);
//				vTask_Delay(1000);
//			}
		}
		if(data_pld[49] == PLD_API_ID){
2000484c:	f24d 4348 	movw	r3, #54344	; 0xd448
20004850:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004854:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
20004858:	2b02      	cmp	r3, #2
2000485a:	d10d      	bne.n	20004878 <vtlm_sender+0x60>
//			while(1){

				MSS_UART_polled_tx(&g_mss_uart0, Data_PLD_Queue , sizeof(pkt_pld_t));
2000485c:	f64d 33a0 	movw	r3, #56224	; 0xdba0
20004860:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004864:	681b      	ldr	r3, [r3, #0]
20004866:	f64d 30ec 	movw	r0, #56300	; 0xdbec
2000486a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000486e:	4619      	mov	r1, r3
20004870:	f04f 021e 	mov.w	r2, #30
20004874:	f000 fb2e 	bl	20004ed4 <MSS_UART_polled_tx>
//				vTask_Delay(1000);
//			}
		}
//	}
}
20004878:	f107 0708 	add.w	r7, r7, #8
2000487c:	46bd      	mov	sp, r7
2000487e:	bd80      	pop	{r7, pc}

20004880 <irq_tsk_func>:
//		vTaskSuspend(NULL);
//	}
//
//}

void irq_tsk_func(void* f_param){
20004880:	b580      	push	{r7, lr}
20004882:	b084      	sub	sp, #16
20004884:	af00      	add	r7, sp, #0
20004886:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue;

	while(1){
		xTaskNotifyWait(0x00, 0, &ulNotifiedValue, portMAX_DELAY);
20004888:	f107 0308 	add.w	r3, r7, #8
2000488c:	f04f 0000 	mov.w	r0, #0
20004890:	f04f 0100 	mov.w	r1, #0
20004894:	461a      	mov	r2, r3
20004896:	f04f 33ff 	mov.w	r3, #4294967295
2000489a:	f7fe fa8b 	bl	20002db4 <xTaskNotifyWait>
		ulTaskNotifyTake(pdTRUE, 1);
2000489e:	f04f 0001 	mov.w	r0, #1
200048a2:	f04f 0101 	mov.w	r1, #1
200048a6:	f7fe fa25 	bl	20002cf4 <ulTaskNotifyTake>
		command_cnt++;
200048aa:	f64d 3370 	movw	r3, #56176	; 0xdb70
200048ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048b2:	881b      	ldrh	r3, [r3, #0]
200048b4:	f103 0301 	add.w	r3, r3, #1
200048b8:	b29a      	uxth	r2, r3
200048ba:	f64d 3370 	movw	r3, #56176	; 0xdb70
200048be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048c2:	801a      	strh	r2, [r3, #0]
		uint8_t* irq_buffer;
		irq_buffer = (uint8_t *) f_param;
200048c4:	687b      	ldr	r3, [r7, #4]
200048c6:	60fb      	str	r3, [r7, #12]
		 if(irq_buffer[0] == 127){
200048c8:	68fb      	ldr	r3, [r7, #12]
200048ca:	781b      	ldrb	r3, [r3, #0]
200048cc:	2b7f      	cmp	r3, #127	; 0x7f
200048ce:	d13d      	bne.n	2000494c <irq_tsk_func+0xcc>
				c[command_index] = '\0';
200048d0:	f64d 1328 	movw	r3, #55592	; 0xd928
200048d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048d8:	781b      	ldrb	r3, [r3, #0]
200048da:	461a      	mov	r2, r3
200048dc:	f24d 5308 	movw	r3, #54536	; 0xd508
200048e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048e4:	f04f 0100 	mov.w	r1, #0
200048e8:	5499      	strb	r1, [r3, r2]
				c[command_index - 1] = 127;
200048ea:	f64d 1328 	movw	r3, #55592	; 0xd928
200048ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048f2:	781b      	ldrb	r3, [r3, #0]
200048f4:	f103 32ff 	add.w	r2, r3, #4294967295
200048f8:	f24d 5308 	movw	r3, #54536	; 0xd508
200048fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004900:	f04f 017f 	mov.w	r1, #127	; 0x7f
20004904:	5499      	strb	r1, [r3, r2]
				MSS_UART_polled_tx(&g_mss_uart0, &c[command_index - 1], 1);
20004906:	f64d 1328 	movw	r3, #55592	; 0xd928
2000490a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000490e:	781b      	ldrb	r3, [r3, #0]
20004910:	f103 32ff 	add.w	r2, r3, #4294967295
20004914:	f24d 5308 	movw	r3, #54536	; 0xd508
20004918:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000491c:	4413      	add	r3, r2
2000491e:	f64d 30ec 	movw	r0, #56300	; 0xdbec
20004922:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004926:	4619      	mov	r1, r3
20004928:	f04f 0201 	mov.w	r2, #1
2000492c:	f000 fad2 	bl	20004ed4 <MSS_UART_polled_tx>
				command_index = command_index - 1;
20004930:	f64d 1328 	movw	r3, #55592	; 0xd928
20004934:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004938:	781b      	ldrb	r3, [r3, #0]
2000493a:	f103 33ff 	add.w	r3, r3, #4294967295
2000493e:	b2da      	uxtb	r2, r3
20004940:	f64d 1328 	movw	r3, #55592	; 0xd928
20004944:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004948:	701a      	strb	r2, [r3, #0]
		else{
			c[command_index] =  irq_buffer[0];
			MSS_UART_polled_tx(&g_mss_uart0, &c[command_index], 1);
			command_index = command_index + 1;
		}
	}
2000494a:	e79d      	b.n	20004888 <irq_tsk_func+0x8>
				c[command_index - 1] = 127;
				MSS_UART_polled_tx(&g_mss_uart0, &c[command_index - 1], 1);
				command_index = command_index - 1;
			}
		else{
			c[command_index] =  irq_buffer[0];
2000494c:	f64d 1328 	movw	r3, #55592	; 0xd928
20004950:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004954:	781b      	ldrb	r3, [r3, #0]
20004956:	461a      	mov	r2, r3
20004958:	68fb      	ldr	r3, [r7, #12]
2000495a:	7819      	ldrb	r1, [r3, #0]
2000495c:	f24d 5308 	movw	r3, #54536	; 0xd508
20004960:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004964:	5499      	strb	r1, [r3, r2]
			MSS_UART_polled_tx(&g_mss_uart0, &c[command_index], 1);
20004966:	f64d 1328 	movw	r3, #55592	; 0xd928
2000496a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000496e:	781b      	ldrb	r3, [r3, #0]
20004970:	461a      	mov	r2, r3
20004972:	f24d 5308 	movw	r3, #54536	; 0xd508
20004976:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000497a:	4413      	add	r3, r2
2000497c:	f64d 30ec 	movw	r0, #56300	; 0xdbec
20004980:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004984:	4619      	mov	r1, r3
20004986:	f04f 0201 	mov.w	r2, #1
2000498a:	f000 faa3 	bl	20004ed4 <MSS_UART_polled_tx>
			command_index = command_index + 1;
2000498e:	f64d 1328 	movw	r3, #55592	; 0xd928
20004992:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004996:	781b      	ldrb	r3, [r3, #0]
20004998:	f103 0301 	add.w	r3, r3, #1
2000499c:	b2da      	uxtb	r2, r3
2000499e:	f64d 1328 	movw	r3, #55592	; 0xd928
200049a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049a6:	701a      	strb	r2, [r3, #0]
		}
	}
200049a8:	e76e      	b.n	20004888 <irq_tsk_func+0x8>
200049aa:	bf00      	nop

200049ac <uart0_rx_handler>:
}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
200049ac:	b580      	push	{r7, lr}
200049ae:	b084      	sub	sp, #16
200049b0:	af00      	add	r7, sp, #0
200049b2:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer,1);
200049b4:	6878      	ldr	r0, [r7, #4]
200049b6:	f24d 41e8 	movw	r1, #54504	; 0xd4e8
200049ba:	f2c2 0100 	movt	r1, #8192	; 0x2000
200049be:	f04f 0201 	mov.w	r2, #1
200049c2:	f000 faf9 	bl	20004fb8 <MSS_UART_get_rx>
200049c6:	4602      	mov	r2, r0
200049c8:	f24d 5324 	movw	r3, #54564	; 0xd524
200049cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049d0:	601a      	str	r2, [r3, #0]
//	checkIfYieldRequired = xTaskResumeFromISR(&uart_irq);
//	if(checkIfYieldRequired == pdTRUE){
//		portYIELD_FROM_ISR(checkIfYieldRequired);
//	}
	BaseType_t xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
200049d2:	f04f 0300 	mov.w	r3, #0
200049d6:	60bb      	str	r3, [r7, #8]

//	 xTimerPendFunctionCallFromISR(vProcessInterface, (void*) uart0_irq_rx_buffer, NULL, &xHigherPriorityTaskWoken);
//	 xTimerStartFromISR(irq_timer, &xHigherPriorityTaskWoken);


	vTaskNotifyGiveFromISR(uart_irq, &xHigherPriorityTaskWoken);
200049d8:	f24d 4344 	movw	r3, #54340	; 0xd444
200049dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049e0:	681a      	ldr	r2, [r3, #0]
200049e2:	f107 0308 	add.w	r3, r7, #8
200049e6:	4610      	mov	r0, r2
200049e8:	4619      	mov	r1, r3
200049ea:	f7fe fa5b 	bl	20002ea4 <vTaskNotifyGiveFromISR>
	uint8_t a;
	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
200049ee:	68bb      	ldr	r3, [r7, #8]
200049f0:	2b00      	cmp	r3, #0
200049f2:	d00a      	beq.n	20004a0a <uart0_rx_handler+0x5e>
200049f4:	f64e 5304 	movw	r3, #60676	; 0xed04
200049f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
200049fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20004a00:	601a      	str	r2, [r3, #0]
20004a02:	f3bf 8f4f 	dsb	sy
20004a06:	f3bf 8f6f 	isb	sy

}
20004a0a:	f107 0710 	add.w	r7, r7, #16
20004a0e:	46bd      	mov	sp, r7
20004a10:	bd80      	pop	{r7, pc}
20004a12:	bf00      	nop

20004a14 <demo>:
//	 }
//}



void demo(void){
20004a14:	b590      	push	{r4, r7, lr}
20004a16:	b087      	sub	sp, #28
20004a18:	af02      	add	r7, sp, #8
//		 msg[0] = 3;


//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
20004a1a:	f64d 0328 	movw	r3, #55336	; 0xd828
20004a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a22:	603b      	str	r3, [r7, #0]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
20004a24:	f247 03d0 	movw	r3, #28880	; 0x70d0
20004a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a2c:	607b      	str	r3, [r7, #4]
		imu_ptr->init = &init;
20004a2e:	683a      	ldr	r2, [r7, #0]
20004a30:	f640 63f9 	movw	r3, #3833	; 0xef9
20004a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a38:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
20004a3a:	683b      	ldr	r3, [r7, #0]
20004a3c:	681b      	ldr	r3, [r3, #0]
20004a3e:	f04f 0000 	mov.w	r0, #0
20004a42:	6879      	ldr	r1, [r7, #4]
20004a44:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
20004a46:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
20004a4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004a4e:	f244 0100 	movw	r1, #16384	; 0x4000
20004a52:	f2c5 0100 	movt	r1, #20480	; 0x5000
20004a56:	f04f 0221 	mov.w	r2, #33	; 0x21
20004a5a:	f04f 0300 	mov.w	r3, #0
20004a5e:	f000 ff3b 	bl	200058d8 <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
20004a62:	f64d 0328 	movw	r3, #55336	; 0xd828
20004a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a6a:	60bb      	str	r3, [r7, #8]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
20004a6c:	f247 03f0 	movw	r3, #28912	; 0x70f0
20004a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a74:	60fb      	str	r3, [r7, #12]
		vc_ptr->init = &init;
20004a76:	68ba      	ldr	r2, [r7, #8]
20004a78:	f640 63f9 	movw	r3, #3833	; 0xef9
20004a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a80:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
20004a82:	68bb      	ldr	r3, [r7, #8]
20004a84:	681b      	ldr	r3, [r3, #0]
20004a86:	f04f 000a 	mov.w	r0, #10
20004a8a:	68f9      	ldr	r1, [r7, #12]
20004a8c:	4798      	blx	r3

		Data_HK_Queue = xQueueCreate(HK_QUEUE_LENGTH, SIZE_QUEUE);
20004a8e:	f04f 0001 	mov.w	r0, #1
20004a92:	f04f 012c 	mov.w	r1, #44	; 0x2c
20004a96:	f04f 0200 	mov.w	r2, #0
20004a9a:	f7fc fbad 	bl	200011f8 <xQueueGenericCreate>
20004a9e:	4602      	mov	r2, r0
20004aa0:	f64d 3390 	movw	r3, #56208	; 0xdb90
20004aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004aa8:	601a      	str	r2, [r3, #0]
		Data_PLD_Queue = xQueueCreate(PLD_QUEUE_LENGTH, SIZE_PLD_QUEUE);
20004aaa:	f04f 0001 	mov.w	r0, #1
20004aae:	f04f 011e 	mov.w	r1, #30
20004ab2:	f04f 0200 	mov.w	r2, #0
20004ab6:	f7fc fb9f 	bl	200011f8 <xQueueGenericCreate>
20004aba:	4602      	mov	r2, r0
20004abc:	f64d 33a0 	movw	r3, #56224	; 0xdba0
20004ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ac4:	601a      	str	r2, [r3, #0]

		NVIC_EnableIRQ(UART0_IRQn);
20004ac6:	f04f 000a 	mov.w	r0, #10
20004aca:	f7ff fb2d 	bl	20004128 <NVIC_EnableIRQ>
		NVIC_SetPriority(UART0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1);
20004ace:	f04f 000a 	mov.w	r0, #10
20004ad2:	f04f 019f 	mov.w	r1, #159	; 0x9f
20004ad6:	f7ff fb43 	bl	20004160 <NVIC_SetPriority>

		pkt_timer[0] = xTimerCreate("Hk_Timer", pdMS_TO_TICKS(2000), pdTRUE, (void* )0, vhk_callback);
20004ada:	f244 13bd 	movw	r3, #16829	; 0x41bd
20004ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ae2:	9300      	str	r3, [sp, #0]
20004ae4:	f247 005c 	movw	r0, #28764	; 0x705c
20004ae8:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004aec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
20004af0:	f04f 0201 	mov.w	r2, #1
20004af4:	f04f 0300 	mov.w	r3, #0
20004af8:	f7fe fb3c 	bl	20003174 <xTimerCreate>
20004afc:	4602      	mov	r2, r0
20004afe:	f64d 335c 	movw	r3, #56156	; 0xdb5c
20004b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b06:	601a      	str	r2, [r3, #0]
		xTimerStart(pkt_timer[0], 0);
20004b08:	f64d 335c 	movw	r3, #56156	; 0xdb5c
20004b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b10:	681c      	ldr	r4, [r3, #0]
20004b12:	f7fd fb1d 	bl	20002150 <xTaskGetTickCount>
20004b16:	4603      	mov	r3, r0
20004b18:	f04f 0200 	mov.w	r2, #0
20004b1c:	9200      	str	r2, [sp, #0]
20004b1e:	4620      	mov	r0, r4
20004b20:	f04f 0101 	mov.w	r1, #1
20004b24:	461a      	mov	r2, r3
20004b26:	f04f 0300 	mov.w	r3, #0
20004b2a:	f7fe fb75 	bl	20003218 <xTimerGenericCommand>
		pkt_timer[3] = xTimerCreate("PLD_Timer", pdMS_TO_TICKS(4000), pdTRUE, (void* )0, vpld_callback);
20004b2e:	f244 5351 	movw	r3, #17745	; 0x4551
20004b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b36:	9300      	str	r3, [sp, #0]
20004b38:	f247 0068 	movw	r0, #28776	; 0x7068
20004b3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004b40:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
20004b44:	f04f 0201 	mov.w	r2, #1
20004b48:	f04f 0300 	mov.w	r3, #0
20004b4c:	f7fe fb12 	bl	20003174 <xTimerCreate>
20004b50:	4602      	mov	r2, r0
20004b52:	f64d 335c 	movw	r3, #56156	; 0xdb5c
20004b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b5a:	60da      	str	r2, [r3, #12]
		xTimerStart(pkt_timer[3], 0);
20004b5c:	f64d 335c 	movw	r3, #56156	; 0xdb5c
20004b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b64:	68dc      	ldr	r4, [r3, #12]
20004b66:	f7fd faf3 	bl	20002150 <xTaskGetTickCount>
20004b6a:	4603      	mov	r3, r0
20004b6c:	f04f 0200 	mov.w	r2, #0
20004b70:	9200      	str	r2, [sp, #0]
20004b72:	4620      	mov	r0, r4
20004b74:	f04f 0101 	mov.w	r1, #1
20004b78:	461a      	mov	r2, r3
20004b7a:	f04f 0300 	mov.w	r3, #0
20004b7e:	f7fe fb4b 	bl	20003218 <xTimerGenericCommand>
		pkt_timer[1] = xTimerCreate("TLM_Task_Timer", pdMS_TO_TICKS(5010),pdTRUE, (void* )0, vtlm_task);
20004b82:	f244 53f1 	movw	r3, #17905	; 0x45f1
20004b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b8a:	9300      	str	r3, [sp, #0]
20004b8c:	f247 0074 	movw	r0, #28788	; 0x7074
20004b90:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004b94:	f241 3192 	movw	r1, #5010	; 0x1392
20004b98:	f04f 0201 	mov.w	r2, #1
20004b9c:	f04f 0300 	mov.w	r3, #0
20004ba0:	f7fe fae8 	bl	20003174 <xTimerCreate>
20004ba4:	4602      	mov	r2, r0
20004ba6:	f64d 335c 	movw	r3, #56156	; 0xdb5c
20004baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bae:	605a      	str	r2, [r3, #4]
		xTimerStart(pkt_timer[1], 0);
20004bb0:	f64d 335c 	movw	r3, #56156	; 0xdb5c
20004bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bb8:	685c      	ldr	r4, [r3, #4]
20004bba:	f7fd fac9 	bl	20002150 <xTaskGetTickCount>
20004bbe:	4603      	mov	r3, r0
20004bc0:	f04f 0200 	mov.w	r2, #0
20004bc4:	9200      	str	r2, [sp, #0]
20004bc6:	4620      	mov	r0, r4
20004bc8:	f04f 0101 	mov.w	r1, #1
20004bcc:	461a      	mov	r2, r3
20004bce:	f04f 0300 	mov.w	r3, #0
20004bd2:	f7fe fb21 	bl	20003218 <xTimerGenericCommand>
		pkt_timer[2] = xTimerCreate("Sender_Timer", pdMS_TO_TICKS(5015), pdTRUE, (void* )0, vtlm_sender);
20004bd6:	f644 0319 	movw	r3, #18457	; 0x4819
20004bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bde:	9300      	str	r3, [sp, #0]
20004be0:	f247 0084 	movw	r0, #28804	; 0x7084
20004be4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004be8:	f241 3197 	movw	r1, #5015	; 0x1397
20004bec:	f04f 0201 	mov.w	r2, #1
20004bf0:	f04f 0300 	mov.w	r3, #0
20004bf4:	f7fe fabe 	bl	20003174 <xTimerCreate>
20004bf8:	4602      	mov	r2, r0
20004bfa:	f64d 335c 	movw	r3, #56156	; 0xdb5c
20004bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c02:	609a      	str	r2, [r3, #8]
		xTimerStart(pkt_timer[2], 0);
20004c04:	f64d 335c 	movw	r3, #56156	; 0xdb5c
20004c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c0c:	689c      	ldr	r4, [r3, #8]
20004c0e:	f7fd fa9f 	bl	20002150 <xTaskGetTickCount>
20004c12:	4603      	mov	r3, r0
20004c14:	f04f 0200 	mov.w	r2, #0
20004c18:	9200      	str	r2, [sp, #0]
20004c1a:	4620      	mov	r0, r4
20004c1c:	f04f 0101 	mov.w	r1, #1
20004c20:	461a      	mov	r2, r3
20004c22:	f04f 0300 	mov.w	r3, #0
20004c26:	f7fe faf7 	bl	20003218 <xTimerGenericCommand>
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
20004c2a:	f64d 30ec 	movw	r0, #56300	; 0xdbec
20004c2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004c32:	f44f 5116 	mov.w	r1, #9600	; 0x2580
20004c36:	f04f 0203 	mov.w	r2, #3
20004c3a:	f000 f909 	bl	20004e50 <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_ONE_STOP_BIT);
20004c3e:	f64d 30ec 	movw	r0, #56300	; 0xdbec
20004c42:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004c46:	f644 11ad 	movw	r1, #18861	; 0x49ad
20004c4a:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004c4e:	f04f 0200 	mov.w	r2, #0
20004c52:	f000 fa1f 	bl	20005094 <MSS_UART_set_rx_handler>
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;



	 xMutex = xSemaphoreCreateMutex();
20004c56:	f04f 0001 	mov.w	r0, #1
20004c5a:	f7fc fb4f 	bl	200012fc <xQueueCreateMutex>
20004c5e:	4602      	mov	r2, r0
20004c60:	f64d 338c 	movw	r3, #56204	; 0xdb8c
20004c64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c68:	601a      	str	r2, [r3, #0]

	 xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, NULL, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1, &uart_irq);
20004c6a:	f04f 039f 	mov.w	r3, #159	; 0x9f
20004c6e:	9300      	str	r3, [sp, #0]
20004c70:	f24d 4344 	movw	r3, #54340	; 0xd444
20004c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c78:	9301      	str	r3, [sp, #4]
20004c7a:	f644 0081 	movw	r0, #18561	; 0x4881
20004c7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004c82:	f247 0194 	movw	r1, #28820	; 0x7094
20004c86:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004c8a:	f04f 0250 	mov.w	r2, #80	; 0x50
20004c8e:	f04f 0300 	mov.w	r3, #0
20004c92:	f7fc ffa3 	bl	20001bdc <xTaskCreate>
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
20004c96:	f7fd f91f 	bl	20001ed8 <vTaskStartScheduler>

}
20004c9a:	f107 0714 	add.w	r7, r7, #20
20004c9e:	46bd      	mov	sp, r7
20004ca0:	bd90      	pop	{r4, r7, pc}
20004ca2:	bf00      	nop

20004ca4 <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
20004ca4:	b580      	push	{r7, lr}
20004ca6:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
20004ca8:	f64d 1038 	movw	r0, #55608	; 0xd938
20004cac:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004cb0:	f001 f838 	bl	20005d24 <I2C_isr>
}
20004cb4:	bd80      	pop	{r7, pc}
20004cb6:	bf00      	nop

20004cb8 <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
20004cb8:	b580      	push	{r7, lr}
20004cba:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
20004cbc:	f64d 10a4 	movw	r0, #55716	; 0xd9a4
20004cc0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004cc4:	f001 f82e 	bl	20005d24 <I2C_isr>
}
20004cc8:	bd80      	pop	{r7, pc}
20004cca:	bf00      	nop

20004ccc <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
20004ccc:	b580      	push	{r7, lr}
20004cce:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
20004cd0:	f24d 407c 	movw	r0, #54396	; 0xd47c
20004cd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004cd8:	f001 f824 	bl	20005d24 <I2C_isr>
}
20004cdc:	bd80      	pop	{r7, pc}
20004cde:	bf00      	nop

20004ce0 <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
20004ce0:	b580      	push	{r7, lr}
20004ce2:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
20004ce4:	f64d 207c 	movw	r0, #55932	; 0xda7c
20004ce8:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004cec:	f001 f81a 	bl	20005d24 <I2C_isr>
}
20004cf0:	bd80      	pop	{r7, pc}
20004cf2:	bf00      	nop

20004cf4 <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
20004cf4:	b580      	push	{r7, lr}
20004cf6:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
20004cf8:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
20004cfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d00:	f001 f810 	bl	20005d24 <I2C_isr>
}
20004d04:	bd80      	pop	{r7, pc}
20004d06:	bf00      	nop

20004d08 <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
20004d08:	b580      	push	{r7, lr}
20004d0a:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
20004d0c:	f64d 2010 	movw	r0, #55824	; 0xda10
20004d10:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d14:	f001 f806 	bl	20005d24 <I2C_isr>
}
20004d18:	bd80      	pop	{r7, pc}
20004d1a:	bf00      	nop

20004d1c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004d1c:	b480      	push	{r7}
20004d1e:	b083      	sub	sp, #12
20004d20:	af00      	add	r7, sp, #0
20004d22:	4603      	mov	r3, r0
20004d24:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20004d26:	f24e 1300 	movw	r3, #57600	; 0xe100
20004d2a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004d2e:	f997 2007 	ldrsb.w	r2, [r7, #7]
20004d32:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004d36:	79f9      	ldrb	r1, [r7, #7]
20004d38:	f001 011f 	and.w	r1, r1, #31
20004d3c:	f04f 0001 	mov.w	r0, #1
20004d40:	fa00 f101 	lsl.w	r1, r0, r1
20004d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004d48:	f107 070c 	add.w	r7, r7, #12
20004d4c:	46bd      	mov	sp, r7
20004d4e:	bc80      	pop	{r7}
20004d50:	4770      	bx	lr
20004d52:	bf00      	nop

20004d54 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20004d54:	b480      	push	{r7}
20004d56:	b083      	sub	sp, #12
20004d58:	af00      	add	r7, sp, #0
20004d5a:	4603      	mov	r3, r0
20004d5c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20004d5e:	f24e 1300 	movw	r3, #57600	; 0xe100
20004d62:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004d66:	f997 2007 	ldrsb.w	r2, [r7, #7]
20004d6a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004d6e:	79f9      	ldrb	r1, [r7, #7]
20004d70:	f001 011f 	and.w	r1, r1, #31
20004d74:	f04f 0001 	mov.w	r0, #1
20004d78:	fa00 f101 	lsl.w	r1, r0, r1
20004d7c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20004d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004d84:	f107 070c 	add.w	r7, r7, #12
20004d88:	46bd      	mov	sp, r7
20004d8a:	bc80      	pop	{r7}
20004d8c:	4770      	bx	lr
20004d8e:	bf00      	nop

20004d90 <set_bit_reg8>:
20004d90:	b480      	push	{r7}
20004d92:	b083      	sub	sp, #12
20004d94:	af00      	add	r7, sp, #0
20004d96:	6078      	str	r0, [r7, #4]
20004d98:	460b      	mov	r3, r1
20004d9a:	70fb      	strb	r3, [r7, #3]
20004d9c:	687b      	ldr	r3, [r7, #4]
20004d9e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20004da2:	687b      	ldr	r3, [r7, #4]
20004da4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20004da8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20004dac:	ea4f 1343 	mov.w	r3, r3, lsl #5
20004db0:	441a      	add	r2, r3
20004db2:	78fb      	ldrb	r3, [r7, #3]
20004db4:	ea4f 0383 	mov.w	r3, r3, lsl #2
20004db8:	4413      	add	r3, r2
20004dba:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
20004dbe:	f04f 0201 	mov.w	r2, #1
20004dc2:	601a      	str	r2, [r3, #0]
20004dc4:	f107 070c 	add.w	r7, r7, #12
20004dc8:	46bd      	mov	sp, r7
20004dca:	bc80      	pop	{r7}
20004dcc:	4770      	bx	lr
20004dce:	bf00      	nop

20004dd0 <clear_bit_reg8>:
20004dd0:	b480      	push	{r7}
20004dd2:	b083      	sub	sp, #12
20004dd4:	af00      	add	r7, sp, #0
20004dd6:	6078      	str	r0, [r7, #4]
20004dd8:	460b      	mov	r3, r1
20004dda:	70fb      	strb	r3, [r7, #3]
20004ddc:	687b      	ldr	r3, [r7, #4]
20004dde:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20004de2:	687b      	ldr	r3, [r7, #4]
20004de4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20004de8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20004dec:	ea4f 1343 	mov.w	r3, r3, lsl #5
20004df0:	441a      	add	r2, r3
20004df2:	78fb      	ldrb	r3, [r7, #3]
20004df4:	ea4f 0383 	mov.w	r3, r3, lsl #2
20004df8:	4413      	add	r3, r2
20004dfa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
20004dfe:	f04f 0200 	mov.w	r2, #0
20004e02:	601a      	str	r2, [r3, #0]
20004e04:	f107 070c 	add.w	r7, r7, #12
20004e08:	46bd      	mov	sp, r7
20004e0a:	bc80      	pop	{r7}
20004e0c:	4770      	bx	lr
20004e0e:	bf00      	nop

20004e10 <read_bit_reg8>:
20004e10:	b480      	push	{r7}
20004e12:	b083      	sub	sp, #12
20004e14:	af00      	add	r7, sp, #0
20004e16:	6078      	str	r0, [r7, #4]
20004e18:	460b      	mov	r3, r1
20004e1a:	70fb      	strb	r3, [r7, #3]
20004e1c:	687b      	ldr	r3, [r7, #4]
20004e1e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20004e22:	687b      	ldr	r3, [r7, #4]
20004e24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20004e28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20004e2c:	ea4f 1343 	mov.w	r3, r3, lsl #5
20004e30:	441a      	add	r2, r3
20004e32:	78fb      	ldrb	r3, [r7, #3]
20004e34:	ea4f 0383 	mov.w	r3, r3, lsl #2
20004e38:	4413      	add	r3, r2
20004e3a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
20004e3e:	681b      	ldr	r3, [r3, #0]
20004e40:	b2db      	uxtb	r3, r3
20004e42:	4618      	mov	r0, r3
20004e44:	f107 070c 	add.w	r7, r7, #12
20004e48:	46bd      	mov	sp, r7
20004e4a:	bc80      	pop	{r7}
20004e4c:	4770      	bx	lr
20004e4e:	bf00      	nop

20004e50 <MSS_UART_init>:
20004e50:	b580      	push	{r7, lr}
20004e52:	b084      	sub	sp, #16
20004e54:	af00      	add	r7, sp, #0
20004e56:	60f8      	str	r0, [r7, #12]
20004e58:	60b9      	str	r1, [r7, #8]
20004e5a:	4613      	mov	r3, r2
20004e5c:	71fb      	strb	r3, [r7, #7]
20004e5e:	68fa      	ldr	r2, [r7, #12]
20004e60:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20004e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e68:	429a      	cmp	r2, r3
20004e6a:	d007      	beq.n	20004e7c <MSS_UART_init+0x2c>
20004e6c:	68fa      	ldr	r2, [r7, #12]
20004e6e:	f64d 33ac 	movw	r3, #56236	; 0xdbac
20004e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e76:	429a      	cmp	r2, r3
20004e78:	d000      	beq.n	20004e7c <MSS_UART_init+0x2c>
20004e7a:	be00      	bkpt	0x0000
20004e7c:	79fb      	ldrb	r3, [r7, #7]
20004e7e:	68f8      	ldr	r0, [r7, #12]
20004e80:	68b9      	ldr	r1, [r7, #8]
20004e82:	461a      	mov	r2, r3
20004e84:	f000 fa56 	bl	20005334 <global_init>
20004e88:	68fb      	ldr	r3, [r7, #12]
20004e8a:	681b      	ldr	r3, [r3, #0]
20004e8c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20004e90:	4618      	mov	r0, r3
20004e92:	f04f 0103 	mov.w	r1, #3
20004e96:	f7ff ff9b 	bl	20004dd0 <clear_bit_reg8>
20004e9a:	68fb      	ldr	r3, [r7, #12]
20004e9c:	681b      	ldr	r3, [r3, #0]
20004e9e:	f103 0334 	add.w	r3, r3, #52	; 0x34
20004ea2:	4618      	mov	r0, r3
20004ea4:	f04f 0102 	mov.w	r1, #2
20004ea8:	f7ff ff92 	bl	20004dd0 <clear_bit_reg8>
20004eac:	68fb      	ldr	r3, [r7, #12]
20004eae:	681b      	ldr	r3, [r3, #0]
20004eb0:	f103 0338 	add.w	r3, r3, #56	; 0x38
20004eb4:	4618      	mov	r0, r3
20004eb6:	f04f 0100 	mov.w	r1, #0
20004eba:	f7ff ff89 	bl	20004dd0 <clear_bit_reg8>
20004ebe:	68fa      	ldr	r2, [r7, #12]
20004ec0:	f245 73cd 	movw	r3, #22477	; 0x57cd
20004ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ec8:	6253      	str	r3, [r2, #36]	; 0x24
20004eca:	f107 0710 	add.w	r7, r7, #16
20004ece:	46bd      	mov	sp, r7
20004ed0:	bd80      	pop	{r7, pc}
20004ed2:	bf00      	nop

20004ed4 <MSS_UART_polled_tx>:
20004ed4:	b480      	push	{r7}
20004ed6:	b089      	sub	sp, #36	; 0x24
20004ed8:	af00      	add	r7, sp, #0
20004eda:	60f8      	str	r0, [r7, #12]
20004edc:	60b9      	str	r1, [r7, #8]
20004ede:	607a      	str	r2, [r7, #4]
20004ee0:	f04f 0300 	mov.w	r3, #0
20004ee4:	613b      	str	r3, [r7, #16]
20004ee6:	68fa      	ldr	r2, [r7, #12]
20004ee8:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20004eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ef0:	429a      	cmp	r2, r3
20004ef2:	d007      	beq.n	20004f04 <MSS_UART_polled_tx+0x30>
20004ef4:	68fa      	ldr	r2, [r7, #12]
20004ef6:	f64d 33ac 	movw	r3, #56236	; 0xdbac
20004efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004efe:	429a      	cmp	r2, r3
20004f00:	d000      	beq.n	20004f04 <MSS_UART_polled_tx+0x30>
20004f02:	be00      	bkpt	0x0000
20004f04:	68bb      	ldr	r3, [r7, #8]
20004f06:	2b00      	cmp	r3, #0
20004f08:	d100      	bne.n	20004f0c <MSS_UART_polled_tx+0x38>
20004f0a:	be00      	bkpt	0x0000
20004f0c:	687b      	ldr	r3, [r7, #4]
20004f0e:	2b00      	cmp	r3, #0
20004f10:	d100      	bne.n	20004f14 <MSS_UART_polled_tx+0x40>
20004f12:	be00      	bkpt	0x0000
20004f14:	68fa      	ldr	r2, [r7, #12]
20004f16:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20004f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f1e:	429a      	cmp	r2, r3
20004f20:	d006      	beq.n	20004f30 <MSS_UART_polled_tx+0x5c>
20004f22:	68fa      	ldr	r2, [r7, #12]
20004f24:	f64d 33ac 	movw	r3, #56236	; 0xdbac
20004f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f2c:	429a      	cmp	r2, r3
20004f2e:	d13d      	bne.n	20004fac <MSS_UART_polled_tx+0xd8>
20004f30:	68bb      	ldr	r3, [r7, #8]
20004f32:	2b00      	cmp	r3, #0
20004f34:	d03a      	beq.n	20004fac <MSS_UART_polled_tx+0xd8>
20004f36:	687b      	ldr	r3, [r7, #4]
20004f38:	2b00      	cmp	r3, #0
20004f3a:	d037      	beq.n	20004fac <MSS_UART_polled_tx+0xd8>
20004f3c:	68fb      	ldr	r3, [r7, #12]
20004f3e:	681b      	ldr	r3, [r3, #0]
20004f40:	7d1b      	ldrb	r3, [r3, #20]
20004f42:	76fb      	strb	r3, [r7, #27]
20004f44:	68fb      	ldr	r3, [r7, #12]
20004f46:	7b5a      	ldrb	r2, [r3, #13]
20004f48:	7efb      	ldrb	r3, [r7, #27]
20004f4a:	ea42 0303 	orr.w	r3, r2, r3
20004f4e:	b2da      	uxtb	r2, r3
20004f50:	68fb      	ldr	r3, [r7, #12]
20004f52:	735a      	strb	r2, [r3, #13]
20004f54:	7efb      	ldrb	r3, [r7, #27]
20004f56:	f003 0320 	and.w	r3, r3, #32
20004f5a:	2b00      	cmp	r3, #0
20004f5c:	d023      	beq.n	20004fa6 <MSS_UART_polled_tx+0xd2>
20004f5e:	f04f 0310 	mov.w	r3, #16
20004f62:	61fb      	str	r3, [r7, #28]
20004f64:	687b      	ldr	r3, [r7, #4]
20004f66:	2b0f      	cmp	r3, #15
20004f68:	d801      	bhi.n	20004f6e <MSS_UART_polled_tx+0x9a>
20004f6a:	687b      	ldr	r3, [r7, #4]
20004f6c:	61fb      	str	r3, [r7, #28]
20004f6e:	f04f 0300 	mov.w	r3, #0
20004f72:	617b      	str	r3, [r7, #20]
20004f74:	e00e      	b.n	20004f94 <MSS_UART_polled_tx+0xc0>
20004f76:	68fb      	ldr	r3, [r7, #12]
20004f78:	681b      	ldr	r3, [r3, #0]
20004f7a:	68b9      	ldr	r1, [r7, #8]
20004f7c:	693a      	ldr	r2, [r7, #16]
20004f7e:	440a      	add	r2, r1
20004f80:	7812      	ldrb	r2, [r2, #0]
20004f82:	701a      	strb	r2, [r3, #0]
20004f84:	693b      	ldr	r3, [r7, #16]
20004f86:	f103 0301 	add.w	r3, r3, #1
20004f8a:	613b      	str	r3, [r7, #16]
20004f8c:	697b      	ldr	r3, [r7, #20]
20004f8e:	f103 0301 	add.w	r3, r3, #1
20004f92:	617b      	str	r3, [r7, #20]
20004f94:	697a      	ldr	r2, [r7, #20]
20004f96:	69fb      	ldr	r3, [r7, #28]
20004f98:	429a      	cmp	r2, r3
20004f9a:	d3ec      	bcc.n	20004f76 <MSS_UART_polled_tx+0xa2>
20004f9c:	687a      	ldr	r2, [r7, #4]
20004f9e:	697b      	ldr	r3, [r7, #20]
20004fa0:	ebc3 0302 	rsb	r3, r3, r2
20004fa4:	607b      	str	r3, [r7, #4]
20004fa6:	687b      	ldr	r3, [r7, #4]
20004fa8:	2b00      	cmp	r3, #0
20004faa:	d1c7      	bne.n	20004f3c <MSS_UART_polled_tx+0x68>
20004fac:	f107 0724 	add.w	r7, r7, #36	; 0x24
20004fb0:	46bd      	mov	sp, r7
20004fb2:	bc80      	pop	{r7}
20004fb4:	4770      	bx	lr
20004fb6:	bf00      	nop

20004fb8 <MSS_UART_get_rx>:
20004fb8:	b480      	push	{r7}
20004fba:	b087      	sub	sp, #28
20004fbc:	af00      	add	r7, sp, #0
20004fbe:	60f8      	str	r0, [r7, #12]
20004fc0:	60b9      	str	r1, [r7, #8]
20004fc2:	607a      	str	r2, [r7, #4]
20004fc4:	f04f 0300 	mov.w	r3, #0
20004fc8:	613b      	str	r3, [r7, #16]
20004fca:	f04f 0300 	mov.w	r3, #0
20004fce:	75fb      	strb	r3, [r7, #23]
20004fd0:	68fa      	ldr	r2, [r7, #12]
20004fd2:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20004fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fda:	429a      	cmp	r2, r3
20004fdc:	d007      	beq.n	20004fee <MSS_UART_get_rx+0x36>
20004fde:	68fa      	ldr	r2, [r7, #12]
20004fe0:	f64d 33ac 	movw	r3, #56236	; 0xdbac
20004fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fe8:	429a      	cmp	r2, r3
20004fea:	d000      	beq.n	20004fee <MSS_UART_get_rx+0x36>
20004fec:	be00      	bkpt	0x0000
20004fee:	68bb      	ldr	r3, [r7, #8]
20004ff0:	2b00      	cmp	r3, #0
20004ff2:	d100      	bne.n	20004ff6 <MSS_UART_get_rx+0x3e>
20004ff4:	be00      	bkpt	0x0000
20004ff6:	687b      	ldr	r3, [r7, #4]
20004ff8:	2b00      	cmp	r3, #0
20004ffa:	d100      	bne.n	20004ffe <MSS_UART_get_rx+0x46>
20004ffc:	be00      	bkpt	0x0000
20004ffe:	68fa      	ldr	r2, [r7, #12]
20005000:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20005004:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005008:	429a      	cmp	r2, r3
2000500a:	d006      	beq.n	2000501a <MSS_UART_get_rx+0x62>
2000500c:	68fa      	ldr	r2, [r7, #12]
2000500e:	f64d 33ac 	movw	r3, #56236	; 0xdbac
20005012:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005016:	429a      	cmp	r2, r3
20005018:	d134      	bne.n	20005084 <MSS_UART_get_rx+0xcc>
2000501a:	68bb      	ldr	r3, [r7, #8]
2000501c:	2b00      	cmp	r3, #0
2000501e:	d031      	beq.n	20005084 <MSS_UART_get_rx+0xcc>
20005020:	687b      	ldr	r3, [r7, #4]
20005022:	2b00      	cmp	r3, #0
20005024:	d02e      	beq.n	20005084 <MSS_UART_get_rx+0xcc>
20005026:	68fb      	ldr	r3, [r7, #12]
20005028:	681b      	ldr	r3, [r3, #0]
2000502a:	7d1b      	ldrb	r3, [r3, #20]
2000502c:	75fb      	strb	r3, [r7, #23]
2000502e:	68fb      	ldr	r3, [r7, #12]
20005030:	7b5a      	ldrb	r2, [r3, #13]
20005032:	7dfb      	ldrb	r3, [r7, #23]
20005034:	ea42 0303 	orr.w	r3, r2, r3
20005038:	b2da      	uxtb	r2, r3
2000503a:	68fb      	ldr	r3, [r7, #12]
2000503c:	735a      	strb	r2, [r3, #13]
2000503e:	e017      	b.n	20005070 <MSS_UART_get_rx+0xb8>
20005040:	68ba      	ldr	r2, [r7, #8]
20005042:	693b      	ldr	r3, [r7, #16]
20005044:	4413      	add	r3, r2
20005046:	68fa      	ldr	r2, [r7, #12]
20005048:	6812      	ldr	r2, [r2, #0]
2000504a:	7812      	ldrb	r2, [r2, #0]
2000504c:	b2d2      	uxtb	r2, r2
2000504e:	701a      	strb	r2, [r3, #0]
20005050:	693b      	ldr	r3, [r7, #16]
20005052:	f103 0301 	add.w	r3, r3, #1
20005056:	613b      	str	r3, [r7, #16]
20005058:	68fb      	ldr	r3, [r7, #12]
2000505a:	681b      	ldr	r3, [r3, #0]
2000505c:	7d1b      	ldrb	r3, [r3, #20]
2000505e:	75fb      	strb	r3, [r7, #23]
20005060:	68fb      	ldr	r3, [r7, #12]
20005062:	7b5a      	ldrb	r2, [r3, #13]
20005064:	7dfb      	ldrb	r3, [r7, #23]
20005066:	ea42 0303 	orr.w	r3, r2, r3
2000506a:	b2da      	uxtb	r2, r3
2000506c:	68fb      	ldr	r3, [r7, #12]
2000506e:	735a      	strb	r2, [r3, #13]
20005070:	7dfb      	ldrb	r3, [r7, #23]
20005072:	f003 0301 	and.w	r3, r3, #1
20005076:	b2db      	uxtb	r3, r3
20005078:	2b00      	cmp	r3, #0
2000507a:	d003      	beq.n	20005084 <MSS_UART_get_rx+0xcc>
2000507c:	693a      	ldr	r2, [r7, #16]
2000507e:	687b      	ldr	r3, [r7, #4]
20005080:	429a      	cmp	r2, r3
20005082:	d3dd      	bcc.n	20005040 <MSS_UART_get_rx+0x88>
20005084:	693b      	ldr	r3, [r7, #16]
20005086:	4618      	mov	r0, r3
20005088:	f107 071c 	add.w	r7, r7, #28
2000508c:	46bd      	mov	sp, r7
2000508e:	bc80      	pop	{r7}
20005090:	4770      	bx	lr
20005092:	bf00      	nop

20005094 <MSS_UART_set_rx_handler>:
20005094:	b580      	push	{r7, lr}
20005096:	b084      	sub	sp, #16
20005098:	af00      	add	r7, sp, #0
2000509a:	60f8      	str	r0, [r7, #12]
2000509c:	60b9      	str	r1, [r7, #8]
2000509e:	4613      	mov	r3, r2
200050a0:	71fb      	strb	r3, [r7, #7]
200050a2:	68fa      	ldr	r2, [r7, #12]
200050a4:	f64d 33ec 	movw	r3, #56300	; 0xdbec
200050a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050ac:	429a      	cmp	r2, r3
200050ae:	d007      	beq.n	200050c0 <MSS_UART_set_rx_handler+0x2c>
200050b0:	68fa      	ldr	r2, [r7, #12]
200050b2:	f64d 33ac 	movw	r3, #56236	; 0xdbac
200050b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050ba:	429a      	cmp	r2, r3
200050bc:	d000      	beq.n	200050c0 <MSS_UART_set_rx_handler+0x2c>
200050be:	be00      	bkpt	0x0000
200050c0:	68bb      	ldr	r3, [r7, #8]
200050c2:	2b00      	cmp	r3, #0
200050c4:	d100      	bne.n	200050c8 <MSS_UART_set_rx_handler+0x34>
200050c6:	be00      	bkpt	0x0000
200050c8:	79fb      	ldrb	r3, [r7, #7]
200050ca:	2bc0      	cmp	r3, #192	; 0xc0
200050cc:	d900      	bls.n	200050d0 <MSS_UART_set_rx_handler+0x3c>
200050ce:	be00      	bkpt	0x0000
200050d0:	68fa      	ldr	r2, [r7, #12]
200050d2:	f64d 33ec 	movw	r3, #56300	; 0xdbec
200050d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050da:	429a      	cmp	r2, r3
200050dc:	d006      	beq.n	200050ec <MSS_UART_set_rx_handler+0x58>
200050de:	68fa      	ldr	r2, [r7, #12]
200050e0:	f64d 33ac 	movw	r3, #56236	; 0xdbac
200050e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050e8:	429a      	cmp	r2, r3
200050ea:	d12e      	bne.n	2000514a <MSS_UART_set_rx_handler+0xb6>
200050ec:	68bb      	ldr	r3, [r7, #8]
200050ee:	2b00      	cmp	r3, #0
200050f0:	d02b      	beq.n	2000514a <MSS_UART_set_rx_handler+0xb6>
200050f2:	79fb      	ldrb	r3, [r7, #7]
200050f4:	2bc0      	cmp	r3, #192	; 0xc0
200050f6:	d828      	bhi.n	2000514a <MSS_UART_set_rx_handler+0xb6>
200050f8:	68fb      	ldr	r3, [r7, #12]
200050fa:	68ba      	ldr	r2, [r7, #8]
200050fc:	621a      	str	r2, [r3, #32]
200050fe:	68fb      	ldr	r3, [r7, #12]
20005100:	681a      	ldr	r2, [r3, #0]
20005102:	68fb      	ldr	r3, [r7, #12]
20005104:	681b      	ldr	r3, [r3, #0]
20005106:	7a1b      	ldrb	r3, [r3, #8]
20005108:	b2db      	uxtb	r3, r3
2000510a:	b2db      	uxtb	r3, r3
2000510c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20005110:	79f8      	ldrb	r0, [r7, #7]
20005112:	4619      	mov	r1, r3
20005114:	4603      	mov	r3, r0
20005116:	ea41 0303 	orr.w	r3, r1, r3
2000511a:	b2db      	uxtb	r3, r3
2000511c:	b2db      	uxtb	r3, r3
2000511e:	7213      	strb	r3, [r2, #8]
20005120:	68fb      	ldr	r3, [r7, #12]
20005122:	791b      	ldrb	r3, [r3, #4]
20005124:	b25b      	sxtb	r3, r3
20005126:	4618      	mov	r0, r3
20005128:	f7ff fe14 	bl	20004d54 <NVIC_ClearPendingIRQ>
2000512c:	68fb      	ldr	r3, [r7, #12]
2000512e:	681b      	ldr	r3, [r3, #0]
20005130:	f103 0304 	add.w	r3, r3, #4
20005134:	4618      	mov	r0, r3
20005136:	f04f 0100 	mov.w	r1, #0
2000513a:	f7ff fe29 	bl	20004d90 <set_bit_reg8>
2000513e:	68fb      	ldr	r3, [r7, #12]
20005140:	791b      	ldrb	r3, [r3, #4]
20005142:	b25b      	sxtb	r3, r3
20005144:	4618      	mov	r0, r3
20005146:	f7ff fde9 	bl	20004d1c <NVIC_EnableIRQ>
2000514a:	f107 0710 	add.w	r7, r7, #16
2000514e:	46bd      	mov	sp, r7
20005150:	bd80      	pop	{r7, pc}
20005152:	bf00      	nop

20005154 <UART0_IRQHandler>:
20005154:	4668      	mov	r0, sp
20005156:	f020 0107 	bic.w	r1, r0, #7
2000515a:	468d      	mov	sp, r1
2000515c:	b589      	push	{r0, r3, r7, lr}
2000515e:	af00      	add	r7, sp, #0
20005160:	f64d 30ec 	movw	r0, #56300	; 0xdbec
20005164:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005168:	f000 fa1a 	bl	200055a0 <MSS_UART_isr>
2000516c:	46bd      	mov	sp, r7
2000516e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20005172:	4685      	mov	sp, r0
20005174:	4770      	bx	lr
20005176:	bf00      	nop

20005178 <UART1_IRQHandler>:
20005178:	4668      	mov	r0, sp
2000517a:	f020 0107 	bic.w	r1, r0, #7
2000517e:	468d      	mov	sp, r1
20005180:	b589      	push	{r0, r3, r7, lr}
20005182:	af00      	add	r7, sp, #0
20005184:	f64d 30ac 	movw	r0, #56236	; 0xdbac
20005188:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000518c:	f000 fa08 	bl	200055a0 <MSS_UART_isr>
20005190:	46bd      	mov	sp, r7
20005192:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20005196:	4685      	mov	sp, r0
20005198:	4770      	bx	lr
2000519a:	bf00      	nop

2000519c <config_baud_divisors>:
2000519c:	b580      	push	{r7, lr}
2000519e:	b088      	sub	sp, #32
200051a0:	af00      	add	r7, sp, #0
200051a2:	6078      	str	r0, [r7, #4]
200051a4:	6039      	str	r1, [r7, #0]
200051a6:	687a      	ldr	r2, [r7, #4]
200051a8:	f64d 33ec 	movw	r3, #56300	; 0xdbec
200051ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051b0:	429a      	cmp	r2, r3
200051b2:	d007      	beq.n	200051c4 <config_baud_divisors+0x28>
200051b4:	687a      	ldr	r2, [r7, #4]
200051b6:	f64d 33ac 	movw	r3, #56236	; 0xdbac
200051ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051be:	429a      	cmp	r2, r3
200051c0:	d000      	beq.n	200051c4 <config_baud_divisors+0x28>
200051c2:	be00      	bkpt	0x0000
200051c4:	687a      	ldr	r2, [r7, #4]
200051c6:	f64d 33ec 	movw	r3, #56300	; 0xdbec
200051ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051ce:	429a      	cmp	r2, r3
200051d0:	d007      	beq.n	200051e2 <config_baud_divisors+0x46>
200051d2:	687a      	ldr	r2, [r7, #4]
200051d4:	f64d 33ac 	movw	r3, #56236	; 0xdbac
200051d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051dc:	429a      	cmp	r2, r3
200051de:	f040 80a4 	bne.w	2000532a <config_baud_divisors+0x18e>
200051e2:	687b      	ldr	r3, [r7, #4]
200051e4:	683a      	ldr	r2, [r7, #0]
200051e6:	609a      	str	r2, [r3, #8]
200051e8:	f001 fbca 	bl	20006980 <SystemCoreClockUpdate>
200051ec:	687a      	ldr	r2, [r7, #4]
200051ee:	f64d 33ec 	movw	r3, #56300	; 0xdbec
200051f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051f6:	429a      	cmp	r2, r3
200051f8:	d106      	bne.n	20005208 <config_baud_divisors+0x6c>
200051fa:	f247 1310 	movw	r3, #28944	; 0x7110
200051fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005202:	681b      	ldr	r3, [r3, #0]
20005204:	61fb      	str	r3, [r7, #28]
20005206:	e005      	b.n	20005214 <config_baud_divisors+0x78>
20005208:	f247 1314 	movw	r3, #28948	; 0x7114
2000520c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005210:	681b      	ldr	r3, [r3, #0]
20005212:	61fb      	str	r3, [r7, #28]
20005214:	69fb      	ldr	r3, [r7, #28]
20005216:	ea4f 02c3 	mov.w	r2, r3, lsl #3
2000521a:	683b      	ldr	r3, [r7, #0]
2000521c:	fbb2 f3f3 	udiv	r3, r2, r3
20005220:	617b      	str	r3, [r7, #20]
20005222:	697b      	ldr	r3, [r7, #20]
20005224:	ea4f 0353 	mov.w	r3, r3, lsr #1
20005228:	613b      	str	r3, [r7, #16]
2000522a:	693b      	ldr	r3, [r7, #16]
2000522c:	ea4f 1393 	mov.w	r3, r3, lsr #6
20005230:	60fb      	str	r3, [r7, #12]
20005232:	68fb      	ldr	r3, [r7, #12]
20005234:	ea4f 1383 	mov.w	r3, r3, lsl #6
20005238:	693a      	ldr	r2, [r7, #16]
2000523a:	ebc3 0302 	rsb	r3, r3, r2
2000523e:	61bb      	str	r3, [r7, #24]
20005240:	68fb      	ldr	r3, [r7, #12]
20005242:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20005246:	697a      	ldr	r2, [r7, #20]
20005248:	ebc3 0202 	rsb	r2, r3, r2
2000524c:	69bb      	ldr	r3, [r7, #24]
2000524e:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005252:	ebc3 0302 	rsb	r3, r3, r2
20005256:	69ba      	ldr	r2, [r7, #24]
20005258:	4413      	add	r3, r2
2000525a:	61bb      	str	r3, [r7, #24]
2000525c:	68fa      	ldr	r2, [r7, #12]
2000525e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005262:	429a      	cmp	r2, r3
20005264:	d900      	bls.n	20005268 <config_baud_divisors+0xcc>
20005266:	be00      	bkpt	0x0000
20005268:	68fa      	ldr	r2, [r7, #12]
2000526a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000526e:	429a      	cmp	r2, r3
20005270:	d85b      	bhi.n	2000532a <config_baud_divisors+0x18e>
20005272:	68fb      	ldr	r3, [r7, #12]
20005274:	2b01      	cmp	r3, #1
20005276:	d931      	bls.n	200052dc <config_baud_divisors+0x140>
20005278:	687b      	ldr	r3, [r7, #4]
2000527a:	681b      	ldr	r3, [r3, #0]
2000527c:	f103 030c 	add.w	r3, r3, #12
20005280:	4618      	mov	r0, r3
20005282:	f04f 0107 	mov.w	r1, #7
20005286:	f7ff fd83 	bl	20004d90 <set_bit_reg8>
2000528a:	687b      	ldr	r3, [r7, #4]
2000528c:	681b      	ldr	r3, [r3, #0]
2000528e:	68fa      	ldr	r2, [r7, #12]
20005290:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005294:	b2d2      	uxtb	r2, r2
20005296:	711a      	strb	r2, [r3, #4]
20005298:	687b      	ldr	r3, [r7, #4]
2000529a:	681b      	ldr	r3, [r3, #0]
2000529c:	68fa      	ldr	r2, [r7, #12]
2000529e:	b2d2      	uxtb	r2, r2
200052a0:	701a      	strb	r2, [r3, #0]
200052a2:	687b      	ldr	r3, [r7, #4]
200052a4:	681b      	ldr	r3, [r3, #0]
200052a6:	f103 030c 	add.w	r3, r3, #12
200052aa:	4618      	mov	r0, r3
200052ac:	f04f 0107 	mov.w	r1, #7
200052b0:	f7ff fd8e 	bl	20004dd0 <clear_bit_reg8>
200052b4:	687b      	ldr	r3, [r7, #4]
200052b6:	681b      	ldr	r3, [r3, #0]
200052b8:	f103 0330 	add.w	r3, r3, #48	; 0x30
200052bc:	4618      	mov	r0, r3
200052be:	f04f 0107 	mov.w	r1, #7
200052c2:	f7ff fd65 	bl	20004d90 <set_bit_reg8>
200052c6:	69bb      	ldr	r3, [r7, #24]
200052c8:	2bff      	cmp	r3, #255	; 0xff
200052ca:	d900      	bls.n	200052ce <config_baud_divisors+0x132>
200052cc:	be00      	bkpt	0x0000
200052ce:	687b      	ldr	r3, [r7, #4]
200052d0:	681b      	ldr	r3, [r3, #0]
200052d2:	69ba      	ldr	r2, [r7, #24]
200052d4:	b2d2      	uxtb	r2, r2
200052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
200052da:	e026      	b.n	2000532a <config_baud_divisors+0x18e>
200052dc:	687b      	ldr	r3, [r7, #4]
200052de:	681b      	ldr	r3, [r3, #0]
200052e0:	f103 030c 	add.w	r3, r3, #12
200052e4:	4618      	mov	r0, r3
200052e6:	f04f 0107 	mov.w	r1, #7
200052ea:	f7ff fd51 	bl	20004d90 <set_bit_reg8>
200052ee:	687b      	ldr	r3, [r7, #4]
200052f0:	681b      	ldr	r3, [r3, #0]
200052f2:	68fa      	ldr	r2, [r7, #12]
200052f4:	ea4f 2212 	mov.w	r2, r2, lsr #8
200052f8:	b2d2      	uxtb	r2, r2
200052fa:	711a      	strb	r2, [r3, #4]
200052fc:	687b      	ldr	r3, [r7, #4]
200052fe:	681b      	ldr	r3, [r3, #0]
20005300:	68fa      	ldr	r2, [r7, #12]
20005302:	b2d2      	uxtb	r2, r2
20005304:	701a      	strb	r2, [r3, #0]
20005306:	687b      	ldr	r3, [r7, #4]
20005308:	681b      	ldr	r3, [r3, #0]
2000530a:	f103 030c 	add.w	r3, r3, #12
2000530e:	4618      	mov	r0, r3
20005310:	f04f 0107 	mov.w	r1, #7
20005314:	f7ff fd5c 	bl	20004dd0 <clear_bit_reg8>
20005318:	687b      	ldr	r3, [r7, #4]
2000531a:	681b      	ldr	r3, [r3, #0]
2000531c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005320:	4618      	mov	r0, r3
20005322:	f04f 0107 	mov.w	r1, #7
20005326:	f7ff fd53 	bl	20004dd0 <clear_bit_reg8>
2000532a:	f107 0720 	add.w	r7, r7, #32
2000532e:	46bd      	mov	sp, r7
20005330:	bd80      	pop	{r7, pc}
20005332:	bf00      	nop

20005334 <global_init>:
20005334:	b580      	push	{r7, lr}
20005336:	b084      	sub	sp, #16
20005338:	af00      	add	r7, sp, #0
2000533a:	60f8      	str	r0, [r7, #12]
2000533c:	60b9      	str	r1, [r7, #8]
2000533e:	4613      	mov	r3, r2
20005340:	71fb      	strb	r3, [r7, #7]
20005342:	68fa      	ldr	r2, [r7, #12]
20005344:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20005348:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000534c:	429a      	cmp	r2, r3
2000534e:	d007      	beq.n	20005360 <global_init+0x2c>
20005350:	68fa      	ldr	r2, [r7, #12]
20005352:	f64d 33ac 	movw	r3, #56236	; 0xdbac
20005356:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000535a:	429a      	cmp	r2, r3
2000535c:	d000      	beq.n	20005360 <global_init+0x2c>
2000535e:	be00      	bkpt	0x0000
20005360:	68fa      	ldr	r2, [r7, #12]
20005362:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20005366:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000536a:	429a      	cmp	r2, r3
2000536c:	d124      	bne.n	200053b8 <global_init+0x84>
2000536e:	68fb      	ldr	r3, [r7, #12]
20005370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20005374:	601a      	str	r2, [r3, #0]
20005376:	68fb      	ldr	r3, [r7, #12]
20005378:	f04f 020a 	mov.w	r2, #10
2000537c:	711a      	strb	r2, [r3, #4]
2000537e:	f248 0300 	movw	r3, #32768	; 0x8000
20005382:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005386:	f248 0200 	movw	r2, #32768	; 0x8000
2000538a:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000538e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005390:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20005394:	649a      	str	r2, [r3, #72]	; 0x48
20005396:	f04f 000a 	mov.w	r0, #10
2000539a:	f7ff fcdb 	bl	20004d54 <NVIC_ClearPendingIRQ>
2000539e:	f248 0300 	movw	r3, #32768	; 0x8000
200053a2:	f2c4 0303 	movt	r3, #16387	; 0x4003
200053a6:	f248 0200 	movw	r2, #32768	; 0x8000
200053aa:	f2c4 0203 	movt	r2, #16387	; 0x4003
200053ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
200053b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
200053b4:	649a      	str	r2, [r3, #72]	; 0x48
200053b6:	e025      	b.n	20005404 <global_init+0xd0>
200053b8:	68fa      	ldr	r2, [r7, #12]
200053ba:	f240 0300 	movw	r3, #0
200053be:	f2c4 0301 	movt	r3, #16385	; 0x4001
200053c2:	6013      	str	r3, [r2, #0]
200053c4:	68fb      	ldr	r3, [r7, #12]
200053c6:	f04f 020b 	mov.w	r2, #11
200053ca:	711a      	strb	r2, [r3, #4]
200053cc:	f248 0300 	movw	r3, #32768	; 0x8000
200053d0:	f2c4 0303 	movt	r3, #16387	; 0x4003
200053d4:	f248 0200 	movw	r2, #32768	; 0x8000
200053d8:	f2c4 0203 	movt	r2, #16387	; 0x4003
200053dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
200053de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200053e2:	649a      	str	r2, [r3, #72]	; 0x48
200053e4:	f04f 000b 	mov.w	r0, #11
200053e8:	f7ff fcb4 	bl	20004d54 <NVIC_ClearPendingIRQ>
200053ec:	f248 0300 	movw	r3, #32768	; 0x8000
200053f0:	f2c4 0303 	movt	r3, #16387	; 0x4003
200053f4:	f248 0200 	movw	r2, #32768	; 0x8000
200053f8:	f2c4 0203 	movt	r2, #16387	; 0x4003
200053fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
200053fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20005402:	649a      	str	r2, [r3, #72]	; 0x48
20005404:	68fb      	ldr	r3, [r7, #12]
20005406:	681b      	ldr	r3, [r3, #0]
20005408:	f04f 0200 	mov.w	r2, #0
2000540c:	711a      	strb	r2, [r3, #4]
2000540e:	68fb      	ldr	r3, [r7, #12]
20005410:	681b      	ldr	r3, [r3, #0]
20005412:	f04f 0200 	mov.w	r2, #0
20005416:	721a      	strb	r2, [r3, #8]
20005418:	68fb      	ldr	r3, [r7, #12]
2000541a:	681b      	ldr	r3, [r3, #0]
2000541c:	f103 0308 	add.w	r3, r3, #8
20005420:	4618      	mov	r0, r3
20005422:	f04f 0101 	mov.w	r1, #1
20005426:	f7ff fcb3 	bl	20004d90 <set_bit_reg8>
2000542a:	68fb      	ldr	r3, [r7, #12]
2000542c:	681b      	ldr	r3, [r3, #0]
2000542e:	f103 0308 	add.w	r3, r3, #8
20005432:	4618      	mov	r0, r3
20005434:	f04f 0102 	mov.w	r1, #2
20005438:	f7ff fcaa 	bl	20004d90 <set_bit_reg8>
2000543c:	68fb      	ldr	r3, [r7, #12]
2000543e:	681b      	ldr	r3, [r3, #0]
20005440:	f103 0308 	add.w	r3, r3, #8
20005444:	4618      	mov	r0, r3
20005446:	f04f 0100 	mov.w	r1, #0
2000544a:	f7ff fca1 	bl	20004d90 <set_bit_reg8>
2000544e:	68fb      	ldr	r3, [r7, #12]
20005450:	681b      	ldr	r3, [r3, #0]
20005452:	f103 0310 	add.w	r3, r3, #16
20005456:	4618      	mov	r0, r3
20005458:	f04f 0104 	mov.w	r1, #4
2000545c:	f7ff fcb8 	bl	20004dd0 <clear_bit_reg8>
20005460:	68fb      	ldr	r3, [r7, #12]
20005462:	681b      	ldr	r3, [r3, #0]
20005464:	f103 0310 	add.w	r3, r3, #16
20005468:	4618      	mov	r0, r3
2000546a:	f04f 0105 	mov.w	r1, #5
2000546e:	f7ff fcaf 	bl	20004dd0 <clear_bit_reg8>
20005472:	68fb      	ldr	r3, [r7, #12]
20005474:	681b      	ldr	r3, [r3, #0]
20005476:	f103 0334 	add.w	r3, r3, #52	; 0x34
2000547a:	4618      	mov	r0, r3
2000547c:	f04f 0101 	mov.w	r1, #1
20005480:	f7ff fca6 	bl	20004dd0 <clear_bit_reg8>
20005484:	68fb      	ldr	r3, [r7, #12]
20005486:	681b      	ldr	r3, [r3, #0]
20005488:	f103 0334 	add.w	r3, r3, #52	; 0x34
2000548c:	4618      	mov	r0, r3
2000548e:	f04f 0100 	mov.w	r1, #0
20005492:	f7ff fc9d 	bl	20004dd0 <clear_bit_reg8>
20005496:	68fb      	ldr	r3, [r7, #12]
20005498:	681b      	ldr	r3, [r3, #0]
2000549a:	f103 0338 	add.w	r3, r3, #56	; 0x38
2000549e:	4618      	mov	r0, r3
200054a0:	f04f 0101 	mov.w	r1, #1
200054a4:	f7ff fc94 	bl	20004dd0 <clear_bit_reg8>
200054a8:	68fb      	ldr	r3, [r7, #12]
200054aa:	681b      	ldr	r3, [r3, #0]
200054ac:	f103 0330 	add.w	r3, r3, #48	; 0x30
200054b0:	4618      	mov	r0, r3
200054b2:	f04f 0105 	mov.w	r1, #5
200054b6:	f7ff fc8b 	bl	20004dd0 <clear_bit_reg8>
200054ba:	68fb      	ldr	r3, [r7, #12]
200054bc:	681b      	ldr	r3, [r3, #0]
200054be:	f103 0330 	add.w	r3, r3, #48	; 0x30
200054c2:	4618      	mov	r0, r3
200054c4:	f04f 0106 	mov.w	r1, #6
200054c8:	f7ff fc82 	bl	20004dd0 <clear_bit_reg8>
200054cc:	68fb      	ldr	r3, [r7, #12]
200054ce:	681b      	ldr	r3, [r3, #0]
200054d0:	f103 0330 	add.w	r3, r3, #48	; 0x30
200054d4:	4618      	mov	r0, r3
200054d6:	f04f 0107 	mov.w	r1, #7
200054da:	f7ff fc79 	bl	20004dd0 <clear_bit_reg8>
200054de:	68fb      	ldr	r3, [r7, #12]
200054e0:	681b      	ldr	r3, [r3, #0]
200054e2:	f103 0338 	add.w	r3, r3, #56	; 0x38
200054e6:	4618      	mov	r0, r3
200054e8:	f04f 0103 	mov.w	r1, #3
200054ec:	f7ff fc70 	bl	20004dd0 <clear_bit_reg8>
200054f0:	68fb      	ldr	r3, [r7, #12]
200054f2:	681b      	ldr	r3, [r3, #0]
200054f4:	f04f 0200 	mov.w	r2, #0
200054f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200054fc:	68fb      	ldr	r3, [r7, #12]
200054fe:	681b      	ldr	r3, [r3, #0]
20005500:	f04f 0200 	mov.w	r2, #0
20005504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
20005508:	68fb      	ldr	r3, [r7, #12]
2000550a:	681b      	ldr	r3, [r3, #0]
2000550c:	f04f 0200 	mov.w	r2, #0
20005510:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
20005514:	68f8      	ldr	r0, [r7, #12]
20005516:	68b9      	ldr	r1, [r7, #8]
20005518:	f7ff fe40 	bl	2000519c <config_baud_divisors>
2000551c:	68fb      	ldr	r3, [r7, #12]
2000551e:	681b      	ldr	r3, [r3, #0]
20005520:	79fa      	ldrb	r2, [r7, #7]
20005522:	731a      	strb	r2, [r3, #12]
20005524:	68fb      	ldr	r3, [r7, #12]
20005526:	68ba      	ldr	r2, [r7, #8]
20005528:	609a      	str	r2, [r3, #8]
2000552a:	68fb      	ldr	r3, [r7, #12]
2000552c:	79fa      	ldrb	r2, [r7, #7]
2000552e:	731a      	strb	r2, [r3, #12]
20005530:	68fb      	ldr	r3, [r7, #12]
20005532:	f04f 0200 	mov.w	r2, #0
20005536:	615a      	str	r2, [r3, #20]
20005538:	68fb      	ldr	r3, [r7, #12]
2000553a:	f04f 0200 	mov.w	r2, #0
2000553e:	611a      	str	r2, [r3, #16]
20005540:	68fb      	ldr	r3, [r7, #12]
20005542:	f04f 0200 	mov.w	r2, #0
20005546:	619a      	str	r2, [r3, #24]
20005548:	68fb      	ldr	r3, [r7, #12]
2000554a:	f04f 0200 	mov.w	r2, #0
2000554e:	621a      	str	r2, [r3, #32]
20005550:	68fb      	ldr	r3, [r7, #12]
20005552:	f04f 0200 	mov.w	r2, #0
20005556:	625a      	str	r2, [r3, #36]	; 0x24
20005558:	68fb      	ldr	r3, [r7, #12]
2000555a:	f04f 0200 	mov.w	r2, #0
2000555e:	61da      	str	r2, [r3, #28]
20005560:	68fb      	ldr	r3, [r7, #12]
20005562:	f04f 0200 	mov.w	r2, #0
20005566:	629a      	str	r2, [r3, #40]	; 0x28
20005568:	68fb      	ldr	r3, [r7, #12]
2000556a:	f04f 0200 	mov.w	r2, #0
2000556e:	62da      	str	r2, [r3, #44]	; 0x2c
20005570:	68fb      	ldr	r3, [r7, #12]
20005572:	f04f 0200 	mov.w	r2, #0
20005576:	631a      	str	r2, [r3, #48]	; 0x30
20005578:	68fb      	ldr	r3, [r7, #12]
2000557a:	f04f 0200 	mov.w	r2, #0
2000557e:	635a      	str	r2, [r3, #52]	; 0x34
20005580:	68fb      	ldr	r3, [r7, #12]
20005582:	f04f 0200 	mov.w	r2, #0
20005586:	639a      	str	r2, [r3, #56]	; 0x38
20005588:	68fb      	ldr	r3, [r7, #12]
2000558a:	f04f 0200 	mov.w	r2, #0
2000558e:	63da      	str	r2, [r3, #60]	; 0x3c
20005590:	68fb      	ldr	r3, [r7, #12]
20005592:	f04f 0200 	mov.w	r2, #0
20005596:	735a      	strb	r2, [r3, #13]
20005598:	f107 0710 	add.w	r7, r7, #16
2000559c:	46bd      	mov	sp, r7
2000559e:	bd80      	pop	{r7, pc}

200055a0 <MSS_UART_isr>:
200055a0:	b580      	push	{r7, lr}
200055a2:	b084      	sub	sp, #16
200055a4:	af00      	add	r7, sp, #0
200055a6:	6078      	str	r0, [r7, #4]
200055a8:	687a      	ldr	r2, [r7, #4]
200055aa:	f64d 33ec 	movw	r3, #56300	; 0xdbec
200055ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055b2:	429a      	cmp	r2, r3
200055b4:	d007      	beq.n	200055c6 <MSS_UART_isr+0x26>
200055b6:	687a      	ldr	r2, [r7, #4]
200055b8:	f64d 33ac 	movw	r3, #56236	; 0xdbac
200055bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055c0:	429a      	cmp	r2, r3
200055c2:	d000      	beq.n	200055c6 <MSS_UART_isr+0x26>
200055c4:	be00      	bkpt	0x0000
200055c6:	687a      	ldr	r2, [r7, #4]
200055c8:	f64d 33ec 	movw	r3, #56300	; 0xdbec
200055cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055d0:	429a      	cmp	r2, r3
200055d2:	d007      	beq.n	200055e4 <MSS_UART_isr+0x44>
200055d4:	687a      	ldr	r2, [r7, #4]
200055d6:	f64d 33ac 	movw	r3, #56236	; 0xdbac
200055da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055de:	429a      	cmp	r2, r3
200055e0:	f040 80ef 	bne.w	200057c2 <MSS_UART_isr+0x222>
200055e4:	687b      	ldr	r3, [r7, #4]
200055e6:	681b      	ldr	r3, [r3, #0]
200055e8:	7a1b      	ldrb	r3, [r3, #8]
200055ea:	b2db      	uxtb	r3, r3
200055ec:	f003 030f 	and.w	r3, r3, #15
200055f0:	73fb      	strb	r3, [r7, #15]
200055f2:	7bfb      	ldrb	r3, [r7, #15]
200055f4:	2b0c      	cmp	r3, #12
200055f6:	f200 80d7 	bhi.w	200057a8 <MSS_UART_isr+0x208>
200055fa:	a201      	add	r2, pc, #4	; (adr r2, 20005600 <MSS_UART_isr+0x60>)
200055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005600:	20005635 	.word	0x20005635
20005604:	200057a9 	.word	0x200057a9
20005608:	20005653 	.word	0x20005653
2000560c:	200056ad 	.word	0x200056ad
20005610:	20005671 	.word	0x20005671
20005614:	200057a9 	.word	0x200057a9
20005618:	2000568f 	.word	0x2000568f
2000561c:	200057a9 	.word	0x200057a9
20005620:	200057a9 	.word	0x200057a9
20005624:	200057a9 	.word	0x200057a9
20005628:	200057a9 	.word	0x200057a9
2000562c:	200057a9 	.word	0x200057a9
20005630:	20005671 	.word	0x20005671
20005634:	687b      	ldr	r3, [r7, #4]
20005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005638:	2b00      	cmp	r3, #0
2000563a:	d100      	bne.n	2000563e <MSS_UART_isr+0x9e>
2000563c:	be00      	bkpt	0x0000
2000563e:	687b      	ldr	r3, [r7, #4]
20005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005642:	2b00      	cmp	r3, #0
20005644:	f000 80b2 	beq.w	200057ac <MSS_UART_isr+0x20c>
20005648:	687b      	ldr	r3, [r7, #4]
2000564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000564c:	6878      	ldr	r0, [r7, #4]
2000564e:	4798      	blx	r3
20005650:	e0b7      	b.n	200057c2 <MSS_UART_isr+0x222>
20005652:	687b      	ldr	r3, [r7, #4]
20005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005656:	2b00      	cmp	r3, #0
20005658:	d100      	bne.n	2000565c <MSS_UART_isr+0xbc>
2000565a:	be00      	bkpt	0x0000
2000565c:	687b      	ldr	r3, [r7, #4]
2000565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005660:	2b00      	cmp	r3, #0
20005662:	f000 80a5 	beq.w	200057b0 <MSS_UART_isr+0x210>
20005666:	687b      	ldr	r3, [r7, #4]
20005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000566a:	6878      	ldr	r0, [r7, #4]
2000566c:	4798      	blx	r3
2000566e:	e0a8      	b.n	200057c2 <MSS_UART_isr+0x222>
20005670:	687b      	ldr	r3, [r7, #4]
20005672:	6a1b      	ldr	r3, [r3, #32]
20005674:	2b00      	cmp	r3, #0
20005676:	d100      	bne.n	2000567a <MSS_UART_isr+0xda>
20005678:	be00      	bkpt	0x0000
2000567a:	687b      	ldr	r3, [r7, #4]
2000567c:	6a1b      	ldr	r3, [r3, #32]
2000567e:	2b00      	cmp	r3, #0
20005680:	f000 8098 	beq.w	200057b4 <MSS_UART_isr+0x214>
20005684:	687b      	ldr	r3, [r7, #4]
20005686:	6a1b      	ldr	r3, [r3, #32]
20005688:	6878      	ldr	r0, [r7, #4]
2000568a:	4798      	blx	r3
2000568c:	e099      	b.n	200057c2 <MSS_UART_isr+0x222>
2000568e:	687b      	ldr	r3, [r7, #4]
20005690:	69db      	ldr	r3, [r3, #28]
20005692:	2b00      	cmp	r3, #0
20005694:	d100      	bne.n	20005698 <MSS_UART_isr+0xf8>
20005696:	be00      	bkpt	0x0000
20005698:	687b      	ldr	r3, [r7, #4]
2000569a:	69db      	ldr	r3, [r3, #28]
2000569c:	2b00      	cmp	r3, #0
2000569e:	f000 808b 	beq.w	200057b8 <MSS_UART_isr+0x218>
200056a2:	687b      	ldr	r3, [r7, #4]
200056a4:	69db      	ldr	r3, [r3, #28]
200056a6:	6878      	ldr	r0, [r7, #4]
200056a8:	4798      	blx	r3
200056aa:	e08a      	b.n	200057c2 <MSS_UART_isr+0x222>
200056ac:	687b      	ldr	r3, [r7, #4]
200056ae:	681b      	ldr	r3, [r3, #0]
200056b0:	f103 0328 	add.w	r3, r3, #40	; 0x28
200056b4:	4618      	mov	r0, r3
200056b6:	f04f 0100 	mov.w	r1, #0
200056ba:	f7ff fba9 	bl	20004e10 <read_bit_reg8>
200056be:	4603      	mov	r3, r0
200056c0:	2b00      	cmp	r3, #0
200056c2:	d00c      	beq.n	200056de <MSS_UART_isr+0x13e>
200056c4:	687b      	ldr	r3, [r7, #4]
200056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200056c8:	2b00      	cmp	r3, #0
200056ca:	d100      	bne.n	200056ce <MSS_UART_isr+0x12e>
200056cc:	be00      	bkpt	0x0000
200056ce:	687b      	ldr	r3, [r7, #4]
200056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200056d2:	2b00      	cmp	r3, #0
200056d4:	d003      	beq.n	200056de <MSS_UART_isr+0x13e>
200056d6:	687b      	ldr	r3, [r7, #4]
200056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200056da:	6878      	ldr	r0, [r7, #4]
200056dc:	4798      	blx	r3
200056de:	687b      	ldr	r3, [r7, #4]
200056e0:	681b      	ldr	r3, [r3, #0]
200056e2:	f103 0328 	add.w	r3, r3, #40	; 0x28
200056e6:	4618      	mov	r0, r3
200056e8:	f04f 0101 	mov.w	r1, #1
200056ec:	f7ff fb90 	bl	20004e10 <read_bit_reg8>
200056f0:	4603      	mov	r3, r0
200056f2:	2b00      	cmp	r3, #0
200056f4:	d00c      	beq.n	20005710 <MSS_UART_isr+0x170>
200056f6:	687b      	ldr	r3, [r7, #4]
200056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200056fa:	2b00      	cmp	r3, #0
200056fc:	d100      	bne.n	20005700 <MSS_UART_isr+0x160>
200056fe:	be00      	bkpt	0x0000
20005700:	687b      	ldr	r3, [r7, #4]
20005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005704:	2b00      	cmp	r3, #0
20005706:	d003      	beq.n	20005710 <MSS_UART_isr+0x170>
20005708:	687b      	ldr	r3, [r7, #4]
2000570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000570c:	6878      	ldr	r0, [r7, #4]
2000570e:	4798      	blx	r3
20005710:	687b      	ldr	r3, [r7, #4]
20005712:	681b      	ldr	r3, [r3, #0]
20005714:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005718:	4618      	mov	r0, r3
2000571a:	f04f 0102 	mov.w	r1, #2
2000571e:	f7ff fb77 	bl	20004e10 <read_bit_reg8>
20005722:	4603      	mov	r3, r0
20005724:	2b00      	cmp	r3, #0
20005726:	d00c      	beq.n	20005742 <MSS_UART_isr+0x1a2>
20005728:	687b      	ldr	r3, [r7, #4]
2000572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000572c:	2b00      	cmp	r3, #0
2000572e:	d100      	bne.n	20005732 <MSS_UART_isr+0x192>
20005730:	be00      	bkpt	0x0000
20005732:	687b      	ldr	r3, [r7, #4]
20005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005736:	2b00      	cmp	r3, #0
20005738:	d003      	beq.n	20005742 <MSS_UART_isr+0x1a2>
2000573a:	687b      	ldr	r3, [r7, #4]
2000573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000573e:	6878      	ldr	r0, [r7, #4]
20005740:	4798      	blx	r3
20005742:	687b      	ldr	r3, [r7, #4]
20005744:	681b      	ldr	r3, [r3, #0]
20005746:	f103 0328 	add.w	r3, r3, #40	; 0x28
2000574a:	4618      	mov	r0, r3
2000574c:	f04f 0103 	mov.w	r1, #3
20005750:	f7ff fb5e 	bl	20004e10 <read_bit_reg8>
20005754:	4603      	mov	r3, r0
20005756:	2b00      	cmp	r3, #0
20005758:	d00c      	beq.n	20005774 <MSS_UART_isr+0x1d4>
2000575a:	687b      	ldr	r3, [r7, #4]
2000575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000575e:	2b00      	cmp	r3, #0
20005760:	d100      	bne.n	20005764 <MSS_UART_isr+0x1c4>
20005762:	be00      	bkpt	0x0000
20005764:	687b      	ldr	r3, [r7, #4]
20005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005768:	2b00      	cmp	r3, #0
2000576a:	d003      	beq.n	20005774 <MSS_UART_isr+0x1d4>
2000576c:	687b      	ldr	r3, [r7, #4]
2000576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005770:	6878      	ldr	r0, [r7, #4]
20005772:	4798      	blx	r3
20005774:	687b      	ldr	r3, [r7, #4]
20005776:	681b      	ldr	r3, [r3, #0]
20005778:	f103 0328 	add.w	r3, r3, #40	; 0x28
2000577c:	4618      	mov	r0, r3
2000577e:	f04f 0104 	mov.w	r1, #4
20005782:	f7ff fb45 	bl	20004e10 <read_bit_reg8>
20005786:	4603      	mov	r3, r0
20005788:	2b00      	cmp	r3, #0
2000578a:	d017      	beq.n	200057bc <MSS_UART_isr+0x21c>
2000578c:	687b      	ldr	r3, [r7, #4]
2000578e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005790:	2b00      	cmp	r3, #0
20005792:	d100      	bne.n	20005796 <MSS_UART_isr+0x1f6>
20005794:	be00      	bkpt	0x0000
20005796:	687b      	ldr	r3, [r7, #4]
20005798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000579a:	2b00      	cmp	r3, #0
2000579c:	d010      	beq.n	200057c0 <MSS_UART_isr+0x220>
2000579e:	687b      	ldr	r3, [r7, #4]
200057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200057a2:	6878      	ldr	r0, [r7, #4]
200057a4:	4798      	blx	r3
200057a6:	e00c      	b.n	200057c2 <MSS_UART_isr+0x222>
200057a8:	be00      	bkpt	0x0000
200057aa:	e00a      	b.n	200057c2 <MSS_UART_isr+0x222>
200057ac:	bf00      	nop
200057ae:	e008      	b.n	200057c2 <MSS_UART_isr+0x222>
200057b0:	bf00      	nop
200057b2:	e006      	b.n	200057c2 <MSS_UART_isr+0x222>
200057b4:	bf00      	nop
200057b6:	e004      	b.n	200057c2 <MSS_UART_isr+0x222>
200057b8:	bf00      	nop
200057ba:	e002      	b.n	200057c2 <MSS_UART_isr+0x222>
200057bc:	bf00      	nop
200057be:	e000      	b.n	200057c2 <MSS_UART_isr+0x222>
200057c0:	bf00      	nop
200057c2:	f107 0710 	add.w	r7, r7, #16
200057c6:	46bd      	mov	sp, r7
200057c8:	bd80      	pop	{r7, pc}
200057ca:	bf00      	nop

200057cc <default_tx_handler>:
200057cc:	b580      	push	{r7, lr}
200057ce:	b086      	sub	sp, #24
200057d0:	af00      	add	r7, sp, #0
200057d2:	6078      	str	r0, [r7, #4]
200057d4:	687a      	ldr	r2, [r7, #4]
200057d6:	f64d 33ec 	movw	r3, #56300	; 0xdbec
200057da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200057de:	429a      	cmp	r2, r3
200057e0:	d007      	beq.n	200057f2 <default_tx_handler+0x26>
200057e2:	687a      	ldr	r2, [r7, #4]
200057e4:	f64d 33ac 	movw	r3, #56236	; 0xdbac
200057e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200057ec:	429a      	cmp	r2, r3
200057ee:	d000      	beq.n	200057f2 <default_tx_handler+0x26>
200057f0:	be00      	bkpt	0x0000
200057f2:	687b      	ldr	r3, [r7, #4]
200057f4:	691b      	ldr	r3, [r3, #16]
200057f6:	2b00      	cmp	r3, #0
200057f8:	d100      	bne.n	200057fc <default_tx_handler+0x30>
200057fa:	be00      	bkpt	0x0000
200057fc:	687b      	ldr	r3, [r7, #4]
200057fe:	695b      	ldr	r3, [r3, #20]
20005800:	2b00      	cmp	r3, #0
20005802:	d100      	bne.n	20005806 <default_tx_handler+0x3a>
20005804:	be00      	bkpt	0x0000
20005806:	687a      	ldr	r2, [r7, #4]
20005808:	f64d 33ec 	movw	r3, #56300	; 0xdbec
2000580c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005810:	429a      	cmp	r2, r3
20005812:	d006      	beq.n	20005822 <default_tx_handler+0x56>
20005814:	687a      	ldr	r2, [r7, #4]
20005816:	f64d 33ac 	movw	r3, #56236	; 0xdbac
2000581a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000581e:	429a      	cmp	r2, r3
20005820:	d155      	bne.n	200058ce <default_tx_handler+0x102>
20005822:	687b      	ldr	r3, [r7, #4]
20005824:	691b      	ldr	r3, [r3, #16]
20005826:	2b00      	cmp	r3, #0
20005828:	d051      	beq.n	200058ce <default_tx_handler+0x102>
2000582a:	687b      	ldr	r3, [r7, #4]
2000582c:	695b      	ldr	r3, [r3, #20]
2000582e:	2b00      	cmp	r3, #0
20005830:	d04d      	beq.n	200058ce <default_tx_handler+0x102>
20005832:	687b      	ldr	r3, [r7, #4]
20005834:	681b      	ldr	r3, [r3, #0]
20005836:	7d1b      	ldrb	r3, [r3, #20]
20005838:	72fb      	strb	r3, [r7, #11]
2000583a:	687b      	ldr	r3, [r7, #4]
2000583c:	7b5a      	ldrb	r2, [r3, #13]
2000583e:	7afb      	ldrb	r3, [r7, #11]
20005840:	ea42 0303 	orr.w	r3, r2, r3
20005844:	b2da      	uxtb	r2, r3
20005846:	687b      	ldr	r3, [r7, #4]
20005848:	735a      	strb	r2, [r3, #13]
2000584a:	7afb      	ldrb	r3, [r7, #11]
2000584c:	f003 0320 	and.w	r3, r3, #32
20005850:	2b00      	cmp	r3, #0
20005852:	d029      	beq.n	200058a8 <default_tx_handler+0xdc>
20005854:	f04f 0310 	mov.w	r3, #16
20005858:	613b      	str	r3, [r7, #16]
2000585a:	687b      	ldr	r3, [r7, #4]
2000585c:	695a      	ldr	r2, [r3, #20]
2000585e:	687b      	ldr	r3, [r7, #4]
20005860:	699b      	ldr	r3, [r3, #24]
20005862:	ebc3 0302 	rsb	r3, r3, r2
20005866:	617b      	str	r3, [r7, #20]
20005868:	697b      	ldr	r3, [r7, #20]
2000586a:	2b0f      	cmp	r3, #15
2000586c:	d801      	bhi.n	20005872 <default_tx_handler+0xa6>
2000586e:	697b      	ldr	r3, [r7, #20]
20005870:	613b      	str	r3, [r7, #16]
20005872:	f04f 0300 	mov.w	r3, #0
20005876:	60fb      	str	r3, [r7, #12]
20005878:	e012      	b.n	200058a0 <default_tx_handler+0xd4>
2000587a:	687b      	ldr	r3, [r7, #4]
2000587c:	681b      	ldr	r3, [r3, #0]
2000587e:	687a      	ldr	r2, [r7, #4]
20005880:	6911      	ldr	r1, [r2, #16]
20005882:	687a      	ldr	r2, [r7, #4]
20005884:	6992      	ldr	r2, [r2, #24]
20005886:	440a      	add	r2, r1
20005888:	7812      	ldrb	r2, [r2, #0]
2000588a:	701a      	strb	r2, [r3, #0]
2000588c:	687b      	ldr	r3, [r7, #4]
2000588e:	699b      	ldr	r3, [r3, #24]
20005890:	f103 0201 	add.w	r2, r3, #1
20005894:	687b      	ldr	r3, [r7, #4]
20005896:	619a      	str	r2, [r3, #24]
20005898:	68fb      	ldr	r3, [r7, #12]
2000589a:	f103 0301 	add.w	r3, r3, #1
2000589e:	60fb      	str	r3, [r7, #12]
200058a0:	68fa      	ldr	r2, [r7, #12]
200058a2:	693b      	ldr	r3, [r7, #16]
200058a4:	429a      	cmp	r2, r3
200058a6:	d3e8      	bcc.n	2000587a <default_tx_handler+0xae>
200058a8:	687b      	ldr	r3, [r7, #4]
200058aa:	699a      	ldr	r2, [r3, #24]
200058ac:	687b      	ldr	r3, [r7, #4]
200058ae:	695b      	ldr	r3, [r3, #20]
200058b0:	429a      	cmp	r2, r3
200058b2:	d10c      	bne.n	200058ce <default_tx_handler+0x102>
200058b4:	687b      	ldr	r3, [r7, #4]
200058b6:	f04f 0200 	mov.w	r2, #0
200058ba:	615a      	str	r2, [r3, #20]
200058bc:	687b      	ldr	r3, [r7, #4]
200058be:	681b      	ldr	r3, [r3, #0]
200058c0:	f103 0304 	add.w	r3, r3, #4
200058c4:	4618      	mov	r0, r3
200058c6:	f04f 0101 	mov.w	r1, #1
200058ca:	f7ff fa81 	bl	20004dd0 <clear_bit_reg8>
200058ce:	f107 0718 	add.w	r7, r7, #24
200058d2:	46bd      	mov	sp, r7
200058d4:	bd80      	pop	{r7, pc}
200058d6:	bf00      	nop

200058d8 <I2C_init>:
200058d8:	b580      	push	{r7, lr}
200058da:	b086      	sub	sp, #24
200058dc:	af00      	add	r7, sp, #0
200058de:	60f8      	str	r0, [r7, #12]
200058e0:	60b9      	str	r1, [r7, #8]
200058e2:	71fa      	strb	r2, [r7, #7]
200058e4:	71bb      	strb	r3, [r7, #6]
200058e6:	79bb      	ldrb	r3, [r7, #6]
200058e8:	617b      	str	r3, [r7, #20]
200058ea:	f001 f9e9 	bl	20006cc0 <HAL_disable_interrupts>
200058ee:	4603      	mov	r3, r0
200058f0:	613b      	str	r3, [r7, #16]
200058f2:	68f8      	ldr	r0, [r7, #12]
200058f4:	f04f 0100 	mov.w	r1, #0
200058f8:	f04f 026c 	mov.w	r2, #108	; 0x6c
200058fc:	f001 fb20 	bl	20006f40 <memset>
20005900:	68fb      	ldr	r3, [r7, #12]
20005902:	68ba      	ldr	r2, [r7, #8]
20005904:	601a      	str	r2, [r3, #0]
20005906:	79fb      	ldrb	r3, [r7, #7]
20005908:	ea4f 0243 	mov.w	r2, r3, lsl #1
2000590c:	68fb      	ldr	r3, [r7, #12]
2000590e:	605a      	str	r2, [r3, #4]
20005910:	68fb      	ldr	r3, [r7, #12]
20005912:	681b      	ldr	r3, [r3, #0]
20005914:	4618      	mov	r0, r3
20005916:	f04f 0106 	mov.w	r1, #6
2000591a:	f04f 0240 	mov.w	r2, #64	; 0x40
2000591e:	f04f 0300 	mov.w	r3, #0
20005922:	f001 fa08 	bl	20006d36 <HW_set_8bit_reg_field>
20005926:	68fb      	ldr	r3, [r7, #12]
20005928:	681b      	ldr	r3, [r3, #0]
2000592a:	4618      	mov	r0, r3
2000592c:	f04f 0106 	mov.w	r1, #6
20005930:	f04f 0240 	mov.w	r2, #64	; 0x40
20005934:	f04f 0301 	mov.w	r3, #1
20005938:	f001 f9fd 	bl	20006d36 <HW_set_8bit_reg_field>
2000593c:	68fb      	ldr	r3, [r7, #12]
2000593e:	681a      	ldr	r2, [r3, #0]
20005940:	697b      	ldr	r3, [r7, #20]
20005942:	ea4f 0393 	mov.w	r3, r3, lsr #2
20005946:	f003 0301 	and.w	r3, r3, #1
2000594a:	4610      	mov	r0, r2
2000594c:	f04f 0107 	mov.w	r1, #7
20005950:	f04f 0280 	mov.w	r2, #128	; 0x80
20005954:	f001 f9ef 	bl	20006d36 <HW_set_8bit_reg_field>
20005958:	68fb      	ldr	r3, [r7, #12]
2000595a:	681a      	ldr	r2, [r3, #0]
2000595c:	697b      	ldr	r3, [r7, #20]
2000595e:	ea4f 0353 	mov.w	r3, r3, lsr #1
20005962:	f003 0301 	and.w	r3, r3, #1
20005966:	4610      	mov	r0, r2
20005968:	f04f 0101 	mov.w	r1, #1
2000596c:	f04f 0202 	mov.w	r2, #2
20005970:	f001 f9e1 	bl	20006d36 <HW_set_8bit_reg_field>
20005974:	68fb      	ldr	r3, [r7, #12]
20005976:	681a      	ldr	r2, [r3, #0]
20005978:	697b      	ldr	r3, [r7, #20]
2000597a:	f003 0301 	and.w	r3, r3, #1
2000597e:	4610      	mov	r0, r2
20005980:	f04f 0100 	mov.w	r1, #0
20005984:	f04f 0201 	mov.w	r2, #1
20005988:	f001 f9d5 	bl	20006d36 <HW_set_8bit_reg_field>
2000598c:	68fb      	ldr	r3, [r7, #12]
2000598e:	681b      	ldr	r3, [r3, #0]
20005990:	f103 020c 	add.w	r2, r3, #12
20005994:	68fb      	ldr	r3, [r7, #12]
20005996:	685b      	ldr	r3, [r3, #4]
20005998:	4610      	mov	r0, r2
2000599a:	4619      	mov	r1, r3
2000599c:	f001 f9c7 	bl	20006d2e <HW_set_8bit_reg>
200059a0:	68fb      	ldr	r3, [r7, #12]
200059a2:	681b      	ldr	r3, [r3, #0]
200059a4:	f103 021c 	add.w	r2, r3, #28
200059a8:	68fb      	ldr	r3, [r7, #12]
200059aa:	685b      	ldr	r3, [r3, #4]
200059ac:	4610      	mov	r0, r2
200059ae:	4619      	mov	r1, r3
200059b0:	f001 f9bd 	bl	20006d2e <HW_set_8bit_reg>
200059b4:	6938      	ldr	r0, [r7, #16]
200059b6:	f001 f987 	bl	20006cc8 <HAL_restore_interrupts>
200059ba:	f107 0718 	add.w	r7, r7, #24
200059be:	46bd      	mov	sp, r7
200059c0:	bd80      	pop	{r7, pc}
200059c2:	bf00      	nop

200059c4 <I2C_write>:
200059c4:	b580      	push	{r7, lr}
200059c6:	b086      	sub	sp, #24
200059c8:	af00      	add	r7, sp, #0
200059ca:	60f8      	str	r0, [r7, #12]
200059cc:	607a      	str	r2, [r7, #4]
200059ce:	460a      	mov	r2, r1
200059d0:	72fa      	strb	r2, [r7, #11]
200059d2:	807b      	strh	r3, [r7, #2]
200059d4:	f001 f974 	bl	20006cc0 <HAL_disable_interrupts>
200059d8:	4603      	mov	r3, r0
200059da:	617b      	str	r3, [r7, #20]
200059dc:	68fb      	ldr	r3, [r7, #12]
200059de:	7b1b      	ldrb	r3, [r3, #12]
200059e0:	2b00      	cmp	r3, #0
200059e2:	d103      	bne.n	200059ec <I2C_write+0x28>
200059e4:	68fb      	ldr	r3, [r7, #12]
200059e6:	f04f 0201 	mov.w	r2, #1
200059ea:	731a      	strb	r2, [r3, #12]
200059ec:	68fb      	ldr	r3, [r7, #12]
200059ee:	f04f 0201 	mov.w	r2, #1
200059f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
200059f6:	7afb      	ldrb	r3, [r7, #11]
200059f8:	ea4f 0243 	mov.w	r2, r3, lsl #1
200059fc:	68fb      	ldr	r3, [r7, #12]
200059fe:	609a      	str	r2, [r3, #8]
20005a00:	68fb      	ldr	r3, [r7, #12]
20005a02:	f04f 0200 	mov.w	r2, #0
20005a06:	625a      	str	r2, [r3, #36]	; 0x24
20005a08:	68fb      	ldr	r3, [r7, #12]
20005a0a:	687a      	ldr	r2, [r7, #4]
20005a0c:	619a      	str	r2, [r3, #24]
20005a0e:	887a      	ldrh	r2, [r7, #2]
20005a10:	68fb      	ldr	r3, [r7, #12]
20005a12:	61da      	str	r2, [r3, #28]
20005a14:	68fb      	ldr	r3, [r7, #12]
20005a16:	f04f 0200 	mov.w	r2, #0
20005a1a:	621a      	str	r2, [r3, #32]
20005a1c:	68fb      	ldr	r3, [r7, #12]
20005a1e:	f04f 0201 	mov.w	r2, #1
20005a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005a26:	68fb      	ldr	r3, [r7, #12]
20005a28:	f897 2020 	ldrb.w	r2, [r7, #32]
20005a2c:	751a      	strb	r2, [r3, #20]
20005a2e:	68fb      	ldr	r3, [r7, #12]
20005a30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005a34:	b2db      	uxtb	r3, r3
20005a36:	2b01      	cmp	r3, #1
20005a38:	d105      	bne.n	20005a46 <I2C_write+0x82>
20005a3a:	68fb      	ldr	r3, [r7, #12]
20005a3c:	f04f 0201 	mov.w	r2, #1
20005a40:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005a44:	e00a      	b.n	20005a5c <I2C_write+0x98>
20005a46:	68fb      	ldr	r3, [r7, #12]
20005a48:	681b      	ldr	r3, [r3, #0]
20005a4a:	4618      	mov	r0, r3
20005a4c:	f04f 0105 	mov.w	r1, #5
20005a50:	f04f 0220 	mov.w	r2, #32
20005a54:	f04f 0301 	mov.w	r3, #1
20005a58:	f001 f96d 	bl	20006d36 <HW_set_8bit_reg_field>
20005a5c:	68fb      	ldr	r3, [r7, #12]
20005a5e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005a62:	2b01      	cmp	r3, #1
20005a64:	d10a      	bne.n	20005a7c <I2C_write+0xb8>
20005a66:	68fb      	ldr	r3, [r7, #12]
20005a68:	681b      	ldr	r3, [r3, #0]
20005a6a:	4618      	mov	r0, r3
20005a6c:	f04f 0103 	mov.w	r1, #3
20005a70:	f04f 0208 	mov.w	r2, #8
20005a74:	f04f 0300 	mov.w	r3, #0
20005a78:	f001 f95d 	bl	20006d36 <HW_set_8bit_reg_field>
20005a7c:	68fb      	ldr	r3, [r7, #12]
20005a7e:	681b      	ldr	r3, [r3, #0]
20005a80:	f103 0304 	add.w	r3, r3, #4
20005a84:	4618      	mov	r0, r3
20005a86:	f001 f954 	bl	20006d32 <HW_get_8bit_reg>
20005a8a:	4603      	mov	r3, r0
20005a8c:	74fb      	strb	r3, [r7, #19]
20005a8e:	7cfb      	ldrb	r3, [r7, #19]
20005a90:	b2db      	uxtb	r3, r3
20005a92:	74fb      	strb	r3, [r7, #19]
20005a94:	68f8      	ldr	r0, [r7, #12]
20005a96:	f000 fec9 	bl	2000682c <I2C_enable_irq>
20005a9a:	6978      	ldr	r0, [r7, #20]
20005a9c:	f001 f914 	bl	20006cc8 <HAL_restore_interrupts>
20005aa0:	f107 0718 	add.w	r7, r7, #24
20005aa4:	46bd      	mov	sp, r7
20005aa6:	bd80      	pop	{r7, pc}

20005aa8 <I2C_read>:
20005aa8:	b580      	push	{r7, lr}
20005aaa:	b086      	sub	sp, #24
20005aac:	af00      	add	r7, sp, #0
20005aae:	60f8      	str	r0, [r7, #12]
20005ab0:	607a      	str	r2, [r7, #4]
20005ab2:	460a      	mov	r2, r1
20005ab4:	72fa      	strb	r2, [r7, #11]
20005ab6:	807b      	strh	r3, [r7, #2]
20005ab8:	f001 f902 	bl	20006cc0 <HAL_disable_interrupts>
20005abc:	4603      	mov	r3, r0
20005abe:	617b      	str	r3, [r7, #20]
20005ac0:	68fb      	ldr	r3, [r7, #12]
20005ac2:	7b1b      	ldrb	r3, [r3, #12]
20005ac4:	2b00      	cmp	r3, #0
20005ac6:	d103      	bne.n	20005ad0 <I2C_read+0x28>
20005ac8:	68fb      	ldr	r3, [r7, #12]
20005aca:	f04f 0202 	mov.w	r2, #2
20005ace:	731a      	strb	r2, [r3, #12]
20005ad0:	68fb      	ldr	r3, [r7, #12]
20005ad2:	f04f 0202 	mov.w	r2, #2
20005ad6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
20005ada:	7afb      	ldrb	r3, [r7, #11]
20005adc:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005ae0:	68fb      	ldr	r3, [r7, #12]
20005ae2:	609a      	str	r2, [r3, #8]
20005ae4:	68fb      	ldr	r3, [r7, #12]
20005ae6:	f04f 0201 	mov.w	r2, #1
20005aea:	625a      	str	r2, [r3, #36]	; 0x24
20005aec:	68fb      	ldr	r3, [r7, #12]
20005aee:	687a      	ldr	r2, [r7, #4]
20005af0:	629a      	str	r2, [r3, #40]	; 0x28
20005af2:	887a      	ldrh	r2, [r7, #2]
20005af4:	68fb      	ldr	r3, [r7, #12]
20005af6:	62da      	str	r2, [r3, #44]	; 0x2c
20005af8:	68fb      	ldr	r3, [r7, #12]
20005afa:	f04f 0200 	mov.w	r2, #0
20005afe:	631a      	str	r2, [r3, #48]	; 0x30
20005b00:	68fb      	ldr	r3, [r7, #12]
20005b02:	f04f 0201 	mov.w	r2, #1
20005b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005b0a:	68fb      	ldr	r3, [r7, #12]
20005b0c:	f897 2020 	ldrb.w	r2, [r7, #32]
20005b10:	751a      	strb	r2, [r3, #20]
20005b12:	68fb      	ldr	r3, [r7, #12]
20005b14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005b18:	b2db      	uxtb	r3, r3
20005b1a:	2b01      	cmp	r3, #1
20005b1c:	d105      	bne.n	20005b2a <I2C_read+0x82>
20005b1e:	68fb      	ldr	r3, [r7, #12]
20005b20:	f04f 0201 	mov.w	r2, #1
20005b24:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005b28:	e00a      	b.n	20005b40 <I2C_read+0x98>
20005b2a:	68fb      	ldr	r3, [r7, #12]
20005b2c:	681b      	ldr	r3, [r3, #0]
20005b2e:	4618      	mov	r0, r3
20005b30:	f04f 0105 	mov.w	r1, #5
20005b34:	f04f 0220 	mov.w	r2, #32
20005b38:	f04f 0301 	mov.w	r3, #1
20005b3c:	f001 f8fb 	bl	20006d36 <HW_set_8bit_reg_field>
20005b40:	68fb      	ldr	r3, [r7, #12]
20005b42:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005b46:	2b01      	cmp	r3, #1
20005b48:	d10a      	bne.n	20005b60 <I2C_read+0xb8>
20005b4a:	68fb      	ldr	r3, [r7, #12]
20005b4c:	681b      	ldr	r3, [r3, #0]
20005b4e:	4618      	mov	r0, r3
20005b50:	f04f 0103 	mov.w	r1, #3
20005b54:	f04f 0208 	mov.w	r2, #8
20005b58:	f04f 0300 	mov.w	r3, #0
20005b5c:	f001 f8eb 	bl	20006d36 <HW_set_8bit_reg_field>
20005b60:	68fb      	ldr	r3, [r7, #12]
20005b62:	681b      	ldr	r3, [r3, #0]
20005b64:	f103 0304 	add.w	r3, r3, #4
20005b68:	4618      	mov	r0, r3
20005b6a:	f001 f8e2 	bl	20006d32 <HW_get_8bit_reg>
20005b6e:	4603      	mov	r3, r0
20005b70:	74fb      	strb	r3, [r7, #19]
20005b72:	7cfb      	ldrb	r3, [r7, #19]
20005b74:	b2db      	uxtb	r3, r3
20005b76:	74fb      	strb	r3, [r7, #19]
20005b78:	68f8      	ldr	r0, [r7, #12]
20005b7a:	f000 fe57 	bl	2000682c <I2C_enable_irq>
20005b7e:	6978      	ldr	r0, [r7, #20]
20005b80:	f001 f8a2 	bl	20006cc8 <HAL_restore_interrupts>
20005b84:	f107 0718 	add.w	r7, r7, #24
20005b88:	46bd      	mov	sp, r7
20005b8a:	bd80      	pop	{r7, pc}

20005b8c <I2C_write_read>:
20005b8c:	b580      	push	{r7, lr}
20005b8e:	b086      	sub	sp, #24
20005b90:	af00      	add	r7, sp, #0
20005b92:	60f8      	str	r0, [r7, #12]
20005b94:	607a      	str	r2, [r7, #4]
20005b96:	460a      	mov	r2, r1
20005b98:	72fa      	strb	r2, [r7, #11]
20005b9a:	807b      	strh	r3, [r7, #2]
20005b9c:	887b      	ldrh	r3, [r7, #2]
20005b9e:	2b00      	cmp	r3, #0
20005ba0:	d100      	bne.n	20005ba4 <I2C_write_read+0x18>
20005ba2:	be00      	bkpt	0x0000
20005ba4:	687b      	ldr	r3, [r7, #4]
20005ba6:	2b00      	cmp	r3, #0
20005ba8:	d100      	bne.n	20005bac <I2C_write_read+0x20>
20005baa:	be00      	bkpt	0x0000
20005bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20005bae:	2b00      	cmp	r3, #0
20005bb0:	d100      	bne.n	20005bb4 <I2C_write_read+0x28>
20005bb2:	be00      	bkpt	0x0000
20005bb4:	6a3b      	ldr	r3, [r7, #32]
20005bb6:	2b00      	cmp	r3, #0
20005bb8:	d100      	bne.n	20005bbc <I2C_write_read+0x30>
20005bba:	be00      	bkpt	0x0000
20005bbc:	68fb      	ldr	r3, [r7, #12]
20005bbe:	f04f 0202 	mov.w	r2, #2
20005bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20005bc8:	2b00      	cmp	r3, #0
20005bca:	d072      	beq.n	20005cb2 <I2C_write_read+0x126>
20005bcc:	887b      	ldrh	r3, [r7, #2]
20005bce:	2b00      	cmp	r3, #0
20005bd0:	d06f      	beq.n	20005cb2 <I2C_write_read+0x126>
20005bd2:	f001 f875 	bl	20006cc0 <HAL_disable_interrupts>
20005bd6:	4603      	mov	r3, r0
20005bd8:	617b      	str	r3, [r7, #20]
20005bda:	68fb      	ldr	r3, [r7, #12]
20005bdc:	7b1b      	ldrb	r3, [r3, #12]
20005bde:	2b00      	cmp	r3, #0
20005be0:	d103      	bne.n	20005bea <I2C_write_read+0x5e>
20005be2:	68fb      	ldr	r3, [r7, #12]
20005be4:	f04f 0203 	mov.w	r2, #3
20005be8:	731a      	strb	r2, [r3, #12]
20005bea:	68fb      	ldr	r3, [r7, #12]
20005bec:	f04f 0203 	mov.w	r2, #3
20005bf0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
20005bf4:	7afb      	ldrb	r3, [r7, #11]
20005bf6:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005bfa:	68fb      	ldr	r3, [r7, #12]
20005bfc:	609a      	str	r2, [r3, #8]
20005bfe:	68fb      	ldr	r3, [r7, #12]
20005c00:	f04f 0200 	mov.w	r2, #0
20005c04:	625a      	str	r2, [r3, #36]	; 0x24
20005c06:	68fb      	ldr	r3, [r7, #12]
20005c08:	687a      	ldr	r2, [r7, #4]
20005c0a:	619a      	str	r2, [r3, #24]
20005c0c:	887a      	ldrh	r2, [r7, #2]
20005c0e:	68fb      	ldr	r3, [r7, #12]
20005c10:	61da      	str	r2, [r3, #28]
20005c12:	68fb      	ldr	r3, [r7, #12]
20005c14:	f04f 0200 	mov.w	r2, #0
20005c18:	621a      	str	r2, [r3, #32]
20005c1a:	68fb      	ldr	r3, [r7, #12]
20005c1c:	6a3a      	ldr	r2, [r7, #32]
20005c1e:	629a      	str	r2, [r3, #40]	; 0x28
20005c20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20005c22:	68fb      	ldr	r3, [r7, #12]
20005c24:	62da      	str	r2, [r3, #44]	; 0x2c
20005c26:	68fb      	ldr	r3, [r7, #12]
20005c28:	f04f 0200 	mov.w	r2, #0
20005c2c:	631a      	str	r2, [r3, #48]	; 0x30
20005c2e:	68fb      	ldr	r3, [r7, #12]
20005c30:	f04f 0201 	mov.w	r2, #1
20005c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005c38:	68fb      	ldr	r3, [r7, #12]
20005c3a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
20005c3e:	751a      	strb	r2, [r3, #20]
20005c40:	68fb      	ldr	r3, [r7, #12]
20005c42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005c46:	b2db      	uxtb	r3, r3
20005c48:	2b01      	cmp	r3, #1
20005c4a:	d105      	bne.n	20005c58 <I2C_write_read+0xcc>
20005c4c:	68fb      	ldr	r3, [r7, #12]
20005c4e:	f04f 0201 	mov.w	r2, #1
20005c52:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005c56:	e00a      	b.n	20005c6e <I2C_write_read+0xe2>
20005c58:	68fb      	ldr	r3, [r7, #12]
20005c5a:	681b      	ldr	r3, [r3, #0]
20005c5c:	4618      	mov	r0, r3
20005c5e:	f04f 0105 	mov.w	r1, #5
20005c62:	f04f 0220 	mov.w	r2, #32
20005c66:	f04f 0301 	mov.w	r3, #1
20005c6a:	f001 f864 	bl	20006d36 <HW_set_8bit_reg_field>
20005c6e:	68fb      	ldr	r3, [r7, #12]
20005c70:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005c74:	2b01      	cmp	r3, #1
20005c76:	d10a      	bne.n	20005c8e <I2C_write_read+0x102>
20005c78:	68fb      	ldr	r3, [r7, #12]
20005c7a:	681b      	ldr	r3, [r3, #0]
20005c7c:	4618      	mov	r0, r3
20005c7e:	f04f 0103 	mov.w	r1, #3
20005c82:	f04f 0208 	mov.w	r2, #8
20005c86:	f04f 0300 	mov.w	r3, #0
20005c8a:	f001 f854 	bl	20006d36 <HW_set_8bit_reg_field>
20005c8e:	68fb      	ldr	r3, [r7, #12]
20005c90:	681b      	ldr	r3, [r3, #0]
20005c92:	f103 0304 	add.w	r3, r3, #4
20005c96:	4618      	mov	r0, r3
20005c98:	f001 f84b 	bl	20006d32 <HW_get_8bit_reg>
20005c9c:	4603      	mov	r3, r0
20005c9e:	74fb      	strb	r3, [r7, #19]
20005ca0:	7cfb      	ldrb	r3, [r7, #19]
20005ca2:	b2db      	uxtb	r3, r3
20005ca4:	74fb      	strb	r3, [r7, #19]
20005ca6:	68f8      	ldr	r0, [r7, #12]
20005ca8:	f000 fdc0 	bl	2000682c <I2C_enable_irq>
20005cac:	6978      	ldr	r0, [r7, #20]
20005cae:	f001 f80b 	bl	20006cc8 <HAL_restore_interrupts>
20005cb2:	f107 0718 	add.w	r7, r7, #24
20005cb6:	46bd      	mov	sp, r7
20005cb8:	bd80      	pop	{r7, pc}
20005cba:	bf00      	nop

20005cbc <I2C_wait_complete>:
20005cbc:	b580      	push	{r7, lr}
20005cbe:	b084      	sub	sp, #16
20005cc0:	af00      	add	r7, sp, #0
20005cc2:	6078      	str	r0, [r7, #4]
20005cc4:	6039      	str	r1, [r7, #0]
20005cc6:	f000 fffb 	bl	20006cc0 <HAL_disable_interrupts>
20005cca:	4603      	mov	r3, r0
20005ccc:	60fb      	str	r3, [r7, #12]
20005cce:	687b      	ldr	r3, [r7, #4]
20005cd0:	683a      	ldr	r2, [r7, #0]
20005cd2:	639a      	str	r2, [r3, #56]	; 0x38
20005cd4:	68f8      	ldr	r0, [r7, #12]
20005cd6:	f000 fff7 	bl	20006cc8 <HAL_restore_interrupts>
20005cda:	687b      	ldr	r3, [r7, #4]
20005cdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20005ce0:	72fb      	strb	r3, [r7, #11]
20005ce2:	7afb      	ldrb	r3, [r7, #11]
20005ce4:	2b01      	cmp	r3, #1
20005ce6:	d0f8      	beq.n	20005cda <I2C_wait_complete+0x1e>
20005ce8:	7afb      	ldrb	r3, [r7, #11]
20005cea:	4618      	mov	r0, r3
20005cec:	f107 0710 	add.w	r7, r7, #16
20005cf0:	46bd      	mov	sp, r7
20005cf2:	bd80      	pop	{r7, pc}

20005cf4 <enable_slave_if_required>:
20005cf4:	b580      	push	{r7, lr}
20005cf6:	b082      	sub	sp, #8
20005cf8:	af00      	add	r7, sp, #0
20005cfa:	6078      	str	r0, [r7, #4]
20005cfc:	687b      	ldr	r3, [r7, #4]
20005cfe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
20005d02:	2b00      	cmp	r3, #0
20005d04:	d00a      	beq.n	20005d1c <enable_slave_if_required+0x28>
20005d06:	687b      	ldr	r3, [r7, #4]
20005d08:	681b      	ldr	r3, [r3, #0]
20005d0a:	4618      	mov	r0, r3
20005d0c:	f04f 0102 	mov.w	r1, #2
20005d10:	f04f 0204 	mov.w	r2, #4
20005d14:	f04f 0301 	mov.w	r3, #1
20005d18:	f001 f80d 	bl	20006d36 <HW_set_8bit_reg_field>
20005d1c:	f107 0708 	add.w	r7, r7, #8
20005d20:	46bd      	mov	sp, r7
20005d22:	bd80      	pop	{r7, pc}

20005d24 <I2C_isr>:
20005d24:	b5b0      	push	{r4, r5, r7, lr}
20005d26:	b084      	sub	sp, #16
20005d28:	af00      	add	r7, sp, #0
20005d2a:	6078      	str	r0, [r7, #4]
20005d2c:	f04f 0301 	mov.w	r3, #1
20005d30:	73bb      	strb	r3, [r7, #14]
20005d32:	687b      	ldr	r3, [r7, #4]
20005d34:	681b      	ldr	r3, [r3, #0]
20005d36:	f103 0304 	add.w	r3, r3, #4
20005d3a:	4618      	mov	r0, r3
20005d3c:	f000 fff9 	bl	20006d32 <HW_get_8bit_reg>
20005d40:	4603      	mov	r3, r0
20005d42:	72fb      	strb	r3, [r7, #11]
20005d44:	7afb      	ldrb	r3, [r7, #11]
20005d46:	b2db      	uxtb	r3, r3
20005d48:	f1a3 0308 	sub.w	r3, r3, #8
20005d4c:	2bd8      	cmp	r3, #216	; 0xd8
20005d4e:	f200 84e3 	bhi.w	20006718 <I2C_isr+0x9f4>
20005d52:	a201      	add	r2, pc, #4	; (adr r2, 20005d58 <I2C_isr+0x34>)
20005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005d58:	200060bd 	.word	0x200060bd
20005d5c:	20006719 	.word	0x20006719
20005d60:	20006719 	.word	0x20006719
20005d64:	20006719 	.word	0x20006719
20005d68:	20006719 	.word	0x20006719
20005d6c:	20006719 	.word	0x20006719
20005d70:	20006719 	.word	0x20006719
20005d74:	20006719 	.word	0x20006719
20005d78:	200060bd 	.word	0x200060bd
20005d7c:	20006719 	.word	0x20006719
20005d80:	20006719 	.word	0x20006719
20005d84:	20006719 	.word	0x20006719
20005d88:	20006719 	.word	0x20006719
20005d8c:	20006719 	.word	0x20006719
20005d90:	20006719 	.word	0x20006719
20005d94:	20006719 	.word	0x20006719
20005d98:	20006193 	.word	0x20006193
20005d9c:	20006719 	.word	0x20006719
20005da0:	20006719 	.word	0x20006719
20005da4:	20006719 	.word	0x20006719
20005da8:	20006719 	.word	0x20006719
20005dac:	20006719 	.word	0x20006719
20005db0:	20006719 	.word	0x20006719
20005db4:	20006719 	.word	0x20006719
20005db8:	20006163 	.word	0x20006163
20005dbc:	20006719 	.word	0x20006719
20005dc0:	20006719 	.word	0x20006719
20005dc4:	20006719 	.word	0x20006719
20005dc8:	20006719 	.word	0x20006719
20005dcc:	20006719 	.word	0x20006719
20005dd0:	20006719 	.word	0x20006719
20005dd4:	20006719 	.word	0x20006719
20005dd8:	20006193 	.word	0x20006193
20005ddc:	20006719 	.word	0x20006719
20005de0:	20006719 	.word	0x20006719
20005de4:	20006719 	.word	0x20006719
20005de8:	20006719 	.word	0x20006719
20005dec:	20006719 	.word	0x20006719
20005df0:	20006719 	.word	0x20006719
20005df4:	20006719 	.word	0x20006719
20005df8:	20006243 	.word	0x20006243
20005dfc:	20006719 	.word	0x20006719
20005e00:	20006719 	.word	0x20006719
20005e04:	20006719 	.word	0x20006719
20005e08:	20006719 	.word	0x20006719
20005e0c:	20006719 	.word	0x20006719
20005e10:	20006719 	.word	0x20006719
20005e14:	20006719 	.word	0x20006719
20005e18:	2000614b 	.word	0x2000614b
20005e1c:	20006719 	.word	0x20006719
20005e20:	20006719 	.word	0x20006719
20005e24:	20006719 	.word	0x20006719
20005e28:	20006719 	.word	0x20006719
20005e2c:	20006719 	.word	0x20006719
20005e30:	20006719 	.word	0x20006719
20005e34:	20006719 	.word	0x20006719
20005e38:	20006273 	.word	0x20006273
20005e3c:	20006719 	.word	0x20006719
20005e40:	20006719 	.word	0x20006719
20005e44:	20006719 	.word	0x20006719
20005e48:	20006719 	.word	0x20006719
20005e4c:	20006719 	.word	0x20006719
20005e50:	20006719 	.word	0x20006719
20005e54:	20006719 	.word	0x20006719
20005e58:	200062f3 	.word	0x200062f3
20005e5c:	20006719 	.word	0x20006719
20005e60:	20006719 	.word	0x20006719
20005e64:	20006719 	.word	0x20006719
20005e68:	20006719 	.word	0x20006719
20005e6c:	20006719 	.word	0x20006719
20005e70:	20006719 	.word	0x20006719
20005e74:	20006719 	.word	0x20006719
20005e78:	20006323 	.word	0x20006323
20005e7c:	20006719 	.word	0x20006719
20005e80:	20006719 	.word	0x20006719
20005e84:	20006719 	.word	0x20006719
20005e88:	20006719 	.word	0x20006719
20005e8c:	20006719 	.word	0x20006719
20005e90:	20006719 	.word	0x20006719
20005e94:	20006719 	.word	0x20006719
20005e98:	20006373 	.word	0x20006373
20005e9c:	20006719 	.word	0x20006719
20005ea0:	20006719 	.word	0x20006719
20005ea4:	20006719 	.word	0x20006719
20005ea8:	20006719 	.word	0x20006719
20005eac:	20006719 	.word	0x20006719
20005eb0:	20006719 	.word	0x20006719
20005eb4:	20006719 	.word	0x20006719
20005eb8:	2000643d 	.word	0x2000643d
20005ebc:	20006719 	.word	0x20006719
20005ec0:	20006719 	.word	0x20006719
20005ec4:	20006719 	.word	0x20006719
20005ec8:	20006719 	.word	0x20006719
20005ecc:	20006719 	.word	0x20006719
20005ed0:	20006719 	.word	0x20006719
20005ed4:	20006719 	.word	0x20006719
20005ed8:	20006433 	.word	0x20006433
20005edc:	20006719 	.word	0x20006719
20005ee0:	20006719 	.word	0x20006719
20005ee4:	20006719 	.word	0x20006719
20005ee8:	20006719 	.word	0x20006719
20005eec:	20006719 	.word	0x20006719
20005ef0:	20006719 	.word	0x20006719
20005ef4:	20006719 	.word	0x20006719
20005ef8:	2000643d 	.word	0x2000643d
20005efc:	20006719 	.word	0x20006719
20005f00:	20006719 	.word	0x20006719
20005f04:	20006719 	.word	0x20006719
20005f08:	20006719 	.word	0x20006719
20005f0c:	20006719 	.word	0x20006719
20005f10:	20006719 	.word	0x20006719
20005f14:	20006719 	.word	0x20006719
20005f18:	20006433 	.word	0x20006433
20005f1c:	20006719 	.word	0x20006719
20005f20:	20006719 	.word	0x20006719
20005f24:	20006719 	.word	0x20006719
20005f28:	20006719 	.word	0x20006719
20005f2c:	20006719 	.word	0x20006719
20005f30:	20006719 	.word	0x20006719
20005f34:	20006719 	.word	0x20006719
20005f38:	20006499 	.word	0x20006499
20005f3c:	20006719 	.word	0x20006719
20005f40:	20006719 	.word	0x20006719
20005f44:	20006719 	.word	0x20006719
20005f48:	20006719 	.word	0x20006719
20005f4c:	20006719 	.word	0x20006719
20005f50:	20006719 	.word	0x20006719
20005f54:	20006719 	.word	0x20006719
20005f58:	200063e7 	.word	0x200063e7
20005f5c:	20006719 	.word	0x20006719
20005f60:	20006719 	.word	0x20006719
20005f64:	20006719 	.word	0x20006719
20005f68:	20006719 	.word	0x20006719
20005f6c:	20006719 	.word	0x20006719
20005f70:	20006719 	.word	0x20006719
20005f74:	20006719 	.word	0x20006719
20005f78:	20006499 	.word	0x20006499
20005f7c:	20006719 	.word	0x20006719
20005f80:	20006719 	.word	0x20006719
20005f84:	20006719 	.word	0x20006719
20005f88:	20006719 	.word	0x20006719
20005f8c:	20006719 	.word	0x20006719
20005f90:	20006719 	.word	0x20006719
20005f94:	20006719 	.word	0x20006719
20005f98:	200063e7 	.word	0x200063e7
20005f9c:	20006719 	.word	0x20006719
20005fa0:	20006719 	.word	0x20006719
20005fa4:	20006719 	.word	0x20006719
20005fa8:	20006719 	.word	0x20006719
20005fac:	20006719 	.word	0x20006719
20005fb0:	20006719 	.word	0x20006719
20005fb4:	20006719 	.word	0x20006719
20005fb8:	2000650b 	.word	0x2000650b
20005fbc:	20006719 	.word	0x20006719
20005fc0:	20006719 	.word	0x20006719
20005fc4:	20006719 	.word	0x20006719
20005fc8:	20006719 	.word	0x20006719
20005fcc:	20006719 	.word	0x20006719
20005fd0:	20006719 	.word	0x20006719
20005fd4:	20006719 	.word	0x20006719
20005fd8:	200065fd 	.word	0x200065fd
20005fdc:	20006719 	.word	0x20006719
20005fe0:	20006719 	.word	0x20006719
20005fe4:	20006719 	.word	0x20006719
20005fe8:	20006719 	.word	0x20006719
20005fec:	20006719 	.word	0x20006719
20005ff0:	20006719 	.word	0x20006719
20005ff4:	20006719 	.word	0x20006719
20005ff8:	200065fd 	.word	0x200065fd
20005ffc:	20006719 	.word	0x20006719
20006000:	20006719 	.word	0x20006719
20006004:	20006719 	.word	0x20006719
20006008:	20006719 	.word	0x20006719
2000600c:	20006719 	.word	0x20006719
20006010:	20006719 	.word	0x20006719
20006014:	20006719 	.word	0x20006719
20006018:	200065fd 	.word	0x200065fd
2000601c:	20006719 	.word	0x20006719
20006020:	20006719 	.word	0x20006719
20006024:	20006719 	.word	0x20006719
20006028:	20006719 	.word	0x20006719
2000602c:	20006719 	.word	0x20006719
20006030:	20006719 	.word	0x20006719
20006034:	20006719 	.word	0x20006719
20006038:	200066c7 	.word	0x200066c7
2000603c:	20006719 	.word	0x20006719
20006040:	20006719 	.word	0x20006719
20006044:	20006719 	.word	0x20006719
20006048:	20006719 	.word	0x20006719
2000604c:	20006719 	.word	0x20006719
20006050:	20006719 	.word	0x20006719
20006054:	20006719 	.word	0x20006719
20006058:	200066c7 	.word	0x200066c7
2000605c:	20006719 	.word	0x20006719
20006060:	20006719 	.word	0x20006719
20006064:	20006719 	.word	0x20006719
20006068:	20006719 	.word	0x20006719
2000606c:	20006719 	.word	0x20006719
20006070:	20006719 	.word	0x20006719
20006074:	20006719 	.word	0x20006719
20006078:	20006719 	.word	0x20006719
2000607c:	20006719 	.word	0x20006719
20006080:	20006719 	.word	0x20006719
20006084:	20006719 	.word	0x20006719
20006088:	20006719 	.word	0x20006719
2000608c:	20006719 	.word	0x20006719
20006090:	20006719 	.word	0x20006719
20006094:	20006719 	.word	0x20006719
20006098:	200065cf 	.word	0x200065cf
2000609c:	20006719 	.word	0x20006719
200060a0:	20006719 	.word	0x20006719
200060a4:	20006719 	.word	0x20006719
200060a8:	20006719 	.word	0x20006719
200060ac:	20006719 	.word	0x20006719
200060b0:	20006719 	.word	0x20006719
200060b4:	20006719 	.word	0x20006719
200060b8:	2000676d 	.word	0x2000676d
200060bc:	687b      	ldr	r3, [r7, #4]
200060be:	681b      	ldr	r3, [r3, #0]
200060c0:	4618      	mov	r0, r3
200060c2:	f04f 0105 	mov.w	r1, #5
200060c6:	f04f 0220 	mov.w	r2, #32
200060ca:	f04f 0300 	mov.w	r3, #0
200060ce:	f000 fe32 	bl	20006d36 <HW_set_8bit_reg_field>
200060d2:	687b      	ldr	r3, [r7, #4]
200060d4:	681b      	ldr	r3, [r3, #0]
200060d6:	f103 0208 	add.w	r2, r3, #8
200060da:	687b      	ldr	r3, [r7, #4]
200060dc:	689b      	ldr	r3, [r3, #8]
200060de:	4610      	mov	r0, r2
200060e0:	4619      	mov	r1, r3
200060e2:	f000 fe24 	bl	20006d2e <HW_set_8bit_reg>
200060e6:	687b      	ldr	r3, [r7, #4]
200060e8:	681b      	ldr	r3, [r3, #0]
200060ea:	f103 0208 	add.w	r2, r3, #8
200060ee:	687b      	ldr	r3, [r7, #4]
200060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200060f2:	4610      	mov	r0, r2
200060f4:	f04f 0100 	mov.w	r1, #0
200060f8:	f04f 0201 	mov.w	r2, #1
200060fc:	f000 fe1b 	bl	20006d36 <HW_set_8bit_reg_field>
20006100:	687b      	ldr	r3, [r7, #4]
20006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006104:	2b00      	cmp	r3, #0
20006106:	d104      	bne.n	20006112 <I2C_isr+0x3ee>
20006108:	687b      	ldr	r3, [r7, #4]
2000610a:	f04f 0200 	mov.w	r2, #0
2000610e:	621a      	str	r2, [r3, #32]
20006110:	e003      	b.n	2000611a <I2C_isr+0x3f6>
20006112:	687b      	ldr	r3, [r7, #4]
20006114:	f04f 0200 	mov.w	r2, #0
20006118:	631a      	str	r2, [r3, #48]	; 0x30
2000611a:	687b      	ldr	r3, [r7, #4]
2000611c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006120:	2b00      	cmp	r3, #0
20006122:	d004      	beq.n	2000612e <I2C_isr+0x40a>
20006124:	687b      	ldr	r3, [r7, #4]
20006126:	f04f 0200 	mov.w	r2, #0
2000612a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
2000612e:	687b      	ldr	r3, [r7, #4]
20006130:	7b1a      	ldrb	r2, [r3, #12]
20006132:	687b      	ldr	r3, [r7, #4]
20006134:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
20006138:	429a      	cmp	r2, r3
2000613a:	f000 8319 	beq.w	20006770 <I2C_isr+0xa4c>
2000613e:	687b      	ldr	r3, [r7, #4]
20006140:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
20006144:	687b      	ldr	r3, [r7, #4]
20006146:	731a      	strb	r2, [r3, #12]
20006148:	e31b      	b.n	20006782 <I2C_isr+0xa5e>
2000614a:	687b      	ldr	r3, [r7, #4]
2000614c:	681b      	ldr	r3, [r3, #0]
2000614e:	4618      	mov	r0, r3
20006150:	f04f 0105 	mov.w	r1, #5
20006154:	f04f 0220 	mov.w	r2, #32
20006158:	f04f 0301 	mov.w	r3, #1
2000615c:	f000 fdeb 	bl	20006d36 <HW_set_8bit_reg_field>
20006160:	e30f      	b.n	20006782 <I2C_isr+0xa5e>
20006162:	687b      	ldr	r3, [r7, #4]
20006164:	681b      	ldr	r3, [r3, #0]
20006166:	4618      	mov	r0, r3
20006168:	f04f 0104 	mov.w	r1, #4
2000616c:	f04f 0210 	mov.w	r2, #16
20006170:	f04f 0301 	mov.w	r3, #1
20006174:	f000 fddf 	bl	20006d36 <HW_set_8bit_reg_field>
20006178:	687b      	ldr	r3, [r7, #4]
2000617a:	f04f 0202 	mov.w	r2, #2
2000617e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006182:	687b      	ldr	r3, [r7, #4]
20006184:	f04f 0200 	mov.w	r2, #0
20006188:	731a      	strb	r2, [r3, #12]
2000618a:	6878      	ldr	r0, [r7, #4]
2000618c:	f7ff fdb2 	bl	20005cf4 <enable_slave_if_required>
20006190:	e2f7      	b.n	20006782 <I2C_isr+0xa5e>
20006192:	687b      	ldr	r3, [r7, #4]
20006194:	6a1a      	ldr	r2, [r3, #32]
20006196:	687b      	ldr	r3, [r7, #4]
20006198:	69db      	ldr	r3, [r3, #28]
2000619a:	429a      	cmp	r2, r3
2000619c:	d212      	bcs.n	200061c4 <I2C_isr+0x4a0>
2000619e:	687b      	ldr	r3, [r7, #4]
200061a0:	681b      	ldr	r3, [r3, #0]
200061a2:	f103 0108 	add.w	r1, r3, #8
200061a6:	687b      	ldr	r3, [r7, #4]
200061a8:	699a      	ldr	r2, [r3, #24]
200061aa:	687b      	ldr	r3, [r7, #4]
200061ac:	6a1b      	ldr	r3, [r3, #32]
200061ae:	441a      	add	r2, r3
200061b0:	7812      	ldrb	r2, [r2, #0]
200061b2:	f103 0001 	add.w	r0, r3, #1
200061b6:	687b      	ldr	r3, [r7, #4]
200061b8:	6218      	str	r0, [r3, #32]
200061ba:	4608      	mov	r0, r1
200061bc:	4611      	mov	r1, r2
200061be:	f000 fdb6 	bl	20006d2e <HW_set_8bit_reg>
200061c2:	e2de      	b.n	20006782 <I2C_isr+0xa5e>
200061c4:	687b      	ldr	r3, [r7, #4]
200061c6:	7b1b      	ldrb	r3, [r3, #12]
200061c8:	2b03      	cmp	r3, #3
200061ca:	d10f      	bne.n	200061ec <I2C_isr+0x4c8>
200061cc:	687b      	ldr	r3, [r7, #4]
200061ce:	f04f 0201 	mov.w	r2, #1
200061d2:	625a      	str	r2, [r3, #36]	; 0x24
200061d4:	687b      	ldr	r3, [r7, #4]
200061d6:	681b      	ldr	r3, [r3, #0]
200061d8:	4618      	mov	r0, r3
200061da:	f04f 0105 	mov.w	r1, #5
200061de:	f04f 0220 	mov.w	r2, #32
200061e2:	f04f 0301 	mov.w	r3, #1
200061e6:	f000 fda6 	bl	20006d36 <HW_set_8bit_reg_field>
200061ea:	e2ca      	b.n	20006782 <I2C_isr+0xa5e>
200061ec:	687b      	ldr	r3, [r7, #4]
200061ee:	f04f 0200 	mov.w	r2, #0
200061f2:	731a      	strb	r2, [r3, #12]
200061f4:	687b      	ldr	r3, [r7, #4]
200061f6:	7d1b      	ldrb	r3, [r3, #20]
200061f8:	f003 0301 	and.w	r3, r3, #1
200061fc:	737b      	strb	r3, [r7, #13]
200061fe:	687b      	ldr	r3, [r7, #4]
20006200:	7b7a      	ldrb	r2, [r7, #13]
20006202:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
20006206:	7b7b      	ldrb	r3, [r7, #13]
20006208:	2b00      	cmp	r3, #0
2000620a:	d10e      	bne.n	2000622a <I2C_isr+0x506>
2000620c:	687b      	ldr	r3, [r7, #4]
2000620e:	681b      	ldr	r3, [r3, #0]
20006210:	4618      	mov	r0, r3
20006212:	f04f 0104 	mov.w	r1, #4
20006216:	f04f 0210 	mov.w	r2, #16
2000621a:	f04f 0301 	mov.w	r3, #1
2000621e:	f000 fd8a 	bl	20006d36 <HW_set_8bit_reg_field>
20006222:	6878      	ldr	r0, [r7, #4]
20006224:	f7ff fd66 	bl	20005cf4 <enable_slave_if_required>
20006228:	e005      	b.n	20006236 <I2C_isr+0x512>
2000622a:	6878      	ldr	r0, [r7, #4]
2000622c:	f000 fb48 	bl	200068c0 <I2C_disable_irq>
20006230:	f04f 0300 	mov.w	r3, #0
20006234:	73bb      	strb	r3, [r7, #14]
20006236:	687b      	ldr	r3, [r7, #4]
20006238:	f04f 0200 	mov.w	r2, #0
2000623c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006240:	e29f      	b.n	20006782 <I2C_isr+0xa5e>
20006242:	687b      	ldr	r3, [r7, #4]
20006244:	681b      	ldr	r3, [r3, #0]
20006246:	4618      	mov	r0, r3
20006248:	f04f 0104 	mov.w	r1, #4
2000624c:	f04f 0210 	mov.w	r2, #16
20006250:	f04f 0301 	mov.w	r3, #1
20006254:	f000 fd6f 	bl	20006d36 <HW_set_8bit_reg_field>
20006258:	687b      	ldr	r3, [r7, #4]
2000625a:	f04f 0202 	mov.w	r2, #2
2000625e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006262:	687b      	ldr	r3, [r7, #4]
20006264:	f04f 0200 	mov.w	r2, #0
20006268:	731a      	strb	r2, [r3, #12]
2000626a:	6878      	ldr	r0, [r7, #4]
2000626c:	f7ff fd42 	bl	20005cf4 <enable_slave_if_required>
20006270:	e287      	b.n	20006782 <I2C_isr+0xa5e>
20006272:	687b      	ldr	r3, [r7, #4]
20006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006276:	2b01      	cmp	r3, #1
20006278:	d90b      	bls.n	20006292 <I2C_isr+0x56e>
2000627a:	687b      	ldr	r3, [r7, #4]
2000627c:	681b      	ldr	r3, [r3, #0]
2000627e:	4618      	mov	r0, r3
20006280:	f04f 0102 	mov.w	r1, #2
20006284:	f04f 0204 	mov.w	r2, #4
20006288:	f04f 0301 	mov.w	r3, #1
2000628c:	f000 fd53 	bl	20006d36 <HW_set_8bit_reg_field>
20006290:	e277      	b.n	20006782 <I2C_isr+0xa5e>
20006292:	687b      	ldr	r3, [r7, #4]
20006294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006296:	2b01      	cmp	r3, #1
20006298:	d10b      	bne.n	200062b2 <I2C_isr+0x58e>
2000629a:	687b      	ldr	r3, [r7, #4]
2000629c:	681b      	ldr	r3, [r3, #0]
2000629e:	4618      	mov	r0, r3
200062a0:	f04f 0102 	mov.w	r1, #2
200062a4:	f04f 0204 	mov.w	r2, #4
200062a8:	f04f 0300 	mov.w	r3, #0
200062ac:	f000 fd43 	bl	20006d36 <HW_set_8bit_reg_field>
200062b0:	e267      	b.n	20006782 <I2C_isr+0xa5e>
200062b2:	687b      	ldr	r3, [r7, #4]
200062b4:	681b      	ldr	r3, [r3, #0]
200062b6:	4618      	mov	r0, r3
200062b8:	f04f 0102 	mov.w	r1, #2
200062bc:	f04f 0204 	mov.w	r2, #4
200062c0:	f04f 0301 	mov.w	r3, #1
200062c4:	f000 fd37 	bl	20006d36 <HW_set_8bit_reg_field>
200062c8:	687b      	ldr	r3, [r7, #4]
200062ca:	681b      	ldr	r3, [r3, #0]
200062cc:	4618      	mov	r0, r3
200062ce:	f04f 0104 	mov.w	r1, #4
200062d2:	f04f 0210 	mov.w	r2, #16
200062d6:	f04f 0301 	mov.w	r3, #1
200062da:	f000 fd2c 	bl	20006d36 <HW_set_8bit_reg_field>
200062de:	687b      	ldr	r3, [r7, #4]
200062e0:	f04f 0200 	mov.w	r2, #0
200062e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
200062e8:	687b      	ldr	r3, [r7, #4]
200062ea:	f04f 0200 	mov.w	r2, #0
200062ee:	731a      	strb	r2, [r3, #12]
200062f0:	e247      	b.n	20006782 <I2C_isr+0xa5e>
200062f2:	687b      	ldr	r3, [r7, #4]
200062f4:	681b      	ldr	r3, [r3, #0]
200062f6:	4618      	mov	r0, r3
200062f8:	f04f 0104 	mov.w	r1, #4
200062fc:	f04f 0210 	mov.w	r2, #16
20006300:	f04f 0301 	mov.w	r3, #1
20006304:	f000 fd17 	bl	20006d36 <HW_set_8bit_reg_field>
20006308:	687b      	ldr	r3, [r7, #4]
2000630a:	f04f 0202 	mov.w	r2, #2
2000630e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006312:	687b      	ldr	r3, [r7, #4]
20006314:	f04f 0200 	mov.w	r2, #0
20006318:	731a      	strb	r2, [r3, #12]
2000631a:	6878      	ldr	r0, [r7, #4]
2000631c:	f7ff fcea 	bl	20005cf4 <enable_slave_if_required>
20006320:	e22f      	b.n	20006782 <I2C_isr+0xa5e>
20006322:	687b      	ldr	r3, [r7, #4]
20006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20006326:	687a      	ldr	r2, [r7, #4]
20006328:	6b14      	ldr	r4, [r2, #48]	; 0x30
2000632a:	eb03 0504 	add.w	r5, r3, r4
2000632e:	687b      	ldr	r3, [r7, #4]
20006330:	681b      	ldr	r3, [r3, #0]
20006332:	f103 0308 	add.w	r3, r3, #8
20006336:	4618      	mov	r0, r3
20006338:	f000 fcfb 	bl	20006d32 <HW_get_8bit_reg>
2000633c:	4603      	mov	r3, r0
2000633e:	702b      	strb	r3, [r5, #0]
20006340:	f104 0201 	add.w	r2, r4, #1
20006344:	687b      	ldr	r3, [r7, #4]
20006346:	631a      	str	r2, [r3, #48]	; 0x30
20006348:	687b      	ldr	r3, [r7, #4]
2000634a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000634c:	687b      	ldr	r3, [r7, #4]
2000634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006350:	f103 33ff 	add.w	r3, r3, #4294967295
20006354:	429a      	cmp	r2, r3
20006356:	f0c0 820d 	bcc.w	20006774 <I2C_isr+0xa50>
2000635a:	687b      	ldr	r3, [r7, #4]
2000635c:	681b      	ldr	r3, [r3, #0]
2000635e:	4618      	mov	r0, r3
20006360:	f04f 0102 	mov.w	r1, #2
20006364:	f04f 0204 	mov.w	r2, #4
20006368:	f04f 0300 	mov.w	r3, #0
2000636c:	f000 fce3 	bl	20006d36 <HW_set_8bit_reg_field>
20006370:	e207      	b.n	20006782 <I2C_isr+0xa5e>
20006372:	687b      	ldr	r3, [r7, #4]
20006374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20006376:	687b      	ldr	r3, [r7, #4]
20006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000637a:	eb02 0403 	add.w	r4, r2, r3
2000637e:	687b      	ldr	r3, [r7, #4]
20006380:	681b      	ldr	r3, [r3, #0]
20006382:	f103 0308 	add.w	r3, r3, #8
20006386:	4618      	mov	r0, r3
20006388:	f000 fcd3 	bl	20006d32 <HW_get_8bit_reg>
2000638c:	4603      	mov	r3, r0
2000638e:	7023      	strb	r3, [r4, #0]
20006390:	687b      	ldr	r3, [r7, #4]
20006392:	7d1b      	ldrb	r3, [r3, #20]
20006394:	f003 0301 	and.w	r3, r3, #1
20006398:	737b      	strb	r3, [r7, #13]
2000639a:	687b      	ldr	r3, [r7, #4]
2000639c:	7b7a      	ldrb	r2, [r7, #13]
2000639e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
200063a2:	7b7b      	ldrb	r3, [r7, #13]
200063a4:	2b00      	cmp	r3, #0
200063a6:	d10e      	bne.n	200063c6 <I2C_isr+0x6a2>
200063a8:	687b      	ldr	r3, [r7, #4]
200063aa:	681b      	ldr	r3, [r3, #0]
200063ac:	4618      	mov	r0, r3
200063ae:	f04f 0104 	mov.w	r1, #4
200063b2:	f04f 0210 	mov.w	r2, #16
200063b6:	f04f 0301 	mov.w	r3, #1
200063ba:	f000 fcbc 	bl	20006d36 <HW_set_8bit_reg_field>
200063be:	6878      	ldr	r0, [r7, #4]
200063c0:	f7ff fc98 	bl	20005cf4 <enable_slave_if_required>
200063c4:	e005      	b.n	200063d2 <I2C_isr+0x6ae>
200063c6:	6878      	ldr	r0, [r7, #4]
200063c8:	f000 fa7a 	bl	200068c0 <I2C_disable_irq>
200063cc:	f04f 0300 	mov.w	r3, #0
200063d0:	73bb      	strb	r3, [r7, #14]
200063d2:	687b      	ldr	r3, [r7, #4]
200063d4:	f04f 0200 	mov.w	r2, #0
200063d8:	731a      	strb	r2, [r3, #12]
200063da:	687b      	ldr	r3, [r7, #4]
200063dc:	f04f 0200 	mov.w	r2, #0
200063e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
200063e4:	e1cd      	b.n	20006782 <I2C_isr+0xa5e>
200063e6:	687b      	ldr	r3, [r7, #4]
200063e8:	681b      	ldr	r3, [r3, #0]
200063ea:	4618      	mov	r0, r3
200063ec:	f04f 0102 	mov.w	r1, #2
200063f0:	f04f 0204 	mov.w	r2, #4
200063f4:	f04f 0301 	mov.w	r3, #1
200063f8:	f000 fc9d 	bl	20006d36 <HW_set_8bit_reg_field>
200063fc:	687b      	ldr	r3, [r7, #4]
200063fe:	f04f 0200 	mov.w	r2, #0
20006402:	731a      	strb	r2, [r3, #12]
20006404:	687b      	ldr	r3, [r7, #4]
20006406:	f04f 0200 	mov.w	r2, #0
2000640a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2000640e:	687b      	ldr	r3, [r7, #4]
20006410:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006414:	2b00      	cmp	r3, #0
20006416:	f000 81af 	beq.w	20006778 <I2C_isr+0xa54>
2000641a:	687b      	ldr	r3, [r7, #4]
2000641c:	681b      	ldr	r3, [r3, #0]
2000641e:	4618      	mov	r0, r3
20006420:	f04f 0105 	mov.w	r1, #5
20006424:	f04f 0220 	mov.w	r2, #32
20006428:	f04f 0301 	mov.w	r3, #1
2000642c:	f000 fc83 	bl	20006d36 <HW_set_8bit_reg_field>
20006430:	e1a7      	b.n	20006782 <I2C_isr+0xa5e>
20006432:	687b      	ldr	r3, [r7, #4]
20006434:	f04f 0201 	mov.w	r2, #1
20006438:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
2000643c:	687b      	ldr	r3, [r7, #4]
2000643e:	f04f 0204 	mov.w	r2, #4
20006442:	731a      	strb	r2, [r3, #12]
20006444:	687b      	ldr	r3, [r7, #4]
20006446:	f04f 0200 	mov.w	r2, #0
2000644a:	651a      	str	r2, [r3, #80]	; 0x50
2000644c:	687b      	ldr	r3, [r7, #4]
2000644e:	f04f 0200 	mov.w	r2, #0
20006452:	611a      	str	r2, [r3, #16]
20006454:	687b      	ldr	r3, [r7, #4]
20006456:	681b      	ldr	r3, [r3, #0]
20006458:	4618      	mov	r0, r3
2000645a:	f04f 0105 	mov.w	r1, #5
2000645e:	f04f 0220 	mov.w	r2, #32
20006462:	f000 fc76 	bl	20006d52 <HW_get_8bit_reg_field>
20006466:	4603      	mov	r3, r0
20006468:	2b00      	cmp	r3, #0
2000646a:	d00f      	beq.n	2000648c <I2C_isr+0x768>
2000646c:	687b      	ldr	r3, [r7, #4]
2000646e:	681b      	ldr	r3, [r3, #0]
20006470:	4618      	mov	r0, r3
20006472:	f04f 0105 	mov.w	r1, #5
20006476:	f04f 0220 	mov.w	r2, #32
2000647a:	f04f 0300 	mov.w	r3, #0
2000647e:	f000 fc5a 	bl	20006d36 <HW_set_8bit_reg_field>
20006482:	687b      	ldr	r3, [r7, #4]
20006484:	f04f 0201 	mov.w	r2, #1
20006488:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
2000648c:	687b      	ldr	r3, [r7, #4]
2000648e:	f04f 0201 	mov.w	r2, #1
20006492:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006496:	e174      	b.n	20006782 <I2C_isr+0xa5e>
20006498:	687b      	ldr	r3, [r7, #4]
2000649a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000649c:	2b00      	cmp	r3, #0
2000649e:	d021      	beq.n	200064e4 <I2C_isr+0x7c0>
200064a0:	687b      	ldr	r3, [r7, #4]
200064a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200064a4:	687b      	ldr	r3, [r7, #4]
200064a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200064a8:	429a      	cmp	r2, r3
200064aa:	d21b      	bcs.n	200064e4 <I2C_isr+0x7c0>
200064ac:	687b      	ldr	r3, [r7, #4]
200064ae:	681b      	ldr	r3, [r3, #0]
200064b0:	f103 0308 	add.w	r3, r3, #8
200064b4:	4618      	mov	r0, r3
200064b6:	f000 fc3c 	bl	20006d32 <HW_get_8bit_reg>
200064ba:	4603      	mov	r3, r0
200064bc:	733b      	strb	r3, [r7, #12]
200064be:	687b      	ldr	r3, [r7, #4]
200064c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200064c2:	687b      	ldr	r3, [r7, #4]
200064c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200064c6:	441a      	add	r2, r3
200064c8:	7b39      	ldrb	r1, [r7, #12]
200064ca:	7011      	strb	r1, [r2, #0]
200064cc:	f103 0201 	add.w	r2, r3, #1
200064d0:	687b      	ldr	r3, [r7, #4]
200064d2:	651a      	str	r2, [r3, #80]	; 0x50
200064d4:	687b      	ldr	r3, [r7, #4]
200064d6:	691b      	ldr	r3, [r3, #16]
200064d8:	ea4f 2203 	mov.w	r2, r3, lsl #8
200064dc:	7b3b      	ldrb	r3, [r7, #12]
200064de:	441a      	add	r2, r3
200064e0:	687b      	ldr	r3, [r7, #4]
200064e2:	611a      	str	r2, [r3, #16]
200064e4:	687b      	ldr	r3, [r7, #4]
200064e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200064e8:	687b      	ldr	r3, [r7, #4]
200064ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200064ec:	429a      	cmp	r2, r3
200064ee:	f0c0 8145 	bcc.w	2000677c <I2C_isr+0xa58>
200064f2:	687b      	ldr	r3, [r7, #4]
200064f4:	681b      	ldr	r3, [r3, #0]
200064f6:	4618      	mov	r0, r3
200064f8:	f04f 0102 	mov.w	r1, #2
200064fc:	f04f 0204 	mov.w	r2, #4
20006500:	f04f 0300 	mov.w	r3, #0
20006504:	f000 fc17 	bl	20006d36 <HW_set_8bit_reg_field>
20006508:	e13b      	b.n	20006782 <I2C_isr+0xa5e>
2000650a:	687b      	ldr	r3, [r7, #4]
2000650c:	7b1b      	ldrb	r3, [r3, #12]
2000650e:	2b04      	cmp	r3, #4
20006510:	d13c      	bne.n	2000658c <I2C_isr+0x868>
20006512:	687b      	ldr	r3, [r7, #4]
20006514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006516:	687b      	ldr	r3, [r7, #4]
20006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000651a:	429a      	cmp	r2, r3
2000651c:	d103      	bne.n	20006526 <I2C_isr+0x802>
2000651e:	687b      	ldr	r3, [r7, #4]
20006520:	691a      	ldr	r2, [r3, #16]
20006522:	687b      	ldr	r3, [r7, #4]
20006524:	645a      	str	r2, [r3, #68]	; 0x44
20006526:	687b      	ldr	r3, [r7, #4]
20006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000652a:	2b00      	cmp	r3, #0
2000652c:	d022      	beq.n	20006574 <I2C_isr+0x850>
2000652e:	687b      	ldr	r3, [r7, #4]
20006530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006532:	687a      	ldr	r2, [r7, #4]
20006534:	6c91      	ldr	r1, [r2, #72]	; 0x48
20006536:	687a      	ldr	r2, [r7, #4]
20006538:	6d12      	ldr	r2, [r2, #80]	; 0x50
2000653a:	b292      	uxth	r2, r2
2000653c:	6878      	ldr	r0, [r7, #4]
2000653e:	4798      	blx	r3
20006540:	4603      	mov	r3, r0
20006542:	73fb      	strb	r3, [r7, #15]
20006544:	7bfb      	ldrb	r3, [r7, #15]
20006546:	2b00      	cmp	r3, #0
20006548:	d103      	bne.n	20006552 <I2C_isr+0x82e>
2000654a:	6878      	ldr	r0, [r7, #4]
2000654c:	f7ff fbd2 	bl	20005cf4 <enable_slave_if_required>
20006550:	e023      	b.n	2000659a <I2C_isr+0x876>
20006552:	687b      	ldr	r3, [r7, #4]
20006554:	681b      	ldr	r3, [r3, #0]
20006556:	4618      	mov	r0, r3
20006558:	f04f 0102 	mov.w	r1, #2
2000655c:	f04f 0204 	mov.w	r2, #4
20006560:	f04f 0300 	mov.w	r3, #0
20006564:	f000 fbe7 	bl	20006d36 <HW_set_8bit_reg_field>
20006568:	687b      	ldr	r3, [r7, #4]
2000656a:	f04f 0200 	mov.w	r2, #0
2000656e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
20006572:	e012      	b.n	2000659a <I2C_isr+0x876>
20006574:	687b      	ldr	r3, [r7, #4]
20006576:	681b      	ldr	r3, [r3, #0]
20006578:	4618      	mov	r0, r3
2000657a:	f04f 0102 	mov.w	r1, #2
2000657e:	f04f 0204 	mov.w	r2, #4
20006582:	f04f 0301 	mov.w	r3, #1
20006586:	f000 fbd6 	bl	20006d36 <HW_set_8bit_reg_field>
2000658a:	e006      	b.n	2000659a <I2C_isr+0x876>
2000658c:	687b      	ldr	r3, [r7, #4]
2000658e:	f04f 0200 	mov.w	r2, #0
20006592:	645a      	str	r2, [r3, #68]	; 0x44
20006594:	6878      	ldr	r0, [r7, #4]
20006596:	f7ff fbad 	bl	20005cf4 <enable_slave_if_required>
2000659a:	687b      	ldr	r3, [r7, #4]
2000659c:	f04f 0200 	mov.w	r2, #0
200065a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
200065a4:	687b      	ldr	r3, [r7, #4]
200065a6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200065aa:	2b00      	cmp	r3, #0
200065ac:	d00a      	beq.n	200065c4 <I2C_isr+0x8a0>
200065ae:	687b      	ldr	r3, [r7, #4]
200065b0:	681b      	ldr	r3, [r3, #0]
200065b2:	4618      	mov	r0, r3
200065b4:	f04f 0105 	mov.w	r1, #5
200065b8:	f04f 0220 	mov.w	r2, #32
200065bc:	f04f 0301 	mov.w	r3, #1
200065c0:	f000 fbb9 	bl	20006d36 <HW_set_8bit_reg_field>
200065c4:	687b      	ldr	r3, [r7, #4]
200065c6:	f04f 0200 	mov.w	r2, #0
200065ca:	731a      	strb	r2, [r3, #12]
200065cc:	e0d9      	b.n	20006782 <I2C_isr+0xa5e>
200065ce:	687b      	ldr	r3, [r7, #4]
200065d0:	f04f 0200 	mov.w	r2, #0
200065d4:	731a      	strb	r2, [r3, #12]
200065d6:	687b      	ldr	r3, [r7, #4]
200065d8:	f04f 0200 	mov.w	r2, #0
200065dc:	645a      	str	r2, [r3, #68]	; 0x44
200065de:	687b      	ldr	r3, [r7, #4]
200065e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200065e4:	b2db      	uxtb	r3, r3
200065e6:	2b01      	cmp	r3, #1
200065e8:	d104      	bne.n	200065f4 <I2C_isr+0x8d0>
200065ea:	687b      	ldr	r3, [r7, #4]
200065ec:	f04f 0202 	mov.w	r2, #2
200065f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
200065f4:	6878      	ldr	r0, [r7, #4]
200065f6:	f7ff fb7d 	bl	20005cf4 <enable_slave_if_required>
200065fa:	e0c2      	b.n	20006782 <I2C_isr+0xa5e>
200065fc:	7afb      	ldrb	r3, [r7, #11]
200065fe:	b2db      	uxtb	r3, r3
20006600:	2ba8      	cmp	r3, #168	; 0xa8
20006602:	d128      	bne.n	20006656 <I2C_isr+0x932>
20006604:	687b      	ldr	r3, [r7, #4]
20006606:	f04f 0205 	mov.w	r2, #5
2000660a:	731a      	strb	r2, [r3, #12]
2000660c:	687b      	ldr	r3, [r7, #4]
2000660e:	f04f 0200 	mov.w	r2, #0
20006612:	611a      	str	r2, [r3, #16]
20006614:	687b      	ldr	r3, [r7, #4]
20006616:	f04f 0201 	mov.w	r2, #1
2000661a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2000661e:	687b      	ldr	r3, [r7, #4]
20006620:	681b      	ldr	r3, [r3, #0]
20006622:	4618      	mov	r0, r3
20006624:	f04f 0105 	mov.w	r1, #5
20006628:	f04f 0220 	mov.w	r2, #32
2000662c:	f000 fb91 	bl	20006d52 <HW_get_8bit_reg_field>
20006630:	4603      	mov	r3, r0
20006632:	2b00      	cmp	r3, #0
20006634:	d00f      	beq.n	20006656 <I2C_isr+0x932>
20006636:	687b      	ldr	r3, [r7, #4]
20006638:	681b      	ldr	r3, [r3, #0]
2000663a:	4618      	mov	r0, r3
2000663c:	f04f 0105 	mov.w	r1, #5
20006640:	f04f 0220 	mov.w	r2, #32
20006644:	f04f 0300 	mov.w	r3, #0
20006648:	f000 fb75 	bl	20006d36 <HW_set_8bit_reg_field>
2000664c:	687b      	ldr	r3, [r7, #4]
2000664e:	f04f 0201 	mov.w	r2, #1
20006652:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006656:	687b      	ldr	r3, [r7, #4]
20006658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000665a:	687b      	ldr	r3, [r7, #4]
2000665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000665e:	429a      	cmp	r2, r3
20006660:	d309      	bcc.n	20006676 <I2C_isr+0x952>
20006662:	687b      	ldr	r3, [r7, #4]
20006664:	681b      	ldr	r3, [r3, #0]
20006666:	f103 0308 	add.w	r3, r3, #8
2000666a:	4618      	mov	r0, r3
2000666c:	f04f 01ff 	mov.w	r1, #255	; 0xff
20006670:	f000 fb5d 	bl	20006d2e <HW_set_8bit_reg>
20006674:	e011      	b.n	2000669a <I2C_isr+0x976>
20006676:	687b      	ldr	r3, [r7, #4]
20006678:	681b      	ldr	r3, [r3, #0]
2000667a:	f103 0108 	add.w	r1, r3, #8
2000667e:	687b      	ldr	r3, [r7, #4]
20006680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
20006682:	687b      	ldr	r3, [r7, #4]
20006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006686:	441a      	add	r2, r3
20006688:	7812      	ldrb	r2, [r2, #0]
2000668a:	f103 0001 	add.w	r0, r3, #1
2000668e:	687b      	ldr	r3, [r7, #4]
20006690:	6458      	str	r0, [r3, #68]	; 0x44
20006692:	4608      	mov	r0, r1
20006694:	4611      	mov	r1, r2
20006696:	f000 fb4a 	bl	20006d2e <HW_set_8bit_reg>
2000669a:	687b      	ldr	r3, [r7, #4]
2000669c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000669e:	687b      	ldr	r3, [r7, #4]
200066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200066a2:	429a      	cmp	r2, r3
200066a4:	d36c      	bcc.n	20006780 <I2C_isr+0xa5c>
200066a6:	687b      	ldr	r3, [r7, #4]
200066a8:	681b      	ldr	r3, [r3, #0]
200066aa:	4618      	mov	r0, r3
200066ac:	f04f 0102 	mov.w	r1, #2
200066b0:	f04f 0204 	mov.w	r2, #4
200066b4:	f04f 0300 	mov.w	r3, #0
200066b8:	f000 fb3d 	bl	20006d36 <HW_set_8bit_reg_field>
200066bc:	687b      	ldr	r3, [r7, #4]
200066be:	f04f 0200 	mov.w	r2, #0
200066c2:	645a      	str	r2, [r3, #68]	; 0x44
200066c4:	e05d      	b.n	20006782 <I2C_isr+0xa5e>
200066c6:	687b      	ldr	r3, [r7, #4]
200066c8:	f04f 0200 	mov.w	r2, #0
200066cc:	645a      	str	r2, [r3, #68]	; 0x44
200066ce:	687b      	ldr	r3, [r7, #4]
200066d0:	681b      	ldr	r3, [r3, #0]
200066d2:	4618      	mov	r0, r3
200066d4:	f04f 0102 	mov.w	r1, #2
200066d8:	f04f 0204 	mov.w	r2, #4
200066dc:	f04f 0301 	mov.w	r3, #1
200066e0:	f000 fb29 	bl	20006d36 <HW_set_8bit_reg_field>
200066e4:	687b      	ldr	r3, [r7, #4]
200066e6:	f04f 0200 	mov.w	r2, #0
200066ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
200066ee:	687b      	ldr	r3, [r7, #4]
200066f0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200066f4:	2b00      	cmp	r3, #0
200066f6:	d00a      	beq.n	2000670e <I2C_isr+0x9ea>
200066f8:	687b      	ldr	r3, [r7, #4]
200066fa:	681b      	ldr	r3, [r3, #0]
200066fc:	4618      	mov	r0, r3
200066fe:	f04f 0105 	mov.w	r1, #5
20006702:	f04f 0220 	mov.w	r2, #32
20006706:	f04f 0301 	mov.w	r3, #1
2000670a:	f000 fb14 	bl	20006d36 <HW_set_8bit_reg_field>
2000670e:	687b      	ldr	r3, [r7, #4]
20006710:	f04f 0200 	mov.w	r2, #0
20006714:	731a      	strb	r2, [r3, #12]
20006716:	e034      	b.n	20006782 <I2C_isr+0xa5e>
20006718:	687b      	ldr	r3, [r7, #4]
2000671a:	681b      	ldr	r3, [r3, #0]
2000671c:	4618      	mov	r0, r3
2000671e:	f04f 0105 	mov.w	r1, #5
20006722:	f04f 0220 	mov.w	r2, #32
20006726:	f04f 0300 	mov.w	r3, #0
2000672a:	f000 fb04 	bl	20006d36 <HW_set_8bit_reg_field>
2000672e:	687b      	ldr	r3, [r7, #4]
20006730:	f04f 0200 	mov.w	r2, #0
20006734:	731a      	strb	r2, [r3, #12]
20006736:	687b      	ldr	r3, [r7, #4]
20006738:	f04f 0200 	mov.w	r2, #0
2000673c:	645a      	str	r2, [r3, #68]	; 0x44
2000673e:	687b      	ldr	r3, [r7, #4]
20006740:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006744:	b2db      	uxtb	r3, r3
20006746:	2b01      	cmp	r3, #1
20006748:	d104      	bne.n	20006754 <I2C_isr+0xa30>
2000674a:	687b      	ldr	r3, [r7, #4]
2000674c:	f04f 0202 	mov.w	r2, #2
20006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006754:	687b      	ldr	r3, [r7, #4]
20006756:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
2000675a:	b2db      	uxtb	r3, r3
2000675c:	2b01      	cmp	r3, #1
2000675e:	d110      	bne.n	20006782 <I2C_isr+0xa5e>
20006760:	687b      	ldr	r3, [r7, #4]
20006762:	f04f 0202 	mov.w	r2, #2
20006766:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2000676a:	e00a      	b.n	20006782 <I2C_isr+0xa5e>
2000676c:	bf00      	nop
2000676e:	e008      	b.n	20006782 <I2C_isr+0xa5e>
20006770:	bf00      	nop
20006772:	e006      	b.n	20006782 <I2C_isr+0xa5e>
20006774:	bf00      	nop
20006776:	e004      	b.n	20006782 <I2C_isr+0xa5e>
20006778:	bf00      	nop
2000677a:	e002      	b.n	20006782 <I2C_isr+0xa5e>
2000677c:	bf00      	nop
2000677e:	e000      	b.n	20006782 <I2C_isr+0xa5e>
20006780:	bf00      	nop
20006782:	7bbb      	ldrb	r3, [r7, #14]
20006784:	2b00      	cmp	r3, #0
20006786:	d00a      	beq.n	2000679e <I2C_isr+0xa7a>
20006788:	687b      	ldr	r3, [r7, #4]
2000678a:	681b      	ldr	r3, [r3, #0]
2000678c:	4618      	mov	r0, r3
2000678e:	f04f 0103 	mov.w	r1, #3
20006792:	f04f 0208 	mov.w	r2, #8
20006796:	f04f 0300 	mov.w	r3, #0
2000679a:	f000 facc 	bl	20006d36 <HW_set_8bit_reg_field>
2000679e:	687b      	ldr	r3, [r7, #4]
200067a0:	681b      	ldr	r3, [r3, #0]
200067a2:	f103 0304 	add.w	r3, r3, #4
200067a6:	4618      	mov	r0, r3
200067a8:	f000 fac3 	bl	20006d32 <HW_get_8bit_reg>
200067ac:	4603      	mov	r3, r0
200067ae:	72fb      	strb	r3, [r7, #11]
200067b0:	f107 0710 	add.w	r7, r7, #16
200067b4:	46bd      	mov	sp, r7
200067b6:	bdb0      	pop	{r4, r5, r7, pc}

200067b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200067b8:	b480      	push	{r7}
200067ba:	b083      	sub	sp, #12
200067bc:	af00      	add	r7, sp, #0
200067be:	4603      	mov	r3, r0
200067c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200067c2:	f24e 1300 	movw	r3, #57600	; 0xe100
200067c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200067ca:	f997 2007 	ldrsb.w	r2, [r7, #7]
200067ce:	ea4f 1252 	mov.w	r2, r2, lsr #5
200067d2:	79f9      	ldrb	r1, [r7, #7]
200067d4:	f001 011f 	and.w	r1, r1, #31
200067d8:	f04f 0001 	mov.w	r0, #1
200067dc:	fa00 f101 	lsl.w	r1, r0, r1
200067e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200067e4:	f107 070c 	add.w	r7, r7, #12
200067e8:	46bd      	mov	sp, r7
200067ea:	bc80      	pop	{r7}
200067ec:	4770      	bx	lr
200067ee:	bf00      	nop

200067f0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200067f0:	b480      	push	{r7}
200067f2:	b083      	sub	sp, #12
200067f4:	af00      	add	r7, sp, #0
200067f6:	4603      	mov	r3, r0
200067f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200067fa:	f24e 1300 	movw	r3, #57600	; 0xe100
200067fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006802:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006806:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000680a:	79f9      	ldrb	r1, [r7, #7]
2000680c:	f001 011f 	and.w	r1, r1, #31
20006810:	f04f 0001 	mov.w	r0, #1
20006814:	fa00 f101 	lsl.w	r1, r0, r1
20006818:	f102 0220 	add.w	r2, r2, #32
2000681c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006820:	f107 070c 	add.w	r7, r7, #12
20006824:	46bd      	mov	sp, r7
20006826:	bc80      	pop	{r7}
20006828:	4770      	bx	lr
2000682a:	bf00      	nop

2000682c <I2C_enable_irq>:
2000682c:	b580      	push	{r7, lr}
2000682e:	b082      	sub	sp, #8
20006830:	af00      	add	r7, sp, #0
20006832:	6078      	str	r0, [r7, #4]
20006834:	687a      	ldr	r2, [r7, #4]
20006836:	f64d 1338 	movw	r3, #55608	; 0xd938
2000683a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000683e:	429a      	cmp	r2, r3
20006840:	d103      	bne.n	2000684a <I2C_enable_irq+0x1e>
20006842:	f04f 0022 	mov.w	r0, #34	; 0x22
20006846:	f7ff ffb7 	bl	200067b8 <NVIC_EnableIRQ>
2000684a:	687a      	ldr	r2, [r7, #4]
2000684c:	f64d 13a4 	movw	r3, #55716	; 0xd9a4
20006850:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006854:	429a      	cmp	r2, r3
20006856:	d103      	bne.n	20006860 <I2C_enable_irq+0x34>
20006858:	f04f 0023 	mov.w	r0, #35	; 0x23
2000685c:	f7ff ffac 	bl	200067b8 <NVIC_EnableIRQ>
20006860:	687a      	ldr	r2, [r7, #4]
20006862:	f24d 437c 	movw	r3, #54396	; 0xd47c
20006866:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000686a:	429a      	cmp	r2, r3
2000686c:	d103      	bne.n	20006876 <I2C_enable_irq+0x4a>
2000686e:	f04f 0024 	mov.w	r0, #36	; 0x24
20006872:	f7ff ffa1 	bl	200067b8 <NVIC_EnableIRQ>
20006876:	687a      	ldr	r2, [r7, #4]
20006878:	f64d 237c 	movw	r3, #55932	; 0xda7c
2000687c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006880:	429a      	cmp	r2, r3
20006882:	d103      	bne.n	2000688c <I2C_enable_irq+0x60>
20006884:	f04f 0025 	mov.w	r0, #37	; 0x25
20006888:	f7ff ff96 	bl	200067b8 <NVIC_EnableIRQ>
2000688c:	687a      	ldr	r2, [r7, #4]
2000688e:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
20006892:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006896:	429a      	cmp	r2, r3
20006898:	d103      	bne.n	200068a2 <I2C_enable_irq+0x76>
2000689a:	f04f 0026 	mov.w	r0, #38	; 0x26
2000689e:	f7ff ff8b 	bl	200067b8 <NVIC_EnableIRQ>
200068a2:	687a      	ldr	r2, [r7, #4]
200068a4:	f64d 2310 	movw	r3, #55824	; 0xda10
200068a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200068ac:	429a      	cmp	r2, r3
200068ae:	d103      	bne.n	200068b8 <I2C_enable_irq+0x8c>
200068b0:	f04f 0027 	mov.w	r0, #39	; 0x27
200068b4:	f7ff ff80 	bl	200067b8 <NVIC_EnableIRQ>
200068b8:	f107 0708 	add.w	r7, r7, #8
200068bc:	46bd      	mov	sp, r7
200068be:	bd80      	pop	{r7, pc}

200068c0 <I2C_disable_irq>:
200068c0:	b580      	push	{r7, lr}
200068c2:	b082      	sub	sp, #8
200068c4:	af00      	add	r7, sp, #0
200068c6:	6078      	str	r0, [r7, #4]
200068c8:	687a      	ldr	r2, [r7, #4]
200068ca:	f64d 1338 	movw	r3, #55608	; 0xd938
200068ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200068d2:	429a      	cmp	r2, r3
200068d4:	d103      	bne.n	200068de <I2C_disable_irq+0x1e>
200068d6:	f04f 0022 	mov.w	r0, #34	; 0x22
200068da:	f7ff ff89 	bl	200067f0 <NVIC_DisableIRQ>
200068de:	687a      	ldr	r2, [r7, #4]
200068e0:	f64d 13a4 	movw	r3, #55716	; 0xd9a4
200068e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200068e8:	429a      	cmp	r2, r3
200068ea:	d103      	bne.n	200068f4 <I2C_disable_irq+0x34>
200068ec:	f04f 0023 	mov.w	r0, #35	; 0x23
200068f0:	f7ff ff7e 	bl	200067f0 <NVIC_DisableIRQ>
200068f4:	687a      	ldr	r2, [r7, #4]
200068f6:	f24d 437c 	movw	r3, #54396	; 0xd47c
200068fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200068fe:	429a      	cmp	r2, r3
20006900:	d103      	bne.n	2000690a <I2C_disable_irq+0x4a>
20006902:	f04f 0024 	mov.w	r0, #36	; 0x24
20006906:	f7ff ff73 	bl	200067f0 <NVIC_DisableIRQ>
2000690a:	687a      	ldr	r2, [r7, #4]
2000690c:	f64d 237c 	movw	r3, #55932	; 0xda7c
20006910:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006914:	429a      	cmp	r2, r3
20006916:	d103      	bne.n	20006920 <I2C_disable_irq+0x60>
20006918:	f04f 0025 	mov.w	r0, #37	; 0x25
2000691c:	f7ff ff68 	bl	200067f0 <NVIC_DisableIRQ>
20006920:	687a      	ldr	r2, [r7, #4]
20006922:	f64d 23f0 	movw	r3, #56048	; 0xdaf0
20006926:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000692a:	429a      	cmp	r2, r3
2000692c:	d103      	bne.n	20006936 <I2C_disable_irq+0x76>
2000692e:	f04f 0026 	mov.w	r0, #38	; 0x26
20006932:	f7ff ff5d 	bl	200067f0 <NVIC_DisableIRQ>
20006936:	687a      	ldr	r2, [r7, #4]
20006938:	f64d 2310 	movw	r3, #55824	; 0xda10
2000693c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006940:	429a      	cmp	r2, r3
20006942:	d103      	bne.n	2000694c <I2C_disable_irq+0x8c>
20006944:	f04f 0027 	mov.w	r0, #39	; 0x27
20006948:	f7ff ff52 	bl	200067f0 <NVIC_DisableIRQ>
2000694c:	f107 0708 	add.w	r7, r7, #8
20006950:	46bd      	mov	sp, r7
20006952:	bd80      	pop	{r7, pc}

20006954 <SystemInit>:
20006954:	b580      	push	{r7, lr}
20006956:	af00      	add	r7, sp, #0
20006958:	f000 f96a 	bl	20006c30 <complete_clock_config>
2000695c:	f000 f936 	bl	20006bcc <silicon_workarounds>
20006960:	f64e 5300 	movw	r3, #60672	; 0xed00
20006964:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006968:	f64e 5200 	movw	r2, #60672	; 0xed00
2000696c:	f2ce 0200 	movt	r2, #57344	; 0xe000
20006970:	6952      	ldr	r2, [r2, #20]
20006972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20006976:	615a      	str	r2, [r3, #20]
20006978:	f7f9 fc99 	bl	200002ae <mscc_post_hw_cfg_init>
2000697c:	bd80      	pop	{r7, pc}
2000697e:	bf00      	nop

20006980 <SystemCoreClockUpdate>:
20006980:	b580      	push	{r7, lr}
20006982:	b088      	sub	sp, #32
20006984:	af00      	add	r7, sp, #0
20006986:	f248 0300 	movw	r3, #32768	; 0x8000
2000698a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000698e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20006992:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20006996:	60fb      	str	r3, [r7, #12]
20006998:	68fb      	ldr	r3, [r7, #12]
2000699a:	2b00      	cmp	r3, #0
2000699c:	f040 808b 	bne.w	20006ab6 <SystemCoreClockUpdate+0x136>
200069a0:	f248 0300 	movw	r3, #32768	; 0x8000
200069a4:	f2c4 0303 	movt	r3, #16387	; 0x4003
200069a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
200069ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
200069b0:	617b      	str	r3, [r7, #20]
200069b2:	697b      	ldr	r3, [r7, #20]
200069b4:	2b00      	cmp	r3, #0
200069b6:	d13f      	bne.n	20006a38 <SystemCoreClockUpdate+0xb8>
200069b8:	f247 130c 	movw	r3, #28940	; 0x710c
200069bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200069c0:	f24e 1200 	movw	r2, #57600	; 0xe100
200069c4:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200069c8:	601a      	str	r2, [r3, #0]
200069ca:	f247 1310 	movw	r3, #28944	; 0x7110
200069ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200069d2:	f24e 1200 	movw	r2, #57600	; 0xe100
200069d6:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200069da:	601a      	str	r2, [r3, #0]
200069dc:	f247 1314 	movw	r3, #28948	; 0x7114
200069e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200069e4:	f24e 1200 	movw	r2, #57600	; 0xe100
200069e8:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200069ec:	601a      	str	r2, [r3, #0]
200069ee:	f247 1318 	movw	r3, #28952	; 0x7118
200069f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200069f6:	f24f 0280 	movw	r2, #61568	; 0xf080
200069fa:	f2c0 22fa 	movt	r2, #762	; 0x2fa
200069fe:	601a      	str	r2, [r3, #0]
20006a00:	f247 131c 	movw	r3, #28956	; 0x711c
20006a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006a08:	f24e 1200 	movw	r2, #57600	; 0xe100
20006a0c:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006a10:	601a      	str	r2, [r3, #0]
20006a12:	f247 1320 	movw	r3, #28960	; 0x7120
20006a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006a1a:	f24e 1200 	movw	r2, #57600	; 0xe100
20006a1e:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006a22:	601a      	str	r2, [r3, #0]
20006a24:	f247 1324 	movw	r3, #28964	; 0x7124
20006a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006a2c:	f24e 1200 	movw	r2, #57600	; 0xe100
20006a30:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006a34:	601a      	str	r2, [r3, #0]
20006a36:	e045      	b.n	20006ac4 <SystemCoreClockUpdate+0x144>
20006a38:	f247 03a0 	movw	r3, #28832	; 0x70a0
20006a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006a40:	f107 0204 	add.w	r2, r7, #4
20006a44:	e893 0003 	ldmia.w	r3, {r0, r1}
20006a48:	e882 0003 	stmia.w	r2, {r0, r1}
20006a4c:	f248 0300 	movw	r3, #32768	; 0x8000
20006a50:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
20006a58:	ea4f 1393 	mov.w	r3, r3, lsr #6
20006a5c:	f003 0307 	and.w	r3, r3, #7
20006a60:	61bb      	str	r3, [r7, #24]
20006a62:	69bb      	ldr	r3, [r7, #24]
20006a64:	f107 0220 	add.w	r2, r7, #32
20006a68:	4413      	add	r3, r2
20006a6a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
20006a6e:	77fb      	strb	r3, [r7, #31]
20006a70:	7ffb      	ldrb	r3, [r7, #31]
20006a72:	2b01      	cmp	r3, #1
20006a74:	d00b      	beq.n	20006a8e <SystemCoreClockUpdate+0x10e>
20006a76:	2b02      	cmp	r3, #2
20006a78:	d00e      	beq.n	20006a98 <SystemCoreClockUpdate+0x118>
20006a7a:	2b00      	cmp	r3, #0
20006a7c:	d114      	bne.n	20006aa8 <SystemCoreClockUpdate+0x128>
20006a7e:	f000 f825 	bl	20006acc <get_rcosc_25_50mhz_frequency>
20006a82:	4603      	mov	r3, r0
20006a84:	613b      	str	r3, [r7, #16]
20006a86:	6938      	ldr	r0, [r7, #16]
20006a88:	f000 f842 	bl	20006b10 <set_clock_frequency_globals>
20006a8c:	e01a      	b.n	20006ac4 <SystemCoreClockUpdate+0x144>
20006a8e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20006a92:	f000 f83d 	bl	20006b10 <set_clock_frequency_globals>
20006a96:	e015      	b.n	20006ac4 <SystemCoreClockUpdate+0x144>
20006a98:	f244 2040 	movw	r0, #16960	; 0x4240
20006a9c:	f2c0 000f 	movt	r0, #15
20006aa0:	f000 f836 	bl	20006b10 <set_clock_frequency_globals>
20006aa4:	bf00      	nop
20006aa6:	e00d      	b.n	20006ac4 <SystemCoreClockUpdate+0x144>
20006aa8:	f244 2040 	movw	r0, #16960	; 0x4240
20006aac:	f2c0 000f 	movt	r0, #15
20006ab0:	f000 f82e 	bl	20006b10 <set_clock_frequency_globals>
20006ab4:	e006      	b.n	20006ac4 <SystemCoreClockUpdate+0x144>
20006ab6:	f000 f809 	bl	20006acc <get_rcosc_25_50mhz_frequency>
20006aba:	4603      	mov	r3, r0
20006abc:	613b      	str	r3, [r7, #16]
20006abe:	6938      	ldr	r0, [r7, #16]
20006ac0:	f000 f826 	bl	20006b10 <set_clock_frequency_globals>
20006ac4:	f107 0720 	add.w	r7, r7, #32
20006ac8:	46bd      	mov	sp, r7
20006aca:	bd80      	pop	{r7, pc}

20006acc <get_rcosc_25_50mhz_frequency>:
20006acc:	b480      	push	{r7}
20006ace:	b083      	sub	sp, #12
20006ad0:	af00      	add	r7, sp, #0
20006ad2:	f248 0300 	movw	r3, #32768	; 0x8000
20006ad6:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006ada:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20006ade:	f003 0304 	and.w	r3, r3, #4
20006ae2:	603b      	str	r3, [r7, #0]
20006ae4:	683b      	ldr	r3, [r7, #0]
20006ae6:	2b00      	cmp	r3, #0
20006ae8:	d105      	bne.n	20006af6 <get_rcosc_25_50mhz_frequency+0x2a>
20006aea:	f647 0340 	movw	r3, #30784	; 0x7840
20006aee:	f2c0 137d 	movt	r3, #381	; 0x17d
20006af2:	607b      	str	r3, [r7, #4]
20006af4:	e004      	b.n	20006b00 <get_rcosc_25_50mhz_frequency+0x34>
20006af6:	f24f 0380 	movw	r3, #61568	; 0xf080
20006afa:	f2c0 23fa 	movt	r3, #762	; 0x2fa
20006afe:	607b      	str	r3, [r7, #4]
20006b00:	687b      	ldr	r3, [r7, #4]
20006b02:	4618      	mov	r0, r3
20006b04:	f107 070c 	add.w	r7, r7, #12
20006b08:	46bd      	mov	sp, r7
20006b0a:	bc80      	pop	{r7}
20006b0c:	4770      	bx	lr
20006b0e:	bf00      	nop

20006b10 <set_clock_frequency_globals>:
20006b10:	b480      	push	{r7}
20006b12:	b083      	sub	sp, #12
20006b14:	af00      	add	r7, sp, #0
20006b16:	6078      	str	r0, [r7, #4]
20006b18:	f247 130c 	movw	r3, #28940	; 0x710c
20006b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b20:	687a      	ldr	r2, [r7, #4]
20006b22:	601a      	str	r2, [r3, #0]
20006b24:	f247 1310 	movw	r3, #28944	; 0x7110
20006b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b2c:	687a      	ldr	r2, [r7, #4]
20006b2e:	601a      	str	r2, [r3, #0]
20006b30:	f247 1314 	movw	r3, #28948	; 0x7114
20006b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b38:	687a      	ldr	r2, [r7, #4]
20006b3a:	601a      	str	r2, [r3, #0]
20006b3c:	f247 1318 	movw	r3, #28952	; 0x7118
20006b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b44:	f24f 0280 	movw	r2, #61568	; 0xf080
20006b48:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20006b4c:	601a      	str	r2, [r3, #0]
20006b4e:	f247 131c 	movw	r3, #28956	; 0x711c
20006b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b56:	687a      	ldr	r2, [r7, #4]
20006b58:	601a      	str	r2, [r3, #0]
20006b5a:	f247 1320 	movw	r3, #28960	; 0x7120
20006b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b62:	687a      	ldr	r2, [r7, #4]
20006b64:	601a      	str	r2, [r3, #0]
20006b66:	f247 1324 	movw	r3, #28964	; 0x7124
20006b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006b6e:	687a      	ldr	r2, [r7, #4]
20006b70:	601a      	str	r2, [r3, #0]
20006b72:	f107 070c 	add.w	r7, r7, #12
20006b76:	46bd      	mov	sp, r7
20006b78:	bc80      	pop	{r7}
20006b7a:	4770      	bx	lr

20006b7c <get_silicon_revision>:
20006b7c:	b480      	push	{r7}
20006b7e:	b083      	sub	sp, #12
20006b80:	af00      	add	r7, sp, #0
20006b82:	f248 0300 	movw	r3, #32768	; 0x8000
20006b86:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006b8a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
20006b8e:	607b      	str	r3, [r7, #4]
20006b90:	687a      	ldr	r2, [r7, #4]
20006b92:	f64f 0302 	movw	r3, #63490	; 0xf802
20006b96:	429a      	cmp	r2, r3
20006b98:	d006      	beq.n	20006ba8 <get_silicon_revision+0x2c>
20006b9a:	f64f 0302 	movw	r3, #63490	; 0xf802
20006b9e:	f2c0 0301 	movt	r3, #1
20006ba2:	429a      	cmp	r2, r3
20006ba4:	d004      	beq.n	20006bb0 <get_silicon_revision+0x34>
20006ba6:	e007      	b.n	20006bb8 <get_silicon_revision+0x3c>
20006ba8:	f04f 0301 	mov.w	r3, #1
20006bac:	603b      	str	r3, [r7, #0]
20006bae:	e006      	b.n	20006bbe <get_silicon_revision+0x42>
20006bb0:	f04f 0302 	mov.w	r3, #2
20006bb4:	603b      	str	r3, [r7, #0]
20006bb6:	e002      	b.n	20006bbe <get_silicon_revision+0x42>
20006bb8:	f04f 0300 	mov.w	r3, #0
20006bbc:	603b      	str	r3, [r7, #0]
20006bbe:	683b      	ldr	r3, [r7, #0]
20006bc0:	4618      	mov	r0, r3
20006bc2:	f107 070c 	add.w	r7, r7, #12
20006bc6:	46bd      	mov	sp, r7
20006bc8:	bc80      	pop	{r7}
20006bca:	4770      	bx	lr

20006bcc <silicon_workarounds>:
20006bcc:	b580      	push	{r7, lr}
20006bce:	b082      	sub	sp, #8
20006bd0:	af00      	add	r7, sp, #0
20006bd2:	f7ff ffd3 	bl	20006b7c <get_silicon_revision>
20006bd6:	4603      	mov	r3, r0
20006bd8:	607b      	str	r3, [r7, #4]
20006bda:	687b      	ldr	r3, [r7, #4]
20006bdc:	2b01      	cmp	r3, #1
20006bde:	d101      	bne.n	20006be4 <silicon_workarounds+0x18>
20006be0:	f000 f804 	bl	20006bec <m2s050_rev_a_workarounds>
20006be4:	f107 0708 	add.w	r7, r7, #8
20006be8:	46bd      	mov	sp, r7
20006bea:	bd80      	pop	{r7, pc}

20006bec <m2s050_rev_a_workarounds>:
20006bec:	b480      	push	{r7}
20006bee:	af00      	add	r7, sp, #0
20006bf0:	f248 0300 	movw	r3, #32768	; 0x8000
20006bf4:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006bf8:	f248 0200 	movw	r2, #32768	; 0x8000
20006bfc:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006c00:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20006c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20006c08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
20006c0c:	f248 0300 	movw	r3, #32768	; 0x8000
20006c10:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006c14:	f248 0200 	movw	r2, #32768	; 0x8000
20006c18:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006c1c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20006c20:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
20006c24:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
20006c28:	46bd      	mov	sp, r7
20006c2a:	bc80      	pop	{r7}
20006c2c:	4770      	bx	lr
20006c2e:	bf00      	nop

20006c30 <complete_clock_config>:
20006c30:	b480      	push	{r7}
20006c32:	b083      	sub	sp, #12
20006c34:	af00      	add	r7, sp, #0
20006c36:	f248 0300 	movw	r3, #32768	; 0x8000
20006c3a:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006c3e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20006c42:	f003 0301 	and.w	r3, r3, #1
20006c46:	607b      	str	r3, [r7, #4]
20006c48:	687b      	ldr	r3, [r7, #4]
20006c4a:	2b00      	cmp	r3, #0
20006c4c:	d0f3      	beq.n	20006c36 <complete_clock_config+0x6>
20006c4e:	f248 0300 	movw	r3, #32768	; 0x8000
20006c52:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006c56:	f248 0200 	movw	r2, #32768	; 0x8000
20006c5a:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006c5e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
20006c62:	f022 0201 	bic.w	r2, r2, #1
20006c66:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
20006c6a:	f248 0300 	movw	r3, #32768	; 0x8000
20006c6e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006c72:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20006c76:	f003 0302 	and.w	r3, r3, #2
20006c7a:	607b      	str	r3, [r7, #4]
20006c7c:	687b      	ldr	r3, [r7, #4]
20006c7e:	2b00      	cmp	r3, #0
20006c80:	d0f3      	beq.n	20006c6a <complete_clock_config+0x3a>
20006c82:	f248 0300 	movw	r3, #32768	; 0x8000
20006c86:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006c8a:	f248 0200 	movw	r2, #32768	; 0x8000
20006c8e:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006c92:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20006c96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20006c9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
20006c9e:	f248 0300 	movw	r3, #32768	; 0x8000
20006ca2:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006ca6:	f248 0200 	movw	r2, #32768	; 0x8000
20006caa:	f2c4 0203 	movt	r2, #16387	; 0x4003
20006cae:	6c92      	ldr	r2, [r2, #72]	; 0x48
20006cb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20006cb4:	649a      	str	r2, [r3, #72]	; 0x48
20006cb6:	f107 070c 	add.w	r7, r7, #12
20006cba:	46bd      	mov	sp, r7
20006cbc:	bc80      	pop	{r7}
20006cbe:	4770      	bx	lr

20006cc0 <HAL_disable_interrupts>:
20006cc0:	f3ef 8010 	mrs	r0, PRIMASK
20006cc4:	b672      	cpsid	i
20006cc6:	4770      	bx	lr

20006cc8 <HAL_restore_interrupts>:
20006cc8:	f380 8810 	msr	PRIMASK, r0
20006ccc:	4770      	bx	lr

20006cce <HW_set_32bit_reg>:
20006cce:	6001      	str	r1, [r0, #0]
20006cd0:	4770      	bx	lr

20006cd2 <HW_get_32bit_reg>:
20006cd2:	6800      	ldr	r0, [r0, #0]
20006cd4:	4770      	bx	lr

20006cd6 <HW_set_32bit_reg_field>:
20006cd6:	b50e      	push	{r1, r2, r3, lr}
20006cd8:	fa03 f301 	lsl.w	r3, r3, r1
20006cdc:	ea03 0302 	and.w	r3, r3, r2
20006ce0:	6801      	ldr	r1, [r0, #0]
20006ce2:	ea6f 0202 	mvn.w	r2, r2
20006ce6:	ea01 0102 	and.w	r1, r1, r2
20006cea:	ea41 0103 	orr.w	r1, r1, r3
20006cee:	6001      	str	r1, [r0, #0]
20006cf0:	bd0e      	pop	{r1, r2, r3, pc}

20006cf2 <HW_get_32bit_reg_field>:
20006cf2:	6800      	ldr	r0, [r0, #0]
20006cf4:	ea00 0002 	and.w	r0, r0, r2
20006cf8:	fa20 f001 	lsr.w	r0, r0, r1
20006cfc:	4770      	bx	lr

20006cfe <HW_set_16bit_reg>:
20006cfe:	8001      	strh	r1, [r0, #0]
20006d00:	4770      	bx	lr

20006d02 <HW_get_16bit_reg>:
20006d02:	8800      	ldrh	r0, [r0, #0]
20006d04:	4770      	bx	lr

20006d06 <HW_set_16bit_reg_field>:
20006d06:	b50e      	push	{r1, r2, r3, lr}
20006d08:	fa03 f301 	lsl.w	r3, r3, r1
20006d0c:	ea03 0302 	and.w	r3, r3, r2
20006d10:	8801      	ldrh	r1, [r0, #0]
20006d12:	ea6f 0202 	mvn.w	r2, r2
20006d16:	ea01 0102 	and.w	r1, r1, r2
20006d1a:	ea41 0103 	orr.w	r1, r1, r3
20006d1e:	8001      	strh	r1, [r0, #0]
20006d20:	bd0e      	pop	{r1, r2, r3, pc}

20006d22 <HW_get_16bit_reg_field>:
20006d22:	8800      	ldrh	r0, [r0, #0]
20006d24:	ea00 0002 	and.w	r0, r0, r2
20006d28:	fa20 f001 	lsr.w	r0, r0, r1
20006d2c:	4770      	bx	lr

20006d2e <HW_set_8bit_reg>:
20006d2e:	7001      	strb	r1, [r0, #0]
20006d30:	4770      	bx	lr

20006d32 <HW_get_8bit_reg>:
20006d32:	7800      	ldrb	r0, [r0, #0]
20006d34:	4770      	bx	lr

20006d36 <HW_set_8bit_reg_field>:
20006d36:	b50e      	push	{r1, r2, r3, lr}
20006d38:	fa03 f301 	lsl.w	r3, r3, r1
20006d3c:	ea03 0302 	and.w	r3, r3, r2
20006d40:	7801      	ldrb	r1, [r0, #0]
20006d42:	ea6f 0202 	mvn.w	r2, r2
20006d46:	ea01 0102 	and.w	r1, r1, r2
20006d4a:	ea41 0103 	orr.w	r1, r1, r3
20006d4e:	7001      	strb	r1, [r0, #0]
20006d50:	bd0e      	pop	{r1, r2, r3, pc}

20006d52 <HW_get_8bit_reg_field>:
20006d52:	7800      	ldrb	r0, [r0, #0]
20006d54:	ea00 0002 	and.w	r0, r0, r2
20006d58:	fa20 f001 	lsr.w	r0, r0, r1
20006d5c:	4770      	bx	lr
	...

20006d60 <__libc_init_array>:
20006d60:	b570      	push	{r4, r5, r6, lr}
20006d62:	f247 06c0 	movw	r6, #28864	; 0x70c0
20006d66:	f247 05c0 	movw	r5, #28864	; 0x70c0
20006d6a:	f2c2 0600 	movt	r6, #8192	; 0x2000
20006d6e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20006d72:	1b76      	subs	r6, r6, r5
20006d74:	10b6      	asrs	r6, r6, #2
20006d76:	d006      	beq.n	20006d86 <__libc_init_array+0x26>
20006d78:	2400      	movs	r4, #0
20006d7a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20006d7e:	3401      	adds	r4, #1
20006d80:	4798      	blx	r3
20006d82:	42a6      	cmp	r6, r4
20006d84:	d8f9      	bhi.n	20006d7a <__libc_init_array+0x1a>
20006d86:	f247 05c0 	movw	r5, #28864	; 0x70c0
20006d8a:	f247 06c4 	movw	r6, #28868	; 0x70c4
20006d8e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20006d92:	f2c2 0600 	movt	r6, #8192	; 0x2000
20006d96:	1b76      	subs	r6, r6, r5
20006d98:	f000 f986 	bl	200070a8 <_init>
20006d9c:	10b6      	asrs	r6, r6, #2
20006d9e:	d006      	beq.n	20006dae <__libc_init_array+0x4e>
20006da0:	2400      	movs	r4, #0
20006da2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20006da6:	3401      	adds	r4, #1
20006da8:	4798      	blx	r3
20006daa:	42a6      	cmp	r6, r4
20006dac:	d8f9      	bhi.n	20006da2 <__libc_init_array+0x42>
20006dae:	bd70      	pop	{r4, r5, r6, pc}

20006db0 <memcpy>:
20006db0:	2a03      	cmp	r2, #3
20006db2:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
20006db6:	d80b      	bhi.n	20006dd0 <memcpy+0x20>
20006db8:	b13a      	cbz	r2, 20006dca <memcpy+0x1a>
20006dba:	2300      	movs	r3, #0
20006dbc:	f811 c003 	ldrb.w	ip, [r1, r3]
20006dc0:	f800 c003 	strb.w	ip, [r0, r3]
20006dc4:	3301      	adds	r3, #1
20006dc6:	4293      	cmp	r3, r2
20006dc8:	d1f8      	bne.n	20006dbc <memcpy+0xc>
20006dca:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
20006dce:	4770      	bx	lr
20006dd0:	1882      	adds	r2, r0, r2
20006dd2:	460c      	mov	r4, r1
20006dd4:	4603      	mov	r3, r0
20006dd6:	e003      	b.n	20006de0 <memcpy+0x30>
20006dd8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
20006ddc:	f803 1c01 	strb.w	r1, [r3, #-1]
20006de0:	f003 0603 	and.w	r6, r3, #3
20006de4:	4619      	mov	r1, r3
20006de6:	46a4      	mov	ip, r4
20006de8:	3301      	adds	r3, #1
20006dea:	3401      	adds	r4, #1
20006dec:	2e00      	cmp	r6, #0
20006dee:	d1f3      	bne.n	20006dd8 <memcpy+0x28>
20006df0:	f01c 0403 	ands.w	r4, ip, #3
20006df4:	4663      	mov	r3, ip
20006df6:	bf08      	it	eq
20006df8:	ebc1 0c02 	rsbeq	ip, r1, r2
20006dfc:	d068      	beq.n	20006ed0 <memcpy+0x120>
20006dfe:	4265      	negs	r5, r4
20006e00:	f1c4 0a04 	rsb	sl, r4, #4
20006e04:	eb0c 0705 	add.w	r7, ip, r5
20006e08:	4633      	mov	r3, r6
20006e0a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
20006e0e:	f85c 6005 	ldr.w	r6, [ip, r5]
20006e12:	ea4f 08c4 	mov.w	r8, r4, lsl #3
20006e16:	1a55      	subs	r5, r2, r1
20006e18:	e008      	b.n	20006e2c <memcpy+0x7c>
20006e1a:	f857 4f04 	ldr.w	r4, [r7, #4]!
20006e1e:	4626      	mov	r6, r4
20006e20:	fa04 f40a 	lsl.w	r4, r4, sl
20006e24:	ea49 0404 	orr.w	r4, r9, r4
20006e28:	50cc      	str	r4, [r1, r3]
20006e2a:	3304      	adds	r3, #4
20006e2c:	185c      	adds	r4, r3, r1
20006e2e:	2d03      	cmp	r5, #3
20006e30:	fa26 f908 	lsr.w	r9, r6, r8
20006e34:	f1a5 0504 	sub.w	r5, r5, #4
20006e38:	eb0c 0603 	add.w	r6, ip, r3
20006e3c:	dced      	bgt.n	20006e1a <memcpy+0x6a>
20006e3e:	2300      	movs	r3, #0
20006e40:	e002      	b.n	20006e48 <memcpy+0x98>
20006e42:	5cf1      	ldrb	r1, [r6, r3]
20006e44:	54e1      	strb	r1, [r4, r3]
20006e46:	3301      	adds	r3, #1
20006e48:	1919      	adds	r1, r3, r4
20006e4a:	4291      	cmp	r1, r2
20006e4c:	d3f9      	bcc.n	20006e42 <memcpy+0x92>
20006e4e:	e7bc      	b.n	20006dca <memcpy+0x1a>
20006e50:	f853 4c40 	ldr.w	r4, [r3, #-64]
20006e54:	f841 4c40 	str.w	r4, [r1, #-64]
20006e58:	f853 4c3c 	ldr.w	r4, [r3, #-60]
20006e5c:	f841 4c3c 	str.w	r4, [r1, #-60]
20006e60:	f853 4c38 	ldr.w	r4, [r3, #-56]
20006e64:	f841 4c38 	str.w	r4, [r1, #-56]
20006e68:	f853 4c34 	ldr.w	r4, [r3, #-52]
20006e6c:	f841 4c34 	str.w	r4, [r1, #-52]
20006e70:	f853 4c30 	ldr.w	r4, [r3, #-48]
20006e74:	f841 4c30 	str.w	r4, [r1, #-48]
20006e78:	f853 4c2c 	ldr.w	r4, [r3, #-44]
20006e7c:	f841 4c2c 	str.w	r4, [r1, #-44]
20006e80:	f853 4c28 	ldr.w	r4, [r3, #-40]
20006e84:	f841 4c28 	str.w	r4, [r1, #-40]
20006e88:	f853 4c24 	ldr.w	r4, [r3, #-36]
20006e8c:	f841 4c24 	str.w	r4, [r1, #-36]
20006e90:	f853 4c20 	ldr.w	r4, [r3, #-32]
20006e94:	f841 4c20 	str.w	r4, [r1, #-32]
20006e98:	f853 4c1c 	ldr.w	r4, [r3, #-28]
20006e9c:	f841 4c1c 	str.w	r4, [r1, #-28]
20006ea0:	f853 4c18 	ldr.w	r4, [r3, #-24]
20006ea4:	f841 4c18 	str.w	r4, [r1, #-24]
20006ea8:	f853 4c14 	ldr.w	r4, [r3, #-20]
20006eac:	f841 4c14 	str.w	r4, [r1, #-20]
20006eb0:	f853 4c10 	ldr.w	r4, [r3, #-16]
20006eb4:	f841 4c10 	str.w	r4, [r1, #-16]
20006eb8:	f853 4c0c 	ldr.w	r4, [r3, #-12]
20006ebc:	f841 4c0c 	str.w	r4, [r1, #-12]
20006ec0:	f853 4c08 	ldr.w	r4, [r3, #-8]
20006ec4:	f841 4c08 	str.w	r4, [r1, #-8]
20006ec8:	f853 4c04 	ldr.w	r4, [r3, #-4]
20006ecc:	f841 4c04 	str.w	r4, [r1, #-4]
20006ed0:	461c      	mov	r4, r3
20006ed2:	460d      	mov	r5, r1
20006ed4:	3340      	adds	r3, #64	; 0x40
20006ed6:	3140      	adds	r1, #64	; 0x40
20006ed8:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
20006edc:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
20006ee0:	dcb6      	bgt.n	20006e50 <memcpy+0xa0>
20006ee2:	4621      	mov	r1, r4
20006ee4:	462b      	mov	r3, r5
20006ee6:	1b54      	subs	r4, r2, r5
20006ee8:	e00f      	b.n	20006f0a <memcpy+0x15a>
20006eea:	f851 5c10 	ldr.w	r5, [r1, #-16]
20006eee:	f843 5c10 	str.w	r5, [r3, #-16]
20006ef2:	f851 5c0c 	ldr.w	r5, [r1, #-12]
20006ef6:	f843 5c0c 	str.w	r5, [r3, #-12]
20006efa:	f851 5c08 	ldr.w	r5, [r1, #-8]
20006efe:	f843 5c08 	str.w	r5, [r3, #-8]
20006f02:	f851 5c04 	ldr.w	r5, [r1, #-4]
20006f06:	f843 5c04 	str.w	r5, [r3, #-4]
20006f0a:	2c0f      	cmp	r4, #15
20006f0c:	460d      	mov	r5, r1
20006f0e:	469c      	mov	ip, r3
20006f10:	f101 0110 	add.w	r1, r1, #16
20006f14:	f103 0310 	add.w	r3, r3, #16
20006f18:	f1a4 0410 	sub.w	r4, r4, #16
20006f1c:	dce5      	bgt.n	20006eea <memcpy+0x13a>
20006f1e:	ebcc 0102 	rsb	r1, ip, r2
20006f22:	2300      	movs	r3, #0
20006f24:	e003      	b.n	20006f2e <memcpy+0x17e>
20006f26:	58ec      	ldr	r4, [r5, r3]
20006f28:	f84c 4003 	str.w	r4, [ip, r3]
20006f2c:	3304      	adds	r3, #4
20006f2e:	195e      	adds	r6, r3, r5
20006f30:	2903      	cmp	r1, #3
20006f32:	eb03 040c 	add.w	r4, r3, ip
20006f36:	f1a1 0104 	sub.w	r1, r1, #4
20006f3a:	dcf4      	bgt.n	20006f26 <memcpy+0x176>
20006f3c:	e77f      	b.n	20006e3e <memcpy+0x8e>
20006f3e:	bf00      	nop

20006f40 <memset>:
20006f40:	2a03      	cmp	r2, #3
20006f42:	b2c9      	uxtb	r1, r1
20006f44:	b430      	push	{r4, r5}
20006f46:	d807      	bhi.n	20006f58 <memset+0x18>
20006f48:	b122      	cbz	r2, 20006f54 <memset+0x14>
20006f4a:	2300      	movs	r3, #0
20006f4c:	54c1      	strb	r1, [r0, r3]
20006f4e:	3301      	adds	r3, #1
20006f50:	4293      	cmp	r3, r2
20006f52:	d1fb      	bne.n	20006f4c <memset+0xc>
20006f54:	bc30      	pop	{r4, r5}
20006f56:	4770      	bx	lr
20006f58:	eb00 0c02 	add.w	ip, r0, r2
20006f5c:	4603      	mov	r3, r0
20006f5e:	e001      	b.n	20006f64 <memset+0x24>
20006f60:	f803 1c01 	strb.w	r1, [r3, #-1]
20006f64:	f003 0403 	and.w	r4, r3, #3
20006f68:	461a      	mov	r2, r3
20006f6a:	3301      	adds	r3, #1
20006f6c:	2c00      	cmp	r4, #0
20006f6e:	d1f7      	bne.n	20006f60 <memset+0x20>
20006f70:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20006f74:	ebc2 040c 	rsb	r4, r2, ip
20006f78:	fb03 f301 	mul.w	r3, r3, r1
20006f7c:	e01f      	b.n	20006fbe <memset+0x7e>
20006f7e:	f842 3c40 	str.w	r3, [r2, #-64]
20006f82:	f842 3c3c 	str.w	r3, [r2, #-60]
20006f86:	f842 3c38 	str.w	r3, [r2, #-56]
20006f8a:	f842 3c34 	str.w	r3, [r2, #-52]
20006f8e:	f842 3c30 	str.w	r3, [r2, #-48]
20006f92:	f842 3c2c 	str.w	r3, [r2, #-44]
20006f96:	f842 3c28 	str.w	r3, [r2, #-40]
20006f9a:	f842 3c24 	str.w	r3, [r2, #-36]
20006f9e:	f842 3c20 	str.w	r3, [r2, #-32]
20006fa2:	f842 3c1c 	str.w	r3, [r2, #-28]
20006fa6:	f842 3c18 	str.w	r3, [r2, #-24]
20006faa:	f842 3c14 	str.w	r3, [r2, #-20]
20006fae:	f842 3c10 	str.w	r3, [r2, #-16]
20006fb2:	f842 3c0c 	str.w	r3, [r2, #-12]
20006fb6:	f842 3c08 	str.w	r3, [r2, #-8]
20006fba:	f842 3c04 	str.w	r3, [r2, #-4]
20006fbe:	4615      	mov	r5, r2
20006fc0:	3240      	adds	r2, #64	; 0x40
20006fc2:	2c3f      	cmp	r4, #63	; 0x3f
20006fc4:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20006fc8:	dcd9      	bgt.n	20006f7e <memset+0x3e>
20006fca:	462a      	mov	r2, r5
20006fcc:	ebc5 040c 	rsb	r4, r5, ip
20006fd0:	e007      	b.n	20006fe2 <memset+0xa2>
20006fd2:	f842 3c10 	str.w	r3, [r2, #-16]
20006fd6:	f842 3c0c 	str.w	r3, [r2, #-12]
20006fda:	f842 3c08 	str.w	r3, [r2, #-8]
20006fde:	f842 3c04 	str.w	r3, [r2, #-4]
20006fe2:	4615      	mov	r5, r2
20006fe4:	3210      	adds	r2, #16
20006fe6:	2c0f      	cmp	r4, #15
20006fe8:	f1a4 0410 	sub.w	r4, r4, #16
20006fec:	dcf1      	bgt.n	20006fd2 <memset+0x92>
20006fee:	462a      	mov	r2, r5
20006ff0:	ebc5 050c 	rsb	r5, r5, ip
20006ff4:	e001      	b.n	20006ffa <memset+0xba>
20006ff6:	f842 3c04 	str.w	r3, [r2, #-4]
20006ffa:	4614      	mov	r4, r2
20006ffc:	3204      	adds	r2, #4
20006ffe:	2d03      	cmp	r5, #3
20007000:	f1a5 0504 	sub.w	r5, r5, #4
20007004:	dcf7      	bgt.n	20006ff6 <memset+0xb6>
20007006:	e001      	b.n	2000700c <memset+0xcc>
20007008:	f804 1b01 	strb.w	r1, [r4], #1
2000700c:	4564      	cmp	r4, ip
2000700e:	d3fb      	bcc.n	20007008 <memset+0xc8>
20007010:	e7a0      	b.n	20006f54 <memset+0x14>
20007012:	bf00      	nop

20007014 <C.48.4660>:
20007014:	6a10 0000                                   .j..

20007018 <C.40.4595>:
20007018:	6020 0000 4449 454c 0000 0000 2509 0963      `..IDLE.....%c.
20007028:	7525 2509 0975 7525 0a0d 0000 2509 0975     %u.%u.%u.....%u.
20007038:	2509 2575 0d25 000a 2509 0975 3c09 2531     .%u%%....%u..<1%
20007048:	0d25 000a 6d54 2072 7653 0063               %...Tmr Svc.

20007054 <xHeapStructSize>:
20007054:	0008 0000                                   ....

20007058 <pcInterruptPriorityRegisters>:
20007058:	e3f0 e000 6b48 545f 6d69 7265 0000 0000     ....Hk_Timer....
20007068:	4c50 5f44 6954 656d 0072 0000 4c54 5f4d     PLD_Timer...TLM_
20007078:	6154 6b73 545f 6d69 7265 0000 6553 646e     Task_Timer..Send
20007088:	7265 545f 6d69 7265 0000 0000 6175 7472     er_Timer....uart
20007098:	695f 7172 0000 0000                         _irq....

200070a0 <C.18.3459>:
200070a0:	0100 0100 0202 0303                         ........

200070a8 <_init>:
200070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200070aa:	bf00      	nop
200070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
200070ae:	bc08      	pop	{r3}
200070b0:	469e      	mov	lr, r3
200070b2:	4770      	bx	lr

200070b4 <_fini>:
200070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200070b6:	bf00      	nop
200070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200070ba:	bc08      	pop	{r3}
200070bc:	469e      	mov	lr, r3
200070be:	4770      	bx	lr

200070c0 <__frame_dummy_init_array_entry>:
200070c0:	0305 2000                                   ... 

200070c4 <__do_global_dtors_aux_fini_array_entry>:
200070c4:	02f1 2000                                   ... 
