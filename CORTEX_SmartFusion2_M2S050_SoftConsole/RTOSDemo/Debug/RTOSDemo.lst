
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007930  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  20007930  20007930  0000f930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006b50  20007990  20007990  0000f990  2**2
                  ALLOC
  3 .stack        00000400  2000e4e0  2000e4e0  0000f990  2**0
                  ALLOC
  4 .comment      0000045e  00000000  00000000  0000f990  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf8  00000000  00000000  0000fdee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001ea5  00000000  00000000  000109e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f07c  00000000  00000000  0001288b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002533  00000000  00000000  00021907  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001210f  00000000  00000000  00023e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000027b0  00000000  00000000  00035f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004bfd  00000000  00000000  000386fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041c6  00000000  00000000  0003d2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000cd66a  00000000  00000000  000414bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0010eb29  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000b70  00000000  00000000  0010eb4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	200044c1 	.word	0x200044c1
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	200046f1 	.word	0x200046f1
2000003c:	20004741 	.word	0x20004741
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20000213 	.word	0x20000213
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20000219 	.word	0x20000219
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	200059c5 	.word	0x200059c5
2000006c:	200059e9 	.word	0x200059e9
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	20005515 	.word	0x20005515
200000cc:	20005529 	.word	0x20005529
200000d0:	2000553d 	.word	0x2000553d
200000d4:	20005551 	.word	0x20005551
200000d8:	20005565 	.word	0x20005565
200000dc:	20005579 	.word	0x20005579
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>

20000212 <I2C0_IRQHandler>:
20000212:	e7fe      	b.n	20000212 <I2C0_IRQHandler>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>

20000218 <I2C1_IRQHandler>:
20000218:	e7fe      	b.n	20000218 <I2C1_IRQHandler>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	200071c5 	.word	0x200071c5
200002b4:	00000000 	.word	0x00000000
200002b8:	20000000 	.word	0x20000000
200002bc:	20000000 	.word	0x20000000
200002c0:	20007930 	.word	0x20007930
200002c4:	20007930 	.word	0x20007930
200002c8:	20007930 	.word	0x20007930
200002cc:	20007990 	.word	0x20007990
200002d0:	00000000 	.word	0x00000000
200002d4:	20007990 	.word	0x20007990
200002d8:	2000e4e0 	.word	0x2000e4e0
200002dc:	200075d1 	.word	0x200075d1
200002e0:	2000040d 	.word	0x2000040d
	...

200002f0 <__do_global_dtors_aux>:
200002f0:	f647 1390 	movw	r3, #31120	; 0x7990
200002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	b90a      	cbnz	r2, 20000300 <__do_global_dtors_aux+0x10>
200002fc:	2001      	movs	r0, #1
200002fe:	7018      	strb	r0, [r3, #0]
20000300:	4770      	bx	lr
20000302:	bf00      	nop

20000304 <frame_dummy>:
20000304:	f647 1030 	movw	r0, #31024	; 0x7930
20000308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000030c:	b508      	push	{r3, lr}
2000030e:	6803      	ldr	r3, [r0, #0]
20000310:	b12b      	cbz	r3, 2000031e <frame_dummy+0x1a>
20000312:	f240 0300 	movw	r3, #0
20000316:	f2c0 0300 	movt	r3, #0
2000031a:	b103      	cbz	r3, 2000031e <frame_dummy+0x1a>
2000031c:	4798      	blx	r3
2000031e:	bd08      	pop	{r3, pc}

20000320 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
20000320:	b480      	push	{r7}
20000322:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
20000324:	f64e 53fc 	movw	r3, #60924	; 0xedfc
20000328:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000032c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
20000330:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000334:	6812      	ldr	r2, [r2, #0]
20000336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2000033a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
2000033c:	f241 0304 	movw	r3, #4100	; 0x1004
20000340:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000344:	f04f 0200 	mov.w	r2, #0
20000348:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
2000034a:	f241 0300 	movw	r3, #4096	; 0x1000
2000034e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000352:	f241 0200 	movw	r2, #4096	; 0x1000
20000356:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000035a:	6812      	ldr	r2, [r2, #0]
2000035c:	f042 0201 	orr.w	r2, r2, #1
20000360:	601a      	str	r2, [r3, #0]
}
20000362:	46bd      	mov	sp, r7
20000364:	bc80      	pop	{r7}
20000366:	4770      	bx	lr

20000368 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
20000368:	b480      	push	{r7}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
2000036e:	f241 0304 	movw	r3, #4100	; 0x1004
20000372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
2000037a:	f647 1394 	movw	r3, #31124	; 0x7994
2000037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	687a      	ldr	r2, [r7, #4]
20000386:	429a      	cmp	r2, r3
20000388:	d20b      	bcs.n	200003a2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
2000038a:	f647 1398 	movw	r3, #31128	; 0x7998
2000038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	f103 0201 	add.w	r2, r3, #1
20000398:	f647 1398 	movw	r3, #31128	; 0x7998
2000039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003a0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
200003a2:	f647 1394 	movw	r3, #31124	; 0x7994
200003a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003aa:	687a      	ldr	r2, [r7, #4]
200003ac:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
200003ae:	f647 1374 	movw	r3, #31092	; 0x7974
200003b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003b6:	681a      	ldr	r2, [r3, #0]
200003b8:	f641 537f 	movw	r3, #7551	; 0x1d7f
200003bc:	f2c0 432c 	movt	r3, #1068	; 0x42c
200003c0:	429a      	cmp	r2, r3
200003c2:	d80e      	bhi.n	200003e2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	ea4f 3353 	mov.w	r3, r3, lsr #13
200003ca:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
200003cc:	f647 1398 	movw	r3, #31128	; 0x7998
200003d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
200003da:	687a      	ldr	r2, [r7, #4]
200003dc:	4413      	add	r3, r2
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e00d      	b.n	200003fe <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	ea4f 3393 	mov.w	r3, r3, lsr #14
200003e8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
200003ea:	f647 1398 	movw	r3, #31128	; 0x7998
200003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	ea4f 4383 	mov.w	r3, r3, lsl #18
200003f8:	687a      	ldr	r2, [r7, #4]
200003fa:	4413      	add	r3, r2
200003fc:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
200003fe:	687b      	ldr	r3, [r7, #4]
}
20000400:	4618      	mov	r0, r3
20000402:	f107 070c 	add.w	r7, r7, #12
20000406:	46bd      	mov	sp, r7
20000408:	bc80      	pop	{r7}
2000040a:	4770      	bx	lr

2000040c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
		//main_blinky();


//		demo();

		demo_tasks();
20000410:	f004 feca 	bl	200051a8 <demo_tasks>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
20000414:	f04f 0300 	mov.w	r3, #0
}
20000418:	4618      	mov	r0, r3
2000041a:	bd80      	pop	{r7, pc}

2000041c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
2000041c:	b480      	push	{r7}
2000041e:	b083      	sub	sp, #12
20000420:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000426:	f383 8811 	msr	BASEPRI, r3
2000042a:	f3bf 8f6f 	isb	sy
2000042e:	f3bf 8f4f 	dsb	sy
20000432:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000434:	e7fe      	b.n	20000434 <vApplicationMallocFailedHook+0x18>
20000436:	bf00      	nop

20000438 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
20000438:	b480      	push	{r7}
2000043a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
2000043c:	46bd      	mov	sp, r7
2000043e:	bc80      	pop	{r7}
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
20000444:	b480      	push	{r7}
20000446:	b085      	sub	sp, #20
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
2000044c:	6039      	str	r1, [r7, #0]
2000044e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000452:	f383 8811 	msr	BASEPRI, r3
20000456:	f3bf 8f6f 	isb	sy
2000045a:	f3bf 8f4f 	dsb	sy
2000045e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000460:	e7fe      	b.n	20000460 <vApplicationStackOverflowHook+0x1c>
20000462:	bf00      	nop

20000464 <set_pktRate>:
#include "stream.h"
//#include "Demo_Tasks/demo_tasks.h"



void set_pktRate(pkt_name_t pn, uint8_t sr){
20000464:	b480      	push	{r7}
20000466:	b083      	sub	sp, #12
20000468:	af00      	add	r7, sp, #0
2000046a:	4602      	mov	r2, r0
2000046c:	460b      	mov	r3, r1
2000046e:	71fa      	strb	r2, [r7, #7]
20000470:	71bb      	strb	r3, [r7, #6]

	pkt_stream[pn].rate = sr * 1000;
20000472:	79f9      	ldrb	r1, [r7, #7]
20000474:	79bb      	ldrb	r3, [r7, #6]
20000476:	461a      	mov	r2, r3
20000478:	ea4f 1242 	mov.w	r2, r2, lsl #5
2000047c:	ebc3 0202 	rsb	r2, r3, r2
20000480:	ea4f 0282 	mov.w	r2, r2, lsl #2
20000484:	4413      	add	r3, r2
20000486:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000048a:	b298      	uxth	r0, r3
2000048c:	f24e 1294 	movw	r2, #57748	; 0xe194
20000490:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000494:	460b      	mov	r3, r1
20000496:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000049a:	440b      	add	r3, r1
2000049c:	ea4f 0343 	mov.w	r3, r3, lsl #1
200004a0:	4413      	add	r3, r2
200004a2:	f103 0310 	add.w	r3, r3, #16
200004a6:	4602      	mov	r2, r0
200004a8:	801a      	strh	r2, [r3, #0]

}
200004aa:	f107 070c 	add.w	r7, r7, #12
200004ae:	46bd      	mov	sp, r7
200004b0:	bc80      	pop	{r7}
200004b2:	4770      	bx	lr

200004b4 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
200004b4:	b580      	push	{r7, lr}
200004b6:	b092      	sub	sp, #72	; 0x48
200004b8:	af04      	add	r7, sp, #16
200004ba:	60f8      	str	r0, [r7, #12]
200004bc:	60b9      	str	r1, [r7, #8]
200004be:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
200004c0:	f647 0388 	movw	r3, #30856	; 0x7888
200004c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004c8:	881b      	ldrh	r3, [r3, #0]
200004ca:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
200004cc:	f04f 0328 	mov.w	r3, #40	; 0x28
200004d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
200004d4:	f04f 032a 	mov.w	r3, #42	; 0x2a
200004d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
200004dc:	f04f 032c 	mov.w	r3, #44	; 0x2c
200004e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
200004e4:	f04f 0329 	mov.w	r3, #41	; 0x29
200004e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
200004ec:	f04f 032b 	mov.w	r3, #43	; 0x2b
200004f0:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
200004f4:	f04f 032d 	mov.w	r3, #45	; 0x2d
200004f8:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
200004fa:	f04f 0300 	mov.w	r3, #0
200004fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
20000502:	f107 0334 	add.w	r3, r7, #52	; 0x34
20000506:	f04f 0200 	mov.w	r2, #0
2000050a:	9200      	str	r2, [sp, #0]
2000050c:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000510:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000514:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000518:	461a      	mov	r2, r3
2000051a:	f04f 0302 	mov.w	r3, #2
2000051e:	f005 fe89 	bl	20006234 <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
20000522:	f107 0318 	add.w	r3, r7, #24
20000526:	f04f 0200 	mov.w	r2, #0
2000052a:	9200      	str	r2, [sp, #0]
2000052c:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000534:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000538:	461a      	mov	r2, r3
2000053a:	f04f 0301 	mov.w	r3, #1
2000053e:	f005 feeb 	bl	20006318 <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000542:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000546:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054a:	f04f 0100 	mov.w	r1, #0
2000054e:	f005 ffed 	bl	2000652c <I2C_wait_complete>
20000552:	4603      	mov	r3, r0
20000554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000558:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000560:	4413      	add	r3, r2
20000562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
20000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000056a:	f107 0218 	add.w	r2, r7, #24
2000056e:	9200      	str	r2, [sp, #0]
20000570:	f04f 0201 	mov.w	r2, #1
20000574:	9201      	str	r2, [sp, #4]
20000576:	f04f 0200 	mov.w	r2, #0
2000057a:	9202      	str	r2, [sp, #8]
2000057c:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000584:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000588:	461a      	mov	r2, r3
2000058a:	f04f 0301 	mov.w	r3, #1
2000058e:	f005 ff35 	bl	200063fc <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000592:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000596:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059a:	f04f 0100 	mov.w	r1, #0
2000059e:	f005 ffc5 	bl	2000652c <I2C_wait_complete>
200005a2:	4603      	mov	r3, r0
200005a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200005b0:	4413      	add	r3, r2
200005b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
200005b6:	f107 031c 	add.w	r3, r7, #28
200005ba:	f107 0214 	add.w	r2, r7, #20
200005be:	9200      	str	r2, [sp, #0]
200005c0:	f04f 0201 	mov.w	r2, #1
200005c4:	9201      	str	r2, [sp, #4]
200005c6:	f04f 0200 	mov.w	r2, #0
200005ca:	9202      	str	r2, [sp, #8]
200005cc:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
200005d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005d4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200005d8:	461a      	mov	r2, r3
200005da:	f04f 0301 	mov.w	r3, #1
200005de:	f005 ff0d 	bl	200063fc <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200005e2:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
200005e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005ea:	f04f 0100 	mov.w	r1, #0
200005ee:	f005 ff9d 	bl	2000652c <I2C_wait_complete>
200005f2:	4603      	mov	r3, r0
200005f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005f8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000600:	4413      	add	r3, r2
20000602:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000606:	7d3b      	ldrb	r3, [r7, #20]
20000608:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000060c:	b29a      	uxth	r2, r3
2000060e:	7e3b      	ldrb	r3, [r7, #24]
20000610:	ea42 0303 	orr.w	r3, r2, r3
20000614:	b29b      	uxth	r3, r3
20000616:	b29a      	uxth	r2, r3
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	881b      	ldrh	r3, [r3, #0]
20000620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000624:	d906      	bls.n	20000634 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
20000626:	687b      	ldr	r3, [r7, #4]
20000628:	881b      	ldrh	r3, [r3, #0]
2000062a:	ea6f 0303 	mvn.w	r3, r3
2000062e:	b29a      	uxth	r2, r3
20000630:	687b      	ldr	r3, [r7, #4]
20000632:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
20000634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000638:	f107 0218 	add.w	r2, r7, #24
2000063c:	9200      	str	r2, [sp, #0]
2000063e:	f04f 0201 	mov.w	r2, #1
20000642:	9201      	str	r2, [sp, #4]
20000644:	f04f 0200 	mov.w	r2, #0
20000648:	9202      	str	r2, [sp, #8]
2000064a:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
2000064e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000652:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000656:	461a      	mov	r2, r3
20000658:	f04f 0301 	mov.w	r3, #1
2000065c:	f005 fece 	bl	200063fc <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000660:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000664:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000668:	f04f 0100 	mov.w	r1, #0
2000066c:	f005 ff5e 	bl	2000652c <I2C_wait_complete>
20000670:	4603      	mov	r3, r0
20000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000676:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000067a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000067e:	4413      	add	r3, r2
20000680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
20000684:	f107 0320 	add.w	r3, r7, #32
20000688:	f107 0214 	add.w	r2, r7, #20
2000068c:	9200      	str	r2, [sp, #0]
2000068e:	f04f 0201 	mov.w	r2, #1
20000692:	9201      	str	r2, [sp, #4]
20000694:	f04f 0200 	mov.w	r2, #0
20000698:	9202      	str	r2, [sp, #8]
2000069a:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
2000069e:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006a2:	f04f 016a 	mov.w	r1, #106	; 0x6a
200006a6:	461a      	mov	r2, r3
200006a8:	f04f 0301 	mov.w	r3, #1
200006ac:	f005 fea6 	bl	200063fc <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200006b0:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
200006b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006b8:	f04f 0100 	mov.w	r1, #0
200006bc:	f005 ff36 	bl	2000652c <I2C_wait_complete>
200006c0:	4603      	mov	r3, r0
200006c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200006c6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200006ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200006ce:	4413      	add	r3, r2
200006d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200006d4:	7d3b      	ldrb	r3, [r7, #20]
200006d6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200006da:	b29a      	uxth	r2, r3
200006dc:	7e3b      	ldrb	r3, [r7, #24]
200006de:	ea42 0303 	orr.w	r3, r2, r3
200006e2:	b29b      	uxth	r3, r3
200006e4:	b29a      	uxth	r2, r3
200006e6:	68bb      	ldr	r3, [r7, #8]
200006e8:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
200006ea:	68bb      	ldr	r3, [r7, #8]
200006ec:	881b      	ldrh	r3, [r3, #0]
200006ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200006f2:	d906      	bls.n	20000702 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
200006f4:	68bb      	ldr	r3, [r7, #8]
200006f6:	881b      	ldrh	r3, [r3, #0]
200006f8:	ea6f 0303 	mvn.w	r3, r3
200006fc:	b29a      	uxth	r2, r3
200006fe:	68bb      	ldr	r3, [r7, #8]
20000700:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
20000702:	f107 0330 	add.w	r3, r7, #48	; 0x30
20000706:	f107 0218 	add.w	r2, r7, #24
2000070a:	9200      	str	r2, [sp, #0]
2000070c:	f04f 0201 	mov.w	r2, #1
20000710:	9201      	str	r2, [sp, #4]
20000712:	f04f 0200 	mov.w	r2, #0
20000716:	9202      	str	r2, [sp, #8]
20000718:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
2000071c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000720:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000724:	461a      	mov	r2, r3
20000726:	f04f 0301 	mov.w	r3, #1
2000072a:	f005 fe67 	bl	200063fc <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000072e:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000732:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000736:	f04f 0100 	mov.w	r1, #0
2000073a:	f005 fef7 	bl	2000652c <I2C_wait_complete>
2000073e:	4603      	mov	r3, r0
20000740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000744:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000074c:	4413      	add	r3, r2
2000074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
20000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000756:	f107 0214 	add.w	r2, r7, #20
2000075a:	9200      	str	r2, [sp, #0]
2000075c:	f04f 0201 	mov.w	r2, #1
20000760:	9201      	str	r2, [sp, #4]
20000762:	f04f 0200 	mov.w	r2, #0
20000766:	9202      	str	r2, [sp, #8]
20000768:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
2000076c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000770:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000774:	461a      	mov	r2, r3
20000776:	f04f 0301 	mov.w	r3, #1
2000077a:	f005 fe3f 	bl	200063fc <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000077e:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000782:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000786:	f04f 0100 	mov.w	r1, #0
2000078a:	f005 fecf 	bl	2000652c <I2C_wait_complete>
2000078e:	4603      	mov	r3, r0
20000790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000794:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000079c:	4413      	add	r3, r2
2000079e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200007a2:	7d3b      	ldrb	r3, [r7, #20]
200007a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
200007a8:	b29a      	uxth	r2, r3
200007aa:	7e3b      	ldrb	r3, [r7, #24]
200007ac:	ea42 0303 	orr.w	r3, r2, r3
200007b0:	b29b      	uxth	r3, r3
200007b2:	b29a      	uxth	r2, r3
200007b4:	68fb      	ldr	r3, [r7, #12]
200007b6:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
200007b8:	68fb      	ldr	r3, [r7, #12]
200007ba:	881b      	ldrh	r3, [r3, #0]
200007bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200007c0:	d906      	bls.n	200007d0 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
200007c2:	68fb      	ldr	r3, [r7, #12]
200007c4:	881b      	ldrh	r3, [r3, #0]
200007c6:	ea6f 0303 	mvn.w	r3, r3
200007ca:	b29a      	uxth	r2, r3
200007cc:	68fb      	ldr	r3, [r7, #12]
200007ce:	801a      	strh	r2, [r3, #0]
	}

	return status;
200007d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
200007d4:	4618      	mov	r0, r3
200007d6:	f107 0738 	add.w	r7, r7, #56	; 0x38
200007da:	46bd      	mov	sp, r7
200007dc:	bd80      	pop	{r7, pc}
200007de:	bf00      	nop

200007e0 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
200007e0:	b580      	push	{r7, lr}
200007e2:	b092      	sub	sp, #72	; 0x48
200007e4:	af04      	add	r7, sp, #16
200007e6:	60f8      	str	r0, [r7, #12]
200007e8:	60b9      	str	r1, [r7, #8]
200007ea:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
200007ec:	f647 0384 	movw	r3, #30852	; 0x7884
200007f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007f4:	881b      	ldrh	r3, [r3, #0]
200007f6:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
200007f8:	f04f 0318 	mov.w	r3, #24
200007fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
20000800:	f04f 031a 	mov.w	r3, #26
20000804:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
20000808:	f04f 031c 	mov.w	r3, #28
2000080c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
20000810:	f04f 0319 	mov.w	r3, #25
20000814:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
20000818:	f04f 031b 	mov.w	r3, #27
2000081c:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
2000081e:	f04f 031d 	mov.w	r3, #29
20000822:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
20000824:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000828:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
2000082c:	f04f 0300 	mov.w	r3, #0
20000830:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
20000834:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000838:	f107 0330 	add.w	r3, r7, #48	; 0x30
2000083c:	f107 0114 	add.w	r1, r7, #20
20000840:	9100      	str	r1, [sp, #0]
20000842:	f04f 0101 	mov.w	r1, #1
20000846:	9101      	str	r1, [sp, #4]
20000848:	f04f 0100 	mov.w	r1, #0
2000084c:	9102      	str	r1, [sp, #8]
2000084e:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000852:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000856:	4611      	mov	r1, r2
20000858:	461a      	mov	r2, r3
2000085a:	f04f 0302 	mov.w	r3, #2
2000085e:	f005 fdcd 	bl	200063fc <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000862:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000866:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086a:	f04f 0100 	mov.w	r1, #0
2000086e:	f005 fe5d 	bl	2000652c <I2C_wait_complete>
20000872:	4603      	mov	r3, r0
20000874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000878:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000087c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000880:	4413      	add	r3, r2
20000882:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
20000886:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000088e:	f107 0114 	add.w	r1, r7, #20
20000892:	9100      	str	r1, [sp, #0]
20000894:	f04f 0101 	mov.w	r1, #1
20000898:	9101      	str	r1, [sp, #4]
2000089a:	f04f 0100 	mov.w	r1, #0
2000089e:	9102      	str	r1, [sp, #8]
200008a0:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
200008a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008a8:	4611      	mov	r1, r2
200008aa:	461a      	mov	r2, r3
200008ac:	f04f 0301 	mov.w	r3, #1
200008b0:	f005 fda4 	bl	200063fc <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200008b4:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
200008b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008bc:	f04f 0100 	mov.w	r1, #0
200008c0:	f005 fe34 	bl	2000652c <I2C_wait_complete>
200008c4:	4603      	mov	r3, r0
200008c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200008ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200008ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200008d2:	4413      	add	r3, r2
200008d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
200008d8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200008dc:	f107 0318 	add.w	r3, r7, #24
200008e0:	f107 0110 	add.w	r1, r7, #16
200008e4:	9100      	str	r1, [sp, #0]
200008e6:	f04f 0101 	mov.w	r1, #1
200008ea:	9101      	str	r1, [sp, #4]
200008ec:	f04f 0100 	mov.w	r1, #0
200008f0:	9102      	str	r1, [sp, #8]
200008f2:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
200008f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008fa:	4611      	mov	r1, r2
200008fc:	461a      	mov	r2, r3
200008fe:	f04f 0301 	mov.w	r3, #1
20000902:	f005 fd7b 	bl	200063fc <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000906:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
2000090a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000090e:	f04f 0100 	mov.w	r1, #0
20000912:	f005 fe0b 	bl	2000652c <I2C_wait_complete>
20000916:	4603      	mov	r3, r0
20000918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
2000091c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000920:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000924:	4413      	add	r3, r2
20000926:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
2000092a:	7c3b      	ldrb	r3, [r7, #16]
2000092c:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000930:	b29a      	uxth	r2, r3
20000932:	7d3b      	ldrb	r3, [r7, #20]
20000934:	ea42 0303 	orr.w	r3, r2, r3
20000938:	b29b      	uxth	r3, r3
2000093a:	b29a      	uxth	r2, r3
2000093c:	68fb      	ldr	r3, [r7, #12]
2000093e:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
20000940:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000944:	f107 0328 	add.w	r3, r7, #40	; 0x28
20000948:	f107 0114 	add.w	r1, r7, #20
2000094c:	9100      	str	r1, [sp, #0]
2000094e:	f04f 0101 	mov.w	r1, #1
20000952:	9101      	str	r1, [sp, #4]
20000954:	f04f 0100 	mov.w	r1, #0
20000958:	9102      	str	r1, [sp, #8]
2000095a:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
2000095e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000962:	4611      	mov	r1, r2
20000964:	461a      	mov	r2, r3
20000966:	f04f 0301 	mov.w	r3, #1
2000096a:	f005 fd47 	bl	200063fc <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000096e:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000972:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000976:	f04f 0100 	mov.w	r1, #0
2000097a:	f005 fdd7 	bl	2000652c <I2C_wait_complete>
2000097e:	4603      	mov	r3, r0
20000980:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000984:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000098c:	4413      	add	r3, r2
2000098e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
20000992:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000996:	f107 031c 	add.w	r3, r7, #28
2000099a:	f107 0110 	add.w	r1, r7, #16
2000099e:	9100      	str	r1, [sp, #0]
200009a0:	f04f 0101 	mov.w	r1, #1
200009a4:	9101      	str	r1, [sp, #4]
200009a6:	f04f 0100 	mov.w	r1, #0
200009aa:	9102      	str	r1, [sp, #8]
200009ac:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
200009b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009b4:	4611      	mov	r1, r2
200009b6:	461a      	mov	r2, r3
200009b8:	f04f 0301 	mov.w	r3, #1
200009bc:	f005 fd1e 	bl	200063fc <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200009c0:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
200009c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009c8:	f04f 0100 	mov.w	r1, #0
200009cc:	f005 fdae 	bl	2000652c <I2C_wait_complete>
200009d0:	4603      	mov	r3, r0
200009d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200009d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200009da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200009de:	4413      	add	r3, r2
200009e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200009e4:	7c3b      	ldrb	r3, [r7, #16]
200009e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200009ea:	b29a      	uxth	r2, r3
200009ec:	7d3b      	ldrb	r3, [r7, #20]
200009ee:	ea42 0303 	orr.w	r3, r2, r3
200009f2:	b29b      	uxth	r3, r3
200009f4:	b29a      	uxth	r2, r3
200009f6:	68bb      	ldr	r3, [r7, #8]
200009f8:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
200009fa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200009fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000a02:	f107 0114 	add.w	r1, r7, #20
20000a06:	9100      	str	r1, [sp, #0]
20000a08:	f04f 0101 	mov.w	r1, #1
20000a0c:	9101      	str	r1, [sp, #4]
20000a0e:	f04f 0100 	mov.w	r1, #0
20000a12:	9102      	str	r1, [sp, #8]
20000a14:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000a18:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a1c:	4611      	mov	r1, r2
20000a1e:	461a      	mov	r2, r3
20000a20:	f04f 0301 	mov.w	r3, #1
20000a24:	f005 fcea 	bl	200063fc <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a28:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000a2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a30:	f04f 0100 	mov.w	r1, #0
20000a34:	f005 fd7a 	bl	2000652c <I2C_wait_complete>
20000a38:	4603      	mov	r3, r0
20000a3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a3e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a46:	4413      	add	r3, r2
20000a48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
20000a4c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a50:	f107 0320 	add.w	r3, r7, #32
20000a54:	f107 0110 	add.w	r1, r7, #16
20000a58:	9100      	str	r1, [sp, #0]
20000a5a:	f04f 0101 	mov.w	r1, #1
20000a5e:	9101      	str	r1, [sp, #4]
20000a60:	f04f 0100 	mov.w	r1, #0
20000a64:	9102      	str	r1, [sp, #8]
20000a66:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000a6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a6e:	4611      	mov	r1, r2
20000a70:	461a      	mov	r2, r3
20000a72:	f04f 0301 	mov.w	r3, #1
20000a76:	f005 fcc1 	bl	200063fc <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a7a:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000a7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a82:	f04f 0100 	mov.w	r1, #0
20000a86:	f005 fd51 	bl	2000652c <I2C_wait_complete>
20000a8a:	4603      	mov	r3, r0
20000a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a90:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a98:	4413      	add	r3, r2
20000a9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000a9e:	7c3b      	ldrb	r3, [r7, #16]
20000aa0:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000aa4:	b29a      	uxth	r2, r3
20000aa6:	7d3b      	ldrb	r3, [r7, #20]
20000aa8:	ea42 0303 	orr.w	r3, r2, r3
20000aac:	b29b      	uxth	r3, r3
20000aae:	b29a      	uxth	r2, r3
20000ab0:	687b      	ldr	r3, [r7, #4]
20000ab2:	801a      	strh	r2, [r3, #0]

		return status;
20000ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
20000ab8:	4618      	mov	r0, r3
20000aba:	f107 0738 	add.w	r7, r7, #56	; 0x38
20000abe:	46bd      	mov	sp, r7
20000ac0:	bd80      	pop	{r7, pc}
20000ac2:	bf00      	nop

20000ac4 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
20000ac4:	b580      	push	{r7, lr}
20000ac6:	b08a      	sub	sp, #40	; 0x28
20000ac8:	af04      	add	r7, sp, #16
20000aca:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
20000acc:	f04f 0315 	mov.w	r3, #21
20000ad0:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
20000ad2:	f04f 0316 	mov.w	r3, #22
20000ad6:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
20000ad8:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000adc:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
20000ade:	7dba      	ldrb	r2, [r7, #22]
20000ae0:	f107 0314 	add.w	r3, r7, #20
20000ae4:	f107 010c 	add.w	r1, r7, #12
20000ae8:	9100      	str	r1, [sp, #0]
20000aea:	f04f 0101 	mov.w	r1, #1
20000aee:	9101      	str	r1, [sp, #4]
20000af0:	f04f 0100 	mov.w	r1, #0
20000af4:	9102      	str	r1, [sp, #8]
20000af6:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000afa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000afe:	4611      	mov	r1, r2
20000b00:	461a      	mov	r2, r3
20000b02:	f04f 0301 	mov.w	r3, #1
20000b06:	f005 fc79 	bl	200063fc <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000b0a:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000b0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b12:	f04f 0100 	mov.w	r1, #0
20000b16:	f005 fd09 	bl	2000652c <I2C_wait_complete>
20000b1a:	4603      	mov	r3, r0
20000b1c:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
20000b1e:	7dba      	ldrb	r2, [r7, #22]
20000b20:	f107 0310 	add.w	r3, r7, #16
20000b24:	f107 0108 	add.w	r1, r7, #8
20000b28:	9100      	str	r1, [sp, #0]
20000b2a:	f04f 0101 	mov.w	r1, #1
20000b2e:	9101      	str	r1, [sp, #4]
20000b30:	f04f 0100 	mov.w	r1, #0
20000b34:	9102      	str	r1, [sp, #8]
20000b36:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000b3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b3e:	4611      	mov	r1, r2
20000b40:	461a      	mov	r2, r3
20000b42:	f04f 0301 	mov.w	r3, #1
20000b46:	f005 fc59 	bl	200063fc <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000b4a:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000b4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b52:	f04f 0100 	mov.w	r1, #0
20000b56:	f005 fce9 	bl	2000652c <I2C_wait_complete>
20000b5a:	4603      	mov	r3, r0
20000b5c:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
20000b5e:	7b3b      	ldrb	r3, [r7, #12]
20000b60:	461a      	mov	r2, r3
20000b62:	7a3b      	ldrb	r3, [r7, #8]
20000b64:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b68:	b29b      	uxth	r3, r3
20000b6a:	ea42 0303 	orr.w	r3, r2, r3
20000b6e:	b29b      	uxth	r3, r3
20000b70:	b29a      	uxth	r2, r3
20000b72:	687b      	ldr	r3, [r7, #4]
20000b74:	801a      	strh	r2, [r3, #0]

		return 0;
20000b76:	f04f 0300 	mov.w	r3, #0

}
20000b7a:	4618      	mov	r0, r3
20000b7c:	f107 0718 	add.w	r7, r7, #24
20000b80:	46bd      	mov	sp, r7
20000b82:	bd80      	pop	{r7, pc}

20000b84 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
20000b84:	b580      	push	{r7, lr}
20000b86:	b086      	sub	sp, #24
20000b88:	af02      	add	r7, sp, #8
20000b8a:	60b9      	str	r1, [r7, #8]
20000b8c:	4613      	mov	r3, r2
20000b8e:	4602      	mov	r2, r0
20000b90:	73fa      	strb	r2, [r7, #15]
20000b92:	71fb      	strb	r3, [r7, #7]
     count = 0;
20000b94:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b9c:	f04f 0200 	mov.w	r2, #0
20000ba0:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000ba2:	e032      	b.n	20000c0a <vc_write+0x86>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
20000ba4:	79fb      	ldrb	r3, [r7, #7]
20000ba6:	7bfa      	ldrb	r2, [r7, #15]
20000ba8:	f04f 0100 	mov.w	r1, #0
20000bac:	9100      	str	r1, [sp, #0]
20000bae:	f64d 40e4 	movw	r0, #56548	; 0xdce4
20000bb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bb6:	4611      	mov	r1, r2
20000bb8:	68ba      	ldr	r2, [r7, #8]
20000bba:	f005 fb3b 	bl	20006234 <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000bbe:	f64d 40e4 	movw	r0, #56548	; 0xdce4
20000bc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bc6:	f04f 0100 	mov.w	r1, #0
20000bca:	f005 fcaf 	bl	2000652c <I2C_wait_complete>
20000bce:	4603      	mov	r3, r0
20000bd0:	461a      	mov	r2, r3
20000bd2:	f24e 13d2 	movw	r3, #57810	; 0xe1d2
20000bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bda:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000bdc:	f24e 13d2 	movw	r3, #57810	; 0xe1d2
20000be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000be4:	781b      	ldrb	r3, [r3, #0]
20000be6:	2b00      	cmp	r3, #0
20000be8:	d102      	bne.n	20000bf0 <vc_write+0x6c>
            return 0;
20000bea:	f04f 0300 	mov.w	r3, #0
20000bee:	e018      	b.n	20000c22 <vc_write+0x9e>
        }
        count++;
20000bf0:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bf8:	781b      	ldrb	r3, [r3, #0]
20000bfa:	f103 0301 	add.w	r3, r3, #1
20000bfe:	b2da      	uxtb	r2, r3
20000c00:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c08:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
20000c0a:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c12:	781b      	ldrb	r3, [r3, #0]
20000c14:	2b09      	cmp	r3, #9
20000c16:	d9c5      	bls.n	20000ba4 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000c18:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c20:	781b      	ldrb	r3, [r3, #0]

}
20000c22:	4618      	mov	r0, r3
20000c24:	f107 0710 	add.w	r7, r7, #16
20000c28:	46bd      	mov	sp, r7
20000c2a:	bd80      	pop	{r7, pc}

20000c2c <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
20000c2c:	b580      	push	{r7, lr}
20000c2e:	b086      	sub	sp, #24
20000c30:	af02      	add	r7, sp, #8
20000c32:	60b9      	str	r1, [r7, #8]
20000c34:	4613      	mov	r3, r2
20000c36:	4602      	mov	r2, r0
20000c38:	73fa      	strb	r2, [r7, #15]
20000c3a:	71fb      	strb	r3, [r7, #7]
    count = 0;
20000c3c:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c44:	f04f 0200 	mov.w	r2, #0
20000c48:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000c4a:	e032      	b.n	20000cb2 <vc_read+0x86>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
20000c4c:	79fb      	ldrb	r3, [r7, #7]
20000c4e:	7bfa      	ldrb	r2, [r7, #15]
20000c50:	f04f 0100 	mov.w	r1, #0
20000c54:	9100      	str	r1, [sp, #0]
20000c56:	f64d 40e4 	movw	r0, #56548	; 0xdce4
20000c5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c5e:	4611      	mov	r1, r2
20000c60:	68ba      	ldr	r2, [r7, #8]
20000c62:	f005 fb59 	bl	20006318 <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000c66:	f64d 40e4 	movw	r0, #56548	; 0xdce4
20000c6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c6e:	f04f 0100 	mov.w	r1, #0
20000c72:	f005 fc5b 	bl	2000652c <I2C_wait_complete>
20000c76:	4603      	mov	r3, r0
20000c78:	461a      	mov	r2, r3
20000c7a:	f24e 13d2 	movw	r3, #57810	; 0xe1d2
20000c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c82:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000c84:	f24e 13d2 	movw	r3, #57810	; 0xe1d2
20000c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c8c:	781b      	ldrb	r3, [r3, #0]
20000c8e:	2b00      	cmp	r3, #0
20000c90:	d102      	bne.n	20000c98 <vc_read+0x6c>
            return 0;
20000c92:	f04f 0300 	mov.w	r3, #0
20000c96:	e018      	b.n	20000cca <vc_read+0x9e>
        }
        count++;
20000c98:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ca0:	781b      	ldrb	r3, [r3, #0]
20000ca2:	f103 0301 	add.w	r3, r3, #1
20000ca6:	b2da      	uxtb	r2, r3
20000ca8:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cb0:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
20000cb2:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cba:	781b      	ldrb	r3, [r3, #0]
20000cbc:	2b09      	cmp	r3, #9
20000cbe:	d9c5      	bls.n	20000c4c <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000cc0:	f24e 13d0 	movw	r3, #57808	; 0xe1d0
20000cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cc8:	781b      	ldrb	r3, [r3, #0]

}
20000cca:	4618      	mov	r0, r3
20000ccc:	f107 0710 	add.w	r7, r7, #16
20000cd0:	46bd      	mov	sp, r7
20000cd2:	bd80      	pop	{r7, pc}

20000cd4 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
20000cd4:	b580      	push	{r7, lr}
20000cd6:	b082      	sub	sp, #8
20000cd8:	af00      	add	r7, sp, #0
20000cda:	460b      	mov	r3, r1
20000cdc:	603a      	str	r2, [r7, #0]
20000cde:	4602      	mov	r2, r0
20000ce0:	71fa      	strb	r2, [r7, #7]
20000ce2:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
20000ce4:	79fa      	ldrb	r2, [r7, #7]
20000ce6:	f107 0306 	add.w	r3, r7, #6
20000cea:	4610      	mov	r0, r2
20000cec:	4619      	mov	r1, r3
20000cee:	f04f 0201 	mov.w	r2, #1
20000cf2:	f7ff ff47 	bl	20000b84 <vc_write>
20000cf6:	4603      	mov	r3, r0
20000cf8:	2b09      	cmp	r3, #9
20000cfa:	d902      	bls.n	20000d02 <vc_read_reg+0x2e>
        return 1;
20000cfc:	f04f 0301 	mov.w	r3, #1
20000d00:	e00e      	b.n	20000d20 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
20000d02:	79fb      	ldrb	r3, [r7, #7]
20000d04:	4618      	mov	r0, r3
20000d06:	6839      	ldr	r1, [r7, #0]
20000d08:	f04f 0202 	mov.w	r2, #2
20000d0c:	f7ff ff8e 	bl	20000c2c <vc_read>
20000d10:	4603      	mov	r3, r0
20000d12:	2b09      	cmp	r3, #9
20000d14:	d902      	bls.n	20000d1c <vc_read_reg+0x48>
        return 1;
20000d16:	f04f 0301 	mov.w	r3, #1
20000d1a:	e001      	b.n	20000d20 <vc_read_reg+0x4c>
    }

    return 0;
20000d1c:	f04f 0300 	mov.w	r3, #0
}
20000d20:	4618      	mov	r0, r3
20000d22:	f107 0708 	add.w	r7, r7, #8
20000d26:	46bd      	mov	sp, r7
20000d28:	bd80      	pop	{r7, pc}
20000d2a:	bf00      	nop

20000d2c <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000d2c:	b580      	push	{r7, lr}
20000d2e:	b082      	sub	sp, #8
20000d30:	af00      	add	r7, sp, #0
20000d32:	460b      	mov	r3, r1
20000d34:	603a      	str	r2, [r7, #0]
20000d36:	4602      	mov	r2, r0
20000d38:	71fa      	strb	r2, [r7, #7]
20000d3a:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000d3c:	f24e 13cc 	movw	r3, #57804	; 0xe1cc
20000d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d44:	f04f 0200 	mov.w	r2, #0
20000d48:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000d4a:	f24e 13cc 	movw	r3, #57804	; 0xe1cc
20000d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d52:	f04f 0200 	mov.w	r2, #0
20000d56:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000d58:	f24e 13ce 	movw	r3, #57806	; 0xe1ce
20000d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d60:	f04f 0200 	mov.w	r2, #0
20000d64:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
20000d66:	79bb      	ldrb	r3, [r7, #6]
20000d68:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d6c:	b2db      	uxtb	r3, r3
20000d6e:	79fa      	ldrb	r2, [r7, #7]
20000d70:	4610      	mov	r0, r2
20000d72:	4619      	mov	r1, r3
20000d74:	f24e 12cc 	movw	r2, #57804	; 0xe1cc
20000d78:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000d7c:	f7ff ffaa 	bl	20000cd4 <vc_read_reg>
20000d80:	4603      	mov	r3, r0
20000d82:	2b00      	cmp	r3, #0
20000d84:	d11a      	bne.n	20000dbc <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
20000d86:	f24e 13cc 	movw	r3, #57804	; 0xe1cc
20000d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d8e:	781b      	ldrb	r3, [r3, #0]
20000d90:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000d94:	b29a      	uxth	r2, r3
20000d96:	f24e 13cc 	movw	r3, #57804	; 0xe1cc
20000d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d9e:	785b      	ldrb	r3, [r3, #1]
20000da0:	ea42 0303 	orr.w	r3, r2, r3
20000da4:	b29b      	uxth	r3, r3
20000da6:	b29a      	uxth	r2, r3
20000da8:	f24e 13ce 	movw	r3, #57806	; 0xe1ce
20000dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db0:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000db2:	683b      	ldr	r3, [r7, #0]
20000db4:	f04f 0200 	mov.w	r2, #0
20000db8:	701a      	strb	r2, [r3, #0]
20000dba:	e00a      	b.n	20000dd2 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
20000dbc:	683b      	ldr	r3, [r7, #0]
20000dbe:	f04f 0201 	mov.w	r2, #1
20000dc2:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000dc4:	f24e 13ce 	movw	r3, #57806	; 0xe1ce
20000dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dcc:	f04f 0200 	mov.w	r2, #0
20000dd0:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000dd2:	f24e 13ce 	movw	r3, #57806	; 0xe1ce
20000dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dda:	881b      	ldrh	r3, [r3, #0]
}
20000ddc:	4618      	mov	r0, r3
20000dde:	f107 0708 	add.w	r7, r7, #8
20000de2:	46bd      	mov	sp, r7
20000de4:	bd80      	pop	{r7, pc}
20000de6:	bf00      	nop

20000de8 <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000de8:	b580      	push	{r7, lr}
20000dea:	b082      	sub	sp, #8
20000dec:	af00      	add	r7, sp, #0
20000dee:	460b      	mov	r3, r1
20000df0:	603a      	str	r2, [r7, #0]
20000df2:	4602      	mov	r2, r0
20000df4:	71fa      	strb	r2, [r7, #7]
20000df6:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000df8:	f24e 13cc 	movw	r3, #57804	; 0xe1cc
20000dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e00:	f04f 0200 	mov.w	r2, #0
20000e04:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000e06:	f24e 13cc 	movw	r3, #57804	; 0xe1cc
20000e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e0e:	f04f 0200 	mov.w	r2, #0
20000e12:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000e14:	f24e 13ce 	movw	r3, #57806	; 0xe1ce
20000e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e1c:	f04f 0200 	mov.w	r2, #0
20000e20:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
20000e22:	79bb      	ldrb	r3, [r7, #6]
20000e24:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000e28:	b2db      	uxtb	r3, r3
20000e2a:	f103 33ff 	add.w	r3, r3, #4294967295
20000e2e:	b2db      	uxtb	r3, r3
20000e30:	79fa      	ldrb	r2, [r7, #7]
20000e32:	4610      	mov	r0, r2
20000e34:	4619      	mov	r1, r3
20000e36:	f24e 12cc 	movw	r2, #57804	; 0xe1cc
20000e3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000e3e:	f7ff ff49 	bl	20000cd4 <vc_read_reg>
20000e42:	4603      	mov	r3, r0
20000e44:	2b00      	cmp	r3, #0
20000e46:	d11a      	bne.n	20000e7e <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
20000e48:	f24e 13cc 	movw	r3, #57804	; 0xe1cc
20000e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e50:	781b      	ldrb	r3, [r3, #0]
20000e52:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e56:	b29a      	uxth	r2, r3
20000e58:	f24e 13cc 	movw	r3, #57804	; 0xe1cc
20000e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e60:	785b      	ldrb	r3, [r3, #1]
20000e62:	ea42 0303 	orr.w	r3, r2, r3
20000e66:	b29b      	uxth	r3, r3
20000e68:	b29a      	uxth	r2, r3
20000e6a:	f24e 13ce 	movw	r3, #57806	; 0xe1ce
20000e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e72:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000e74:	683b      	ldr	r3, [r7, #0]
20000e76:	f04f 0200 	mov.w	r2, #0
20000e7a:	701a      	strb	r2, [r3, #0]
20000e7c:	e00a      	b.n	20000e94 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
20000e7e:	683b      	ldr	r3, [r7, #0]
20000e80:	f04f 0201 	mov.w	r2, #1
20000e84:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000e86:	f24e 13ce 	movw	r3, #57806	; 0xe1ce
20000e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e8e:	f04f 0200 	mov.w	r2, #0
20000e92:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000e94:	f24e 13ce 	movw	r3, #57806	; 0xe1ce
20000e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e9c:	881b      	ldrh	r3, [r3, #0]
}
20000e9e:	4618      	mov	r0, r3
20000ea0:	f107 0708 	add.w	r7, r7, #8
20000ea4:	46bd      	mov	sp, r7
20000ea6:	bd80      	pop	{r7, pc}

20000ea8 <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
20000ea8:	b580      	push	{r7, lr}
20000eaa:	b08c      	sub	sp, #48	; 0x30
20000eac:	af04      	add	r7, sp, #16
20000eae:	60f8      	str	r0, [r7, #12]
20000eb0:	607b      	str	r3, [r7, #4]
20000eb2:	460b      	mov	r3, r1
20000eb4:	72fb      	strb	r3, [r7, #11]
20000eb6:	4613      	mov	r3, r2
20000eb8:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
20000eba:	7abb      	ldrb	r3, [r7, #10]
20000ebc:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
20000ebe:	7d3b      	ldrb	r3, [r7, #20]
20000ec0:	f043 0308 	orr.w	r3, r3, #8
20000ec4:	b2db      	uxtb	r3, r3
20000ec6:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
20000ec8:	7d3b      	ldrb	r3, [r7, #20]
20000eca:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000ece:	b2db      	uxtb	r3, r3
20000ed0:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
20000ed2:	7afa      	ldrb	r2, [r7, #11]
20000ed4:	f107 0314 	add.w	r3, r7, #20
20000ed8:	f107 0118 	add.w	r1, r7, #24
20000edc:	9100      	str	r1, [sp, #0]
20000ede:	f04f 0102 	mov.w	r1, #2
20000ee2:	9101      	str	r1, [sp, #4]
20000ee4:	f04f 0100 	mov.w	r1, #0
20000ee8:	9102      	str	r1, [sp, #8]
20000eea:	68f8      	ldr	r0, [r7, #12]
20000eec:	4611      	mov	r1, r2
20000eee:	461a      	mov	r2, r3
20000ef0:	f04f 0301 	mov.w	r3, #1
20000ef4:	f005 fa82 	bl	200063fc <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
20000ef8:	68f8      	ldr	r0, [r7, #12]
20000efa:	f04f 0100 	mov.w	r1, #0
20000efe:	f005 fb15 	bl	2000652c <I2C_wait_complete>
20000f02:	4603      	mov	r3, r0
20000f04:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
20000f06:	7f7b      	ldrb	r3, [r7, #29]
20000f08:	2b00      	cmp	r3, #0
20000f0a:	d004      	beq.n	20000f16 <get_ADC_value+0x6e>
		*flag = 1;
20000f0c:	687b      	ldr	r3, [r7, #4]
20000f0e:	f04f 0201 	mov.w	r2, #1
20000f12:	701a      	strb	r2, [r3, #0]
20000f14:	e012      	b.n	20000f3c <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
20000f16:	7e3b      	ldrb	r3, [r7, #24]
20000f18:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000f1c:	b29a      	uxth	r2, r3
20000f1e:	7e7b      	ldrb	r3, [r7, #25]
20000f20:	ea42 0303 	orr.w	r3, r2, r3
20000f24:	b29b      	uxth	r3, r3
20000f26:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
20000f28:	8bfb      	ldrh	r3, [r7, #30]
20000f2a:	ea4f 5303 	mov.w	r3, r3, lsl #20
20000f2e:	ea4f 5313 	mov.w	r3, r3, lsr #20
20000f32:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
20000f34:	687b      	ldr	r3, [r7, #4]
20000f36:	f04f 0200 	mov.w	r2, #0
20000f3a:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
20000f3c:	8bfb      	ldrh	r3, [r7, #30]
}
20000f3e:	4618      	mov	r0, r3
20000f40:	f107 0720 	add.w	r7, r7, #32
20000f44:	46bd      	mov	sp, r7
20000f46:	bd80      	pop	{r7, pc}

20000f48 <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
20000f48:	b580      	push	{r7, lr}
20000f4a:	b084      	sub	sp, #16
20000f4c:	af00      	add	r7, sp, #0
20000f4e:	4603      	mov	r3, r0
20000f50:	6039      	str	r1, [r7, #0]
20000f52:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
20000f54:	79fb      	ldrb	r3, [r7, #7]
20000f56:	2b00      	cmp	r3, #0
20000f58:	d10e      	bne.n	20000f78 <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
20000f5a:	683b      	ldr	r3, [r7, #0]
20000f5c:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
20000f5e:	68bb      	ldr	r3, [r7, #8]
20000f60:	6859      	ldr	r1, [r3, #4]
20000f62:	68bb      	ldr	r3, [r7, #8]
20000f64:	689a      	ldr	r2, [r3, #8]
20000f66:	68bb      	ldr	r3, [r7, #8]
20000f68:	7b1b      	ldrb	r3, [r3, #12]
20000f6a:	4608      	mov	r0, r1
20000f6c:	4611      	mov	r1, r2
20000f6e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f72:	f005 f8e9 	bl	20006148 <I2C_init>
20000f76:	e030      	b.n	20000fda <init+0x92>
	}
	else if(d == vc_sensor){
20000f78:	79fb      	ldrb	r3, [r7, #7]
20000f7a:	2b0a      	cmp	r3, #10
20000f7c:	d10e      	bne.n	20000f9c <init+0x54>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
20000f7e:	683b      	ldr	r3, [r7, #0]
20000f80:	60fb      	str	r3, [r7, #12]
//		MSS_I2C_init(&g_mss_i2c0, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
		I2C_init(vc_pkt->g_core_i2c2, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f82:	68fb      	ldr	r3, [r7, #12]
20000f84:	685a      	ldr	r2, [r3, #4]
20000f86:	68fb      	ldr	r3, [r7, #12]
20000f88:	689b      	ldr	r3, [r3, #8]
20000f8a:	4610      	mov	r0, r2
20000f8c:	4619      	mov	r1, r3
20000f8e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f92:	f04f 0300 	mov.w	r3, #0
20000f96:	f005 f8d7 	bl	20006148 <I2C_init>
20000f9a:	e01e      	b.n	20000fda <init+0x92>
	}
	else if(d == all){
20000f9c:	79fb      	ldrb	r3, [r7, #7]
20000f9e:	2b0b      	cmp	r3, #11
20000fa0:	d11b      	bne.n	20000fda <init+0x92>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000fa2:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20000fa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000faa:	f245 0100 	movw	r1, #20480	; 0x5000
20000fae:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000fb2:	f04f 0288 	mov.w	r2, #136	; 0x88
20000fb6:	f04f 0300 	mov.w	r3, #0
20000fba:	f005 f8c5 	bl	20006148 <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000fbe:	f64d 40e4 	movw	r0, #56548	; 0xdce4
20000fc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000fc6:	f242 0100 	movw	r1, #8192	; 0x2000
20000fca:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000fce:	f04f 0288 	mov.w	r2, #136	; 0x88
20000fd2:	f04f 0300 	mov.w	r3, #0
20000fd6:	f005 f8b7 	bl	20006148 <I2C_init>
	}
	else{

	}

}
20000fda:	f107 0710 	add.w	r7, r7, #16
20000fde:	46bd      	mov	sp, r7
20000fe0:	bd80      	pop	{r7, pc}
20000fe2:	bf00      	nop

20000fe4 <vTask_Delay>:
#include "FreeRTOSConfig.h"
#include <FreeRTOS-Source/include/task.h>
#include "osal.h"


void vTask_Delay(uint16_t timems){
20000fe4:	b580      	push	{r7, lr}
20000fe6:	b084      	sub	sp, #16
20000fe8:	af00      	add	r7, sp, #0
20000fea:	4603      	mov	r3, r0
20000fec:	80fb      	strh	r3, [r7, #6]
	TickType_t tick_for_time;

	tick_for_time = pdMS_TO_TICKS(timems);
20000fee:	88fb      	ldrh	r3, [r7, #6]
20000ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20000ff4:	fb02 f203 	mul.w	r2, r2, r3
20000ff8:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20000ffc:	f2c1 0362 	movt	r3, #4194	; 0x1062
20001000:	fba3 1302 	umull	r1, r3, r3, r2
20001004:	ea4f 1393 	mov.w	r3, r3, lsr #6
20001008:	60fb      	str	r3, [r7, #12]

	vTaskDelay(tick_for_time);
2000100a:	68f8      	ldr	r0, [r7, #12]
2000100c:	f001 f99c 	bl	20002348 <vTaskDelay>

}
20001010:	f107 0710 	add.w	r7, r7, #16
20001014:	46bd      	mov	sp, r7
20001016:	bd80      	pop	{r7, pc}

20001018 <xMsToTicks>:

TickType_t xMsToTicks(uint16_t timems){
20001018:	b480      	push	{r7}
2000101a:	b083      	sub	sp, #12
2000101c:	af00      	add	r7, sp, #0
2000101e:	4603      	mov	r3, r0
20001020:	80fb      	strh	r3, [r7, #6]
	return pdMS_TO_TICKS(timems);
20001022:	88fb      	ldrh	r3, [r7, #6]
20001024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20001028:	fb02 f203 	mul.w	r2, r2, r3
2000102c:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20001030:	f2c1 0362 	movt	r3, #4194	; 0x1062
20001034:	fba3 1302 	umull	r1, r3, r3, r2
20001038:	ea4f 1393 	mov.w	r3, r3, lsr #6
}
2000103c:	4618      	mov	r0, r3
2000103e:	f107 070c 	add.w	r7, r7, #12
20001042:	46bd      	mov	sp, r7
20001044:	bc80      	pop	{r7}
20001046:	4770      	bx	lr

20001048 <cmd_valid>:
cmd_t cmd_list[NUM_CMDS];

extern uint16_t command_cnt;
extern uint16_t command_reject_cnt;

uint8_t cmd_valid(rx_cmd_t* rx_cmd){
20001048:	b480      	push	{r7}
2000104a:	b083      	sub	sp, #12
2000104c:	af00      	add	r7, sp, #0
2000104e:	6078      	str	r0, [r7, #4]
	return 1;  //Will be checking the validated of the checksum.
20001050:	f04f 0301 	mov.w	r3, #1
}
20001054:	4618      	mov	r0, r3
20001056:	f107 070c 	add.w	r7, r7, #12
2000105a:	46bd      	mov	sp, r7
2000105c:	bc80      	pop	{r7}
2000105e:	4770      	bx	lr

20001060 <chk_s_cmd>:

uint8_t chk_s_cmd(rx_cmd_t* rx_cmd){
20001060:	b480      	push	{r7}
20001062:	b085      	sub	sp, #20
20001064:	af00      	add	r7, sp, #0
20001066:	6078      	str	r0, [r7, #4]
	uint16_t p;


	p = PILOT_REVERSE_BYTE_ORDER(rx_cmd->ccsds_cmd_p1);
20001068:	687b      	ldr	r3, [r7, #4]
2000106a:	781a      	ldrb	r2, [r3, #0]
2000106c:	785b      	ldrb	r3, [r3, #1]
2000106e:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001072:	ea43 0302 	orr.w	r3, r3, r2
20001076:	b29b      	uxth	r3, r3
20001078:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000107c:	b29a      	uxth	r2, r3
2000107e:	687b      	ldr	r3, [r7, #4]
20001080:	7819      	ldrb	r1, [r3, #0]
20001082:	785b      	ldrb	r3, [r3, #1]
20001084:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001088:	ea43 0301 	orr.w	r3, r3, r1
2000108c:	b29b      	uxth	r3, r3
2000108e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20001092:	b29b      	uxth	r3, r3
20001094:	ea42 0303 	orr.w	r3, r2, r3
20001098:	b29b      	uxth	r3, r3
2000109a:	81fb      	strh	r3, [r7, #14]


	cmd->length = p & 0x07FF;
2000109c:	f24e 4310 	movw	r3, #58384	; 0xe410
200010a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010a4:	681a      	ldr	r2, [r3, #0]
200010a6:	89fb      	ldrh	r3, [r7, #14]
200010a8:	ea4f 5343 	mov.w	r3, r3, lsl #21
200010ac:	ea4f 5353 	mov.w	r3, r3, lsr #21
200010b0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200010b4:	f04f 0000 	mov.w	r0, #0
200010b8:	ea40 0101 	orr.w	r1, r0, r1
200010bc:	7051      	strb	r1, [r2, #1]
200010be:	ea4f 2313 	mov.w	r3, r3, lsr #8
200010c2:	b29b      	uxth	r3, r3
200010c4:	f04f 0100 	mov.w	r1, #0
200010c8:	ea41 0303 	orr.w	r3, r1, r3
200010cc:	7093      	strb	r3, [r2, #2]

	if( (p >> 11) & 0x01){
200010ce:	89fb      	ldrh	r3, [r7, #14]
200010d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
200010d4:	b29b      	uxth	r3, r3
200010d6:	f003 0301 	and.w	r3, r3, #1
200010da:	b2db      	uxtb	r3, r3
200010dc:	2b00      	cmp	r3, #0
200010de:	d002      	beq.n	200010e6 <chk_s_cmd+0x86>
		return 1;
200010e0:	f04f 0301 	mov.w	r3, #1
200010e4:	e001      	b.n	200010ea <chk_s_cmd+0x8a>
	}
	else{
		return 0;
200010e6:	f04f 0300 	mov.w	r3, #0
	}
}
200010ea:	4618      	mov	r0, r3
200010ec:	f107 0714 	add.w	r7, r7, #20
200010f0:	46bd      	mov	sp, r7
200010f2:	bc80      	pop	{r7}
200010f4:	4770      	bx	lr
200010f6:	bf00      	nop

200010f8 <add_cmd>:


void add_cmd(uint8_t id, uint16_t length, void (*ex_func)(uint8_t id, rx_cmd_t* rcv_cmd)){
200010f8:	b480      	push	{r7}
200010fa:	b083      	sub	sp, #12
200010fc:	af00      	add	r7, sp, #0
200010fe:	460b      	mov	r3, r1
20001100:	603a      	str	r2, [r7, #0]
20001102:	4602      	mov	r2, r0
20001104:	71fa      	strb	r2, [r7, #7]
20001106:	80bb      	strh	r3, [r7, #4]

	cmd_list[id].id = id;
20001108:	79f9      	ldrb	r1, [r7, #7]
2000110a:	f24e 32f8 	movw	r2, #58360	; 0xe3f8
2000110e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001112:	460b      	mov	r3, r1
20001114:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001118:	ebc1 0303 	rsb	r3, r1, r3
2000111c:	4413      	add	r3, r2
2000111e:	79fa      	ldrb	r2, [r7, #7]
20001120:	701a      	strb	r2, [r3, #0]
	cmd_list[id].length = length;
20001122:	79f9      	ldrb	r1, [r7, #7]
20001124:	f24e 32f8 	movw	r2, #58360	; 0xe3f8
20001128:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000112c:	460b      	mov	r3, r1
2000112e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001132:	ebc1 0303 	rsb	r3, r1, r3
20001136:	4413      	add	r3, r2
20001138:	793a      	ldrb	r2, [r7, #4]
2000113a:	f04f 0100 	mov.w	r1, #0
2000113e:	ea41 0202 	orr.w	r2, r1, r2
20001142:	705a      	strb	r2, [r3, #1]
20001144:	797a      	ldrb	r2, [r7, #5]
20001146:	f04f 0100 	mov.w	r1, #0
2000114a:	ea41 0202 	orr.w	r2, r1, r2
2000114e:	709a      	strb	r2, [r3, #2]
	cmd_list[id].ex_func = ex_func;
20001150:	79f8      	ldrb	r0, [r7, #7]
20001152:	683a      	ldr	r2, [r7, #0]
20001154:	f24e 31f8 	movw	r1, #58360	; 0xe3f8
20001158:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000115c:	4603      	mov	r3, r0
2000115e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001162:	ebc0 0303 	rsb	r3, r0, r3
20001166:	440b      	add	r3, r1
20001168:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2000116c:	f04f 0000 	mov.w	r0, #0
20001170:	ea40 0101 	orr.w	r1, r0, r1
20001174:	70d9      	strb	r1, [r3, #3]
20001176:	ea4f 2112 	mov.w	r1, r2, lsr #8
2000117a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000117e:	f04f 0000 	mov.w	r0, #0
20001182:	ea40 0101 	orr.w	r1, r0, r1
20001186:	7119      	strb	r1, [r3, #4]
20001188:	ea4f 4112 	mov.w	r1, r2, lsr #16
2000118c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
20001190:	f04f 0000 	mov.w	r0, #0
20001194:	ea40 0101 	orr.w	r1, r0, r1
20001198:	7159      	strb	r1, [r3, #5]
2000119a:	ea4f 6212 	mov.w	r2, r2, lsr #24
2000119e:	f04f 0100 	mov.w	r1, #0
200011a2:	ea41 0202 	orr.w	r2, r1, r2
200011a6:	719a      	strb	r2, [r3, #6]

}
200011a8:	f107 070c 	add.w	r7, r7, #12
200011ac:	46bd      	mov	sp, r7
200011ae:	bc80      	pop	{r7}
200011b0:	4770      	bx	lr
200011b2:	bf00      	nop

200011b4 <vcmd_callback>:

void vcmd_callback(){
200011b4:	b580      	push	{r7, lr}
200011b6:	af00      	add	r7, sp, #0
	//Execution for the timer based command
	cmd_list[rx_cmd->ccsds_APID - 1].ex_func(rx_cmd);
200011b8:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
200011bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011c0:	681b      	ldr	r3, [r3, #0]
200011c2:	789a      	ldrb	r2, [r3, #2]
200011c4:	78db      	ldrb	r3, [r3, #3]
200011c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200011ca:	ea43 0302 	orr.w	r3, r3, r2
200011ce:	b29b      	uxth	r3, r3
200011d0:	f103 31ff 	add.w	r1, r3, #4294967295
200011d4:	f24e 32f8 	movw	r2, #58360	; 0xe3f8
200011d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200011dc:	460b      	mov	r3, r1
200011de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200011e2:	ebc1 0303 	rsb	r3, r1, r3
200011e6:	4413      	add	r3, r2
200011e8:	78da      	ldrb	r2, [r3, #3]
200011ea:	7919      	ldrb	r1, [r3, #4]
200011ec:	ea4f 2101 	mov.w	r1, r1, lsl #8
200011f0:	ea41 0202 	orr.w	r2, r1, r2
200011f4:	7959      	ldrb	r1, [r3, #5]
200011f6:	ea4f 4101 	mov.w	r1, r1, lsl #16
200011fa:	ea41 0202 	orr.w	r2, r1, r2
200011fe:	799b      	ldrb	r3, [r3, #6]
20001200:	ea4f 6303 	mov.w	r3, r3, lsl #24
20001204:	ea43 0302 	orr.w	r3, r3, r2
20001208:	461a      	mov	r2, r3
2000120a:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
2000120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001212:	681b      	ldr	r3, [r3, #0]
20001214:	4618      	mov	r0, r3
20001216:	4790      	blx	r2
}
20001218:	bd80      	pop	{r7, pc}
2000121a:	bf00      	nop

2000121c <cmd_engine>:

void cmd_engine(rx_cmd_t* rx_cmd){
2000121c:	b590      	push	{r4, r7, lr}
2000121e:	b085      	sub	sp, #20
20001220:	af02      	add	r7, sp, #8
20001222:	6078      	str	r0, [r7, #4]

	add_cmd(0, 16, cmd_noop);
20001224:	f241 3341 	movw	r3, #4929	; 0x1341
20001228:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000122c:	f04f 0000 	mov.w	r0, #0
20001230:	f04f 0110 	mov.w	r1, #16
20001234:	461a      	mov	r2, r3
20001236:	f7ff ff5f 	bl	200010f8 <add_cmd>
	add_cmd(1, 16, set_pkt_rate);   //the actual command apid's is one greater than this.
2000123a:	f241 3355 	movw	r3, #4949	; 0x1355
2000123e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001242:	f04f 0001 	mov.w	r0, #1
20001246:	f04f 0110 	mov.w	r1, #16
2000124a:	461a      	mov	r2, r3
2000124c:	f7ff ff54 	bl	200010f8 <add_cmd>
	add_cmd(2, 16, cmd_sc_reset);
20001250:	f241 33e5 	movw	r3, #5093	; 0x13e5
20001254:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001258:	f04f 0002 	mov.w	r0, #2
2000125c:	f04f 0110 	mov.w	r1, #16
20001260:	461a      	mov	r2, r3
20001262:	f7ff ff49 	bl	200010f8 <add_cmd>

	if(chk_s_cmd(rx_cmd)){  //if the command is storable
20001266:	6878      	ldr	r0, [r7, #4]
20001268:	f7ff fefa 	bl	20001060 <chk_s_cmd>
2000126c:	4603      	mov	r3, r0
2000126e:	2b00      	cmp	r3, #0
20001270:	d03b      	beq.n	200012ea <cmd_engine+0xce>
		cmd_timer[0] = xTimerCreate("cmd_timer", pdMS_TO_TICKS(rx_cmd->ccsds_time * 1000), pdFALSE, (void*)0, vcmd_callback);
20001272:	687b      	ldr	r3, [r7, #4]
20001274:	791b      	ldrb	r3, [r3, #4]
20001276:	461a      	mov	r2, r3
20001278:	f244 2340 	movw	r3, #16960	; 0x4240
2000127c:	f2c0 030f 	movt	r3, #15
20001280:	fb03 f302 	mul.w	r3, r3, r2
20001284:	461a      	mov	r2, r3
20001286:	f644 53d3 	movw	r3, #19923	; 0x4dd3
2000128a:	f2c1 0362 	movt	r3, #4194	; 0x1062
2000128e:	fba3 1302 	umull	r1, r3, r3, r2
20001292:	ea4f 1293 	mov.w	r2, r3, lsr #6
20001296:	f241 13b5 	movw	r3, #4533	; 0x11b5
2000129a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000129e:	9300      	str	r3, [sp, #0]
200012a0:	f647 008c 	movw	r0, #30860	; 0x788c
200012a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200012a8:	4611      	mov	r1, r2
200012aa:	f04f 0200 	mov.w	r2, #0
200012ae:	f04f 0300 	mov.w	r3, #0
200012b2:	f002 facb 	bl	2000384c <xTimerCreate>
200012b6:	4602      	mov	r2, r0
200012b8:	f24e 13c4 	movw	r3, #57796	; 0xe1c4
200012bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012c0:	601a      	str	r2, [r3, #0]
		xTimerStart(cmd_timer[0], 0);
200012c2:	f24e 13c4 	movw	r3, #57796	; 0xe1c4
200012c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012ca:	681c      	ldr	r4, [r3, #0]
200012cc:	f001 faac 	bl	20002828 <xTaskGetTickCount>
200012d0:	4603      	mov	r3, r0
200012d2:	f04f 0200 	mov.w	r2, #0
200012d6:	9200      	str	r2, [sp, #0]
200012d8:	4620      	mov	r0, r4
200012da:	f04f 0101 	mov.w	r1, #1
200012de:	461a      	mov	r2, r3
200012e0:	f04f 0300 	mov.w	r3, #0
200012e4:	f002 fb04 	bl	200038f0 <xTimerGenericCommand>
200012e8:	e025      	b.n	20001336 <cmd_engine+0x11a>
	}
	else{
		 //Commands needs to be executed right now.
//		add_cmd(rx_cmd->ccsds_APID, cmd->length, cmd_list[rx_cmd->ccsds_APID].ex_func(rx_cmd->ccsds_APID, rx_cmd->parameters, cmd->length));
		cmd_list[rx_cmd->ccsds_APID - 1].ex_func(rx_cmd);
200012ea:	687b      	ldr	r3, [r7, #4]
200012ec:	789a      	ldrb	r2, [r3, #2]
200012ee:	78db      	ldrb	r3, [r3, #3]
200012f0:	ea4f 2303 	mov.w	r3, r3, lsl #8
200012f4:	ea43 0302 	orr.w	r3, r3, r2
200012f8:	b29b      	uxth	r3, r3
200012fa:	f103 31ff 	add.w	r1, r3, #4294967295
200012fe:	f24e 32f8 	movw	r2, #58360	; 0xe3f8
20001302:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001306:	460b      	mov	r3, r1
20001308:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000130c:	ebc1 0303 	rsb	r3, r1, r3
20001310:	4413      	add	r3, r2
20001312:	78da      	ldrb	r2, [r3, #3]
20001314:	7919      	ldrb	r1, [r3, #4]
20001316:	ea4f 2101 	mov.w	r1, r1, lsl #8
2000131a:	ea41 0202 	orr.w	r2, r1, r2
2000131e:	7959      	ldrb	r1, [r3, #5]
20001320:	ea4f 4101 	mov.w	r1, r1, lsl #16
20001324:	ea41 0202 	orr.w	r2, r1, r2
20001328:	799b      	ldrb	r3, [r3, #6]
2000132a:	ea4f 6303 	mov.w	r3, r3, lsl #24
2000132e:	ea43 0302 	orr.w	r3, r3, r2
20001332:	6878      	ldr	r0, [r7, #4]
20001334:	4798      	blx	r3
	}

}
20001336:	f107 070c 	add.w	r7, r7, #12
2000133a:	46bd      	mov	sp, r7
2000133c:	bd90      	pop	{r4, r7, pc}
2000133e:	bf00      	nop

20001340 <cmd_noop>:

// Commands Definition

void cmd_noop(rx_cmd_t* rcv_cmd){
20001340:	b480      	push	{r7}
20001342:	b085      	sub	sp, #20
20001344:	af00      	add	r7, sp, #0
20001346:	6078      	str	r0, [r7, #4]

	uint8_t a;

}
20001348:	f107 0714 	add.w	r7, r7, #20
2000134c:	46bd      	mov	sp, r7
2000134e:	bc80      	pop	{r7}
20001350:	4770      	bx	lr
20001352:	bf00      	nop

20001354 <set_pkt_rate>:

void set_pkt_rate(rx_cmd_t* rcv_cmd){
20001354:	b590      	push	{r4, r7, lr}
20001356:	b085      	sub	sp, #20
20001358:	af02      	add	r7, sp, #8
2000135a:	6078      	str	r0, [r7, #4]

	if(rcv_cmd->parameters[1] != 0){
2000135c:	687b      	ldr	r3, [r7, #4]
2000135e:	79db      	ldrb	r3, [r3, #7]
20001360:	2b00      	cmp	r3, #0
20001362:	d025      	beq.n	200013b0 <set_pkt_rate+0x5c>
		xTimerChangePeriod(pkt_timer[rcv_cmd->parameters[0]], xMsToTicks(rcv_cmd->parameters[1] * 1000), 0);
20001364:	687b      	ldr	r3, [r7, #4]
20001366:	799b      	ldrb	r3, [r3, #6]
20001368:	461a      	mov	r2, r3
2000136a:	f24e 13b8 	movw	r3, #57784	; 0xe1b8
2000136e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001372:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
20001376:	687b      	ldr	r3, [r7, #4]
20001378:	79db      	ldrb	r3, [r3, #7]
2000137a:	461a      	mov	r2, r3
2000137c:	ea4f 1242 	mov.w	r2, r2, lsl #5
20001380:	ebc3 0202 	rsb	r2, r3, r2
20001384:	ea4f 0282 	mov.w	r2, r2, lsl #2
20001388:	4413      	add	r3, r2
2000138a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000138e:	b29b      	uxth	r3, r3
20001390:	4618      	mov	r0, r3
20001392:	f7ff fe41 	bl	20001018 <xMsToTicks>
20001396:	4603      	mov	r3, r0
20001398:	f04f 0200 	mov.w	r2, #0
2000139c:	9200      	str	r2, [sp, #0]
2000139e:	4620      	mov	r0, r4
200013a0:	f04f 0104 	mov.w	r1, #4
200013a4:	461a      	mov	r2, r3
200013a6:	f04f 0300 	mov.w	r3, #0
200013aa:	f002 faa1 	bl	200038f0 <xTimerGenericCommand>
200013ae:	e014      	b.n	200013da <set_pkt_rate+0x86>
	}
	else{
		xTimerStop(pkt_timer[rcv_cmd->parameters[0]], 0);
200013b0:	687b      	ldr	r3, [r7, #4]
200013b2:	799b      	ldrb	r3, [r3, #6]
200013b4:	461a      	mov	r2, r3
200013b6:	f24e 13b8 	movw	r3, #57784	; 0xe1b8
200013ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200013c2:	f04f 0200 	mov.w	r2, #0
200013c6:	9200      	str	r2, [sp, #0]
200013c8:	4618      	mov	r0, r3
200013ca:	f04f 0103 	mov.w	r1, #3
200013ce:	f04f 0200 	mov.w	r2, #0
200013d2:	f04f 0300 	mov.w	r3, #0
200013d6:	f002 fa8b 	bl	200038f0 <xTimerGenericCommand>
	// Write a function to take in APID and increase the downlink rate of that pkt.
//	if(pkt_rate->pkt_apid == HK_API_ID){
//		xTimerChangePeriod() Change the downlink rate of HK packet
//	}

}
200013da:	f107 070c 	add.w	r7, r7, #12
200013de:	46bd      	mov	sp, r7
200013e0:	bd90      	pop	{r4, r7, pc}
200013e2:	bf00      	nop

200013e4 <cmd_sc_reset>:

void cmd_sc_reset(rx_cmd_t* rcv_cmd){
200013e4:	b480      	push	{r7}
200013e6:	b083      	sub	sp, #12
200013e8:	af00      	add	r7, sp, #0
200013ea:	6078      	str	r0, [r7, #4]

	command_cnt = 0;
200013ec:	f24e 4314 	movw	r3, #58388	; 0xe414
200013f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013f4:	f04f 0200 	mov.w	r2, #0
200013f8:	801a      	strh	r2, [r3, #0]
	// Power Cycle other Components;

}
200013fa:	f107 070c 	add.w	r7, r7, #12
200013fe:	46bd      	mov	sp, r7
20001400:	bc80      	pop	{r7}
20001402:	4770      	bx	lr

20001404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20001404:	b480      	push	{r7}
20001406:	b083      	sub	sp, #12
20001408:	af00      	add	r7, sp, #0
2000140a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
2000140c:	687b      	ldr	r3, [r7, #4]
2000140e:	f103 0308 	add.w	r3, r3, #8
20001412:	461a      	mov	r2, r3
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20001418:	687b      	ldr	r3, [r7, #4]
2000141a:	f04f 32ff 	mov.w	r2, #4294967295
2000141e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001420:	687b      	ldr	r3, [r7, #4]
20001422:	f103 0308 	add.w	r3, r3, #8
20001426:	461a      	mov	r2, r3
20001428:	687b      	ldr	r3, [r7, #4]
2000142a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
2000142c:	687b      	ldr	r3, [r7, #4]
2000142e:	f103 0308 	add.w	r3, r3, #8
20001432:	461a      	mov	r2, r3
20001434:	687b      	ldr	r3, [r7, #4]
20001436:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20001438:	687b      	ldr	r3, [r7, #4]
2000143a:	f04f 0200 	mov.w	r2, #0
2000143e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20001440:	f107 070c 	add.w	r7, r7, #12
20001444:	46bd      	mov	sp, r7
20001446:	bc80      	pop	{r7}
20001448:	4770      	bx	lr
2000144a:	bf00      	nop

2000144c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
2000144c:	b480      	push	{r7}
2000144e:	b083      	sub	sp, #12
20001450:	af00      	add	r7, sp, #0
20001452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
20001454:	687b      	ldr	r3, [r7, #4]
20001456:	f04f 0200 	mov.w	r2, #0
2000145a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
2000145c:	f107 070c 	add.w	r7, r7, #12
20001460:	46bd      	mov	sp, r7
20001462:	bc80      	pop	{r7}
20001464:	4770      	bx	lr
20001466:	bf00      	nop

20001468 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001468:	b480      	push	{r7}
2000146a:	b085      	sub	sp, #20
2000146c:	af00      	add	r7, sp, #0
2000146e:	6078      	str	r0, [r7, #4]
20001470:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
20001472:	687b      	ldr	r3, [r7, #4]
20001474:	685b      	ldr	r3, [r3, #4]
20001476:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20001478:	683b      	ldr	r3, [r7, #0]
2000147a:	68fa      	ldr	r2, [r7, #12]
2000147c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
2000147e:	68fb      	ldr	r3, [r7, #12]
20001480:	689a      	ldr	r2, [r3, #8]
20001482:	683b      	ldr	r3, [r7, #0]
20001484:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20001486:	68fb      	ldr	r3, [r7, #12]
20001488:	689b      	ldr	r3, [r3, #8]
2000148a:	683a      	ldr	r2, [r7, #0]
2000148c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
2000148e:	68fb      	ldr	r3, [r7, #12]
20001490:	683a      	ldr	r2, [r7, #0]
20001492:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001494:	683b      	ldr	r3, [r7, #0]
20001496:	687a      	ldr	r2, [r7, #4]
20001498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000149a:	687b      	ldr	r3, [r7, #4]
2000149c:	681b      	ldr	r3, [r3, #0]
2000149e:	f103 0201 	add.w	r2, r3, #1
200014a2:	687b      	ldr	r3, [r7, #4]
200014a4:	601a      	str	r2, [r3, #0]
}
200014a6:	f107 0714 	add.w	r7, r7, #20
200014aa:	46bd      	mov	sp, r7
200014ac:	bc80      	pop	{r7}
200014ae:	4770      	bx	lr

200014b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
200014b0:	b480      	push	{r7}
200014b2:	b085      	sub	sp, #20
200014b4:	af00      	add	r7, sp, #0
200014b6:	6078      	str	r0, [r7, #4]
200014b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
200014ba:	683b      	ldr	r3, [r7, #0]
200014bc:	681b      	ldr	r3, [r3, #0]
200014be:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
200014c0:	68fb      	ldr	r3, [r7, #12]
200014c2:	f1b3 3fff 	cmp.w	r3, #4294967295
200014c6:	d103      	bne.n	200014d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
200014c8:	687b      	ldr	r3, [r7, #4]
200014ca:	691b      	ldr	r3, [r3, #16]
200014cc:	60bb      	str	r3, [r7, #8]
200014ce:	e00d      	b.n	200014ec <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
200014d0:	687b      	ldr	r3, [r7, #4]
200014d2:	f103 0308 	add.w	r3, r3, #8
200014d6:	60bb      	str	r3, [r7, #8]
200014d8:	e002      	b.n	200014e0 <vListInsert+0x30>
200014da:	68bb      	ldr	r3, [r7, #8]
200014dc:	685b      	ldr	r3, [r3, #4]
200014de:	60bb      	str	r3, [r7, #8]
200014e0:	68bb      	ldr	r3, [r7, #8]
200014e2:	685b      	ldr	r3, [r3, #4]
200014e4:	681a      	ldr	r2, [r3, #0]
200014e6:	68fb      	ldr	r3, [r7, #12]
200014e8:	429a      	cmp	r2, r3
200014ea:	d9f6      	bls.n	200014da <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
200014ec:	68bb      	ldr	r3, [r7, #8]
200014ee:	685a      	ldr	r2, [r3, #4]
200014f0:	683b      	ldr	r3, [r7, #0]
200014f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
200014f4:	683b      	ldr	r3, [r7, #0]
200014f6:	685b      	ldr	r3, [r3, #4]
200014f8:	683a      	ldr	r2, [r7, #0]
200014fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
200014fc:	683b      	ldr	r3, [r7, #0]
200014fe:	68ba      	ldr	r2, [r7, #8]
20001500:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20001502:	68bb      	ldr	r3, [r7, #8]
20001504:	683a      	ldr	r2, [r7, #0]
20001506:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001508:	683b      	ldr	r3, [r7, #0]
2000150a:	687a      	ldr	r2, [r7, #4]
2000150c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000150e:	687b      	ldr	r3, [r7, #4]
20001510:	681b      	ldr	r3, [r3, #0]
20001512:	f103 0201 	add.w	r2, r3, #1
20001516:	687b      	ldr	r3, [r7, #4]
20001518:	601a      	str	r2, [r3, #0]
}
2000151a:	f107 0714 	add.w	r7, r7, #20
2000151e:	46bd      	mov	sp, r7
20001520:	bc80      	pop	{r7}
20001522:	4770      	bx	lr

20001524 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
20001524:	b480      	push	{r7}
20001526:	b085      	sub	sp, #20
20001528:	af00      	add	r7, sp, #0
2000152a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
2000152c:	687b      	ldr	r3, [r7, #4]
2000152e:	691b      	ldr	r3, [r3, #16]
20001530:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
20001532:	687b      	ldr	r3, [r7, #4]
20001534:	685b      	ldr	r3, [r3, #4]
20001536:	687a      	ldr	r2, [r7, #4]
20001538:	6892      	ldr	r2, [r2, #8]
2000153a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
2000153c:	687b      	ldr	r3, [r7, #4]
2000153e:	689b      	ldr	r3, [r3, #8]
20001540:	687a      	ldr	r2, [r7, #4]
20001542:	6852      	ldr	r2, [r2, #4]
20001544:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
20001546:	68fb      	ldr	r3, [r7, #12]
20001548:	685a      	ldr	r2, [r3, #4]
2000154a:	687b      	ldr	r3, [r7, #4]
2000154c:	429a      	cmp	r2, r3
2000154e:	d103      	bne.n	20001558 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
20001550:	687b      	ldr	r3, [r7, #4]
20001552:	689a      	ldr	r2, [r3, #8]
20001554:	68fb      	ldr	r3, [r7, #12]
20001556:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
20001558:	687b      	ldr	r3, [r7, #4]
2000155a:	f04f 0200 	mov.w	r2, #0
2000155e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
20001560:	68fb      	ldr	r3, [r7, #12]
20001562:	681b      	ldr	r3, [r3, #0]
20001564:	f103 32ff 	add.w	r2, r3, #4294967295
20001568:	68fb      	ldr	r3, [r7, #12]
2000156a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
2000156c:	68fb      	ldr	r3, [r7, #12]
2000156e:	681b      	ldr	r3, [r3, #0]
}
20001570:	4618      	mov	r0, r3
20001572:	f107 0714 	add.w	r7, r7, #20
20001576:	46bd      	mov	sp, r7
20001578:	bc80      	pop	{r7}
2000157a:	4770      	bx	lr

2000157c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
2000157c:	b580      	push	{r7, lr}
2000157e:	b084      	sub	sp, #16
20001580:	af00      	add	r7, sp, #0
20001582:	6078      	str	r0, [r7, #4]
20001584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001586:	687b      	ldr	r3, [r7, #4]
20001588:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
2000158a:	68bb      	ldr	r3, [r7, #8]
2000158c:	2b00      	cmp	r3, #0
2000158e:	d109      	bne.n	200015a4 <xQueueGenericReset+0x28>
20001590:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001594:	f383 8811 	msr	BASEPRI, r3
20001598:	f3bf 8f6f 	isb	sy
2000159c:	f3bf 8f4f 	dsb	sy
200015a0:	60fb      	str	r3, [r7, #12]
200015a2:	e7fe      	b.n	200015a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
200015a4:	f003 f83a 	bl	2000461c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
200015a8:	68bb      	ldr	r3, [r7, #8]
200015aa:	681a      	ldr	r2, [r3, #0]
200015ac:	68bb      	ldr	r3, [r7, #8]
200015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015b0:	68b9      	ldr	r1, [r7, #8]
200015b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
200015b4:	fb01 f303 	mul.w	r3, r1, r3
200015b8:	441a      	add	r2, r3
200015ba:	68bb      	ldr	r3, [r7, #8]
200015bc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
200015be:	68bb      	ldr	r3, [r7, #8]
200015c0:	f04f 0200 	mov.w	r2, #0
200015c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
200015c6:	68bb      	ldr	r3, [r7, #8]
200015c8:	681a      	ldr	r2, [r3, #0]
200015ca:	68bb      	ldr	r3, [r7, #8]
200015cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
200015ce:	68bb      	ldr	r3, [r7, #8]
200015d0:	681a      	ldr	r2, [r3, #0]
200015d2:	68bb      	ldr	r3, [r7, #8]
200015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015d6:	f103 33ff 	add.w	r3, r3, #4294967295
200015da:	68b9      	ldr	r1, [r7, #8]
200015dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
200015de:	fb01 f303 	mul.w	r3, r1, r3
200015e2:	441a      	add	r2, r3
200015e4:	68bb      	ldr	r3, [r7, #8]
200015e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
200015e8:	68bb      	ldr	r3, [r7, #8]
200015ea:	f04f 32ff 	mov.w	r2, #4294967295
200015ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
200015f2:	68bb      	ldr	r3, [r7, #8]
200015f4:	f04f 32ff 	mov.w	r2, #4294967295
200015f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
200015fc:	683b      	ldr	r3, [r7, #0]
200015fe:	2b00      	cmp	r3, #0
20001600:	d118      	bne.n	20001634 <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001602:	68bb      	ldr	r3, [r7, #8]
20001604:	691b      	ldr	r3, [r3, #16]
20001606:	2b00      	cmp	r3, #0
20001608:	d021      	beq.n	2000164e <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000160a:	68bb      	ldr	r3, [r7, #8]
2000160c:	f103 0310 	add.w	r3, r3, #16
20001610:	4618      	mov	r0, r3
20001612:	f001 fb47 	bl	20002ca4 <xTaskRemoveFromEventList>
20001616:	4603      	mov	r3, r0
20001618:	2b00      	cmp	r3, #0
2000161a:	d01a      	beq.n	20001652 <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
2000161c:	f64e 5304 	movw	r3, #60676	; 0xed04
20001620:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001628:	601a      	str	r2, [r3, #0]
2000162a:	f3bf 8f4f 	dsb	sy
2000162e:	f3bf 8f6f 	isb	sy
20001632:	e00f      	b.n	20001654 <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
20001634:	68bb      	ldr	r3, [r7, #8]
20001636:	f103 0310 	add.w	r3, r3, #16
2000163a:	4618      	mov	r0, r3
2000163c:	f7ff fee2 	bl	20001404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
20001640:	68bb      	ldr	r3, [r7, #8]
20001642:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001646:	4618      	mov	r0, r3
20001648:	f7ff fedc 	bl	20001404 <vListInitialise>
2000164c:	e002      	b.n	20001654 <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
2000164e:	bf00      	nop
20001650:	e000      	b.n	20001654 <xQueueGenericReset+0xd8>
20001652:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
20001654:	f003 f81a 	bl	2000468c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
20001658:	f04f 0301 	mov.w	r3, #1
}
2000165c:	4618      	mov	r0, r3
2000165e:	f107 0710 	add.w	r7, r7, #16
20001662:	46bd      	mov	sp, r7
20001664:	bd80      	pop	{r7, pc}
20001666:	bf00      	nop

20001668 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
20001668:	b580      	push	{r7, lr}
2000166a:	b08a      	sub	sp, #40	; 0x28
2000166c:	af02      	add	r7, sp, #8
2000166e:	60f8      	str	r0, [r7, #12]
20001670:	60b9      	str	r1, [r7, #8]
20001672:	4613      	mov	r3, r2
20001674:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
20001676:	68fb      	ldr	r3, [r7, #12]
20001678:	2b00      	cmp	r3, #0
2000167a:	d109      	bne.n	20001690 <xQueueGenericCreate+0x28>
2000167c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001680:	f383 8811 	msr	BASEPRI, r3
20001684:	f3bf 8f6f 	isb	sy
20001688:	f3bf 8f4f 	dsb	sy
2000168c:	61fb      	str	r3, [r7, #28]
2000168e:	e7fe      	b.n	2000168e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
20001690:	68bb      	ldr	r3, [r7, #8]
20001692:	2b00      	cmp	r3, #0
20001694:	d103      	bne.n	2000169e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
20001696:	f04f 0300 	mov.w	r3, #0
2000169a:	617b      	str	r3, [r7, #20]
2000169c:	e004      	b.n	200016a8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000169e:	68fb      	ldr	r3, [r7, #12]
200016a0:	68ba      	ldr	r2, [r7, #8]
200016a2:	fb02 f303 	mul.w	r3, r2, r3
200016a6:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
200016a8:	697b      	ldr	r3, [r7, #20]
200016aa:	f103 0350 	add.w	r3, r3, #80	; 0x50
200016ae:	4618      	mov	r0, r3
200016b0:	f002 fc66 	bl	20003f80 <pvPortMalloc>
200016b4:	4603      	mov	r3, r0
200016b6:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
200016b8:	693b      	ldr	r3, [r7, #16]
200016ba:	2b00      	cmp	r3, #0
200016bc:	d00b      	beq.n	200016d6 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
200016be:	693b      	ldr	r3, [r7, #16]
200016c0:	f103 0350 	add.w	r3, r3, #80	; 0x50
200016c4:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
200016c6:	79fb      	ldrb	r3, [r7, #7]
200016c8:	693a      	ldr	r2, [r7, #16]
200016ca:	9200      	str	r2, [sp, #0]
200016cc:	68f8      	ldr	r0, [r7, #12]
200016ce:	68b9      	ldr	r1, [r7, #8]
200016d0:	69ba      	ldr	r2, [r7, #24]
200016d2:	f000 f807 	bl	200016e4 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
200016d6:	693b      	ldr	r3, [r7, #16]
	}
200016d8:	4618      	mov	r0, r3
200016da:	f107 0720 	add.w	r7, r7, #32
200016de:	46bd      	mov	sp, r7
200016e0:	bd80      	pop	{r7, pc}
200016e2:	bf00      	nop

200016e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
200016e4:	b580      	push	{r7, lr}
200016e6:	b084      	sub	sp, #16
200016e8:	af00      	add	r7, sp, #0
200016ea:	60f8      	str	r0, [r7, #12]
200016ec:	60b9      	str	r1, [r7, #8]
200016ee:	607a      	str	r2, [r7, #4]
200016f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
200016f2:	68bb      	ldr	r3, [r7, #8]
200016f4:	2b00      	cmp	r3, #0
200016f6:	d103      	bne.n	20001700 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
200016f8:	69ba      	ldr	r2, [r7, #24]
200016fa:	69bb      	ldr	r3, [r7, #24]
200016fc:	601a      	str	r2, [r3, #0]
200016fe:	e002      	b.n	20001706 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001700:	687a      	ldr	r2, [r7, #4]
20001702:	69bb      	ldr	r3, [r7, #24]
20001704:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
20001706:	69bb      	ldr	r3, [r7, #24]
20001708:	68fa      	ldr	r2, [r7, #12]
2000170a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
2000170c:	69bb      	ldr	r3, [r7, #24]
2000170e:	68ba      	ldr	r2, [r7, #8]
20001710:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
20001712:	69b8      	ldr	r0, [r7, #24]
20001714:	f04f 0101 	mov.w	r1, #1
20001718:	f7ff ff30 	bl	2000157c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
2000171c:	69bb      	ldr	r3, [r7, #24]
2000171e:	78fa      	ldrb	r2, [r7, #3]
20001720:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
20001724:	f107 0710 	add.w	r7, r7, #16
20001728:	46bd      	mov	sp, r7
2000172a:	bd80      	pop	{r7, pc}

2000172c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
2000172c:	b580      	push	{r7, lr}
2000172e:	b082      	sub	sp, #8
20001730:	af00      	add	r7, sp, #0
20001732:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
20001734:	687b      	ldr	r3, [r7, #4]
20001736:	2b00      	cmp	r3, #0
20001738:	d014      	beq.n	20001764 <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
2000173a:	687b      	ldr	r3, [r7, #4]
2000173c:	f04f 0200 	mov.w	r2, #0
20001740:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
20001742:	687b      	ldr	r3, [r7, #4]
20001744:	f04f 0200 	mov.w	r2, #0
20001748:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
2000174a:	687b      	ldr	r3, [r7, #4]
2000174c:	f04f 0200 	mov.w	r2, #0
20001750:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
20001752:	6878      	ldr	r0, [r7, #4]
20001754:	f04f 0100 	mov.w	r1, #0
20001758:	f04f 0200 	mov.w	r2, #0
2000175c:	f04f 0300 	mov.w	r3, #0
20001760:	f000 f820 	bl	200017a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
20001764:	f107 0708 	add.w	r7, r7, #8
20001768:	46bd      	mov	sp, r7
2000176a:	bd80      	pop	{r7, pc}

2000176c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
2000176c:	b580      	push	{r7, lr}
2000176e:	b086      	sub	sp, #24
20001770:	af00      	add	r7, sp, #0
20001772:	4603      	mov	r3, r0
20001774:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
20001776:	f04f 0301 	mov.w	r3, #1
2000177a:	613b      	str	r3, [r7, #16]
2000177c:	f04f 0300 	mov.w	r3, #0
20001780:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
20001782:	79fb      	ldrb	r3, [r7, #7]
20001784:	6938      	ldr	r0, [r7, #16]
20001786:	6979      	ldr	r1, [r7, #20]
20001788:	461a      	mov	r2, r3
2000178a:	f7ff ff6d 	bl	20001668 <xQueueGenericCreate>
2000178e:	4603      	mov	r3, r0
20001790:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
20001792:	68f8      	ldr	r0, [r7, #12]
20001794:	f7ff ffca 	bl	2000172c <prvInitialiseMutex>

		return pxNewQueue;
20001798:	68fb      	ldr	r3, [r7, #12]
	}
2000179a:	4618      	mov	r0, r3
2000179c:	f107 0718 	add.w	r7, r7, #24
200017a0:	46bd      	mov	sp, r7
200017a2:	bd80      	pop	{r7, pc}

200017a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
200017a4:	b580      	push	{r7, lr}
200017a6:	b08e      	sub	sp, #56	; 0x38
200017a8:	af00      	add	r7, sp, #0
200017aa:	60f8      	str	r0, [r7, #12]
200017ac:	60b9      	str	r1, [r7, #8]
200017ae:	607a      	str	r2, [r7, #4]
200017b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
200017b2:	f04f 0300 	mov.w	r3, #0
200017b6:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200017b8:	68fb      	ldr	r3, [r7, #12]
200017ba:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
200017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017be:	2b00      	cmp	r3, #0
200017c0:	d109      	bne.n	200017d6 <xQueueGenericSend+0x32>
200017c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200017c6:	f383 8811 	msr	BASEPRI, r3
200017ca:	f3bf 8f6f 	isb	sy
200017ce:	f3bf 8f4f 	dsb	sy
200017d2:	62bb      	str	r3, [r7, #40]	; 0x28
200017d4:	e7fe      	b.n	200017d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
200017d6:	68bb      	ldr	r3, [r7, #8]
200017d8:	2b00      	cmp	r3, #0
200017da:	d103      	bne.n	200017e4 <xQueueGenericSend+0x40>
200017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200017e0:	2b00      	cmp	r3, #0
200017e2:	d102      	bne.n	200017ea <xQueueGenericSend+0x46>
200017e4:	f04f 0301 	mov.w	r3, #1
200017e8:	e001      	b.n	200017ee <xQueueGenericSend+0x4a>
200017ea:	f04f 0300 	mov.w	r3, #0
200017ee:	2b00      	cmp	r3, #0
200017f0:	d109      	bne.n	20001806 <xQueueGenericSend+0x62>
200017f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200017f6:	f383 8811 	msr	BASEPRI, r3
200017fa:	f3bf 8f6f 	isb	sy
200017fe:	f3bf 8f4f 	dsb	sy
20001802:	62fb      	str	r3, [r7, #44]	; 0x2c
20001804:	e7fe      	b.n	20001804 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001806:	683b      	ldr	r3, [r7, #0]
20001808:	2b02      	cmp	r3, #2
2000180a:	d103      	bne.n	20001814 <xQueueGenericSend+0x70>
2000180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001810:	2b01      	cmp	r3, #1
20001812:	d102      	bne.n	2000181a <xQueueGenericSend+0x76>
20001814:	f04f 0301 	mov.w	r3, #1
20001818:	e001      	b.n	2000181e <xQueueGenericSend+0x7a>
2000181a:	f04f 0300 	mov.w	r3, #0
2000181e:	2b00      	cmp	r3, #0
20001820:	d109      	bne.n	20001836 <xQueueGenericSend+0x92>
20001822:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001826:	f383 8811 	msr	BASEPRI, r3
2000182a:	f3bf 8f6f 	isb	sy
2000182e:	f3bf 8f4f 	dsb	sy
20001832:	633b      	str	r3, [r7, #48]	; 0x30
20001834:	e7fe      	b.n	20001834 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001836:	f001 fc3d 	bl	200030b4 <xTaskGetSchedulerState>
2000183a:	4603      	mov	r3, r0
2000183c:	2b00      	cmp	r3, #0
2000183e:	d102      	bne.n	20001846 <xQueueGenericSend+0xa2>
20001840:	687b      	ldr	r3, [r7, #4]
20001842:	2b00      	cmp	r3, #0
20001844:	d102      	bne.n	2000184c <xQueueGenericSend+0xa8>
20001846:	f04f 0301 	mov.w	r3, #1
2000184a:	e001      	b.n	20001850 <xQueueGenericSend+0xac>
2000184c:	f04f 0300 	mov.w	r3, #0
20001850:	2b00      	cmp	r3, #0
20001852:	d10a      	bne.n	2000186a <xQueueGenericSend+0xc6>
20001854:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001858:	f383 8811 	msr	BASEPRI, r3
2000185c:	f3bf 8f6f 	isb	sy
20001860:	f3bf 8f4f 	dsb	sy
20001864:	637b      	str	r3, [r7, #52]	; 0x34
20001866:	e7fe      	b.n	20001866 <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
20001868:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
2000186a:	f002 fed7 	bl	2000461c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
2000186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001876:	429a      	cmp	r2, r3
20001878:	d302      	bcc.n	20001880 <xQueueGenericSend+0xdc>
2000187a:	683b      	ldr	r3, [r7, #0]
2000187c:	2b02      	cmp	r3, #2
2000187e:	d134      	bne.n	200018ea <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001880:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001882:	68b9      	ldr	r1, [r7, #8]
20001884:	683a      	ldr	r2, [r7, #0]
20001886:	f000 fa7b 	bl	20001d80 <prvCopyDataToQueue>
2000188a:	4603      	mov	r3, r0
2000188c:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001892:	2b00      	cmp	r3, #0
20001894:	d014      	beq.n	200018c0 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001898:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000189c:	4618      	mov	r0, r3
2000189e:	f001 fa01 	bl	20002ca4 <xTaskRemoveFromEventList>
200018a2:	4603      	mov	r3, r0
200018a4:	2b00      	cmp	r3, #0
200018a6:	d01a      	beq.n	200018de <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
200018a8:	f64e 5304 	movw	r3, #60676	; 0xed04
200018ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
200018b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200018b4:	601a      	str	r2, [r3, #0]
200018b6:	f3bf 8f4f 	dsb	sy
200018ba:	f3bf 8f6f 	isb	sy
200018be:	e00f      	b.n	200018e0 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
200018c0:	6a3b      	ldr	r3, [r7, #32]
200018c2:	2b00      	cmp	r3, #0
200018c4:	d00c      	beq.n	200018e0 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
200018c6:	f64e 5304 	movw	r3, #60676	; 0xed04
200018ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
200018ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200018d2:	601a      	str	r2, [r3, #0]
200018d4:	f3bf 8f4f 	dsb	sy
200018d8:	f3bf 8f6f 	isb	sy
200018dc:	e000      	b.n	200018e0 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
200018de:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
200018e0:	f002 fed4 	bl	2000468c <vPortExitCritical>
				return pdPASS;
200018e4:	f04f 0301 	mov.w	r3, #1
200018e8:	e06f      	b.n	200019ca <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
200018ea:	687b      	ldr	r3, [r7, #4]
200018ec:	2b00      	cmp	r3, #0
200018ee:	d104      	bne.n	200018fa <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
200018f0:	f002 fecc 	bl	2000468c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
200018f4:	f04f 0300 	mov.w	r3, #0
200018f8:	e067      	b.n	200019ca <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
200018fa:	69fb      	ldr	r3, [r7, #28]
200018fc:	2b00      	cmp	r3, #0
200018fe:	d107      	bne.n	20001910 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001900:	f107 0314 	add.w	r3, r7, #20
20001904:	4618      	mov	r0, r3
20001906:	f001 fa45 	bl	20002d94 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000190a:	f04f 0301 	mov.w	r3, #1
2000190e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001910:	f002 febc 	bl	2000468c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001914:	f000 fea6 	bl	20002664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001918:	f002 fe80 	bl	2000461c <vPortEnterCritical>
2000191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000191e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001922:	b2db      	uxtb	r3, r3
20001924:	b25b      	sxtb	r3, r3
20001926:	f1b3 3fff 	cmp.w	r3, #4294967295
2000192a:	d104      	bne.n	20001936 <xQueueGenericSend+0x192>
2000192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000192e:	f04f 0200 	mov.w	r2, #0
20001932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
2000193c:	b2db      	uxtb	r3, r3
2000193e:	b25b      	sxtb	r3, r3
20001940:	f1b3 3fff 	cmp.w	r3, #4294967295
20001944:	d104      	bne.n	20001950 <xQueueGenericSend+0x1ac>
20001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001948:	f04f 0200 	mov.w	r2, #0
2000194c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001950:	f002 fe9c 	bl	2000468c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001954:	f107 0214 	add.w	r2, r7, #20
20001958:	f107 0304 	add.w	r3, r7, #4
2000195c:	4610      	mov	r0, r2
2000195e:	4619      	mov	r1, r3
20001960:	f001 fa3c 	bl	20002ddc <xTaskCheckForTimeOut>
20001964:	4603      	mov	r3, r0
20001966:	2b00      	cmp	r3, #0
20001968:	d128      	bne.n	200019bc <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2000196a:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000196c:	f000 fb18 	bl	20001fa0 <prvIsQueueFull>
20001970:	4603      	mov	r3, r0
20001972:	2b00      	cmp	r3, #0
20001974:	d01c      	beq.n	200019b0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
20001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001978:	f103 0210 	add.w	r2, r3, #16
2000197c:	687b      	ldr	r3, [r7, #4]
2000197e:	4610      	mov	r0, r2
20001980:	4619      	mov	r1, r3
20001982:	f001 f93d 	bl	20002c00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
20001986:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001988:	f000 fa9a 	bl	20001ec0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
2000198c:	f000 fe7c 	bl	20002688 <xTaskResumeAll>
20001990:	4603      	mov	r3, r0
20001992:	2b00      	cmp	r3, #0
20001994:	f47f af68 	bne.w	20001868 <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
20001998:	f64e 5304 	movw	r3, #60676	; 0xed04
2000199c:	f2ce 0300 	movt	r3, #57344	; 0xe000
200019a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200019a4:	601a      	str	r2, [r3, #0]
200019a6:	f3bf 8f4f 	dsb	sy
200019aa:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200019ae:	e75c      	b.n	2000186a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
200019b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
200019b2:	f000 fa85 	bl	20001ec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
200019b6:	f000 fe67 	bl	20002688 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200019ba:	e756      	b.n	2000186a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
200019bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
200019be:	f000 fa7f 	bl	20001ec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
200019c2:	f000 fe61 	bl	20002688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
200019c6:	f04f 0300 	mov.w	r3, #0
		}
	}
}
200019ca:	4618      	mov	r0, r3
200019cc:	f107 0738 	add.w	r7, r7, #56	; 0x38
200019d0:	46bd      	mov	sp, r7
200019d2:	bd80      	pop	{r7, pc}

200019d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
200019d4:	b580      	push	{r7, lr}
200019d6:	b08e      	sub	sp, #56	; 0x38
200019d8:	af00      	add	r7, sp, #0
200019da:	60f8      	str	r0, [r7, #12]
200019dc:	60b9      	str	r1, [r7, #8]
200019de:	607a      	str	r2, [r7, #4]
200019e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200019e2:	68fb      	ldr	r3, [r7, #12]
200019e4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
200019e6:	69bb      	ldr	r3, [r7, #24]
200019e8:	2b00      	cmp	r3, #0
200019ea:	d109      	bne.n	20001a00 <xQueueGenericSendFromISR+0x2c>
200019ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200019f0:	f383 8811 	msr	BASEPRI, r3
200019f4:	f3bf 8f6f 	isb	sy
200019f8:	f3bf 8f4f 	dsb	sy
200019fc:	623b      	str	r3, [r7, #32]
200019fe:	e7fe      	b.n	200019fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001a00:	68bb      	ldr	r3, [r7, #8]
20001a02:	2b00      	cmp	r3, #0
20001a04:	d103      	bne.n	20001a0e <xQueueGenericSendFromISR+0x3a>
20001a06:	69bb      	ldr	r3, [r7, #24]
20001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a0a:	2b00      	cmp	r3, #0
20001a0c:	d102      	bne.n	20001a14 <xQueueGenericSendFromISR+0x40>
20001a0e:	f04f 0301 	mov.w	r3, #1
20001a12:	e001      	b.n	20001a18 <xQueueGenericSendFromISR+0x44>
20001a14:	f04f 0300 	mov.w	r3, #0
20001a18:	2b00      	cmp	r3, #0
20001a1a:	d109      	bne.n	20001a30 <xQueueGenericSendFromISR+0x5c>
20001a1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a20:	f383 8811 	msr	BASEPRI, r3
20001a24:	f3bf 8f6f 	isb	sy
20001a28:	f3bf 8f4f 	dsb	sy
20001a2c:	627b      	str	r3, [r7, #36]	; 0x24
20001a2e:	e7fe      	b.n	20001a2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001a30:	683b      	ldr	r3, [r7, #0]
20001a32:	2b02      	cmp	r3, #2
20001a34:	d103      	bne.n	20001a3e <xQueueGenericSendFromISR+0x6a>
20001a36:	69bb      	ldr	r3, [r7, #24]
20001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001a3a:	2b01      	cmp	r3, #1
20001a3c:	d102      	bne.n	20001a44 <xQueueGenericSendFromISR+0x70>
20001a3e:	f04f 0301 	mov.w	r3, #1
20001a42:	e001      	b.n	20001a48 <xQueueGenericSendFromISR+0x74>
20001a44:	f04f 0300 	mov.w	r3, #0
20001a48:	2b00      	cmp	r3, #0
20001a4a:	d109      	bne.n	20001a60 <xQueueGenericSendFromISR+0x8c>
20001a4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a50:	f383 8811 	msr	BASEPRI, r3
20001a54:	f3bf 8f6f 	isb	sy
20001a58:	f3bf 8f4f 	dsb	sy
20001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
20001a5e:	e7fe      	b.n	20001a5e <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001a60:	f002 feb0 	bl	200047c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20001a64:	f3ef 8211 	mrs	r2, BASEPRI
20001a68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a6c:	f383 8811 	msr	BASEPRI, r3
20001a70:	f3bf 8f6f 	isb	sy
20001a74:	f3bf 8f4f 	dsb	sy
20001a78:	633a      	str	r2, [r7, #48]	; 0x30
20001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
20001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20001a7e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001a80:	69bb      	ldr	r3, [r7, #24]
20001a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001a84:	69bb      	ldr	r3, [r7, #24]
20001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001a88:	429a      	cmp	r2, r3
20001a8a:	d302      	bcc.n	20001a92 <xQueueGenericSendFromISR+0xbe>
20001a8c:	683b      	ldr	r3, [r7, #0]
20001a8e:	2b02      	cmp	r3, #2
20001a90:	d134      	bne.n	20001afc <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001a92:	69bb      	ldr	r3, [r7, #24]
20001a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001a98:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001a9a:	69b8      	ldr	r0, [r7, #24]
20001a9c:	68b9      	ldr	r1, [r7, #8]
20001a9e:	683a      	ldr	r2, [r7, #0]
20001aa0:	f000 f96e 	bl	20001d80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
20001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
20001aac:	d114      	bne.n	20001ad8 <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001aae:	69bb      	ldr	r3, [r7, #24]
20001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001ab2:	2b00      	cmp	r3, #0
20001ab4:	d019      	beq.n	20001aea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001ab6:	69bb      	ldr	r3, [r7, #24]
20001ab8:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001abc:	4618      	mov	r0, r3
20001abe:	f001 f8f1 	bl	20002ca4 <xTaskRemoveFromEventList>
20001ac2:	4603      	mov	r3, r0
20001ac4:	2b00      	cmp	r3, #0
20001ac6:	d012      	beq.n	20001aee <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001ac8:	687b      	ldr	r3, [r7, #4]
20001aca:	2b00      	cmp	r3, #0
20001acc:	d011      	beq.n	20001af2 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001ace:	687b      	ldr	r3, [r7, #4]
20001ad0:	f04f 0201 	mov.w	r2, #1
20001ad4:	601a      	str	r2, [r3, #0]
20001ad6:	e00d      	b.n	20001af4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001ad8:	7ffb      	ldrb	r3, [r7, #31]
20001ada:	f103 0301 	add.w	r3, r3, #1
20001ade:	b2db      	uxtb	r3, r3
20001ae0:	461a      	mov	r2, r3
20001ae2:	69bb      	ldr	r3, [r7, #24]
20001ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001ae8:	e004      	b.n	20001af4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001aea:	bf00      	nop
20001aec:	e002      	b.n	20001af4 <xQueueGenericSendFromISR+0x120>
20001aee:	bf00      	nop
20001af0:	e000      	b.n	20001af4 <xQueueGenericSendFromISR+0x120>
20001af2:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
20001af4:	f04f 0301 	mov.w	r3, #1
20001af8:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001afa:	e002      	b.n	20001b02 <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001afc:	f04f 0300 	mov.w	r3, #0
20001b00:	613b      	str	r3, [r7, #16]
20001b02:	697b      	ldr	r3, [r7, #20]
20001b04:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001b08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001b0c:	693b      	ldr	r3, [r7, #16]
}
20001b0e:	4618      	mov	r0, r3
20001b10:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001b14:	46bd      	mov	sp, r7
20001b16:	bd80      	pop	{r7, pc}

20001b18 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
20001b18:	b580      	push	{r7, lr}
20001b1a:	b08e      	sub	sp, #56	; 0x38
20001b1c:	af00      	add	r7, sp, #0
20001b1e:	60f8      	str	r0, [r7, #12]
20001b20:	60b9      	str	r1, [r7, #8]
20001b22:	607a      	str	r2, [r7, #4]
20001b24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
20001b26:	f04f 0300 	mov.w	r3, #0
20001b2a:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001b2c:	68fb      	ldr	r3, [r7, #12]
20001b2e:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
20001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b32:	2b00      	cmp	r3, #0
20001b34:	d109      	bne.n	20001b4a <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20001b36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001b3a:	f383 8811 	msr	BASEPRI, r3
20001b3e:	f3bf 8f6f 	isb	sy
20001b42:	f3bf 8f4f 	dsb	sy
20001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
20001b48:	e7fe      	b.n	20001b48 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001b4a:	68bb      	ldr	r3, [r7, #8]
20001b4c:	2b00      	cmp	r3, #0
20001b4e:	d103      	bne.n	20001b58 <xQueueGenericReceive+0x40>
20001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001b54:	2b00      	cmp	r3, #0
20001b56:	d102      	bne.n	20001b5e <xQueueGenericReceive+0x46>
20001b58:	f04f 0301 	mov.w	r3, #1
20001b5c:	e001      	b.n	20001b62 <xQueueGenericReceive+0x4a>
20001b5e:	f04f 0300 	mov.w	r3, #0
20001b62:	2b00      	cmp	r3, #0
20001b64:	d109      	bne.n	20001b7a <xQueueGenericReceive+0x62>
20001b66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001b6a:	f383 8811 	msr	BASEPRI, r3
20001b6e:	f3bf 8f6f 	isb	sy
20001b72:	f3bf 8f4f 	dsb	sy
20001b76:	633b      	str	r3, [r7, #48]	; 0x30
20001b78:	e7fe      	b.n	20001b78 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001b7a:	f001 fa9b 	bl	200030b4 <xTaskGetSchedulerState>
20001b7e:	4603      	mov	r3, r0
20001b80:	2b00      	cmp	r3, #0
20001b82:	d102      	bne.n	20001b8a <xQueueGenericReceive+0x72>
20001b84:	687b      	ldr	r3, [r7, #4]
20001b86:	2b00      	cmp	r3, #0
20001b88:	d102      	bne.n	20001b90 <xQueueGenericReceive+0x78>
20001b8a:	f04f 0301 	mov.w	r3, #1
20001b8e:	e001      	b.n	20001b94 <xQueueGenericReceive+0x7c>
20001b90:	f04f 0300 	mov.w	r3, #0
20001b94:	2b00      	cmp	r3, #0
20001b96:	d10c      	bne.n	20001bb2 <xQueueGenericReceive+0x9a>
20001b98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001b9c:	f383 8811 	msr	BASEPRI, r3
20001ba0:	f3bf 8f6f 	isb	sy
20001ba4:	f3bf 8f4f 	dsb	sy
20001ba8:	637b      	str	r3, [r7, #52]	; 0x34
20001baa:	e7fe      	b.n	20001baa <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001bac:	bf00      	nop
20001bae:	e000      	b.n	20001bb2 <xQueueGenericReceive+0x9a>
20001bb0:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
20001bb2:	f002 fd33 	bl	2000461c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001bba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001bbe:	2b00      	cmp	r3, #0
20001bc0:	d055      	beq.n	20001c6e <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
20001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bc4:	68db      	ldr	r3, [r3, #12]
20001bc6:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001bca:	68b9      	ldr	r1, [r7, #8]
20001bcc:	f000 f950 	bl	20001e70 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
20001bd0:	683b      	ldr	r3, [r7, #0]
20001bd2:	2b00      	cmp	r3, #0
20001bd4:	d127      	bne.n	20001c26 <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
20001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001bd8:	f103 32ff 	add.w	r2, r3, #4294967295
20001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bde:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001be2:	681b      	ldr	r3, [r3, #0]
20001be4:	2b00      	cmp	r3, #0
20001be6:	d105      	bne.n	20001bf4 <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
20001be8:	f001 fbd4 	bl	20003394 <pvTaskIncrementMutexHeldCount>
20001bec:	4603      	mov	r3, r0
20001bee:	461a      	mov	r2, r3
20001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bf2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bf6:	691b      	ldr	r3, [r3, #16]
20001bf8:	2b00      	cmp	r3, #0
20001bfa:	d030      	beq.n	20001c5e <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bfe:	f103 0310 	add.w	r3, r3, #16
20001c02:	4618      	mov	r0, r3
20001c04:	f001 f84e 	bl	20002ca4 <xTaskRemoveFromEventList>
20001c08:	4603      	mov	r3, r0
20001c0a:	2b00      	cmp	r3, #0
20001c0c:	d029      	beq.n	20001c62 <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
20001c0e:	f64e 5304 	movw	r3, #60676	; 0xed04
20001c12:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c1a:	601a      	str	r2, [r3, #0]
20001c1c:	f3bf 8f4f 	dsb	sy
20001c20:	f3bf 8f6f 	isb	sy
20001c24:	e01e      	b.n	20001c64 <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
20001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c28:	6a3a      	ldr	r2, [r7, #32]
20001c2a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001c30:	2b00      	cmp	r3, #0
20001c32:	d017      	beq.n	20001c64 <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c36:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001c3a:	4618      	mov	r0, r3
20001c3c:	f001 f832 	bl	20002ca4 <xTaskRemoveFromEventList>
20001c40:	4603      	mov	r3, r0
20001c42:	2b00      	cmp	r3, #0
20001c44:	d00e      	beq.n	20001c64 <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
20001c46:	f64e 5304 	movw	r3, #60676	; 0xed04
20001c4a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c52:	601a      	str	r2, [r3, #0]
20001c54:	f3bf 8f4f 	dsb	sy
20001c58:	f3bf 8f6f 	isb	sy
20001c5c:	e002      	b.n	20001c64 <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
20001c5e:	bf00      	nop
20001c60:	e000      	b.n	20001c64 <xQueueGenericReceive+0x14c>
20001c62:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
20001c64:	f002 fd12 	bl	2000468c <vPortExitCritical>
				return pdPASS;
20001c68:	f04f 0301 	mov.w	r3, #1
20001c6c:	e083      	b.n	20001d76 <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001c6e:	687b      	ldr	r3, [r7, #4]
20001c70:	2b00      	cmp	r3, #0
20001c72:	d104      	bne.n	20001c7e <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001c74:	f002 fd0a 	bl	2000468c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001c78:	f04f 0300 	mov.w	r3, #0
20001c7c:	e07b      	b.n	20001d76 <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
20001c7e:	69fb      	ldr	r3, [r7, #28]
20001c80:	2b00      	cmp	r3, #0
20001c82:	d107      	bne.n	20001c94 <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001c84:	f107 0314 	add.w	r3, r7, #20
20001c88:	4618      	mov	r0, r3
20001c8a:	f001 f883 	bl	20002d94 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001c8e:	f04f 0301 	mov.w	r3, #1
20001c92:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001c94:	f002 fcfa 	bl	2000468c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001c98:	f000 fce4 	bl	20002664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001c9c:	f002 fcbe 	bl	2000461c <vPortEnterCritical>
20001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ca6:	b2db      	uxtb	r3, r3
20001ca8:	b25b      	sxtb	r3, r3
20001caa:	f1b3 3fff 	cmp.w	r3, #4294967295
20001cae:	d104      	bne.n	20001cba <xQueueGenericReceive+0x1a2>
20001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cb2:	f04f 0200 	mov.w	r2, #0
20001cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001cc0:	b2db      	uxtb	r3, r3
20001cc2:	b25b      	sxtb	r3, r3
20001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
20001cc8:	d104      	bne.n	20001cd4 <xQueueGenericReceive+0x1bc>
20001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ccc:	f04f 0200 	mov.w	r2, #0
20001cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001cd4:	f002 fcda 	bl	2000468c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001cd8:	f107 0214 	add.w	r2, r7, #20
20001cdc:	f107 0304 	add.w	r3, r7, #4
20001ce0:	4610      	mov	r0, r2
20001ce2:	4619      	mov	r1, r3
20001ce4:	f001 f87a 	bl	20002ddc <xTaskCheckForTimeOut>
20001ce8:	4603      	mov	r3, r0
20001cea:	2b00      	cmp	r3, #0
20001cec:	d135      	bne.n	20001d5a <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001cee:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001cf0:	f000 f93c 	bl	20001f6c <prvIsQueueEmpty>
20001cf4:	4603      	mov	r3, r0
20001cf6:	2b00      	cmp	r3, #0
20001cf8:	d029      	beq.n	20001d4e <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cfc:	681b      	ldr	r3, [r3, #0]
20001cfe:	2b00      	cmp	r3, #0
20001d00:	d108      	bne.n	20001d14 <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
20001d02:	f002 fc8b 	bl	2000461c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
20001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d08:	685b      	ldr	r3, [r3, #4]
20001d0a:	4618      	mov	r0, r3
20001d0c:	f001 f9f6 	bl	200030fc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
20001d10:	f002 fcbc 	bl	2000468c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d16:	f103 0224 	add.w	r2, r3, #36	; 0x24
20001d1a:	687b      	ldr	r3, [r7, #4]
20001d1c:	4610      	mov	r0, r2
20001d1e:	4619      	mov	r1, r3
20001d20:	f000 ff6e 	bl	20002c00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001d24:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d26:	f000 f8cb 	bl	20001ec0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001d2a:	f000 fcad 	bl	20002688 <xTaskResumeAll>
20001d2e:	4603      	mov	r3, r0
20001d30:	2b00      	cmp	r3, #0
20001d32:	f47f af3b 	bne.w	20001bac <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
20001d36:	f64e 5304 	movw	r3, #60676	; 0xed04
20001d3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001d42:	601a      	str	r2, [r3, #0]
20001d44:	f3bf 8f4f 	dsb	sy
20001d48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001d4c:	e731      	b.n	20001bb2 <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d50:	f000 f8b6 	bl	20001ec0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001d54:	f000 fc98 	bl	20002688 <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001d58:	e72b      	b.n	20001bb2 <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
20001d5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d5c:	f000 f8b0 	bl	20001ec0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001d60:	f000 fc92 	bl	20002688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d66:	f000 f901 	bl	20001f6c <prvIsQueueEmpty>
20001d6a:	4603      	mov	r3, r0
20001d6c:	2b00      	cmp	r3, #0
20001d6e:	f43f af1f 	beq.w	20001bb0 <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001d72:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
20001d76:	4618      	mov	r0, r3
20001d78:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001d7c:	46bd      	mov	sp, r7
20001d7e:	bd80      	pop	{r7, pc}

20001d80 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001d80:	b580      	push	{r7, lr}
20001d82:	b086      	sub	sp, #24
20001d84:	af00      	add	r7, sp, #0
20001d86:	60f8      	str	r0, [r7, #12]
20001d88:	60b9      	str	r1, [r7, #8]
20001d8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
20001d8c:	f04f 0300 	mov.w	r3, #0
20001d90:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001d92:	68fb      	ldr	r3, [r7, #12]
20001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001d96:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001d98:	68fb      	ldr	r3, [r7, #12]
20001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d9c:	2b00      	cmp	r3, #0
20001d9e:	d10f      	bne.n	20001dc0 <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001da0:	68fb      	ldr	r3, [r7, #12]
20001da2:	681b      	ldr	r3, [r3, #0]
20001da4:	2b00      	cmp	r3, #0
20001da6:	d155      	bne.n	20001e54 <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
20001da8:	68fb      	ldr	r3, [r7, #12]
20001daa:	685b      	ldr	r3, [r3, #4]
20001dac:	4618      	mov	r0, r3
20001dae:	f001 fa4b 	bl	20003248 <xTaskPriorityDisinherit>
20001db2:	4603      	mov	r3, r0
20001db4:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
20001db6:	68fb      	ldr	r3, [r7, #12]
20001db8:	f04f 0200 	mov.w	r2, #0
20001dbc:	605a      	str	r2, [r3, #4]
20001dbe:	e04c      	b.n	20001e5a <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001dc0:	687b      	ldr	r3, [r7, #4]
20001dc2:	2b00      	cmp	r3, #0
20001dc4:	d11a      	bne.n	20001dfc <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
20001dc6:	68fb      	ldr	r3, [r7, #12]
20001dc8:	689a      	ldr	r2, [r3, #8]
20001dca:	68fb      	ldr	r3, [r7, #12]
20001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001dce:	4610      	mov	r0, r2
20001dd0:	68b9      	ldr	r1, [r7, #8]
20001dd2:	461a      	mov	r2, r3
20001dd4:	f005 fc24 	bl	20007620 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
20001dd8:	68fb      	ldr	r3, [r7, #12]
20001dda:	689a      	ldr	r2, [r3, #8]
20001ddc:	68fb      	ldr	r3, [r7, #12]
20001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001de0:	441a      	add	r2, r3
20001de2:	68fb      	ldr	r3, [r7, #12]
20001de4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001de6:	68fb      	ldr	r3, [r7, #12]
20001de8:	689a      	ldr	r2, [r3, #8]
20001dea:	68fb      	ldr	r3, [r7, #12]
20001dec:	685b      	ldr	r3, [r3, #4]
20001dee:	429a      	cmp	r2, r3
20001df0:	d332      	bcc.n	20001e58 <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001df2:	68fb      	ldr	r3, [r7, #12]
20001df4:	681a      	ldr	r2, [r3, #0]
20001df6:	68fb      	ldr	r3, [r7, #12]
20001df8:	609a      	str	r2, [r3, #8]
20001dfa:	e02e      	b.n	20001e5a <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001dfc:	68fb      	ldr	r3, [r7, #12]
20001dfe:	68da      	ldr	r2, [r3, #12]
20001e00:	68fb      	ldr	r3, [r7, #12]
20001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e04:	4610      	mov	r0, r2
20001e06:	68b9      	ldr	r1, [r7, #8]
20001e08:	461a      	mov	r2, r3
20001e0a:	f005 fc09 	bl	20007620 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
20001e0e:	68fb      	ldr	r3, [r7, #12]
20001e10:	68da      	ldr	r2, [r3, #12]
20001e12:	68fb      	ldr	r3, [r7, #12]
20001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e16:	f1c3 0300 	rsb	r3, r3, #0
20001e1a:	441a      	add	r2, r3
20001e1c:	68fb      	ldr	r3, [r7, #12]
20001e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001e20:	68fb      	ldr	r3, [r7, #12]
20001e22:	68da      	ldr	r2, [r3, #12]
20001e24:	68fb      	ldr	r3, [r7, #12]
20001e26:	681b      	ldr	r3, [r3, #0]
20001e28:	429a      	cmp	r2, r3
20001e2a:	d208      	bcs.n	20001e3e <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
20001e2c:	68fb      	ldr	r3, [r7, #12]
20001e2e:	685a      	ldr	r2, [r3, #4]
20001e30:	68fb      	ldr	r3, [r7, #12]
20001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e34:	f1c3 0300 	rsb	r3, r3, #0
20001e38:	441a      	add	r2, r3
20001e3a:	68fb      	ldr	r3, [r7, #12]
20001e3c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20001e3e:	687b      	ldr	r3, [r7, #4]
20001e40:	2b02      	cmp	r3, #2
20001e42:	d10a      	bne.n	20001e5a <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001e44:	697b      	ldr	r3, [r7, #20]
20001e46:	2b00      	cmp	r3, #0
20001e48:	d007      	beq.n	20001e5a <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
20001e4a:	697b      	ldr	r3, [r7, #20]
20001e4c:	f103 33ff 	add.w	r3, r3, #4294967295
20001e50:	617b      	str	r3, [r7, #20]
20001e52:	e002      	b.n	20001e5a <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
20001e54:	bf00      	nop
20001e56:	e000      	b.n	20001e5a <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001e58:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
20001e5a:	697b      	ldr	r3, [r7, #20]
20001e5c:	f103 0201 	add.w	r2, r3, #1
20001e60:	68fb      	ldr	r3, [r7, #12]
20001e62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
20001e64:	693b      	ldr	r3, [r7, #16]
}
20001e66:	4618      	mov	r0, r3
20001e68:	f107 0718 	add.w	r7, r7, #24
20001e6c:	46bd      	mov	sp, r7
20001e6e:	bd80      	pop	{r7, pc}

20001e70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001e70:	b580      	push	{r7, lr}
20001e72:	b082      	sub	sp, #8
20001e74:	af00      	add	r7, sp, #0
20001e76:	6078      	str	r0, [r7, #4]
20001e78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001e7a:	687b      	ldr	r3, [r7, #4]
20001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e7e:	2b00      	cmp	r3, #0
20001e80:	d019      	beq.n	20001eb6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
20001e82:	687b      	ldr	r3, [r7, #4]
20001e84:	68da      	ldr	r2, [r3, #12]
20001e86:	687b      	ldr	r3, [r7, #4]
20001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e8a:	441a      	add	r2, r3
20001e8c:	687b      	ldr	r3, [r7, #4]
20001e8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001e90:	687b      	ldr	r3, [r7, #4]
20001e92:	68da      	ldr	r2, [r3, #12]
20001e94:	687b      	ldr	r3, [r7, #4]
20001e96:	685b      	ldr	r3, [r3, #4]
20001e98:	429a      	cmp	r2, r3
20001e9a:	d303      	bcc.n	20001ea4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
20001e9c:	687b      	ldr	r3, [r7, #4]
20001e9e:	681a      	ldr	r2, [r3, #0]
20001ea0:	687b      	ldr	r3, [r7, #4]
20001ea2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
20001ea4:	687b      	ldr	r3, [r7, #4]
20001ea6:	68da      	ldr	r2, [r3, #12]
20001ea8:	687b      	ldr	r3, [r7, #4]
20001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001eac:	6838      	ldr	r0, [r7, #0]
20001eae:	4611      	mov	r1, r2
20001eb0:	461a      	mov	r2, r3
20001eb2:	f005 fbb5 	bl	20007620 <memcpy>
	}
}
20001eb6:	f107 0708 	add.w	r7, r7, #8
20001eba:	46bd      	mov	sp, r7
20001ebc:	bd80      	pop	{r7, pc}
20001ebe:	bf00      	nop

20001ec0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001ec0:	b580      	push	{r7, lr}
20001ec2:	b084      	sub	sp, #16
20001ec4:	af00      	add	r7, sp, #0
20001ec6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001ec8:	f002 fba8 	bl	2000461c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001ecc:	687b      	ldr	r3, [r7, #4]
20001ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001ed2:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001ed4:	e012      	b.n	20001efc <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001ed6:	687b      	ldr	r3, [r7, #4]
20001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001eda:	2b00      	cmp	r3, #0
20001edc:	d013      	beq.n	20001f06 <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001ede:	687b      	ldr	r3, [r7, #4]
20001ee0:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001ee4:	4618      	mov	r0, r3
20001ee6:	f000 fedd 	bl	20002ca4 <xTaskRemoveFromEventList>
20001eea:	4603      	mov	r3, r0
20001eec:	2b00      	cmp	r3, #0
20001eee:	d001      	beq.n	20001ef4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001ef0:	f000 ffdc 	bl	20002eac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001ef4:	7bbb      	ldrb	r3, [r7, #14]
20001ef6:	f103 33ff 	add.w	r3, r3, #4294967295
20001efa:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001f00:	2b00      	cmp	r3, #0
20001f02:	dce8      	bgt.n	20001ed6 <prvUnlockQueue+0x16>
20001f04:	e000      	b.n	20001f08 <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
20001f06:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001f08:	687b      	ldr	r3, [r7, #4]
20001f0a:	f04f 32ff 	mov.w	r2, #4294967295
20001f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001f12:	f002 fbbb 	bl	2000468c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001f16:	f002 fb81 	bl	2000461c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001f1a:	687b      	ldr	r3, [r7, #4]
20001f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001f20:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001f22:	e012      	b.n	20001f4a <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001f24:	687b      	ldr	r3, [r7, #4]
20001f26:	691b      	ldr	r3, [r3, #16]
20001f28:	2b00      	cmp	r3, #0
20001f2a:	d013      	beq.n	20001f54 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001f2c:	687b      	ldr	r3, [r7, #4]
20001f2e:	f103 0310 	add.w	r3, r3, #16
20001f32:	4618      	mov	r0, r3
20001f34:	f000 feb6 	bl	20002ca4 <xTaskRemoveFromEventList>
20001f38:	4603      	mov	r3, r0
20001f3a:	2b00      	cmp	r3, #0
20001f3c:	d001      	beq.n	20001f42 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
20001f3e:	f000 ffb5 	bl	20002eac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001f42:	7bfb      	ldrb	r3, [r7, #15]
20001f44:	f103 33ff 	add.w	r3, r3, #4294967295
20001f48:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001f4e:	2b00      	cmp	r3, #0
20001f50:	dce8      	bgt.n	20001f24 <prvUnlockQueue+0x64>
20001f52:	e000      	b.n	20001f56 <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
20001f54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001f56:	687b      	ldr	r3, [r7, #4]
20001f58:	f04f 32ff 	mov.w	r2, #4294967295
20001f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001f60:	f002 fb94 	bl	2000468c <vPortExitCritical>
}
20001f64:	f107 0710 	add.w	r7, r7, #16
20001f68:	46bd      	mov	sp, r7
20001f6a:	bd80      	pop	{r7, pc}

20001f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001f6c:	b580      	push	{r7, lr}
20001f6e:	b084      	sub	sp, #16
20001f70:	af00      	add	r7, sp, #0
20001f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001f74:	f002 fb52 	bl	2000461c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001f78:	687b      	ldr	r3, [r7, #4]
20001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001f7c:	2b00      	cmp	r3, #0
20001f7e:	d103      	bne.n	20001f88 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
20001f80:	f04f 0301 	mov.w	r3, #1
20001f84:	60fb      	str	r3, [r7, #12]
20001f86:	e002      	b.n	20001f8e <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001f88:	f04f 0300 	mov.w	r3, #0
20001f8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001f8e:	f002 fb7d 	bl	2000468c <vPortExitCritical>

	return xReturn;
20001f92:	68fb      	ldr	r3, [r7, #12]
}
20001f94:	4618      	mov	r0, r3
20001f96:	f107 0710 	add.w	r7, r7, #16
20001f9a:	46bd      	mov	sp, r7
20001f9c:	bd80      	pop	{r7, pc}
20001f9e:	bf00      	nop

20001fa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001fa0:	b580      	push	{r7, lr}
20001fa2:	b084      	sub	sp, #16
20001fa4:	af00      	add	r7, sp, #0
20001fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001fa8:	f002 fb38 	bl	2000461c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001fac:	687b      	ldr	r3, [r7, #4]
20001fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001fb0:	687b      	ldr	r3, [r7, #4]
20001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001fb4:	429a      	cmp	r2, r3
20001fb6:	d103      	bne.n	20001fc0 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
20001fb8:	f04f 0301 	mov.w	r3, #1
20001fbc:	60fb      	str	r3, [r7, #12]
20001fbe:	e002      	b.n	20001fc6 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
20001fc0:	f04f 0300 	mov.w	r3, #0
20001fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001fc6:	f002 fb61 	bl	2000468c <vPortExitCritical>

	return xReturn;
20001fca:	68fb      	ldr	r3, [r7, #12]
}
20001fcc:	4618      	mov	r0, r3
20001fce:	f107 0710 	add.w	r7, r7, #16
20001fd2:	46bd      	mov	sp, r7
20001fd4:	bd80      	pop	{r7, pc}
20001fd6:	bf00      	nop

20001fd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001fd8:	b580      	push	{r7, lr}
20001fda:	b086      	sub	sp, #24
20001fdc:	af00      	add	r7, sp, #0
20001fde:	60f8      	str	r0, [r7, #12]
20001fe0:	60b9      	str	r1, [r7, #8]
20001fe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001fe4:	68fb      	ldr	r3, [r7, #12]
20001fe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001fe8:	f002 fb18 	bl	2000461c <vPortEnterCritical>
20001fec:	697b      	ldr	r3, [r7, #20]
20001fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ff2:	b2db      	uxtb	r3, r3
20001ff4:	b25b      	sxtb	r3, r3
20001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
20001ffa:	d104      	bne.n	20002006 <vQueueWaitForMessageRestricted+0x2e>
20001ffc:	697b      	ldr	r3, [r7, #20]
20001ffe:	f04f 0200 	mov.w	r2, #0
20002002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20002006:	697b      	ldr	r3, [r7, #20]
20002008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
2000200c:	b2db      	uxtb	r3, r3
2000200e:	b25b      	sxtb	r3, r3
20002010:	f1b3 3fff 	cmp.w	r3, #4294967295
20002014:	d104      	bne.n	20002020 <vQueueWaitForMessageRestricted+0x48>
20002016:	697b      	ldr	r3, [r7, #20]
20002018:	f04f 0200 	mov.w	r2, #0
2000201c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20002020:	f002 fb34 	bl	2000468c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20002024:	697b      	ldr	r3, [r7, #20]
20002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002028:	2b00      	cmp	r3, #0
2000202a:	d107      	bne.n	2000203c <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
2000202c:	697b      	ldr	r3, [r7, #20]
2000202e:	f103 0324 	add.w	r3, r3, #36	; 0x24
20002032:	4618      	mov	r0, r3
20002034:	68b9      	ldr	r1, [r7, #8]
20002036:	687a      	ldr	r2, [r7, #4]
20002038:	f000 fe08 	bl	20002c4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
2000203c:	6978      	ldr	r0, [r7, #20]
2000203e:	f7ff ff3f 	bl	20001ec0 <prvUnlockQueue>
	}
20002042:	f107 0718 	add.w	r7, r7, #24
20002046:	46bd      	mov	sp, r7
20002048:	bd80      	pop	{r7, pc}
2000204a:	bf00      	nop

2000204c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
2000204c:	b580      	push	{r7, lr}
2000204e:	b08c      	sub	sp, #48	; 0x30
20002050:	af04      	add	r7, sp, #16
20002052:	60f8      	str	r0, [r7, #12]
20002054:	60b9      	str	r1, [r7, #8]
20002056:	603b      	str	r3, [r7, #0]
20002058:	4613      	mov	r3, r2
2000205a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000205c:	88fb      	ldrh	r3, [r7, #6]
2000205e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002062:	4618      	mov	r0, r3
20002064:	f001 ff8c 	bl	20003f80 <pvPortMalloc>
20002068:	4603      	mov	r3, r0
2000206a:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
2000206c:	69fb      	ldr	r3, [r7, #28]
2000206e:	2b00      	cmp	r3, #0
20002070:	d010      	beq.n	20002094 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
20002072:	f04f 005c 	mov.w	r0, #92	; 0x5c
20002076:	f001 ff83 	bl	20003f80 <pvPortMalloc>
2000207a:	4603      	mov	r3, r0
2000207c:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
2000207e:	697b      	ldr	r3, [r7, #20]
20002080:	2b00      	cmp	r3, #0
20002082:	d003      	beq.n	2000208c <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20002084:	697b      	ldr	r3, [r7, #20]
20002086:	69fa      	ldr	r2, [r7, #28]
20002088:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
2000208a:	e006      	b.n	2000209a <xTaskCreate+0x4e>
2000208c:	69f8      	ldr	r0, [r7, #28]
2000208e:	f002 f873 	bl	20004178 <vPortFree>
20002092:	e002      	b.n	2000209a <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
20002094:	f04f 0300 	mov.w	r3, #0
20002098:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
2000209a:	697b      	ldr	r3, [r7, #20]
2000209c:	2b00      	cmp	r3, #0
2000209e:	d016      	beq.n	200020ce <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
200020a0:	88fb      	ldrh	r3, [r7, #6]
200020a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
200020a4:	9200      	str	r2, [sp, #0]
200020a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200020a8:	9201      	str	r2, [sp, #4]
200020aa:	697a      	ldr	r2, [r7, #20]
200020ac:	9202      	str	r2, [sp, #8]
200020ae:	f04f 0200 	mov.w	r2, #0
200020b2:	9203      	str	r2, [sp, #12]
200020b4:	68f8      	ldr	r0, [r7, #12]
200020b6:	68b9      	ldr	r1, [r7, #8]
200020b8:	461a      	mov	r2, r3
200020ba:	683b      	ldr	r3, [r7, #0]
200020bc:	f000 f810 	bl	200020e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
200020c0:	6978      	ldr	r0, [r7, #20]
200020c2:	f000 f8a3 	bl	2000220c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
200020c6:	f04f 0301 	mov.w	r3, #1
200020ca:	61bb      	str	r3, [r7, #24]
200020cc:	e002      	b.n	200020d4 <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
200020ce:	f04f 33ff 	mov.w	r3, #4294967295
200020d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
200020d4:	69bb      	ldr	r3, [r7, #24]
	}
200020d6:	4618      	mov	r0, r3
200020d8:	f107 0720 	add.w	r7, r7, #32
200020dc:	46bd      	mov	sp, r7
200020de:	bd80      	pop	{r7, pc}

200020e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
200020e0:	b580      	push	{r7, lr}
200020e2:	b088      	sub	sp, #32
200020e4:	af00      	add	r7, sp, #0
200020e6:	60f8      	str	r0, [r7, #12]
200020e8:	60b9      	str	r1, [r7, #8]
200020ea:	607a      	str	r2, [r7, #4]
200020ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
200020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200020f2:	687b      	ldr	r3, [r7, #4]
200020f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200020f8:	4610      	mov	r0, r2
200020fa:	f04f 01a5 	mov.w	r1, #165	; 0xa5
200020fe:	461a      	mov	r2, r3
20002100:	f005 fb56 	bl	200077b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
20002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002108:	687b      	ldr	r3, [r7, #4]
2000210a:	f103 33ff 	add.w	r3, r3, #4294967295
2000210e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002112:	4413      	add	r3, r2
20002114:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
20002116:	697b      	ldr	r3, [r7, #20]
20002118:	f023 0307 	bic.w	r3, r3, #7
2000211c:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
2000211e:	697b      	ldr	r3, [r7, #20]
20002120:	f003 0307 	and.w	r3, r3, #7
20002124:	2b00      	cmp	r3, #0
20002126:	d009      	beq.n	2000213c <prvInitialiseNewTask+0x5c>
20002128:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000212c:	f383 8811 	msr	BASEPRI, r3
20002130:	f3bf 8f6f 	isb	sy
20002134:	f3bf 8f4f 	dsb	sy
20002138:	61fb      	str	r3, [r7, #28]
2000213a:	e7fe      	b.n	2000213a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2000213c:	f04f 0300 	mov.w	r3, #0
20002140:	61bb      	str	r3, [r7, #24]
20002142:	e012      	b.n	2000216a <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20002144:	69b9      	ldr	r1, [r7, #24]
20002146:	68ba      	ldr	r2, [r7, #8]
20002148:	69bb      	ldr	r3, [r7, #24]
2000214a:	4413      	add	r3, r2
2000214c:	781a      	ldrb	r2, [r3, #0]
2000214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002150:	440b      	add	r3, r1
20002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
20002156:	68ba      	ldr	r2, [r7, #8]
20002158:	69bb      	ldr	r3, [r7, #24]
2000215a:	4413      	add	r3, r2
2000215c:	781b      	ldrb	r3, [r3, #0]
2000215e:	2b00      	cmp	r3, #0
20002160:	d007      	beq.n	20002172 <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20002162:	69bb      	ldr	r3, [r7, #24]
20002164:	f103 0301 	add.w	r3, r3, #1
20002168:	61bb      	str	r3, [r7, #24]
2000216a:	69bb      	ldr	r3, [r7, #24]
2000216c:	2b09      	cmp	r3, #9
2000216e:	d9e9      	bls.n	20002144 <prvInitialiseNewTask+0x64>
20002170:	e000      	b.n	20002174 <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
20002172:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20002174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002176:	f04f 0200 	mov.w	r2, #0
2000217a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2000217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002180:	2b04      	cmp	r3, #4
20002182:	d902      	bls.n	2000218a <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20002184:	f04f 0304 	mov.w	r3, #4
20002188:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
2000218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000218c:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000218e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20002190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002192:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002194:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
20002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002198:	f04f 0200 	mov.w	r2, #0
2000219c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
2000219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021a0:	f103 0304 	add.w	r3, r3, #4
200021a4:	4618      	mov	r0, r3
200021a6:	f7ff f951 	bl	2000144c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
200021aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021ac:	f103 0318 	add.w	r3, r3, #24
200021b0:	4618      	mov	r0, r3
200021b2:	f7ff f94b 	bl	2000144c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
200021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200021ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200021bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
200021be:	f1c3 0205 	rsb	r2, r3, #5
200021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
200021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200021ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
200021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021ce:	f04f 0200 	mov.w	r2, #0
200021d2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
200021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021d6:	f04f 0200 	mov.w	r2, #0
200021da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021de:	f04f 0200 	mov.w	r2, #0
200021e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
200021e6:	6978      	ldr	r0, [r7, #20]
200021e8:	68f9      	ldr	r1, [r7, #12]
200021ea:	683a      	ldr	r2, [r7, #0]
200021ec:	f002 f910 	bl	20004410 <pxPortInitialiseStack>
200021f0:	4603      	mov	r3, r0
200021f2:	461a      	mov	r2, r3
200021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021f6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
200021f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200021fa:	2b00      	cmp	r3, #0
200021fc:	d002      	beq.n	20002204 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
200021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002202:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002204:	f107 0720 	add.w	r7, r7, #32
20002208:	46bd      	mov	sp, r7
2000220a:	bd80      	pop	{r7, pc}

2000220c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
2000220c:	b580      	push	{r7, lr}
2000220e:	b082      	sub	sp, #8
20002210:	af00      	add	r7, sp, #0
20002212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
20002214:	f002 fa02 	bl	2000461c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20002218:	f647 2374 	movw	r3, #31348	; 0x7a74
2000221c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002220:	681b      	ldr	r3, [r3, #0]
20002222:	f103 0201 	add.w	r2, r3, #1
20002226:	f647 2374 	movw	r3, #31348	; 0x7a74
2000222a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000222e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
20002230:	f647 139c 	movw	r3, #31132	; 0x799c
20002234:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002238:	681b      	ldr	r3, [r3, #0]
2000223a:	2b00      	cmp	r3, #0
2000223c:	d10f      	bne.n	2000225e <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
2000223e:	f647 139c 	movw	r3, #31132	; 0x799c
20002242:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002246:	687a      	ldr	r2, [r7, #4]
20002248:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
2000224a:	f647 2374 	movw	r3, #31348	; 0x7a74
2000224e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002252:	681b      	ldr	r3, [r3, #0]
20002254:	2b01      	cmp	r3, #1
20002256:	d11a      	bne.n	2000228e <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20002258:	f000 fe50 	bl	20002efc <prvInitialiseTaskLists>
2000225c:	e018      	b.n	20002290 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
2000225e:	f647 2380 	movw	r3, #31360	; 0x7a80
20002262:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002266:	681b      	ldr	r3, [r3, #0]
20002268:	2b00      	cmp	r3, #0
2000226a:	d111      	bne.n	20002290 <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
2000226c:	f647 139c 	movw	r3, #31132	; 0x799c
20002270:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002274:	681b      	ldr	r3, [r3, #0]
20002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002278:	687b      	ldr	r3, [r7, #4]
2000227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000227c:	429a      	cmp	r2, r3
2000227e:	d807      	bhi.n	20002290 <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
20002280:	f647 139c 	movw	r3, #31132	; 0x799c
20002284:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002288:	687a      	ldr	r2, [r7, #4]
2000228a:	601a      	str	r2, [r3, #0]
2000228c:	e000      	b.n	20002290 <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
2000228e:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20002290:	f647 2390 	movw	r3, #31376	; 0x7a90
20002294:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002298:	681b      	ldr	r3, [r3, #0]
2000229a:	f103 0201 	add.w	r2, r3, #1
2000229e:	f647 2390 	movw	r3, #31376	; 0x7a90
200022a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022a6:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
200022a8:	f647 2390 	movw	r3, #31376	; 0x7a90
200022ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022b0:	681a      	ldr	r2, [r3, #0]
200022b2:	687b      	ldr	r3, [r7, #4]
200022b4:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
200022b6:	687b      	ldr	r3, [r7, #4]
200022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200022ba:	f04f 0201 	mov.w	r2, #1
200022be:	fa02 f203 	lsl.w	r2, r2, r3
200022c2:	f647 237c 	movw	r3, #31356	; 0x7a7c
200022c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022ca:	681b      	ldr	r3, [r3, #0]
200022cc:	ea42 0203 	orr.w	r2, r2, r3
200022d0:	f647 237c 	movw	r3, #31356	; 0x7a7c
200022d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022d8:	601a      	str	r2, [r3, #0]
200022da:	687b      	ldr	r3, [r7, #4]
200022dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022de:	4613      	mov	r3, r2
200022e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022e4:	4413      	add	r3, r2
200022e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022ea:	461a      	mov	r2, r3
200022ec:	f647 13a0 	movw	r3, #31136	; 0x79a0
200022f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022f4:	441a      	add	r2, r3
200022f6:	687b      	ldr	r3, [r7, #4]
200022f8:	f103 0304 	add.w	r3, r3, #4
200022fc:	4610      	mov	r0, r2
200022fe:	4619      	mov	r1, r3
20002300:	f7ff f8b2 	bl	20001468 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20002304:	f002 f9c2 	bl	2000468c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
20002308:	f647 2380 	movw	r3, #31360	; 0x7a80
2000230c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002310:	681b      	ldr	r3, [r3, #0]
20002312:	2b00      	cmp	r3, #0
20002314:	d014      	beq.n	20002340 <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20002316:	f647 139c 	movw	r3, #31132	; 0x799c
2000231a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000231e:	681b      	ldr	r3, [r3, #0]
20002320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002322:	687b      	ldr	r3, [r7, #4]
20002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002326:	429a      	cmp	r2, r3
20002328:	d20a      	bcs.n	20002340 <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
2000232a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002336:	601a      	str	r2, [r3, #0]
20002338:	f3bf 8f4f 	dsb	sy
2000233c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002340:	f107 0708 	add.w	r7, r7, #8
20002344:	46bd      	mov	sp, r7
20002346:	bd80      	pop	{r7, pc}

20002348 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
20002348:	b580      	push	{r7, lr}
2000234a:	b084      	sub	sp, #16
2000234c:	af00      	add	r7, sp, #0
2000234e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
20002350:	f04f 0300 	mov.w	r3, #0
20002354:	60bb      	str	r3, [r7, #8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
20002356:	687b      	ldr	r3, [r7, #4]
20002358:	2b00      	cmp	r3, #0
2000235a:	d01b      	beq.n	20002394 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
2000235c:	f647 239c 	movw	r3, #31388	; 0x7a9c
20002360:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002364:	681b      	ldr	r3, [r3, #0]
20002366:	2b00      	cmp	r3, #0
20002368:	d009      	beq.n	2000237e <vTaskDelay+0x36>
2000236a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000236e:	f383 8811 	msr	BASEPRI, r3
20002372:	f3bf 8f6f 	isb	sy
20002376:	f3bf 8f4f 	dsb	sy
2000237a:	60fb      	str	r3, [r7, #12]
2000237c:	e7fe      	b.n	2000237c <vTaskDelay+0x34>
			vTaskSuspendAll();
2000237e:	f000 f971 	bl	20002664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
20002382:	6878      	ldr	r0, [r7, #4]
20002384:	f04f 0100 	mov.w	r1, #0
20002388:	f001 f99e 	bl	200036c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
2000238c:	f000 f97c 	bl	20002688 <xTaskResumeAll>
20002390:	4603      	mov	r3, r0
20002392:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
20002394:	68bb      	ldr	r3, [r7, #8]
20002396:	2b00      	cmp	r3, #0
20002398:	d10a      	bne.n	200023b0 <vTaskDelay+0x68>
		{
			portYIELD_WITHIN_API();
2000239a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000239e:	f2ce 0300 	movt	r3, #57344	; 0xe000
200023a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200023a6:	601a      	str	r2, [r3, #0]
200023a8:	f3bf 8f4f 	dsb	sy
200023ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
200023b0:	f107 0710 	add.w	r7, r7, #16
200023b4:	46bd      	mov	sp, r7
200023b6:	bd80      	pop	{r7, pc}

200023b8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
200023b8:	b580      	push	{r7, lr}
200023ba:	b084      	sub	sp, #16
200023bc:	af00      	add	r7, sp, #0
200023be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
200023c0:	f002 f92c 	bl	2000461c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
200023c4:	687b      	ldr	r3, [r7, #4]
200023c6:	2b00      	cmp	r3, #0
200023c8:	d105      	bne.n	200023d6 <uxTaskPriorityGet+0x1e>
200023ca:	f647 139c 	movw	r3, #31132	; 0x799c
200023ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023d2:	681b      	ldr	r3, [r3, #0]
200023d4:	e000      	b.n	200023d8 <uxTaskPriorityGet+0x20>
200023d6:	687b      	ldr	r3, [r7, #4]
200023d8:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxPriority;
200023da:	68bb      	ldr	r3, [r7, #8]
200023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200023de:	60fb      	str	r3, [r7, #12]
		}
		taskEXIT_CRITICAL();
200023e0:	f002 f954 	bl	2000468c <vPortExitCritical>

		return uxReturn;
200023e4:	68fb      	ldr	r3, [r7, #12]
	}
200023e6:	4618      	mov	r0, r3
200023e8:	f107 0710 	add.w	r7, r7, #16
200023ec:	46bd      	mov	sp, r7
200023ee:	bd80      	pop	{r7, pc}

200023f0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
200023f0:	b580      	push	{r7, lr}
200023f2:	b088      	sub	sp, #32
200023f4:	af00      	add	r7, sp, #0
200023f6:	6078      	str	r0, [r7, #4]
200023f8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
200023fa:	f04f 0300 	mov.w	r3, #0
200023fe:	61bb      	str	r3, [r7, #24]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
20002400:	683b      	ldr	r3, [r7, #0]
20002402:	2b04      	cmp	r3, #4
20002404:	d909      	bls.n	2000241a <vTaskPrioritySet+0x2a>
20002406:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000240a:	f383 8811 	msr	BASEPRI, r3
2000240e:	f3bf 8f6f 	isb	sy
20002412:	f3bf 8f4f 	dsb	sy
20002416:	61fb      	str	r3, [r7, #28]
20002418:	e7fe      	b.n	20002418 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2000241a:	683b      	ldr	r3, [r7, #0]
2000241c:	2b04      	cmp	r3, #4
2000241e:	d902      	bls.n	20002426 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20002420:	f04f 0304 	mov.w	r3, #4
20002424:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
20002426:	f002 f8f9 	bl	2000461c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
2000242a:	687b      	ldr	r3, [r7, #4]
2000242c:	2b00      	cmp	r3, #0
2000242e:	d105      	bne.n	2000243c <vTaskPrioritySet+0x4c>
20002430:	f647 139c 	movw	r3, #31132	; 0x799c
20002434:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002438:	681b      	ldr	r3, [r3, #0]
2000243a:	e000      	b.n	2000243e <vTaskPrioritySet+0x4e>
2000243c:	687b      	ldr	r3, [r7, #4]
2000243e:	60fb      	str	r3, [r7, #12]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
20002440:	68fb      	ldr	r3, [r7, #12]
20002442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002444:	613b      	str	r3, [r7, #16]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
20002446:	693a      	ldr	r2, [r7, #16]
20002448:	683b      	ldr	r3, [r7, #0]
2000244a:	429a      	cmp	r2, r3
2000244c:	f000 80a9 	beq.w	200025a2 <vTaskPrioritySet+0x1b2>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
20002450:	683a      	ldr	r2, [r7, #0]
20002452:	693b      	ldr	r3, [r7, #16]
20002454:	429a      	cmp	r2, r3
20002456:	d914      	bls.n	20002482 <vTaskPrioritySet+0x92>
				{
					if( pxTCB != pxCurrentTCB )
20002458:	f647 139c 	movw	r3, #31132	; 0x799c
2000245c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002460:	681b      	ldr	r3, [r3, #0]
20002462:	68fa      	ldr	r2, [r7, #12]
20002464:	429a      	cmp	r2, r3
20002466:	d018      	beq.n	2000249a <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
20002468:	f647 139c 	movw	r3, #31132	; 0x799c
2000246c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002470:	681b      	ldr	r3, [r3, #0]
20002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002474:	683b      	ldr	r3, [r7, #0]
20002476:	429a      	cmp	r2, r3
20002478:	d811      	bhi.n	2000249e <vTaskPrioritySet+0xae>
						{
							xYieldRequired = pdTRUE;
2000247a:	f04f 0301 	mov.w	r3, #1
2000247e:	61bb      	str	r3, [r7, #24]
20002480:	e00e      	b.n	200024a0 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
20002482:	f647 139c 	movw	r3, #31132	; 0x799c
20002486:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000248a:	681b      	ldr	r3, [r3, #0]
2000248c:	68fa      	ldr	r2, [r7, #12]
2000248e:	429a      	cmp	r2, r3
20002490:	d106      	bne.n	200024a0 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
20002492:	f04f 0301 	mov.w	r3, #1
20002496:	61bb      	str	r3, [r7, #24]
20002498:	e002      	b.n	200024a0 <vTaskPrioritySet+0xb0>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
2000249a:	bf00      	nop
2000249c:	e000      	b.n	200024a0 <vTaskPrioritySet+0xb0>
2000249e:	bf00      	nop
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
200024a0:	68fb      	ldr	r3, [r7, #12]
200024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200024a4:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
200024a6:	68fb      	ldr	r3, [r7, #12]
200024a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200024aa:	68fb      	ldr	r3, [r7, #12]
200024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200024ae:	429a      	cmp	r2, r3
200024b0:	d102      	bne.n	200024b8 <vTaskPrioritySet+0xc8>
					{
						pxTCB->uxPriority = uxNewPriority;
200024b2:	68fb      	ldr	r3, [r7, #12]
200024b4:	683a      	ldr	r2, [r7, #0]
200024b6:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
200024b8:	68fb      	ldr	r3, [r7, #12]
200024ba:	683a      	ldr	r2, [r7, #0]
200024bc:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
200024be:	68fb      	ldr	r3, [r7, #12]
200024c0:	699b      	ldr	r3, [r3, #24]
200024c2:	2b00      	cmp	r3, #0
200024c4:	db04      	blt.n	200024d0 <vTaskPrioritySet+0xe0>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200024c6:	683b      	ldr	r3, [r7, #0]
200024c8:	f1c3 0205 	rsb	r2, r3, #5
200024cc:	68fb      	ldr	r3, [r7, #12]
200024ce:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
200024d0:	68fb      	ldr	r3, [r7, #12]
200024d2:	6959      	ldr	r1, [r3, #20]
200024d4:	697a      	ldr	r2, [r7, #20]
200024d6:	4613      	mov	r3, r2
200024d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024dc:	4413      	add	r3, r2
200024de:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024e2:	461a      	mov	r2, r3
200024e4:	f647 13a0 	movw	r3, #31136	; 0x79a0
200024e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024ec:	4413      	add	r3, r2
200024ee:	4299      	cmp	r1, r3
200024f0:	d102      	bne.n	200024f8 <vTaskPrioritySet+0x108>
200024f2:	f04f 0301 	mov.w	r3, #1
200024f6:	e001      	b.n	200024fc <vTaskPrioritySet+0x10c>
200024f8:	f04f 0300 	mov.w	r3, #0
200024fc:	2b00      	cmp	r3, #0
200024fe:	d042      	beq.n	20002586 <vTaskPrioritySet+0x196>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002500:	68fb      	ldr	r3, [r7, #12]
20002502:	f103 0304 	add.w	r3, r3, #4
20002506:	4618      	mov	r0, r3
20002508:	f7ff f80c 	bl	20001524 <uxListRemove>
2000250c:	4603      	mov	r3, r0
2000250e:	2b00      	cmp	r3, #0
20002510:	d112      	bne.n	20002538 <vTaskPrioritySet+0x148>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
20002512:	697b      	ldr	r3, [r7, #20]
20002514:	f04f 0201 	mov.w	r2, #1
20002518:	fa02 f303 	lsl.w	r3, r2, r3
2000251c:	ea6f 0203 	mvn.w	r2, r3
20002520:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002524:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002528:	681b      	ldr	r3, [r3, #0]
2000252a:	ea02 0203 	and.w	r2, r2, r3
2000252e:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002532:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002536:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
20002538:	68fb      	ldr	r3, [r7, #12]
2000253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000253c:	f04f 0201 	mov.w	r2, #1
20002540:	fa02 f203 	lsl.w	r2, r2, r3
20002544:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002548:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000254c:	681b      	ldr	r3, [r3, #0]
2000254e:	ea42 0203 	orr.w	r2, r2, r3
20002552:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002556:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000255a:	601a      	str	r2, [r3, #0]
2000255c:	68fb      	ldr	r3, [r7, #12]
2000255e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002560:	4613      	mov	r3, r2
20002562:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002566:	4413      	add	r3, r2
20002568:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000256c:	461a      	mov	r2, r3
2000256e:	f647 13a0 	movw	r3, #31136	; 0x79a0
20002572:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002576:	441a      	add	r2, r3
20002578:	68fb      	ldr	r3, [r7, #12]
2000257a:	f103 0304 	add.w	r3, r3, #4
2000257e:	4610      	mov	r0, r2
20002580:	4619      	mov	r1, r3
20002582:	f7fe ff71 	bl	20001468 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
20002586:	69bb      	ldr	r3, [r7, #24]
20002588:	2b00      	cmp	r3, #0
2000258a:	d00a      	beq.n	200025a2 <vTaskPrioritySet+0x1b2>
				{
					taskYIELD_IF_USING_PREEMPTION();
2000258c:	f64e 5304 	movw	r3, #60676	; 0xed04
20002590:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002598:	601a      	str	r2, [r3, #0]
2000259a:	f3bf 8f4f 	dsb	sy
2000259e:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
200025a2:	f002 f873 	bl	2000468c <vPortExitCritical>
	}
200025a6:	f107 0720 	add.w	r7, r7, #32
200025aa:	46bd      	mov	sp, r7
200025ac:	bd80      	pop	{r7, pc}
200025ae:	bf00      	nop

200025b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
200025b0:	b580      	push	{r7, lr}
200025b2:	b086      	sub	sp, #24
200025b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
200025b6:	f04f 0300 	mov.w	r3, #0
200025ba:	9300      	str	r3, [sp, #0]
200025bc:	f647 2398 	movw	r3, #31384	; 0x7a98
200025c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025c4:	9301      	str	r3, [sp, #4]
200025c6:	f642 60c5 	movw	r0, #11973	; 0x2ec5
200025ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
200025ce:	f647 0198 	movw	r1, #30872	; 0x7898
200025d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
200025d6:	f04f 0250 	mov.w	r2, #80	; 0x50
200025da:	f04f 0300 	mov.w	r3, #0
200025de:	f7ff fd35 	bl	2000204c <xTaskCreate>
200025e2:	4603      	mov	r3, r0
200025e4:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
200025e6:	687b      	ldr	r3, [r7, #4]
200025e8:	2b01      	cmp	r3, #1
200025ea:	d103      	bne.n	200025f4 <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
200025ec:	f001 f8f4 	bl	200037d8 <xTimerCreateTimerTask>
200025f0:	4603      	mov	r3, r0
200025f2:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
200025f4:	687b      	ldr	r3, [r7, #4]
200025f6:	2b01      	cmp	r3, #1
200025f8:	d122      	bne.n	20002640 <vTaskStartScheduler+0x90>
200025fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200025fe:	f383 8811 	msr	BASEPRI, r3
20002602:	f3bf 8f6f 	isb	sy
20002606:	f3bf 8f4f 	dsb	sy
2000260a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
2000260c:	f647 2394 	movw	r3, #31380	; 0x7a94
20002610:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002614:	f04f 32ff 	mov.w	r2, #4294967295
20002618:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
2000261a:	f647 2380 	movw	r3, #31360	; 0x7a80
2000261e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002622:	f04f 0201 	mov.w	r2, #1
20002626:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
20002628:	f647 2378 	movw	r3, #31352	; 0x7a78
2000262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002630:	f04f 0200 	mov.w	r2, #0
20002634:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
20002636:	f7fd fe73 	bl	20000320 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
2000263a:	f001 ff69 	bl	20004510 <xPortStartScheduler>
2000263e:	e00d      	b.n	2000265c <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002640:	687b      	ldr	r3, [r7, #4]
20002642:	f1b3 3fff 	cmp.w	r3, #4294967295
20002646:	d109      	bne.n	2000265c <vTaskStartScheduler+0xac>
20002648:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000264c:	f383 8811 	msr	BASEPRI, r3
20002650:	f3bf 8f6f 	isb	sy
20002654:	f3bf 8f4f 	dsb	sy
20002658:	60fb      	str	r3, [r7, #12]
2000265a:	e7fe      	b.n	2000265a <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
2000265c:	f107 0710 	add.w	r7, r7, #16
20002660:	46bd      	mov	sp, r7
20002662:	bd80      	pop	{r7, pc}

20002664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
20002664:	b480      	push	{r7}
20002666:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
20002668:	f647 239c 	movw	r3, #31388	; 0x7a9c
2000266c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002670:	681b      	ldr	r3, [r3, #0]
20002672:	f103 0201 	add.w	r2, r3, #1
20002676:	f647 239c 	movw	r3, #31388	; 0x7a9c
2000267a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000267e:	601a      	str	r2, [r3, #0]
}
20002680:	46bd      	mov	sp, r7
20002682:	bc80      	pop	{r7}
20002684:	4770      	bx	lr
20002686:	bf00      	nop

20002688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
20002688:	b580      	push	{r7, lr}
2000268a:	b084      	sub	sp, #16
2000268c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
2000268e:	f04f 0300 	mov.w	r3, #0
20002692:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
20002694:	f04f 0300 	mov.w	r3, #0
20002698:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
2000269a:	f647 239c 	movw	r3, #31388	; 0x7a9c
2000269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026a2:	681b      	ldr	r3, [r3, #0]
200026a4:	2b00      	cmp	r3, #0
200026a6:	d109      	bne.n	200026bc <xTaskResumeAll+0x34>
200026a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200026ac:	f383 8811 	msr	BASEPRI, r3
200026b0:	f3bf 8f6f 	isb	sy
200026b4:	f3bf 8f4f 	dsb	sy
200026b8:	60fb      	str	r3, [r7, #12]
200026ba:	e7fe      	b.n	200026ba <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
200026bc:	f001 ffae 	bl	2000461c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
200026c0:	f647 239c 	movw	r3, #31388	; 0x7a9c
200026c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026c8:	681b      	ldr	r3, [r3, #0]
200026ca:	f103 32ff 	add.w	r2, r3, #4294967295
200026ce:	f647 239c 	movw	r3, #31388	; 0x7a9c
200026d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026d6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200026d8:	f647 239c 	movw	r3, #31388	; 0x7a9c
200026dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026e0:	681b      	ldr	r3, [r3, #0]
200026e2:	2b00      	cmp	r3, #0
200026e4:	f040 8098 	bne.w	20002818 <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
200026e8:	f647 2374 	movw	r3, #31348	; 0x7a74
200026ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026f0:	681b      	ldr	r3, [r3, #0]
200026f2:	2b00      	cmp	r3, #0
200026f4:	f000 8090 	beq.w	20002818 <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200026f8:	e04a      	b.n	20002790 <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
200026fa:	f647 2334 	movw	r3, #31284	; 0x7a34
200026fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002702:	68db      	ldr	r3, [r3, #12]
20002704:	68db      	ldr	r3, [r3, #12]
20002706:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002708:	683b      	ldr	r3, [r7, #0]
2000270a:	f103 0318 	add.w	r3, r3, #24
2000270e:	4618      	mov	r0, r3
20002710:	f7fe ff08 	bl	20001524 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002714:	683b      	ldr	r3, [r7, #0]
20002716:	f103 0304 	add.w	r3, r3, #4
2000271a:	4618      	mov	r0, r3
2000271c:	f7fe ff02 	bl	20001524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20002720:	683b      	ldr	r3, [r7, #0]
20002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002724:	f04f 0201 	mov.w	r2, #1
20002728:	fa02 f203 	lsl.w	r2, r2, r3
2000272c:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002730:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002734:	681b      	ldr	r3, [r3, #0]
20002736:	ea42 0203 	orr.w	r2, r2, r3
2000273a:	f647 237c 	movw	r3, #31356	; 0x7a7c
2000273e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002742:	601a      	str	r2, [r3, #0]
20002744:	683b      	ldr	r3, [r7, #0]
20002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002748:	4613      	mov	r3, r2
2000274a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000274e:	4413      	add	r3, r2
20002750:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002754:	461a      	mov	r2, r3
20002756:	f647 13a0 	movw	r3, #31136	; 0x79a0
2000275a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000275e:	441a      	add	r2, r3
20002760:	683b      	ldr	r3, [r7, #0]
20002762:	f103 0304 	add.w	r3, r3, #4
20002766:	4610      	mov	r0, r2
20002768:	4619      	mov	r1, r3
2000276a:	f7fe fe7d 	bl	20001468 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2000276e:	683b      	ldr	r3, [r7, #0]
20002770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002772:	f647 139c 	movw	r3, #31132	; 0x799c
20002776:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000277a:	681b      	ldr	r3, [r3, #0]
2000277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000277e:	429a      	cmp	r2, r3
20002780:	d306      	bcc.n	20002790 <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
20002782:	f647 2388 	movw	r3, #31368	; 0x7a88
20002786:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000278a:	f04f 0201 	mov.w	r2, #1
2000278e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002790:	f647 2334 	movw	r3, #31284	; 0x7a34
20002794:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002798:	681b      	ldr	r3, [r3, #0]
2000279a:	2b00      	cmp	r3, #0
2000279c:	d1ad      	bne.n	200026fa <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
2000279e:	683b      	ldr	r3, [r7, #0]
200027a0:	2b00      	cmp	r3, #0
200027a2:	d001      	beq.n	200027a8 <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
200027a4:	f000 fc58 	bl	20003058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
200027a8:	f647 2384 	movw	r3, #31364	; 0x7a84
200027ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027b0:	681b      	ldr	r3, [r3, #0]
200027b2:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
200027b4:	68bb      	ldr	r3, [r7, #8]
200027b6:	2b00      	cmp	r3, #0
200027b8:	d019      	beq.n	200027ee <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
200027ba:	f000 f845 	bl	20002848 <xTaskIncrementTick>
200027be:	4603      	mov	r3, r0
200027c0:	2b00      	cmp	r3, #0
200027c2:	d006      	beq.n	200027d2 <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
200027c4:	f647 2388 	movw	r3, #31368	; 0x7a88
200027c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027cc:	f04f 0201 	mov.w	r2, #1
200027d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
200027d2:	68bb      	ldr	r3, [r7, #8]
200027d4:	f103 33ff 	add.w	r3, r3, #4294967295
200027d8:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
200027da:	68bb      	ldr	r3, [r7, #8]
200027dc:	2b00      	cmp	r3, #0
200027de:	d1ec      	bne.n	200027ba <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
200027e0:	f647 2384 	movw	r3, #31364	; 0x7a84
200027e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027e8:	f04f 0200 	mov.w	r2, #0
200027ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
200027ee:	f647 2388 	movw	r3, #31368	; 0x7a88
200027f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027f6:	681b      	ldr	r3, [r3, #0]
200027f8:	2b00      	cmp	r3, #0
200027fa:	d00d      	beq.n	20002818 <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
200027fc:	f04f 0301 	mov.w	r3, #1
20002800:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
20002802:	f64e 5304 	movw	r3, #60676	; 0xed04
20002806:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000280a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000280e:	601a      	str	r2, [r3, #0]
20002810:	f3bf 8f4f 	dsb	sy
20002814:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002818:	f001 ff38 	bl	2000468c <vPortExitCritical>

	return xAlreadyYielded;
2000281c:	687b      	ldr	r3, [r7, #4]
}
2000281e:	4618      	mov	r0, r3
20002820:	f107 0710 	add.w	r7, r7, #16
20002824:	46bd      	mov	sp, r7
20002826:	bd80      	pop	{r7, pc}

20002828 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002828:	b480      	push	{r7}
2000282a:	b083      	sub	sp, #12
2000282c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
2000282e:	f647 2378 	movw	r3, #31352	; 0x7a78
20002832:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002836:	681b      	ldr	r3, [r3, #0]
20002838:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
2000283a:	687b      	ldr	r3, [r7, #4]
}
2000283c:	4618      	mov	r0, r3
2000283e:	f107 070c 	add.w	r7, r7, #12
20002842:	46bd      	mov	sp, r7
20002844:	bc80      	pop	{r7}
20002846:	4770      	bx	lr

20002848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
20002848:	b580      	push	{r7, lr}
2000284a:	b086      	sub	sp, #24
2000284c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
2000284e:	f04f 0300 	mov.w	r3, #0
20002852:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002854:	f647 239c 	movw	r3, #31388	; 0x7a9c
20002858:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000285c:	681b      	ldr	r3, [r3, #0]
2000285e:	2b00      	cmp	r3, #0
20002860:	f040 80dc 	bne.w	20002a1c <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
20002864:	f647 2378 	movw	r3, #31352	; 0x7a78
20002868:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000286c:	681b      	ldr	r3, [r3, #0]
2000286e:	f103 0301 	add.w	r3, r3, #1
20002872:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
20002874:	f647 2378 	movw	r3, #31352	; 0x7a78
20002878:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000287c:	68fa      	ldr	r2, [r7, #12]
2000287e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
20002880:	68fb      	ldr	r3, [r7, #12]
20002882:	2b00      	cmp	r3, #0
20002884:	d135      	bne.n	200028f2 <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
20002886:	f647 232c 	movw	r3, #31276	; 0x7a2c
2000288a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000288e:	681b      	ldr	r3, [r3, #0]
20002890:	681b      	ldr	r3, [r3, #0]
20002892:	2b00      	cmp	r3, #0
20002894:	d009      	beq.n	200028aa <xTaskIncrementTick+0x62>
20002896:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000289a:	f383 8811 	msr	BASEPRI, r3
2000289e:	f3bf 8f6f 	isb	sy
200028a2:	f3bf 8f4f 	dsb	sy
200028a6:	617b      	str	r3, [r7, #20]
200028a8:	e7fe      	b.n	200028a8 <xTaskIncrementTick+0x60>
200028aa:	f647 232c 	movw	r3, #31276	; 0x7a2c
200028ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028b2:	681b      	ldr	r3, [r3, #0]
200028b4:	613b      	str	r3, [r7, #16]
200028b6:	f647 2330 	movw	r3, #31280	; 0x7a30
200028ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028be:	681a      	ldr	r2, [r3, #0]
200028c0:	f647 232c 	movw	r3, #31276	; 0x7a2c
200028c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028c8:	601a      	str	r2, [r3, #0]
200028ca:	f647 2330 	movw	r3, #31280	; 0x7a30
200028ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028d2:	693a      	ldr	r2, [r7, #16]
200028d4:	601a      	str	r2, [r3, #0]
200028d6:	f647 238c 	movw	r3, #31372	; 0x7a8c
200028da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028de:	681b      	ldr	r3, [r3, #0]
200028e0:	f103 0201 	add.w	r2, r3, #1
200028e4:	f647 238c 	movw	r3, #31372	; 0x7a8c
200028e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028ec:	601a      	str	r2, [r3, #0]
200028ee:	f000 fbb3 	bl	20003058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
200028f2:	f647 2394 	movw	r3, #31380	; 0x7a94
200028f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028fa:	681b      	ldr	r3, [r3, #0]
200028fc:	68fa      	ldr	r2, [r7, #12]
200028fe:	429a      	cmp	r2, r3
20002900:	d373      	bcc.n	200029ea <xTaskIncrementTick+0x1a2>
20002902:	e000      	b.n	20002906 <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002904:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002906:	f647 232c 	movw	r3, #31276	; 0x7a2c
2000290a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000290e:	681b      	ldr	r3, [r3, #0]
20002910:	681b      	ldr	r3, [r3, #0]
20002912:	2b00      	cmp	r3, #0
20002914:	d102      	bne.n	2000291c <xTaskIncrementTick+0xd4>
20002916:	f04f 0301 	mov.w	r3, #1
2000291a:	e001      	b.n	20002920 <xTaskIncrementTick+0xd8>
2000291c:	f04f 0300 	mov.w	r3, #0
20002920:	2b00      	cmp	r3, #0
20002922:	d007      	beq.n	20002934 <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002924:	f647 2394 	movw	r3, #31380	; 0x7a94
20002928:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000292c:	f04f 32ff 	mov.w	r2, #4294967295
20002930:	601a      	str	r2, [r3, #0]
					break;
20002932:	e05a      	b.n	200029ea <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
20002934:	f647 232c 	movw	r3, #31276	; 0x7a2c
20002938:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000293c:	681b      	ldr	r3, [r3, #0]
2000293e:	68db      	ldr	r3, [r3, #12]
20002940:	68db      	ldr	r3, [r3, #12]
20002942:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
20002944:	683b      	ldr	r3, [r7, #0]
20002946:	685b      	ldr	r3, [r3, #4]
20002948:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
2000294a:	68fa      	ldr	r2, [r7, #12]
2000294c:	687b      	ldr	r3, [r7, #4]
2000294e:	429a      	cmp	r2, r3
20002950:	d206      	bcs.n	20002960 <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
20002952:	f647 2394 	movw	r3, #31380	; 0x7a94
20002956:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000295a:	687a      	ldr	r2, [r7, #4]
2000295c:	601a      	str	r2, [r3, #0]
						break;
2000295e:	e044      	b.n	200029ea <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002960:	683b      	ldr	r3, [r7, #0]
20002962:	f103 0304 	add.w	r3, r3, #4
20002966:	4618      	mov	r0, r3
20002968:	f7fe fddc 	bl	20001524 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2000296c:	683b      	ldr	r3, [r7, #0]
2000296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002970:	2b00      	cmp	r3, #0
20002972:	d005      	beq.n	20002980 <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002974:	683b      	ldr	r3, [r7, #0]
20002976:	f103 0318 	add.w	r3, r3, #24
2000297a:	4618      	mov	r0, r3
2000297c:	f7fe fdd2 	bl	20001524 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
20002980:	683b      	ldr	r3, [r7, #0]
20002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002984:	f04f 0201 	mov.w	r2, #1
20002988:	fa02 f203 	lsl.w	r2, r2, r3
2000298c:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002990:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002994:	681b      	ldr	r3, [r3, #0]
20002996:	ea42 0203 	orr.w	r2, r2, r3
2000299a:	f647 237c 	movw	r3, #31356	; 0x7a7c
2000299e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029a2:	601a      	str	r2, [r3, #0]
200029a4:	683b      	ldr	r3, [r7, #0]
200029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200029a8:	4613      	mov	r3, r2
200029aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
200029ae:	4413      	add	r3, r2
200029b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200029b4:	461a      	mov	r2, r3
200029b6:	f647 13a0 	movw	r3, #31136	; 0x79a0
200029ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029be:	441a      	add	r2, r3
200029c0:	683b      	ldr	r3, [r7, #0]
200029c2:	f103 0304 	add.w	r3, r3, #4
200029c6:	4610      	mov	r0, r2
200029c8:	4619      	mov	r1, r3
200029ca:	f7fe fd4d 	bl	20001468 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
200029ce:	683b      	ldr	r3, [r7, #0]
200029d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200029d2:	f647 139c 	movw	r3, #31132	; 0x799c
200029d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029da:	681b      	ldr	r3, [r3, #0]
200029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200029de:	429a      	cmp	r2, r3
200029e0:	d390      	bcc.n	20002904 <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
200029e2:	f04f 0301 	mov.w	r3, #1
200029e6:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
200029e8:	e78d      	b.n	20002906 <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
200029ea:	f647 139c 	movw	r3, #31132	; 0x799c
200029ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029f2:	681b      	ldr	r3, [r3, #0]
200029f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200029f6:	4613      	mov	r3, r2
200029f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200029fc:	4413      	add	r3, r2
200029fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002a02:	461a      	mov	r2, r3
20002a04:	f647 13a0 	movw	r3, #31136	; 0x79a0
20002a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a0c:	4413      	add	r3, r2
20002a0e:	681b      	ldr	r3, [r3, #0]
20002a10:	2b01      	cmp	r3, #1
20002a12:	d910      	bls.n	20002a36 <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
20002a14:	f04f 0301 	mov.w	r3, #1
20002a18:	60bb      	str	r3, [r7, #8]
20002a1a:	e00d      	b.n	20002a38 <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
20002a1c:	f647 2384 	movw	r3, #31364	; 0x7a84
20002a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a24:	681b      	ldr	r3, [r3, #0]
20002a26:	f103 0201 	add.w	r2, r3, #1
20002a2a:	f647 2384 	movw	r3, #31364	; 0x7a84
20002a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a32:	601a      	str	r2, [r3, #0]
20002a34:	e000      	b.n	20002a38 <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
20002a36:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
20002a38:	f647 2388 	movw	r3, #31368	; 0x7a88
20002a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a40:	681b      	ldr	r3, [r3, #0]
20002a42:	2b00      	cmp	r3, #0
20002a44:	d002      	beq.n	20002a4c <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
20002a46:	f04f 0301 	mov.w	r3, #1
20002a4a:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
20002a4c:	68bb      	ldr	r3, [r7, #8]
}
20002a4e:	4618      	mov	r0, r3
20002a50:	f107 0718 	add.w	r7, r7, #24
20002a54:	46bd      	mov	sp, r7
20002a56:	bd80      	pop	{r7, pc}

20002a58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
20002a58:	b580      	push	{r7, lr}
20002a5a:	b088      	sub	sp, #32
20002a5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
20002a5e:	f647 239c 	movw	r3, #31388	; 0x7a9c
20002a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a66:	681b      	ldr	r3, [r3, #0]
20002a68:	2b00      	cmp	r3, #0
20002a6a:	d007      	beq.n	20002a7c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
20002a6c:	f647 2388 	movw	r3, #31368	; 0x7a88
20002a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a74:	f04f 0201 	mov.w	r2, #1
20002a78:	601a      	str	r2, [r3, #0]
20002a7a:	e0bc      	b.n	20002bf6 <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
20002a7c:	f647 2388 	movw	r3, #31368	; 0x7a88
20002a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a84:	f04f 0200 	mov.w	r2, #0
20002a88:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
20002a8a:	f7fd fc6d 	bl	20000368 <ulGetRunTimeCounterValue>
20002a8e:	4602      	mov	r2, r0
20002a90:	f647 23a4 	movw	r3, #31396	; 0x7aa4
20002a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a98:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
20002a9a:	f647 23a4 	movw	r3, #31396	; 0x7aa4
20002a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aa2:	681a      	ldr	r2, [r3, #0]
20002aa4:	f647 23a0 	movw	r3, #31392	; 0x7aa0
20002aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aac:	681b      	ldr	r3, [r3, #0]
20002aae:	429a      	cmp	r2, r3
20002ab0:	d913      	bls.n	20002ada <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
20002ab2:	f647 139c 	movw	r3, #31132	; 0x799c
20002ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aba:	681a      	ldr	r2, [r3, #0]
20002abc:	6d11      	ldr	r1, [r2, #80]	; 0x50
20002abe:	f647 23a4 	movw	r3, #31396	; 0x7aa4
20002ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ac6:	6818      	ldr	r0, [r3, #0]
20002ac8:	f647 23a0 	movw	r3, #31392	; 0x7aa0
20002acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ad0:	681b      	ldr	r3, [r3, #0]
20002ad2:	ebc3 0300 	rsb	r3, r3, r0
20002ad6:	440b      	add	r3, r1
20002ad8:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
20002ada:	f647 23a4 	movw	r3, #31396	; 0x7aa4
20002ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ae2:	681a      	ldr	r2, [r3, #0]
20002ae4:	f647 23a0 	movw	r3, #31392	; 0x7aa0
20002ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aec:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
20002aee:	f647 139c 	movw	r3, #31132	; 0x799c
20002af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002af6:	681b      	ldr	r3, [r3, #0]
20002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002afa:	607b      	str	r3, [r7, #4]
20002afc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
20002b00:	60bb      	str	r3, [r7, #8]
20002b02:	687b      	ldr	r3, [r7, #4]
20002b04:	681a      	ldr	r2, [r3, #0]
20002b06:	68bb      	ldr	r3, [r7, #8]
20002b08:	429a      	cmp	r2, r3
20002b0a:	d114      	bne.n	20002b36 <vTaskSwitchContext+0xde>
20002b0c:	687b      	ldr	r3, [r7, #4]
20002b0e:	f103 0304 	add.w	r3, r3, #4
20002b12:	681a      	ldr	r2, [r3, #0]
20002b14:	68bb      	ldr	r3, [r7, #8]
20002b16:	429a      	cmp	r2, r3
20002b18:	d10d      	bne.n	20002b36 <vTaskSwitchContext+0xde>
20002b1a:	687b      	ldr	r3, [r7, #4]
20002b1c:	f103 0308 	add.w	r3, r3, #8
20002b20:	681a      	ldr	r2, [r3, #0]
20002b22:	68bb      	ldr	r3, [r7, #8]
20002b24:	429a      	cmp	r2, r3
20002b26:	d106      	bne.n	20002b36 <vTaskSwitchContext+0xde>
20002b28:	687b      	ldr	r3, [r7, #4]
20002b2a:	f103 030c 	add.w	r3, r3, #12
20002b2e:	681a      	ldr	r2, [r3, #0]
20002b30:	68bb      	ldr	r3, [r7, #8]
20002b32:	429a      	cmp	r2, r3
20002b34:	d00f      	beq.n	20002b56 <vTaskSwitchContext+0xfe>
20002b36:	f647 139c 	movw	r3, #31132	; 0x799c
20002b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b3e:	681a      	ldr	r2, [r3, #0]
20002b40:	f647 139c 	movw	r3, #31132	; 0x799c
20002b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b48:	681b      	ldr	r3, [r3, #0]
20002b4a:	f103 0334 	add.w	r3, r3, #52	; 0x34
20002b4e:	4610      	mov	r0, r2
20002b50:	4619      	mov	r1, r3
20002b52:	f7fd fc77 	bl	20000444 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
20002b56:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002b5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b5e:	681b      	ldr	r3, [r3, #0]
20002b60:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
20002b62:	697b      	ldr	r3, [r7, #20]
20002b64:	fab3 f383 	clz	r3, r3
20002b68:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
20002b6a:	7efb      	ldrb	r3, [r7, #27]
20002b6c:	f1c3 031f 	rsb	r3, r3, #31
20002b70:	60fb      	str	r3, [r7, #12]
20002b72:	68fa      	ldr	r2, [r7, #12]
20002b74:	4613      	mov	r3, r2
20002b76:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b7a:	4413      	add	r3, r2
20002b7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b80:	461a      	mov	r2, r3
20002b82:	f647 13a0 	movw	r3, #31136	; 0x79a0
20002b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b8a:	4413      	add	r3, r2
20002b8c:	681b      	ldr	r3, [r3, #0]
20002b8e:	2b00      	cmp	r3, #0
20002b90:	d109      	bne.n	20002ba6 <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20002b92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002b96:	f383 8811 	msr	BASEPRI, r3
20002b9a:	f3bf 8f6f 	isb	sy
20002b9e:	f3bf 8f4f 	dsb	sy
20002ba2:	61fb      	str	r3, [r7, #28]
20002ba4:	e7fe      	b.n	20002ba4 <vTaskSwitchContext+0x14c>
20002ba6:	68fa      	ldr	r2, [r7, #12]
20002ba8:	4613      	mov	r3, r2
20002baa:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002bae:	4413      	add	r3, r2
20002bb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002bb4:	461a      	mov	r2, r3
20002bb6:	f647 13a0 	movw	r3, #31136	; 0x79a0
20002bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bbe:	4413      	add	r3, r2
20002bc0:	613b      	str	r3, [r7, #16]
20002bc2:	693b      	ldr	r3, [r7, #16]
20002bc4:	685b      	ldr	r3, [r3, #4]
20002bc6:	685a      	ldr	r2, [r3, #4]
20002bc8:	693b      	ldr	r3, [r7, #16]
20002bca:	605a      	str	r2, [r3, #4]
20002bcc:	693b      	ldr	r3, [r7, #16]
20002bce:	685a      	ldr	r2, [r3, #4]
20002bd0:	693b      	ldr	r3, [r7, #16]
20002bd2:	f103 0308 	add.w	r3, r3, #8
20002bd6:	429a      	cmp	r2, r3
20002bd8:	d104      	bne.n	20002be4 <vTaskSwitchContext+0x18c>
20002bda:	693b      	ldr	r3, [r7, #16]
20002bdc:	685b      	ldr	r3, [r3, #4]
20002bde:	685a      	ldr	r2, [r3, #4]
20002be0:	693b      	ldr	r3, [r7, #16]
20002be2:	605a      	str	r2, [r3, #4]
20002be4:	693b      	ldr	r3, [r7, #16]
20002be6:	685b      	ldr	r3, [r3, #4]
20002be8:	68db      	ldr	r3, [r3, #12]
20002bea:	461a      	mov	r2, r3
20002bec:	f647 139c 	movw	r3, #31132	; 0x799c
20002bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bf4:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
20002bf6:	f107 0720 	add.w	r7, r7, #32
20002bfa:	46bd      	mov	sp, r7
20002bfc:	bd80      	pop	{r7, pc}
20002bfe:	bf00      	nop

20002c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002c00:	b580      	push	{r7, lr}
20002c02:	b084      	sub	sp, #16
20002c04:	af00      	add	r7, sp, #0
20002c06:	6078      	str	r0, [r7, #4]
20002c08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002c0a:	687b      	ldr	r3, [r7, #4]
20002c0c:	2b00      	cmp	r3, #0
20002c0e:	d109      	bne.n	20002c24 <vTaskPlaceOnEventList+0x24>
20002c10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002c14:	f383 8811 	msr	BASEPRI, r3
20002c18:	f3bf 8f6f 	isb	sy
20002c1c:	f3bf 8f4f 	dsb	sy
20002c20:	60fb      	str	r3, [r7, #12]
20002c22:	e7fe      	b.n	20002c22 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002c24:	f647 139c 	movw	r3, #31132	; 0x799c
20002c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c2c:	681b      	ldr	r3, [r3, #0]
20002c2e:	f103 0318 	add.w	r3, r3, #24
20002c32:	6878      	ldr	r0, [r7, #4]
20002c34:	4619      	mov	r1, r3
20002c36:	f7fe fc3b 	bl	200014b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002c3a:	6838      	ldr	r0, [r7, #0]
20002c3c:	f04f 0101 	mov.w	r1, #1
20002c40:	f000 fd42 	bl	200036c8 <prvAddCurrentTaskToDelayedList>
}
20002c44:	f107 0710 	add.w	r7, r7, #16
20002c48:	46bd      	mov	sp, r7
20002c4a:	bd80      	pop	{r7, pc}

20002c4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002c4c:	b580      	push	{r7, lr}
20002c4e:	b086      	sub	sp, #24
20002c50:	af00      	add	r7, sp, #0
20002c52:	60f8      	str	r0, [r7, #12]
20002c54:	60b9      	str	r1, [r7, #8]
20002c56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002c58:	68fb      	ldr	r3, [r7, #12]
20002c5a:	2b00      	cmp	r3, #0
20002c5c:	d109      	bne.n	20002c72 <vTaskPlaceOnEventListRestricted+0x26>
20002c5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002c62:	f383 8811 	msr	BASEPRI, r3
20002c66:	f3bf 8f6f 	isb	sy
20002c6a:	f3bf 8f4f 	dsb	sy
20002c6e:	617b      	str	r3, [r7, #20]
20002c70:	e7fe      	b.n	20002c70 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002c72:	f647 139c 	movw	r3, #31132	; 0x799c
20002c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c7a:	681b      	ldr	r3, [r3, #0]
20002c7c:	f103 0318 	add.w	r3, r3, #24
20002c80:	68f8      	ldr	r0, [r7, #12]
20002c82:	4619      	mov	r1, r3
20002c84:	f7fe fbf0 	bl	20001468 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
20002c88:	687b      	ldr	r3, [r7, #4]
20002c8a:	2b00      	cmp	r3, #0
20002c8c:	d002      	beq.n	20002c94 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
20002c8e:	f04f 33ff 	mov.w	r3, #4294967295
20002c92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
20002c94:	68b8      	ldr	r0, [r7, #8]
20002c96:	6879      	ldr	r1, [r7, #4]
20002c98:	f000 fd16 	bl	200036c8 <prvAddCurrentTaskToDelayedList>
	}
20002c9c:	f107 0718 	add.w	r7, r7, #24
20002ca0:	46bd      	mov	sp, r7
20002ca2:	bd80      	pop	{r7, pc}

20002ca4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002ca4:	b580      	push	{r7, lr}
20002ca6:	b086      	sub	sp, #24
20002ca8:	af00      	add	r7, sp, #0
20002caa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
20002cac:	687b      	ldr	r3, [r7, #4]
20002cae:	68db      	ldr	r3, [r3, #12]
20002cb0:	68db      	ldr	r3, [r3, #12]
20002cb2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
20002cb4:	68fb      	ldr	r3, [r7, #12]
20002cb6:	2b00      	cmp	r3, #0
20002cb8:	d109      	bne.n	20002cce <xTaskRemoveFromEventList+0x2a>
20002cba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002cbe:	f383 8811 	msr	BASEPRI, r3
20002cc2:	f3bf 8f6f 	isb	sy
20002cc6:	f3bf 8f4f 	dsb	sy
20002cca:	617b      	str	r3, [r7, #20]
20002ccc:	e7fe      	b.n	20002ccc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002cce:	68fb      	ldr	r3, [r7, #12]
20002cd0:	f103 0318 	add.w	r3, r3, #24
20002cd4:	4618      	mov	r0, r3
20002cd6:	f7fe fc25 	bl	20001524 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002cda:	f647 239c 	movw	r3, #31388	; 0x7a9c
20002cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ce2:	681b      	ldr	r3, [r3, #0]
20002ce4:	2b00      	cmp	r3, #0
20002ce6:	d12d      	bne.n	20002d44 <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002ce8:	68fb      	ldr	r3, [r7, #12]
20002cea:	f103 0304 	add.w	r3, r3, #4
20002cee:	4618      	mov	r0, r3
20002cf0:	f7fe fc18 	bl	20001524 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002cf4:	68fb      	ldr	r3, [r7, #12]
20002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002cf8:	f04f 0201 	mov.w	r2, #1
20002cfc:	fa02 f203 	lsl.w	r2, r2, r3
20002d00:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d08:	681b      	ldr	r3, [r3, #0]
20002d0a:	ea42 0203 	orr.w	r2, r2, r3
20002d0e:	f647 237c 	movw	r3, #31356	; 0x7a7c
20002d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d16:	601a      	str	r2, [r3, #0]
20002d18:	68fb      	ldr	r3, [r7, #12]
20002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002d1c:	4613      	mov	r3, r2
20002d1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002d22:	4413      	add	r3, r2
20002d24:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002d28:	461a      	mov	r2, r3
20002d2a:	f647 13a0 	movw	r3, #31136	; 0x79a0
20002d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d32:	441a      	add	r2, r3
20002d34:	68fb      	ldr	r3, [r7, #12]
20002d36:	f103 0304 	add.w	r3, r3, #4
20002d3a:	4610      	mov	r0, r2
20002d3c:	4619      	mov	r1, r3
20002d3e:	f7fe fb93 	bl	20001468 <vListInsertEnd>
20002d42:	e009      	b.n	20002d58 <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002d44:	68fb      	ldr	r3, [r7, #12]
20002d46:	f103 0318 	add.w	r3, r3, #24
20002d4a:	f647 2034 	movw	r0, #31284	; 0x7a34
20002d4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d52:	4619      	mov	r1, r3
20002d54:	f7fe fb88 	bl	20001468 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002d58:	68fb      	ldr	r3, [r7, #12]
20002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002d5c:	f647 139c 	movw	r3, #31132	; 0x799c
20002d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d64:	681b      	ldr	r3, [r3, #0]
20002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002d68:	429a      	cmp	r2, r3
20002d6a:	d90a      	bls.n	20002d82 <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002d6c:	f04f 0301 	mov.w	r3, #1
20002d70:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002d72:	f647 2388 	movw	r3, #31368	; 0x7a88
20002d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d7a:	f04f 0201 	mov.w	r2, #1
20002d7e:	601a      	str	r2, [r3, #0]
20002d80:	e002      	b.n	20002d88 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
20002d82:	f04f 0300 	mov.w	r3, #0
20002d86:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
20002d88:	693b      	ldr	r3, [r7, #16]
}
20002d8a:	4618      	mov	r0, r3
20002d8c:	f107 0718 	add.w	r7, r7, #24
20002d90:	46bd      	mov	sp, r7
20002d92:	bd80      	pop	{r7, pc}

20002d94 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002d94:	b480      	push	{r7}
20002d96:	b085      	sub	sp, #20
20002d98:	af00      	add	r7, sp, #0
20002d9a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
20002d9c:	687b      	ldr	r3, [r7, #4]
20002d9e:	2b00      	cmp	r3, #0
20002da0:	d109      	bne.n	20002db6 <vTaskSetTimeOutState+0x22>
20002da2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002da6:	f383 8811 	msr	BASEPRI, r3
20002daa:	f3bf 8f6f 	isb	sy
20002dae:	f3bf 8f4f 	dsb	sy
20002db2:	60fb      	str	r3, [r7, #12]
20002db4:	e7fe      	b.n	20002db4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002db6:	f647 238c 	movw	r3, #31372	; 0x7a8c
20002dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dbe:	681a      	ldr	r2, [r3, #0]
20002dc0:	687b      	ldr	r3, [r7, #4]
20002dc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002dc4:	f647 2378 	movw	r3, #31352	; 0x7a78
20002dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dcc:	681a      	ldr	r2, [r3, #0]
20002dce:	687b      	ldr	r3, [r7, #4]
20002dd0:	605a      	str	r2, [r3, #4]
}
20002dd2:	f107 0714 	add.w	r7, r7, #20
20002dd6:	46bd      	mov	sp, r7
20002dd8:	bc80      	pop	{r7}
20002dda:	4770      	bx	lr

20002ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002ddc:	b580      	push	{r7, lr}
20002dde:	b086      	sub	sp, #24
20002de0:	af00      	add	r7, sp, #0
20002de2:	6078      	str	r0, [r7, #4]
20002de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002de6:	687b      	ldr	r3, [r7, #4]
20002de8:	2b00      	cmp	r3, #0
20002dea:	d109      	bne.n	20002e00 <xTaskCheckForTimeOut+0x24>
20002dec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002df0:	f383 8811 	msr	BASEPRI, r3
20002df4:	f3bf 8f6f 	isb	sy
20002df8:	f3bf 8f4f 	dsb	sy
20002dfc:	613b      	str	r3, [r7, #16]
20002dfe:	e7fe      	b.n	20002dfe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
20002e00:	683b      	ldr	r3, [r7, #0]
20002e02:	2b00      	cmp	r3, #0
20002e04:	d109      	bne.n	20002e1a <xTaskCheckForTimeOut+0x3e>
20002e06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002e0a:	f383 8811 	msr	BASEPRI, r3
20002e0e:	f3bf 8f6f 	isb	sy
20002e12:	f3bf 8f4f 	dsb	sy
20002e16:	617b      	str	r3, [r7, #20]
20002e18:	e7fe      	b.n	20002e18 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
20002e1a:	f001 fbff 	bl	2000461c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002e1e:	f647 2378 	movw	r3, #31352	; 0x7a78
20002e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e26:	681b      	ldr	r3, [r3, #0]
20002e28:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002e2a:	683b      	ldr	r3, [r7, #0]
20002e2c:	681b      	ldr	r3, [r3, #0]
20002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
20002e32:	d103      	bne.n	20002e3c <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002e34:	f04f 0300 	mov.w	r3, #0
20002e38:	60bb      	str	r3, [r7, #8]
20002e3a:	e02e      	b.n	20002e9a <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002e3c:	687b      	ldr	r3, [r7, #4]
20002e3e:	681a      	ldr	r2, [r3, #0]
20002e40:	f647 238c 	movw	r3, #31372	; 0x7a8c
20002e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e48:	681b      	ldr	r3, [r3, #0]
20002e4a:	429a      	cmp	r2, r3
20002e4c:	d008      	beq.n	20002e60 <xTaskCheckForTimeOut+0x84>
20002e4e:	687b      	ldr	r3, [r7, #4]
20002e50:	685a      	ldr	r2, [r3, #4]
20002e52:	68fb      	ldr	r3, [r7, #12]
20002e54:	429a      	cmp	r2, r3
20002e56:	d803      	bhi.n	20002e60 <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002e58:	f04f 0301 	mov.w	r3, #1
20002e5c:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002e5e:	e01c      	b.n	20002e9a <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002e60:	687b      	ldr	r3, [r7, #4]
20002e62:	685b      	ldr	r3, [r3, #4]
20002e64:	68fa      	ldr	r2, [r7, #12]
20002e66:	ebc3 0202 	rsb	r2, r3, r2
20002e6a:	683b      	ldr	r3, [r7, #0]
20002e6c:	681b      	ldr	r3, [r3, #0]
20002e6e:	429a      	cmp	r2, r3
20002e70:	d210      	bcs.n	20002e94 <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
20002e72:	683b      	ldr	r3, [r7, #0]
20002e74:	681a      	ldr	r2, [r3, #0]
20002e76:	687b      	ldr	r3, [r7, #4]
20002e78:	6859      	ldr	r1, [r3, #4]
20002e7a:	68fb      	ldr	r3, [r7, #12]
20002e7c:	ebc3 0301 	rsb	r3, r3, r1
20002e80:	441a      	add	r2, r3
20002e82:	683b      	ldr	r3, [r7, #0]
20002e84:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
20002e86:	6878      	ldr	r0, [r7, #4]
20002e88:	f7ff ff84 	bl	20002d94 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
20002e8c:	f04f 0300 	mov.w	r3, #0
20002e90:	60bb      	str	r3, [r7, #8]
20002e92:	e002      	b.n	20002e9a <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
20002e94:	f04f 0301 	mov.w	r3, #1
20002e98:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
20002e9a:	f001 fbf7 	bl	2000468c <vPortExitCritical>

	return xReturn;
20002e9e:	68bb      	ldr	r3, [r7, #8]
}
20002ea0:	4618      	mov	r0, r3
20002ea2:	f107 0718 	add.w	r7, r7, #24
20002ea6:	46bd      	mov	sp, r7
20002ea8:	bd80      	pop	{r7, pc}
20002eaa:	bf00      	nop

20002eac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002eac:	b480      	push	{r7}
20002eae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
20002eb0:	f647 2388 	movw	r3, #31368	; 0x7a88
20002eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002eb8:	f04f 0201 	mov.w	r2, #1
20002ebc:	601a      	str	r2, [r3, #0]
}
20002ebe:	46bd      	mov	sp, r7
20002ec0:	bc80      	pop	{r7}
20002ec2:	4770      	bx	lr

20002ec4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002ec4:	b580      	push	{r7, lr}
20002ec6:	b082      	sub	sp, #8
20002ec8:	af00      	add	r7, sp, #0
20002eca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002ecc:	f000 f868 	bl	20002fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
20002ed0:	f647 13a0 	movw	r3, #31136	; 0x79a0
20002ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ed8:	681b      	ldr	r3, [r3, #0]
20002eda:	2b01      	cmp	r3, #1
20002edc:	d90a      	bls.n	20002ef4 <prvIdleTask+0x30>
			{
				taskYIELD();
20002ede:	f64e 5304 	movw	r3, #60676	; 0xed04
20002ee2:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002eea:	601a      	str	r2, [r3, #0]
20002eec:	f3bf 8f4f 	dsb	sy
20002ef0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
20002ef4:	f7fd faa0 	bl	20000438 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
20002ef8:	e7e8      	b.n	20002ecc <prvIdleTask+0x8>
20002efa:	bf00      	nop

20002efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002efc:	b580      	push	{r7, lr}
20002efe:	b082      	sub	sp, #8
20002f00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002f02:	f04f 0300 	mov.w	r3, #0
20002f06:	607b      	str	r3, [r7, #4]
20002f08:	e013      	b.n	20002f32 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002f0a:	687a      	ldr	r2, [r7, #4]
20002f0c:	4613      	mov	r3, r2
20002f0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f12:	4413      	add	r3, r2
20002f14:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f18:	461a      	mov	r2, r3
20002f1a:	f647 13a0 	movw	r3, #31136	; 0x79a0
20002f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f22:	4413      	add	r3, r2
20002f24:	4618      	mov	r0, r3
20002f26:	f7fe fa6d 	bl	20001404 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002f2a:	687b      	ldr	r3, [r7, #4]
20002f2c:	f103 0301 	add.w	r3, r3, #1
20002f30:	607b      	str	r3, [r7, #4]
20002f32:	687b      	ldr	r3, [r7, #4]
20002f34:	2b04      	cmp	r3, #4
20002f36:	d9e8      	bls.n	20002f0a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
20002f38:	f647 2004 	movw	r0, #31236	; 0x7a04
20002f3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f40:	f7fe fa60 	bl	20001404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002f44:	f647 2018 	movw	r0, #31256	; 0x7a18
20002f48:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f4c:	f7fe fa5a 	bl	20001404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002f50:	f647 2034 	movw	r0, #31284	; 0x7a34
20002f54:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f58:	f7fe fa54 	bl	20001404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002f5c:	f647 2048 	movw	r0, #31304	; 0x7a48
20002f60:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f64:	f7fe fa4e 	bl	20001404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002f68:	f647 2060 	movw	r0, #31328	; 0x7a60
20002f6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002f70:	f7fe fa48 	bl	20001404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
20002f74:	f647 232c 	movw	r3, #31276	; 0x7a2c
20002f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f7c:	f647 2204 	movw	r2, #31236	; 0x7a04
20002f80:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002f84:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002f86:	f647 2330 	movw	r3, #31280	; 0x7a30
20002f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f8e:	f647 2218 	movw	r2, #31256	; 0x7a18
20002f92:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002f96:	601a      	str	r2, [r3, #0]
}
20002f98:	f107 0708 	add.w	r7, r7, #8
20002f9c:	46bd      	mov	sp, r7
20002f9e:	bd80      	pop	{r7, pc}

20002fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002fa0:	b580      	push	{r7, lr}
20002fa2:	b082      	sub	sp, #8
20002fa4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002fa6:	e03c      	b.n	20003022 <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
20002fa8:	f7ff fb5c 	bl	20002664 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
20002fac:	f647 2348 	movw	r3, #31304	; 0x7a48
20002fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fb4:	681b      	ldr	r3, [r3, #0]
20002fb6:	2b00      	cmp	r3, #0
20002fb8:	bf14      	ite	ne
20002fba:	2300      	movne	r3, #0
20002fbc:	2301      	moveq	r3, #1
20002fbe:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
20002fc0:	f7ff fb62 	bl	20002688 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
20002fc4:	683b      	ldr	r3, [r7, #0]
20002fc6:	2b00      	cmp	r3, #0
20002fc8:	d12b      	bne.n	20003022 <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
20002fca:	f001 fb27 	bl	2000461c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
20002fce:	f647 2348 	movw	r3, #31304	; 0x7a48
20002fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fd6:	68db      	ldr	r3, [r3, #12]
20002fd8:	68db      	ldr	r3, [r3, #12]
20002fda:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002fdc:	687b      	ldr	r3, [r7, #4]
20002fde:	f103 0304 	add.w	r3, r3, #4
20002fe2:	4618      	mov	r0, r3
20002fe4:	f7fe fa9e 	bl	20001524 <uxListRemove>
					--uxCurrentNumberOfTasks;
20002fe8:	f647 2374 	movw	r3, #31348	; 0x7a74
20002fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ff0:	681b      	ldr	r3, [r3, #0]
20002ff2:	f103 32ff 	add.w	r2, r3, #4294967295
20002ff6:	f647 2374 	movw	r3, #31348	; 0x7a74
20002ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ffe:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
20003000:	f647 235c 	movw	r3, #31324	; 0x7a5c
20003004:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003008:	681b      	ldr	r3, [r3, #0]
2000300a:	f103 32ff 	add.w	r2, r3, #4294967295
2000300e:	f647 235c 	movw	r3, #31324	; 0x7a5c
20003012:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003016:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
20003018:	f001 fb38 	bl	2000468c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
2000301c:	6878      	ldr	r0, [r7, #4]
2000301e:	f000 f80b 	bl	20003038 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20003022:	f647 235c 	movw	r3, #31324	; 0x7a5c
20003026:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000302a:	681b      	ldr	r3, [r3, #0]
2000302c:	2b00      	cmp	r3, #0
2000302e:	d1bb      	bne.n	20002fa8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20003030:	f107 0708 	add.w	r7, r7, #8
20003034:	46bd      	mov	sp, r7
20003036:	bd80      	pop	{r7, pc}

20003038 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20003038:	b580      	push	{r7, lr}
2000303a:	b082      	sub	sp, #8
2000303c:	af00      	add	r7, sp, #0
2000303e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
20003040:	687b      	ldr	r3, [r7, #4]
20003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003044:	4618      	mov	r0, r3
20003046:	f001 f897 	bl	20004178 <vPortFree>
			vPortFree( pxTCB );
2000304a:	6878      	ldr	r0, [r7, #4]
2000304c:	f001 f894 	bl	20004178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20003050:	f107 0708 	add.w	r7, r7, #8
20003054:	46bd      	mov	sp, r7
20003056:	bd80      	pop	{r7, pc}

20003058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20003058:	b480      	push	{r7}
2000305a:	b083      	sub	sp, #12
2000305c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2000305e:	f647 232c 	movw	r3, #31276	; 0x7a2c
20003062:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003066:	681b      	ldr	r3, [r3, #0]
20003068:	681b      	ldr	r3, [r3, #0]
2000306a:	2b00      	cmp	r3, #0
2000306c:	d102      	bne.n	20003074 <prvResetNextTaskUnblockTime+0x1c>
2000306e:	f04f 0301 	mov.w	r3, #1
20003072:	e001      	b.n	20003078 <prvResetNextTaskUnblockTime+0x20>
20003074:	f04f 0300 	mov.w	r3, #0
20003078:	2b00      	cmp	r3, #0
2000307a:	d007      	beq.n	2000308c <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
2000307c:	f647 2394 	movw	r3, #31380	; 0x7a94
20003080:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003084:	f04f 32ff 	mov.w	r2, #4294967295
20003088:	601a      	str	r2, [r3, #0]
2000308a:	e00e      	b.n	200030aa <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2000308c:	f647 232c 	movw	r3, #31276	; 0x7a2c
20003090:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003094:	681b      	ldr	r3, [r3, #0]
20003096:	68db      	ldr	r3, [r3, #12]
20003098:	68db      	ldr	r3, [r3, #12]
2000309a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
2000309c:	687b      	ldr	r3, [r7, #4]
2000309e:	685a      	ldr	r2, [r3, #4]
200030a0:	f647 2394 	movw	r3, #31380	; 0x7a94
200030a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030a8:	601a      	str	r2, [r3, #0]
	}
}
200030aa:	f107 070c 	add.w	r7, r7, #12
200030ae:	46bd      	mov	sp, r7
200030b0:	bc80      	pop	{r7}
200030b2:	4770      	bx	lr

200030b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
200030b4:	b480      	push	{r7}
200030b6:	b083      	sub	sp, #12
200030b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
200030ba:	f647 2380 	movw	r3, #31360	; 0x7a80
200030be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030c2:	681b      	ldr	r3, [r3, #0]
200030c4:	2b00      	cmp	r3, #0
200030c6:	d103      	bne.n	200030d0 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
200030c8:	f04f 0301 	mov.w	r3, #1
200030cc:	607b      	str	r3, [r7, #4]
200030ce:	e00d      	b.n	200030ec <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200030d0:	f647 239c 	movw	r3, #31388	; 0x7a9c
200030d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030d8:	681b      	ldr	r3, [r3, #0]
200030da:	2b00      	cmp	r3, #0
200030dc:	d103      	bne.n	200030e6 <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
200030de:	f04f 0302 	mov.w	r3, #2
200030e2:	607b      	str	r3, [r7, #4]
200030e4:	e002      	b.n	200030ec <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
200030e6:	f04f 0300 	mov.w	r3, #0
200030ea:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
200030ec:	687b      	ldr	r3, [r7, #4]
	}
200030ee:	4618      	mov	r0, r3
200030f0:	f107 070c 	add.w	r7, r7, #12
200030f4:	46bd      	mov	sp, r7
200030f6:	bc80      	pop	{r7}
200030f8:	4770      	bx	lr
200030fa:	bf00      	nop

200030fc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
200030fc:	b580      	push	{r7, lr}
200030fe:	b084      	sub	sp, #16
20003100:	af00      	add	r7, sp, #0
20003102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20003104:	687b      	ldr	r3, [r7, #4]
20003106:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
20003108:	687b      	ldr	r3, [r7, #4]
2000310a:	2b00      	cmp	r3, #0
2000310c:	f000 8098 	beq.w	20003240 <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
20003110:	68fb      	ldr	r3, [r7, #12]
20003112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003114:	f647 139c 	movw	r3, #31132	; 0x799c
20003118:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000311c:	681b      	ldr	r3, [r3, #0]
2000311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003120:	429a      	cmp	r2, r3
20003122:	f080 808d 	bcs.w	20003240 <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20003126:	68fb      	ldr	r3, [r7, #12]
20003128:	699b      	ldr	r3, [r3, #24]
2000312a:	2b00      	cmp	r3, #0
2000312c:	db09      	blt.n	20003142 <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000312e:	f647 139c 	movw	r3, #31132	; 0x799c
20003132:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003136:	681b      	ldr	r3, [r3, #0]
20003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000313a:	f1c3 0205 	rsb	r2, r3, #5
2000313e:	68fb      	ldr	r3, [r7, #12]
20003140:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20003142:	68fb      	ldr	r3, [r7, #12]
20003144:	6959      	ldr	r1, [r3, #20]
20003146:	68fb      	ldr	r3, [r7, #12]
20003148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000314a:	4613      	mov	r3, r2
2000314c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003150:	4413      	add	r3, r2
20003152:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003156:	461a      	mov	r2, r3
20003158:	f647 13a0 	movw	r3, #31136	; 0x79a0
2000315c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003160:	4413      	add	r3, r2
20003162:	4299      	cmp	r1, r3
20003164:	d102      	bne.n	2000316c <vTaskPriorityInherit+0x70>
20003166:	f04f 0301 	mov.w	r3, #1
2000316a:	e001      	b.n	20003170 <vTaskPriorityInherit+0x74>
2000316c:	f04f 0300 	mov.w	r3, #0
20003170:	2b00      	cmp	r3, #0
20003172:	d05d      	beq.n	20003230 <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20003174:	68fb      	ldr	r3, [r7, #12]
20003176:	f103 0304 	add.w	r3, r3, #4
2000317a:	4618      	mov	r0, r3
2000317c:	f7fe f9d2 	bl	20001524 <uxListRemove>
20003180:	4603      	mov	r3, r0
20003182:	2b00      	cmp	r3, #0
20003184:	d124      	bne.n	200031d0 <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20003186:	68fb      	ldr	r3, [r7, #12]
20003188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000318a:	4613      	mov	r3, r2
2000318c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003190:	4413      	add	r3, r2
20003192:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003196:	461a      	mov	r2, r3
20003198:	f647 13a0 	movw	r3, #31136	; 0x79a0
2000319c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031a0:	4413      	add	r3, r2
200031a2:	681b      	ldr	r3, [r3, #0]
200031a4:	2b00      	cmp	r3, #0
200031a6:	d113      	bne.n	200031d0 <vTaskPriorityInherit+0xd4>
200031a8:	68fb      	ldr	r3, [r7, #12]
200031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200031ac:	f04f 0201 	mov.w	r2, #1
200031b0:	fa02 f303 	lsl.w	r3, r2, r3
200031b4:	ea6f 0203 	mvn.w	r2, r3
200031b8:	f647 237c 	movw	r3, #31356	; 0x7a7c
200031bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031c0:	681b      	ldr	r3, [r3, #0]
200031c2:	ea02 0203 	and.w	r2, r2, r3
200031c6:	f647 237c 	movw	r3, #31356	; 0x7a7c
200031ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
200031d0:	f647 139c 	movw	r3, #31132	; 0x799c
200031d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031d8:	681b      	ldr	r3, [r3, #0]
200031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200031dc:	68fb      	ldr	r3, [r7, #12]
200031de:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
200031e0:	68fb      	ldr	r3, [r7, #12]
200031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200031e4:	f04f 0201 	mov.w	r2, #1
200031e8:	fa02 f203 	lsl.w	r2, r2, r3
200031ec:	f647 237c 	movw	r3, #31356	; 0x7a7c
200031f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031f4:	681b      	ldr	r3, [r3, #0]
200031f6:	ea42 0203 	orr.w	r2, r2, r3
200031fa:	f647 237c 	movw	r3, #31356	; 0x7a7c
200031fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003202:	601a      	str	r2, [r3, #0]
20003204:	68fb      	ldr	r3, [r7, #12]
20003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003208:	4613      	mov	r3, r2
2000320a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000320e:	4413      	add	r3, r2
20003210:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003214:	461a      	mov	r2, r3
20003216:	f647 13a0 	movw	r3, #31136	; 0x79a0
2000321a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000321e:	441a      	add	r2, r3
20003220:	68fb      	ldr	r3, [r7, #12]
20003222:	f103 0304 	add.w	r3, r3, #4
20003226:	4610      	mov	r0, r2
20003228:	4619      	mov	r1, r3
2000322a:	f7fe f91d 	bl	20001468 <vListInsertEnd>
2000322e:	e007      	b.n	20003240 <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20003230:	f647 139c 	movw	r3, #31132	; 0x799c
20003234:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003238:	681b      	ldr	r3, [r3, #0]
2000323a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000323c:	68fb      	ldr	r3, [r7, #12]
2000323e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20003240:	f107 0710 	add.w	r7, r7, #16
20003244:	46bd      	mov	sp, r7
20003246:	bd80      	pop	{r7, pc}

20003248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20003248:	b580      	push	{r7, lr}
2000324a:	b086      	sub	sp, #24
2000324c:	af00      	add	r7, sp, #0
2000324e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20003250:	687b      	ldr	r3, [r7, #4]
20003252:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
20003254:	f04f 0300 	mov.w	r3, #0
20003258:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
2000325a:	687b      	ldr	r3, [r7, #4]
2000325c:	2b00      	cmp	r3, #0
2000325e:	f000 8092 	beq.w	20003386 <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20003262:	f647 139c 	movw	r3, #31132	; 0x799c
20003266:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000326a:	681b      	ldr	r3, [r3, #0]
2000326c:	68ba      	ldr	r2, [r7, #8]
2000326e:	429a      	cmp	r2, r3
20003270:	d009      	beq.n	20003286 <xTaskPriorityDisinherit+0x3e>
20003272:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003276:	f383 8811 	msr	BASEPRI, r3
2000327a:	f3bf 8f6f 	isb	sy
2000327e:	f3bf 8f4f 	dsb	sy
20003282:	613b      	str	r3, [r7, #16]
20003284:	e7fe      	b.n	20003284 <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
20003286:	68bb      	ldr	r3, [r7, #8]
20003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000328a:	2b00      	cmp	r3, #0
2000328c:	d109      	bne.n	200032a2 <xTaskPriorityDisinherit+0x5a>
2000328e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003292:	f383 8811 	msr	BASEPRI, r3
20003296:	f3bf 8f6f 	isb	sy
2000329a:	f3bf 8f4f 	dsb	sy
2000329e:	617b      	str	r3, [r7, #20]
200032a0:	e7fe      	b.n	200032a0 <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
200032a2:	68bb      	ldr	r3, [r7, #8]
200032a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200032a6:	f103 32ff 	add.w	r2, r3, #4294967295
200032aa:	68bb      	ldr	r3, [r7, #8]
200032ac:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
200032ae:	68bb      	ldr	r3, [r7, #8]
200032b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200032b2:	68bb      	ldr	r3, [r7, #8]
200032b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200032b6:	429a      	cmp	r2, r3
200032b8:	d065      	beq.n	20003386 <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
200032ba:	68bb      	ldr	r3, [r7, #8]
200032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200032be:	2b00      	cmp	r3, #0
200032c0:	d161      	bne.n	20003386 <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200032c2:	68bb      	ldr	r3, [r7, #8]
200032c4:	f103 0304 	add.w	r3, r3, #4
200032c8:	4618      	mov	r0, r3
200032ca:	f7fe f92b 	bl	20001524 <uxListRemove>
200032ce:	4603      	mov	r3, r0
200032d0:	2b00      	cmp	r3, #0
200032d2:	d124      	bne.n	2000331e <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
200032d4:	68bb      	ldr	r3, [r7, #8]
200032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200032d8:	4613      	mov	r3, r2
200032da:	ea4f 0383 	mov.w	r3, r3, lsl #2
200032de:	4413      	add	r3, r2
200032e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200032e4:	461a      	mov	r2, r3
200032e6:	f647 13a0 	movw	r3, #31136	; 0x79a0
200032ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032ee:	4413      	add	r3, r2
200032f0:	681b      	ldr	r3, [r3, #0]
200032f2:	2b00      	cmp	r3, #0
200032f4:	d113      	bne.n	2000331e <xTaskPriorityDisinherit+0xd6>
200032f6:	68bb      	ldr	r3, [r7, #8]
200032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200032fa:	f04f 0201 	mov.w	r2, #1
200032fe:	fa02 f303 	lsl.w	r3, r2, r3
20003302:	ea6f 0203 	mvn.w	r2, r3
20003306:	f647 237c 	movw	r3, #31356	; 0x7a7c
2000330a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000330e:	681b      	ldr	r3, [r3, #0]
20003310:	ea02 0203 	and.w	r2, r2, r3
20003314:	f647 237c 	movw	r3, #31356	; 0x7a7c
20003318:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000331c:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
2000331e:	68bb      	ldr	r3, [r7, #8]
20003320:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20003322:	68bb      	ldr	r3, [r7, #8]
20003324:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003326:	68bb      	ldr	r3, [r7, #8]
20003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000332a:	f1c3 0205 	rsb	r2, r3, #5
2000332e:	68bb      	ldr	r3, [r7, #8]
20003330:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
20003332:	68bb      	ldr	r3, [r7, #8]
20003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003336:	f04f 0201 	mov.w	r2, #1
2000333a:	fa02 f203 	lsl.w	r2, r2, r3
2000333e:	f647 237c 	movw	r3, #31356	; 0x7a7c
20003342:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003346:	681b      	ldr	r3, [r3, #0]
20003348:	ea42 0203 	orr.w	r2, r2, r3
2000334c:	f647 237c 	movw	r3, #31356	; 0x7a7c
20003350:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003354:	601a      	str	r2, [r3, #0]
20003356:	68bb      	ldr	r3, [r7, #8]
20003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000335a:	4613      	mov	r3, r2
2000335c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003360:	4413      	add	r3, r2
20003362:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003366:	461a      	mov	r2, r3
20003368:	f647 13a0 	movw	r3, #31136	; 0x79a0
2000336c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003370:	441a      	add	r2, r3
20003372:	68bb      	ldr	r3, [r7, #8]
20003374:	f103 0304 	add.w	r3, r3, #4
20003378:	4610      	mov	r0, r2
2000337a:	4619      	mov	r1, r3
2000337c:	f7fe f874 	bl	20001468 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20003380:	f04f 0301 	mov.w	r3, #1
20003384:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20003386:	68fb      	ldr	r3, [r7, #12]
	}
20003388:	4618      	mov	r0, r3
2000338a:	f107 0718 	add.w	r7, r7, #24
2000338e:	46bd      	mov	sp, r7
20003390:	bd80      	pop	{r7, pc}
20003392:	bf00      	nop

20003394 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
20003394:	b480      	push	{r7}
20003396:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
20003398:	f647 139c 	movw	r3, #31132	; 0x799c
2000339c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033a0:	681b      	ldr	r3, [r3, #0]
200033a2:	2b00      	cmp	r3, #0
200033a4:	d008      	beq.n	200033b8 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
200033a6:	f647 139c 	movw	r3, #31132	; 0x799c
200033aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033ae:	681b      	ldr	r3, [r3, #0]
200033b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200033b2:	f102 0201 	add.w	r2, r2, #1
200033b6:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
200033b8:	f647 139c 	movw	r3, #31132	; 0x799c
200033bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033c0:	681b      	ldr	r3, [r3, #0]
	}
200033c2:	4618      	mov	r0, r3
200033c4:	46bd      	mov	sp, r7
200033c6:	bc80      	pop	{r7}
200033c8:	4770      	bx	lr
200033ca:	bf00      	nop

200033cc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
200033cc:	b580      	push	{r7, lr}
200033ce:	b084      	sub	sp, #16
200033d0:	af00      	add	r7, sp, #0
200033d2:	6078      	str	r0, [r7, #4]
200033d4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
200033d6:	f001 f921 	bl	2000461c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
200033da:	f647 139c 	movw	r3, #31132	; 0x799c
200033de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033e2:	681b      	ldr	r3, [r3, #0]
200033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200033e6:	2b00      	cmp	r3, #0
200033e8:	d11b      	bne.n	20003422 <ulTaskNotifyTake+0x56>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
200033ea:	f647 139c 	movw	r3, #31132	; 0x799c
200033ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033f2:	681b      	ldr	r3, [r3, #0]
200033f4:	f04f 0201 	mov.w	r2, #1
200033f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
200033fc:	683b      	ldr	r3, [r7, #0]
200033fe:	2b00      	cmp	r3, #0
20003400:	d00f      	beq.n	20003422 <ulTaskNotifyTake+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20003402:	6838      	ldr	r0, [r7, #0]
20003404:	f04f 0101 	mov.w	r1, #1
20003408:	f000 f95e 	bl	200036c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
2000340c:	f64e 5304 	movw	r3, #60676	; 0xed04
20003410:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003418:	601a      	str	r2, [r3, #0]
2000341a:	f3bf 8f4f 	dsb	sy
2000341e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
20003422:	f001 f933 	bl	2000468c <vPortExitCritical>

		taskENTER_CRITICAL();
20003426:	f001 f8f9 	bl	2000461c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
2000342a:	f647 139c 	movw	r3, #31132	; 0x799c
2000342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003432:	681b      	ldr	r3, [r3, #0]
20003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20003436:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
20003438:	68fb      	ldr	r3, [r7, #12]
2000343a:	2b00      	cmp	r3, #0
2000343c:	d014      	beq.n	20003468 <ulTaskNotifyTake+0x9c>
			{
				if( xClearCountOnExit != pdFALSE )
2000343e:	687b      	ldr	r3, [r7, #4]
20003440:	2b00      	cmp	r3, #0
20003442:	d008      	beq.n	20003456 <ulTaskNotifyTake+0x8a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
20003444:	f647 139c 	movw	r3, #31132	; 0x799c
20003448:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000344c:	681b      	ldr	r3, [r3, #0]
2000344e:	f04f 0200 	mov.w	r2, #0
20003452:	655a      	str	r2, [r3, #84]	; 0x54
20003454:	e008      	b.n	20003468 <ulTaskNotifyTake+0x9c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
20003456:	f647 139c 	movw	r3, #31132	; 0x799c
2000345a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000345e:	681b      	ldr	r3, [r3, #0]
20003460:	68fa      	ldr	r2, [r7, #12]
20003462:	f102 32ff 	add.w	r2, r2, #4294967295
20003466:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20003468:	f647 139c 	movw	r3, #31132	; 0x799c
2000346c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003470:	681b      	ldr	r3, [r3, #0]
20003472:	f04f 0200 	mov.w	r2, #0
20003476:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
2000347a:	f001 f907 	bl	2000468c <vPortExitCritical>

		return ulReturn;
2000347e:	68fb      	ldr	r3, [r7, #12]
	}
20003480:	4618      	mov	r0, r3
20003482:	f107 0710 	add.w	r7, r7, #16
20003486:	46bd      	mov	sp, r7
20003488:	bd80      	pop	{r7, pc}
2000348a:	bf00      	nop

2000348c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
2000348c:	b580      	push	{r7, lr}
2000348e:	b086      	sub	sp, #24
20003490:	af00      	add	r7, sp, #0
20003492:	60f8      	str	r0, [r7, #12]
20003494:	60b9      	str	r1, [r7, #8]
20003496:	607a      	str	r2, [r7, #4]
20003498:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
2000349a:	f001 f8bf 	bl	2000461c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
2000349e:	f647 139c 	movw	r3, #31132	; 0x799c
200034a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034a6:	681b      	ldr	r3, [r3, #0]
200034a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
200034ac:	b2db      	uxtb	r3, r3
200034ae:	2b02      	cmp	r3, #2
200034b0:	d027      	beq.n	20003502 <xTaskNotifyWait+0x76>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
200034b2:	f647 139c 	movw	r3, #31132	; 0x799c
200034b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034ba:	681b      	ldr	r3, [r3, #0]
200034bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
200034be:	68fa      	ldr	r2, [r7, #12]
200034c0:	ea6f 0202 	mvn.w	r2, r2
200034c4:	ea01 0202 	and.w	r2, r1, r2
200034c8:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
200034ca:	f647 139c 	movw	r3, #31132	; 0x799c
200034ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034d2:	681b      	ldr	r3, [r3, #0]
200034d4:	f04f 0201 	mov.w	r2, #1
200034d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
200034dc:	683b      	ldr	r3, [r7, #0]
200034de:	2b00      	cmp	r3, #0
200034e0:	d00f      	beq.n	20003502 <xTaskNotifyWait+0x76>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
200034e2:	6838      	ldr	r0, [r7, #0]
200034e4:	f04f 0101 	mov.w	r1, #1
200034e8:	f000 f8ee 	bl	200036c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
200034ec:	f64e 5304 	movw	r3, #60676	; 0xed04
200034f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200034f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200034f8:	601a      	str	r2, [r3, #0]
200034fa:	f3bf 8f4f 	dsb	sy
200034fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
20003502:	f001 f8c3 	bl	2000468c <vPortExitCritical>

		taskENTER_CRITICAL();
20003506:	f001 f889 	bl	2000461c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
2000350a:	687b      	ldr	r3, [r7, #4]
2000350c:	2b00      	cmp	r3, #0
2000350e:	d007      	beq.n	20003520 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
20003510:	f647 139c 	movw	r3, #31132	; 0x799c
20003514:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003518:	681b      	ldr	r3, [r3, #0]
2000351a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
2000351c:	687b      	ldr	r3, [r7, #4]
2000351e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
20003520:	f647 139c 	movw	r3, #31132	; 0x799c
20003524:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003528:	681b      	ldr	r3, [r3, #0]
2000352a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
2000352e:	b2db      	uxtb	r3, r3
20003530:	2b01      	cmp	r3, #1
20003532:	d103      	bne.n	2000353c <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
20003534:	f04f 0300 	mov.w	r3, #0
20003538:	617b      	str	r3, [r7, #20]
2000353a:	e00e      	b.n	2000355a <xTaskNotifyWait+0xce>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
2000353c:	f647 139c 	movw	r3, #31132	; 0x799c
20003540:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003544:	681b      	ldr	r3, [r3, #0]
20003546:	6d59      	ldr	r1, [r3, #84]	; 0x54
20003548:	68ba      	ldr	r2, [r7, #8]
2000354a:	ea6f 0202 	mvn.w	r2, r2
2000354e:	ea01 0202 	and.w	r2, r1, r2
20003552:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
20003554:	f04f 0301 	mov.w	r3, #1
20003558:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
2000355a:	f647 139c 	movw	r3, #31132	; 0x799c
2000355e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003562:	681b      	ldr	r3, [r3, #0]
20003564:	f04f 0200 	mov.w	r2, #0
20003568:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
2000356c:	f001 f88e 	bl	2000468c <vPortExitCritical>

		return xReturn;
20003570:	697b      	ldr	r3, [r7, #20]
	}
20003572:	4618      	mov	r0, r3
20003574:	f107 0718 	add.w	r7, r7, #24
20003578:	46bd      	mov	sp, r7
2000357a:	bd80      	pop	{r7, pc}

2000357c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
2000357c:	b580      	push	{r7, lr}
2000357e:	b08a      	sub	sp, #40	; 0x28
20003580:	af00      	add	r7, sp, #0
20003582:	6078      	str	r0, [r7, #4]
20003584:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
20003586:	687b      	ldr	r3, [r7, #4]
20003588:	2b00      	cmp	r3, #0
2000358a:	d109      	bne.n	200035a0 <vTaskNotifyGiveFromISR+0x24>
2000358c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003590:	f383 8811 	msr	BASEPRI, r3
20003594:	f3bf 8f6f 	isb	sy
20003598:	f3bf 8f4f 	dsb	sy
2000359c:	617b      	str	r3, [r7, #20]
2000359e:	e7fe      	b.n	2000359e <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200035a0:	f001 f910 	bl	200047c4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
200035a4:	687b      	ldr	r3, [r7, #4]
200035a6:	60bb      	str	r3, [r7, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200035a8:	f3ef 8211 	mrs	r2, BASEPRI
200035ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200035b0:	f383 8811 	msr	BASEPRI, r3
200035b4:	f3bf 8f6f 	isb	sy
200035b8:	f3bf 8f4f 	dsb	sy
200035bc:	61fa      	str	r2, [r7, #28]
200035be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
200035c0:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200035c2:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
200035c4:	68bb      	ldr	r3, [r7, #8]
200035c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
200035ca:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
200035cc:	68bb      	ldr	r3, [r7, #8]
200035ce:	f04f 0202 	mov.w	r2, #2
200035d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
200035d6:	68bb      	ldr	r3, [r7, #8]
200035d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200035da:	f103 0201 	add.w	r2, r3, #1
200035de:	68bb      	ldr	r3, [r7, #8]
200035e0:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
200035e2:	7bfb      	ldrb	r3, [r7, #15]
200035e4:	2b01      	cmp	r3, #1
200035e6:	d165      	bne.n	200036b4 <vTaskNotifyGiveFromISR+0x138>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
200035e8:	68bb      	ldr	r3, [r7, #8]
200035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200035ec:	2b00      	cmp	r3, #0
200035ee:	d009      	beq.n	20003604 <vTaskNotifyGiveFromISR+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200035f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200035f4:	f383 8811 	msr	BASEPRI, r3
200035f8:	f3bf 8f6f 	isb	sy
200035fc:	f3bf 8f4f 	dsb	sy
20003600:	623b      	str	r3, [r7, #32]
20003602:	e7fe      	b.n	20003602 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20003604:	f647 239c 	movw	r3, #31388	; 0x7a9c
20003608:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000360c:	681b      	ldr	r3, [r3, #0]
2000360e:	2b00      	cmp	r3, #0
20003610:	d12d      	bne.n	2000366e <vTaskNotifyGiveFromISR+0xf2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20003612:	68bb      	ldr	r3, [r7, #8]
20003614:	f103 0304 	add.w	r3, r3, #4
20003618:	4618      	mov	r0, r3
2000361a:	f7fd ff83 	bl	20001524 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
2000361e:	68bb      	ldr	r3, [r7, #8]
20003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003622:	f04f 0201 	mov.w	r2, #1
20003626:	fa02 f203 	lsl.w	r2, r2, r3
2000362a:	f647 237c 	movw	r3, #31356	; 0x7a7c
2000362e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003632:	681b      	ldr	r3, [r3, #0]
20003634:	ea42 0203 	orr.w	r2, r2, r3
20003638:	f647 237c 	movw	r3, #31356	; 0x7a7c
2000363c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003640:	601a      	str	r2, [r3, #0]
20003642:	68bb      	ldr	r3, [r7, #8]
20003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003646:	4613      	mov	r3, r2
20003648:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000364c:	4413      	add	r3, r2
2000364e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003652:	461a      	mov	r2, r3
20003654:	f647 13a0 	movw	r3, #31136	; 0x79a0
20003658:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000365c:	441a      	add	r2, r3
2000365e:	68bb      	ldr	r3, [r7, #8]
20003660:	f103 0304 	add.w	r3, r3, #4
20003664:	4610      	mov	r0, r2
20003666:	4619      	mov	r1, r3
20003668:	f7fd fefe 	bl	20001468 <vListInsertEnd>
2000366c:	e009      	b.n	20003682 <vTaskNotifyGiveFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
2000366e:	68bb      	ldr	r3, [r7, #8]
20003670:	f103 0318 	add.w	r3, r3, #24
20003674:	f647 2034 	movw	r0, #31284	; 0x7a34
20003678:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000367c:	4619      	mov	r1, r3
2000367e:	f7fd fef3 	bl	20001468 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
20003682:	68bb      	ldr	r3, [r7, #8]
20003684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003686:	f647 139c 	movw	r3, #31132	; 0x799c
2000368a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000368e:	681b      	ldr	r3, [r3, #0]
20003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003692:	429a      	cmp	r2, r3
20003694:	d90e      	bls.n	200036b4 <vTaskNotifyGiveFromISR+0x138>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
20003696:	683b      	ldr	r3, [r7, #0]
20003698:	2b00      	cmp	r3, #0
2000369a:	d004      	beq.n	200036a6 <vTaskNotifyGiveFromISR+0x12a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
2000369c:	683b      	ldr	r3, [r7, #0]
2000369e:	f04f 0201 	mov.w	r2, #1
200036a2:	601a      	str	r2, [r3, #0]
200036a4:	e006      	b.n	200036b4 <vTaskNotifyGiveFromISR+0x138>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
200036a6:	f647 2388 	movw	r3, #31368	; 0x7a88
200036aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036ae:	f04f 0201 	mov.w	r2, #1
200036b2:	601a      	str	r2, [r3, #0]
200036b4:	693b      	ldr	r3, [r7, #16]
200036b6:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200036ba:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
200036be:	f107 0728 	add.w	r7, r7, #40	; 0x28
200036c2:	46bd      	mov	sp, r7
200036c4:	bd80      	pop	{r7, pc}
200036c6:	bf00      	nop

200036c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
200036c8:	b580      	push	{r7, lr}
200036ca:	b084      	sub	sp, #16
200036cc:	af00      	add	r7, sp, #0
200036ce:	6078      	str	r0, [r7, #4]
200036d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
200036d2:	f647 2378 	movw	r3, #31352	; 0x7a78
200036d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036da:	681b      	ldr	r3, [r3, #0]
200036dc:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200036de:	f647 139c 	movw	r3, #31132	; 0x799c
200036e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036e6:	681b      	ldr	r3, [r3, #0]
200036e8:	f103 0304 	add.w	r3, r3, #4
200036ec:	4618      	mov	r0, r3
200036ee:	f7fd ff19 	bl	20001524 <uxListRemove>
200036f2:	4603      	mov	r3, r0
200036f4:	2b00      	cmp	r3, #0
200036f6:	d117      	bne.n	20003728 <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
200036f8:	f647 139c 	movw	r3, #31132	; 0x799c
200036fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003700:	681b      	ldr	r3, [r3, #0]
20003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003704:	f04f 0201 	mov.w	r2, #1
20003708:	fa02 f303 	lsl.w	r3, r2, r3
2000370c:	ea6f 0203 	mvn.w	r2, r3
20003710:	f647 237c 	movw	r3, #31356	; 0x7a7c
20003714:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003718:	681b      	ldr	r3, [r3, #0]
2000371a:	ea02 0203 	and.w	r2, r2, r3
2000371e:	f647 237c 	movw	r3, #31356	; 0x7a7c
20003722:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003726:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003728:	687b      	ldr	r3, [r7, #4]
2000372a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000372e:	d111      	bne.n	20003754 <prvAddCurrentTaskToDelayedList+0x8c>
20003730:	683b      	ldr	r3, [r7, #0]
20003732:	2b00      	cmp	r3, #0
20003734:	d00e      	beq.n	20003754 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003736:	f647 139c 	movw	r3, #31132	; 0x799c
2000373a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000373e:	681b      	ldr	r3, [r3, #0]
20003740:	f103 0304 	add.w	r3, r3, #4
20003744:	f647 2060 	movw	r0, #31328	; 0x7a60
20003748:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000374c:	4619      	mov	r1, r3
2000374e:	f7fd fe8b 	bl	20001468 <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003752:	e03d      	b.n	200037d0 <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
20003754:	68fa      	ldr	r2, [r7, #12]
20003756:	687b      	ldr	r3, [r7, #4]
20003758:	4413      	add	r3, r2
2000375a:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
2000375c:	f647 139c 	movw	r3, #31132	; 0x799c
20003760:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003764:	681b      	ldr	r3, [r3, #0]
20003766:	68ba      	ldr	r2, [r7, #8]
20003768:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
2000376a:	68ba      	ldr	r2, [r7, #8]
2000376c:	68fb      	ldr	r3, [r7, #12]
2000376e:	429a      	cmp	r2, r3
20003770:	d210      	bcs.n	20003794 <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003772:	f647 2330 	movw	r3, #31280	; 0x7a30
20003776:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000377a:	681a      	ldr	r2, [r3, #0]
2000377c:	f647 139c 	movw	r3, #31132	; 0x799c
20003780:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003784:	681b      	ldr	r3, [r3, #0]
20003786:	f103 0304 	add.w	r3, r3, #4
2000378a:	4610      	mov	r0, r2
2000378c:	4619      	mov	r1, r3
2000378e:	f7fd fe8f 	bl	200014b0 <vListInsert>
20003792:	e01d      	b.n	200037d0 <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003794:	f647 232c 	movw	r3, #31276	; 0x7a2c
20003798:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000379c:	681a      	ldr	r2, [r3, #0]
2000379e:	f647 139c 	movw	r3, #31132	; 0x799c
200037a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037a6:	681b      	ldr	r3, [r3, #0]
200037a8:	f103 0304 	add.w	r3, r3, #4
200037ac:	4610      	mov	r0, r2
200037ae:	4619      	mov	r1, r3
200037b0:	f7fd fe7e 	bl	200014b0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
200037b4:	f647 2394 	movw	r3, #31380	; 0x7a94
200037b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037bc:	681b      	ldr	r3, [r3, #0]
200037be:	68ba      	ldr	r2, [r7, #8]
200037c0:	429a      	cmp	r2, r3
200037c2:	d205      	bcs.n	200037d0 <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
200037c4:	f647 2394 	movw	r3, #31380	; 0x7a94
200037c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037cc:	68ba      	ldr	r2, [r7, #8]
200037ce:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
200037d0:	f107 0710 	add.w	r7, r7, #16
200037d4:	46bd      	mov	sp, r7
200037d6:	bd80      	pop	{r7, pc}

200037d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
200037d8:	b580      	push	{r7, lr}
200037da:	b084      	sub	sp, #16
200037dc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
200037de:	f04f 0300 	mov.w	r3, #0
200037e2:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
200037e4:	f000 fb72 	bl	20003ecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
200037e8:	f647 23d8 	movw	r3, #31448	; 0x7ad8
200037ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037f0:	681b      	ldr	r3, [r3, #0]
200037f2:	2b00      	cmp	r3, #0
200037f4:	d017      	beq.n	20003826 <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
200037f6:	f04f 0302 	mov.w	r3, #2
200037fa:	9300      	str	r3, [sp, #0]
200037fc:	f647 23dc 	movw	r3, #31452	; 0x7adc
20003800:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003804:	9301      	str	r3, [sp, #4]
20003806:	f643 2049 	movw	r0, #14921	; 0x3a49
2000380a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000380e:	f647 01c8 	movw	r1, #30920	; 0x78c8
20003812:	f2c2 0100 	movt	r1, #8192	; 0x2000
20003816:	f04f 02a0 	mov.w	r2, #160	; 0xa0
2000381a:	f04f 0300 	mov.w	r3, #0
2000381e:	f7fe fc15 	bl	2000204c <xTaskCreate>
20003822:	4603      	mov	r3, r0
20003824:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
20003826:	683b      	ldr	r3, [r7, #0]
20003828:	2b00      	cmp	r3, #0
2000382a:	d109      	bne.n	20003840 <xTimerCreateTimerTask+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
2000382c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003830:	f383 8811 	msr	BASEPRI, r3
20003834:	f3bf 8f6f 	isb	sy
20003838:	f3bf 8f4f 	dsb	sy
2000383c:	607b      	str	r3, [r7, #4]
2000383e:	e7fe      	b.n	2000383e <xTimerCreateTimerTask+0x66>
	return xReturn;
20003840:	683b      	ldr	r3, [r7, #0]
}
20003842:	4618      	mov	r0, r3
20003844:	f107 0708 	add.w	r7, r7, #8
20003848:	46bd      	mov	sp, r7
2000384a:	bd80      	pop	{r7, pc}

2000384c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
2000384c:	b580      	push	{r7, lr}
2000384e:	b088      	sub	sp, #32
20003850:	af02      	add	r7, sp, #8
20003852:	60f8      	str	r0, [r7, #12]
20003854:	60b9      	str	r1, [r7, #8]
20003856:	607a      	str	r2, [r7, #4]
20003858:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
2000385a:	f04f 002c 	mov.w	r0, #44	; 0x2c
2000385e:	f000 fb8f 	bl	20003f80 <pvPortMalloc>
20003862:	4603      	mov	r3, r0
20003864:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
20003866:	697b      	ldr	r3, [r7, #20]
20003868:	2b00      	cmp	r3, #0
2000386a:	d009      	beq.n	20003880 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
2000386c:	6a3b      	ldr	r3, [r7, #32]
2000386e:	9300      	str	r3, [sp, #0]
20003870:	697b      	ldr	r3, [r7, #20]
20003872:	9301      	str	r3, [sp, #4]
20003874:	68f8      	ldr	r0, [r7, #12]
20003876:	68b9      	ldr	r1, [r7, #8]
20003878:	687a      	ldr	r2, [r7, #4]
2000387a:	683b      	ldr	r3, [r7, #0]
2000387c:	f000 f806 	bl	2000388c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
20003880:	697b      	ldr	r3, [r7, #20]
	}
20003882:	4618      	mov	r0, r3
20003884:	f107 0718 	add.w	r7, r7, #24
20003888:	46bd      	mov	sp, r7
2000388a:	bd80      	pop	{r7, pc}

2000388c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
2000388c:	b580      	push	{r7, lr}
2000388e:	b086      	sub	sp, #24
20003890:	af00      	add	r7, sp, #0
20003892:	60f8      	str	r0, [r7, #12]
20003894:	60b9      	str	r1, [r7, #8]
20003896:	607a      	str	r2, [r7, #4]
20003898:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
2000389a:	68bb      	ldr	r3, [r7, #8]
2000389c:	2b00      	cmp	r3, #0
2000389e:	d109      	bne.n	200038b4 <prvInitialiseNewTimer+0x28>
200038a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200038a4:	f383 8811 	msr	BASEPRI, r3
200038a8:	f3bf 8f6f 	isb	sy
200038ac:	f3bf 8f4f 	dsb	sy
200038b0:	617b      	str	r3, [r7, #20]
200038b2:	e7fe      	b.n	200038b2 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
200038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038b6:	2b00      	cmp	r3, #0
200038b8:	d016      	beq.n	200038e8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
200038ba:	f000 fb07 	bl	20003ecc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
200038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038c0:	68fa      	ldr	r2, [r7, #12]
200038c2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
200038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038c6:	68ba      	ldr	r2, [r7, #8]
200038c8:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
200038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038cc:	687a      	ldr	r2, [r7, #4]
200038ce:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
200038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038d2:	683a      	ldr	r2, [r7, #0]
200038d4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
200038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038d8:	6a3a      	ldr	r2, [r7, #32]
200038da:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
200038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200038de:	f103 0304 	add.w	r3, r3, #4
200038e2:	4618      	mov	r0, r3
200038e4:	f7fd fdb2 	bl	2000144c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
200038e8:	f107 0718 	add.w	r7, r7, #24
200038ec:	46bd      	mov	sp, r7
200038ee:	bd80      	pop	{r7, pc}

200038f0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
200038f0:	b580      	push	{r7, lr}
200038f2:	b08a      	sub	sp, #40	; 0x28
200038f4:	af00      	add	r7, sp, #0
200038f6:	60f8      	str	r0, [r7, #12]
200038f8:	60b9      	str	r1, [r7, #8]
200038fa:	607a      	str	r2, [r7, #4]
200038fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
200038fe:	f04f 0300 	mov.w	r3, #0
20003902:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
20003904:	68fb      	ldr	r3, [r7, #12]
20003906:	2b00      	cmp	r3, #0
20003908:	d109      	bne.n	2000391e <xTimerGenericCommand+0x2e>
2000390a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000390e:	f383 8811 	msr	BASEPRI, r3
20003912:	f3bf 8f6f 	isb	sy
20003916:	f3bf 8f4f 	dsb	sy
2000391a:	627b      	str	r3, [r7, #36]	; 0x24
2000391c:	e7fe      	b.n	2000391c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
2000391e:	f647 23d8 	movw	r3, #31448	; 0x7ad8
20003922:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003926:	681b      	ldr	r3, [r3, #0]
20003928:	2b00      	cmp	r3, #0
2000392a:	d040      	beq.n	200039ae <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
2000392c:	68bb      	ldr	r3, [r7, #8]
2000392e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
20003930:	687b      	ldr	r3, [r7, #4]
20003932:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
20003934:	68fb      	ldr	r3, [r7, #12]
20003936:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20003938:	68bb      	ldr	r3, [r7, #8]
2000393a:	2b05      	cmp	r3, #5
2000393c:	dc27      	bgt.n	2000398e <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
2000393e:	f7ff fbb9 	bl	200030b4 <xTaskGetSchedulerState>
20003942:	4603      	mov	r3, r0
20003944:	2b02      	cmp	r3, #2
20003946:	d110      	bne.n	2000396a <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
20003948:	f647 23d8 	movw	r3, #31448	; 0x7ad8
2000394c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003950:	681a      	ldr	r2, [r3, #0]
20003952:	f107 0310 	add.w	r3, r7, #16
20003956:	4610      	mov	r0, r2
20003958:	4619      	mov	r1, r3
2000395a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000395c:	f04f 0300 	mov.w	r3, #0
20003960:	f7fd ff20 	bl	200017a4 <xQueueGenericSend>
20003964:	4603      	mov	r3, r0
20003966:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
20003968:	e021      	b.n	200039ae <xTimerGenericCommand+0xbe>
2000396a:	f647 23d8 	movw	r3, #31448	; 0x7ad8
2000396e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003972:	681a      	ldr	r2, [r3, #0]
20003974:	f107 0310 	add.w	r3, r7, #16
20003978:	4610      	mov	r0, r2
2000397a:	4619      	mov	r1, r3
2000397c:	f04f 0200 	mov.w	r2, #0
20003980:	f04f 0300 	mov.w	r3, #0
20003984:	f7fd ff0e 	bl	200017a4 <xQueueGenericSend>
20003988:	4603      	mov	r3, r0
2000398a:	623b      	str	r3, [r7, #32]
2000398c:	e00f      	b.n	200039ae <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
2000398e:	f647 23d8 	movw	r3, #31448	; 0x7ad8
20003992:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003996:	681a      	ldr	r2, [r3, #0]
20003998:	f107 0310 	add.w	r3, r7, #16
2000399c:	4610      	mov	r0, r2
2000399e:	4619      	mov	r1, r3
200039a0:	683a      	ldr	r2, [r7, #0]
200039a2:	f04f 0300 	mov.w	r3, #0
200039a6:	f7fe f815 	bl	200019d4 <xQueueGenericSendFromISR>
200039aa:	4603      	mov	r3, r0
200039ac:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
200039ae:	6a3b      	ldr	r3, [r7, #32]
}
200039b0:	4618      	mov	r0, r3
200039b2:	f107 0728 	add.w	r7, r7, #40	; 0x28
200039b6:	46bd      	mov	sp, r7
200039b8:	bd80      	pop	{r7, pc}
200039ba:	bf00      	nop

200039bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
200039bc:	b580      	push	{r7, lr}
200039be:	b088      	sub	sp, #32
200039c0:	af02      	add	r7, sp, #8
200039c2:	6078      	str	r0, [r7, #4]
200039c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
200039c6:	f647 23d0 	movw	r3, #31440	; 0x7ad0
200039ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039ce:	681b      	ldr	r3, [r3, #0]
200039d0:	68db      	ldr	r3, [r3, #12]
200039d2:	68db      	ldr	r3, [r3, #12]
200039d4:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200039d6:	693b      	ldr	r3, [r7, #16]
200039d8:	f103 0304 	add.w	r3, r3, #4
200039dc:	4618      	mov	r0, r3
200039de:	f7fd fda1 	bl	20001524 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
200039e2:	693b      	ldr	r3, [r7, #16]
200039e4:	69db      	ldr	r3, [r3, #28]
200039e6:	2b01      	cmp	r3, #1
200039e8:	d126      	bne.n	20003a38 <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
200039ea:	693b      	ldr	r3, [r7, #16]
200039ec:	699a      	ldr	r2, [r3, #24]
200039ee:	687b      	ldr	r3, [r7, #4]
200039f0:	4413      	add	r3, r2
200039f2:	6938      	ldr	r0, [r7, #16]
200039f4:	4619      	mov	r1, r3
200039f6:	683a      	ldr	r2, [r7, #0]
200039f8:	687b      	ldr	r3, [r7, #4]
200039fa:	f000 f8df 	bl	20003bbc <prvInsertTimerInActiveList>
200039fe:	4603      	mov	r3, r0
20003a00:	2b00      	cmp	r3, #0
20003a02:	d019      	beq.n	20003a38 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003a04:	f04f 0300 	mov.w	r3, #0
20003a08:	9300      	str	r3, [sp, #0]
20003a0a:	6938      	ldr	r0, [r7, #16]
20003a0c:	f04f 0100 	mov.w	r1, #0
20003a10:	687a      	ldr	r2, [r7, #4]
20003a12:	f04f 0300 	mov.w	r3, #0
20003a16:	f7ff ff6b 	bl	200038f0 <xTimerGenericCommand>
20003a1a:	4603      	mov	r3, r0
20003a1c:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
20003a1e:	68fb      	ldr	r3, [r7, #12]
20003a20:	2b00      	cmp	r3, #0
20003a22:	d109      	bne.n	20003a38 <prvProcessExpiredTimer+0x7c>
20003a24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003a28:	f383 8811 	msr	BASEPRI, r3
20003a2c:	f3bf 8f6f 	isb	sy
20003a30:	f3bf 8f4f 	dsb	sy
20003a34:	617b      	str	r3, [r7, #20]
20003a36:	e7fe      	b.n	20003a36 <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003a38:	693b      	ldr	r3, [r7, #16]
20003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003a3c:	6938      	ldr	r0, [r7, #16]
20003a3e:	4798      	blx	r3
}
20003a40:	f107 0718 	add.w	r7, r7, #24
20003a44:	46bd      	mov	sp, r7
20003a46:	bd80      	pop	{r7, pc}

20003a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
20003a48:	b580      	push	{r7, lr}
20003a4a:	b084      	sub	sp, #16
20003a4c:	af00      	add	r7, sp, #0
20003a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20003a50:	f107 0308 	add.w	r3, r7, #8
20003a54:	4618      	mov	r0, r3
20003a56:	f000 f861 	bl	20003b1c <prvGetNextExpireTime>
20003a5a:	4603      	mov	r3, r0
20003a5c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
20003a5e:	68bb      	ldr	r3, [r7, #8]
20003a60:	68f8      	ldr	r0, [r7, #12]
20003a62:	4619      	mov	r1, r3
20003a64:	f000 f804 	bl	20003a70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
20003a68:	f000 f8f4 	bl	20003c54 <prvProcessReceivedCommands>
	}
20003a6c:	e7f0      	b.n	20003a50 <prvTimerTask+0x8>
20003a6e:	bf00      	nop

20003a70 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20003a70:	b580      	push	{r7, lr}
20003a72:	b084      	sub	sp, #16
20003a74:	af00      	add	r7, sp, #0
20003a76:	6078      	str	r0, [r7, #4]
20003a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
20003a7a:	f7fe fdf3 	bl	20002664 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003a7e:	f107 0308 	add.w	r3, r7, #8
20003a82:	4618      	mov	r0, r3
20003a84:	f000 f872 	bl	20003b6c <prvSampleTimeNow>
20003a88:	4603      	mov	r3, r0
20003a8a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
20003a8c:	68bb      	ldr	r3, [r7, #8]
20003a8e:	2b00      	cmp	r3, #0
20003a90:	d13b      	bne.n	20003b0a <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003a92:	683b      	ldr	r3, [r7, #0]
20003a94:	2b00      	cmp	r3, #0
20003a96:	d10b      	bne.n	20003ab0 <prvProcessTimerOrBlockTask+0x40>
20003a98:	687a      	ldr	r2, [r7, #4]
20003a9a:	68fb      	ldr	r3, [r7, #12]
20003a9c:	429a      	cmp	r2, r3
20003a9e:	d807      	bhi.n	20003ab0 <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
20003aa0:	f7fe fdf2 	bl	20002688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
20003aa4:	6878      	ldr	r0, [r7, #4]
20003aa6:	68f9      	ldr	r1, [r7, #12]
20003aa8:	f7ff ff88 	bl	200039bc <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003aac:	bf00      	nop
20003aae:	e030      	b.n	20003b12 <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
20003ab0:	683b      	ldr	r3, [r7, #0]
20003ab2:	2b00      	cmp	r3, #0
20003ab4:	d00a      	beq.n	20003acc <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
20003ab6:	f647 23d4 	movw	r3, #31444	; 0x7ad4
20003aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003abe:	681b      	ldr	r3, [r3, #0]
20003ac0:	681b      	ldr	r3, [r3, #0]
20003ac2:	2b00      	cmp	r3, #0
20003ac4:	bf14      	ite	ne
20003ac6:	2300      	movne	r3, #0
20003ac8:	2301      	moveq	r3, #1
20003aca:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
20003acc:	f647 23d8 	movw	r3, #31448	; 0x7ad8
20003ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ad4:	681a      	ldr	r2, [r3, #0]
20003ad6:	6879      	ldr	r1, [r7, #4]
20003ad8:	68fb      	ldr	r3, [r7, #12]
20003ada:	ebc3 0301 	rsb	r3, r3, r1
20003ade:	4610      	mov	r0, r2
20003ae0:	4619      	mov	r1, r3
20003ae2:	683a      	ldr	r2, [r7, #0]
20003ae4:	f7fe fa78 	bl	20001fd8 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
20003ae8:	f7fe fdce 	bl	20002688 <xTaskResumeAll>
20003aec:	4603      	mov	r3, r0
20003aee:	2b00      	cmp	r3, #0
20003af0:	d10e      	bne.n	20003b10 <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003af2:	f64e 5304 	movw	r3, #60676	; 0xed04
20003af6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003afe:	601a      	str	r2, [r3, #0]
20003b00:	f3bf 8f4f 	dsb	sy
20003b04:	f3bf 8f6f 	isb	sy
20003b08:	e003      	b.n	20003b12 <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
20003b0a:	f7fe fdbd 	bl	20002688 <xTaskResumeAll>
20003b0e:	e000      	b.n	20003b12 <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003b10:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
20003b12:	f107 0710 	add.w	r7, r7, #16
20003b16:	46bd      	mov	sp, r7
20003b18:	bd80      	pop	{r7, pc}
20003b1a:	bf00      	nop

20003b1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
20003b1c:	b480      	push	{r7}
20003b1e:	b085      	sub	sp, #20
20003b20:	af00      	add	r7, sp, #0
20003b22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
20003b24:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b2c:	681b      	ldr	r3, [r3, #0]
20003b2e:	681b      	ldr	r3, [r3, #0]
20003b30:	2b00      	cmp	r3, #0
20003b32:	bf14      	ite	ne
20003b34:	2200      	movne	r2, #0
20003b36:	2201      	moveq	r2, #1
20003b38:	687b      	ldr	r3, [r7, #4]
20003b3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20003b3c:	687b      	ldr	r3, [r7, #4]
20003b3e:	681b      	ldr	r3, [r3, #0]
20003b40:	2b00      	cmp	r3, #0
20003b42:	d108      	bne.n	20003b56 <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003b44:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b4c:	681b      	ldr	r3, [r3, #0]
20003b4e:	68db      	ldr	r3, [r3, #12]
20003b50:	681b      	ldr	r3, [r3, #0]
20003b52:	60fb      	str	r3, [r7, #12]
20003b54:	e002      	b.n	20003b5c <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003b56:	f04f 0300 	mov.w	r3, #0
20003b5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
20003b5c:	68fb      	ldr	r3, [r7, #12]
}
20003b5e:	4618      	mov	r0, r3
20003b60:	f107 0714 	add.w	r7, r7, #20
20003b64:	46bd      	mov	sp, r7
20003b66:	bc80      	pop	{r7}
20003b68:	4770      	bx	lr
20003b6a:	bf00      	nop

20003b6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003b6c:	b580      	push	{r7, lr}
20003b6e:	b084      	sub	sp, #16
20003b70:	af00      	add	r7, sp, #0
20003b72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003b74:	f7fe fe58 	bl	20002828 <xTaskGetTickCount>
20003b78:	4603      	mov	r3, r0
20003b7a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
20003b7c:	f647 23e0 	movw	r3, #31456	; 0x7ae0
20003b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b84:	681b      	ldr	r3, [r3, #0]
20003b86:	68fa      	ldr	r2, [r7, #12]
20003b88:	429a      	cmp	r2, r3
20003b8a:	d206      	bcs.n	20003b9a <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
20003b8c:	f000 f924 	bl	20003dd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
20003b90:	687b      	ldr	r3, [r7, #4]
20003b92:	f04f 0201 	mov.w	r2, #1
20003b96:	601a      	str	r2, [r3, #0]
20003b98:	e003      	b.n	20003ba2 <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
20003b9a:	687b      	ldr	r3, [r7, #4]
20003b9c:	f04f 0200 	mov.w	r2, #0
20003ba0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
20003ba2:	f647 23e0 	movw	r3, #31456	; 0x7ae0
20003ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003baa:	68fa      	ldr	r2, [r7, #12]
20003bac:	601a      	str	r2, [r3, #0]

	return xTimeNow;
20003bae:	68fb      	ldr	r3, [r7, #12]
}
20003bb0:	4618      	mov	r0, r3
20003bb2:	f107 0710 	add.w	r7, r7, #16
20003bb6:	46bd      	mov	sp, r7
20003bb8:	bd80      	pop	{r7, pc}
20003bba:	bf00      	nop

20003bbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20003bbc:	b580      	push	{r7, lr}
20003bbe:	b086      	sub	sp, #24
20003bc0:	af00      	add	r7, sp, #0
20003bc2:	60f8      	str	r0, [r7, #12]
20003bc4:	60b9      	str	r1, [r7, #8]
20003bc6:	607a      	str	r2, [r7, #4]
20003bc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
20003bca:	f04f 0300 	mov.w	r3, #0
20003bce:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20003bd0:	68fb      	ldr	r3, [r7, #12]
20003bd2:	68ba      	ldr	r2, [r7, #8]
20003bd4:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003bd6:	68fb      	ldr	r3, [r7, #12]
20003bd8:	68fa      	ldr	r2, [r7, #12]
20003bda:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
20003bdc:	68ba      	ldr	r2, [r7, #8]
20003bde:	687b      	ldr	r3, [r7, #4]
20003be0:	429a      	cmp	r2, r3
20003be2:	d818      	bhi.n	20003c16 <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003be4:	687a      	ldr	r2, [r7, #4]
20003be6:	683b      	ldr	r3, [r7, #0]
20003be8:	ebc3 0202 	rsb	r2, r3, r2
20003bec:	68fb      	ldr	r3, [r7, #12]
20003bee:	699b      	ldr	r3, [r3, #24]
20003bf0:	429a      	cmp	r2, r3
20003bf2:	d303      	bcc.n	20003bfc <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003bf4:	f04f 0301 	mov.w	r3, #1
20003bf8:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
20003bfa:	e024      	b.n	20003c46 <prvInsertTimerInActiveList+0x8a>
20003bfc:	f647 23d4 	movw	r3, #31444	; 0x7ad4
20003c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c04:	681a      	ldr	r2, [r3, #0]
20003c06:	68fb      	ldr	r3, [r7, #12]
20003c08:	f103 0304 	add.w	r3, r3, #4
20003c0c:	4610      	mov	r0, r2
20003c0e:	4619      	mov	r1, r3
20003c10:	f7fd fc4e 	bl	200014b0 <vListInsert>
20003c14:	e017      	b.n	20003c46 <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003c16:	687a      	ldr	r2, [r7, #4]
20003c18:	683b      	ldr	r3, [r7, #0]
20003c1a:	429a      	cmp	r2, r3
20003c1c:	d207      	bcs.n	20003c2e <prvInsertTimerInActiveList+0x72>
20003c1e:	68ba      	ldr	r2, [r7, #8]
20003c20:	683b      	ldr	r3, [r7, #0]
20003c22:	429a      	cmp	r2, r3
20003c24:	d303      	bcc.n	20003c2e <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
20003c26:	f04f 0301 	mov.w	r3, #1
20003c2a:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003c2c:	e00b      	b.n	20003c46 <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003c2e:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c36:	681a      	ldr	r2, [r3, #0]
20003c38:	68fb      	ldr	r3, [r7, #12]
20003c3a:	f103 0304 	add.w	r3, r3, #4
20003c3e:	4610      	mov	r0, r2
20003c40:	4619      	mov	r1, r3
20003c42:	f7fd fc35 	bl	200014b0 <vListInsert>
		}
	}

	return xProcessTimerNow;
20003c46:	697b      	ldr	r3, [r7, #20]
}
20003c48:	4618      	mov	r0, r3
20003c4a:	f107 0718 	add.w	r7, r7, #24
20003c4e:	46bd      	mov	sp, r7
20003c50:	bd80      	pop	{r7, pc}
20003c52:	bf00      	nop

20003c54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20003c54:	b580      	push	{r7, lr}
20003c56:	b08e      	sub	sp, #56	; 0x38
20003c58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003c5a:	e0a5      	b.n	20003da8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20003c5c:	687b      	ldr	r3, [r7, #4]
20003c5e:	2b00      	cmp	r3, #0
20003c60:	da1a      	bge.n	20003c98 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
20003c62:	f107 0304 	add.w	r3, r7, #4
20003c66:	f103 0304 	add.w	r3, r3, #4
20003c6a:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003c6c:	6a3b      	ldr	r3, [r7, #32]
20003c6e:	2b00      	cmp	r3, #0
20003c70:	d109      	bne.n	20003c86 <prvProcessReceivedCommands+0x32>
20003c72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c76:	f383 8811 	msr	BASEPRI, r3
20003c7a:	f3bf 8f6f 	isb	sy
20003c7e:	f3bf 8f4f 	dsb	sy
20003c82:	627b      	str	r3, [r7, #36]	; 0x24
20003c84:	e7fe      	b.n	20003c84 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
20003c86:	6a3b      	ldr	r3, [r7, #32]
20003c88:	681b      	ldr	r3, [r3, #0]
20003c8a:	6a3a      	ldr	r2, [r7, #32]
20003c8c:	6851      	ldr	r1, [r2, #4]
20003c8e:	6a3a      	ldr	r2, [r7, #32]
20003c90:	6892      	ldr	r2, [r2, #8]
20003c92:	4608      	mov	r0, r1
20003c94:	4611      	mov	r1, r2
20003c96:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
20003c98:	687b      	ldr	r3, [r7, #4]
20003c9a:	2b00      	cmp	r3, #0
20003c9c:	f2c0 8084 	blt.w	20003da8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
20003ca0:	68fb      	ldr	r3, [r7, #12]
20003ca2:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
20003ca4:	697b      	ldr	r3, [r7, #20]
20003ca6:	695b      	ldr	r3, [r3, #20]
20003ca8:	2b00      	cmp	r3, #0
20003caa:	d005      	beq.n	20003cb8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003cac:	697b      	ldr	r3, [r7, #20]
20003cae:	f103 0304 	add.w	r3, r3, #4
20003cb2:	4618      	mov	r0, r3
20003cb4:	f7fd fc36 	bl	20001524 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003cb8:	463b      	mov	r3, r7
20003cba:	4618      	mov	r0, r3
20003cbc:	f7ff ff56 	bl	20003b6c <prvSampleTimeNow>
20003cc0:	4603      	mov	r3, r0
20003cc2:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
20003cc4:	687b      	ldr	r3, [r7, #4]
20003cc6:	2b09      	cmp	r3, #9
20003cc8:	d86e      	bhi.n	20003da8 <prvProcessReceivedCommands+0x154>
20003cca:	a201      	add	r2, pc, #4	; (adr r2, 20003cd0 <prvProcessReceivedCommands+0x7c>)
20003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003cd0:	20003cf9 	.word	0x20003cf9
20003cd4:	20003cf9 	.word	0x20003cf9
20003cd8:	20003cf9 	.word	0x20003cf9
20003cdc:	20003da9 	.word	0x20003da9
20003ce0:	20003d5f 	.word	0x20003d5f
20003ce4:	20003d97 	.word	0x20003d97
20003ce8:	20003cf9 	.word	0x20003cf9
20003cec:	20003cf9 	.word	0x20003cf9
20003cf0:	20003da9 	.word	0x20003da9
20003cf4:	20003d5f 	.word	0x20003d5f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003cf8:	68ba      	ldr	r2, [r7, #8]
20003cfa:	697b      	ldr	r3, [r7, #20]
20003cfc:	699b      	ldr	r3, [r3, #24]
20003cfe:	441a      	add	r2, r3
20003d00:	68bb      	ldr	r3, [r7, #8]
20003d02:	6978      	ldr	r0, [r7, #20]
20003d04:	4611      	mov	r1, r2
20003d06:	69fa      	ldr	r2, [r7, #28]
20003d08:	f7ff ff58 	bl	20003bbc <prvInsertTimerInActiveList>
20003d0c:	4603      	mov	r3, r0
20003d0e:	2b00      	cmp	r3, #0
20003d10:	d045      	beq.n	20003d9e <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003d12:	697b      	ldr	r3, [r7, #20]
20003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003d16:	6978      	ldr	r0, [r7, #20]
20003d18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003d1a:	697b      	ldr	r3, [r7, #20]
20003d1c:	69db      	ldr	r3, [r3, #28]
20003d1e:	2b01      	cmp	r3, #1
20003d20:	d13f      	bne.n	20003da2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
20003d22:	68ba      	ldr	r2, [r7, #8]
20003d24:	697b      	ldr	r3, [r7, #20]
20003d26:	699b      	ldr	r3, [r3, #24]
20003d28:	4413      	add	r3, r2
20003d2a:	f04f 0200 	mov.w	r2, #0
20003d2e:	9200      	str	r2, [sp, #0]
20003d30:	6978      	ldr	r0, [r7, #20]
20003d32:	f04f 0100 	mov.w	r1, #0
20003d36:	461a      	mov	r2, r3
20003d38:	f04f 0300 	mov.w	r3, #0
20003d3c:	f7ff fdd8 	bl	200038f0 <xTimerGenericCommand>
20003d40:	4603      	mov	r3, r0
20003d42:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
20003d44:	69bb      	ldr	r3, [r7, #24]
20003d46:	2b00      	cmp	r3, #0
20003d48:	d12d      	bne.n	20003da6 <prvProcessReceivedCommands+0x152>
20003d4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d4e:	f383 8811 	msr	BASEPRI, r3
20003d52:	f3bf 8f6f 	isb	sy
20003d56:	f3bf 8f4f 	dsb	sy
20003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
20003d5c:	e7fe      	b.n	20003d5c <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20003d5e:	68ba      	ldr	r2, [r7, #8]
20003d60:	697b      	ldr	r3, [r7, #20]
20003d62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003d64:	697b      	ldr	r3, [r7, #20]
20003d66:	699b      	ldr	r3, [r3, #24]
20003d68:	2b00      	cmp	r3, #0
20003d6a:	d109      	bne.n	20003d80 <prvProcessReceivedCommands+0x12c>
20003d6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d70:	f383 8811 	msr	BASEPRI, r3
20003d74:	f3bf 8f6f 	isb	sy
20003d78:	f3bf 8f4f 	dsb	sy
20003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
20003d7e:	e7fe      	b.n	20003d7e <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
20003d80:	697b      	ldr	r3, [r7, #20]
20003d82:	699a      	ldr	r2, [r3, #24]
20003d84:	69fb      	ldr	r3, [r7, #28]
20003d86:	4413      	add	r3, r2
20003d88:	6978      	ldr	r0, [r7, #20]
20003d8a:	4619      	mov	r1, r3
20003d8c:	69fa      	ldr	r2, [r7, #28]
20003d8e:	69fb      	ldr	r3, [r7, #28]
20003d90:	f7ff ff14 	bl	20003bbc <prvInsertTimerInActiveList>
					break;
20003d94:	e008      	b.n	20003da8 <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
20003d96:	6978      	ldr	r0, [r7, #20]
20003d98:	f000 f9ee 	bl	20004178 <vPortFree>
20003d9c:	e004      	b.n	20003da8 <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
20003d9e:	bf00      	nop
20003da0:	e002      	b.n	20003da8 <prvProcessReceivedCommands+0x154>
20003da2:	bf00      	nop
20003da4:	e000      	b.n	20003da8 <prvProcessReceivedCommands+0x154>
20003da6:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003da8:	f647 23d8 	movw	r3, #31448	; 0x7ad8
20003dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003db0:	681a      	ldr	r2, [r3, #0]
20003db2:	f107 0304 	add.w	r3, r7, #4
20003db6:	4610      	mov	r0, r2
20003db8:	4619      	mov	r1, r3
20003dba:	f04f 0200 	mov.w	r2, #0
20003dbe:	f04f 0300 	mov.w	r3, #0
20003dc2:	f7fd fea9 	bl	20001b18 <xQueueGenericReceive>
20003dc6:	4603      	mov	r3, r0
20003dc8:	2b00      	cmp	r3, #0
20003dca:	f47f af47 	bne.w	20003c5c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
20003dce:	f107 0730 	add.w	r7, r7, #48	; 0x30
20003dd2:	46bd      	mov	sp, r7
20003dd4:	bd80      	pop	{r7, pc}
20003dd6:	bf00      	nop

20003dd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003dd8:	b580      	push	{r7, lr}
20003dda:	b088      	sub	sp, #32
20003ddc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003dde:	e053      	b.n	20003e88 <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003de0:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003de8:	681b      	ldr	r3, [r3, #0]
20003dea:	68db      	ldr	r3, [r3, #12]
20003dec:	681b      	ldr	r3, [r3, #0]
20003dee:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003df0:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003df8:	681b      	ldr	r3, [r3, #0]
20003dfa:	68db      	ldr	r3, [r3, #12]
20003dfc:	68db      	ldr	r3, [r3, #12]
20003dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003e00:	68fb      	ldr	r3, [r7, #12]
20003e02:	f103 0304 	add.w	r3, r3, #4
20003e06:	4618      	mov	r0, r3
20003e08:	f7fd fb8c 	bl	20001524 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003e0c:	68fb      	ldr	r3, [r7, #12]
20003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003e10:	68f8      	ldr	r0, [r7, #12]
20003e12:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003e14:	68fb      	ldr	r3, [r7, #12]
20003e16:	69db      	ldr	r3, [r3, #28]
20003e18:	2b01      	cmp	r3, #1
20003e1a:	d135      	bne.n	20003e88 <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003e1c:	68fb      	ldr	r3, [r7, #12]
20003e1e:	699a      	ldr	r2, [r3, #24]
20003e20:	683b      	ldr	r3, [r7, #0]
20003e22:	4413      	add	r3, r2
20003e24:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
20003e26:	687a      	ldr	r2, [r7, #4]
20003e28:	683b      	ldr	r3, [r7, #0]
20003e2a:	429a      	cmp	r2, r3
20003e2c:	d912      	bls.n	20003e54 <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20003e2e:	68fb      	ldr	r3, [r7, #12]
20003e30:	687a      	ldr	r2, [r7, #4]
20003e32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003e34:	68fb      	ldr	r3, [r7, #12]
20003e36:	68fa      	ldr	r2, [r7, #12]
20003e38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003e3a:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e42:	681a      	ldr	r2, [r3, #0]
20003e44:	68fb      	ldr	r3, [r7, #12]
20003e46:	f103 0304 	add.w	r3, r3, #4
20003e4a:	4610      	mov	r0, r2
20003e4c:	4619      	mov	r1, r3
20003e4e:	f7fd fb2f 	bl	200014b0 <vListInsert>
20003e52:	e019      	b.n	20003e88 <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003e54:	f04f 0300 	mov.w	r3, #0
20003e58:	9300      	str	r3, [sp, #0]
20003e5a:	68f8      	ldr	r0, [r7, #12]
20003e5c:	f04f 0100 	mov.w	r1, #0
20003e60:	683a      	ldr	r2, [r7, #0]
20003e62:	f04f 0300 	mov.w	r3, #0
20003e66:	f7ff fd43 	bl	200038f0 <xTimerGenericCommand>
20003e6a:	4603      	mov	r3, r0
20003e6c:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
20003e6e:	693b      	ldr	r3, [r7, #16]
20003e70:	2b00      	cmp	r3, #0
20003e72:	d109      	bne.n	20003e88 <prvSwitchTimerLists+0xb0>
20003e74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003e78:	f383 8811 	msr	BASEPRI, r3
20003e7c:	f3bf 8f6f 	isb	sy
20003e80:	f3bf 8f4f 	dsb	sy
20003e84:	617b      	str	r3, [r7, #20]
20003e86:	e7fe      	b.n	20003e86 <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003e88:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e90:	681b      	ldr	r3, [r3, #0]
20003e92:	681b      	ldr	r3, [r3, #0]
20003e94:	2b00      	cmp	r3, #0
20003e96:	d1a3      	bne.n	20003de0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
20003e98:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ea0:	681b      	ldr	r3, [r3, #0]
20003ea2:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
20003ea4:	f647 23d4 	movw	r3, #31444	; 0x7ad4
20003ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003eac:	681a      	ldr	r2, [r3, #0]
20003eae:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003eb6:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
20003eb8:	f647 23d4 	movw	r3, #31444	; 0x7ad4
20003ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ec0:	68ba      	ldr	r2, [r7, #8]
20003ec2:	601a      	str	r2, [r3, #0]
}
20003ec4:	f107 0718 	add.w	r7, r7, #24
20003ec8:	46bd      	mov	sp, r7
20003eca:	bd80      	pop	{r7, pc}

20003ecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003ecc:	b580      	push	{r7, lr}
20003ece:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003ed0:	f000 fba4 	bl	2000461c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
20003ed4:	f647 23d8 	movw	r3, #31448	; 0x7ad8
20003ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003edc:	681b      	ldr	r3, [r3, #0]
20003ede:	2b00      	cmp	r3, #0
20003ee0:	d12b      	bne.n	20003f3a <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
20003ee2:	f647 20a8 	movw	r0, #31400	; 0x7aa8
20003ee6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003eea:	f7fd fa8b 	bl	20001404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003eee:	f647 20bc 	movw	r0, #31420	; 0x7abc
20003ef2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003ef6:	f7fd fa85 	bl	20001404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003efa:	f647 23d0 	movw	r3, #31440	; 0x7ad0
20003efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f02:	f647 22a8 	movw	r2, #31400	; 0x7aa8
20003f06:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003f0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003f0c:	f647 23d4 	movw	r3, #31444	; 0x7ad4
20003f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f14:	f647 22bc 	movw	r2, #31420	; 0x7abc
20003f18:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003f1c:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
20003f1e:	f04f 0005 	mov.w	r0, #5
20003f22:	f04f 0110 	mov.w	r1, #16
20003f26:	f04f 0200 	mov.w	r2, #0
20003f2a:	f7fd fb9d 	bl	20001668 <xQueueGenericCreate>
20003f2e:	4602      	mov	r2, r0
20003f30:	f647 23d8 	movw	r3, #31448	; 0x7ad8
20003f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f38:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003f3a:	f000 fba7 	bl	2000468c <vPortExitCritical>
}
20003f3e:	bd80      	pop	{r7, pc}

20003f40 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
20003f40:	b580      	push	{r7, lr}
20003f42:	b086      	sub	sp, #24
20003f44:	af00      	add	r7, sp, #0
20003f46:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
20003f48:	687b      	ldr	r3, [r7, #4]
20003f4a:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
20003f4c:	687b      	ldr	r3, [r7, #4]
20003f4e:	2b00      	cmp	r3, #0
20003f50:	d109      	bne.n	20003f66 <pvTimerGetTimerID+0x26>
20003f52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f56:	f383 8811 	msr	BASEPRI, r3
20003f5a:	f3bf 8f6f 	isb	sy
20003f5e:	f3bf 8f4f 	dsb	sy
20003f62:	617b      	str	r3, [r7, #20]
20003f64:	e7fe      	b.n	20003f64 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
20003f66:	f000 fb59 	bl	2000461c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
20003f6a:	68fb      	ldr	r3, [r7, #12]
20003f6c:	6a1b      	ldr	r3, [r3, #32]
20003f6e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
20003f70:	f000 fb8c 	bl	2000468c <vPortExitCritical>

	return pvReturn;
20003f74:	693b      	ldr	r3, [r7, #16]
}
20003f76:	4618      	mov	r0, r3
20003f78:	f107 0718 	add.w	r7, r7, #24
20003f7c:	46bd      	mov	sp, r7
20003f7e:	bd80      	pop	{r7, pc}

20003f80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003f80:	b580      	push	{r7, lr}
20003f82:	b08a      	sub	sp, #40	; 0x28
20003f84:	af00      	add	r7, sp, #0
20003f86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003f88:	f04f 0300 	mov.w	r3, #0
20003f8c:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
20003f8e:	f7fe fb69 	bl	20002664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003f92:	f64d 4394 	movw	r3, #56468	; 0xdc94
20003f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f9a:	681b      	ldr	r3, [r3, #0]
20003f9c:	2b00      	cmp	r3, #0
20003f9e:	d101      	bne.n	20003fa4 <pvPortMalloc+0x24>
		{
			prvHeapInit();
20003fa0:	f000 f956 	bl	20004250 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003fa4:	f64d 43a0 	movw	r3, #56480	; 0xdca0
20003fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fac:	681a      	ldr	r2, [r3, #0]
20003fae:	687b      	ldr	r3, [r7, #4]
20003fb0:	ea02 0303 	and.w	r3, r2, r3
20003fb4:	2b00      	cmp	r3, #0
20003fb6:	f040 80c2 	bne.w	2000413e <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003fba:	687b      	ldr	r3, [r7, #4]
20003fbc:	2b00      	cmp	r3, #0
20003fbe:	d021      	beq.n	20004004 <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
20003fc0:	f647 03d0 	movw	r3, #30928	; 0x78d0
20003fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fc8:	681b      	ldr	r3, [r3, #0]
20003fca:	687a      	ldr	r2, [r7, #4]
20003fcc:	4413      	add	r3, r2
20003fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003fd0:	687b      	ldr	r3, [r7, #4]
20003fd2:	f003 0307 	and.w	r3, r3, #7
20003fd6:	2b00      	cmp	r3, #0
20003fd8:	d014      	beq.n	20004004 <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
20003fda:	687b      	ldr	r3, [r7, #4]
20003fdc:	f023 0307 	bic.w	r3, r3, #7
20003fe0:	f103 0308 	add.w	r3, r3, #8
20003fe4:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003fe6:	687b      	ldr	r3, [r7, #4]
20003fe8:	f003 0307 	and.w	r3, r3, #7
20003fec:	2b00      	cmp	r3, #0
20003fee:	d009      	beq.n	20004004 <pvPortMalloc+0x84>
20003ff0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003ff4:	f383 8811 	msr	BASEPRI, r3
20003ff8:	f3bf 8f6f 	isb	sy
20003ffc:	f3bf 8f4f 	dsb	sy
20004000:	61fb      	str	r3, [r7, #28]
20004002:	e7fe      	b.n	20004002 <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
20004004:	687b      	ldr	r3, [r7, #4]
20004006:	2b00      	cmp	r3, #0
20004008:	f000 8099 	beq.w	2000413e <pvPortMalloc+0x1be>
2000400c:	f64d 4398 	movw	r3, #56472	; 0xdc98
20004010:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004014:	681b      	ldr	r3, [r3, #0]
20004016:	687a      	ldr	r2, [r7, #4]
20004018:	429a      	cmp	r2, r3
2000401a:	f200 8090 	bhi.w	2000413e <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
2000401e:	f64d 438c 	movw	r3, #56460	; 0xdc8c
20004022:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004026:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
20004028:	f64d 438c 	movw	r3, #56460	; 0xdc8c
2000402c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004030:	681b      	ldr	r3, [r3, #0]
20004032:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20004034:	e004      	b.n	20004040 <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
20004036:	68fb      	ldr	r3, [r7, #12]
20004038:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
2000403a:	68fb      	ldr	r3, [r7, #12]
2000403c:	681b      	ldr	r3, [r3, #0]
2000403e:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20004040:	68fb      	ldr	r3, [r7, #12]
20004042:	685a      	ldr	r2, [r3, #4]
20004044:	687b      	ldr	r3, [r7, #4]
20004046:	429a      	cmp	r2, r3
20004048:	d203      	bcs.n	20004052 <pvPortMalloc+0xd2>
2000404a:	68fb      	ldr	r3, [r7, #12]
2000404c:	681b      	ldr	r3, [r3, #0]
2000404e:	2b00      	cmp	r3, #0
20004050:	d1f1      	bne.n	20004036 <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
20004052:	f64d 4394 	movw	r3, #56468	; 0xdc94
20004056:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000405a:	681b      	ldr	r3, [r3, #0]
2000405c:	68fa      	ldr	r2, [r7, #12]
2000405e:	429a      	cmp	r2, r3
20004060:	d06d      	beq.n	2000413e <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20004062:	693b      	ldr	r3, [r7, #16]
20004064:	681a      	ldr	r2, [r3, #0]
20004066:	f647 03d0 	movw	r3, #30928	; 0x78d0
2000406a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000406e:	681b      	ldr	r3, [r3, #0]
20004070:	4413      	add	r3, r2
20004072:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20004074:	68fb      	ldr	r3, [r7, #12]
20004076:	681a      	ldr	r2, [r3, #0]
20004078:	693b      	ldr	r3, [r7, #16]
2000407a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
2000407c:	68fb      	ldr	r3, [r7, #12]
2000407e:	685a      	ldr	r2, [r3, #4]
20004080:	687b      	ldr	r3, [r7, #4]
20004082:	ebc3 0202 	rsb	r2, r3, r2
20004086:	f647 03d0 	movw	r3, #30928	; 0x78d0
2000408a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000408e:	681b      	ldr	r3, [r3, #0]
20004090:	ea4f 0343 	mov.w	r3, r3, lsl #1
20004094:	429a      	cmp	r2, r3
20004096:	d91f      	bls.n	200040d8 <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20004098:	68fa      	ldr	r2, [r7, #12]
2000409a:	687b      	ldr	r3, [r7, #4]
2000409c:	4413      	add	r3, r2
2000409e:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
200040a0:	697b      	ldr	r3, [r7, #20]
200040a2:	f003 0307 	and.w	r3, r3, #7
200040a6:	2b00      	cmp	r3, #0
200040a8:	d009      	beq.n	200040be <pvPortMalloc+0x13e>
200040aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200040ae:	f383 8811 	msr	BASEPRI, r3
200040b2:	f3bf 8f6f 	isb	sy
200040b6:	f3bf 8f4f 	dsb	sy
200040ba:	623b      	str	r3, [r7, #32]
200040bc:	e7fe      	b.n	200040bc <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
200040be:	68fb      	ldr	r3, [r7, #12]
200040c0:	685a      	ldr	r2, [r3, #4]
200040c2:	687b      	ldr	r3, [r7, #4]
200040c4:	ebc3 0202 	rsb	r2, r3, r2
200040c8:	697b      	ldr	r3, [r7, #20]
200040ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
200040cc:	68fb      	ldr	r3, [r7, #12]
200040ce:	687a      	ldr	r2, [r7, #4]
200040d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
200040d2:	6978      	ldr	r0, [r7, #20]
200040d4:	f000 f93e 	bl	20004354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
200040d8:	f64d 4398 	movw	r3, #56472	; 0xdc98
200040dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040e0:	681a      	ldr	r2, [r3, #0]
200040e2:	68fb      	ldr	r3, [r7, #12]
200040e4:	685b      	ldr	r3, [r3, #4]
200040e6:	ebc3 0202 	rsb	r2, r3, r2
200040ea:	f64d 4398 	movw	r3, #56472	; 0xdc98
200040ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040f2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
200040f4:	f64d 4398 	movw	r3, #56472	; 0xdc98
200040f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040fc:	681a      	ldr	r2, [r3, #0]
200040fe:	f64d 439c 	movw	r3, #56476	; 0xdc9c
20004102:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004106:	681b      	ldr	r3, [r3, #0]
20004108:	429a      	cmp	r2, r3
2000410a:	d209      	bcs.n	20004120 <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
2000410c:	f64d 4398 	movw	r3, #56472	; 0xdc98
20004110:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004114:	681a      	ldr	r2, [r3, #0]
20004116:	f64d 439c 	movw	r3, #56476	; 0xdc9c
2000411a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000411e:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
20004120:	68fb      	ldr	r3, [r7, #12]
20004122:	685a      	ldr	r2, [r3, #4]
20004124:	f64d 43a0 	movw	r3, #56480	; 0xdca0
20004128:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000412c:	681b      	ldr	r3, [r3, #0]
2000412e:	ea42 0203 	orr.w	r2, r2, r3
20004132:	68fb      	ldr	r3, [r7, #12]
20004134:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20004136:	68fb      	ldr	r3, [r7, #12]
20004138:	f04f 0200 	mov.w	r2, #0
2000413c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
2000413e:	f7fe faa3 	bl	20002688 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
20004142:	69bb      	ldr	r3, [r7, #24]
20004144:	2b00      	cmp	r3, #0
20004146:	d101      	bne.n	2000414c <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
20004148:	f7fc f968 	bl	2000041c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
2000414c:	69bb      	ldr	r3, [r7, #24]
2000414e:	f003 0307 	and.w	r3, r3, #7
20004152:	2b00      	cmp	r3, #0
20004154:	d009      	beq.n	2000416a <pvPortMalloc+0x1ea>
20004156:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000415a:	f383 8811 	msr	BASEPRI, r3
2000415e:	f3bf 8f6f 	isb	sy
20004162:	f3bf 8f4f 	dsb	sy
20004166:	627b      	str	r3, [r7, #36]	; 0x24
20004168:	e7fe      	b.n	20004168 <pvPortMalloc+0x1e8>
	return pvReturn;
2000416a:	69bb      	ldr	r3, [r7, #24]
}
2000416c:	4618      	mov	r0, r3
2000416e:	f107 0728 	add.w	r7, r7, #40	; 0x28
20004172:	46bd      	mov	sp, r7
20004174:	bd80      	pop	{r7, pc}
20004176:	bf00      	nop

20004178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20004178:	b580      	push	{r7, lr}
2000417a:	b086      	sub	sp, #24
2000417c:	af00      	add	r7, sp, #0
2000417e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20004180:	687b      	ldr	r3, [r7, #4]
20004182:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
20004184:	687b      	ldr	r3, [r7, #4]
20004186:	2b00      	cmp	r3, #0
20004188:	d05e      	beq.n	20004248 <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
2000418a:	f647 03d0 	movw	r3, #30928	; 0x78d0
2000418e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004192:	681b      	ldr	r3, [r3, #0]
20004194:	f1c3 0300 	rsb	r3, r3, #0
20004198:	68ba      	ldr	r2, [r7, #8]
2000419a:	4413      	add	r3, r2
2000419c:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
2000419e:	68bb      	ldr	r3, [r7, #8]
200041a0:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
200041a2:	68fb      	ldr	r3, [r7, #12]
200041a4:	685a      	ldr	r2, [r3, #4]
200041a6:	f64d 43a0 	movw	r3, #56480	; 0xdca0
200041aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041ae:	681b      	ldr	r3, [r3, #0]
200041b0:	ea02 0303 	and.w	r3, r2, r3
200041b4:	2b00      	cmp	r3, #0
200041b6:	d109      	bne.n	200041cc <vPortFree+0x54>
200041b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200041bc:	f383 8811 	msr	BASEPRI, r3
200041c0:	f3bf 8f6f 	isb	sy
200041c4:	f3bf 8f4f 	dsb	sy
200041c8:	613b      	str	r3, [r7, #16]
200041ca:	e7fe      	b.n	200041ca <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
200041cc:	68fb      	ldr	r3, [r7, #12]
200041ce:	681b      	ldr	r3, [r3, #0]
200041d0:	2b00      	cmp	r3, #0
200041d2:	d009      	beq.n	200041e8 <vPortFree+0x70>
200041d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200041d8:	f383 8811 	msr	BASEPRI, r3
200041dc:	f3bf 8f6f 	isb	sy
200041e0:	f3bf 8f4f 	dsb	sy
200041e4:	617b      	str	r3, [r7, #20]
200041e6:	e7fe      	b.n	200041e6 <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
200041e8:	68fb      	ldr	r3, [r7, #12]
200041ea:	685a      	ldr	r2, [r3, #4]
200041ec:	f64d 43a0 	movw	r3, #56480	; 0xdca0
200041f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041f4:	681b      	ldr	r3, [r3, #0]
200041f6:	ea02 0303 	and.w	r3, r2, r3
200041fa:	2b00      	cmp	r3, #0
200041fc:	d024      	beq.n	20004248 <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
200041fe:	68fb      	ldr	r3, [r7, #12]
20004200:	681b      	ldr	r3, [r3, #0]
20004202:	2b00      	cmp	r3, #0
20004204:	d120      	bne.n	20004248 <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20004206:	68fb      	ldr	r3, [r7, #12]
20004208:	685a      	ldr	r2, [r3, #4]
2000420a:	f64d 43a0 	movw	r3, #56480	; 0xdca0
2000420e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004212:	681b      	ldr	r3, [r3, #0]
20004214:	ea6f 0303 	mvn.w	r3, r3
20004218:	ea02 0203 	and.w	r2, r2, r3
2000421c:	68fb      	ldr	r3, [r7, #12]
2000421e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20004220:	f7fe fa20 	bl	20002664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20004224:	68fb      	ldr	r3, [r7, #12]
20004226:	685a      	ldr	r2, [r3, #4]
20004228:	f64d 4398 	movw	r3, #56472	; 0xdc98
2000422c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004230:	681b      	ldr	r3, [r3, #0]
20004232:	441a      	add	r2, r3
20004234:	f64d 4398 	movw	r3, #56472	; 0xdc98
20004238:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000423c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
2000423e:	68f8      	ldr	r0, [r7, #12]
20004240:	f000 f888 	bl	20004354 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
20004244:	f7fe fa20 	bl	20002688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20004248:	f107 0718 	add.w	r7, r7, #24
2000424c:	46bd      	mov	sp, r7
2000424e:	bd80      	pop	{r7, pc}

20004250 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20004250:	b480      	push	{r7}
20004252:	b085      	sub	sp, #20
20004254:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20004256:	f246 13a8 	movw	r3, #25000	; 0x61a8
2000425a:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
2000425c:	f647 23e4 	movw	r3, #31460	; 0x7ae4
20004260:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004264:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20004266:	68bb      	ldr	r3, [r7, #8]
20004268:	f003 0307 	and.w	r3, r3, #7
2000426c:	2b00      	cmp	r3, #0
2000426e:	d011      	beq.n	20004294 <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20004270:	68bb      	ldr	r3, [r7, #8]
20004272:	f103 0307 	add.w	r3, r3, #7
20004276:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20004278:	68bb      	ldr	r3, [r7, #8]
2000427a:	f023 0307 	bic.w	r3, r3, #7
2000427e:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20004280:	68fa      	ldr	r2, [r7, #12]
20004282:	68bb      	ldr	r3, [r7, #8]
20004284:	ebc3 0202 	rsb	r2, r3, r2
20004288:	f647 23e4 	movw	r3, #31460	; 0x7ae4
2000428c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004290:	4413      	add	r3, r2
20004292:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20004294:	68bb      	ldr	r3, [r7, #8]
20004296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
20004298:	687a      	ldr	r2, [r7, #4]
2000429a:	f64d 438c 	movw	r3, #56460	; 0xdc8c
2000429e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042a2:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
200042a4:	f64d 438c 	movw	r3, #56460	; 0xdc8c
200042a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042ac:	f04f 0200 	mov.w	r2, #0
200042b0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
200042b2:	687a      	ldr	r2, [r7, #4]
200042b4:	68fb      	ldr	r3, [r7, #12]
200042b6:	4413      	add	r3, r2
200042b8:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
200042ba:	f647 03d0 	movw	r3, #30928	; 0x78d0
200042be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042c2:	681b      	ldr	r3, [r3, #0]
200042c4:	68ba      	ldr	r2, [r7, #8]
200042c6:	ebc3 0302 	rsb	r3, r3, r2
200042ca:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
200042cc:	68bb      	ldr	r3, [r7, #8]
200042ce:	f023 0307 	bic.w	r3, r3, #7
200042d2:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
200042d4:	68ba      	ldr	r2, [r7, #8]
200042d6:	f64d 4394 	movw	r3, #56468	; 0xdc94
200042da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042de:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
200042e0:	f64d 4394 	movw	r3, #56468	; 0xdc94
200042e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042e8:	681b      	ldr	r3, [r3, #0]
200042ea:	f04f 0200 	mov.w	r2, #0
200042ee:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
200042f0:	f64d 4394 	movw	r3, #56468	; 0xdc94
200042f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042f8:	681b      	ldr	r3, [r3, #0]
200042fa:	f04f 0200 	mov.w	r2, #0
200042fe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20004300:	687b      	ldr	r3, [r7, #4]
20004302:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
20004304:	683b      	ldr	r3, [r7, #0]
20004306:	68ba      	ldr	r2, [r7, #8]
20004308:	ebc3 0202 	rsb	r2, r3, r2
2000430c:	683b      	ldr	r3, [r7, #0]
2000430e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20004310:	f64d 4394 	movw	r3, #56468	; 0xdc94
20004314:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004318:	681a      	ldr	r2, [r3, #0]
2000431a:	683b      	ldr	r3, [r7, #0]
2000431c:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
2000431e:	683b      	ldr	r3, [r7, #0]
20004320:	685a      	ldr	r2, [r3, #4]
20004322:	f64d 439c 	movw	r3, #56476	; 0xdc9c
20004326:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000432a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
2000432c:	683b      	ldr	r3, [r7, #0]
2000432e:	685a      	ldr	r2, [r3, #4]
20004330:	f64d 4398 	movw	r3, #56472	; 0xdc98
20004334:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004338:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
2000433a:	f64d 43a0 	movw	r3, #56480	; 0xdca0
2000433e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20004346:	601a      	str	r2, [r3, #0]
}
20004348:	f107 0714 	add.w	r7, r7, #20
2000434c:	46bd      	mov	sp, r7
2000434e:	bc80      	pop	{r7}
20004350:	4770      	bx	lr
20004352:	bf00      	nop

20004354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20004354:	b480      	push	{r7}
20004356:	b085      	sub	sp, #20
20004358:	af00      	add	r7, sp, #0
2000435a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
2000435c:	f64d 438c 	movw	r3, #56460	; 0xdc8c
20004360:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004364:	60bb      	str	r3, [r7, #8]
20004366:	e002      	b.n	2000436e <prvInsertBlockIntoFreeList+0x1a>
20004368:	68bb      	ldr	r3, [r7, #8]
2000436a:	681b      	ldr	r3, [r3, #0]
2000436c:	60bb      	str	r3, [r7, #8]
2000436e:	68bb      	ldr	r3, [r7, #8]
20004370:	681a      	ldr	r2, [r3, #0]
20004372:	687b      	ldr	r3, [r7, #4]
20004374:	429a      	cmp	r2, r3
20004376:	d3f7      	bcc.n	20004368 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20004378:	68bb      	ldr	r3, [r7, #8]
2000437a:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
2000437c:	68bb      	ldr	r3, [r7, #8]
2000437e:	685a      	ldr	r2, [r3, #4]
20004380:	68fb      	ldr	r3, [r7, #12]
20004382:	441a      	add	r2, r3
20004384:	687b      	ldr	r3, [r7, #4]
20004386:	429a      	cmp	r2, r3
20004388:	d108      	bne.n	2000439c <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
2000438a:	68bb      	ldr	r3, [r7, #8]
2000438c:	685a      	ldr	r2, [r3, #4]
2000438e:	687b      	ldr	r3, [r7, #4]
20004390:	685b      	ldr	r3, [r3, #4]
20004392:	441a      	add	r2, r3
20004394:	68bb      	ldr	r3, [r7, #8]
20004396:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20004398:	68bb      	ldr	r3, [r7, #8]
2000439a:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
2000439c:	687b      	ldr	r3, [r7, #4]
2000439e:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
200043a0:	687b      	ldr	r3, [r7, #4]
200043a2:	685a      	ldr	r2, [r3, #4]
200043a4:	68fb      	ldr	r3, [r7, #12]
200043a6:	441a      	add	r2, r3
200043a8:	68bb      	ldr	r3, [r7, #8]
200043aa:	681b      	ldr	r3, [r3, #0]
200043ac:	429a      	cmp	r2, r3
200043ae:	d11e      	bne.n	200043ee <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
200043b0:	68bb      	ldr	r3, [r7, #8]
200043b2:	681a      	ldr	r2, [r3, #0]
200043b4:	f64d 4394 	movw	r3, #56468	; 0xdc94
200043b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043bc:	681b      	ldr	r3, [r3, #0]
200043be:	429a      	cmp	r2, r3
200043c0:	d00d      	beq.n	200043de <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
200043c2:	687b      	ldr	r3, [r7, #4]
200043c4:	685a      	ldr	r2, [r3, #4]
200043c6:	68bb      	ldr	r3, [r7, #8]
200043c8:	681b      	ldr	r3, [r3, #0]
200043ca:	685b      	ldr	r3, [r3, #4]
200043cc:	441a      	add	r2, r3
200043ce:	687b      	ldr	r3, [r7, #4]
200043d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
200043d2:	68bb      	ldr	r3, [r7, #8]
200043d4:	681b      	ldr	r3, [r3, #0]
200043d6:	681a      	ldr	r2, [r3, #0]
200043d8:	687b      	ldr	r3, [r7, #4]
200043da:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
200043dc:	e00b      	b.n	200043f6 <prvInsertBlockIntoFreeList+0xa2>
200043de:	f64d 4394 	movw	r3, #56468	; 0xdc94
200043e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043e6:	681a      	ldr	r2, [r3, #0]
200043e8:	687b      	ldr	r3, [r7, #4]
200043ea:	601a      	str	r2, [r3, #0]
200043ec:	e003      	b.n	200043f6 <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
200043ee:	68bb      	ldr	r3, [r7, #8]
200043f0:	681a      	ldr	r2, [r3, #0]
200043f2:	687b      	ldr	r3, [r7, #4]
200043f4:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
200043f6:	68ba      	ldr	r2, [r7, #8]
200043f8:	687b      	ldr	r3, [r7, #4]
200043fa:	429a      	cmp	r2, r3
200043fc:	d002      	beq.n	20004404 <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
200043fe:	68bb      	ldr	r3, [r7, #8]
20004400:	687a      	ldr	r2, [r7, #4]
20004402:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20004404:	f107 0714 	add.w	r7, r7, #20
20004408:	46bd      	mov	sp, r7
2000440a:	bc80      	pop	{r7}
2000440c:	4770      	bx	lr
2000440e:	bf00      	nop

20004410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20004410:	b480      	push	{r7}
20004412:	b085      	sub	sp, #20
20004414:	af00      	add	r7, sp, #0
20004416:	60f8      	str	r0, [r7, #12]
20004418:	60b9      	str	r1, [r7, #8]
2000441a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
2000441c:	68fb      	ldr	r3, [r7, #12]
2000441e:	f1a3 0304 	sub.w	r3, r3, #4
20004422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20004424:	68fb      	ldr	r3, [r7, #12]
20004426:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2000442a:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
2000442c:	68fb      	ldr	r3, [r7, #12]
2000442e:	f1a3 0304 	sub.w	r3, r3, #4
20004432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20004434:	68bb      	ldr	r3, [r7, #8]
20004436:	f023 0201 	bic.w	r2, r3, #1
2000443a:	68fb      	ldr	r3, [r7, #12]
2000443c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
2000443e:	68fb      	ldr	r3, [r7, #12]
20004440:	f1a3 0304 	sub.w	r3, r3, #4
20004444:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
20004446:	f244 4379 	movw	r3, #17529	; 0x4479
2000444a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000444e:	68fa      	ldr	r2, [r7, #12]
20004450:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
20004452:	68fb      	ldr	r3, [r7, #12]
20004454:	f1a3 0314 	sub.w	r3, r3, #20
20004458:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
2000445a:	687a      	ldr	r2, [r7, #4]
2000445c:	68fb      	ldr	r3, [r7, #12]
2000445e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20004460:	68fb      	ldr	r3, [r7, #12]
20004462:	f1a3 0320 	sub.w	r3, r3, #32
20004466:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
20004468:	68fb      	ldr	r3, [r7, #12]
}
2000446a:	4618      	mov	r0, r3
2000446c:	f107 0714 	add.w	r7, r7, #20
20004470:	46bd      	mov	sp, r7
20004472:	bc80      	pop	{r7}
20004474:	4770      	bx	lr
20004476:	bf00      	nop

20004478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20004478:	b480      	push	{r7}
2000447a:	b083      	sub	sp, #12
2000447c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
2000447e:	f647 1334 	movw	r3, #31028	; 0x7934
20004482:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004486:	681b      	ldr	r3, [r3, #0]
20004488:	f1b3 3fff 	cmp.w	r3, #4294967295
2000448c:	d009      	beq.n	200044a2 <prvTaskExitError+0x2a>
2000448e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004492:	f383 8811 	msr	BASEPRI, r3
20004496:	f3bf 8f6f 	isb	sy
2000449a:	f3bf 8f4f 	dsb	sy
2000449e:	603b      	str	r3, [r7, #0]
200044a0:	e7fe      	b.n	200044a0 <prvTaskExitError+0x28>
200044a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200044a6:	f383 8811 	msr	BASEPRI, r3
200044aa:	f3bf 8f6f 	isb	sy
200044ae:	f3bf 8f4f 	dsb	sy
200044b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
200044b4:	e7fe      	b.n	200044b4 <prvTaskExitError+0x3c>
200044b6:	bf00      	nop
	...

200044c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
200044c0:	4b07      	ldr	r3, [pc, #28]	; (200044e0 <pxCurrentTCBConst2>)
200044c2:	6819      	ldr	r1, [r3, #0]
200044c4:	6808      	ldr	r0, [r1, #0]
200044c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
200044ca:	f380 8809 	msr	PSP, r0
200044ce:	f3bf 8f6f 	isb	sy
200044d2:	f04f 0000 	mov.w	r0, #0
200044d6:	f380 8811 	msr	BASEPRI, r0
200044da:	f04e 0e0d 	orr.w	lr, lr, #13
200044de:	4770      	bx	lr

200044e0 <pxCurrentTCBConst2>:
200044e0:	2000799c 	.word	0x2000799c
200044e4:	f3af 8000 	nop.w
200044e8:	f3af 8000 	nop.w
200044ec:	f3af 8000 	nop.w

200044f0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
200044f0:	4806      	ldr	r0, [pc, #24]	; (2000450c <prvPortStartFirstTask+0x1c>)
200044f2:	6800      	ldr	r0, [r0, #0]
200044f4:	6800      	ldr	r0, [r0, #0]
200044f6:	f380 8808 	msr	MSP, r0
200044fa:	b662      	cpsie	i
200044fc:	b661      	cpsie	f
200044fe:	f3bf 8f4f 	dsb	sy
20004502:	f3bf 8f6f 	isb	sy
20004506:	df00      	svc	0
20004508:	bf00      	nop
2000450a:	0000      	.short	0x0000
2000450c:	e000ed08 	.word	0xe000ed08

20004510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20004510:	b580      	push	{r7, lr}
20004512:	b084      	sub	sp, #16
20004514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20004516:	f24e 4300 	movw	r3, #58368	; 0xe400
2000451a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000451e:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
20004520:	68fb      	ldr	r3, [r7, #12]
20004522:	781b      	ldrb	r3, [r3, #0]
20004524:	b2db      	uxtb	r3, r3
20004526:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20004528:	68fb      	ldr	r3, [r7, #12]
2000452a:	f04f 32ff 	mov.w	r2, #4294967295
2000452e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20004530:	68fb      	ldr	r3, [r7, #12]
20004532:	781b      	ldrb	r3, [r3, #0]
20004534:	b2db      	uxtb	r3, r3
20004536:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20004538:	79fb      	ldrb	r3, [r7, #7]
2000453a:	b2db      	uxtb	r3, r3
2000453c:	461a      	mov	r2, r3
2000453e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
20004542:	f64d 43a4 	movw	r3, #56484	; 0xdca4
20004546:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000454a:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
2000454c:	f64d 43a8 	movw	r3, #56488	; 0xdca8
20004550:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004554:	f04f 0207 	mov.w	r2, #7
20004558:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
2000455a:	e011      	b.n	20004580 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
2000455c:	f64d 43a8 	movw	r3, #56488	; 0xdca8
20004560:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004564:	681b      	ldr	r3, [r3, #0]
20004566:	f103 32ff 	add.w	r2, r3, #4294967295
2000456a:	f64d 43a8 	movw	r3, #56488	; 0xdca8
2000456e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004572:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20004574:	79fb      	ldrb	r3, [r7, #7]
20004576:	b2db      	uxtb	r3, r3
20004578:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000457c:	b2db      	uxtb	r3, r3
2000457e:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20004580:	79fb      	ldrb	r3, [r7, #7]
20004582:	b2db      	uxtb	r3, r3
20004584:	b25b      	sxtb	r3, r3
20004586:	2b00      	cmp	r3, #0
20004588:	dbe8      	blt.n	2000455c <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
2000458a:	f64d 43a8 	movw	r3, #56488	; 0xdca8
2000458e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004592:	681b      	ldr	r3, [r3, #0]
20004594:	ea4f 2203 	mov.w	r2, r3, lsl #8
20004598:	f64d 43a8 	movw	r3, #56488	; 0xdca8
2000459c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045a0:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
200045a2:	f64d 43a8 	movw	r3, #56488	; 0xdca8
200045a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045aa:	681b      	ldr	r3, [r3, #0]
200045ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200045b0:	f64d 43a8 	movw	r3, #56488	; 0xdca8
200045b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045b8:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
200045ba:	68bb      	ldr	r3, [r7, #8]
200045bc:	b2da      	uxtb	r2, r3
200045be:	68fb      	ldr	r3, [r7, #12]
200045c0:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
200045c2:	f64e 5320 	movw	r3, #60704	; 0xed20
200045c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200045ca:	f64e 5220 	movw	r2, #60704	; 0xed20
200045ce:	f2ce 0200 	movt	r2, #57344	; 0xe000
200045d2:	6812      	ldr	r2, [r2, #0]
200045d4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
200045d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
200045da:	f64e 5320 	movw	r3, #60704	; 0xed20
200045de:	f2ce 0300 	movt	r3, #57344	; 0xe000
200045e2:	f64e 5220 	movw	r2, #60704	; 0xed20
200045e6:	f2ce 0200 	movt	r2, #57344	; 0xe000
200045ea:	6812      	ldr	r2, [r2, #0]
200045ec:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
200045f0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
200045f2:	f000 f8c7 	bl	20004784 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
200045f6:	f647 1334 	movw	r3, #31028	; 0x7934
200045fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045fe:	f04f 0200 	mov.w	r2, #0
20004602:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20004604:	f7ff ff74 	bl	200044f0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
20004608:	f7ff ff36 	bl	20004478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
2000460c:	f04f 0300 	mov.w	r3, #0
}
20004610:	4618      	mov	r0, r3
20004612:	f107 0710 	add.w	r7, r7, #16
20004616:	46bd      	mov	sp, r7
20004618:	bd80      	pop	{r7, pc}
2000461a:	bf00      	nop

2000461c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
2000461c:	b480      	push	{r7}
2000461e:	b083      	sub	sp, #12
20004620:	af00      	add	r7, sp, #0
20004622:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004626:	f383 8811 	msr	BASEPRI, r3
2000462a:	f3bf 8f6f 	isb	sy
2000462e:	f3bf 8f4f 	dsb	sy
20004632:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20004634:	f647 1334 	movw	r3, #31028	; 0x7934
20004638:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000463c:	681b      	ldr	r3, [r3, #0]
2000463e:	f103 0201 	add.w	r2, r3, #1
20004642:	f647 1334 	movw	r3, #31028	; 0x7934
20004646:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000464a:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
2000464c:	f647 1334 	movw	r3, #31028	; 0x7934
20004650:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004654:	681b      	ldr	r3, [r3, #0]
20004656:	2b01      	cmp	r3, #1
20004658:	d112      	bne.n	20004680 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
2000465a:	f64e 5304 	movw	r3, #60676	; 0xed04
2000465e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004662:	681b      	ldr	r3, [r3, #0]
20004664:	f003 03ff 	and.w	r3, r3, #255	; 0xff
20004668:	2b00      	cmp	r3, #0
2000466a:	d009      	beq.n	20004680 <vPortEnterCritical+0x64>
2000466c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004670:	f383 8811 	msr	BASEPRI, r3
20004674:	f3bf 8f6f 	isb	sy
20004678:	f3bf 8f4f 	dsb	sy
2000467c:	607b      	str	r3, [r7, #4]
2000467e:	e7fe      	b.n	2000467e <vPortEnterCritical+0x62>
	}
}
20004680:	f107 070c 	add.w	r7, r7, #12
20004684:	46bd      	mov	sp, r7
20004686:	bc80      	pop	{r7}
20004688:	4770      	bx	lr
2000468a:	bf00      	nop

2000468c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
2000468c:	b480      	push	{r7}
2000468e:	b083      	sub	sp, #12
20004690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20004692:	f647 1334 	movw	r3, #31028	; 0x7934
20004696:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000469a:	681b      	ldr	r3, [r3, #0]
2000469c:	2b00      	cmp	r3, #0
2000469e:	d109      	bne.n	200046b4 <vPortExitCritical+0x28>
200046a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200046a4:	f383 8811 	msr	BASEPRI, r3
200046a8:	f3bf 8f6f 	isb	sy
200046ac:	f3bf 8f4f 	dsb	sy
200046b0:	603b      	str	r3, [r7, #0]
200046b2:	e7fe      	b.n	200046b2 <vPortExitCritical+0x26>
	uxCriticalNesting--;
200046b4:	f647 1334 	movw	r3, #31028	; 0x7934
200046b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046bc:	681b      	ldr	r3, [r3, #0]
200046be:	f103 32ff 	add.w	r2, r3, #4294967295
200046c2:	f647 1334 	movw	r3, #31028	; 0x7934
200046c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046ca:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
200046cc:	f647 1334 	movw	r3, #31028	; 0x7934
200046d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046d4:	681b      	ldr	r3, [r3, #0]
200046d6:	2b00      	cmp	r3, #0
200046d8:	d105      	bne.n	200046e6 <vPortExitCritical+0x5a>
200046da:	f04f 0300 	mov.w	r3, #0
200046de:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200046e0:	687b      	ldr	r3, [r7, #4]
200046e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
200046e6:	f107 070c 	add.w	r7, r7, #12
200046ea:	46bd      	mov	sp, r7
200046ec:	bc80      	pop	{r7}
200046ee:	4770      	bx	lr

200046f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
200046f0:	f3ef 8009 	mrs	r0, PSP
200046f4:	f3bf 8f6f 	isb	sy
200046f8:	4b0d      	ldr	r3, [pc, #52]	; (20004730 <pxCurrentTCBConst>)
200046fa:	681a      	ldr	r2, [r3, #0]
200046fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004700:	6010      	str	r0, [r2, #0]
20004702:	e92d 4008 	stmdb	sp!, {r3, lr}
20004706:	f04f 00a0 	mov.w	r0, #160	; 0xa0
2000470a:	f380 8811 	msr	BASEPRI, r0
2000470e:	f7fe f9a3 	bl	20002a58 <vTaskSwitchContext>
20004712:	f04f 0000 	mov.w	r0, #0
20004716:	f380 8811 	msr	BASEPRI, r0
2000471a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000471e:	6819      	ldr	r1, [r3, #0]
20004720:	6808      	ldr	r0, [r1, #0]
20004722:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004726:	f380 8809 	msr	PSP, r0
2000472a:	f3bf 8f6f 	isb	sy
2000472e:	4770      	bx	lr

20004730 <pxCurrentTCBConst>:
20004730:	2000799c 	.word	0x2000799c
20004734:	f3af 8000 	nop.w
20004738:	f3af 8000 	nop.w
2000473c:	f3af 8000 	nop.w

20004740 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20004740:	b580      	push	{r7, lr}
20004742:	b082      	sub	sp, #8
20004744:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20004746:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000474a:	f383 8811 	msr	BASEPRI, r3
2000474e:	f3bf 8f6f 	isb	sy
20004752:	f3bf 8f4f 	dsb	sy
20004756:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20004758:	f7fe f876 	bl	20002848 <xTaskIncrementTick>
2000475c:	4603      	mov	r3, r0
2000475e:	2b00      	cmp	r3, #0
20004760:	d006      	beq.n	20004770 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20004762:	f64e 5304 	movw	r3, #60676	; 0xed04
20004766:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000476e:	601a      	str	r2, [r3, #0]
20004770:	f04f 0300 	mov.w	r3, #0
20004774:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20004776:	687b      	ldr	r3, [r7, #4]
20004778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
2000477c:	f107 0708 	add.w	r7, r7, #8
20004780:	46bd      	mov	sp, r7
20004782:	bd80      	pop	{r7, pc}

20004784 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20004784:	b480      	push	{r7}
20004786:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20004788:	f24e 0314 	movw	r3, #57364	; 0xe014
2000478c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004790:	f647 1274 	movw	r2, #31092	; 0x7974
20004794:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004798:	6811      	ldr	r1, [r2, #0]
2000479a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
2000479e:	f2c1 0262 	movt	r2, #4194	; 0x1062
200047a2:	fba2 0201 	umull	r0, r2, r2, r1
200047a6:	ea4f 1292 	mov.w	r2, r2, lsr #6
200047aa:	f102 32ff 	add.w	r2, r2, #4294967295
200047ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
200047b0:	f24e 0310 	movw	r3, #57360	; 0xe010
200047b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
200047b8:	f04f 0207 	mov.w	r2, #7
200047bc:	601a      	str	r2, [r3, #0]
}
200047be:	46bd      	mov	sp, r7
200047c0:	bc80      	pop	{r7}
200047c2:	4770      	bx	lr

200047c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
200047c4:	b480      	push	{r7}
200047c6:	b085      	sub	sp, #20
200047c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
200047ca:	f3ef 8305 	mrs	r3, IPSR
200047ce:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
200047d0:	683b      	ldr	r3, [r7, #0]
200047d2:	2b0f      	cmp	r3, #15
200047d4:	d91a      	bls.n	2000480c <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
200047d6:	f647 03d4 	movw	r3, #30932	; 0x78d4
200047da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047de:	681a      	ldr	r2, [r3, #0]
200047e0:	683b      	ldr	r3, [r7, #0]
200047e2:	4413      	add	r3, r2
200047e4:	781b      	ldrb	r3, [r3, #0]
200047e6:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
200047e8:	f64d 43a4 	movw	r3, #56484	; 0xdca4
200047ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047f0:	781b      	ldrb	r3, [r3, #0]
200047f2:	79fa      	ldrb	r2, [r7, #7]
200047f4:	429a      	cmp	r2, r3
200047f6:	d209      	bcs.n	2000480c <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200047f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200047fc:	f383 8811 	msr	BASEPRI, r3
20004800:	f3bf 8f6f 	isb	sy
20004804:	f3bf 8f4f 	dsb	sy
20004808:	60bb      	str	r3, [r7, #8]
2000480a:	e7fe      	b.n	2000480a <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
2000480c:	f64e 530c 	movw	r3, #60684	; 0xed0c
20004810:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004814:	681b      	ldr	r3, [r3, #0]
20004816:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
2000481a:	f64d 43a8 	movw	r3, #56488	; 0xdca8
2000481e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004822:	681b      	ldr	r3, [r3, #0]
20004824:	429a      	cmp	r2, r3
20004826:	d909      	bls.n	2000483c <vPortValidateInterruptPriority+0x78>
20004828:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000482c:	f383 8811 	msr	BASEPRI, r3
20004830:	f3bf 8f6f 	isb	sy
20004834:	f3bf 8f4f 	dsb	sy
20004838:	60fb      	str	r3, [r7, #12]
2000483a:	e7fe      	b.n	2000483a <vPortValidateInterruptPriority+0x76>
	}
2000483c:	f107 0714 	add.w	r7, r7, #20
20004840:	46bd      	mov	sp, r7
20004842:	bc80      	pop	{r7}
20004844:	4770      	bx	lr
20004846:	bf00      	nop

20004848 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20004848:	b480      	push	{r7}
2000484a:	b083      	sub	sp, #12
2000484c:	af00      	add	r7, sp, #0
2000484e:	4603      	mov	r3, r0
20004850:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20004852:	f24e 1300 	movw	r3, #57600	; 0xe100
20004856:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000485a:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000485e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20004862:	79f9      	ldrb	r1, [r7, #7]
20004864:	f001 011f 	and.w	r1, r1, #31
20004868:	f04f 0001 	mov.w	r0, #1
2000486c:	fa00 f101 	lsl.w	r1, r0, r1
20004870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20004874:	f107 070c 	add.w	r7, r7, #12
20004878:	46bd      	mov	sp, r7
2000487a:	bc80      	pop	{r7}
2000487c:	4770      	bx	lr
2000487e:	bf00      	nop

20004880 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20004880:	b480      	push	{r7}
20004882:	b083      	sub	sp, #12
20004884:	af00      	add	r7, sp, #0
20004886:	4603      	mov	r3, r0
20004888:	6039      	str	r1, [r7, #0]
2000488a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
2000488c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004890:	2b00      	cmp	r3, #0
20004892:	da10      	bge.n	200048b6 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
20004894:	f64e 5300 	movw	r3, #60672	; 0xed00
20004898:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000489c:	79fa      	ldrb	r2, [r7, #7]
2000489e:	f002 020f 	and.w	r2, r2, #15
200048a2:	f1a2 0104 	sub.w	r1, r2, #4
200048a6:	683a      	ldr	r2, [r7, #0]
200048a8:	b2d2      	uxtb	r2, r2
200048aa:	ea4f 1202 	mov.w	r2, r2, lsl #4
200048ae:	b2d2      	uxtb	r2, r2
200048b0:	440b      	add	r3, r1
200048b2:	761a      	strb	r2, [r3, #24]
200048b4:	e00d      	b.n	200048d2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
200048b6:	f24e 1300 	movw	r3, #57600	; 0xe100
200048ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
200048be:	f997 1007 	ldrsb.w	r1, [r7, #7]
200048c2:	683a      	ldr	r2, [r7, #0]
200048c4:	b2d2      	uxtb	r2, r2
200048c6:	ea4f 1202 	mov.w	r2, r2, lsl #4
200048ca:	b2d2      	uxtb	r2, r2
200048cc:	440b      	add	r3, r1
200048ce:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
200048d2:	f107 070c 	add.w	r7, r7, #12
200048d6:	46bd      	mov	sp, r7
200048d8:	bc80      	pop	{r7}
200048da:	4770      	bx	lr

200048dc <get_hk_data>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void get_hk_data(void* d){
200048dc:	b590      	push	{r4, r7, lr}
200048de:	b089      	sub	sp, #36	; 0x24
200048e0:	af00      	add	r7, sp, #0
200048e2:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(get_pld_pkt_handle);
200048e4:	f24e 4320 	movw	r3, #58400	; 0xe420
200048e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048ec:	681b      	ldr	r3, [r3, #0]
200048ee:	4618      	mov	r0, r3
200048f0:	f7fd fd62 	bl	200023b8 <uxTaskPriorityGet>
200048f4:	4603      	mov	r3, r0
200048f6:	61bb      	str	r3, [r7, #24]

	if(feed_get_hk_data != pdFAIL){
200048f8:	f24e 433c 	movw	r3, #58428	; 0xe43c
200048fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004900:	681b      	ldr	r3, [r3, #0]
20004902:	2b00      	cmp	r3, #0
20004904:	f000 81ec 	beq.w	20004ce0 <get_hk_data+0x404>

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
20004908:	f04f 0300 	mov.w	r3, #0
2000490c:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
2000490e:	f04f 0300 	mov.w	r3, #0
20004912:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
20004914:	f64d 5290 	movw	r2, #56720	; 0xdd90
20004918:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000491c:	f24e 4328 	movw	r3, #58408	; 0xe428
20004920:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004924:	601a      	str	r2, [r3, #0]


		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
20004926:	f107 0116 	add.w	r1, r7, #22
2000492a:	f107 0214 	add.w	r2, r7, #20
2000492e:	f107 0312 	add.w	r3, r7, #18
20004932:	4608      	mov	r0, r1
20004934:	4611      	mov	r1, r2
20004936:	461a      	mov	r2, r3
20004938:	f7fb fdbc 	bl	200004b4 <get_IMU_acc>
2000493c:	4603      	mov	r3, r0
2000493e:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
20004940:	f107 010e 	add.w	r1, r7, #14
20004944:	f107 020c 	add.w	r2, r7, #12
20004948:	f107 030a 	add.w	r3, r7, #10
2000494c:	4608      	mov	r0, r1
2000494e:	4611      	mov	r1, r2
20004950:	461a      	mov	r2, r3
20004952:	f7fb ff45 	bl	200007e0 <get_IMU_gyro>
20004956:	4603      	mov	r3, r0
20004958:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;
			hk_pkt->cmd_cnt = command_cnt;
2000495a:	f24e 4328 	movw	r3, #58408	; 0xe428
2000495e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004962:	681a      	ldr	r2, [r3, #0]
20004964:	f24e 4314 	movw	r3, #58388	; 0xe414
20004968:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000496c:	881b      	ldrh	r3, [r3, #0]
2000496e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004972:	f04f 0000 	mov.w	r0, #0
20004976:	ea40 0101 	orr.w	r1, r0, r1
2000497a:	7391      	strb	r1, [r2, #14]
2000497c:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004980:	b29b      	uxth	r3, r3
20004982:	f04f 0100 	mov.w	r1, #0
20004986:	ea41 0303 	orr.w	r3, r1, r3
2000498a:	73d3      	strb	r3, [r2, #15]
			hk_pkt->cmd_reject_cnt = command_reject_cnt;
2000498c:	f24e 4328 	movw	r3, #58408	; 0xe428
20004990:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004994:	681a      	ldr	r2, [r3, #0]
20004996:	f24e 4354 	movw	r3, #58452	; 0xe454
2000499a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000499e:	881b      	ldrh	r3, [r3, #0]
200049a0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200049a4:	f04f 0000 	mov.w	r0, #0
200049a8:	ea40 0101 	orr.w	r1, r0, r1
200049ac:	7411      	strb	r1, [r2, #16]
200049ae:	ea4f 2313 	mov.w	r3, r3, lsr #8
200049b2:	b29b      	uxth	r3, r3
200049b4:	f04f 0100 	mov.w	r1, #0
200049b8:	ea41 0303 	orr.w	r3, r1, r3
200049bc:	7453      	strb	r3, [r2, #17]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
200049be:	f24e 4328 	movw	r3, #58408	; 0xe428
200049c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049c6:	681b      	ldr	r3, [r3, #0]
200049c8:	8afa      	ldrh	r2, [r7, #22]
200049ca:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200049ce:	f04f 0000 	mov.w	r0, #0
200049d2:	ea40 0101 	orr.w	r1, r0, r1
200049d6:	7499      	strb	r1, [r3, #18]
200049d8:	ea4f 2212 	mov.w	r2, r2, lsr #8
200049dc:	b292      	uxth	r2, r2
200049de:	f04f 0100 	mov.w	r1, #0
200049e2:	ea41 0202 	orr.w	r2, r1, r2
200049e6:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
200049e8:	f24e 4328 	movw	r3, #58408	; 0xe428
200049ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049f0:	681b      	ldr	r3, [r3, #0]
200049f2:	8aba      	ldrh	r2, [r7, #20]
200049f4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200049f8:	f04f 0000 	mov.w	r0, #0
200049fc:	ea40 0101 	orr.w	r1, r0, r1
20004a00:	7519      	strb	r1, [r3, #20]
20004a02:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a06:	b292      	uxth	r2, r2
20004a08:	f04f 0100 	mov.w	r1, #0
20004a0c:	ea41 0202 	orr.w	r2, r1, r2
20004a10:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Acc[2] = ((az));
20004a12:	f24e 4328 	movw	r3, #58408	; 0xe428
20004a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a1a:	681b      	ldr	r3, [r3, #0]
20004a1c:	8a7a      	ldrh	r2, [r7, #18]
20004a1e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004a22:	f04f 0000 	mov.w	r0, #0
20004a26:	ea40 0101 	orr.w	r1, r0, r1
20004a2a:	7599      	strb	r1, [r3, #22]
20004a2c:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a30:	b292      	uxth	r2, r2
20004a32:	f04f 0100 	mov.w	r1, #0
20004a36:	ea41 0202 	orr.w	r2, r1, r2
20004a3a:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
20004a3c:	f24e 4328 	movw	r3, #58408	; 0xe428
20004a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a44:	681b      	ldr	r3, [r3, #0]
20004a46:	89fa      	ldrh	r2, [r7, #14]
20004a48:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004a4c:	f04f 0000 	mov.w	r0, #0
20004a50:	ea40 0101 	orr.w	r1, r0, r1
20004a54:	7619      	strb	r1, [r3, #24]
20004a56:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a5a:	b292      	uxth	r2, r2
20004a5c:	f04f 0100 	mov.w	r1, #0
20004a60:	ea41 0202 	orr.w	r2, r1, r2
20004a64:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
20004a66:	f24e 4328 	movw	r3, #58408	; 0xe428
20004a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a6e:	681b      	ldr	r3, [r3, #0]
20004a70:	89ba      	ldrh	r2, [r7, #12]
20004a72:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004a76:	f04f 0000 	mov.w	r0, #0
20004a7a:	ea40 0101 	orr.w	r1, r0, r1
20004a7e:	7699      	strb	r1, [r3, #26]
20004a80:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a84:	b292      	uxth	r2, r2
20004a86:	f04f 0100 	mov.w	r1, #0
20004a8a:	ea41 0202 	orr.w	r2, r1, r2
20004a8e:	76da      	strb	r2, [r3, #27]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
20004a90:	f24e 4328 	movw	r3, #58408	; 0xe428
20004a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a98:	681b      	ldr	r3, [r3, #0]
20004a9a:	897a      	ldrh	r2, [r7, #10]
20004a9c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004aa0:	f04f 0000 	mov.w	r0, #0
20004aa4:	ea40 0101 	orr.w	r1, r0, r1
20004aa8:	7719      	strb	r1, [r3, #28]
20004aaa:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004aae:	b292      	uxth	r2, r2
20004ab0:	f04f 0100 	mov.w	r1, #0
20004ab4:	ea41 0202 	orr.w	r2, r1, r2
20004ab8:	775a      	strb	r2, [r3, #29]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
20004aba:	f107 0308 	add.w	r3, r7, #8
20004abe:	4618      	mov	r0, r3
20004ac0:	f7fc f800 	bl	20000ac4 <get_IMU_temp>
20004ac4:	4603      	mov	r3, r0
20004ac6:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
20004ac8:	f24e 4328 	movw	r3, #58408	; 0xe428
20004acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ad0:	681b      	ldr	r3, [r3, #0]
20004ad2:	893a      	ldrh	r2, [r7, #8]
20004ad4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004ad8:	f04f 0000 	mov.w	r0, #0
20004adc:	ea40 0101 	orr.w	r1, r0, r1
20004ae0:	7799      	strb	r1, [r3, #30]
20004ae2:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004ae6:	b292      	uxth	r2, r2
20004ae8:	f04f 0100 	mov.w	r1, #0
20004aec:	ea41 0202 	orr.w	r2, r1, r2
20004af0:	77da      	strb	r2, [r3, #31]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
20004af2:	f24e 4328 	movw	r3, #58408	; 0xe428
20004af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004afa:	681c      	ldr	r4, [r3, #0]
20004afc:	f107 0311 	add.w	r3, r7, #17
20004b00:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b04:	f04f 0101 	mov.w	r1, #1
20004b08:	461a      	mov	r2, r3
20004b0a:	f7fc f90f 	bl	20000d2c <read_bus_voltage>
20004b0e:	4603      	mov	r3, r0
20004b10:	b29b      	uxth	r3, r3
20004b12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b16:	f04f 0100 	mov.w	r1, #0
20004b1a:	ea41 0202 	orr.w	r2, r1, r2
20004b1e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
20004b22:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004b26:	b29b      	uxth	r3, r3
20004b28:	f04f 0200 	mov.w	r2, #0
20004b2c:	ea42 0303 	orr.w	r3, r2, r3
20004b30:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
20004b34:	7c7a      	ldrb	r2, [r7, #17]
20004b36:	7ffb      	ldrb	r3, [r7, #31]
20004b38:	4413      	add	r3, r2
20004b3a:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
20004b3c:	f24e 4328 	movw	r3, #58408	; 0xe428
20004b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b44:	681c      	ldr	r4, [r3, #0]
20004b46:	f107 0311 	add.w	r3, r7, #17
20004b4a:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b4e:	f04f 0102 	mov.w	r1, #2
20004b52:	461a      	mov	r2, r3
20004b54:	f7fc f8ea 	bl	20000d2c <read_bus_voltage>
20004b58:	4603      	mov	r3, r0
20004b5a:	b29b      	uxth	r3, r3
20004b5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b60:	f04f 0100 	mov.w	r1, #0
20004b64:	ea41 0202 	orr.w	r2, r1, r2
20004b68:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
20004b6c:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004b70:	b29b      	uxth	r3, r3
20004b72:	f04f 0200 	mov.w	r2, #0
20004b76:	ea42 0303 	orr.w	r3, r2, r3
20004b7a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
20004b7e:	7c7a      	ldrb	r2, [r7, #17]
20004b80:	7ffb      	ldrb	r3, [r7, #31]
20004b82:	4413      	add	r3, r2
20004b84:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
20004b86:	f24e 4328 	movw	r3, #58408	; 0xe428
20004b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b8e:	681c      	ldr	r4, [r3, #0]
20004b90:	f107 0311 	add.w	r3, r7, #17
20004b94:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b98:	f04f 0103 	mov.w	r1, #3
20004b9c:	461a      	mov	r2, r3
20004b9e:	f7fc f8c5 	bl	20000d2c <read_bus_voltage>
20004ba2:	4603      	mov	r3, r0
20004ba4:	b29b      	uxth	r3, r3
20004ba6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004baa:	f04f 0100 	mov.w	r1, #0
20004bae:	ea41 0202 	orr.w	r2, r1, r2
20004bb2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
20004bb6:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004bba:	b29b      	uxth	r3, r3
20004bbc:	f04f 0200 	mov.w	r2, #0
20004bc0:	ea42 0303 	orr.w	r3, r2, r3
20004bc4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
20004bc8:	7c7a      	ldrb	r2, [r7, #17]
20004bca:	7ffb      	ldrb	r3, [r7, #31]
20004bcc:	4413      	add	r3, r2
20004bce:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
20004bd0:	f24e 4328 	movw	r3, #58408	; 0xe428
20004bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bd8:	681c      	ldr	r4, [r3, #0]
20004bda:	f107 0311 	add.w	r3, r7, #17
20004bde:	f04f 0040 	mov.w	r0, #64	; 0x40
20004be2:	f04f 0101 	mov.w	r1, #1
20004be6:	461a      	mov	r2, r3
20004be8:	f7fc f8fe 	bl	20000de8 <read_shunt_voltage>
20004bec:	4603      	mov	r3, r0
20004bee:	b29b      	uxth	r3, r3
20004bf0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004bf4:	f04f 0100 	mov.w	r1, #0
20004bf8:	ea41 0202 	orr.w	r2, r1, r2
20004bfc:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
20004c00:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004c04:	b29b      	uxth	r3, r3
20004c06:	f04f 0200 	mov.w	r2, #0
20004c0a:	ea42 0303 	orr.w	r3, r2, r3
20004c0e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
20004c12:	7c7a      	ldrb	r2, [r7, #17]
20004c14:	7ffb      	ldrb	r3, [r7, #31]
20004c16:	4413      	add	r3, r2
20004c18:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
20004c1a:	f24e 4328 	movw	r3, #58408	; 0xe428
20004c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c22:	681c      	ldr	r4, [r3, #0]
20004c24:	f107 0311 	add.w	r3, r7, #17
20004c28:	f04f 0040 	mov.w	r0, #64	; 0x40
20004c2c:	f04f 0102 	mov.w	r1, #2
20004c30:	461a      	mov	r2, r3
20004c32:	f7fc f8d9 	bl	20000de8 <read_shunt_voltage>
20004c36:	4603      	mov	r3, r0
20004c38:	b29b      	uxth	r3, r3
20004c3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004c3e:	f04f 0100 	mov.w	r1, #0
20004c42:	ea41 0202 	orr.w	r2, r1, r2
20004c46:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
20004c4a:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004c4e:	b29b      	uxth	r3, r3
20004c50:	f04f 0200 	mov.w	r2, #0
20004c54:	ea42 0303 	orr.w	r3, r2, r3
20004c58:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
20004c5c:	7c7a      	ldrb	r2, [r7, #17]
20004c5e:	7ffb      	ldrb	r3, [r7, #31]
20004c60:	4413      	add	r3, r2
20004c62:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
20004c64:	f24e 4328 	movw	r3, #58408	; 0xe428
20004c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c6c:	681c      	ldr	r4, [r3, #0]
20004c6e:	f107 0311 	add.w	r3, r7, #17
20004c72:	f04f 0040 	mov.w	r0, #64	; 0x40
20004c76:	f04f 0103 	mov.w	r1, #3
20004c7a:	461a      	mov	r2, r3
20004c7c:	f7fc f8b4 	bl	20000de8 <read_shunt_voltage>
20004c80:	4603      	mov	r3, r0
20004c82:	b29b      	uxth	r3, r3
20004c84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004c88:	f04f 0100 	mov.w	r1, #0
20004c8c:	ea41 0202 	orr.w	r2, r1, r2
20004c90:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
20004c94:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004c98:	b29b      	uxth	r3, r3
20004c9a:	f04f 0200 	mov.w	r2, #0
20004c9e:	ea42 0303 	orr.w	r3, r2, r3
20004ca2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			loss_count+= flag;
20004ca6:	7c7a      	ldrb	r2, [r7, #17]
20004ca8:	7ffb      	ldrb	r3, [r7, #31]
20004caa:	4413      	add	r3, r2
20004cac:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
20004cae:	f64d 5390 	movw	r3, #56720	; 0xdd90
20004cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cb6:	f04f 0201 	mov.w	r2, #1
20004cba:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(get_pld_pkt_handle, uxPriority + 1);
20004cbe:	f24e 4320 	movw	r3, #58400	; 0xe420
20004cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cc6:	681a      	ldr	r2, [r3, #0]
20004cc8:	69bb      	ldr	r3, [r7, #24]
20004cca:	f103 0301 	add.w	r3, r3, #1
20004cce:	4610      	mov	r0, r2
20004cd0:	4619      	mov	r1, r3
20004cd2:	f7fd fb8d 	bl	200023f0 <vTaskPrioritySet>
			vTask_Delay(HK_COLL_RATE);
20004cd6:	f640 30b8 	movw	r0, #3000	; 0xbb8
20004cda:	f7fc f983 	bl	20000fe4 <vTask_Delay>

		}
20004cde:	e622      	b.n	20004926 <get_hk_data+0x4a>
	}
}
20004ce0:	f107 0724 	add.w	r7, r7, #36	; 0x24
20004ce4:	46bd      	mov	sp, r7
20004ce6:	bd90      	pop	{r4, r7, pc}

20004ce8 <get_pld_data>:

void get_pld_data(void* d1){
20004ce8:	b5b0      	push	{r4, r5, r7, lr}
20004cea:	b084      	sub	sp, #16
20004cec:	af00      	add	r7, sp, #0
20004cee:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(NULL);
20004cf0:	f04f 0000 	mov.w	r0, #0
20004cf4:	f7fd fb60 	bl	200023b8 <uxTaskPriorityGet>
20004cf8:	4603      	mov	r3, r0
20004cfa:	60bb      	str	r3, [r7, #8]

	if(feed_get_payload_data != pdFAIL){
20004cfc:	f24e 4348 	movw	r3, #58440	; 0xe448
20004d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d04:	681b      	ldr	r3, [r3, #0]
20004d06:	2b00      	cmp	r3, #0
20004d08:	d053      	beq.n	20004db2 <get_pld_data+0xca>

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
20004d0a:	f64d 42b0 	movw	r2, #56496	; 0xdcb0
20004d0e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004d12:	f24e 4350 	movw	r3, #58448	; 0xe450
20004d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d1a:	601a      	str	r2, [r3, #0]
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004d1c:	f04f 0300 	mov.w	r3, #0
20004d20:	73fb      	strb	r3, [r7, #15]
20004d22:	e02e      	b.n	20004d82 <get_pld_data+0x9a>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
20004d24:	f24e 4350 	movw	r3, #58448	; 0xe450
20004d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d2c:	681c      	ldr	r4, [r3, #0]
20004d2e:	7bfd      	ldrb	r5, [r7, #15]
20004d30:	7bbb      	ldrb	r3, [r7, #14]
20004d32:	7bfa      	ldrb	r2, [r7, #15]
20004d34:	f24e 308c 	movw	r0, #58252	; 0xe38c
20004d38:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d3c:	f04f 0121 	mov.w	r1, #33	; 0x21
20004d40:	f7fc f8b2 	bl	20000ea8 <get_ADC_value>
20004d44:	4603      	mov	r3, r0
20004d46:	4619      	mov	r1, r3
20004d48:	f105 0204 	add.w	r2, r5, #4
20004d4c:	f001 00ff 	and.w	r0, r1, #255	; 0xff
20004d50:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004d54:	4423      	add	r3, r4
20004d56:	f04f 0c00 	mov.w	ip, #0
20004d5a:	ea4c 0000 	orr.w	r0, ip, r0
20004d5e:	7198      	strb	r0, [r3, #6]
20004d60:	ea4f 2311 	mov.w	r3, r1, lsr #8
20004d64:	b298      	uxth	r0, r3
20004d66:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004d6a:	4423      	add	r3, r4
20004d6c:	f04f 0200 	mov.w	r2, #0
20004d70:	4611      	mov	r1, r2
20004d72:	4602      	mov	r2, r0
20004d74:	ea41 0202 	orr.w	r2, r1, r2
20004d78:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004d7a:	7bfb      	ldrb	r3, [r7, #15]
20004d7c:	f103 0301 	add.w	r3, r3, #1
20004d80:	73fb      	strb	r3, [r7, #15]
20004d82:	7bfb      	ldrb	r3, [r7, #15]
20004d84:	2b06      	cmp	r3, #6
20004d86:	d9cd      	bls.n	20004d24 <get_pld_data+0x3c>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
20004d88:	f64d 43b0 	movw	r3, #56496	; 0xdcb0
20004d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d90:	f04f 0202 	mov.w	r2, #2
20004d94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(NULL, uxPriority - 2);
20004d98:	68bb      	ldr	r3, [r7, #8]
20004d9a:	f1a3 0302 	sub.w	r3, r3, #2
20004d9e:	f04f 0000 	mov.w	r0, #0
20004da2:	4619      	mov	r1, r3
20004da4:	f7fd fb24 	bl	200023f0 <vTaskPrioritySet>
			vTask_Delay(PLD_COLL_RATE);
20004da8:	f640 30b8 	movw	r0, #3000	; 0xbb8
20004dac:	f7fc f91a 	bl	20000fe4 <vTask_Delay>

		}
20004db0:	e7b4      	b.n	20004d1c <get_pld_data+0x34>

	}
}
20004db2:	f107 0710 	add.w	r7, r7, #16
20004db6:	46bd      	mov	sp, r7
20004db8:	bdb0      	pop	{r4, r5, r7, pc}
20004dba:	bf00      	nop

20004dbc <vGetPktStruct>:


void vGetPktStruct(pkt_name_t pktname, void* pktdata, uint8_t pktsize){
20004dbc:	b580      	push	{r7, lr}
20004dbe:	b088      	sub	sp, #32
20004dc0:	af00      	add	r7, sp, #0
20004dc2:	60b9      	str	r1, [r7, #8]
20004dc4:	4613      	mov	r3, r2
20004dc6:	4602      	mov	r2, r0
20004dc8:	73fa      	strb	r2, [r7, #15]
20004dca:	71fb      	strb	r3, [r7, #7]

	pkt_t pkt;

	pkt.pkt_type = pktname;
20004dcc:	7bfb      	ldrb	r3, [r7, #15]
20004dce:	753b      	strb	r3, [r7, #20]
	pkt.pkt_data = pktdata;
20004dd0:	68bb      	ldr	r3, [r7, #8]
20004dd2:	61bb      	str	r3, [r7, #24]
	pkt.pkt_size = pktsize;
20004dd4:	79fb      	ldrb	r3, [r7, #7]
20004dd6:	773b      	strb	r3, [r7, #28]

//	xQueueSend(Data_PKT_Queue, &pkt, 0);

	// Storing the packets
	if(pkt_stream[pktname].rate != 0){
20004dd8:	7bf9      	ldrb	r1, [r7, #15]
20004dda:	f24e 1294 	movw	r2, #57748	; 0xe194
20004dde:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004de2:	460b      	mov	r3, r1
20004de4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20004de8:	440b      	add	r3, r1
20004dea:	ea4f 0343 	mov.w	r3, r3, lsl #1
20004dee:	4413      	add	r3, r2
20004df0:	f103 0310 	add.w	r3, r3, #16
20004df4:	881b      	ldrh	r3, [r3, #0]
20004df6:	2b00      	cmp	r3, #0
20004df8:	d011      	beq.n	20004e1e <vGetPktStruct+0x62>
		xQueueSend(Data_PKT_Queue, &pkt , 0);
20004dfa:	f24e 434c 	movw	r3, #58444	; 0xe44c
20004dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e02:	681a      	ldr	r2, [r3, #0]
20004e04:	f107 0314 	add.w	r3, r7, #20
20004e08:	4610      	mov	r0, r2
20004e0a:	4619      	mov	r1, r3
20004e0c:	f04f 0200 	mov.w	r2, #0
20004e10:	f04f 0300 	mov.w	r3, #0
20004e14:	f7fc fcc6 	bl	200017a4 <xQueueGenericSend>
		vtlm_sender();
20004e18:	f000 f926 	bl	20005068 <vtlm_sender>
20004e1c:	e00e      	b.n	20004e3c <vGetPktStruct+0x80>
	}
	else{
		xQueueSend(Store_PKT_Queue, &pkt, 0);
20004e1e:	f24e 4318 	movw	r3, #58392	; 0xe418
20004e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e26:	681a      	ldr	r2, [r3, #0]
20004e28:	f107 0314 	add.w	r3, r7, #20
20004e2c:	4610      	mov	r0, r2
20004e2e:	4619      	mov	r1, r3
20004e30:	f04f 0200 	mov.w	r2, #0
20004e34:	f04f 0300 	mov.w	r3, #0
20004e38:	f7fc fcb4 	bl	200017a4 <xQueueGenericSend>
	}

}
20004e3c:	f107 0720 	add.w	r7, r7, #32
20004e40:	46bd      	mov	sp, r7
20004e42:	bd80      	pop	{r7, pc}

20004e44 <vtlm_task>:

void vtlm_task(TimerHandle_t exp_timer){
20004e44:	b580      	push	{r7, lr}
20004e46:	b084      	sub	sp, #16
20004e48:	af00      	add	r7, sp, #0
20004e4a:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;  // Try to generalised this timer callback function. Also combine the tlm_task and the tlm_sender task.
20004e4c:	f04f 0300 	mov.w	r3, #0
20004e50:	817b      	strh	r3, [r7, #10]
	uint16_t* t_id;
	t_id = (uint16_t* )pvTimerGetTimerID(exp_timer);
20004e52:	6878      	ldr	r0, [r7, #4]
20004e54:	f7ff f874 	bl	20003f40 <pvTimerGetTimerID>
20004e58:	4603      	mov	r3, r0
20004e5a:	60fb      	str	r3, [r7, #12]
//
//	if(pkt_stream->pkt_timer_id == pkt_stream->pkt.pkt_type){
//
//	}

	if(t_id == 0){
20004e5c:	68fb      	ldr	r3, [r7, #12]
20004e5e:	2b00      	cmp	r3, #0
20004e60:	d17d      	bne.n	20004f5e <vtlm_task+0x11a>
		hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
20004e62:	f24e 4328 	movw	r3, #58408	; 0xe428
20004e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e6a:	681b      	ldr	r3, [r3, #0]
20004e6c:	f04f 0200 	mov.w	r2, #0
20004e70:	f042 0208 	orr.w	r2, r2, #8
20004e74:	701a      	strb	r2, [r3, #0]
20004e76:	f04f 0200 	mov.w	r2, #0
20004e7a:	f042 0201 	orr.w	r2, r2, #1
20004e7e:	705a      	strb	r2, [r3, #1]
		hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004e80:	f24e 4328 	movw	r3, #58408	; 0xe428
20004e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e88:	681a      	ldr	r2, [r3, #0]
20004e8a:	897b      	ldrh	r3, [r7, #10]
20004e8c:	f103 0301 	add.w	r3, r3, #1
20004e90:	817b      	strh	r3, [r7, #10]
20004e92:	897b      	ldrh	r3, [r7, #10]
20004e94:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004e98:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004e9c:	b29b      	uxth	r3, r3
20004e9e:	b29b      	uxth	r3, r3
20004ea0:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004ea4:	b299      	uxth	r1, r3
20004ea6:	897b      	ldrh	r3, [r7, #10]
20004ea8:	f103 0301 	add.w	r3, r3, #1
20004eac:	817b      	strh	r3, [r7, #10]
20004eae:	897b      	ldrh	r3, [r7, #10]
20004eb0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004eb4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004eb8:	b29b      	uxth	r3, r3
20004eba:	b29b      	uxth	r3, r3
20004ebc:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004ec0:	b29b      	uxth	r3, r3
20004ec2:	ea41 0303 	orr.w	r3, r1, r3
20004ec6:	b29b      	uxth	r3, r3
20004ec8:	b29b      	uxth	r3, r3
20004eca:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004ece:	f04f 0000 	mov.w	r0, #0
20004ed2:	ea40 0101 	orr.w	r1, r0, r1
20004ed6:	7091      	strb	r1, [r2, #2]
20004ed8:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004edc:	b29b      	uxth	r3, r3
20004ede:	f04f 0100 	mov.w	r1, #0
20004ee2:	ea41 0303 	orr.w	r3, r1, r3
20004ee6:	70d3      	strb	r3, [r2, #3]
		hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
20004ee8:	f24e 4328 	movw	r3, #58408	; 0xe428
20004eec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ef0:	681b      	ldr	r3, [r3, #0]
20004ef2:	f04f 0200 	mov.w	r2, #0
20004ef6:	711a      	strb	r2, [r3, #4]
20004ef8:	f04f 0200 	mov.w	r2, #0
20004efc:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
20004f00:	715a      	strb	r2, [r3, #5]
		hk_pkt->ccsds_s1 = 0;
20004f02:	f24e 4328 	movw	r3, #58408	; 0xe428
20004f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f0a:	681b      	ldr	r3, [r3, #0]
20004f0c:	f04f 0200 	mov.w	r2, #0
20004f10:	719a      	strb	r2, [r3, #6]
20004f12:	f04f 0200 	mov.w	r2, #0
20004f16:	71da      	strb	r2, [r3, #7]
20004f18:	f04f 0200 	mov.w	r2, #0
20004f1c:	721a      	strb	r2, [r3, #8]
20004f1e:	f04f 0200 	mov.w	r2, #0
20004f22:	725a      	strb	r2, [r3, #9]
		hk_pkt->ccsds_s2 = 0;
20004f24:	f24e 4328 	movw	r3, #58408	; 0xe428
20004f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f2c:	681b      	ldr	r3, [r3, #0]
20004f2e:	f04f 0200 	mov.w	r2, #0
20004f32:	729a      	strb	r2, [r3, #10]
20004f34:	f04f 0200 	mov.w	r2, #0
20004f38:	72da      	strb	r2, [r3, #11]
20004f3a:	f04f 0200 	mov.w	r2, #0
20004f3e:	731a      	strb	r2, [r3, #12]
20004f40:	f04f 0200 	mov.w	r2, #0
20004f44:	735a      	strb	r2, [r3, #13]

		vGetPktStruct( hk, (void*) hk_pkt, HK_PKT_LENGTH);
20004f46:	f24e 4328 	movw	r3, #58408	; 0xe428
20004f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f4e:	681b      	ldr	r3, [r3, #0]
20004f50:	f04f 0000 	mov.w	r0, #0
20004f54:	4619      	mov	r1, r3
20004f56:	f04f 022e 	mov.w	r2, #46	; 0x2e
20004f5a:	f7ff ff2f 	bl	20004dbc <vGetPktStruct>
	}
	if(t_id == 1){
20004f5e:	68fb      	ldr	r3, [r7, #12]
20004f60:	2b01      	cmp	r3, #1
20004f62:	d17d      	bne.n	20005060 <vtlm_task+0x21c>
		pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
20004f64:	f24e 4350 	movw	r3, #58448	; 0xe450
20004f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f6c:	681b      	ldr	r3, [r3, #0]
20004f6e:	f04f 0200 	mov.w	r2, #0
20004f72:	f042 0208 	orr.w	r2, r2, #8
20004f76:	701a      	strb	r2, [r3, #0]
20004f78:	f04f 0200 	mov.w	r2, #0
20004f7c:	f042 0202 	orr.w	r2, r2, #2
20004f80:	705a      	strb	r2, [r3, #1]
		pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004f82:	f24e 4350 	movw	r3, #58448	; 0xe450
20004f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f8a:	681a      	ldr	r2, [r3, #0]
20004f8c:	897b      	ldrh	r3, [r7, #10]
20004f8e:	f103 0301 	add.w	r3, r3, #1
20004f92:	817b      	strh	r3, [r7, #10]
20004f94:	897b      	ldrh	r3, [r7, #10]
20004f96:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004f9a:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004f9e:	b29b      	uxth	r3, r3
20004fa0:	b29b      	uxth	r3, r3
20004fa2:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004fa6:	b299      	uxth	r1, r3
20004fa8:	897b      	ldrh	r3, [r7, #10]
20004faa:	f103 0301 	add.w	r3, r3, #1
20004fae:	817b      	strh	r3, [r7, #10]
20004fb0:	897b      	ldrh	r3, [r7, #10]
20004fb2:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004fb6:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004fba:	b29b      	uxth	r3, r3
20004fbc:	b29b      	uxth	r3, r3
20004fbe:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004fc2:	b29b      	uxth	r3, r3
20004fc4:	ea41 0303 	orr.w	r3, r1, r3
20004fc8:	b29b      	uxth	r3, r3
20004fca:	b29b      	uxth	r3, r3
20004fcc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004fd0:	f04f 0000 	mov.w	r0, #0
20004fd4:	ea40 0101 	orr.w	r1, r0, r1
20004fd8:	7091      	strb	r1, [r2, #2]
20004fda:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004fde:	b29b      	uxth	r3, r3
20004fe0:	f04f 0100 	mov.w	r1, #0
20004fe4:	ea41 0303 	orr.w	r3, r1, r3
20004fe8:	70d3      	strb	r3, [r2, #3]
		pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
20004fea:	f24e 4350 	movw	r3, #58448	; 0xe450
20004fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ff2:	681b      	ldr	r3, [r3, #0]
20004ff4:	f04f 0200 	mov.w	r2, #0
20004ff8:	711a      	strb	r2, [r3, #4]
20004ffa:	f04f 0200 	mov.w	r2, #0
20004ffe:	f042 021e 	orr.w	r2, r2, #30
20005002:	715a      	strb	r2, [r3, #5]

		pld_pkt->ccsds_s1 = 0;
20005004:	f24e 4350 	movw	r3, #58448	; 0xe450
20005008:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000500c:	681b      	ldr	r3, [r3, #0]
2000500e:	f04f 0200 	mov.w	r2, #0
20005012:	719a      	strb	r2, [r3, #6]
20005014:	f04f 0200 	mov.w	r2, #0
20005018:	71da      	strb	r2, [r3, #7]
2000501a:	f04f 0200 	mov.w	r2, #0
2000501e:	721a      	strb	r2, [r3, #8]
20005020:	f04f 0200 	mov.w	r2, #0
20005024:	725a      	strb	r2, [r3, #9]
		pld_pkt->ccsds_s2 = 0;
20005026:	f24e 4350 	movw	r3, #58448	; 0xe450
2000502a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000502e:	681b      	ldr	r3, [r3, #0]
20005030:	f04f 0200 	mov.w	r2, #0
20005034:	729a      	strb	r2, [r3, #10]
20005036:	f04f 0200 	mov.w	r2, #0
2000503a:	72da      	strb	r2, [r3, #11]
2000503c:	f04f 0200 	mov.w	r2, #0
20005040:	731a      	strb	r2, [r3, #12]
20005042:	f04f 0200 	mov.w	r2, #0
20005046:	735a      	strb	r2, [r3, #13]

		vGetPktStruct(pld, (void* )pld_pkt, PLD_PKT_LENGTH);
20005048:	f24e 4350 	movw	r3, #58448	; 0xe450
2000504c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005050:	681b      	ldr	r3, [r3, #0]
20005052:	f04f 0001 	mov.w	r0, #1
20005056:	4619      	mov	r1, r3
20005058:	f04f 021e 	mov.w	r2, #30
2000505c:	f7ff feae 	bl	20004dbc <vGetPktStruct>
	}
	else{

	}
}
20005060:	f107 0710 	add.w	r7, r7, #16
20005064:	46bd      	mov	sp, r7
20005066:	bd80      	pop	{r7, pc}

20005068 <vtlm_sender>:


void vtlm_sender(void* d){
20005068:	b580      	push	{r7, lr}
2000506a:	b086      	sub	sp, #24
2000506c:	af00      	add	r7, sp, #0
2000506e:	6078      	str	r0, [r7, #4]

	pkt_t pkt_send;

//	pkt_stream(pkt_send);

	xQueueReceive(Data_PKT_Queue, &pkt_send, portMAX_DELAY);
20005070:	f24e 434c 	movw	r3, #58444	; 0xe44c
20005074:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005078:	681a      	ldr	r2, [r3, #0]
2000507a:	f107 030c 	add.w	r3, r7, #12
2000507e:	4610      	mov	r0, r2
20005080:	4619      	mov	r1, r3
20005082:	f04f 32ff 	mov.w	r2, #4294967295
20005086:	f04f 0300 	mov.w	r3, #0
2000508a:	f7fc fd45 	bl	20001b18 <xQueueGenericReceive>

	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);
2000508e:	693b      	ldr	r3, [r7, #16]
20005090:	461a      	mov	r2, r3
20005092:	7d3b      	ldrb	r3, [r7, #20]
20005094:	f24e 409c 	movw	r0, #58524	; 0xe49c
20005098:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000509c:	4611      	mov	r1, r2
2000509e:	461a      	mov	r2, r3
200050a0:	f000 fb50 	bl	20005744 <MSS_UART_polled_tx>
//
//
//	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);


}
200050a4:	f107 0718 	add.w	r7, r7, #24
200050a8:	46bd      	mov	sp, r7
200050aa:	bd80      	pop	{r7, pc}

200050ac <irq_tsk_func>:
	}

}


void irq_tsk_func(void* f_param){
200050ac:	b580      	push	{r7, lr}
200050ae:	b084      	sub	sp, #16
200050b0:	af00      	add	r7, sp, #0
200050b2:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue;

	while(1){

		xTaskNotifyWait(0x00, 0, &ulNotifiedValue, portMAX_DELAY);
200050b4:	f107 030c 	add.w	r3, r7, #12
200050b8:	f04f 0000 	mov.w	r0, #0
200050bc:	f04f 0100 	mov.w	r1, #0
200050c0:	461a      	mov	r2, r3
200050c2:	f04f 33ff 	mov.w	r3, #4294967295
200050c6:	f7fe f9e1 	bl	2000348c <xTaskNotifyWait>
		ulTaskNotifyTake(pdTRUE, 1);
200050ca:	f04f 0001 	mov.w	r0, #1
200050ce:	f04f 0101 	mov.w	r1, #1
200050d2:	f7fe f97b 	bl	200033cc <ulTaskNotifyTake>
		rx_cmd = (rx_cmd_t* ) f_param;
200050d6:	687a      	ldr	r2, [r7, #4]
200050d8:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
200050dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050e0:	601a      	str	r2, [r3, #0]


		if(cmd_valid(rx_cmd)){
200050e2:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
200050e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050ea:	681b      	ldr	r3, [r3, #0]
200050ec:	4618      	mov	r0, r3
200050ee:	f7fb ffab 	bl	20001048 <cmd_valid>
200050f2:	4603      	mov	r3, r0
200050f4:	2b00      	cmp	r3, #0
200050f6:	d015      	beq.n	20005124 <irq_tsk_func+0x78>
			cmd_engine(rx_cmd);
200050f8:	f24e 13c0 	movw	r3, #57792	; 0xe1c0
200050fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005100:	681b      	ldr	r3, [r3, #0]
20005102:	4618      	mov	r0, r3
20005104:	f7fc f88a 	bl	2000121c <cmd_engine>
			command_cnt++;
20005108:	f24e 4314 	movw	r3, #58388	; 0xe414
2000510c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005110:	881b      	ldrh	r3, [r3, #0]
20005112:	f103 0301 	add.w	r3, r3, #1
20005116:	b29a      	uxth	r2, r3
20005118:	f24e 4314 	movw	r3, #58388	; 0xe414
2000511c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005120:	801a      	strh	r2, [r3, #0]
		else{
			command_reject_cnt++;
		}


	}
20005122:	e7c7      	b.n	200050b4 <irq_tsk_func+0x8>
		if(cmd_valid(rx_cmd)){
			cmd_engine(rx_cmd);
			command_cnt++;
		}
		else{
			command_reject_cnt++;
20005124:	f24e 4354 	movw	r3, #58452	; 0xe454
20005128:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000512c:	881b      	ldrh	r3, [r3, #0]
2000512e:	f103 0301 	add.w	r3, r3, #1
20005132:	b29a      	uxth	r2, r3
20005134:	f24e 4354 	movw	r3, #58452	; 0xe454
20005138:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000513c:	801a      	strh	r2, [r3, #0]
		}


	}
2000513e:	e7b9      	b.n	200050b4 <irq_tsk_func+0x8>

20005140 <uart0_rx_handler>:
}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
20005140:	b580      	push	{r7, lr}
20005142:	b084      	sub	sp, #16
20005144:	af00      	add	r7, sp, #0
20005146:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer, 8);
20005148:	6878      	ldr	r0, [r7, #4]
2000514a:	f64d 5150 	movw	r1, #56656	; 0xdd50
2000514e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005152:	f04f 0208 	mov.w	r2, #8
20005156:	f000 fb67 	bl	20005828 <MSS_UART_get_rx>
2000515a:	4602      	mov	r2, r0
2000515c:	f64d 538c 	movw	r3, #56716	; 0xdd8c
20005160:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005164:	601a      	str	r2, [r3, #0]

	BaseType_t xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
20005166:	f04f 0300 	mov.w	r3, #0
2000516a:	60fb      	str	r3, [r7, #12]

	 vTaskNotifyGiveFromISR(uart_irq, &xHigherPriorityTaskWoken);
2000516c:	f64d 43ac 	movw	r3, #56492	; 0xdcac
20005170:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005174:	681a      	ldr	r2, [r3, #0]
20005176:	f107 030c 	add.w	r3, r7, #12
2000517a:	4610      	mov	r0, r2
2000517c:	4619      	mov	r1, r3
2000517e:	f7fe f9fd 	bl	2000357c <vTaskNotifyGiveFromISR>

	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
20005182:	68fb      	ldr	r3, [r7, #12]
20005184:	2b00      	cmp	r3, #0
20005186:	d00a      	beq.n	2000519e <uart0_rx_handler+0x5e>
20005188:	f64e 5304 	movw	r3, #60676	; 0xed04
2000518c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20005190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20005194:	601a      	str	r2, [r3, #0]
20005196:	f3bf 8f4f 	dsb	sy
2000519a:	f3bf 8f6f 	isb	sy

}
2000519e:	f107 0710 	add.w	r7, r7, #16
200051a2:	46bd      	mov	sp, r7
200051a4:	bd80      	pop	{r7, pc}
200051a6:	bf00      	nop

200051a8 <demo_tasks>:
//	 }
//}



void demo_tasks(void){
200051a8:	b590      	push	{r4, r7, lr}
200051aa:	b08d      	sub	sp, #52	; 0x34
200051ac:	af02      	add	r7, sp, #8

		uint8_t REF_DATA[3] = {0x38, 0x00, 0x00};
200051ae:	f04f 0338 	mov.w	r3, #56	; 0x38
200051b2:	743b      	strb	r3, [r7, #16]
200051b4:	f04f 0300 	mov.w	r3, #0
200051b8:	747b      	strb	r3, [r7, #17]
200051ba:	f04f 0300 	mov.w	r3, #0
200051be:	74bb      	strb	r3, [r7, #18]
		uint8_t PWR[3] = {0x20, 0x00, 0x0F};
200051c0:	f647 02fc 	movw	r2, #30972	; 0x78fc
200051c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
200051c8:	f107 030c 	add.w	r3, r7, #12
200051cc:	6812      	ldr	r2, [r2, #0]
200051ce:	4611      	mov	r1, r2
200051d0:	8019      	strh	r1, [r3, #0]
200051d2:	f103 0302 	add.w	r3, r3, #2
200051d6:	ea4f 4212 	mov.w	r2, r2, lsr #16
200051da:	701a      	strb	r2, [r3, #0]
		uint8_t config[3] = {0x30, 0x00, 0x01};
200051dc:	f647 1200 	movw	r2, #30976	; 0x7900
200051e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
200051e4:	f107 0308 	add.w	r3, r7, #8
200051e8:	6812      	ldr	r2, [r2, #0]
200051ea:	4611      	mov	r1, r2
200051ec:	8019      	strh	r1, [r3, #0]
200051ee:	f103 0302 	add.w	r3, r3, #2
200051f2:	ea4f 4212 	mov.w	r2, r2, lsr #16
200051f6:	701a      	strb	r2, [r3, #0]
		uint8_t sw_clear[3] = {0x28, 0x00, 0x01};
200051f8:	f647 1204 	movw	r2, #30980	; 0x7904
200051fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005200:	f107 0304 	add.w	r3, r7, #4
20005204:	6812      	ldr	r2, [r2, #0]
20005206:	4611      	mov	r1, r2
20005208:	8019      	strh	r1, [r3, #0]
2000520a:	f103 0302 	add.w	r3, r3, #2
2000520e:	ea4f 4212 	mov.w	r2, r2, lsr #16
20005212:	701a      	strb	r2, [r3, #0]
		i2c_status_t status;

//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
20005214:	f24e 0390 	movw	r3, #57488	; 0xe090
20005218:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000521c:	617b      	str	r3, [r7, #20]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
2000521e:	f647 1338 	movw	r3, #31032	; 0x7938
20005222:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005226:	61bb      	str	r3, [r7, #24]
		imu_ptr->init = &init;
20005228:	697a      	ldr	r2, [r7, #20]
2000522a:	f640 7349 	movw	r3, #3913	; 0xf49
2000522e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005232:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
20005234:	697b      	ldr	r3, [r7, #20]
20005236:	681b      	ldr	r3, [r3, #0]
20005238:	f04f 0000 	mov.w	r0, #0
2000523c:	69b9      	ldr	r1, [r7, #24]
2000523e:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
20005240:	f24e 308c 	movw	r0, #58252	; 0xe38c
20005244:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005248:	f244 0100 	movw	r1, #16384	; 0x4000
2000524c:	f2c5 0100 	movt	r1, #20480	; 0x5000
20005250:	f04f 0221 	mov.w	r2, #33	; 0x21
20005254:	f04f 0300 	mov.w	r3, #0
20005258:	f000 ff76 	bl	20006148 <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
2000525c:	f24e 0390 	movw	r3, #57488	; 0xe090
20005260:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005264:	61fb      	str	r3, [r7, #28]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
20005266:	f647 1358 	movw	r3, #31064	; 0x7958
2000526a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000526e:	623b      	str	r3, [r7, #32]
		vc_ptr->init = &init;
20005270:	69fa      	ldr	r2, [r7, #28]
20005272:	f640 7349 	movw	r3, #3913	; 0xf49
20005276:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000527a:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
2000527c:	69fb      	ldr	r3, [r7, #28]
2000527e:	681b      	ldr	r3, [r3, #0]
20005280:	f04f 000a 	mov.w	r0, #10
20005284:	6a39      	ldr	r1, [r7, #32]
20005286:	4798      	blx	r3

		Data_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t));  //Common queue for all packets data storage
20005288:	f04f 0003 	mov.w	r0, #3
2000528c:	f04f 010c 	mov.w	r1, #12
20005290:	f04f 0200 	mov.w	r2, #0
20005294:	f7fc f9e8 	bl	20001668 <xQueueGenericCreate>
20005298:	4602      	mov	r2, r0
2000529a:	f24e 434c 	movw	r3, #58444	; 0xe44c
2000529e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052a2:	601a      	str	r2, [r3, #0]
		Store_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t)); // Queue from which the data will be stored to the storage
200052a4:	f04f 0003 	mov.w	r0, #3
200052a8:	f04f 010c 	mov.w	r1, #12
200052ac:	f04f 0200 	mov.w	r2, #0
200052b0:	f7fc f9da 	bl	20001668 <xQueueGenericCreate>
200052b4:	4602      	mov	r2, r0
200052b6:	f24e 4318 	movw	r3, #58392	; 0xe418
200052ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052be:	601a      	str	r2, [r3, #0]

		set_pktRate(hk, HK_PKT_PERIOD);   //Set all the default packet rate
200052c0:	f04f 0000 	mov.w	r0, #0
200052c4:	f04f 0103 	mov.w	r1, #3
200052c8:	f7fb f8cc 	bl	20000464 <set_pktRate>
		set_pktRate(pld, PLD_PKT_PERIOD);
200052cc:	f04f 0001 	mov.w	r0, #1
200052d0:	f04f 010a 	mov.w	r1, #10
200052d4:	f7fb f8c6 	bl	20000464 <set_pktRate>
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		NVIC_EnableIRQ(UART0_IRQn);
200052d8:	f04f 000a 	mov.w	r0, #10
200052dc:	f7ff fab4 	bl	20004848 <NVIC_EnableIRQ>
		NVIC_SetPriority(UART0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1);
200052e0:	f04f 000a 	mov.w	r0, #10
200052e4:	f04f 019f 	mov.w	r1, #159	; 0x9f
200052e8:	f7ff faca 	bl	20004880 <NVIC_SetPriority>


		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
200052ec:	f24e 409c 	movw	r0, #58524	; 0xe49c
200052f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200052f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
200052f8:	f04f 0203 	mov.w	r2, #3
200052fc:	f000 f9e0 	bl	200056c0 <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_FIFO_EIGHT_BYTES);
20005300:	f24e 409c 	movw	r0, #58524	; 0xe49c
20005304:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005308:	f245 1141 	movw	r1, #20801	; 0x5141
2000530c:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005310:	f04f 0280 	mov.w	r2, #128	; 0x80
20005314:	f000 faf6 	bl	20005904 <MSS_UART_set_rx_handler>
//		init_demo(imu);
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;


	 xMutex = xSemaphoreCreateMutex();
20005318:	f04f 0001 	mov.w	r0, #1
2000531c:	f7fc fa26 	bl	2000176c <xQueueCreateMutex>
20005320:	4602      	mov	r2, r0
20005322:	f24e 4338 	movw	r3, #58424	; 0xe438
20005326:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000532a:	601a      	str	r2, [r3, #0]
//	 xTaskCreate(get_imu_data, "IMU", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(get_vc_data, "VC", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(pktmngr, "Packet", configMINIMAL_STACK_SIZE, (void*) data, 1, NULL);


		feed_get_hk_data = xTaskCreate(get_hk_data, "HK", configMINIMAL_STACK_SIZE, (void*)data , 2, &get_hk_pkt_handle);
2000532c:	f04f 0302 	mov.w	r3, #2
20005330:	9300      	str	r3, [sp, #0]
20005332:	f24e 4344 	movw	r3, #58436	; 0xe444
20005336:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000533a:	9301      	str	r3, [sp, #4]
2000533c:	f644 00dd 	movw	r0, #18653	; 0x48dd
20005340:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005344:	f647 01d8 	movw	r1, #30936	; 0x78d8
20005348:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000534c:	f04f 0250 	mov.w	r2, #80	; 0x50
20005350:	f64d 5390 	movw	r3, #56720	; 0xdd90
20005354:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005358:	f7fc fe78 	bl	2000204c <xTaskCreate>
2000535c:	4602      	mov	r2, r0
2000535e:	f24e 433c 	movw	r3, #58428	; 0xe43c
20005362:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005366:	601a      	str	r2, [r3, #0]

		feed_get_payload_data = xTaskCreate(get_pld_data, "Payload", configMINIMAL_STACK_SIZE, (void* )data, 1, &get_pld_pkt_handle);
20005368:	f04f 0301 	mov.w	r3, #1
2000536c:	9300      	str	r3, [sp, #0]
2000536e:	f24e 4320 	movw	r3, #58400	; 0xe420
20005372:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005376:	9301      	str	r3, [sp, #4]
20005378:	f644 40e9 	movw	r0, #19689	; 0x4ce9
2000537c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005380:	f647 01dc 	movw	r1, #30940	; 0x78dc
20005384:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005388:	f04f 0250 	mov.w	r2, #80	; 0x50
2000538c:	f64d 5390 	movw	r3, #56720	; 0xdd90
20005390:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005394:	f7fc fe5a 	bl	2000204c <xTaskCreate>
20005398:	4602      	mov	r2, r0
2000539a:	f24e 4348 	movw	r3, #58440	; 0xe448
2000539e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053a2:	601a      	str	r2, [r3, #0]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);
200053a4:	f04f 0303 	mov.w	r3, #3
200053a8:	9300      	str	r3, [sp, #0]
200053aa:	f64d 43ac 	movw	r3, #56492	; 0xdcac
200053ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053b2:	9301      	str	r3, [sp, #4]
200053b4:	f245 00ad 	movw	r0, #20653	; 0x50ad
200053b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200053bc:	f647 01e4 	movw	r1, #30948	; 0x78e4
200053c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
200053c4:	f04f 0250 	mov.w	r2, #80	; 0x50
200053c8:	f64d 5350 	movw	r3, #56656	; 0xdd50
200053cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053d0:	f7fc fe3c 	bl	2000204c <xTaskCreate>

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
200053d4:	f04f 0300 	mov.w	r3, #0
200053d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
200053dc:	e08e      	b.n	200054fc <demo_tasks+0x354>
			if(pkt_stream[i].rate != DEFAULT_ZERO_TIMER_PERIOD* 1000){
200053de:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
200053e2:	f24e 1294 	movw	r2, #57748	; 0xe194
200053e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
200053ea:	460b      	mov	r3, r1
200053ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200053f0:	440b      	add	r3, r1
200053f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
200053f6:	4413      	add	r3, r2
200053f8:	f103 0310 	add.w	r3, r3, #16
200053fc:	881a      	ldrh	r2, [r3, #0]
200053fe:	f242 7310 	movw	r3, #10000	; 0x2710
20005402:	429a      	cmp	r2, r3
20005404:	d045      	beq.n	20005492 <demo_tasks+0x2ea>
				pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )i, vtlm_task);
20005406:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
2000540a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
2000540e:	f24e 1294 	movw	r2, #57748	; 0xe194
20005412:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005416:	460b      	mov	r3, r1
20005418:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000541c:	440b      	add	r3, r1
2000541e:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005422:	4413      	add	r3, r2
20005424:	f103 0310 	add.w	r3, r3, #16
20005428:	881b      	ldrh	r3, [r3, #0]
2000542a:	4618      	mov	r0, r3
2000542c:	f7fb fdf4 	bl	20001018 <xMsToTicks>
20005430:	4602      	mov	r2, r0
20005432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005436:	469c      	mov	ip, r3
20005438:	f644 6345 	movw	r3, #20037	; 0x4e45
2000543c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005440:	9300      	str	r3, [sp, #0]
20005442:	f647 00f0 	movw	r0, #30960	; 0x78f0
20005446:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000544a:	4611      	mov	r1, r2
2000544c:	f04f 0201 	mov.w	r2, #1
20005450:	4663      	mov	r3, ip
20005452:	f7fe f9fb 	bl	2000384c <xTimerCreate>
20005456:	4602      	mov	r2, r0
20005458:	f24e 13b8 	movw	r3, #57784	; 0xe1b8
2000545c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005460:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	//			vTimerSetTimerID(pkt_timer[i], (void* )i);
				xTimerStart(pkt_timer[i], 0);
20005464:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
20005468:	f24e 13b8 	movw	r3, #57784	; 0xe1b8
2000546c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005470:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
20005474:	f7fd f9d8 	bl	20002828 <xTaskGetTickCount>
20005478:	4603      	mov	r3, r0
2000547a:	f04f 0200 	mov.w	r2, #0
2000547e:	9200      	str	r2, [sp, #0]
20005480:	4620      	mov	r0, r4
20005482:	f04f 0101 	mov.w	r1, #1
20005486:	461a      	mov	r2, r3
20005488:	f04f 0300 	mov.w	r3, #0
2000548c:	f7fe fa30 	bl	200038f0 <xTimerGenericCommand>
20005490:	e02e      	b.n	200054f0 <demo_tasks+0x348>
			}
			else{
				pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )i, vtlm_task);
20005492:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
20005496:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
2000549a:	f24e 1294 	movw	r2, #57748	; 0xe194
2000549e:	f2c2 0200 	movt	r2, #8192	; 0x2000
200054a2:	460b      	mov	r3, r1
200054a4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200054a8:	440b      	add	r3, r1
200054aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
200054ae:	4413      	add	r3, r2
200054b0:	f103 0310 	add.w	r3, r3, #16
200054b4:	881b      	ldrh	r3, [r3, #0]
200054b6:	4618      	mov	r0, r3
200054b8:	f7fb fdae 	bl	20001018 <xMsToTicks>
200054bc:	4602      	mov	r2, r0
200054be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200054c2:	469c      	mov	ip, r3
200054c4:	f644 6345 	movw	r3, #20037	; 0x4e45
200054c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200054cc:	9300      	str	r3, [sp, #0]
200054ce:	f647 00f0 	movw	r0, #30960	; 0x78f0
200054d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200054d6:	4611      	mov	r1, r2
200054d8:	f04f 0201 	mov.w	r2, #1
200054dc:	4663      	mov	r3, ip
200054de:	f7fe f9b5 	bl	2000384c <xTimerCreate>
200054e2:	4602      	mov	r2, r0
200054e4:	f24e 13b8 	movw	r3, #57784	; 0xe1b8
200054e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200054ec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
200054f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
200054f4:	f103 0301 	add.w	r3, r3, #1
200054f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
200054fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005500:	2b01      	cmp	r3, #1
20005502:	f67f af6c 	bls.w	200053de <demo_tasks+0x236>
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
20005506:	f7fd f853 	bl	200025b0 <vTaskStartScheduler>

}
2000550a:	f107 072c 	add.w	r7, r7, #44	; 0x2c
2000550e:	46bd      	mov	sp, r7
20005510:	bd90      	pop	{r4, r7, pc}
20005512:	bf00      	nop

20005514 <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
20005514:	b580      	push	{r7, lr}
20005516:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
20005518:	f24e 10d4 	movw	r0, #57812	; 0xe1d4
2000551c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005520:	f001 f838 	bl	20006594 <I2C_isr>
}
20005524:	bd80      	pop	{r7, pc}
20005526:	bf00      	nop

20005528 <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
20005528:	b580      	push	{r7, lr}
2000552a:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
2000552c:	f24e 2040 	movw	r0, #57920	; 0xe240
20005530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005534:	f001 f82e 	bl	20006594 <I2C_isr>
}
20005538:	bd80      	pop	{r7, pc}
2000553a:	bf00      	nop

2000553c <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
2000553c:	b580      	push	{r7, lr}
2000553e:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
20005540:	f64d 40e4 	movw	r0, #56548	; 0xdce4
20005544:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005548:	f001 f824 	bl	20006594 <I2C_isr>
}
2000554c:	bd80      	pop	{r7, pc}
2000554e:	bf00      	nop

20005550 <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
20005550:	b580      	push	{r7, lr}
20005552:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
20005554:	f24e 3018 	movw	r0, #58136	; 0xe318
20005558:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000555c:	f001 f81a 	bl	20006594 <I2C_isr>
}
20005560:	bd80      	pop	{r7, pc}
20005562:	bf00      	nop

20005564 <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
20005564:	b580      	push	{r7, lr}
20005566:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
20005568:	f24e 308c 	movw	r0, #58252	; 0xe38c
2000556c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005570:	f001 f810 	bl	20006594 <I2C_isr>
}
20005574:	bd80      	pop	{r7, pc}
20005576:	bf00      	nop

20005578 <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
20005578:	b580      	push	{r7, lr}
2000557a:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
2000557c:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
20005580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005584:	f001 f806 	bl	20006594 <I2C_isr>
}
20005588:	bd80      	pop	{r7, pc}
2000558a:	bf00      	nop

2000558c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000558c:	b480      	push	{r7}
2000558e:	b083      	sub	sp, #12
20005590:	af00      	add	r7, sp, #0
20005592:	4603      	mov	r3, r0
20005594:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20005596:	f24e 1300 	movw	r3, #57600	; 0xe100
2000559a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000559e:	f997 2007 	ldrsb.w	r2, [r7, #7]
200055a2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200055a6:	79f9      	ldrb	r1, [r7, #7]
200055a8:	f001 011f 	and.w	r1, r1, #31
200055ac:	f04f 0001 	mov.w	r0, #1
200055b0:	fa00 f101 	lsl.w	r1, r0, r1
200055b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200055b8:	f107 070c 	add.w	r7, r7, #12
200055bc:	46bd      	mov	sp, r7
200055be:	bc80      	pop	{r7}
200055c0:	4770      	bx	lr
200055c2:	bf00      	nop

200055c4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200055c4:	b480      	push	{r7}
200055c6:	b083      	sub	sp, #12
200055c8:	af00      	add	r7, sp, #0
200055ca:	4603      	mov	r3, r0
200055cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200055ce:	f24e 1300 	movw	r3, #57600	; 0xe100
200055d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200055d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
200055da:	ea4f 1252 	mov.w	r2, r2, lsr #5
200055de:	79f9      	ldrb	r1, [r7, #7]
200055e0:	f001 011f 	and.w	r1, r1, #31
200055e4:	f04f 0001 	mov.w	r0, #1
200055e8:	fa00 f101 	lsl.w	r1, r0, r1
200055ec:	f102 0260 	add.w	r2, r2, #96	; 0x60
200055f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200055f4:	f107 070c 	add.w	r7, r7, #12
200055f8:	46bd      	mov	sp, r7
200055fa:	bc80      	pop	{r7}
200055fc:	4770      	bx	lr
200055fe:	bf00      	nop

20005600 <set_bit_reg8>:
static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005600:	b480      	push	{r7}
20005602:	b083      	sub	sp, #12
20005604:	af00      	add	r7, sp, #0
20005606:	6078      	str	r0, [r7, #4]
20005608:	460b      	mov	r3, r1
2000560a:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x1;
2000560c:	687b      	ldr	r3, [r7, #4]
2000560e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005612:	687b      	ldr	r3, [r7, #4]
20005614:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005618:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000561c:	ea4f 1343 	mov.w	r3, r3, lsl #5
20005620:	441a      	add	r2, r3
20005622:	78fb      	ldrb	r3, [r7, #3]
20005624:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005628:	4413      	add	r3, r2
2000562a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000562e:	f04f 0201 	mov.w	r2, #1
20005632:	601a      	str	r2, [r3, #0]
}
20005634:	f107 070c 	add.w	r7, r7, #12
20005638:	46bd      	mov	sp, r7
2000563a:	bc80      	pop	{r7}
2000563c:	4770      	bx	lr
2000563e:	bf00      	nop

20005640 <clear_bit_reg8>:
static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005640:	b480      	push	{r7}
20005642:	b083      	sub	sp, #12
20005644:	af00      	add	r7, sp, #0
20005646:	6078      	str	r0, [r7, #4]
20005648:	460b      	mov	r3, r1
2000564a:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x0;
2000564c:	687b      	ldr	r3, [r7, #4]
2000564e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005652:	687b      	ldr	r3, [r7, #4]
20005654:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005658:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000565c:	ea4f 1343 	mov.w	r3, r3, lsl #5
20005660:	441a      	add	r2, r3
20005662:	78fb      	ldrb	r3, [r7, #3]
20005664:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005668:	4413      	add	r3, r2
2000566a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000566e:	f04f 0200 	mov.w	r2, #0
20005672:	601a      	str	r2, [r3, #0]
}
20005674:	f107 070c 	add.w	r7, r7, #12
20005678:	46bd      	mov	sp, r7
2000567a:	bc80      	pop	{r7}
2000567c:	4770      	bx	lr
2000567e:	bf00      	nop

20005680 <read_bit_reg8>:
static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005680:	b480      	push	{r7}
20005682:	b083      	sub	sp, #12
20005684:	af00      	add	r7, sp, #0
20005686:	6078      	str	r0, [r7, #4]
20005688:	460b      	mov	r3, r1
2000568a:	70fb      	strb	r3, [r7, #3]
    return (HW_REG_BIT(reg,bit));
2000568c:	687b      	ldr	r3, [r7, #4]
2000568e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005692:	687b      	ldr	r3, [r7, #4]
20005694:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005698:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000569c:	ea4f 1343 	mov.w	r3, r3, lsl #5
200056a0:	441a      	add	r2, r3
200056a2:	78fb      	ldrb	r3, [r7, #3]
200056a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200056a8:	4413      	add	r3, r2
200056aa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200056ae:	681b      	ldr	r3, [r3, #0]
200056b0:	b2db      	uxtb	r3, r3
}
200056b2:	4618      	mov	r0, r3
200056b4:	f107 070c 	add.w	r7, r7, #12
200056b8:	46bd      	mov	sp, r7
200056ba:	bc80      	pop	{r7}
200056bc:	4770      	bx	lr
200056be:	bf00      	nop

200056c0 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
200056c0:	b580      	push	{r7, lr}
200056c2:	b084      	sub	sp, #16
200056c4:	af00      	add	r7, sp, #0
200056c6:	60f8      	str	r0, [r7, #12]
200056c8:	60b9      	str	r1, [r7, #8]
200056ca:	4613      	mov	r3, r2
200056cc:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200056ce:	68fa      	ldr	r2, [r7, #12]
200056d0:	f24e 439c 	movw	r3, #58524	; 0xe49c
200056d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056d8:	429a      	cmp	r2, r3
200056da:	d007      	beq.n	200056ec <MSS_UART_init+0x2c>
200056dc:	68fa      	ldr	r2, [r7, #12]
200056de:	f24e 435c 	movw	r3, #58460	; 0xe45c
200056e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056e6:	429a      	cmp	r2, r3
200056e8:	d000      	beq.n	200056ec <MSS_UART_init+0x2c>
200056ea:	be00      	bkpt	0x0000

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
200056ec:	79fb      	ldrb	r3, [r7, #7]
200056ee:	68f8      	ldr	r0, [r7, #12]
200056f0:	68b9      	ldr	r1, [r7, #8]
200056f2:	461a      	mov	r2, r3
200056f4:	f000 fa56 	bl	20005ba4 <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
200056f8:	68fb      	ldr	r3, [r7, #12]
200056fa:	681b      	ldr	r3, [r3, #0]
200056fc:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005700:	4618      	mov	r0, r3
20005702:	f04f 0103 	mov.w	r1, #3
20005706:	f7ff ff9b 	bl	20005640 <clear_bit_reg8>

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
2000570a:	68fb      	ldr	r3, [r7, #12]
2000570c:	681b      	ldr	r3, [r3, #0]
2000570e:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005712:	4618      	mov	r0, r3
20005714:	f04f 0102 	mov.w	r1, #2
20005718:	f7ff ff92 	bl	20005640 <clear_bit_reg8>

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
2000571c:	68fb      	ldr	r3, [r7, #12]
2000571e:	681b      	ldr	r3, [r3, #0]
20005720:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005724:	4618      	mov	r0, r3
20005726:	f04f 0100 	mov.w	r1, #0
2000572a:	f7ff ff89 	bl	20005640 <clear_bit_reg8>

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
2000572e:	68fa      	ldr	r2, [r7, #12]
20005730:	f246 033d 	movw	r3, #24637	; 0x603d
20005734:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005738:	6253      	str	r3, [r2, #36]	; 0x24
}
2000573a:	f107 0710 	add.w	r7, r7, #16
2000573e:	46bd      	mov	sp, r7
20005740:	bd80      	pop	{r7, pc}
20005742:	bf00      	nop

20005744 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20005744:	b480      	push	{r7}
20005746:	b089      	sub	sp, #36	; 0x24
20005748:	af00      	add	r7, sp, #0
2000574a:	60f8      	str	r0, [r7, #12]
2000574c:	60b9      	str	r1, [r7, #8]
2000574e:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0u;
20005750:	f04f 0300 	mov.w	r3, #0
20005754:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005756:	68fa      	ldr	r2, [r7, #12]
20005758:	f24e 439c 	movw	r3, #58524	; 0xe49c
2000575c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005760:	429a      	cmp	r2, r3
20005762:	d007      	beq.n	20005774 <MSS_UART_polled_tx+0x30>
20005764:	68fa      	ldr	r2, [r7, #12]
20005766:	f24e 435c 	movw	r3, #58460	; 0xe45c
2000576a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000576e:	429a      	cmp	r2, r3
20005770:	d000      	beq.n	20005774 <MSS_UART_polled_tx+0x30>
20005772:	be00      	bkpt	0x0000
    ASSERT(pbuff != ( (uint8_t *)0));
20005774:	68bb      	ldr	r3, [r7, #8]
20005776:	2b00      	cmp	r3, #0
20005778:	d100      	bne.n	2000577c <MSS_UART_polled_tx+0x38>
2000577a:	be00      	bkpt	0x0000
    ASSERT(tx_size > 0u);
2000577c:	687b      	ldr	r3, [r7, #4]
2000577e:	2b00      	cmp	r3, #0
20005780:	d100      	bne.n	20005784 <MSS_UART_polled_tx+0x40>
20005782:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005784:	68fa      	ldr	r2, [r7, #12]
20005786:	f24e 439c 	movw	r3, #58524	; 0xe49c
2000578a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000578e:	429a      	cmp	r2, r3
20005790:	d006      	beq.n	200057a0 <MSS_UART_polled_tx+0x5c>
20005792:	68fa      	ldr	r2, [r7, #12]
20005794:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005798:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000579c:	429a      	cmp	r2, r3
2000579e:	d13d      	bne.n	2000581c <MSS_UART_polled_tx+0xd8>
200057a0:	68bb      	ldr	r3, [r7, #8]
200057a2:	2b00      	cmp	r3, #0
200057a4:	d03a      	beq.n	2000581c <MSS_UART_polled_tx+0xd8>
200057a6:	687b      	ldr	r3, [r7, #4]
200057a8:	2b00      	cmp	r3, #0
200057aa:	d037      	beq.n	2000581c <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
200057ac:	68fb      	ldr	r3, [r7, #12]
200057ae:	681b      	ldr	r3, [r3, #0]
200057b0:	7d1b      	ldrb	r3, [r3, #20]
200057b2:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
200057b4:	68fb      	ldr	r3, [r7, #12]
200057b6:	7b5a      	ldrb	r2, [r3, #13]
200057b8:	7efb      	ldrb	r3, [r7, #27]
200057ba:	ea42 0303 	orr.w	r3, r2, r3
200057be:	b2da      	uxtb	r2, r3
200057c0:	68fb      	ldr	r3, [r7, #12]
200057c2:	735a      	strb	r2, [r3, #13]

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
200057c4:	7efb      	ldrb	r3, [r7, #27]
200057c6:	f003 0320 	and.w	r3, r3, #32
200057ca:	2b00      	cmp	r3, #0
200057cc:	d023      	beq.n	20005816 <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
200057ce:	f04f 0310 	mov.w	r3, #16
200057d2:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
200057d4:	687b      	ldr	r3, [r7, #4]
200057d6:	2b0f      	cmp	r3, #15
200057d8:	d801      	bhi.n	200057de <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
200057da:	687b      	ldr	r3, [r7, #4]
200057dc:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
200057de:	f04f 0300 	mov.w	r3, #0
200057e2:	617b      	str	r3, [r7, #20]
200057e4:	e00e      	b.n	20005804 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
200057e6:	68fb      	ldr	r3, [r7, #12]
200057e8:	681b      	ldr	r3, [r3, #0]
200057ea:	68b9      	ldr	r1, [r7, #8]
200057ec:	693a      	ldr	r2, [r7, #16]
200057ee:	440a      	add	r2, r1
200057f0:	7812      	ldrb	r2, [r2, #0]
200057f2:	701a      	strb	r2, [r3, #0]
                    char_idx++;
200057f4:	693b      	ldr	r3, [r7, #16]
200057f6:	f103 0301 	add.w	r3, r3, #1
200057fa:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
200057fc:	697b      	ldr	r3, [r7, #20]
200057fe:	f103 0301 	add.w	r3, r3, #1
20005802:	617b      	str	r3, [r7, #20]
20005804:	697a      	ldr	r2, [r7, #20]
20005806:	69fb      	ldr	r3, [r7, #28]
20005808:	429a      	cmp	r2, r3
2000580a:	d3ec      	bcc.n	200057e6 <MSS_UART_polled_tx+0xa2>
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
2000580c:	687a      	ldr	r2, [r7, #4]
2000580e:	697b      	ldr	r3, [r7, #20]
20005810:	ebc3 0302 	rsb	r3, r3, r2
20005814:	607b      	str	r3, [r7, #4]
            }
        } while(tx_size);
20005816:	687b      	ldr	r3, [r7, #4]
20005818:	2b00      	cmp	r3, #0
2000581a:	d1c7      	bne.n	200057ac <MSS_UART_polled_tx+0x68>
    }
}
2000581c:	f107 0724 	add.w	r7, r7, #36	; 0x24
20005820:	46bd      	mov	sp, r7
20005822:	bc80      	pop	{r7}
20005824:	4770      	bx	lr
20005826:	bf00      	nop

20005828 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20005828:	b480      	push	{r7}
2000582a:	b087      	sub	sp, #28
2000582c:	af00      	add	r7, sp, #0
2000582e:	60f8      	str	r0, [r7, #12]
20005830:	60b9      	str	r1, [r7, #8]
20005832:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0u;
20005834:	f04f 0300 	mov.w	r3, #0
20005838:	613b      	str	r3, [r7, #16]
    uint8_t status = 0u;
2000583a:	f04f 0300 	mov.w	r3, #0
2000583e:	75fb      	strb	r3, [r7, #23]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005840:	68fa      	ldr	r2, [r7, #12]
20005842:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005846:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000584a:	429a      	cmp	r2, r3
2000584c:	d007      	beq.n	2000585e <MSS_UART_get_rx+0x36>
2000584e:	68fa      	ldr	r2, [r7, #12]
20005850:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005854:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005858:	429a      	cmp	r2, r3
2000585a:	d000      	beq.n	2000585e <MSS_UART_get_rx+0x36>
2000585c:	be00      	bkpt	0x0000
    ASSERT(rx_buff != ((uint8_t *)0));
2000585e:	68bb      	ldr	r3, [r7, #8]
20005860:	2b00      	cmp	r3, #0
20005862:	d100      	bne.n	20005866 <MSS_UART_get_rx+0x3e>
20005864:	be00      	bkpt	0x0000
    ASSERT(buff_size > 0u);
20005866:	687b      	ldr	r3, [r7, #4]
20005868:	2b00      	cmp	r3, #0
2000586a:	d100      	bne.n	2000586e <MSS_UART_get_rx+0x46>
2000586c:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
2000586e:	68fa      	ldr	r2, [r7, #12]
20005870:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005874:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005878:	429a      	cmp	r2, r3
2000587a:	d006      	beq.n	2000588a <MSS_UART_get_rx+0x62>
2000587c:	68fa      	ldr	r2, [r7, #12]
2000587e:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005882:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005886:	429a      	cmp	r2, r3
20005888:	d134      	bne.n	200058f4 <MSS_UART_get_rx+0xcc>
2000588a:	68bb      	ldr	r3, [r7, #8]
2000588c:	2b00      	cmp	r3, #0
2000588e:	d031      	beq.n	200058f4 <MSS_UART_get_rx+0xcc>
20005890:	687b      	ldr	r3, [r7, #4]
20005892:	2b00      	cmp	r3, #0
20005894:	d02e      	beq.n	200058f4 <MSS_UART_get_rx+0xcc>
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
20005896:	68fb      	ldr	r3, [r7, #12]
20005898:	681b      	ldr	r3, [r3, #0]
2000589a:	7d1b      	ldrb	r3, [r3, #20]
2000589c:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
2000589e:	68fb      	ldr	r3, [r7, #12]
200058a0:	7b5a      	ldrb	r2, [r3, #13]
200058a2:	7dfb      	ldrb	r3, [r7, #23]
200058a4:	ea42 0303 	orr.w	r3, r2, r3
200058a8:	b2da      	uxtb	r2, r3
200058aa:	68fb      	ldr	r3, [r7, #12]
200058ac:	735a      	strb	r2, [r3, #13]

        while(((status & MSS_UART_DATA_READY) != 0u) &&
200058ae:	e017      	b.n	200058e0 <MSS_UART_get_rx+0xb8>
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
200058b0:	68ba      	ldr	r2, [r7, #8]
200058b2:	693b      	ldr	r3, [r7, #16]
200058b4:	4413      	add	r3, r2
200058b6:	68fa      	ldr	r2, [r7, #12]
200058b8:	6812      	ldr	r2, [r2, #0]
200058ba:	7812      	ldrb	r2, [r2, #0]
200058bc:	b2d2      	uxtb	r2, r2
200058be:	701a      	strb	r2, [r3, #0]
            ++rx_size;
200058c0:	693b      	ldr	r3, [r7, #16]
200058c2:	f103 0301 	add.w	r3, r3, #1
200058c6:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
200058c8:	68fb      	ldr	r3, [r7, #12]
200058ca:	681b      	ldr	r3, [r3, #0]
200058cc:	7d1b      	ldrb	r3, [r3, #20]
200058ce:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
200058d0:	68fb      	ldr	r3, [r7, #12]
200058d2:	7b5a      	ldrb	r2, [r3, #13]
200058d4:	7dfb      	ldrb	r3, [r7, #23]
200058d6:	ea42 0303 	orr.w	r3, r2, r3
200058da:	b2da      	uxtb	r2, r3
200058dc:	68fb      	ldr	r3, [r7, #12]
200058de:	735a      	strb	r2, [r3, #13]
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
200058e0:	7dfb      	ldrb	r3, [r7, #23]
200058e2:	f003 0301 	and.w	r3, r3, #1
200058e6:	b2db      	uxtb	r3, r3
200058e8:	2b00      	cmp	r3, #0
200058ea:	d003      	beq.n	200058f4 <MSS_UART_get_rx+0xcc>
200058ec:	693a      	ldr	r2, [r7, #16]
200058ee:	687b      	ldr	r3, [r7, #4]
200058f0:	429a      	cmp	r2, r3
200058f2:	d3dd      	bcc.n	200058b0 <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
200058f4:	693b      	ldr	r3, [r7, #16]
}
200058f6:	4618      	mov	r0, r3
200058f8:	f107 071c 	add.w	r7, r7, #28
200058fc:	46bd      	mov	sp, r7
200058fe:	bc80      	pop	{r7}
20005900:	4770      	bx	lr
20005902:	bf00      	nop

20005904 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20005904:	b580      	push	{r7, lr}
20005906:	b084      	sub	sp, #16
20005908:	af00      	add	r7, sp, #0
2000590a:	60f8      	str	r0, [r7, #12]
2000590c:	60b9      	str	r1, [r7, #8]
2000590e:	4613      	mov	r3, r2
20005910:	71fb      	strb	r3, [r7, #7]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005912:	68fa      	ldr	r2, [r7, #12]
20005914:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005918:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000591c:	429a      	cmp	r2, r3
2000591e:	d007      	beq.n	20005930 <MSS_UART_set_rx_handler+0x2c>
20005920:	68fa      	ldr	r2, [r7, #12]
20005922:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005926:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000592a:	429a      	cmp	r2, r3
2000592c:	d000      	beq.n	20005930 <MSS_UART_set_rx_handler+0x2c>
2000592e:	be00      	bkpt	0x0000
    ASSERT(handler != INVALID_IRQ_HANDLER );
20005930:	68bb      	ldr	r3, [r7, #8]
20005932:	2b00      	cmp	r3, #0
20005934:	d100      	bne.n	20005938 <MSS_UART_set_rx_handler+0x34>
20005936:	be00      	bkpt	0x0000
    ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
20005938:	79fb      	ldrb	r3, [r7, #7]
2000593a:	2bc0      	cmp	r3, #192	; 0xc0
2000593c:	d900      	bls.n	20005940 <MSS_UART_set_rx_handler+0x3c>
2000593e:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005940:	68fa      	ldr	r2, [r7, #12]
20005942:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005946:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000594a:	429a      	cmp	r2, r3
2000594c:	d006      	beq.n	2000595c <MSS_UART_set_rx_handler+0x58>
2000594e:	68fa      	ldr	r2, [r7, #12]
20005950:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005954:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005958:	429a      	cmp	r2, r3
2000595a:	d12e      	bne.n	200059ba <MSS_UART_set_rx_handler+0xb6>
2000595c:	68bb      	ldr	r3, [r7, #8]
2000595e:	2b00      	cmp	r3, #0
20005960:	d02b      	beq.n	200059ba <MSS_UART_set_rx_handler+0xb6>
20005962:	79fb      	ldrb	r3, [r7, #7]
20005964:	2bc0      	cmp	r3, #192	; 0xc0
20005966:	d828      	bhi.n	200059ba <MSS_UART_set_rx_handler+0xb6>
       (handler != INVALID_IRQ_HANDLER) &&
       (trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL))
    {
        this_uart->rx_handler = handler;
20005968:	68fb      	ldr	r3, [r7, #12]
2000596a:	68ba      	ldr	r2, [r7, #8]
2000596c:	621a      	str	r2, [r3, #32]

        /* Set the receive interrupt trigger level. */
        this_uart->hw_reg->FCR = (this_uart->hw_reg->FCR &
2000596e:	68fb      	ldr	r3, [r7, #12]
20005970:	681a      	ldr	r2, [r3, #0]
20005972:	68fb      	ldr	r3, [r7, #12]
20005974:	681b      	ldr	r3, [r3, #0]
20005976:	7a1b      	ldrb	r3, [r3, #8]
20005978:	b2db      	uxtb	r3, r3
2000597a:	b2db      	uxtb	r3, r3
2000597c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20005980:	79f8      	ldrb	r0, [r7, #7]
20005982:	4619      	mov	r1, r3
20005984:	4603      	mov	r3, r0
20005986:	ea41 0303 	orr.w	r3, r1, r3
2000598a:	b2db      	uxtb	r3, r3
2000598c:	b2db      	uxtb	r3, r3
2000598e:	7213      	strb	r3, [r2, #8]
                                 (uint8_t)(~((uint8_t)FCR_TRIG_LEVEL_MASK))) |
                                 (uint8_t)trigger_level;
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
20005990:	68fb      	ldr	r3, [r7, #12]
20005992:	791b      	ldrb	r3, [r3, #4]
20005994:	b25b      	sxtb	r3, r3
20005996:	4618      	mov	r0, r3
20005998:	f7ff fe14 	bl	200055c4 <NVIC_ClearPendingIRQ>

        /* Enable receive interrupt. */
        set_bit_reg8(&this_uart->hw_reg->IER,ERBFI);
2000599c:	68fb      	ldr	r3, [r7, #12]
2000599e:	681b      	ldr	r3, [r3, #0]
200059a0:	f103 0304 	add.w	r3, r3, #4
200059a4:	4618      	mov	r0, r3
200059a6:	f04f 0100 	mov.w	r1, #0
200059aa:	f7ff fe29 	bl	20005600 <set_bit_reg8>

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ(this_uart->irqn);
200059ae:	68fb      	ldr	r3, [r7, #12]
200059b0:	791b      	ldrb	r3, [r3, #4]
200059b2:	b25b      	sxtb	r3, r3
200059b4:	4618      	mov	r0, r3
200059b6:	f7ff fde9 	bl	2000558c <NVIC_EnableIRQ>
    }
}
200059ba:	f107 0710 	add.w	r7, r7, #16
200059be:	46bd      	mov	sp, r7
200059c0:	bd80      	pop	{r7, pc}
200059c2:	bf00      	nop

200059c4 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
200059c4:	4668      	mov	r0, sp
200059c6:	f020 0107 	bic.w	r1, r0, #7
200059ca:	468d      	mov	sp, r1
200059cc:	b589      	push	{r0, r3, r7, lr}
200059ce:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart0);
200059d0:	f24e 409c 	movw	r0, #58524	; 0xe49c
200059d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200059d8:	f000 fa1a 	bl	20005e10 <MSS_UART_isr>
}
200059dc:	46bd      	mov	sp, r7
200059de:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200059e2:	4685      	mov	sp, r0
200059e4:	4770      	bx	lr
200059e6:	bf00      	nop

200059e8 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
200059e8:	4668      	mov	r0, sp
200059ea:	f020 0107 	bic.w	r1, r0, #7
200059ee:	468d      	mov	sp, r1
200059f0:	b589      	push	{r0, r3, r7, lr}
200059f2:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart1);
200059f4:	f24e 405c 	movw	r0, #58460	; 0xe45c
200059f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200059fc:	f000 fa08 	bl	20005e10 <MSS_UART_isr>
}
20005a00:	46bd      	mov	sp, r7
20005a02:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20005a06:	4685      	mov	sp, r0
20005a08:	4770      	bx	lr
20005a0a:	bf00      	nop

20005a0c <config_baud_divisors>:
config_baud_divisors
(
    mss_uart_instance_t * this_uart,
    uint32_t baudrate
)
{
20005a0c:	b580      	push	{r7, lr}
20005a0e:	b088      	sub	sp, #32
20005a10:	af00      	add	r7, sp, #0
20005a12:	6078      	str	r0, [r7, #4]
20005a14:	6039      	str	r1, [r7, #0]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005a16:	687a      	ldr	r2, [r7, #4]
20005a18:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a20:	429a      	cmp	r2, r3
20005a22:	d007      	beq.n	20005a34 <config_baud_divisors+0x28>
20005a24:	687a      	ldr	r2, [r7, #4]
20005a26:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a2e:	429a      	cmp	r2, r3
20005a30:	d000      	beq.n	20005a34 <config_baud_divisors+0x28>
20005a32:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20005a34:	687a      	ldr	r2, [r7, #4]
20005a36:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a3e:	429a      	cmp	r2, r3
20005a40:	d007      	beq.n	20005a52 <config_baud_divisors+0x46>
20005a42:	687a      	ldr	r2, [r7, #4]
20005a44:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005a48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a4c:	429a      	cmp	r2, r3
20005a4e:	f040 80a4 	bne.w	20005b9a <config_baud_divisors+0x18e>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
20005a52:	687b      	ldr	r3, [r7, #4]
20005a54:	683a      	ldr	r2, [r7, #0]
20005a56:	609a      	str	r2, [r3, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
20005a58:	f001 fbca 	bl	200071f0 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
20005a5c:	687a      	ldr	r2, [r7, #4]
20005a5e:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a66:	429a      	cmp	r2, r3
20005a68:	d106      	bne.n	20005a78 <config_baud_divisors+0x6c>
        {
            pclk_freq = g_FrequencyPCLK0;
20005a6a:	f647 1378 	movw	r3, #31096	; 0x7978
20005a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a72:	681b      	ldr	r3, [r3, #0]
20005a74:	61fb      	str	r3, [r7, #28]
20005a76:	e005      	b.n	20005a84 <config_baud_divisors+0x78>
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
20005a78:	f647 137c 	movw	r3, #31100	; 0x797c
20005a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a80:	681b      	ldr	r3, [r3, #0]
20005a82:	61fb      	str	r3, [r7, #28]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
20005a84:	69fb      	ldr	r3, [r7, #28]
20005a86:	ea4f 02c3 	mov.w	r2, r3, lsl #3
20005a8a:	683b      	ldr	r3, [r7, #0]
20005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
20005a90:	617b      	str	r3, [r7, #20]
        baud_value_by_64 = baud_value_by_128 / 2u;
20005a92:	697b      	ldr	r3, [r7, #20]
20005a94:	ea4f 0353 	mov.w	r3, r3, lsr #1
20005a98:	613b      	str	r3, [r7, #16]
        baud_value = baud_value_by_64 / 64u;
20005a9a:	693b      	ldr	r3, [r7, #16]
20005a9c:	ea4f 1393 	mov.w	r3, r3, lsr #6
20005aa0:	60fb      	str	r3, [r7, #12]
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
20005aa2:	68fb      	ldr	r3, [r7, #12]
20005aa4:	ea4f 1383 	mov.w	r3, r3, lsl #6
20005aa8:	693a      	ldr	r2, [r7, #16]
20005aaa:	ebc3 0302 	rsb	r3, r3, r2
20005aae:	61bb      	str	r3, [r7, #24]
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
20005ab0:	68fb      	ldr	r3, [r7, #12]
20005ab2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20005ab6:	697a      	ldr	r2, [r7, #20]
20005ab8:	ebc3 0202 	rsb	r2, r3, r2
20005abc:	69bb      	ldr	r3, [r7, #24]
20005abe:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005ac2:	ebc3 0302 	rsb	r3, r3, r2
20005ac6:	69ba      	ldr	r2, [r7, #24]
20005ac8:	4413      	add	r3, r2
20005aca:	61bb      	str	r3, [r7, #24]

        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
20005acc:	68fa      	ldr	r2, [r7, #12]
20005ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005ad2:	429a      	cmp	r2, r3
20005ad4:	d900      	bls.n	20005ad8 <config_baud_divisors+0xcc>
20005ad6:	be00      	bkpt	0x0000

        if(baud_value <= (uint32_t)UINT16_MAX)
20005ad8:	68fa      	ldr	r2, [r7, #12]
20005ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005ade:	429a      	cmp	r2, r3
20005ae0:	d85b      	bhi.n	20005b9a <config_baud_divisors+0x18e>
        {
            if(baud_value > 1u)
20005ae2:	68fb      	ldr	r3, [r7, #12]
20005ae4:	2b01      	cmp	r3, #1
20005ae6:	d931      	bls.n	20005b4c <config_baud_divisors+0x140>
            {
                /*
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005ae8:	687b      	ldr	r3, [r7, #4]
20005aea:	681b      	ldr	r3, [r3, #0]
20005aec:	f103 030c 	add.w	r3, r3, #12
20005af0:	4618      	mov	r0, r3
20005af2:	f04f 0107 	mov.w	r1, #7
20005af6:	f7ff fd83 	bl	20005600 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20005afa:	687b      	ldr	r3, [r7, #4]
20005afc:	681b      	ldr	r3, [r3, #0]
20005afe:	68fa      	ldr	r2, [r7, #12]
20005b00:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005b04:	b2d2      	uxtb	r2, r2
20005b06:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20005b08:	687b      	ldr	r3, [r7, #4]
20005b0a:	681b      	ldr	r3, [r3, #0]
20005b0c:	68fa      	ldr	r2, [r7, #12]
20005b0e:	b2d2      	uxtb	r2, r2
20005b10:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005b12:	687b      	ldr	r3, [r7, #4]
20005b14:	681b      	ldr	r3, [r3, #0]
20005b16:	f103 030c 	add.w	r3, r3, #12
20005b1a:	4618      	mov	r0, r3
20005b1c:	f04f 0107 	mov.w	r1, #7
20005b20:	f7ff fd8e 	bl	20005640 <clear_bit_reg8>

                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005b24:	687b      	ldr	r3, [r7, #4]
20005b26:	681b      	ldr	r3, [r3, #0]
20005b28:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005b2c:	4618      	mov	r0, r3
20005b2e:	f04f 0107 	mov.w	r1, #7
20005b32:	f7ff fd65 	bl	20005600 <set_bit_reg8>

                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
20005b36:	69bb      	ldr	r3, [r7, #24]
20005b38:	2bff      	cmp	r3, #255	; 0xff
20005b3a:	d900      	bls.n	20005b3e <config_baud_divisors+0x132>
20005b3c:	be00      	bkpt	0x0000
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
20005b3e:	687b      	ldr	r3, [r7, #4]
20005b40:	681b      	ldr	r3, [r3, #0]
20005b42:	69ba      	ldr	r2, [r7, #24]
20005b44:	b2d2      	uxtb	r2, r2
20005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
20005b4a:	e026      	b.n	20005b9a <config_baud_divisors+0x18e>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005b4c:	687b      	ldr	r3, [r7, #4]
20005b4e:	681b      	ldr	r3, [r3, #0]
20005b50:	f103 030c 	add.w	r3, r3, #12
20005b54:	4618      	mov	r0, r3
20005b56:	f04f 0107 	mov.w	r1, #7
20005b5a:	f7ff fd51 	bl	20005600 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
20005b5e:	687b      	ldr	r3, [r7, #4]
20005b60:	681b      	ldr	r3, [r3, #0]
20005b62:	68fa      	ldr	r2, [r7, #12]
20005b64:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005b68:	b2d2      	uxtb	r2, r2
20005b6a:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20005b6c:	687b      	ldr	r3, [r7, #4]
20005b6e:	681b      	ldr	r3, [r3, #0]
20005b70:	68fa      	ldr	r2, [r7, #12]
20005b72:	b2d2      	uxtb	r2, r2
20005b74:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005b76:	687b      	ldr	r3, [r7, #4]
20005b78:	681b      	ldr	r3, [r3, #0]
20005b7a:	f103 030c 	add.w	r3, r3, #12
20005b7e:	4618      	mov	r0, r3
20005b80:	f04f 0107 	mov.w	r1, #7
20005b84:	f7ff fd5c 	bl	20005640 <clear_bit_reg8>

                /* Disable Fractional baud rate */
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005b88:	687b      	ldr	r3, [r7, #4]
20005b8a:	681b      	ldr	r3, [r3, #0]
20005b8c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005b90:	4618      	mov	r0, r3
20005b92:	f04f 0107 	mov.w	r1, #7
20005b96:	f7ff fd53 	bl	20005640 <clear_bit_reg8>
            }
        }
    }
}
20005b9a:	f107 0720 	add.w	r7, r7, #32
20005b9e:	46bd      	mov	sp, r7
20005ba0:	bd80      	pop	{r7, pc}
20005ba2:	bf00      	nop

20005ba4 <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20005ba4:	b580      	push	{r7, lr}
20005ba6:	b084      	sub	sp, #16
20005ba8:	af00      	add	r7, sp, #0
20005baa:	60f8      	str	r0, [r7, #12]
20005bac:	60b9      	str	r1, [r7, #8]
20005bae:	4613      	mov	r3, r2
20005bb0:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005bb2:	68fa      	ldr	r2, [r7, #12]
20005bb4:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005bbc:	429a      	cmp	r2, r3
20005bbe:	d007      	beq.n	20005bd0 <global_init+0x2c>
20005bc0:	68fa      	ldr	r2, [r7, #12]
20005bc2:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005bca:	429a      	cmp	r2, r3
20005bcc:	d000      	beq.n	20005bd0 <global_init+0x2c>
20005bce:	be00      	bkpt	0x0000

    if(this_uart == &g_mss_uart0)
20005bd0:	68fa      	ldr	r2, [r7, #12]
20005bd2:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005bda:	429a      	cmp	r2, r3
20005bdc:	d124      	bne.n	20005c28 <global_init+0x84>
    {
        this_uart->hw_reg = UART0;
20005bde:	68fb      	ldr	r3, [r7, #12]
20005be0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20005be4:	601a      	str	r2, [r3, #0]
        this_uart->irqn = UART0_IRQn;
20005be6:	68fb      	ldr	r3, [r7, #12]
20005be8:	f04f 020a 	mov.w	r2, #10
20005bec:	711a      	strb	r2, [r3, #4]
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
20005bee:	f248 0300 	movw	r3, #32768	; 0x8000
20005bf2:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005bf6:	f248 0200 	movw	r2, #32768	; 0x8000
20005bfa:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005bfe:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20005c04:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
20005c06:	f04f 000a 	mov.w	r0, #10
20005c0a:	f7ff fcdb 	bl	200055c4 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
20005c0e:	f248 0300 	movw	r3, #32768	; 0x8000
20005c12:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005c16:	f248 0200 	movw	r2, #32768	; 0x8000
20005c1a:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005c1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20005c24:	649a      	str	r2, [r3, #72]	; 0x48
20005c26:	e025      	b.n	20005c74 <global_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20005c28:	68fa      	ldr	r2, [r7, #12]
20005c2a:	f240 0300 	movw	r3, #0
20005c2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
20005c32:	6013      	str	r3, [r2, #0]
        this_uart->irqn = UART1_IRQn;
20005c34:	68fb      	ldr	r3, [r7, #12]
20005c36:	f04f 020b 	mov.w	r2, #11
20005c3a:	711a      	strb	r2, [r3, #4]
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
20005c3c:	f248 0300 	movw	r3, #32768	; 0x8000
20005c40:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005c44:	f248 0200 	movw	r2, #32768	; 0x8000
20005c48:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005c4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20005c52:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
20005c54:	f04f 000b 	mov.w	r0, #11
20005c58:	f7ff fcb4 	bl	200055c4 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
20005c5c:	f248 0300 	movw	r3, #32768	; 0x8000
20005c60:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005c64:	f248 0200 	movw	r2, #32768	; 0x8000
20005c68:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005c6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20005c72:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
20005c74:	68fb      	ldr	r3, [r7, #12]
20005c76:	681b      	ldr	r3, [r3, #0]
20005c78:	f04f 0200 	mov.w	r2, #0
20005c7c:	711a      	strb	r2, [r3, #4]

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
20005c7e:	68fb      	ldr	r3, [r7, #12]
20005c80:	681b      	ldr	r3, [r3, #0]
20005c82:	f04f 0200 	mov.w	r2, #0
20005c86:	721a      	strb	r2, [r3, #8]
    /* clear receiver FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
20005c88:	68fb      	ldr	r3, [r7, #12]
20005c8a:	681b      	ldr	r3, [r3, #0]
20005c8c:	f103 0308 	add.w	r3, r3, #8
20005c90:	4618      	mov	r0, r3
20005c92:	f04f 0101 	mov.w	r1, #1
20005c96:	f7ff fcb3 	bl	20005600 <set_bit_reg8>
    /* clear transmitter FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
20005c9a:	68fb      	ldr	r3, [r7, #12]
20005c9c:	681b      	ldr	r3, [r3, #0]
20005c9e:	f103 0308 	add.w	r3, r3, #8
20005ca2:	4618      	mov	r0, r3
20005ca4:	f04f 0102 	mov.w	r1, #2
20005ca8:	f7ff fcaa 	bl	20005600 <set_bit_reg8>

    /* set default READY mode : Mode 0*/
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
20005cac:	68fb      	ldr	r3, [r7, #12]
20005cae:	681b      	ldr	r3, [r3, #0]
20005cb0:	f103 0308 	add.w	r3, r3, #8
20005cb4:	4618      	mov	r0, r3
20005cb6:	f04f 0100 	mov.w	r1, #0
20005cba:	f7ff fca1 	bl	20005600 <set_bit_reg8>

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
20005cbe:	68fb      	ldr	r3, [r7, #12]
20005cc0:	681b      	ldr	r3, [r3, #0]
20005cc2:	f103 0310 	add.w	r3, r3, #16
20005cc6:	4618      	mov	r0, r3
20005cc8:	f04f 0104 	mov.w	r1, #4
20005ccc:	f7ff fcb8 	bl	20005640 <clear_bit_reg8>
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
20005cd0:	68fb      	ldr	r3, [r7, #12]
20005cd2:	681b      	ldr	r3, [r3, #0]
20005cd4:	f103 0310 	add.w	r3, r3, #16
20005cd8:	4618      	mov	r0, r3
20005cda:	f04f 0105 	mov.w	r1, #5
20005cde:	f7ff fcaf 	bl	20005640 <clear_bit_reg8>

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
20005ce2:	68fb      	ldr	r3, [r7, #12]
20005ce4:	681b      	ldr	r3, [r3, #0]
20005ce6:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005cea:	4618      	mov	r0, r3
20005cec:	f04f 0101 	mov.w	r1, #1
20005cf0:	f7ff fca6 	bl	20005640 <clear_bit_reg8>
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
20005cf4:	68fb      	ldr	r3, [r7, #12]
20005cf6:	681b      	ldr	r3, [r3, #0]
20005cf8:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005cfc:	4618      	mov	r0, r3
20005cfe:	f04f 0100 	mov.w	r1, #0
20005d02:	f7ff fc9d 	bl	20005640 <clear_bit_reg8>

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
20005d06:	68fb      	ldr	r3, [r7, #12]
20005d08:	681b      	ldr	r3, [r3, #0]
20005d0a:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005d0e:	4618      	mov	r0, r3
20005d10:	f04f 0101 	mov.w	r1, #1
20005d14:	f7ff fc94 	bl	20005640 <clear_bit_reg8>

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG);
20005d18:	68fb      	ldr	r3, [r7, #12]
20005d1a:	681b      	ldr	r3, [r3, #0]
20005d1c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005d20:	4618      	mov	r0, r3
20005d22:	f04f 0105 	mov.w	r1, #5
20005d26:	f7ff fc8b 	bl	20005640 <clear_bit_reg8>

    /* set default RX timeout */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO);
20005d2a:	68fb      	ldr	r3, [r7, #12]
20005d2c:	681b      	ldr	r3, [r3, #0]
20005d2e:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005d32:	4618      	mov	r0, r3
20005d34:	f04f 0106 	mov.w	r1, #6
20005d38:	f7ff fc82 	bl	20005640 <clear_bit_reg8>

    /* disable fractional baud-rate */
    clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005d3c:	68fb      	ldr	r3, [r7, #12]
20005d3e:	681b      	ldr	r3, [r3, #0]
20005d40:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005d44:	4618      	mov	r0, r3
20005d46:	f04f 0107 	mov.w	r1, #7
20005d4a:	f7ff fc79 	bl	20005640 <clear_bit_reg8>

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
20005d4e:	68fb      	ldr	r3, [r7, #12]
20005d50:	681b      	ldr	r3, [r3, #0]
20005d52:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005d56:	4618      	mov	r0, r3
20005d58:	f04f 0103 	mov.w	r1, #3
20005d5c:	f7ff fc70 	bl	20005640 <clear_bit_reg8>

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
20005d60:	68fb      	ldr	r3, [r7, #12]
20005d62:	681b      	ldr	r3, [r3, #0]
20005d64:	f04f 0200 	mov.w	r2, #0
20005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
20005d6c:	68fb      	ldr	r3, [r7, #12]
20005d6e:	681b      	ldr	r3, [r3, #0]
20005d70:	f04f 0200 	mov.w	r2, #0
20005d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
20005d78:	68fb      	ldr	r3, [r7, #12]
20005d7a:	681b      	ldr	r3, [r3, #0]
20005d7c:	f04f 0200 	mov.w	r2, #0
20005d80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*
     * Configure baud rate divisors. This uses the frational baud rate divisor
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);
20005d84:	68f8      	ldr	r0, [r7, #12]
20005d86:	68b9      	ldr	r1, [r7, #8]
20005d88:	f7ff fe40 	bl	20005a0c <config_baud_divisors>

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20005d8c:	68fb      	ldr	r3, [r7, #12]
20005d8e:	681b      	ldr	r3, [r3, #0]
20005d90:	79fa      	ldrb	r2, [r7, #7]
20005d92:	731a      	strb	r2, [r3, #12]

    /* Instance setup */
    this_uart->baudrate = baud_rate;
20005d94:	68fb      	ldr	r3, [r7, #12]
20005d96:	68ba      	ldr	r2, [r7, #8]
20005d98:	609a      	str	r2, [r3, #8]
    this_uart->lineconfig = line_config;
20005d9a:	68fb      	ldr	r3, [r7, #12]
20005d9c:	79fa      	ldrb	r2, [r7, #7]
20005d9e:	731a      	strb	r2, [r3, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
20005da0:	68fb      	ldr	r3, [r7, #12]
20005da2:	f04f 0200 	mov.w	r2, #0
20005da6:	615a      	str	r2, [r3, #20]
    this_uart->tx_buffer = (const uint8_t *)0;
20005da8:	68fb      	ldr	r3, [r7, #12]
20005daa:	f04f 0200 	mov.w	r2, #0
20005dae:	611a      	str	r2, [r3, #16]
    this_uart->tx_idx = 0u;
20005db0:	68fb      	ldr	r3, [r7, #12]
20005db2:	f04f 0200 	mov.w	r2, #0
20005db6:	619a      	str	r2, [r3, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20005db8:	68fb      	ldr	r3, [r7, #12]
20005dba:	f04f 0200 	mov.w	r2, #0
20005dbe:	621a      	str	r2, [r3, #32]
    this_uart->tx_handler       = NULL_HANDLER;
20005dc0:	68fb      	ldr	r3, [r7, #12]
20005dc2:	f04f 0200 	mov.w	r2, #0
20005dc6:	625a      	str	r2, [r3, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
20005dc8:	68fb      	ldr	r3, [r7, #12]
20005dca:	f04f 0200 	mov.w	r2, #0
20005dce:	61da      	str	r2, [r3, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
20005dd0:	68fb      	ldr	r3, [r7, #12]
20005dd2:	f04f 0200 	mov.w	r2, #0
20005dd6:	629a      	str	r2, [r3, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;
20005dd8:	68fb      	ldr	r3, [r7, #12]
20005dda:	f04f 0200 	mov.w	r2, #0
20005dde:	62da      	str	r2, [r3, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;
20005de0:	68fb      	ldr	r3, [r7, #12]
20005de2:	f04f 0200 	mov.w	r2, #0
20005de6:	631a      	str	r2, [r3, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
20005de8:	68fb      	ldr	r3, [r7, #12]
20005dea:	f04f 0200 	mov.w	r2, #0
20005dee:	635a      	str	r2, [r3, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;
20005df0:	68fb      	ldr	r3, [r7, #12]
20005df2:	f04f 0200 	mov.w	r2, #0
20005df6:	639a      	str	r2, [r3, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;
20005df8:	68fb      	ldr	r3, [r7, #12]
20005dfa:	f04f 0200 	mov.w	r2, #0
20005dfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
20005e00:	68fb      	ldr	r3, [r7, #12]
20005e02:	f04f 0200 	mov.w	r2, #0
20005e06:	735a      	strb	r2, [r3, #13]
}
20005e08:	f107 0710 	add.w	r7, r7, #16
20005e0c:	46bd      	mov	sp, r7
20005e0e:	bd80      	pop	{r7, pc}

20005e10 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20005e10:	b580      	push	{r7, lr}
20005e12:	b084      	sub	sp, #16
20005e14:	af00      	add	r7, sp, #0
20005e16:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005e18:	687a      	ldr	r2, [r7, #4]
20005e1a:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e22:	429a      	cmp	r2, r3
20005e24:	d007      	beq.n	20005e36 <MSS_UART_isr+0x26>
20005e26:	687a      	ldr	r2, [r7, #4]
20005e28:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e30:	429a      	cmp	r2, r3
20005e32:	d000      	beq.n	20005e36 <MSS_UART_isr+0x26>
20005e34:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20005e36:	687a      	ldr	r2, [r7, #4]
20005e38:	f24e 439c 	movw	r3, #58524	; 0xe49c
20005e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e40:	429a      	cmp	r2, r3
20005e42:	d007      	beq.n	20005e54 <MSS_UART_isr+0x44>
20005e44:	687a      	ldr	r2, [r7, #4]
20005e46:	f24e 435c 	movw	r3, #58460	; 0xe45c
20005e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005e4e:	429a      	cmp	r2, r3
20005e50:	f040 80ef 	bne.w	20006032 <MSS_UART_isr+0x222>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20005e54:	687b      	ldr	r3, [r7, #4]
20005e56:	681b      	ldr	r3, [r3, #0]
20005e58:	7a1b      	ldrb	r3, [r3, #8]
20005e5a:	b2db      	uxtb	r3, r3
20005e5c:	f003 030f 	and.w	r3, r3, #15
20005e60:	73fb      	strb	r3, [r7, #15]

        switch (iirf)
20005e62:	7bfb      	ldrb	r3, [r7, #15]
20005e64:	2b0c      	cmp	r3, #12
20005e66:	f200 80d7 	bhi.w	20006018 <MSS_UART_isr+0x208>
20005e6a:	a201      	add	r2, pc, #4	; (adr r2, 20005e70 <MSS_UART_isr+0x60>)
20005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005e70:	20005ea5 	.word	0x20005ea5
20005e74:	20006019 	.word	0x20006019
20005e78:	20005ec3 	.word	0x20005ec3
20005e7c:	20005f1d 	.word	0x20005f1d
20005e80:	20005ee1 	.word	0x20005ee1
20005e84:	20006019 	.word	0x20006019
20005e88:	20005eff 	.word	0x20005eff
20005e8c:	20006019 	.word	0x20006019
20005e90:	20006019 	.word	0x20006019
20005e94:	20006019 	.word	0x20006019
20005e98:	20006019 	.word	0x20006019
20005e9c:	20006019 	.word	0x20006019
20005ea0:	20005ee1 	.word	0x20005ee1
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
20005ea4:	687b      	ldr	r3, [r7, #4]
20005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005ea8:	2b00      	cmp	r3, #0
20005eaa:	d100      	bne.n	20005eae <MSS_UART_isr+0x9e>
20005eac:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->modemsts_handler)
20005eae:	687b      	ldr	r3, [r7, #4]
20005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005eb2:	2b00      	cmp	r3, #0
20005eb4:	f000 80b2 	beq.w	2000601c <MSS_UART_isr+0x20c>
                {
                   (*(this_uart->modemsts_handler))(this_uart);
20005eb8:	687b      	ldr	r3, [r7, #4]
20005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005ebc:	6878      	ldr	r0, [r7, #4]
20005ebe:	4798      	blx	r3
                }
            }
            break;
20005ec0:	e0b7      	b.n	20006032 <MSS_UART_isr+0x222>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
20005ec2:	687b      	ldr	r3, [r7, #4]
20005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005ec6:	2b00      	cmp	r3, #0
20005ec8:	d100      	bne.n	20005ecc <MSS_UART_isr+0xbc>
20005eca:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->tx_handler)
20005ecc:	687b      	ldr	r3, [r7, #4]
20005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005ed0:	2b00      	cmp	r3, #0
20005ed2:	f000 80a5 	beq.w	20006020 <MSS_UART_isr+0x210>
                {
                    (*(this_uart->tx_handler))(this_uart);
20005ed6:	687b      	ldr	r3, [r7, #4]
20005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005eda:	6878      	ldr	r0, [r7, #4]
20005edc:	4798      	blx	r3
                }
            }
            break;
20005ede:	e0a8      	b.n	20006032 <MSS_UART_isr+0x222>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
20005ee0:	687b      	ldr	r3, [r7, #4]
20005ee2:	6a1b      	ldr	r3, [r3, #32]
20005ee4:	2b00      	cmp	r3, #0
20005ee6:	d100      	bne.n	20005eea <MSS_UART_isr+0xda>
20005ee8:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->rx_handler)
20005eea:	687b      	ldr	r3, [r7, #4]
20005eec:	6a1b      	ldr	r3, [r3, #32]
20005eee:	2b00      	cmp	r3, #0
20005ef0:	f000 8098 	beq.w	20006024 <MSS_UART_isr+0x214>
                {
                    (*(this_uart->rx_handler))(this_uart);
20005ef4:	687b      	ldr	r3, [r7, #4]
20005ef6:	6a1b      	ldr	r3, [r3, #32]
20005ef8:	6878      	ldr	r0, [r7, #4]
20005efa:	4798      	blx	r3
                }
            }
            break;
20005efc:	e099      	b.n	20006032 <MSS_UART_isr+0x222>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
20005efe:	687b      	ldr	r3, [r7, #4]
20005f00:	69db      	ldr	r3, [r3, #28]
20005f02:	2b00      	cmp	r3, #0
20005f04:	d100      	bne.n	20005f08 <MSS_UART_isr+0xf8>
20005f06:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->linests_handler)
20005f08:	687b      	ldr	r3, [r7, #4]
20005f0a:	69db      	ldr	r3, [r3, #28]
20005f0c:	2b00      	cmp	r3, #0
20005f0e:	f000 808b 	beq.w	20006028 <MSS_UART_isr+0x218>
                {
                   (*(this_uart->linests_handler))(this_uart);
20005f12:	687b      	ldr	r3, [r7, #4]
20005f14:	69db      	ldr	r3, [r3, #28]
20005f16:	6878      	ldr	r0, [r7, #4]
20005f18:	4798      	blx	r3
                }
            }
            break;
20005f1a:	e08a      	b.n	20006032 <MSS_UART_isr+0x222>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
20005f1c:	687b      	ldr	r3, [r7, #4]
20005f1e:	681b      	ldr	r3, [r3, #0]
20005f20:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005f24:	4618      	mov	r0, r3
20005f26:	f04f 0100 	mov.w	r1, #0
20005f2a:	f7ff fba9 	bl	20005680 <read_bit_reg8>
20005f2e:	4603      	mov	r3, r0
20005f30:	2b00      	cmp	r3, #0
20005f32:	d00c      	beq.n	20005f4e <MSS_UART_isr+0x13e>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
20005f34:	687b      	ldr	r3, [r7, #4]
20005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005f38:	2b00      	cmp	r3, #0
20005f3a:	d100      	bne.n	20005f3e <MSS_UART_isr+0x12e>
20005f3c:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->rto_handler)
20005f3e:	687b      	ldr	r3, [r7, #4]
20005f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005f42:	2b00      	cmp	r3, #0
20005f44:	d003      	beq.n	20005f4e <MSS_UART_isr+0x13e>
                    {
                        (*(this_uart->rto_handler))(this_uart);
20005f46:	687b      	ldr	r3, [r7, #4]
20005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005f4a:	6878      	ldr	r0, [r7, #4]
20005f4c:	4798      	blx	r3
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
20005f4e:	687b      	ldr	r3, [r7, #4]
20005f50:	681b      	ldr	r3, [r3, #0]
20005f52:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005f56:	4618      	mov	r0, r3
20005f58:	f04f 0101 	mov.w	r1, #1
20005f5c:	f7ff fb90 	bl	20005680 <read_bit_reg8>
20005f60:	4603      	mov	r3, r0
20005f62:	2b00      	cmp	r3, #0
20005f64:	d00c      	beq.n	20005f80 <MSS_UART_isr+0x170>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
20005f66:	687b      	ldr	r3, [r7, #4]
20005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f6a:	2b00      	cmp	r3, #0
20005f6c:	d100      	bne.n	20005f70 <MSS_UART_isr+0x160>
20005f6e:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->nack_handler)
20005f70:	687b      	ldr	r3, [r7, #4]
20005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f74:	2b00      	cmp	r3, #0
20005f76:	d003      	beq.n	20005f80 <MSS_UART_isr+0x170>
                    {
                        (*(this_uart->nack_handler))(this_uart);
20005f78:	687b      	ldr	r3, [r7, #4]
20005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005f7c:	6878      	ldr	r0, [r7, #4]
20005f7e:	4798      	blx	r3
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
20005f80:	687b      	ldr	r3, [r7, #4]
20005f82:	681b      	ldr	r3, [r3, #0]
20005f84:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005f88:	4618      	mov	r0, r3
20005f8a:	f04f 0102 	mov.w	r1, #2
20005f8e:	f7ff fb77 	bl	20005680 <read_bit_reg8>
20005f92:	4603      	mov	r3, r0
20005f94:	2b00      	cmp	r3, #0
20005f96:	d00c      	beq.n	20005fb2 <MSS_UART_isr+0x1a2>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
20005f98:	687b      	ldr	r3, [r7, #4]
20005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005f9c:	2b00      	cmp	r3, #0
20005f9e:	d100      	bne.n	20005fa2 <MSS_UART_isr+0x192>
20005fa0:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
20005fa2:	687b      	ldr	r3, [r7, #4]
20005fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005fa6:	2b00      	cmp	r3, #0
20005fa8:	d003      	beq.n	20005fb2 <MSS_UART_isr+0x1a2>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
20005faa:	687b      	ldr	r3, [r7, #4]
20005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005fae:	6878      	ldr	r0, [r7, #4]
20005fb0:	4798      	blx	r3
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
20005fb2:	687b      	ldr	r3, [r7, #4]
20005fb4:	681b      	ldr	r3, [r3, #0]
20005fb6:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005fba:	4618      	mov	r0, r3
20005fbc:	f04f 0103 	mov.w	r1, #3
20005fc0:	f7ff fb5e 	bl	20005680 <read_bit_reg8>
20005fc4:	4603      	mov	r3, r0
20005fc6:	2b00      	cmp	r3, #0
20005fc8:	d00c      	beq.n	20005fe4 <MSS_UART_isr+0x1d4>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
20005fca:	687b      	ldr	r3, [r7, #4]
20005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005fce:	2b00      	cmp	r3, #0
20005fd0:	d100      	bne.n	20005fd4 <MSS_UART_isr+0x1c4>
20005fd2:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->break_handler)
20005fd4:	687b      	ldr	r3, [r7, #4]
20005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005fd8:	2b00      	cmp	r3, #0
20005fda:	d003      	beq.n	20005fe4 <MSS_UART_isr+0x1d4>
                    {
                        (*(this_uart->break_handler))(this_uart);
20005fdc:	687b      	ldr	r3, [r7, #4]
20005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005fe0:	6878      	ldr	r0, [r7, #4]
20005fe2:	4798      	blx	r3
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
20005fe4:	687b      	ldr	r3, [r7, #4]
20005fe6:	681b      	ldr	r3, [r3, #0]
20005fe8:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005fec:	4618      	mov	r0, r3
20005fee:	f04f 0104 	mov.w	r1, #4
20005ff2:	f7ff fb45 	bl	20005680 <read_bit_reg8>
20005ff6:	4603      	mov	r3, r0
20005ff8:	2b00      	cmp	r3, #0
20005ffa:	d017      	beq.n	2000602c <MSS_UART_isr+0x21c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
20005ffc:	687b      	ldr	r3, [r7, #4]
20005ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006000:	2b00      	cmp	r3, #0
20006002:	d100      	bne.n	20006006 <MSS_UART_isr+0x1f6>
20006004:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->sync_handler)
20006006:	687b      	ldr	r3, [r7, #4]
20006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000600a:	2b00      	cmp	r3, #0
2000600c:	d010      	beq.n	20006030 <MSS_UART_isr+0x220>
                    {
                        (*(this_uart->sync_handler))(this_uart);
2000600e:	687b      	ldr	r3, [r7, #4]
20006010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20006012:	6878      	ldr	r0, [r7, #4]
20006014:	4798      	blx	r3
                    }
                }
                break;
20006016:	e00c      	b.n	20006032 <MSS_UART_isr+0x222>
            }

            default:
            {
                ASSERT(INVALID_INTERRUPT);
20006018:	be00      	bkpt	0x0000
2000601a:	e00a      	b.n	20006032 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->modemsts_handler)
                {
                   (*(this_uart->modemsts_handler))(this_uart);
                }
            }
            break;
2000601c:	bf00      	nop
2000601e:	e008      	b.n	20006032 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->tx_handler)
                {
                    (*(this_uart->tx_handler))(this_uart);
                }
            }
            break;
20006020:	bf00      	nop
20006022:	e006      	b.n	20006032 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->rx_handler)
                {
                    (*(this_uart->rx_handler))(this_uart);
                }
            }
            break;
20006024:	bf00      	nop
20006026:	e004      	b.n	20006032 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->linests_handler)
                {
                   (*(this_uart->linests_handler))(this_uart);
                }
            }
            break;
20006028:	bf00      	nop
2000602a:	e002      	b.n	20006032 <MSS_UART_isr+0x222>
                    if(NULL_HANDLER != this_uart->sync_handler)
                    {
                        (*(this_uart->sync_handler))(this_uart);
                    }
                }
                break;
2000602c:	bf00      	nop
2000602e:	e000      	b.n	20006032 <MSS_UART_isr+0x222>
20006030:	bf00      	nop
                ASSERT(INVALID_INTERRUPT);
            }
            break;
        }
    }
}
20006032:	f107 0710 	add.w	r7, r7, #16
20006036:	46bd      	mov	sp, r7
20006038:	bd80      	pop	{r7, pc}
2000603a:	bf00      	nop

2000603c <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
2000603c:	b580      	push	{r7, lr}
2000603e:	b086      	sub	sp, #24
20006040:	af00      	add	r7, sp, #0
20006042:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20006044:	687a      	ldr	r2, [r7, #4]
20006046:	f24e 439c 	movw	r3, #58524	; 0xe49c
2000604a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000604e:	429a      	cmp	r2, r3
20006050:	d007      	beq.n	20006062 <default_tx_handler+0x26>
20006052:	687a      	ldr	r2, [r7, #4]
20006054:	f24e 435c 	movw	r3, #58460	; 0xe45c
20006058:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000605c:	429a      	cmp	r2, r3
2000605e:	d000      	beq.n	20006062 <default_tx_handler+0x26>
20006060:	be00      	bkpt	0x0000
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
20006062:	687b      	ldr	r3, [r7, #4]
20006064:	691b      	ldr	r3, [r3, #16]
20006066:	2b00      	cmp	r3, #0
20006068:	d100      	bne.n	2000606c <default_tx_handler+0x30>
2000606a:	be00      	bkpt	0x0000
    ASSERT(0u < this_uart->tx_buff_size);
2000606c:	687b      	ldr	r3, [r7, #4]
2000606e:	695b      	ldr	r3, [r3, #20]
20006070:	2b00      	cmp	r3, #0
20006072:	d100      	bne.n	20006076 <default_tx_handler+0x3a>
20006074:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20006076:	687a      	ldr	r2, [r7, #4]
20006078:	f24e 439c 	movw	r3, #58524	; 0xe49c
2000607c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006080:	429a      	cmp	r2, r3
20006082:	d006      	beq.n	20006092 <default_tx_handler+0x56>
20006084:	687a      	ldr	r2, [r7, #4]
20006086:	f24e 435c 	movw	r3, #58460	; 0xe45c
2000608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000608e:	429a      	cmp	r2, r3
20006090:	d155      	bne.n	2000613e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
20006092:	687b      	ldr	r3, [r7, #4]
20006094:	691b      	ldr	r3, [r3, #16]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20006096:	2b00      	cmp	r3, #0
20006098:	d051      	beq.n	2000613e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
2000609a:	687b      	ldr	r3, [r7, #4]
2000609c:	695b      	ldr	r3, [r3, #20]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
2000609e:	2b00      	cmp	r3, #0
200060a0:	d04d      	beq.n	2000613e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
200060a2:	687b      	ldr	r3, [r7, #4]
200060a4:	681b      	ldr	r3, [r3, #0]
200060a6:	7d1b      	ldrb	r3, [r3, #20]
200060a8:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
200060aa:	687b      	ldr	r3, [r7, #4]
200060ac:	7b5a      	ldrb	r2, [r3, #13]
200060ae:	7afb      	ldrb	r3, [r7, #11]
200060b0:	ea42 0303 	orr.w	r3, r2, r3
200060b4:	b2da      	uxtb	r2, r3
200060b6:	687b      	ldr	r3, [r7, #4]
200060b8:	735a      	strb	r2, [r3, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
200060ba:	7afb      	ldrb	r3, [r7, #11]
200060bc:	f003 0320 	and.w	r3, r3, #32
200060c0:	2b00      	cmp	r3, #0
200060c2:	d029      	beq.n	20006118 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
200060c4:	f04f 0310 	mov.w	r3, #16
200060c8:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
200060ca:	687b      	ldr	r3, [r7, #4]
200060cc:	695a      	ldr	r2, [r3, #20]
200060ce:	687b      	ldr	r3, [r7, #4]
200060d0:	699b      	ldr	r3, [r3, #24]
200060d2:	ebc3 0302 	rsb	r3, r3, r2
200060d6:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
200060d8:	697b      	ldr	r3, [r7, #20]
200060da:	2b0f      	cmp	r3, #15
200060dc:	d801      	bhi.n	200060e2 <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
200060de:	697b      	ldr	r3, [r7, #20]
200060e0:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
200060e2:	f04f 0300 	mov.w	r3, #0
200060e6:	60fb      	str	r3, [r7, #12]
200060e8:	e012      	b.n	20006110 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
200060ea:	687b      	ldr	r3, [r7, #4]
200060ec:	681b      	ldr	r3, [r3, #0]
200060ee:	687a      	ldr	r2, [r7, #4]
200060f0:	6911      	ldr	r1, [r2, #16]
200060f2:	687a      	ldr	r2, [r7, #4]
200060f4:	6992      	ldr	r2, [r2, #24]
200060f6:	440a      	add	r2, r1
200060f8:	7812      	ldrb	r2, [r2, #0]
200060fa:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
200060fc:	687b      	ldr	r3, [r7, #4]
200060fe:	699b      	ldr	r3, [r3, #24]
20006100:	f103 0201 	add.w	r2, r3, #1
20006104:	687b      	ldr	r3, [r7, #4]
20006106:	619a      	str	r2, [r3, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20006108:	68fb      	ldr	r3, [r7, #12]
2000610a:	f103 0301 	add.w	r3, r3, #1
2000610e:	60fb      	str	r3, [r7, #12]
20006110:	68fa      	ldr	r2, [r7, #12]
20006112:	693b      	ldr	r3, [r7, #16]
20006114:	429a      	cmp	r2, r3
20006116:	d3e8      	bcc.n	200060ea <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
20006118:	687b      	ldr	r3, [r7, #4]
2000611a:	699a      	ldr	r2, [r3, #24]
2000611c:	687b      	ldr	r3, [r7, #4]
2000611e:	695b      	ldr	r3, [r3, #20]
20006120:	429a      	cmp	r2, r3
20006122:	d10c      	bne.n	2000613e <default_tx_handler+0x102>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20006124:	687b      	ldr	r3, [r7, #4]
20006126:	f04f 0200 	mov.w	r2, #0
2000612a:	615a      	str	r2, [r3, #20]
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
2000612c:	687b      	ldr	r3, [r7, #4]
2000612e:	681b      	ldr	r3, [r3, #0]
20006130:	f103 0304 	add.w	r3, r3, #4
20006134:	4618      	mov	r0, r3
20006136:	f04f 0101 	mov.w	r1, #1
2000613a:	f7ff fa81 	bl	20005640 <clear_bit_reg8>
        }
    }
}
2000613e:	f107 0718 	add.w	r7, r7, #24
20006142:	46bd      	mov	sp, r7
20006144:	bd80      	pop	{r7, pc}
20006146:	bf00      	nop

20006148 <I2C_init>:
    i2c_instance_t * this_i2c,
    addr_t base_address,
    uint8_t ser_address,
    i2c_clock_divider_t ser_clock_speed
)
{
20006148:	b580      	push	{r7, lr}
2000614a:	b086      	sub	sp, #24
2000614c:	af00      	add	r7, sp, #0
2000614e:	60f8      	str	r0, [r7, #12]
20006150:	60b9      	str	r1, [r7, #8]
20006152:	71fa      	strb	r2, [r7, #7]
20006154:	71bb      	strb	r3, [r7, #6]
    psr_t saved_psr;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
20006156:	79bb      	ldrb	r3, [r7, #6]
20006158:	617b      	str	r3, [r7, #20]
    
    /*
     * We need to disable ints while doing this as there is no guarantee we
     * have not been called already and the ISR is active.
     */
    saved_psr = HAL_disable_interrupts();
2000615a:	f001 f9e9 	bl	20007530 <HAL_disable_interrupts>
2000615e:	4603      	mov	r3, r0
20006160:	613b      	str	r3, [r7, #16]
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    memset(this_i2c, 0, sizeof(i2c_instance_t));
20006162:	68f8      	ldr	r0, [r7, #12]
20006164:	f04f 0100 	mov.w	r1, #0
20006168:	f04f 026c 	mov.w	r2, #108	; 0x6c
2000616c:	f001 fb20 	bl	200077b0 <memset>
    
    /*
     * Set base address of I2C hardware used by this instance.
     */
    this_i2c->base_address = base_address;
20006170:	68fb      	ldr	r3, [r7, #12]
20006172:	68ba      	ldr	r2, [r7, #8]
20006174:	601a      	str	r2, [r3, #0]

    /*
     * Update Serial address of the device
     */
    this_i2c->ser_address = ((uint_fast8_t)ser_address << 1u);
20006176:	79fb      	ldrb	r3, [r7, #7]
20006178:	ea4f 0243 	mov.w	r2, r3, lsl #1
2000617c:	68fb      	ldr	r3, [r7, #12]
2000617e:	605a      	str	r2, [r3, #4]
    
    /*
     * Configure hardware.
     */
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x00); /* Reset I2C hardware. */
20006180:	68fb      	ldr	r3, [r7, #12]
20006182:	681b      	ldr	r3, [r3, #0]
20006184:	4618      	mov	r0, r3
20006186:	f04f 0106 	mov.w	r1, #6
2000618a:	f04f 0240 	mov.w	r2, #64	; 0x40
2000618e:	f04f 0300 	mov.w	r3, #0
20006192:	f001 fa08 	bl	200075a6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x01); /* set enable bit */
20006196:	68fb      	ldr	r3, [r7, #12]
20006198:	681b      	ldr	r3, [r3, #0]
2000619a:	4618      	mov	r0, r3
2000619c:	f04f 0106 	mov.w	r1, #6
200061a0:	f04f 0240 	mov.w	r2, #64	; 0x40
200061a4:	f04f 0301 	mov.w	r3, #1
200061a8:	f001 f9fd 	bl	200075a6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR2, ( (clock_speed >> 2) & 0x01) );
200061ac:	68fb      	ldr	r3, [r7, #12]
200061ae:	681a      	ldr	r2, [r3, #0]
200061b0:	697b      	ldr	r3, [r7, #20]
200061b2:	ea4f 0393 	mov.w	r3, r3, lsr #2
200061b6:	f003 0301 	and.w	r3, r3, #1
200061ba:	4610      	mov	r0, r2
200061bc:	f04f 0107 	mov.w	r1, #7
200061c0:	f04f 0280 	mov.w	r2, #128	; 0x80
200061c4:	f001 f9ef 	bl	200075a6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR1, ( (clock_speed >> 1) & 0x01) );
200061c8:	68fb      	ldr	r3, [r7, #12]
200061ca:	681a      	ldr	r2, [r3, #0]
200061cc:	697b      	ldr	r3, [r7, #20]
200061ce:	ea4f 0353 	mov.w	r3, r3, lsr #1
200061d2:	f003 0301 	and.w	r3, r3, #1
200061d6:	4610      	mov	r0, r2
200061d8:	f04f 0101 	mov.w	r1, #1
200061dc:	f04f 0202 	mov.w	r2, #2
200061e0:	f001 f9e1 	bl	200075a6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR0, ( clock_speed & 0x01) );
200061e4:	68fb      	ldr	r3, [r7, #12]
200061e6:	681a      	ldr	r2, [r3, #0]
200061e8:	697b      	ldr	r3, [r7, #20]
200061ea:	f003 0301 	and.w	r3, r3, #1
200061ee:	4610      	mov	r0, r2
200061f0:	f04f 0100 	mov.w	r1, #0
200061f4:	f04f 0201 	mov.w	r2, #1
200061f8:	f001 f9d5 	bl	200075a6 <HW_set_8bit_reg_field>

    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS, this_i2c->ser_address);
200061fc:	68fb      	ldr	r3, [r7, #12]
200061fe:	681b      	ldr	r3, [r3, #0]
20006200:	f103 020c 	add.w	r2, r3, #12
20006204:	68fb      	ldr	r3, [r7, #12]
20006206:	685b      	ldr	r3, [r3, #4]
20006208:	4610      	mov	r0, r2
2000620a:	4619      	mov	r1, r3
2000620c:	f001 f9c7 	bl	2000759e <HW_set_8bit_reg>
    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS1, this_i2c->ser_address);
20006210:	68fb      	ldr	r3, [r7, #12]
20006212:	681b      	ldr	r3, [r3, #0]
20006214:	f103 021c 	add.w	r2, r3, #28
20006218:	68fb      	ldr	r3, [r7, #12]
2000621a:	685b      	ldr	r3, [r3, #4]
2000621c:	4610      	mov	r0, r2
2000621e:	4619      	mov	r1, r3
20006220:	f001 f9bd 	bl	2000759e <HW_set_8bit_reg>
    
    /*
     * Finally safe to enable interrupts.
     */
    HAL_restore_interrupts( saved_psr );
20006224:	6938      	ldr	r0, [r7, #16]
20006226:	f001 f987 	bl	20007538 <HAL_restore_interrupts>
}
2000622a:	f107 0718 	add.w	r7, r7, #24
2000622e:	46bd      	mov	sp, r7
20006230:	bd80      	pop	{r7, pc}
20006232:	bf00      	nop

20006234 <I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20006234:	b580      	push	{r7, lr}
20006236:	b086      	sub	sp, #24
20006238:	af00      	add	r7, sp, #0
2000623a:	60f8      	str	r0, [r7, #12]
2000623c:	607a      	str	r2, [r7, #4]
2000623e:	460a      	mov	r2, r1
20006240:	72fa      	strb	r2, [r7, #11]
20006242:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
20006244:	f001 f974 	bl	20007530 <HAL_disable_interrupts>
20006248:	4603      	mov	r3, r0
2000624a:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
2000624c:	68fb      	ldr	r3, [r7, #12]
2000624e:	7b1b      	ldrb	r3, [r3, #12]
20006250:	2b00      	cmp	r3, #0
20006252:	d103      	bne.n	2000625c <I2C_write+0x28>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20006254:	68fb      	ldr	r3, [r7, #12]
20006256:	f04f 0201 	mov.w	r2, #1
2000625a:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
2000625c:	68fb      	ldr	r3, [r7, #12]
2000625e:	f04f 0201 	mov.w	r2, #1
20006262:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20006266:	7afb      	ldrb	r3, [r7, #11]
20006268:	ea4f 0243 	mov.w	r2, r3, lsl #1
2000626c:	68fb      	ldr	r3, [r7, #12]
2000626e:	609a      	str	r2, [r3, #8]
    this_i2c->dir = WRITE_DIR;
20006270:	68fb      	ldr	r3, [r7, #12]
20006272:	f04f 0200 	mov.w	r2, #0
20006276:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_buffer = write_buffer;
20006278:	68fb      	ldr	r3, [r7, #12]
2000627a:	687a      	ldr	r2, [r7, #4]
2000627c:	619a      	str	r2, [r3, #24]
    this_i2c->master_tx_size = write_size;
2000627e:	887a      	ldrh	r2, [r7, #2]
20006280:	68fb      	ldr	r3, [r7, #12]
20006282:	61da      	str	r2, [r3, #28]
    this_i2c->master_tx_idx = 0u;
20006284:	68fb      	ldr	r3, [r7, #12]
20006286:	f04f 0200 	mov.w	r2, #0
2000628a:	621a      	str	r2, [r3, #32]

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
2000628c:	68fb      	ldr	r3, [r7, #12]
2000628e:	f04f 0201 	mov.w	r2, #1
20006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    this_i2c->options = options;
20006296:	68fb      	ldr	r3, [r7, #12]
20006298:	f897 2020 	ldrb.w	r2, [r7, #32]
2000629c:	751a      	strb	r2, [r3, #20]

    if(I2C_IN_PROGRESS == this_i2c->slave_status)
2000629e:	68fb      	ldr	r3, [r7, #12]
200062a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200062a4:	b2db      	uxtb	r3, r3
200062a6:	2b01      	cmp	r3, #1
200062a8:	d105      	bne.n	200062b6 <I2C_write+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
200062aa:	68fb      	ldr	r3, [r7, #12]
200062ac:	f04f 0201 	mov.w	r2, #1
200062b0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
200062b4:	e00a      	b.n	200062cc <I2C_write+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200062b6:	68fb      	ldr	r3, [r7, #12]
200062b8:	681b      	ldr	r3, [r3, #0]
200062ba:	4618      	mov	r0, r3
200062bc:	f04f 0105 	mov.w	r1, #5
200062c0:	f04f 0220 	mov.w	r2, #32
200062c4:	f04f 0301 	mov.w	r3, #1
200062c8:	f001 f96d 	bl	200075a6 <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
200062cc:	68fb      	ldr	r3, [r7, #12]
200062ce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
200062d2:	2b01      	cmp	r3, #1
200062d4:	d10a      	bne.n	200062ec <I2C_write+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
200062d6:	68fb      	ldr	r3, [r7, #12]
200062d8:	681b      	ldr	r3, [r3, #0]
200062da:	4618      	mov	r0, r3
200062dc:	f04f 0103 	mov.w	r1, #3
200062e0:	f04f 0208 	mov.w	r2, #8
200062e4:	f04f 0300 	mov.w	r3, #0
200062e8:	f001 f95d 	bl	200075a6 <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
200062ec:	68fb      	ldr	r3, [r7, #12]
200062ee:	681b      	ldr	r3, [r3, #0]
200062f0:	f103 0304 	add.w	r3, r3, #4
200062f4:	4618      	mov	r0, r3
200062f6:	f001 f954 	bl	200075a2 <HW_get_8bit_reg>
200062fa:	4603      	mov	r3, r0
200062fc:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
200062fe:	7cfb      	ldrb	r3, [r7, #19]
20006300:	b2db      	uxtb	r3, r3
20006302:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
20006304:	68f8      	ldr	r0, [r7, #12]
20006306:	f000 fec9 	bl	2000709c <I2C_enable_irq>

    HAL_restore_interrupts( saved_psr );
2000630a:	6978      	ldr	r0, [r7, #20]
2000630c:	f001 f914 	bl	20007538 <HAL_restore_interrupts>
}
20006310:	f107 0718 	add.w	r7, r7, #24
20006314:	46bd      	mov	sp, r7
20006316:	bd80      	pop	{r7, pc}

20006318 <I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20006318:	b580      	push	{r7, lr}
2000631a:	b086      	sub	sp, #24
2000631c:	af00      	add	r7, sp, #0
2000631e:	60f8      	str	r0, [r7, #12]
20006320:	607a      	str	r2, [r7, #4]
20006322:	460a      	mov	r2, r1
20006324:	72fa      	strb	r2, [r7, #11]
20006326:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
20006328:	f001 f902 	bl	20007530 <HAL_disable_interrupts>
2000632c:	4603      	mov	r3, r0
2000632e:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20006330:	68fb      	ldr	r3, [r7, #12]
20006332:	7b1b      	ldrb	r3, [r3, #12]
20006334:	2b00      	cmp	r3, #0
20006336:	d103      	bne.n	20006340 <I2C_read+0x28>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20006338:	68fb      	ldr	r3, [r7, #12]
2000633a:	f04f 0202 	mov.w	r2, #2
2000633e:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20006340:	68fb      	ldr	r3, [r7, #12]
20006342:	f04f 0202 	mov.w	r2, #2
20006346:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
2000634a:	7afb      	ldrb	r3, [r7, #11]
2000634c:	ea4f 0243 	mov.w	r2, r3, lsl #1
20006350:	68fb      	ldr	r3, [r7, #12]
20006352:	609a      	str	r2, [r3, #8]

    this_i2c->dir = READ_DIR;
20006354:	68fb      	ldr	r3, [r7, #12]
20006356:	f04f 0201 	mov.w	r2, #1
2000635a:	625a      	str	r2, [r3, #36]	; 0x24

    this_i2c->master_rx_buffer = read_buffer;
2000635c:	68fb      	ldr	r3, [r7, #12]
2000635e:	687a      	ldr	r2, [r7, #4]
20006360:	629a      	str	r2, [r3, #40]	; 0x28
    this_i2c->master_rx_size = read_size;
20006362:	887a      	ldrh	r2, [r7, #2]
20006364:	68fb      	ldr	r3, [r7, #12]
20006366:	62da      	str	r2, [r3, #44]	; 0x2c
    this_i2c->master_rx_idx = 0u;
20006368:	68fb      	ldr	r3, [r7, #12]
2000636a:	f04f 0200 	mov.w	r2, #0
2000636e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
20006370:	68fb      	ldr	r3, [r7, #12]
20006372:	f04f 0201 	mov.w	r2, #1
20006376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    this_i2c->options = options;
2000637a:	68fb      	ldr	r3, [r7, #12]
2000637c:	f897 2020 	ldrb.w	r2, [r7, #32]
20006380:	751a      	strb	r2, [r3, #20]
    
    if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006382:	68fb      	ldr	r3, [r7, #12]
20006384:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006388:	b2db      	uxtb	r3, r3
2000638a:	2b01      	cmp	r3, #1
2000638c:	d105      	bne.n	2000639a <I2C_read+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
2000638e:	68fb      	ldr	r3, [r7, #12]
20006390:	f04f 0201 	mov.w	r2, #1
20006394:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006398:	e00a      	b.n	200063b0 <I2C_read+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
2000639a:	68fb      	ldr	r3, [r7, #12]
2000639c:	681b      	ldr	r3, [r3, #0]
2000639e:	4618      	mov	r0, r3
200063a0:	f04f 0105 	mov.w	r1, #5
200063a4:	f04f 0220 	mov.w	r2, #32
200063a8:	f04f 0301 	mov.w	r3, #1
200063ac:	f001 f8fb 	bl	200075a6 <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
200063b0:	68fb      	ldr	r3, [r7, #12]
200063b2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
200063b6:	2b01      	cmp	r3, #1
200063b8:	d10a      	bne.n	200063d0 <I2C_read+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
200063ba:	68fb      	ldr	r3, [r7, #12]
200063bc:	681b      	ldr	r3, [r3, #0]
200063be:	4618      	mov	r0, r3
200063c0:	f04f 0103 	mov.w	r1, #3
200063c4:	f04f 0208 	mov.w	r2, #8
200063c8:	f04f 0300 	mov.w	r3, #0
200063cc:	f001 f8eb 	bl	200075a6 <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
200063d0:	68fb      	ldr	r3, [r7, #12]
200063d2:	681b      	ldr	r3, [r3, #0]
200063d4:	f103 0304 	add.w	r3, r3, #4
200063d8:	4618      	mov	r0, r3
200063da:	f001 f8e2 	bl	200075a2 <HW_get_8bit_reg>
200063de:	4603      	mov	r3, r0
200063e0:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
200063e2:	7cfb      	ldrb	r3, [r7, #19]
200063e4:	b2db      	uxtb	r3, r3
200063e6:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
200063e8:	68f8      	ldr	r0, [r7, #12]
200063ea:	f000 fe57 	bl	2000709c <I2C_enable_irq>
    HAL_restore_interrupts( saved_psr );
200063ee:	6978      	ldr	r0, [r7, #20]
200063f0:	f001 f8a2 	bl	20007538 <HAL_restore_interrupts>
}
200063f4:	f107 0718 	add.w	r7, r7, #24
200063f8:	46bd      	mov	sp, r7
200063fa:	bd80      	pop	{r7, pc}

200063fc <I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
200063fc:	b580      	push	{r7, lr}
200063fe:	b086      	sub	sp, #24
20006400:	af00      	add	r7, sp, #0
20006402:	60f8      	str	r0, [r7, #12]
20006404:	607a      	str	r2, [r7, #4]
20006406:	460a      	mov	r2, r1
20006408:	72fa      	strb	r2, [r7, #11]
2000640a:	807b      	strh	r3, [r7, #2]
    HAL_ASSERT(offset_size > 0u);
2000640c:	887b      	ldrh	r3, [r7, #2]
2000640e:	2b00      	cmp	r3, #0
20006410:	d100      	bne.n	20006414 <I2C_write_read+0x18>
20006412:	be00      	bkpt	0x0000
    HAL_ASSERT(addr_offset != (uint8_t *)0);
20006414:	687b      	ldr	r3, [r7, #4]
20006416:	2b00      	cmp	r3, #0
20006418:	d100      	bne.n	2000641c <I2C_write_read+0x20>
2000641a:	be00      	bkpt	0x0000
    HAL_ASSERT(read_size > 0u);
2000641c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2000641e:	2b00      	cmp	r3, #0
20006420:	d100      	bne.n	20006424 <I2C_write_read+0x28>
20006422:	be00      	bkpt	0x0000
    HAL_ASSERT(read_buffer != (uint8_t *)0);
20006424:	6a3b      	ldr	r3, [r7, #32]
20006426:	2b00      	cmp	r3, #0
20006428:	d100      	bne.n	2000642c <I2C_write_read+0x30>
2000642a:	be00      	bkpt	0x0000
    
    this_i2c->master_status = I2C_FAILED;
2000642c:	68fb      	ldr	r3, [r7, #12]
2000642e:	f04f 0202 	mov.w	r2, #2
20006432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if((read_size > 0u) && (offset_size > 0u))
20006436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20006438:	2b00      	cmp	r3, #0
2000643a:	d072      	beq.n	20006522 <I2C_write_read+0x126>
2000643c:	887b      	ldrh	r3, [r7, #2]
2000643e:	2b00      	cmp	r3, #0
20006440:	d06f      	beq.n	20006522 <I2C_write_read+0x126>
    {
        psr_t saved_psr;
        volatile uint8_t stat_ctrl;

        saved_psr = HAL_disable_interrupts();
20006442:	f001 f875 	bl	20007530 <HAL_disable_interrupts>
20006446:	4603      	mov	r3, r0
20006448:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
2000644a:	68fb      	ldr	r3, [r7, #12]
2000644c:	7b1b      	ldrb	r3, [r3, #12]
2000644e:	2b00      	cmp	r3, #0
20006450:	d103      	bne.n	2000645a <I2C_write_read+0x5e>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
20006452:	68fb      	ldr	r3, [r7, #12]
20006454:	f04f 0203 	mov.w	r2, #3
20006458:	731a      	strb	r2, [r3, #12]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
2000645a:	68fb      	ldr	r3, [r7, #12]
2000645c:	f04f 0203 	mov.w	r2, #3
20006460:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20006464:	7afb      	ldrb	r3, [r7, #11]
20006466:	ea4f 0243 	mov.w	r2, r3, lsl #1
2000646a:	68fb      	ldr	r3, [r7, #12]
2000646c:	609a      	str	r2, [r3, #8]

        this_i2c->dir = WRITE_DIR;
2000646e:	68fb      	ldr	r3, [r7, #12]
20006470:	f04f 0200 	mov.w	r2, #0
20006474:	625a      	str	r2, [r3, #36]	; 0x24

        this_i2c->master_tx_buffer = addr_offset;
20006476:	68fb      	ldr	r3, [r7, #12]
20006478:	687a      	ldr	r2, [r7, #4]
2000647a:	619a      	str	r2, [r3, #24]
        this_i2c->master_tx_size = offset_size;
2000647c:	887a      	ldrh	r2, [r7, #2]
2000647e:	68fb      	ldr	r3, [r7, #12]
20006480:	61da      	str	r2, [r3, #28]
        this_i2c->master_tx_idx = 0u;
20006482:	68fb      	ldr	r3, [r7, #12]
20006484:	f04f 0200 	mov.w	r2, #0
20006488:	621a      	str	r2, [r3, #32]

        this_i2c->master_rx_buffer = read_buffer;
2000648a:	68fb      	ldr	r3, [r7, #12]
2000648c:	6a3a      	ldr	r2, [r7, #32]
2000648e:	629a      	str	r2, [r3, #40]	; 0x28
        this_i2c->master_rx_size = read_size;
20006490:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20006492:	68fb      	ldr	r3, [r7, #12]
20006494:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_rx_idx = 0u;
20006496:	68fb      	ldr	r3, [r7, #12]
20006498:	f04f 0200 	mov.w	r2, #0
2000649c:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Set I2C status in progress */
        this_i2c->master_status = I2C_IN_PROGRESS;
2000649e:	68fb      	ldr	r3, [r7, #12]
200064a0:	f04f 0201 	mov.w	r2, #1
200064a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        this_i2c->options = options;
200064a8:	68fb      	ldr	r3, [r7, #12]
200064aa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
200064ae:	751a      	strb	r2, [r3, #20]
        
        if(I2C_IN_PROGRESS == this_i2c->slave_status)
200064b0:	68fb      	ldr	r3, [r7, #12]
200064b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200064b6:	b2db      	uxtb	r3, r3
200064b8:	2b01      	cmp	r3, #1
200064ba:	d105      	bne.n	200064c8 <I2C_write_read+0xcc>
        {
            this_i2c->is_transaction_pending = 1u;
200064bc:	68fb      	ldr	r3, [r7, #12]
200064be:	f04f 0201 	mov.w	r2, #1
200064c2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
200064c6:	e00a      	b.n	200064de <I2C_write_read+0xe2>
        }
        else
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200064c8:	68fb      	ldr	r3, [r7, #12]
200064ca:	681b      	ldr	r3, [r3, #0]
200064cc:	4618      	mov	r0, r3
200064ce:	f04f 0105 	mov.w	r1, #5
200064d2:	f04f 0220 	mov.w	r2, #32
200064d6:	f04f 0301 	mov.w	r3, #1
200064da:	f001 f864 	bl	200075a6 <HW_set_8bit_reg_field>
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( I2C_HOLD_BUS == this_i2c->bus_status )
200064de:	68fb      	ldr	r3, [r7, #12]
200064e0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
200064e4:	2b01      	cmp	r3, #1
200064e6:	d10a      	bne.n	200064fe <I2C_write_read+0x102>
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
200064e8:	68fb      	ldr	r3, [r7, #12]
200064ea:	681b      	ldr	r3, [r3, #0]
200064ec:	4618      	mov	r0, r3
200064ee:	f04f 0103 	mov.w	r1, #3
200064f2:	f04f 0208 	mov.w	r2, #8
200064f6:	f04f 0300 	mov.w	r3, #0
200064fa:	f001 f854 	bl	200075a6 <HW_set_8bit_reg_field>
        }

        stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
200064fe:	68fb      	ldr	r3, [r7, #12]
20006500:	681b      	ldr	r3, [r3, #0]
20006502:	f103 0304 	add.w	r3, r3, #4
20006506:	4618      	mov	r0, r3
20006508:	f001 f84b 	bl	200075a2 <HW_get_8bit_reg>
2000650c:	4603      	mov	r3, r0
2000650e:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20006510:	7cfb      	ldrb	r3, [r7, #19]
20006512:	b2db      	uxtb	r3, r3
20006514:	74fb      	strb	r3, [r7, #19]
            
        /* Enable the interrupt. ( Re-enable) */
        I2C_enable_irq( this_i2c );
20006516:	68f8      	ldr	r0, [r7, #12]
20006518:	f000 fdc0 	bl	2000709c <I2C_enable_irq>

        HAL_restore_interrupts( saved_psr );
2000651c:	6978      	ldr	r0, [r7, #20]
2000651e:	f001 f80b 	bl	20007538 <HAL_restore_interrupts>
    }
}
20006522:	f107 0718 	add.w	r7, r7, #24
20006526:	46bd      	mov	sp, r7
20006528:	bd80      	pop	{r7, pc}
2000652a:	bf00      	nop

2000652c <I2C_wait_complete>:
i2c_status_t I2C_wait_complete
(
    i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
2000652c:	b580      	push	{r7, lr}
2000652e:	b084      	sub	sp, #16
20006530:	af00      	add	r7, sp, #0
20006532:	6078      	str	r0, [r7, #4]
20006534:	6039      	str	r1, [r7, #0]
     * Because we have no idea of what CPU we are supposed to be running on
     * we need to guard this write to the timeout value to avoid ISR/user code
     * interaction issues. Checking the status below should be fine as only a
     * single byte should change in that.
     */
    saved_psr = HAL_disable_interrupts();
20006536:	f000 fffb 	bl	20007530 <HAL_disable_interrupts>
2000653a:	4603      	mov	r3, r0
2000653c:	60fb      	str	r3, [r7, #12]
    this_i2c->master_timeout_ms = timeout_ms;
2000653e:	687b      	ldr	r3, [r7, #4]
20006540:	683a      	ldr	r2, [r7, #0]
20006542:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_restore_interrupts( saved_psr );
20006544:	68f8      	ldr	r0, [r7, #12]
20006546:	f000 fff7 	bl	20007538 <HAL_restore_interrupts>

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
2000654a:	687b      	ldr	r3, [r7, #4]
2000654c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006550:	72fb      	strb	r3, [r7, #11]
    } while(I2C_IN_PROGRESS == i2c_status);
20006552:	7afb      	ldrb	r3, [r7, #11]
20006554:	2b01      	cmp	r3, #1
20006556:	d0f8      	beq.n	2000654a <I2C_wait_complete+0x1e>
    return i2c_status;
20006558:	7afb      	ldrb	r3, [r7, #11]
}
2000655a:	4618      	mov	r0, r3
2000655c:	f107 0710 	add.w	r7, r7, #16
20006560:	46bd      	mov	sp, r7
20006562:	bd80      	pop	{r7, pc}

20006564 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    i2c_instance_t * this_i2c
)
{
20006564:	b580      	push	{r7, lr}
20006566:	b082      	sub	sp, #8
20006568:	af00      	add	r7, sp, #0
2000656a:	6078      	str	r0, [r7, #4]
    /*
     * This function is only called from within the ISR and so does not need
     * guarding on the register access.
     */
    if( 0 != this_i2c->is_slave_enabled )
2000656c:	687b      	ldr	r3, [r7, #4]
2000656e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
20006572:	2b00      	cmp	r3, #0
20006574:	d00a      	beq.n	2000658c <enable_slave_if_required+0x28>
    {
        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006576:	687b      	ldr	r3, [r7, #4]
20006578:	681b      	ldr	r3, [r3, #0]
2000657a:	4618      	mov	r0, r3
2000657c:	f04f 0102 	mov.w	r1, #2
20006580:	f04f 0204 	mov.w	r2, #4
20006584:	f04f 0301 	mov.w	r3, #1
20006588:	f001 f80d 	bl	200075a6 <HW_set_8bit_reg_field>
    }
}
2000658c:	f107 0708 	add.w	r7, r7, #8
20006590:	46bd      	mov	sp, r7
20006592:	bd80      	pop	{r7, pc}

20006594 <I2C_isr>:
 */
void I2C_isr
(
    i2c_instance_t * this_i2c
)
{
20006594:	b5b0      	push	{r4, r5, r7, lr}
20006596:	b084      	sub	sp, #16
20006598:	af00      	add	r7, sp, #0
2000659a:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
2000659c:	f04f 0301 	mov.w	r3, #1
200065a0:	73bb      	strb	r3, [r7, #14]

    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
200065a2:	687b      	ldr	r3, [r7, #4]
200065a4:	681b      	ldr	r3, [r3, #0]
200065a6:	f103 0304 	add.w	r3, r3, #4
200065aa:	4618      	mov	r0, r3
200065ac:	f000 fff9 	bl	200075a2 <HW_get_8bit_reg>
200065b0:	4603      	mov	r3, r0
200065b2:	72fb      	strb	r3, [r7, #11]
    
    switch( status )
200065b4:	7afb      	ldrb	r3, [r7, #11]
200065b6:	b2db      	uxtb	r3, r3
200065b8:	f1a3 0308 	sub.w	r3, r3, #8
200065bc:	2bd8      	cmp	r3, #216	; 0xd8
200065be:	f200 84e3 	bhi.w	20006f88 <I2C_isr+0x9f4>
200065c2:	a201      	add	r2, pc, #4	; (adr r2, 200065c8 <I2C_isr+0x34>)
200065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200065c8:	2000692d 	.word	0x2000692d
200065cc:	20006f89 	.word	0x20006f89
200065d0:	20006f89 	.word	0x20006f89
200065d4:	20006f89 	.word	0x20006f89
200065d8:	20006f89 	.word	0x20006f89
200065dc:	20006f89 	.word	0x20006f89
200065e0:	20006f89 	.word	0x20006f89
200065e4:	20006f89 	.word	0x20006f89
200065e8:	2000692d 	.word	0x2000692d
200065ec:	20006f89 	.word	0x20006f89
200065f0:	20006f89 	.word	0x20006f89
200065f4:	20006f89 	.word	0x20006f89
200065f8:	20006f89 	.word	0x20006f89
200065fc:	20006f89 	.word	0x20006f89
20006600:	20006f89 	.word	0x20006f89
20006604:	20006f89 	.word	0x20006f89
20006608:	20006a03 	.word	0x20006a03
2000660c:	20006f89 	.word	0x20006f89
20006610:	20006f89 	.word	0x20006f89
20006614:	20006f89 	.word	0x20006f89
20006618:	20006f89 	.word	0x20006f89
2000661c:	20006f89 	.word	0x20006f89
20006620:	20006f89 	.word	0x20006f89
20006624:	20006f89 	.word	0x20006f89
20006628:	200069d3 	.word	0x200069d3
2000662c:	20006f89 	.word	0x20006f89
20006630:	20006f89 	.word	0x20006f89
20006634:	20006f89 	.word	0x20006f89
20006638:	20006f89 	.word	0x20006f89
2000663c:	20006f89 	.word	0x20006f89
20006640:	20006f89 	.word	0x20006f89
20006644:	20006f89 	.word	0x20006f89
20006648:	20006a03 	.word	0x20006a03
2000664c:	20006f89 	.word	0x20006f89
20006650:	20006f89 	.word	0x20006f89
20006654:	20006f89 	.word	0x20006f89
20006658:	20006f89 	.word	0x20006f89
2000665c:	20006f89 	.word	0x20006f89
20006660:	20006f89 	.word	0x20006f89
20006664:	20006f89 	.word	0x20006f89
20006668:	20006ab3 	.word	0x20006ab3
2000666c:	20006f89 	.word	0x20006f89
20006670:	20006f89 	.word	0x20006f89
20006674:	20006f89 	.word	0x20006f89
20006678:	20006f89 	.word	0x20006f89
2000667c:	20006f89 	.word	0x20006f89
20006680:	20006f89 	.word	0x20006f89
20006684:	20006f89 	.word	0x20006f89
20006688:	200069bb 	.word	0x200069bb
2000668c:	20006f89 	.word	0x20006f89
20006690:	20006f89 	.word	0x20006f89
20006694:	20006f89 	.word	0x20006f89
20006698:	20006f89 	.word	0x20006f89
2000669c:	20006f89 	.word	0x20006f89
200066a0:	20006f89 	.word	0x20006f89
200066a4:	20006f89 	.word	0x20006f89
200066a8:	20006ae3 	.word	0x20006ae3
200066ac:	20006f89 	.word	0x20006f89
200066b0:	20006f89 	.word	0x20006f89
200066b4:	20006f89 	.word	0x20006f89
200066b8:	20006f89 	.word	0x20006f89
200066bc:	20006f89 	.word	0x20006f89
200066c0:	20006f89 	.word	0x20006f89
200066c4:	20006f89 	.word	0x20006f89
200066c8:	20006b63 	.word	0x20006b63
200066cc:	20006f89 	.word	0x20006f89
200066d0:	20006f89 	.word	0x20006f89
200066d4:	20006f89 	.word	0x20006f89
200066d8:	20006f89 	.word	0x20006f89
200066dc:	20006f89 	.word	0x20006f89
200066e0:	20006f89 	.word	0x20006f89
200066e4:	20006f89 	.word	0x20006f89
200066e8:	20006b93 	.word	0x20006b93
200066ec:	20006f89 	.word	0x20006f89
200066f0:	20006f89 	.word	0x20006f89
200066f4:	20006f89 	.word	0x20006f89
200066f8:	20006f89 	.word	0x20006f89
200066fc:	20006f89 	.word	0x20006f89
20006700:	20006f89 	.word	0x20006f89
20006704:	20006f89 	.word	0x20006f89
20006708:	20006be3 	.word	0x20006be3
2000670c:	20006f89 	.word	0x20006f89
20006710:	20006f89 	.word	0x20006f89
20006714:	20006f89 	.word	0x20006f89
20006718:	20006f89 	.word	0x20006f89
2000671c:	20006f89 	.word	0x20006f89
20006720:	20006f89 	.word	0x20006f89
20006724:	20006f89 	.word	0x20006f89
20006728:	20006cad 	.word	0x20006cad
2000672c:	20006f89 	.word	0x20006f89
20006730:	20006f89 	.word	0x20006f89
20006734:	20006f89 	.word	0x20006f89
20006738:	20006f89 	.word	0x20006f89
2000673c:	20006f89 	.word	0x20006f89
20006740:	20006f89 	.word	0x20006f89
20006744:	20006f89 	.word	0x20006f89
20006748:	20006ca3 	.word	0x20006ca3
2000674c:	20006f89 	.word	0x20006f89
20006750:	20006f89 	.word	0x20006f89
20006754:	20006f89 	.word	0x20006f89
20006758:	20006f89 	.word	0x20006f89
2000675c:	20006f89 	.word	0x20006f89
20006760:	20006f89 	.word	0x20006f89
20006764:	20006f89 	.word	0x20006f89
20006768:	20006cad 	.word	0x20006cad
2000676c:	20006f89 	.word	0x20006f89
20006770:	20006f89 	.word	0x20006f89
20006774:	20006f89 	.word	0x20006f89
20006778:	20006f89 	.word	0x20006f89
2000677c:	20006f89 	.word	0x20006f89
20006780:	20006f89 	.word	0x20006f89
20006784:	20006f89 	.word	0x20006f89
20006788:	20006ca3 	.word	0x20006ca3
2000678c:	20006f89 	.word	0x20006f89
20006790:	20006f89 	.word	0x20006f89
20006794:	20006f89 	.word	0x20006f89
20006798:	20006f89 	.word	0x20006f89
2000679c:	20006f89 	.word	0x20006f89
200067a0:	20006f89 	.word	0x20006f89
200067a4:	20006f89 	.word	0x20006f89
200067a8:	20006d09 	.word	0x20006d09
200067ac:	20006f89 	.word	0x20006f89
200067b0:	20006f89 	.word	0x20006f89
200067b4:	20006f89 	.word	0x20006f89
200067b8:	20006f89 	.word	0x20006f89
200067bc:	20006f89 	.word	0x20006f89
200067c0:	20006f89 	.word	0x20006f89
200067c4:	20006f89 	.word	0x20006f89
200067c8:	20006c57 	.word	0x20006c57
200067cc:	20006f89 	.word	0x20006f89
200067d0:	20006f89 	.word	0x20006f89
200067d4:	20006f89 	.word	0x20006f89
200067d8:	20006f89 	.word	0x20006f89
200067dc:	20006f89 	.word	0x20006f89
200067e0:	20006f89 	.word	0x20006f89
200067e4:	20006f89 	.word	0x20006f89
200067e8:	20006d09 	.word	0x20006d09
200067ec:	20006f89 	.word	0x20006f89
200067f0:	20006f89 	.word	0x20006f89
200067f4:	20006f89 	.word	0x20006f89
200067f8:	20006f89 	.word	0x20006f89
200067fc:	20006f89 	.word	0x20006f89
20006800:	20006f89 	.word	0x20006f89
20006804:	20006f89 	.word	0x20006f89
20006808:	20006c57 	.word	0x20006c57
2000680c:	20006f89 	.word	0x20006f89
20006810:	20006f89 	.word	0x20006f89
20006814:	20006f89 	.word	0x20006f89
20006818:	20006f89 	.word	0x20006f89
2000681c:	20006f89 	.word	0x20006f89
20006820:	20006f89 	.word	0x20006f89
20006824:	20006f89 	.word	0x20006f89
20006828:	20006d7b 	.word	0x20006d7b
2000682c:	20006f89 	.word	0x20006f89
20006830:	20006f89 	.word	0x20006f89
20006834:	20006f89 	.word	0x20006f89
20006838:	20006f89 	.word	0x20006f89
2000683c:	20006f89 	.word	0x20006f89
20006840:	20006f89 	.word	0x20006f89
20006844:	20006f89 	.word	0x20006f89
20006848:	20006e6d 	.word	0x20006e6d
2000684c:	20006f89 	.word	0x20006f89
20006850:	20006f89 	.word	0x20006f89
20006854:	20006f89 	.word	0x20006f89
20006858:	20006f89 	.word	0x20006f89
2000685c:	20006f89 	.word	0x20006f89
20006860:	20006f89 	.word	0x20006f89
20006864:	20006f89 	.word	0x20006f89
20006868:	20006e6d 	.word	0x20006e6d
2000686c:	20006f89 	.word	0x20006f89
20006870:	20006f89 	.word	0x20006f89
20006874:	20006f89 	.word	0x20006f89
20006878:	20006f89 	.word	0x20006f89
2000687c:	20006f89 	.word	0x20006f89
20006880:	20006f89 	.word	0x20006f89
20006884:	20006f89 	.word	0x20006f89
20006888:	20006e6d 	.word	0x20006e6d
2000688c:	20006f89 	.word	0x20006f89
20006890:	20006f89 	.word	0x20006f89
20006894:	20006f89 	.word	0x20006f89
20006898:	20006f89 	.word	0x20006f89
2000689c:	20006f89 	.word	0x20006f89
200068a0:	20006f89 	.word	0x20006f89
200068a4:	20006f89 	.word	0x20006f89
200068a8:	20006f37 	.word	0x20006f37
200068ac:	20006f89 	.word	0x20006f89
200068b0:	20006f89 	.word	0x20006f89
200068b4:	20006f89 	.word	0x20006f89
200068b8:	20006f89 	.word	0x20006f89
200068bc:	20006f89 	.word	0x20006f89
200068c0:	20006f89 	.word	0x20006f89
200068c4:	20006f89 	.word	0x20006f89
200068c8:	20006f37 	.word	0x20006f37
200068cc:	20006f89 	.word	0x20006f89
200068d0:	20006f89 	.word	0x20006f89
200068d4:	20006f89 	.word	0x20006f89
200068d8:	20006f89 	.word	0x20006f89
200068dc:	20006f89 	.word	0x20006f89
200068e0:	20006f89 	.word	0x20006f89
200068e4:	20006f89 	.word	0x20006f89
200068e8:	20006f89 	.word	0x20006f89
200068ec:	20006f89 	.word	0x20006f89
200068f0:	20006f89 	.word	0x20006f89
200068f4:	20006f89 	.word	0x20006f89
200068f8:	20006f89 	.word	0x20006f89
200068fc:	20006f89 	.word	0x20006f89
20006900:	20006f89 	.word	0x20006f89
20006904:	20006f89 	.word	0x20006f89
20006908:	20006e3f 	.word	0x20006e3f
2000690c:	20006f89 	.word	0x20006f89
20006910:	20006f89 	.word	0x20006f89
20006914:	20006f89 	.word	0x20006f89
20006918:	20006f89 	.word	0x20006f89
2000691c:	20006f89 	.word	0x20006f89
20006920:	20006f89 	.word	0x20006f89
20006924:	20006f89 	.word	0x20006f89
20006928:	20006fdd 	.word	0x20006fdd
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            HAL_set_8bit_reg_field( this_i2c->base_address, STA, 0x00u);
2000692c:	687b      	ldr	r3, [r7, #4]
2000692e:	681b      	ldr	r3, [r3, #0]
20006930:	4618      	mov	r0, r3
20006932:	f04f 0105 	mov.w	r1, #5
20006936:	f04f 0220 	mov.w	r2, #32
2000693a:	f04f 0300 	mov.w	r3, #0
2000693e:	f000 fe32 	bl	200075a6 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg( this_i2c->base_address, DATA, this_i2c->target_addr); /* write call address */
20006942:	687b      	ldr	r3, [r7, #4]
20006944:	681b      	ldr	r3, [r3, #0]
20006946:	f103 0208 	add.w	r2, r3, #8
2000694a:	687b      	ldr	r3, [r7, #4]
2000694c:	689b      	ldr	r3, [r3, #8]
2000694e:	4610      	mov	r0, r2
20006950:	4619      	mov	r1, r3
20006952:	f000 fe24 	bl	2000759e <HW_set_8bit_reg>
            HAL_set_8bit_reg_field( this_i2c->base_address, DIR, this_i2c->dir); /* set direction bit */
20006956:	687b      	ldr	r3, [r7, #4]
20006958:	681b      	ldr	r3, [r3, #0]
2000695a:	f103 0208 	add.w	r2, r3, #8
2000695e:	687b      	ldr	r3, [r7, #4]
20006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006962:	4610      	mov	r0, r2
20006964:	f04f 0100 	mov.w	r1, #0
20006968:	f04f 0201 	mov.w	r2, #1
2000696c:	f000 fe1b 	bl	200075a6 <HW_set_8bit_reg_field>
            if(this_i2c->dir == WRITE_DIR)
20006970:	687b      	ldr	r3, [r7, #4]
20006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006974:	2b00      	cmp	r3, #0
20006976:	d104      	bne.n	20006982 <I2C_isr+0x3ee>
            {
                 this_i2c->master_tx_idx = 0u;
20006978:	687b      	ldr	r3, [r7, #4]
2000697a:	f04f 0200 	mov.w	r2, #0
2000697e:	621a      	str	r2, [r3, #32]
20006980:	e003      	b.n	2000698a <I2C_isr+0x3f6>
            }
            else
            {
                 this_i2c->master_rx_idx = 0u;
20006982:	687b      	ldr	r3, [r7, #4]
20006984:	f04f 0200 	mov.w	r2, #0
20006988:	631a      	str	r2, [r3, #48]	; 0x30
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
2000698a:	687b      	ldr	r3, [r7, #4]
2000698c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006990:	2b00      	cmp	r3, #0
20006992:	d004      	beq.n	2000699e <I2C_isr+0x40a>
            {
                this_i2c->is_transaction_pending = 0u;
20006994:	687b      	ldr	r3, [r7, #4]
20006996:	f04f 0200 	mov.w	r2, #0
2000699a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
2000699e:	687b      	ldr	r3, [r7, #4]
200069a0:	7b1a      	ldrb	r2, [r3, #12]
200069a2:	687b      	ldr	r3, [r7, #4]
200069a4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
200069a8:	429a      	cmp	r2, r3
200069aa:	f000 8319 	beq.w	20006fe0 <I2C_isr+0xa4c>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
200069ae:	687b      	ldr	r3, [r7, #4]
200069b0:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
200069b4:	687b      	ldr	r3, [r7, #4]
200069b6:	731a      	strb	r2, [r3, #12]
            }
            break;
200069b8:	e31b      	b.n	20006ff2 <I2C_isr+0xa5e>
            
        case ST_LOST_ARB:
              /* Set start bit.  Let's keep trying!  Don't give up! */
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200069ba:	687b      	ldr	r3, [r7, #4]
200069bc:	681b      	ldr	r3, [r3, #0]
200069be:	4618      	mov	r0, r3
200069c0:	f04f 0105 	mov.w	r1, #5
200069c4:	f04f 0220 	mov.w	r2, #32
200069c8:	f04f 0301 	mov.w	r3, #1
200069cc:	f000 fdeb 	bl	200075a6 <HW_set_8bit_reg_field>
              break;
200069d0:	e30f      	b.n	20006ff2 <I2C_isr+0xa5e>
              break;

        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
200069d2:	687b      	ldr	r3, [r7, #4]
200069d4:	681b      	ldr	r3, [r3, #0]
200069d6:	4618      	mov	r0, r3
200069d8:	f04f 0104 	mov.w	r1, #4
200069dc:	f04f 0210 	mov.w	r2, #16
200069e0:	f04f 0301 	mov.w	r3, #1
200069e4:	f000 fddf 	bl	200075a6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
200069e8:	687b      	ldr	r3, [r7, #4]
200069ea:	f04f 0202 	mov.w	r2, #2
200069ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            this_i2c->transaction = NO_TRANSACTION;
200069f2:	687b      	ldr	r3, [r7, #4]
200069f4:	f04f 0200 	mov.w	r2, #0
200069f8:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
200069fa:	6878      	ldr	r0, [r7, #4]
200069fc:	f7ff fdb2 	bl	20006564 <enable_slave_if_required>
            break;
20006a00:	e2f7      	b.n	20006ff2 <I2C_isr+0xa5e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20006a02:	687b      	ldr	r3, [r7, #4]
20006a04:	6a1a      	ldr	r2, [r3, #32]
20006a06:	687b      	ldr	r3, [r7, #4]
20006a08:	69db      	ldr	r3, [r3, #28]
20006a0a:	429a      	cmp	r2, r3
20006a0c:	d212      	bcs.n	20006a34 <I2C_isr+0x4a0>
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
20006a0e:	687b      	ldr	r3, [r7, #4]
20006a10:	681b      	ldr	r3, [r3, #0]
20006a12:	f103 0108 	add.w	r1, r3, #8
20006a16:	687b      	ldr	r3, [r7, #4]
20006a18:	699a      	ldr	r2, [r3, #24]
20006a1a:	687b      	ldr	r3, [r7, #4]
20006a1c:	6a1b      	ldr	r3, [r3, #32]
20006a1e:	441a      	add	r2, r3
20006a20:	7812      	ldrb	r2, [r2, #0]
20006a22:	f103 0001 	add.w	r0, r3, #1
20006a26:	687b      	ldr	r3, [r7, #4]
20006a28:	6218      	str	r0, [r3, #32]
20006a2a:	4608      	mov	r0, r1
20006a2c:	4611      	mov	r1, r2
20006a2e:	f000 fdb6 	bl	2000759e <HW_set_8bit_reg>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
20006a32:	e2de      	b.n	20006ff2 <I2C_isr+0xa5e>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20006a34:	687b      	ldr	r3, [r7, #4]
20006a36:	7b1b      	ldrb	r3, [r3, #12]
20006a38:	2b03      	cmp	r3, #3
20006a3a:	d10f      	bne.n	20006a5c <I2C_isr+0x4c8>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20006a3c:	687b      	ldr	r3, [r7, #4]
20006a3e:	f04f 0201 	mov.w	r2, #1
20006a42:	625a      	str	r2, [r3, #36]	; 0x24
                 HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006a44:	687b      	ldr	r3, [r7, #4]
20006a46:	681b      	ldr	r3, [r3, #0]
20006a48:	4618      	mov	r0, r3
20006a4a:	f04f 0105 	mov.w	r1, #5
20006a4e:	f04f 0220 	mov.w	r2, #32
20006a52:	f04f 0301 	mov.w	r3, #1
20006a56:	f000 fda6 	bl	200075a6 <HW_set_8bit_reg_field>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
20006a5a:	e2ca      	b.n	20006ff2 <I2C_isr+0xa5e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20006a5c:	687b      	ldr	r3, [r7, #4]
20006a5e:	f04f 0200 	mov.w	r2, #0
20006a62:	731a      	strb	r2, [r3, #12]
                hold_bus = this_i2c->options & I2C_HOLD_BUS;
20006a64:	687b      	ldr	r3, [r7, #4]
20006a66:	7d1b      	ldrb	r3, [r3, #20]
20006a68:	f003 0301 	and.w	r3, r3, #1
20006a6c:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20006a6e:	687b      	ldr	r3, [r7, #4]
20006a70:	7b7a      	ldrb	r2, [r7, #13]
20006a72:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                if ( hold_bus == 0u )
20006a76:	7b7b      	ldrb	r3, [r7, #13]
20006a78:	2b00      	cmp	r3, #0
20006a7a:	d10e      	bne.n	20006a9a <I2C_isr+0x506>
                { 
                    HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
20006a7c:	687b      	ldr	r3, [r7, #4]
20006a7e:	681b      	ldr	r3, [r3, #0]
20006a80:	4618      	mov	r0, r3
20006a82:	f04f 0104 	mov.w	r1, #4
20006a86:	f04f 0210 	mov.w	r2, #16
20006a8a:	f04f 0301 	mov.w	r3, #1
20006a8e:	f000 fd8a 	bl	200075a6 <HW_set_8bit_reg_field>
                    enable_slave_if_required(this_i2c);
20006a92:	6878      	ldr	r0, [r7, #4]
20006a94:	f7ff fd66 	bl	20006564 <enable_slave_if_required>
20006a98:	e005      	b.n	20006aa6 <I2C_isr+0x512>
                }
                else
                {
                    I2C_disable_irq( this_i2c );
20006a9a:	6878      	ldr	r0, [r7, #4]
20006a9c:	f000 fb48 	bl	20007130 <I2C_disable_irq>
                    clear_irq = 0u;
20006aa0:	f04f 0300 	mov.w	r3, #0
20006aa4:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = I2C_SUCCESS;
20006aa6:	687b      	ldr	r3, [r7, #4]
20006aa8:	f04f 0200 	mov.w	r2, #0
20006aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }
            break;
20006ab0:	e29f      	b.n	20006ff2 <I2C_isr+0xa5e>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);/* xmt stop condition */
20006ab2:	687b      	ldr	r3, [r7, #4]
20006ab4:	681b      	ldr	r3, [r3, #0]
20006ab6:	4618      	mov	r0, r3
20006ab8:	f04f 0104 	mov.w	r1, #4
20006abc:	f04f 0210 	mov.w	r2, #16
20006ac0:	f04f 0301 	mov.w	r3, #1
20006ac4:	f000 fd6f 	bl	200075a6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20006ac8:	687b      	ldr	r3, [r7, #4]
20006aca:	f04f 0202 	mov.w	r2, #2
20006ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006ad2:	687b      	ldr	r3, [r7, #4]
20006ad4:	f04f 0200 	mov.w	r2, #0
20006ad8:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
20006ada:	6878      	ldr	r0, [r7, #4]
20006adc:	f7ff fd42 	bl	20006564 <enable_slave_if_required>
            break;
20006ae0:	e287      	b.n	20006ff2 <I2C_isr+0xa5e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20006ae2:	687b      	ldr	r3, [r7, #4]
20006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006ae6:	2b01      	cmp	r3, #1
20006ae8:	d90b      	bls.n	20006b02 <I2C_isr+0x56e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20006aea:	687b      	ldr	r3, [r7, #4]
20006aec:	681b      	ldr	r3, [r3, #0]
20006aee:	4618      	mov	r0, r3
20006af0:	f04f 0102 	mov.w	r1, #2
20006af4:	f04f 0204 	mov.w	r2, #4
20006af8:	f04f 0301 	mov.w	r3, #1
20006afc:	f000 fd53 	bl	200075a6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20006b00:	e277      	b.n	20006ff2 <I2C_isr+0xa5e>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
            }
            else if(1u == this_i2c->master_rx_size)
20006b02:	687b      	ldr	r3, [r7, #4]
20006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006b06:	2b01      	cmp	r3, #1
20006b08:	d10b      	bne.n	20006b22 <I2C_isr+0x58e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
20006b0a:	687b      	ldr	r3, [r7, #4]
20006b0c:	681b      	ldr	r3, [r3, #0]
20006b0e:	4618      	mov	r0, r3
20006b10:	f04f 0102 	mov.w	r1, #2
20006b14:	f04f 0204 	mov.w	r2, #4
20006b18:	f04f 0300 	mov.w	r3, #0
20006b1c:	f000 fd43 	bl	200075a6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20006b20:	e267      	b.n	20006ff2 <I2C_isr+0xa5e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20006b22:	687b      	ldr	r3, [r7, #4]
20006b24:	681b      	ldr	r3, [r3, #0]
20006b26:	4618      	mov	r0, r3
20006b28:	f04f 0102 	mov.w	r1, #2
20006b2c:	f04f 0204 	mov.w	r2, #4
20006b30:	f04f 0301 	mov.w	r3, #1
20006b34:	f000 fd37 	bl	200075a6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20006b38:	687b      	ldr	r3, [r7, #4]
20006b3a:	681b      	ldr	r3, [r3, #0]
20006b3c:	4618      	mov	r0, r3
20006b3e:	f04f 0104 	mov.w	r1, #4
20006b42:	f04f 0210 	mov.w	r2, #16
20006b46:	f04f 0301 	mov.w	r3, #1
20006b4a:	f000 fd2c 	bl	200075a6 <HW_set_8bit_reg_field>
                this_i2c->master_status = I2C_SUCCESS;
20006b4e:	687b      	ldr	r3, [r7, #4]
20006b50:	f04f 0200 	mov.w	r2, #0
20006b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                this_i2c->transaction = NO_TRANSACTION;
20006b58:	687b      	ldr	r3, [r7, #4]
20006b5a:	f04f 0200 	mov.w	r2, #0
20006b5e:	731a      	strb	r2, [r3, #12]
            }
            break;
20006b60:	e247      	b.n	20006ff2 <I2C_isr+0xa5e>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20006b62:	687b      	ldr	r3, [r7, #4]
20006b64:	681b      	ldr	r3, [r3, #0]
20006b66:	4618      	mov	r0, r3
20006b68:	f04f 0104 	mov.w	r1, #4
20006b6c:	f04f 0210 	mov.w	r2, #16
20006b70:	f04f 0301 	mov.w	r3, #1
20006b74:	f000 fd17 	bl	200075a6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20006b78:	687b      	ldr	r3, [r7, #4]
20006b7a:	f04f 0202 	mov.w	r2, #2
20006b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006b82:	687b      	ldr	r3, [r7, #4]
20006b84:	f04f 0200 	mov.w	r2, #0
20006b88:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
20006b8a:	6878      	ldr	r0, [r7, #4]
20006b8c:	f7ff fcea 	bl	20006564 <enable_slave_if_required>
            break;
20006b90:	e22f      	b.n	20006ff2 <I2C_isr+0xa5e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20006b92:	687b      	ldr	r3, [r7, #4]
20006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20006b96:	687a      	ldr	r2, [r7, #4]
20006b98:	6b14      	ldr	r4, [r2, #48]	; 0x30
20006b9a:	eb03 0504 	add.w	r5, r3, r4
20006b9e:	687b      	ldr	r3, [r7, #4]
20006ba0:	681b      	ldr	r3, [r3, #0]
20006ba2:	f103 0308 	add.w	r3, r3, #8
20006ba6:	4618      	mov	r0, r3
20006ba8:	f000 fcfb 	bl	200075a2 <HW_get_8bit_reg>
20006bac:	4603      	mov	r3, r0
20006bae:	702b      	strb	r3, [r5, #0]
20006bb0:	f104 0201 	add.w	r2, r4, #1
20006bb4:	687b      	ldr	r3, [r7, #4]
20006bb6:	631a      	str	r2, [r3, #48]	; 0x30
            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20006bb8:	687b      	ldr	r3, [r7, #4]
20006bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20006bbc:	687b      	ldr	r3, [r7, #4]
20006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006bc0:	f103 33ff 	add.w	r3, r3, #4294967295
20006bc4:	429a      	cmp	r2, r3
20006bc6:	f0c0 820d 	bcc.w	20006fe4 <I2C_isr+0xa50>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
20006bca:	687b      	ldr	r3, [r7, #4]
20006bcc:	681b      	ldr	r3, [r3, #0]
20006bce:	4618      	mov	r0, r3
20006bd0:	f04f 0102 	mov.w	r1, #2
20006bd4:	f04f 0204 	mov.w	r2, #4
20006bd8:	f04f 0300 	mov.w	r3, #0
20006bdc:	f000 fce3 	bl	200075a6 <HW_set_8bit_reg_field>
            }
            break;
20006be0:	e207      	b.n	20006ff2 <I2C_isr+0xa5e>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20006be2:	687b      	ldr	r3, [r7, #4]
20006be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20006be6:	687b      	ldr	r3, [r7, #4]
20006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006bea:	eb02 0403 	add.w	r4, r2, r3
20006bee:	687b      	ldr	r3, [r7, #4]
20006bf0:	681b      	ldr	r3, [r3, #0]
20006bf2:	f103 0308 	add.w	r3, r3, #8
20006bf6:	4618      	mov	r0, r3
20006bf8:	f000 fcd3 	bl	200075a2 <HW_get_8bit_reg>
20006bfc:	4603      	mov	r3, r0
20006bfe:	7023      	strb	r3, [r4, #0]
          
            hold_bus = this_i2c->options & I2C_HOLD_BUS; 
20006c00:	687b      	ldr	r3, [r7, #4]
20006c02:	7d1b      	ldrb	r3, [r3, #20]
20006c04:	f003 0301 	and.w	r3, r3, #1
20006c08:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20006c0a:	687b      	ldr	r3, [r7, #4]
20006c0c:	7b7a      	ldrb	r2, [r7, #13]
20006c0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            if ( hold_bus == 0u )
20006c12:	7b7b      	ldrb	r3, [r7, #13]
20006c14:	2b00      	cmp	r3, #0
20006c16:	d10e      	bne.n	20006c36 <I2C_isr+0x6a2>
            { 
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
20006c18:	687b      	ldr	r3, [r7, #4]
20006c1a:	681b      	ldr	r3, [r3, #0]
20006c1c:	4618      	mov	r0, r3
20006c1e:	f04f 0104 	mov.w	r1, #4
20006c22:	f04f 0210 	mov.w	r2, #16
20006c26:	f04f 0301 	mov.w	r3, #1
20006c2a:	f000 fcbc 	bl	200075a6 <HW_set_8bit_reg_field>

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20006c2e:	6878      	ldr	r0, [r7, #4]
20006c30:	f7ff fc98 	bl	20006564 <enable_slave_if_required>
20006c34:	e005      	b.n	20006c42 <I2C_isr+0x6ae>
            }
            else
            {
                I2C_disable_irq( this_i2c );
20006c36:	6878      	ldr	r0, [r7, #4]
20006c38:	f000 fa7a 	bl	20007130 <I2C_disable_irq>
                clear_irq = 0u;
20006c3c:	f04f 0300 	mov.w	r3, #0
20006c40:	73bb      	strb	r3, [r7, #14]
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006c42:	687b      	ldr	r3, [r7, #4]
20006c44:	f04f 0200 	mov.w	r2, #0
20006c48:	731a      	strb	r2, [r3, #12]
            this_i2c->master_status = I2C_SUCCESS;
20006c4a:	687b      	ldr	r3, [r7, #4]
20006c4c:	f04f 0200 	mov.w	r2, #0
20006c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            break;
20006c54:	e1cd      	b.n	20006ff2 <I2C_isr+0xa5e>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20006c56:	687b      	ldr	r3, [r7, #4]
20006c58:	681b      	ldr	r3, [r3, #0]
20006c5a:	4618      	mov	r0, r3
20006c5c:	f04f 0102 	mov.w	r1, #2
20006c60:	f04f 0204 	mov.w	r2, #4
20006c64:	f04f 0301 	mov.w	r3, #1
20006c68:	f000 fc9d 	bl	200075a6 <HW_set_8bit_reg_field>

            this_i2c->transaction = NO_TRANSACTION;
20006c6c:	687b      	ldr	r3, [r7, #4]
20006c6e:	f04f 0200 	mov.w	r2, #0
20006c72:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_status = I2C_SUCCESS;
20006c74:	687b      	ldr	r3, [r7, #4]
20006c76:	f04f 0200 	mov.w	r2, #0
20006c7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006c7e:	687b      	ldr	r3, [r7, #4]
20006c80:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006c84:	2b00      	cmp	r3, #0
20006c86:	f000 81af 	beq.w	20006fe8 <I2C_isr+0xa54>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006c8a:	687b      	ldr	r3, [r7, #4]
20006c8c:	681b      	ldr	r3, [r3, #0]
20006c8e:	4618      	mov	r0, r3
20006c90:	f04f 0105 	mov.w	r1, #5
20006c94:	f04f 0220 	mov.w	r2, #32
20006c98:	f04f 0301 	mov.w	r3, #1
20006c9c:	f000 fc83 	bl	200075a6 <HW_set_8bit_reg_field>
            }
            break;
20006ca0:	e1a7      	b.n	20006ff2 <I2C_isr+0xa5e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20006ca2:	687b      	ldr	r3, [r7, #4]
20006ca4:	f04f 0201 	mov.w	r2, #1
20006ca8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20006cac:	687b      	ldr	r3, [r7, #4]
20006cae:	f04f 0204 	mov.w	r2, #4
20006cb2:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_rx_idx = 0u;
20006cb4:	687b      	ldr	r3, [r7, #4]
20006cb6:	f04f 0200 	mov.w	r2, #0
20006cba:	651a      	str	r2, [r3, #80]	; 0x50
            this_i2c->random_read_addr = 0u;
20006cbc:	687b      	ldr	r3, [r7, #4]
20006cbe:	f04f 0200 	mov.w	r2, #0
20006cc2:	611a      	str	r2, [r3, #16]
            /*
             * If Start Bit is set clear it, but store that information since it is because of
             * pending transaction
             */
            if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20006cc4:	687b      	ldr	r3, [r7, #4]
20006cc6:	681b      	ldr	r3, [r3, #0]
20006cc8:	4618      	mov	r0, r3
20006cca:	f04f 0105 	mov.w	r1, #5
20006cce:	f04f 0220 	mov.w	r2, #32
20006cd2:	f000 fc76 	bl	200075c2 <HW_get_8bit_reg_field>
20006cd6:	4603      	mov	r3, r0
20006cd8:	2b00      	cmp	r3, #0
20006cda:	d00f      	beq.n	20006cfc <I2C_isr+0x768>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006cdc:	687b      	ldr	r3, [r7, #4]
20006cde:	681b      	ldr	r3, [r3, #0]
20006ce0:	4618      	mov	r0, r3
20006ce2:	f04f 0105 	mov.w	r1, #5
20006ce6:	f04f 0220 	mov.w	r2, #32
20006cea:	f04f 0300 	mov.w	r3, #0
20006cee:	f000 fc5a 	bl	200075a6 <HW_set_8bit_reg_field>
                this_i2c->is_transaction_pending = 1u;
20006cf2:	687b      	ldr	r3, [r7, #4]
20006cf4:	f04f 0201 	mov.w	r2, #1
20006cf8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }
            this_i2c->slave_status = I2C_IN_PROGRESS;
20006cfc:	687b      	ldr	r3, [r7, #4]
20006cfe:	f04f 0201 	mov.w	r2, #1
20006d02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20006d06:	e174      	b.n	20006ff2 <I2C_isr+0xa5e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20006d08:	687b      	ldr	r3, [r7, #4]
20006d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20006d0c:	2b00      	cmp	r3, #0
20006d0e:	d021      	beq.n	20006d54 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20006d10:	687b      	ldr	r3, [r7, #4]
20006d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006d14:	687b      	ldr	r3, [r7, #4]
20006d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20006d18:	429a      	cmp	r2, r3
20006d1a:	d21b      	bcs.n	20006d54 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20006d1c:	687b      	ldr	r3, [r7, #4]
20006d1e:	681b      	ldr	r3, [r3, #0]
20006d20:	f103 0308 	add.w	r3, r3, #8
20006d24:	4618      	mov	r0, r3
20006d26:	f000 fc3c 	bl	200075a2 <HW_get_8bit_reg>
20006d2a:	4603      	mov	r3, r0
20006d2c:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20006d2e:	687b      	ldr	r3, [r7, #4]
20006d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20006d32:	687b      	ldr	r3, [r7, #4]
20006d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20006d36:	441a      	add	r2, r3
20006d38:	7b39      	ldrb	r1, [r7, #12]
20006d3a:	7011      	strb	r1, [r2, #0]
20006d3c:	f103 0201 	add.w	r2, r3, #1
20006d40:	687b      	ldr	r3, [r7, #4]
20006d42:	651a      	str	r2, [r3, #80]	; 0x50
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20006d44:	687b      	ldr	r3, [r7, #4]
20006d46:	691b      	ldr	r3, [r3, #16]
20006d48:	ea4f 2203 	mov.w	r2, r3, lsl #8
20006d4c:	7b3b      	ldrb	r3, [r7, #12]
20006d4e:	441a      	add	r2, r3
20006d50:	687b      	ldr	r3, [r7, #4]
20006d52:	611a      	str	r2, [r3, #16]
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20006d54:	687b      	ldr	r3, [r7, #4]
20006d56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006d58:	687b      	ldr	r3, [r7, #4]
20006d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20006d5c:	429a      	cmp	r2, r3
20006d5e:	f0c0 8145 	bcc.w	20006fec <I2C_isr+0xa58>
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
20006d62:	687b      	ldr	r3, [r7, #4]
20006d64:	681b      	ldr	r3, [r3, #0]
20006d66:	4618      	mov	r0, r3
20006d68:	f04f 0102 	mov.w	r1, #2
20006d6c:	f04f 0204 	mov.w	r2, #4
20006d70:	f04f 0300 	mov.w	r3, #0
20006d74:	f000 fc17 	bl	200075a6 <HW_set_8bit_reg_field>
            }
            break;
20006d78:	e13b      	b.n	20006ff2 <I2C_isr+0xa5e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20006d7a:	687b      	ldr	r3, [r7, #4]
20006d7c:	7b1b      	ldrb	r3, [r3, #12]
20006d7e:	2b04      	cmp	r3, #4
20006d80:	d13c      	bne.n	20006dfc <I2C_isr+0x868>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20006d82:	687b      	ldr	r3, [r7, #4]
20006d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006d86:	687b      	ldr	r3, [r7, #4]
20006d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20006d8a:	429a      	cmp	r2, r3
20006d8c:	d103      	bne.n	20006d96 <I2C_isr+0x802>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20006d8e:	687b      	ldr	r3, [r7, #4]
20006d90:	691a      	ldr	r2, [r3, #16]
20006d92:	687b      	ldr	r3, [r7, #4]
20006d94:	645a      	str	r2, [r3, #68]	; 0x44
                }
                /* Call the slave's write transaction handler if it exists. */
                if ( this_i2c->slave_write_handler != 0u )
20006d96:	687b      	ldr	r3, [r7, #4]
20006d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006d9a:	2b00      	cmp	r3, #0
20006d9c:	d022      	beq.n	20006de4 <I2C_isr+0x850>
                {
                    i2c_slave_handler_ret_t h_ret;
                    h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20006d9e:	687b      	ldr	r3, [r7, #4]
20006da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006da2:	687a      	ldr	r2, [r7, #4]
20006da4:	6c91      	ldr	r1, [r2, #72]	; 0x48
20006da6:	687a      	ldr	r2, [r7, #4]
20006da8:	6d12      	ldr	r2, [r2, #80]	; 0x50
20006daa:	b292      	uxth	r2, r2
20006dac:	6878      	ldr	r0, [r7, #4]
20006dae:	4798      	blx	r3
20006db0:	4603      	mov	r3, r0
20006db2:	73fb      	strb	r3, [r7, #15]
                    if ( I2C_REENABLE_SLAVE_RX == h_ret )
20006db4:	7bfb      	ldrb	r3, [r7, #15]
20006db6:	2b00      	cmp	r3, #0
20006db8:	d103      	bne.n	20006dc2 <I2C_isr+0x82e>
                    {
                        /* There is a small risk that the write handler could
                         * call I2C_disable_slave() but return
                         * I2C_REENABLE_SLAVE_RX in error so we only enable
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
20006dba:	6878      	ldr	r0, [r7, #4]
20006dbc:	f7ff fbd2 	bl	20006564 <enable_slave_if_required>
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006dc0:	e023      	b.n	20006e0a <I2C_isr+0x876>
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
                    }
                    else
                    {
                        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x0u );
20006dc2:	687b      	ldr	r3, [r7, #4]
20006dc4:	681b      	ldr	r3, [r3, #0]
20006dc6:	4618      	mov	r0, r3
20006dc8:	f04f 0102 	mov.w	r1, #2
20006dcc:	f04f 0204 	mov.w	r2, #4
20006dd0:	f04f 0300 	mov.w	r3, #0
20006dd4:	f000 fbe7 	bl	200075a6 <HW_set_8bit_reg_field>
                        /* Clear slave mode flag as well otherwise in mixed
                         * master/slave applications, the AA bit will get set by
                         * subsequent master operations. */
                        this_i2c->is_slave_enabled = 0u;
20006dd8:	687b      	ldr	r3, [r7, #4]
20006dda:	f04f 0200 	mov.w	r2, #0
20006dde:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006de2:	e012      	b.n	20006e0a <I2C_isr+0x876>
20006de4:	687b      	ldr	r3, [r7, #4]
20006de6:	681b      	ldr	r3, [r3, #0]
20006de8:	4618      	mov	r0, r3
20006dea:	f04f 0102 	mov.w	r1, #2
20006dee:	f04f 0204 	mov.w	r2, #4
20006df2:	f04f 0301 	mov.w	r3, #1
20006df6:	f000 fbd6 	bl	200075a6 <HW_set_8bit_reg_field>
20006dfa:	e006      	b.n	20006e0a <I2C_isr+0x876>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20006dfc:	687b      	ldr	r3, [r7, #4]
20006dfe:	f04f 0200 	mov.w	r2, #0
20006e02:	645a      	str	r2, [r3, #68]	; 0x44
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20006e04:	6878      	ldr	r0, [r7, #4]
20006e06:	f7ff fbad 	bl	20006564 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = I2C_SUCCESS;
20006e0a:	687b      	ldr	r3, [r7, #4]
20006e0c:	f04f 0200 	mov.w	r2, #0
20006e10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006e14:	687b      	ldr	r3, [r7, #4]
20006e16:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006e1a:	2b00      	cmp	r3, #0
20006e1c:	d00a      	beq.n	20006e34 <I2C_isr+0x8a0>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006e1e:	687b      	ldr	r3, [r7, #4]
20006e20:	681b      	ldr	r3, [r3, #0]
20006e22:	4618      	mov	r0, r3
20006e24:	f04f 0105 	mov.w	r1, #5
20006e28:	f04f 0220 	mov.w	r2, #32
20006e2c:	f04f 0301 	mov.w	r3, #1
20006e30:	f000 fbb9 	bl	200075a6 <HW_set_8bit_reg_field>

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006e34:	687b      	ldr	r3, [r7, #4]
20006e36:	f04f 0200 	mov.w	r2, #0
20006e3a:	731a      	strb	r2, [r3, #12]

            break;
20006e3c:	e0d9      	b.n	20006ff2 <I2C_isr+0xa5e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20006e3e:	687b      	ldr	r3, [r7, #4]
20006e40:	f04f 0200 	mov.w	r2, #0
20006e44:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20006e46:	687b      	ldr	r3, [r7, #4]
20006e48:	f04f 0200 	mov.w	r2, #0
20006e4c:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006e4e:	687b      	ldr	r3, [r7, #4]
20006e50:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006e54:	b2db      	uxtb	r3, r3
20006e56:	2b01      	cmp	r3, #1
20006e58:	d104      	bne.n	20006e64 <I2C_isr+0x8d0>
            {
                this_i2c->slave_status = I2C_FAILED;
20006e5a:	687b      	ldr	r3, [r7, #4]
20006e5c:	f04f 0202 	mov.w	r2, #2
20006e60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20006e64:	6878      	ldr	r0, [r7, #4]
20006e66:	f7ff fb7d 	bl	20006564 <enable_slave_if_required>

            break;
20006e6a:	e0c2      	b.n	20006ff2 <I2C_isr+0xa5e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:       /* Arbitration lost, and: */
        case ST_RACK:           /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20006e6c:	7afb      	ldrb	r3, [r7, #11]
20006e6e:	b2db      	uxtb	r3, r3
20006e70:	2ba8      	cmp	r3, #168	; 0xa8
20006e72:	d128      	bne.n	20006ec6 <I2C_isr+0x932>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20006e74:	687b      	ldr	r3, [r7, #4]
20006e76:	f04f 0205 	mov.w	r2, #5
20006e7a:	731a      	strb	r2, [r3, #12]
                this_i2c->random_read_addr = 0u;
20006e7c:	687b      	ldr	r3, [r7, #4]
20006e7e:	f04f 0200 	mov.w	r2, #0
20006e82:	611a      	str	r2, [r3, #16]
                this_i2c->slave_status = I2C_IN_PROGRESS;
20006e84:	687b      	ldr	r3, [r7, #4]
20006e86:	f04f 0201 	mov.w	r2, #1
20006e8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
                /* If Start Bit is set clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20006e8e:	687b      	ldr	r3, [r7, #4]
20006e90:	681b      	ldr	r3, [r3, #0]
20006e92:	4618      	mov	r0, r3
20006e94:	f04f 0105 	mov.w	r1, #5
20006e98:	f04f 0220 	mov.w	r2, #32
20006e9c:	f000 fb91 	bl	200075c2 <HW_get_8bit_reg_field>
20006ea0:	4603      	mov	r3, r0
20006ea2:	2b00      	cmp	r3, #0
20006ea4:	d00f      	beq.n	20006ec6 <I2C_isr+0x932>
                {
                    HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006ea6:	687b      	ldr	r3, [r7, #4]
20006ea8:	681b      	ldr	r3, [r3, #0]
20006eaa:	4618      	mov	r0, r3
20006eac:	f04f 0105 	mov.w	r1, #5
20006eb0:	f04f 0220 	mov.w	r2, #32
20006eb4:	f04f 0300 	mov.w	r3, #0
20006eb8:	f000 fb75 	bl	200075a6 <HW_set_8bit_reg_field>
                    this_i2c->is_transaction_pending = 1u;
20006ebc:	687b      	ldr	r3, [r7, #4]
20006ebe:	f04f 0201 	mov.w	r2, #1
20006ec2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                 }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20006ec6:	687b      	ldr	r3, [r7, #4]
20006ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006eca:	687b      	ldr	r3, [r7, #4]
20006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006ece:	429a      	cmp	r2, r3
20006ed0:	d309      	bcc.n	20006ee6 <I2C_isr+0x952>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, 0xFFu);
20006ed2:	687b      	ldr	r3, [r7, #4]
20006ed4:	681b      	ldr	r3, [r3, #0]
20006ed6:	f103 0308 	add.w	r3, r3, #8
20006eda:	4618      	mov	r0, r3
20006edc:	f04f 01ff 	mov.w	r1, #255	; 0xff
20006ee0:	f000 fb5d 	bl	2000759e <HW_set_8bit_reg>
20006ee4:	e011      	b.n	20006f0a <I2C_isr+0x976>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++]);
20006ee6:	687b      	ldr	r3, [r7, #4]
20006ee8:	681b      	ldr	r3, [r3, #0]
20006eea:	f103 0108 	add.w	r1, r3, #8
20006eee:	687b      	ldr	r3, [r7, #4]
20006ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
20006ef2:	687b      	ldr	r3, [r7, #4]
20006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006ef6:	441a      	add	r2, r3
20006ef8:	7812      	ldrb	r2, [r2, #0]
20006efa:	f103 0001 	add.w	r0, r3, #1
20006efe:	687b      	ldr	r3, [r7, #4]
20006f00:	6458      	str	r0, [r3, #68]	; 0x44
20006f02:	4608      	mov	r0, r1
20006f04:	4611      	mov	r1, r2
20006f06:	f000 fb4a 	bl	2000759e <HW_set_8bit_reg>
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20006f0a:	687b      	ldr	r3, [r7, #4]
20006f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006f0e:	687b      	ldr	r3, [r7, #4]
20006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006f12:	429a      	cmp	r2, r3
20006f14:	d36c      	bcc.n	20006ff0 <I2C_isr+0xa5c>
            {
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
20006f16:	687b      	ldr	r3, [r7, #4]
20006f18:	681b      	ldr	r3, [r3, #0]
20006f1a:	4618      	mov	r0, r3
20006f1c:	f04f 0102 	mov.w	r1, #2
20006f20:	f04f 0204 	mov.w	r2, #4
20006f24:	f04f 0300 	mov.w	r3, #0
20006f28:	f000 fb3d 	bl	200075a6 <HW_set_8bit_reg_field>
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20006f2c:	687b      	ldr	r3, [r7, #4]
20006f2e:	f04f 0200 	mov.w	r2, #0
20006f32:	645a      	str	r2, [r3, #68]	; 0x44
            }
            break;
20006f34:	e05d      	b.n	20006ff2 <I2C_isr+0xa5e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20006f36:	687b      	ldr	r3, [r7, #4]
20006f38:	f04f 0200 	mov.w	r2, #0
20006f3c:	645a      	str	r2, [r3, #68]	; 0x44
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u); 
20006f3e:	687b      	ldr	r3, [r7, #4]
20006f40:	681b      	ldr	r3, [r3, #0]
20006f42:	4618      	mov	r0, r3
20006f44:	f04f 0102 	mov.w	r1, #2
20006f48:	f04f 0204 	mov.w	r2, #4
20006f4c:	f04f 0301 	mov.w	r3, #1
20006f50:	f000 fb29 	bl	200075a6 <HW_set_8bit_reg_field>

            /*  Mark previous state as complete */
            this_i2c->slave_status = I2C_SUCCESS;
20006f54:	687b      	ldr	r3, [r7, #4]
20006f56:	f04f 0200 	mov.w	r2, #0
20006f5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006f5e:	687b      	ldr	r3, [r7, #4]
20006f60:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006f64:	2b00      	cmp	r3, #0
20006f66:	d00a      	beq.n	20006f7e <I2C_isr+0x9ea>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006f68:	687b      	ldr	r3, [r7, #4]
20006f6a:	681b      	ldr	r3, [r3, #0]
20006f6c:	4618      	mov	r0, r3
20006f6e:	f04f 0105 	mov.w	r1, #5
20006f72:	f04f 0220 	mov.w	r2, #32
20006f76:	f04f 0301 	mov.w	r3, #1
20006f7a:	f000 fb14 	bl	200075a6 <HW_set_8bit_reg_field>
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006f7e:	687b      	ldr	r3, [r7, #4]
20006f80:	f04f 0200 	mov.w	r2, #0
20006f84:	731a      	strb	r2, [r3, #12]

            break;
20006f86:	e034      	b.n	20006ff2 <I2C_isr+0xa5e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006f88:	687b      	ldr	r3, [r7, #4]
20006f8a:	681b      	ldr	r3, [r3, #0]
20006f8c:	4618      	mov	r0, r3
20006f8e:	f04f 0105 	mov.w	r1, #5
20006f92:	f04f 0220 	mov.w	r2, #32
20006f96:	f04f 0300 	mov.w	r3, #0
20006f9a:	f000 fb04 	bl	200075a6 <HW_set_8bit_reg_field>
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20006f9e:	687b      	ldr	r3, [r7, #4]
20006fa0:	f04f 0200 	mov.w	r2, #0
20006fa4:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20006fa6:	687b      	ldr	r3, [r7, #4]
20006fa8:	f04f 0200 	mov.w	r2, #0
20006fac:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->master_status)
20006fae:	687b      	ldr	r3, [r7, #4]
20006fb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006fb4:	b2db      	uxtb	r3, r3
20006fb6:	2b01      	cmp	r3, #1
20006fb8:	d104      	bne.n	20006fc4 <I2C_isr+0xa30>
            {
                this_i2c->master_status = I2C_FAILED;
20006fba:	687b      	ldr	r3, [r7, #4]
20006fbc:	f04f 0202 	mov.w	r2, #2
20006fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }

            if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006fc4:	687b      	ldr	r3, [r7, #4]
20006fc6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006fca:	b2db      	uxtb	r3, r3
20006fcc:	2b01      	cmp	r3, #1
20006fce:	d110      	bne.n	20006ff2 <I2C_isr+0xa5e>
            {
                this_i2c->slave_status = I2C_FAILED;
20006fd0:	687b      	ldr	r3, [r7, #4]
20006fd2:	f04f 0202 	mov.w	r2, #2
20006fd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006fda:	e00a      	b.n	20006ff2 <I2C_isr+0xa5e>
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
              break;

        case ST_STOP_TRANSMIT:
             /* Stop has been transmitted. Do nothing */
              break;
20006fdc:	bf00      	nop
20006fde:	e008      	b.n	20006ff2 <I2C_isr+0xa5e>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20006fe0:	bf00      	nop
20006fe2:	e006      	b.n	20006ff2 <I2C_isr+0xa5e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            break;
20006fe4:	bf00      	nop
20006fe6:	e004      	b.n	20006ff2 <I2C_isr+0xa5e>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
            }
            break;
20006fe8:	bf00      	nop
20006fea:	e002      	b.n	20006ff2 <I2C_isr+0xa5e>
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
            }
            break;
20006fec:	bf00      	nop
20006fee:	e000      	b.n	20006ff2 <I2C_isr+0xa5e>
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20006ff0:	bf00      	nop
            }

            break;
    }
    
    if ( clear_irq )
20006ff2:	7bbb      	ldrb	r3, [r7, #14]
20006ff4:	2b00      	cmp	r3, #0
20006ff6:	d00a      	beq.n	2000700e <I2C_isr+0xa7a>
    {
        /* clear interrupt. */
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006ff8:	687b      	ldr	r3, [r7, #4]
20006ffa:	681b      	ldr	r3, [r3, #0]
20006ffc:	4618      	mov	r0, r3
20006ffe:	f04f 0103 	mov.w	r1, #3
20007002:	f04f 0208 	mov.w	r2, #8
20007006:	f04f 0300 	mov.w	r3, #0
2000700a:	f000 facc 	bl	200075a6 <HW_set_8bit_reg_field>
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
2000700e:	687b      	ldr	r3, [r7, #4]
20007010:	681b      	ldr	r3, [r3, #0]
20007012:	f103 0304 	add.w	r3, r3, #4
20007016:	4618      	mov	r0, r3
20007018:	f000 fac3 	bl	200075a2 <HW_get_8bit_reg>
2000701c:	4603      	mov	r3, r0
2000701e:	72fb      	strb	r3, [r7, #11]
}
20007020:	f107 0710 	add.w	r7, r7, #16
20007024:	46bd      	mov	sp, r7
20007026:	bdb0      	pop	{r4, r5, r7, pc}

20007028 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20007028:	b480      	push	{r7}
2000702a:	b083      	sub	sp, #12
2000702c:	af00      	add	r7, sp, #0
2000702e:	4603      	mov	r3, r0
20007030:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20007032:	f24e 1300 	movw	r3, #57600	; 0xe100
20007036:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000703a:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000703e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20007042:	79f9      	ldrb	r1, [r7, #7]
20007044:	f001 011f 	and.w	r1, r1, #31
20007048:	f04f 0001 	mov.w	r0, #1
2000704c:	fa00 f101 	lsl.w	r1, r0, r1
20007050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20007054:	f107 070c 	add.w	r7, r7, #12
20007058:	46bd      	mov	sp, r7
2000705a:	bc80      	pop	{r7}
2000705c:	4770      	bx	lr
2000705e:	bf00      	nop

20007060 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20007060:	b480      	push	{r7}
20007062:	b083      	sub	sp, #12
20007064:	af00      	add	r7, sp, #0
20007066:	4603      	mov	r3, r0
20007068:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
2000706a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000706e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20007072:	f997 2007 	ldrsb.w	r2, [r7, #7]
20007076:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000707a:	79f9      	ldrb	r1, [r7, #7]
2000707c:	f001 011f 	and.w	r1, r1, #31
20007080:	f04f 0001 	mov.w	r0, #1
20007084:	fa00 f101 	lsl.w	r1, r0, r1
20007088:	f102 0220 	add.w	r2, r2, #32
2000708c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20007090:	f107 070c 	add.w	r7, r7, #12
20007094:	46bd      	mov	sp, r7
20007096:	bc80      	pop	{r7}
20007098:	4770      	bx	lr
2000709a:	bf00      	nop

2000709c <I2C_enable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to enable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_enable_irq( i2c_instance_t * this_i2c )
{
2000709c:	b580      	push	{r7, lr}
2000709e:	b082      	sub	sp, #8
200070a0:	af00      	add	r7, sp, #0
200070a2:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
200070a4:	687a      	ldr	r2, [r7, #4]
200070a6:	f24e 13d4 	movw	r3, #57812	; 0xe1d4
200070aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070ae:	429a      	cmp	r2, r3
200070b0:	d103      	bne.n	200070ba <I2C_enable_irq+0x1e>
	{
		NVIC_EnableIRQ( FabricIrq0_IRQn );
200070b2:	f04f 0022 	mov.w	r0, #34	; 0x22
200070b6:	f7ff ffb7 	bl	20007028 <NVIC_EnableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
200070ba:	687a      	ldr	r2, [r7, #4]
200070bc:	f24e 2340 	movw	r3, #57920	; 0xe240
200070c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070c4:	429a      	cmp	r2, r3
200070c6:	d103      	bne.n	200070d0 <I2C_enable_irq+0x34>
	{
		NVIC_EnableIRQ( FabricIrq1_IRQn );
200070c8:	f04f 0023 	mov.w	r0, #35	; 0x23
200070cc:	f7ff ffac 	bl	20007028 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c2)
200070d0:	687a      	ldr	r2, [r7, #4]
200070d2:	f64d 43e4 	movw	r3, #56548	; 0xdce4
200070d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070da:	429a      	cmp	r2, r3
200070dc:	d103      	bne.n	200070e6 <I2C_enable_irq+0x4a>
	{
		NVIC_EnableIRQ( FabricIrq2_IRQn );
200070de:	f04f 0024 	mov.w	r0, #36	; 0x24
200070e2:	f7ff ffa1 	bl	20007028 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c3)
200070e6:	687a      	ldr	r2, [r7, #4]
200070e8:	f24e 3318 	movw	r3, #58136	; 0xe318
200070ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070f0:	429a      	cmp	r2, r3
200070f2:	d103      	bne.n	200070fc <I2C_enable_irq+0x60>
	{
		NVIC_EnableIRQ( FabricIrq3_IRQn );
200070f4:	f04f 0025 	mov.w	r0, #37	; 0x25
200070f8:	f7ff ff96 	bl	20007028 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c4)
200070fc:	687a      	ldr	r2, [r7, #4]
200070fe:	f24e 338c 	movw	r3, #58252	; 0xe38c
20007102:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007106:	429a      	cmp	r2, r3
20007108:	d103      	bne.n	20007112 <I2C_enable_irq+0x76>
	{
		NVIC_EnableIRQ( FabricIrq4_IRQn );
2000710a:	f04f 0026 	mov.w	r0, #38	; 0x26
2000710e:	f7ff ff8b 	bl	20007028 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c5)
20007112:	687a      	ldr	r2, [r7, #4]
20007114:	f24e 23ac 	movw	r3, #58028	; 0xe2ac
20007118:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000711c:	429a      	cmp	r2, r3
2000711e:	d103      	bne.n	20007128 <I2C_enable_irq+0x8c>
	{
		NVIC_EnableIRQ( FabricIrq5_IRQn );
20007120:	f04f 0027 	mov.w	r0, #39	; 0x27
20007124:	f7ff ff80 	bl	20007028 <NVIC_EnableIRQ>
	}
}
20007128:	f107 0708 	add.w	r7, r7, #8
2000712c:	46bd      	mov	sp, r7
2000712e:	bd80      	pop	{r7, pc}

20007130 <I2C_disable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to disable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_disable_irq( i2c_instance_t * this_i2c )
{
20007130:	b580      	push	{r7, lr}
20007132:	b082      	sub	sp, #8
20007134:	af00      	add	r7, sp, #0
20007136:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
20007138:	687a      	ldr	r2, [r7, #4]
2000713a:	f24e 13d4 	movw	r3, #57812	; 0xe1d4
2000713e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007142:	429a      	cmp	r2, r3
20007144:	d103      	bne.n	2000714e <I2C_disable_irq+0x1e>
	{
		NVIC_DisableIRQ( FabricIrq0_IRQn );
20007146:	f04f 0022 	mov.w	r0, #34	; 0x22
2000714a:	f7ff ff89 	bl	20007060 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
2000714e:	687a      	ldr	r2, [r7, #4]
20007150:	f24e 2340 	movw	r3, #57920	; 0xe240
20007154:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007158:	429a      	cmp	r2, r3
2000715a:	d103      	bne.n	20007164 <I2C_disable_irq+0x34>
	{
		NVIC_DisableIRQ( FabricIrq1_IRQn );
2000715c:	f04f 0023 	mov.w	r0, #35	; 0x23
20007160:	f7ff ff7e 	bl	20007060 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c2)
20007164:	687a      	ldr	r2, [r7, #4]
20007166:	f64d 43e4 	movw	r3, #56548	; 0xdce4
2000716a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000716e:	429a      	cmp	r2, r3
20007170:	d103      	bne.n	2000717a <I2C_disable_irq+0x4a>
	{
		NVIC_DisableIRQ( FabricIrq2_IRQn );
20007172:	f04f 0024 	mov.w	r0, #36	; 0x24
20007176:	f7ff ff73 	bl	20007060 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c3)
2000717a:	687a      	ldr	r2, [r7, #4]
2000717c:	f24e 3318 	movw	r3, #58136	; 0xe318
20007180:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007184:	429a      	cmp	r2, r3
20007186:	d103      	bne.n	20007190 <I2C_disable_irq+0x60>
	{
		NVIC_DisableIRQ( FabricIrq3_IRQn );
20007188:	f04f 0025 	mov.w	r0, #37	; 0x25
2000718c:	f7ff ff68 	bl	20007060 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c4)
20007190:	687a      	ldr	r2, [r7, #4]
20007192:	f24e 338c 	movw	r3, #58252	; 0xe38c
20007196:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000719a:	429a      	cmp	r2, r3
2000719c:	d103      	bne.n	200071a6 <I2C_disable_irq+0x76>
	{
		NVIC_DisableIRQ( FabricIrq4_IRQn );
2000719e:	f04f 0026 	mov.w	r0, #38	; 0x26
200071a2:	f7ff ff5d 	bl	20007060 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c5)
200071a6:	687a      	ldr	r2, [r7, #4]
200071a8:	f24e 23ac 	movw	r3, #58028	; 0xe2ac
200071ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071b0:	429a      	cmp	r2, r3
200071b2:	d103      	bne.n	200071bc <I2C_disable_irq+0x8c>
	{
		NVIC_DisableIRQ( FabricIrq5_IRQn );
200071b4:	f04f 0027 	mov.w	r0, #39	; 0x27
200071b8:	f7ff ff52 	bl	20007060 <NVIC_DisableIRQ>
	}
}
200071bc:	f107 0708 	add.w	r7, r7, #8
200071c0:	46bd      	mov	sp, r7
200071c2:	bd80      	pop	{r7, pc}

200071c4 <SystemInit>:

/***************************************************************************//**
 * See system_m2sxxx.h for details.
 */
void SystemInit(void)
{
200071c4:	b580      	push	{r7, lr}
200071c6:	af00      	add	r7, sp, #0
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
    complete_clock_config();
200071c8:	f000 f96a 	bl	200074a0 <complete_clock_config>
#endif

    silicon_workarounds();
200071cc:	f000 f936 	bl	2000743c <silicon_workarounds>
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
200071d0:	f64e 5300 	movw	r3, #60672	; 0xed00
200071d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
200071d8:	f64e 5200 	movw	r2, #60672	; 0xed00
200071dc:	f2ce 0200 	movt	r2, #57344	; 0xe000
200071e0:	6952      	ldr	r2, [r2, #20]
200071e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
200071e6:	615a      	str	r2, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
200071e8:	f7f9 f861 	bl	200002ae <mscc_post_hw_cfg_init>
    while(!CORE_SF2_CFG->INIT_DONE)
    {
        ;   /* Wait for INIT_DONE from CoreSF2Reset. */
    }
#endif
}
200071ec:	bd80      	pop	{r7, pc}
200071ee:	bf00      	nop

200071f0 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
200071f0:	b580      	push	{r7, lr}
200071f2:	b088      	sub	sp, #32
200071f4:	af00      	add	r7, sp, #0
#if 1
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
200071f6:	f248 0300 	movw	r3, #32768	; 0x8000
200071fa:	f2c4 0303 	movt	r3, #16387	; 0x4003
200071fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20007202:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20007206:	60fb      	str	r3, [r7, #12]
    
    if(0u == controller_pll_init)
20007208:	68fb      	ldr	r3, [r7, #12]
2000720a:	2b00      	cmp	r3, #0
2000720c:	f040 808b 	bne.w	20007326 <SystemCoreClockUpdate+0x136>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;
        
        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
20007210:	f248 0300 	movw	r3, #32768	; 0x8000
20007214:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2000721c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20007220:	617b      	str	r3, [r7, #20]
        if(0u == global_mux_sel)
20007222:	697b      	ldr	r3, [r7, #20]
20007224:	2b00      	cmp	r3, #0
20007226:	d13f      	bne.n	200072a8 <SystemCoreClockUpdate+0xb8>
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
20007228:	f647 1374 	movw	r3, #31092	; 0x7974
2000722c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007230:	f24e 1200 	movw	r2, #57600	; 0xe100
20007234:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007238:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
2000723a:	f647 1378 	movw	r3, #31096	; 0x7978
2000723e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007242:	f24e 1200 	movw	r2, #57600	; 0xe100
20007246:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
2000724a:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
2000724c:	f647 137c 	movw	r3, #31100	; 0x797c
20007250:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007254:	f24e 1200 	movw	r2, #57600	; 0xe100
20007258:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
2000725c:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
2000725e:	f647 1380 	movw	r3, #31104	; 0x7980
20007262:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007266:	f24f 0280 	movw	r2, #61568	; 0xf080
2000726a:	f2c0 22fa 	movt	r2, #762	; 0x2fa
2000726e:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
20007270:	f647 1384 	movw	r3, #31108	; 0x7984
20007274:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007278:	f24e 1200 	movw	r2, #57600	; 0xe100
2000727c:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007280:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
20007282:	f647 1388 	movw	r3, #31112	; 0x7988
20007286:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000728a:	f24e 1200 	movw	r2, #57600	; 0xe100
2000728e:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007292:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
20007294:	f647 138c 	movw	r3, #31116	; 0x798c
20007298:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000729c:	f24e 1200 	movw	r2, #57600	; 0xe100
200072a0:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200072a4:	601a      	str	r2, [r3, #0]
                break;
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
200072a6:	e045      	b.n	20007334 <SystemCoreClockUpdate+0x144>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
200072a8:	f647 1308 	movw	r3, #30984	; 0x7908
200072ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200072b0:	f107 0204 	add.w	r2, r7, #4
200072b4:	e893 0003 	ldmia.w	r3, {r0, r1}
200072b8:	e882 0003 	stmia.w	r2, {r0, r1}
            
            uint32_t standby_sel;
            uint8_t clock_source;
            
            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
200072bc:	f248 0300 	movw	r3, #32768	; 0x8000
200072c0:	f2c4 0303 	movt	r3, #16387	; 0x4003
200072c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
200072c8:	ea4f 1393 	mov.w	r3, r3, lsr #6
200072cc:	f003 0307 	and.w	r3, r3, #7
200072d0:	61bb      	str	r3, [r7, #24]
            clock_source = standby_clock_lut[standby_sel];
200072d2:	69bb      	ldr	r3, [r7, #24]
200072d4:	f107 0220 	add.w	r2, r7, #32
200072d8:	4413      	add	r3, r2
200072da:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
200072de:	77fb      	strb	r3, [r7, #31]
            switch(clock_source)
200072e0:	7ffb      	ldrb	r3, [r7, #31]
200072e2:	2b01      	cmp	r3, #1
200072e4:	d00b      	beq.n	200072fe <SystemCoreClockUpdate+0x10e>
200072e6:	2b02      	cmp	r3, #2
200072e8:	d00e      	beq.n	20007308 <SystemCoreClockUpdate+0x118>
200072ea:	2b00      	cmp	r3, #0
200072ec:	d114      	bne.n	20007318 <SystemCoreClockUpdate+0x128>
            {
                case RCOSC_25_50MHZ_CLK_SRC:
                    clk_src = get_rcosc_25_50mhz_frequency();
200072ee:	f000 f825 	bl	2000733c <get_rcosc_25_50mhz_frequency>
200072f2:	4603      	mov	r3, r0
200072f4:	613b      	str	r3, [r7, #16]
                    set_clock_frequency_globals(clk_src);
200072f6:	6938      	ldr	r0, [r7, #16]
200072f8:	f000 f842 	bl	20007380 <set_clock_frequency_globals>
                break;
200072fc:	e01a      	b.n	20007334 <SystemCoreClockUpdate+0x144>
                
                case CLK_XTAL_CLK_SRC:
                    set_clock_frequency_globals(FREQ_32KHZ);
200072fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20007302:	f000 f83d 	bl	20007380 <set_clock_frequency_globals>
                break;
20007306:	e015      	b.n	20007334 <SystemCoreClockUpdate+0x144>
                
                case RCOSC_1_MHZ_CLK_SRC:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007308:	f244 2040 	movw	r0, #16960	; 0x4240
2000730c:	f2c0 000f 	movt	r0, #15
20007310:	f000 f836 	bl	20007380 <set_clock_frequency_globals>
                break;
20007314:	bf00      	nop
20007316:	e00d      	b.n	20007334 <SystemCoreClockUpdate+0x144>
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007318:	f244 2040 	movw	r0, #16960	; 0x4240
2000731c:	f2c0 000f 	movt	r0, #15
20007320:	f000 f82e 	bl	20007380 <set_clock_frequency_globals>
20007324:	e006      	b.n	20007334 <SystemCoreClockUpdate+0x144>
        }
    }
    else
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
20007326:	f000 f809 	bl	2000733c <get_rcosc_25_50mhz_frequency>
2000732a:	4603      	mov	r3, r0
2000732c:	613b      	str	r3, [r7, #16]
        set_clock_frequency_globals(clk_src);
2000732e:	6938      	ldr	r0, [r7, #16]
20007330:	f000 f826 	bl	20007380 <set_clock_frequency_globals>
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
#endif
}
20007334:	f107 0720 	add.w	r7, r7, #32
20007338:	46bd      	mov	sp, r7
2000733a:	bd80      	pop	{r7, pc}

2000733c <get_rcosc_25_50mhz_frequency>:

/***************************************************************************//**
 * Find out frequency generated by the 25_50mhz RC osciallator.
 */
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
2000733c:	b480      	push	{r7}
2000733e:	b083      	sub	sp, #12
20007340:	af00      	add	r7, sp, #0
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;
    
    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
20007342:	f248 0300 	movw	r3, #32768	; 0x8000
20007346:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000734a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2000734e:	f003 0304 	and.w	r3, r3, #4
20007352:	603b      	str	r3, [r7, #0]
    if(0u == rcosc_div2)
20007354:	683b      	ldr	r3, [r7, #0]
20007356:	2b00      	cmp	r3, #0
20007358:	d105      	bne.n	20007366 <get_rcosc_25_50mhz_frequency+0x2a>
    {
        /* 25_50mhz oscillator is configured for 25 MHz operations. */
        rcosc_frequency = FREQ_25MHZ;
2000735a:	f647 0340 	movw	r3, #30784	; 0x7840
2000735e:	f2c0 137d 	movt	r3, #381	; 0x17d
20007362:	607b      	str	r3, [r7, #4]
20007364:	e004      	b.n	20007370 <get_rcosc_25_50mhz_frequency+0x34>
    }
    else
    {
        /* 25_50mhz oscillator is configured for 50 MHz operations. */
        rcosc_frequency = FREQ_50MHZ;
20007366:	f24f 0380 	movw	r3, #61568	; 0xf080
2000736a:	f2c0 23fa 	movt	r3, #762	; 0x2fa
2000736e:	607b      	str	r3, [r7, #4]
    }
    
    return rcosc_frequency;
20007370:	687b      	ldr	r3, [r7, #4]
}
20007372:	4618      	mov	r0, r3
20007374:	f107 070c 	add.w	r7, r7, #12
20007378:	46bd      	mov	sp, r7
2000737a:	bc80      	pop	{r7}
2000737c:	4770      	bx	lr
2000737e:	bf00      	nop

20007380 <set_clock_frequency_globals>:
        - g_FrequencyFIC0
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
20007380:	b480      	push	{r7}
20007382:	b083      	sub	sp, #12
20007384:	af00      	add	r7, sp, #0
20007386:	6078      	str	r0, [r7, #4]
    SystemCoreClock = standby_clk;
20007388:	f647 1374 	movw	r3, #31092	; 0x7974
2000738c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007390:	687a      	ldr	r2, [r7, #4]
20007392:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = standby_clk;
20007394:	f647 1378 	movw	r3, #31096	; 0x7978
20007398:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000739c:	687a      	ldr	r2, [r7, #4]
2000739e:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = standby_clk;
200073a0:	f647 137c 	movw	r3, #31100	; 0x797c
200073a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200073a8:	687a      	ldr	r2, [r7, #4]
200073aa:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
200073ac:	f647 1380 	movw	r3, #31104	; 0x7980
200073b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200073b4:	f24f 0280 	movw	r2, #61568	; 0xf080
200073b8:	f2c0 22fa 	movt	r2, #762	; 0x2fa
200073bc:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC0 = standby_clk;
200073be:	f647 1384 	movw	r3, #31108	; 0x7984
200073c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200073c6:	687a      	ldr	r2, [r7, #4]
200073c8:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC1 = standby_clk;
200073ca:	f647 1388 	movw	r3, #31112	; 0x7988
200073ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200073d2:	687a      	ldr	r2, [r7, #4]
200073d4:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC64 = standby_clk;
200073d6:	f647 138c 	movw	r3, #31116	; 0x798c
200073da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200073de:	687a      	ldr	r2, [r7, #4]
200073e0:	601a      	str	r2, [r3, #0]
}
200073e2:	f107 070c 	add.w	r7, r7, #12
200073e6:	46bd      	mov	sp, r7
200073e8:	bc80      	pop	{r7}
200073ea:	4770      	bx	lr

200073ec <get_silicon_revision>:

/*------------------------------------------------------------------------------
  Retrieve silicon revision from system registers.
 */
static uint32_t get_silicon_revision(void)
{
200073ec:	b480      	push	{r7}
200073ee:	b083      	sub	sp, #12
200073f0:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    uint32_t device_version;
    
    device_version = SYSREG->DEVICE_VERSION;
200073f2:	f248 0300 	movw	r3, #32768	; 0x8000
200073f6:	f2c4 0303 	movt	r3, #16387	; 0x4003
200073fa:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
200073fe:	607b      	str	r3, [r7, #4]
    switch(device_version)
20007400:	687a      	ldr	r2, [r7, #4]
20007402:	f64f 0302 	movw	r3, #63490	; 0xf802
20007406:	429a      	cmp	r2, r3
20007408:	d006      	beq.n	20007418 <get_silicon_revision+0x2c>
2000740a:	f64f 0302 	movw	r3, #63490	; 0xf802
2000740e:	f2c0 0301 	movt	r3, #1
20007412:	429a      	cmp	r2, r3
20007414:	d004      	beq.n	20007420 <get_silicon_revision+0x34>
20007416:	e007      	b.n	20007428 <get_silicon_revision+0x3c>
    {
        case 0x0000F802:
            silicon_revision = M2S050_REV_A_SILICON;
20007418:	f04f 0301 	mov.w	r3, #1
2000741c:	603b      	str	r3, [r7, #0]
            break;
2000741e:	e006      	b.n	2000742e <get_silicon_revision+0x42>
            
        case 0x0001F802:
            silicon_revision = M2S050_REV_B_SILICON;
20007420:	f04f 0302 	mov.w	r3, #2
20007424:	603b      	str	r3, [r7, #0]
            break;
20007426:	e002      	b.n	2000742e <get_silicon_revision+0x42>
            
        default:
            silicon_revision = UNKNOWN_SILICON_REV;
20007428:	f04f 0300 	mov.w	r3, #0
2000742c:	603b      	str	r3, [r7, #0]
            break;
    }
    
    return silicon_revision;
2000742e:	683b      	ldr	r3, [r7, #0]
}
20007430:	4618      	mov	r0, r3
20007432:	f107 070c 	add.w	r7, r7, #12
20007436:	46bd      	mov	sp, r7
20007438:	bc80      	pop	{r7}
2000743a:	4770      	bx	lr

2000743c <silicon_workarounds>:

/*------------------------------------------------------------------------------
  Workarounds for various silicon versions.
 */
static void silicon_workarounds(void)
{
2000743c:	b580      	push	{r7, lr}
2000743e:	b082      	sub	sp, #8
20007440:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    
    silicon_revision = get_silicon_revision();
20007442:	f7ff ffd3 	bl	200073ec <get_silicon_revision>
20007446:	4603      	mov	r3, r0
20007448:	607b      	str	r3, [r7, #4]
    
    switch(silicon_revision)
2000744a:	687b      	ldr	r3, [r7, #4]
2000744c:	2b01      	cmp	r3, #1
2000744e:	d101      	bne.n	20007454 <silicon_workarounds+0x18>
    {
        case M2S050_REV_A_SILICON:
            m2s050_rev_a_workarounds();
20007450:	f000 f804 	bl	2000745c <m2s050_rev_a_workarounds>
        case UNKNOWN_SILICON_REV:
            /* Fall through. */
        default:
            break;
    }
}
20007454:	f107 0708 	add.w	r7, r7, #8
20007458:	46bd      	mov	sp, r7
2000745a:	bd80      	pop	{r7, pc}

2000745c <m2s050_rev_a_workarounds>:

/*------------------------------------------------------------------------------
  Silicon workarounds for M2S050 rev A.
 */
static void m2s050_rev_a_workarounds(void)
{
2000745c:	b480      	push	{r7}
2000745e:	af00      	add	r7, sp, #0
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
20007460:	f248 0300 	movw	r3, #32768	; 0x8000
20007464:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007468:	f248 0200 	movw	r2, #32768	; 0x8000
2000746c:	f2c4 0203 	movt	r2, #16387	; 0x4003
20007470:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20007474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20007478:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
2000747c:	f248 0300 	movw	r3, #32768	; 0x8000
20007480:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007484:	f248 0200 	movw	r2, #32768	; 0x8000
20007488:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000748c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20007490:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
20007494:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
20007498:	46bd      	mov	sp, r7
2000749a:	bc80      	pop	{r7}
2000749c:	4770      	bx	lr
2000749e:	bf00      	nop

200074a0 <complete_clock_config>:
/*------------------------------------------------------------------------------
  Complete clock configuration if requested by Libero.
 */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
static void complete_clock_config(void)
{
200074a0:	b480      	push	{r7}
200074a2:	b083      	sub	sp, #12
200074a4:	af00      	add	r7, sp, #0
    uint32_t pll_locked;
    
    /* Wait for fabric PLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & FAB_PLL_LOCK_MASK;
200074a6:	f248 0300 	movw	r3, #32768	; 0x8000
200074aa:	f2c4 0303 	movt	r3, #16387	; 0x4003
200074ae:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
200074b2:	f003 0301 	and.w	r3, r3, #1
200074b6:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
200074b8:	687b      	ldr	r3, [r7, #4]
200074ba:	2b00      	cmp	r3, #0
200074bc:	d0f3      	beq.n	200074a6 <complete_clock_config+0x6>
    
    /* Negate MPLL bypass. */
    SYSREG->MSSDDR_PLL_STATUS_HIGH_CR &= ~FACC_PLL_BYPASS_MASK;
200074be:	f248 0300 	movw	r3, #32768	; 0x8000
200074c2:	f2c4 0303 	movt	r3, #16387	; 0x4003
200074c6:	f248 0200 	movw	r2, #32768	; 0x8000
200074ca:	f2c4 0203 	movt	r2, #16387	; 0x4003
200074ce:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
200074d2:	f022 0201 	bic.w	r2, r2, #1
200074d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    
    /* Wait for MPLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & MPLL_LOCK_MASK;
200074da:	f248 0300 	movw	r3, #32768	; 0x8000
200074de:	f2c4 0303 	movt	r3, #16387	; 0x4003
200074e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
200074e6:	f003 0302 	and.w	r3, r3, #2
200074ea:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
200074ec:	687b      	ldr	r3, [r7, #4]
200074ee:	2b00      	cmp	r3, #0
200074f0:	d0f3      	beq.n	200074da <complete_clock_config+0x3a>
    
    /* Switch FACC from standby to run mode. */
    SYSREG->MSSDDR_FACC1_CR &= ~FACC_GLMUX_SEL_MASK;
200074f2:	f248 0300 	movw	r3, #32768	; 0x8000
200074f6:	f2c4 0303 	movt	r3, #16387	; 0x4003
200074fa:	f248 0200 	movw	r2, #32768	; 0x8000
200074fe:	f2c4 0203 	movt	r2, #16387	; 0x4003
20007502:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20007506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2000750a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* Negate FPGA_SOFTRESET to de-assert MSS_RESET_N_M2F in the fabric */
    SYSREG->SOFT_RST_CR &= ~SYSREG_FPGA_SOFTRESET_MASK;
2000750e:	f248 0300 	movw	r3, #32768	; 0x8000
20007512:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007516:	f248 0200 	movw	r2, #32768	; 0x8000
2000751a:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000751e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20007520:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20007524:	649a      	str	r2, [r3, #72]	; 0x48
}
20007526:	f107 070c 	add.w	r7, r7, #12
2000752a:	46bd      	mov	sp, r7
2000752c:	bc80      	pop	{r7}
2000752e:	4770      	bx	lr

20007530 <HAL_disable_interrupts>:
20007530:	f3ef 8010 	mrs	r0, PRIMASK
20007534:	b672      	cpsid	i
20007536:	4770      	bx	lr

20007538 <HAL_restore_interrupts>:
20007538:	f380 8810 	msr	PRIMASK, r0
2000753c:	4770      	bx	lr

2000753e <HW_set_32bit_reg>:
2000753e:	6001      	str	r1, [r0, #0]
20007540:	4770      	bx	lr

20007542 <HW_get_32bit_reg>:
20007542:	6800      	ldr	r0, [r0, #0]
20007544:	4770      	bx	lr

20007546 <HW_set_32bit_reg_field>:
20007546:	b50e      	push	{r1, r2, r3, lr}
20007548:	fa03 f301 	lsl.w	r3, r3, r1
2000754c:	ea03 0302 	and.w	r3, r3, r2
20007550:	6801      	ldr	r1, [r0, #0]
20007552:	ea6f 0202 	mvn.w	r2, r2
20007556:	ea01 0102 	and.w	r1, r1, r2
2000755a:	ea41 0103 	orr.w	r1, r1, r3
2000755e:	6001      	str	r1, [r0, #0]
20007560:	bd0e      	pop	{r1, r2, r3, pc}

20007562 <HW_get_32bit_reg_field>:
20007562:	6800      	ldr	r0, [r0, #0]
20007564:	ea00 0002 	and.w	r0, r0, r2
20007568:	fa20 f001 	lsr.w	r0, r0, r1
2000756c:	4770      	bx	lr

2000756e <HW_set_16bit_reg>:
2000756e:	8001      	strh	r1, [r0, #0]
20007570:	4770      	bx	lr

20007572 <HW_get_16bit_reg>:
20007572:	8800      	ldrh	r0, [r0, #0]
20007574:	4770      	bx	lr

20007576 <HW_set_16bit_reg_field>:
20007576:	b50e      	push	{r1, r2, r3, lr}
20007578:	fa03 f301 	lsl.w	r3, r3, r1
2000757c:	ea03 0302 	and.w	r3, r3, r2
20007580:	8801      	ldrh	r1, [r0, #0]
20007582:	ea6f 0202 	mvn.w	r2, r2
20007586:	ea01 0102 	and.w	r1, r1, r2
2000758a:	ea41 0103 	orr.w	r1, r1, r3
2000758e:	8001      	strh	r1, [r0, #0]
20007590:	bd0e      	pop	{r1, r2, r3, pc}

20007592 <HW_get_16bit_reg_field>:
20007592:	8800      	ldrh	r0, [r0, #0]
20007594:	ea00 0002 	and.w	r0, r0, r2
20007598:	fa20 f001 	lsr.w	r0, r0, r1
2000759c:	4770      	bx	lr

2000759e <HW_set_8bit_reg>:
2000759e:	7001      	strb	r1, [r0, #0]
200075a0:	4770      	bx	lr

200075a2 <HW_get_8bit_reg>:
200075a2:	7800      	ldrb	r0, [r0, #0]
200075a4:	4770      	bx	lr

200075a6 <HW_set_8bit_reg_field>:
200075a6:	b50e      	push	{r1, r2, r3, lr}
200075a8:	fa03 f301 	lsl.w	r3, r3, r1
200075ac:	ea03 0302 	and.w	r3, r3, r2
200075b0:	7801      	ldrb	r1, [r0, #0]
200075b2:	ea6f 0202 	mvn.w	r2, r2
200075b6:	ea01 0102 	and.w	r1, r1, r2
200075ba:	ea41 0103 	orr.w	r1, r1, r3
200075be:	7001      	strb	r1, [r0, #0]
200075c0:	bd0e      	pop	{r1, r2, r3, pc}

200075c2 <HW_get_8bit_reg_field>:
200075c2:	7800      	ldrb	r0, [r0, #0]
200075c4:	ea00 0002 	and.w	r0, r0, r2
200075c8:	fa20 f001 	lsr.w	r0, r0, r1
200075cc:	4770      	bx	lr
	...

200075d0 <__libc_init_array>:
200075d0:	b570      	push	{r4, r5, r6, lr}
200075d2:	f647 1628 	movw	r6, #31016	; 0x7928
200075d6:	f647 1528 	movw	r5, #31016	; 0x7928
200075da:	f2c2 0600 	movt	r6, #8192	; 0x2000
200075de:	f2c2 0500 	movt	r5, #8192	; 0x2000
200075e2:	1b76      	subs	r6, r6, r5
200075e4:	10b6      	asrs	r6, r6, #2
200075e6:	d006      	beq.n	200075f6 <__libc_init_array+0x26>
200075e8:	2400      	movs	r4, #0
200075ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200075ee:	3401      	adds	r4, #1
200075f0:	4798      	blx	r3
200075f2:	42a6      	cmp	r6, r4
200075f4:	d8f9      	bhi.n	200075ea <__libc_init_array+0x1a>
200075f6:	f647 1528 	movw	r5, #31016	; 0x7928
200075fa:	f647 162c 	movw	r6, #31020	; 0x792c
200075fe:	f2c2 0500 	movt	r5, #8192	; 0x2000
20007602:	f2c2 0600 	movt	r6, #8192	; 0x2000
20007606:	1b76      	subs	r6, r6, r5
20007608:	f000 f982 	bl	20007910 <_init>
2000760c:	10b6      	asrs	r6, r6, #2
2000760e:	d006      	beq.n	2000761e <__libc_init_array+0x4e>
20007610:	2400      	movs	r4, #0
20007612:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20007616:	3401      	adds	r4, #1
20007618:	4798      	blx	r3
2000761a:	42a6      	cmp	r6, r4
2000761c:	d8f9      	bhi.n	20007612 <__libc_init_array+0x42>
2000761e:	bd70      	pop	{r4, r5, r6, pc}

20007620 <memcpy>:
20007620:	2a03      	cmp	r2, #3
20007622:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
20007626:	d80b      	bhi.n	20007640 <memcpy+0x20>
20007628:	b13a      	cbz	r2, 2000763a <memcpy+0x1a>
2000762a:	2300      	movs	r3, #0
2000762c:	f811 c003 	ldrb.w	ip, [r1, r3]
20007630:	f800 c003 	strb.w	ip, [r0, r3]
20007634:	3301      	adds	r3, #1
20007636:	4293      	cmp	r3, r2
20007638:	d1f8      	bne.n	2000762c <memcpy+0xc>
2000763a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
2000763e:	4770      	bx	lr
20007640:	1882      	adds	r2, r0, r2
20007642:	460c      	mov	r4, r1
20007644:	4603      	mov	r3, r0
20007646:	e003      	b.n	20007650 <memcpy+0x30>
20007648:	f814 1c01 	ldrb.w	r1, [r4, #-1]
2000764c:	f803 1c01 	strb.w	r1, [r3, #-1]
20007650:	f003 0603 	and.w	r6, r3, #3
20007654:	4619      	mov	r1, r3
20007656:	46a4      	mov	ip, r4
20007658:	3301      	adds	r3, #1
2000765a:	3401      	adds	r4, #1
2000765c:	2e00      	cmp	r6, #0
2000765e:	d1f3      	bne.n	20007648 <memcpy+0x28>
20007660:	f01c 0403 	ands.w	r4, ip, #3
20007664:	4663      	mov	r3, ip
20007666:	bf08      	it	eq
20007668:	ebc1 0c02 	rsbeq	ip, r1, r2
2000766c:	d068      	beq.n	20007740 <memcpy+0x120>
2000766e:	4265      	negs	r5, r4
20007670:	f1c4 0a04 	rsb	sl, r4, #4
20007674:	eb0c 0705 	add.w	r7, ip, r5
20007678:	4633      	mov	r3, r6
2000767a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
2000767e:	f85c 6005 	ldr.w	r6, [ip, r5]
20007682:	ea4f 08c4 	mov.w	r8, r4, lsl #3
20007686:	1a55      	subs	r5, r2, r1
20007688:	e008      	b.n	2000769c <memcpy+0x7c>
2000768a:	f857 4f04 	ldr.w	r4, [r7, #4]!
2000768e:	4626      	mov	r6, r4
20007690:	fa04 f40a 	lsl.w	r4, r4, sl
20007694:	ea49 0404 	orr.w	r4, r9, r4
20007698:	50cc      	str	r4, [r1, r3]
2000769a:	3304      	adds	r3, #4
2000769c:	185c      	adds	r4, r3, r1
2000769e:	2d03      	cmp	r5, #3
200076a0:	fa26 f908 	lsr.w	r9, r6, r8
200076a4:	f1a5 0504 	sub.w	r5, r5, #4
200076a8:	eb0c 0603 	add.w	r6, ip, r3
200076ac:	dced      	bgt.n	2000768a <memcpy+0x6a>
200076ae:	2300      	movs	r3, #0
200076b0:	e002      	b.n	200076b8 <memcpy+0x98>
200076b2:	5cf1      	ldrb	r1, [r6, r3]
200076b4:	54e1      	strb	r1, [r4, r3]
200076b6:	3301      	adds	r3, #1
200076b8:	1919      	adds	r1, r3, r4
200076ba:	4291      	cmp	r1, r2
200076bc:	d3f9      	bcc.n	200076b2 <memcpy+0x92>
200076be:	e7bc      	b.n	2000763a <memcpy+0x1a>
200076c0:	f853 4c40 	ldr.w	r4, [r3, #-64]
200076c4:	f841 4c40 	str.w	r4, [r1, #-64]
200076c8:	f853 4c3c 	ldr.w	r4, [r3, #-60]
200076cc:	f841 4c3c 	str.w	r4, [r1, #-60]
200076d0:	f853 4c38 	ldr.w	r4, [r3, #-56]
200076d4:	f841 4c38 	str.w	r4, [r1, #-56]
200076d8:	f853 4c34 	ldr.w	r4, [r3, #-52]
200076dc:	f841 4c34 	str.w	r4, [r1, #-52]
200076e0:	f853 4c30 	ldr.w	r4, [r3, #-48]
200076e4:	f841 4c30 	str.w	r4, [r1, #-48]
200076e8:	f853 4c2c 	ldr.w	r4, [r3, #-44]
200076ec:	f841 4c2c 	str.w	r4, [r1, #-44]
200076f0:	f853 4c28 	ldr.w	r4, [r3, #-40]
200076f4:	f841 4c28 	str.w	r4, [r1, #-40]
200076f8:	f853 4c24 	ldr.w	r4, [r3, #-36]
200076fc:	f841 4c24 	str.w	r4, [r1, #-36]
20007700:	f853 4c20 	ldr.w	r4, [r3, #-32]
20007704:	f841 4c20 	str.w	r4, [r1, #-32]
20007708:	f853 4c1c 	ldr.w	r4, [r3, #-28]
2000770c:	f841 4c1c 	str.w	r4, [r1, #-28]
20007710:	f853 4c18 	ldr.w	r4, [r3, #-24]
20007714:	f841 4c18 	str.w	r4, [r1, #-24]
20007718:	f853 4c14 	ldr.w	r4, [r3, #-20]
2000771c:	f841 4c14 	str.w	r4, [r1, #-20]
20007720:	f853 4c10 	ldr.w	r4, [r3, #-16]
20007724:	f841 4c10 	str.w	r4, [r1, #-16]
20007728:	f853 4c0c 	ldr.w	r4, [r3, #-12]
2000772c:	f841 4c0c 	str.w	r4, [r1, #-12]
20007730:	f853 4c08 	ldr.w	r4, [r3, #-8]
20007734:	f841 4c08 	str.w	r4, [r1, #-8]
20007738:	f853 4c04 	ldr.w	r4, [r3, #-4]
2000773c:	f841 4c04 	str.w	r4, [r1, #-4]
20007740:	461c      	mov	r4, r3
20007742:	460d      	mov	r5, r1
20007744:	3340      	adds	r3, #64	; 0x40
20007746:	3140      	adds	r1, #64	; 0x40
20007748:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2000774c:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
20007750:	dcb6      	bgt.n	200076c0 <memcpy+0xa0>
20007752:	4621      	mov	r1, r4
20007754:	462b      	mov	r3, r5
20007756:	1b54      	subs	r4, r2, r5
20007758:	e00f      	b.n	2000777a <memcpy+0x15a>
2000775a:	f851 5c10 	ldr.w	r5, [r1, #-16]
2000775e:	f843 5c10 	str.w	r5, [r3, #-16]
20007762:	f851 5c0c 	ldr.w	r5, [r1, #-12]
20007766:	f843 5c0c 	str.w	r5, [r3, #-12]
2000776a:	f851 5c08 	ldr.w	r5, [r1, #-8]
2000776e:	f843 5c08 	str.w	r5, [r3, #-8]
20007772:	f851 5c04 	ldr.w	r5, [r1, #-4]
20007776:	f843 5c04 	str.w	r5, [r3, #-4]
2000777a:	2c0f      	cmp	r4, #15
2000777c:	460d      	mov	r5, r1
2000777e:	469c      	mov	ip, r3
20007780:	f101 0110 	add.w	r1, r1, #16
20007784:	f103 0310 	add.w	r3, r3, #16
20007788:	f1a4 0410 	sub.w	r4, r4, #16
2000778c:	dce5      	bgt.n	2000775a <memcpy+0x13a>
2000778e:	ebcc 0102 	rsb	r1, ip, r2
20007792:	2300      	movs	r3, #0
20007794:	e003      	b.n	2000779e <memcpy+0x17e>
20007796:	58ec      	ldr	r4, [r5, r3]
20007798:	f84c 4003 	str.w	r4, [ip, r3]
2000779c:	3304      	adds	r3, #4
2000779e:	195e      	adds	r6, r3, r5
200077a0:	2903      	cmp	r1, #3
200077a2:	eb03 040c 	add.w	r4, r3, ip
200077a6:	f1a1 0104 	sub.w	r1, r1, #4
200077aa:	dcf4      	bgt.n	20007796 <memcpy+0x176>
200077ac:	e77f      	b.n	200076ae <memcpy+0x8e>
200077ae:	bf00      	nop

200077b0 <memset>:
200077b0:	2a03      	cmp	r2, #3
200077b2:	b2c9      	uxtb	r1, r1
200077b4:	b430      	push	{r4, r5}
200077b6:	d807      	bhi.n	200077c8 <memset+0x18>
200077b8:	b122      	cbz	r2, 200077c4 <memset+0x14>
200077ba:	2300      	movs	r3, #0
200077bc:	54c1      	strb	r1, [r0, r3]
200077be:	3301      	adds	r3, #1
200077c0:	4293      	cmp	r3, r2
200077c2:	d1fb      	bne.n	200077bc <memset+0xc>
200077c4:	bc30      	pop	{r4, r5}
200077c6:	4770      	bx	lr
200077c8:	eb00 0c02 	add.w	ip, r0, r2
200077cc:	4603      	mov	r3, r0
200077ce:	e001      	b.n	200077d4 <memset+0x24>
200077d0:	f803 1c01 	strb.w	r1, [r3, #-1]
200077d4:	f003 0403 	and.w	r4, r3, #3
200077d8:	461a      	mov	r2, r3
200077da:	3301      	adds	r3, #1
200077dc:	2c00      	cmp	r4, #0
200077de:	d1f7      	bne.n	200077d0 <memset+0x20>
200077e0:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
200077e4:	ebc2 040c 	rsb	r4, r2, ip
200077e8:	fb03 f301 	mul.w	r3, r3, r1
200077ec:	e01f      	b.n	2000782e <memset+0x7e>
200077ee:	f842 3c40 	str.w	r3, [r2, #-64]
200077f2:	f842 3c3c 	str.w	r3, [r2, #-60]
200077f6:	f842 3c38 	str.w	r3, [r2, #-56]
200077fa:	f842 3c34 	str.w	r3, [r2, #-52]
200077fe:	f842 3c30 	str.w	r3, [r2, #-48]
20007802:	f842 3c2c 	str.w	r3, [r2, #-44]
20007806:	f842 3c28 	str.w	r3, [r2, #-40]
2000780a:	f842 3c24 	str.w	r3, [r2, #-36]
2000780e:	f842 3c20 	str.w	r3, [r2, #-32]
20007812:	f842 3c1c 	str.w	r3, [r2, #-28]
20007816:	f842 3c18 	str.w	r3, [r2, #-24]
2000781a:	f842 3c14 	str.w	r3, [r2, #-20]
2000781e:	f842 3c10 	str.w	r3, [r2, #-16]
20007822:	f842 3c0c 	str.w	r3, [r2, #-12]
20007826:	f842 3c08 	str.w	r3, [r2, #-8]
2000782a:	f842 3c04 	str.w	r3, [r2, #-4]
2000782e:	4615      	mov	r5, r2
20007830:	3240      	adds	r2, #64	; 0x40
20007832:	2c3f      	cmp	r4, #63	; 0x3f
20007834:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20007838:	dcd9      	bgt.n	200077ee <memset+0x3e>
2000783a:	462a      	mov	r2, r5
2000783c:	ebc5 040c 	rsb	r4, r5, ip
20007840:	e007      	b.n	20007852 <memset+0xa2>
20007842:	f842 3c10 	str.w	r3, [r2, #-16]
20007846:	f842 3c0c 	str.w	r3, [r2, #-12]
2000784a:	f842 3c08 	str.w	r3, [r2, #-8]
2000784e:	f842 3c04 	str.w	r3, [r2, #-4]
20007852:	4615      	mov	r5, r2
20007854:	3210      	adds	r2, #16
20007856:	2c0f      	cmp	r4, #15
20007858:	f1a4 0410 	sub.w	r4, r4, #16
2000785c:	dcf1      	bgt.n	20007842 <memset+0x92>
2000785e:	462a      	mov	r2, r5
20007860:	ebc5 050c 	rsb	r5, r5, ip
20007864:	e001      	b.n	2000786a <memset+0xba>
20007866:	f842 3c04 	str.w	r3, [r2, #-4]
2000786a:	4614      	mov	r4, r2
2000786c:	3204      	adds	r2, #4
2000786e:	2d03      	cmp	r5, #3
20007870:	f1a5 0504 	sub.w	r5, r5, #4
20007874:	dcf7      	bgt.n	20007866 <memset+0xb6>
20007876:	e001      	b.n	2000787c <memset+0xcc>
20007878:	f804 1b01 	strb.w	r1, [r4], #1
2000787c:	4564      	cmp	r4, ip
2000787e:	d3fb      	bcc.n	20007878 <memset+0xc8>
20007880:	e7a0      	b.n	200077c4 <memset+0x14>
20007882:	bf00      	nop

20007884 <C.48.4660>:
20007884:	6a10 0000                                   .j..

20007888 <C.40.4595>:
20007888:	6020 0000 6d63 5f64 6974 656d 0072 0000      `..cmd_timer...
20007898:	4449 454c 0000 0000 2509 0963 7525 2509     IDLE.....%c.%u.%
200078a8:	0975 7525 0a0d 0000 2509 0975 2509 2575     u.%u.....%u..%u%
200078b8:	0d25 000a 2509 0975 3c09 2531 0d25 000a     %....%u..<1%%...
200078c8:	6d54 2072 7653 0063                         Tmr Svc.

200078d0 <xHeapStructSize>:
200078d0:	0008 0000                                   ....

200078d4 <pcInterruptPriorityRegisters>:
200078d4:	e3f0 e000 4b48 0000 6150 6c79 616f 0064     ....HK..Payload.
200078e4:	6175 7472 695f 7172 0000 0000 4b50 5f54     uart_irq....PKT_
200078f4:	6954 656d 0072 0000                         Timer...

200078fc <C.138.6388>:
200078fc:	0020 000f                                    ...

20007900 <C.139.6389>:
20007900:	0030 0001                                   0...

20007904 <C.140.6390>:
20007904:	0028 0001                                   (...

20007908 <C.18.3459>:
20007908:	0100 0100 0202 0303                         ........

20007910 <_init>:
20007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20007912:	bf00      	nop
20007914:	bcf8      	pop	{r3, r4, r5, r6, r7}
20007916:	bc08      	pop	{r3}
20007918:	469e      	mov	lr, r3
2000791a:	4770      	bx	lr

2000791c <_fini>:
2000791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000791e:	bf00      	nop
20007920:	bcf8      	pop	{r3, r4, r5, r6, r7}
20007922:	bc08      	pop	{r3}
20007924:	469e      	mov	lr, r3
20007926:	4770      	bx	lr

20007928 <__frame_dummy_init_array_entry>:
20007928:	0305 2000                                   ... 

2000792c <__do_global_dtors_aux_fini_array_entry>:
2000792c:	02f1 2000                                   ... 
