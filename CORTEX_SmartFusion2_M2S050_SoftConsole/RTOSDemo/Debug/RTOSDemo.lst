
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007880  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  20007880  20007880  0000f880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006b50  200078e0  200078e0  0000f8e0  2**2
                  ALLOC
  3 .stack        00000400  2000e430  2000e430  0000f8e0  2**0
                  ALLOC
  4 .comment      0000045e  00000000  00000000  0000f8e0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000bf8  00000000  00000000  0000fd3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001ea5  00000000  00000000  00010936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f07c  00000000  00000000  000127db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002533  00000000  00000000  00021857  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001210d  00000000  00000000  00023d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000027b0  00000000  00000000  00035e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004bfd  00000000  00000000  00038648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000041c6  00000000  00000000  0003d245  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000cd5ef  00000000  00000000  0004140b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0010e9fa  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000b70  00000000  00000000  0010ea1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	20004421 	.word	0x20004421
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	20004651 	.word	0x20004651
2000003c:	200046a1 	.word	0x200046a1
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20000213 	.word	0x20000213
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20000219 	.word	0x20000219
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	20005915 	.word	0x20005915
2000006c:	20005939 	.word	0x20005939
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	20005465 	.word	0x20005465
200000cc:	20005479 	.word	0x20005479
200000d0:	2000548d 	.word	0x2000548d
200000d4:	200054a1 	.word	0x200054a1
200000d8:	200054b5 	.word	0x200054b5
200000dc:	200054c9 	.word	0x200054c9
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>

20000212 <I2C0_IRQHandler>:
20000212:	e7fe      	b.n	20000212 <I2C0_IRQHandler>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>

20000218 <I2C1_IRQHandler>:
20000218:	e7fe      	b.n	20000218 <I2C1_IRQHandler>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	20007115 	.word	0x20007115
200002b4:	00000000 	.word	0x00000000
200002b8:	20000000 	.word	0x20000000
200002bc:	20000000 	.word	0x20000000
200002c0:	20007880 	.word	0x20007880
200002c4:	20007880 	.word	0x20007880
200002c8:	20007880 	.word	0x20007880
200002cc:	200078e0 	.word	0x200078e0
200002d0:	00000000 	.word	0x00000000
200002d4:	200078e0 	.word	0x200078e0
200002d8:	2000e430 	.word	0x2000e430
200002dc:	20007521 	.word	0x20007521
200002e0:	2000040d 	.word	0x2000040d
	...

200002f0 <__do_global_dtors_aux>:
200002f0:	f647 03e0 	movw	r3, #30944	; 0x78e0
200002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	b90a      	cbnz	r2, 20000300 <__do_global_dtors_aux+0x10>
200002fc:	2001      	movs	r0, #1
200002fe:	7018      	strb	r0, [r3, #0]
20000300:	4770      	bx	lr
20000302:	bf00      	nop

20000304 <frame_dummy>:
20000304:	f647 0080 	movw	r0, #30848	; 0x7880
20000308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000030c:	b508      	push	{r3, lr}
2000030e:	6803      	ldr	r3, [r0, #0]
20000310:	b12b      	cbz	r3, 2000031e <frame_dummy+0x1a>
20000312:	f240 0300 	movw	r3, #0
20000316:	f2c0 0300 	movt	r3, #0
2000031a:	b103      	cbz	r3, 2000031e <frame_dummy+0x1a>
2000031c:	4798      	blx	r3
2000031e:	bd08      	pop	{r3, pc}

20000320 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
20000320:	b480      	push	{r7}
20000322:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
20000324:	f64e 53fc 	movw	r3, #60924	; 0xedfc
20000328:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000032c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
20000330:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000334:	6812      	ldr	r2, [r2, #0]
20000336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2000033a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
2000033c:	f241 0304 	movw	r3, #4100	; 0x1004
20000340:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000344:	f04f 0200 	mov.w	r2, #0
20000348:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
2000034a:	f241 0300 	movw	r3, #4096	; 0x1000
2000034e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000352:	f241 0200 	movw	r2, #4096	; 0x1000
20000356:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000035a:	6812      	ldr	r2, [r2, #0]
2000035c:	f042 0201 	orr.w	r2, r2, #1
20000360:	601a      	str	r2, [r3, #0]
}
20000362:	46bd      	mov	sp, r7
20000364:	bc80      	pop	{r7}
20000366:	4770      	bx	lr

20000368 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
20000368:	b480      	push	{r7}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
2000036e:	f241 0304 	movw	r3, #4100	; 0x1004
20000372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
2000037a:	f647 03e4 	movw	r3, #30948	; 0x78e4
2000037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	687a      	ldr	r2, [r7, #4]
20000386:	429a      	cmp	r2, r3
20000388:	d20b      	bcs.n	200003a2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
2000038a:	f647 03e8 	movw	r3, #30952	; 0x78e8
2000038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	f103 0201 	add.w	r2, r3, #1
20000398:	f647 03e8 	movw	r3, #30952	; 0x78e8
2000039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003a0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
200003a2:	f647 03e4 	movw	r3, #30948	; 0x78e4
200003a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003aa:	687a      	ldr	r2, [r7, #4]
200003ac:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
200003ae:	f647 03c4 	movw	r3, #30916	; 0x78c4
200003b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003b6:	681a      	ldr	r2, [r3, #0]
200003b8:	f641 537f 	movw	r3, #7551	; 0x1d7f
200003bc:	f2c0 432c 	movt	r3, #1068	; 0x42c
200003c0:	429a      	cmp	r2, r3
200003c2:	d80e      	bhi.n	200003e2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	ea4f 3353 	mov.w	r3, r3, lsr #13
200003ca:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
200003cc:	f647 03e8 	movw	r3, #30952	; 0x78e8
200003d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
200003da:	687a      	ldr	r2, [r7, #4]
200003dc:	4413      	add	r3, r2
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e00d      	b.n	200003fe <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	ea4f 3393 	mov.w	r3, r3, lsr #14
200003e8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
200003ea:	f647 03e8 	movw	r3, #30952	; 0x78e8
200003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	ea4f 4383 	mov.w	r3, r3, lsl #18
200003f8:	687a      	ldr	r2, [r7, #4]
200003fa:	4413      	add	r3, r2
200003fc:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
200003fe:	687b      	ldr	r3, [r7, #4]
}
20000400:	4618      	mov	r0, r3
20000402:	f107 070c 	add.w	r7, r7, #12
20000406:	46bd      	mov	sp, r7
20000408:	bc80      	pop	{r7}
2000040a:	4770      	bx	lr

2000040c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
		//main_blinky();


//		demo();

		demo_tasks();
20000410:	f004 fe72 	bl	200050f8 <demo_tasks>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
20000414:	f04f 0300 	mov.w	r3, #0
}
20000418:	4618      	mov	r0, r3
2000041a:	bd80      	pop	{r7, pc}

2000041c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
2000041c:	b480      	push	{r7}
2000041e:	b083      	sub	sp, #12
20000420:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000426:	f383 8811 	msr	BASEPRI, r3
2000042a:	f3bf 8f6f 	isb	sy
2000042e:	f3bf 8f4f 	dsb	sy
20000432:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000434:	e7fe      	b.n	20000434 <vApplicationMallocFailedHook+0x18>
20000436:	bf00      	nop

20000438 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
20000438:	b480      	push	{r7}
2000043a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
2000043c:	46bd      	mov	sp, r7
2000043e:	bc80      	pop	{r7}
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
20000444:	b480      	push	{r7}
20000446:	b085      	sub	sp, #20
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
2000044c:	6039      	str	r1, [r7, #0]
2000044e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000452:	f383 8811 	msr	BASEPRI, r3
20000456:	f3bf 8f6f 	isb	sy
2000045a:	f3bf 8f4f 	dsb	sy
2000045e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000460:	e7fe      	b.n	20000460 <vApplicationStackOverflowHook+0x1c>
20000462:	bf00      	nop

20000464 <set_pktRate>:
#include "stream.h"
//#include "Demo_Tasks/demo_tasks.h"



void set_pktRate(pkt_name_t pn, uint8_t sr){
20000464:	b480      	push	{r7}
20000466:	b083      	sub	sp, #12
20000468:	af00      	add	r7, sp, #0
2000046a:	4602      	mov	r2, r0
2000046c:	460b      	mov	r3, r1
2000046e:	71fa      	strb	r2, [r7, #7]
20000470:	71bb      	strb	r3, [r7, #6]

	pkt_stream[pn].rate = sr * 1000;
20000472:	79f9      	ldrb	r1, [r7, #7]
20000474:	79bb      	ldrb	r3, [r7, #6]
20000476:	461a      	mov	r2, r3
20000478:	ea4f 1242 	mov.w	r2, r2, lsl #5
2000047c:	ebc3 0202 	rsb	r2, r3, r2
20000480:	ea4f 0282 	mov.w	r2, r2, lsl #2
20000484:	4413      	add	r3, r2
20000486:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000048a:	b298      	uxth	r0, r3
2000048c:	f24e 02e4 	movw	r2, #57572	; 0xe0e4
20000490:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000494:	460b      	mov	r3, r1
20000496:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000049a:	440b      	add	r3, r1
2000049c:	ea4f 0343 	mov.w	r3, r3, lsl #1
200004a0:	4413      	add	r3, r2
200004a2:	f103 0310 	add.w	r3, r3, #16
200004a6:	4602      	mov	r2, r0
200004a8:	801a      	strh	r2, [r3, #0]

}
200004aa:	f107 070c 	add.w	r7, r7, #12
200004ae:	46bd      	mov	sp, r7
200004b0:	bc80      	pop	{r7}
200004b2:	4770      	bx	lr

200004b4 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
200004b4:	b580      	push	{r7, lr}
200004b6:	b092      	sub	sp, #72	; 0x48
200004b8:	af04      	add	r7, sp, #16
200004ba:	60f8      	str	r0, [r7, #12]
200004bc:	60b9      	str	r1, [r7, #8]
200004be:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
200004c0:	f247 73d8 	movw	r3, #30680	; 0x77d8
200004c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004c8:	881b      	ldrh	r3, [r3, #0]
200004ca:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
200004cc:	f04f 0328 	mov.w	r3, #40	; 0x28
200004d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
200004d4:	f04f 032a 	mov.w	r3, #42	; 0x2a
200004d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
200004dc:	f04f 032c 	mov.w	r3, #44	; 0x2c
200004e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
200004e4:	f04f 0329 	mov.w	r3, #41	; 0x29
200004e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
200004ec:	f04f 032b 	mov.w	r3, #43	; 0x2b
200004f0:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
200004f4:	f04f 032d 	mov.w	r3, #45	; 0x2d
200004f8:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
200004fa:	f04f 0300 	mov.w	r3, #0
200004fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
20000502:	f107 0334 	add.w	r3, r7, #52	; 0x34
20000506:	f04f 0200 	mov.w	r2, #0
2000050a:	9200      	str	r2, [sp, #0]
2000050c:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000510:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000514:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000518:	461a      	mov	r2, r3
2000051a:	f04f 0302 	mov.w	r3, #2
2000051e:	f005 fe31 	bl	20006184 <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
20000522:	f107 0318 	add.w	r3, r7, #24
20000526:	f04f 0200 	mov.w	r2, #0
2000052a:	9200      	str	r2, [sp, #0]
2000052c:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000534:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000538:	461a      	mov	r2, r3
2000053a:	f04f 0301 	mov.w	r3, #1
2000053e:	f005 fe93 	bl	20006268 <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000542:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000546:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054a:	f04f 0100 	mov.w	r1, #0
2000054e:	f005 ff95 	bl	2000647c <I2C_wait_complete>
20000552:	4603      	mov	r3, r0
20000554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000558:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000560:	4413      	add	r3, r2
20000562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
20000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000056a:	f107 0218 	add.w	r2, r7, #24
2000056e:	9200      	str	r2, [sp, #0]
20000570:	f04f 0201 	mov.w	r2, #1
20000574:	9201      	str	r2, [sp, #4]
20000576:	f04f 0200 	mov.w	r2, #0
2000057a:	9202      	str	r2, [sp, #8]
2000057c:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000584:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000588:	461a      	mov	r2, r3
2000058a:	f04f 0301 	mov.w	r3, #1
2000058e:	f005 fedd 	bl	2000634c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000592:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000596:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059a:	f04f 0100 	mov.w	r1, #0
2000059e:	f005 ff6d 	bl	2000647c <I2C_wait_complete>
200005a2:	4603      	mov	r3, r0
200005a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200005b0:	4413      	add	r3, r2
200005b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
200005b6:	f107 031c 	add.w	r3, r7, #28
200005ba:	f107 0214 	add.w	r2, r7, #20
200005be:	9200      	str	r2, [sp, #0]
200005c0:	f04f 0201 	mov.w	r2, #1
200005c4:	9201      	str	r2, [sp, #4]
200005c6:	f04f 0200 	mov.w	r2, #0
200005ca:	9202      	str	r2, [sp, #8]
200005cc:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200005d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005d4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200005d8:	461a      	mov	r2, r3
200005da:	f04f 0301 	mov.w	r3, #1
200005de:	f005 feb5 	bl	2000634c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200005e2:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200005e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005ea:	f04f 0100 	mov.w	r1, #0
200005ee:	f005 ff45 	bl	2000647c <I2C_wait_complete>
200005f2:	4603      	mov	r3, r0
200005f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005f8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000600:	4413      	add	r3, r2
20000602:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000606:	7d3b      	ldrb	r3, [r7, #20]
20000608:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000060c:	b29a      	uxth	r2, r3
2000060e:	7e3b      	ldrb	r3, [r7, #24]
20000610:	ea42 0303 	orr.w	r3, r2, r3
20000614:	b29b      	uxth	r3, r3
20000616:	b29a      	uxth	r2, r3
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	881b      	ldrh	r3, [r3, #0]
20000620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000624:	d906      	bls.n	20000634 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
20000626:	687b      	ldr	r3, [r7, #4]
20000628:	881b      	ldrh	r3, [r3, #0]
2000062a:	ea6f 0303 	mvn.w	r3, r3
2000062e:	b29a      	uxth	r2, r3
20000630:	687b      	ldr	r3, [r7, #4]
20000632:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
20000634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000638:	f107 0218 	add.w	r2, r7, #24
2000063c:	9200      	str	r2, [sp, #0]
2000063e:	f04f 0201 	mov.w	r2, #1
20000642:	9201      	str	r2, [sp, #4]
20000644:	f04f 0200 	mov.w	r2, #0
20000648:	9202      	str	r2, [sp, #8]
2000064a:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
2000064e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000652:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000656:	461a      	mov	r2, r3
20000658:	f04f 0301 	mov.w	r3, #1
2000065c:	f005 fe76 	bl	2000634c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000660:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000664:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000668:	f04f 0100 	mov.w	r1, #0
2000066c:	f005 ff06 	bl	2000647c <I2C_wait_complete>
20000670:	4603      	mov	r3, r0
20000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000676:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000067a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000067e:	4413      	add	r3, r2
20000680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
20000684:	f107 0320 	add.w	r3, r7, #32
20000688:	f107 0214 	add.w	r2, r7, #20
2000068c:	9200      	str	r2, [sp, #0]
2000068e:	f04f 0201 	mov.w	r2, #1
20000692:	9201      	str	r2, [sp, #4]
20000694:	f04f 0200 	mov.w	r2, #0
20000698:	9202      	str	r2, [sp, #8]
2000069a:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
2000069e:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006a2:	f04f 016a 	mov.w	r1, #106	; 0x6a
200006a6:	461a      	mov	r2, r3
200006a8:	f04f 0301 	mov.w	r3, #1
200006ac:	f005 fe4e 	bl	2000634c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200006b0:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200006b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006b8:	f04f 0100 	mov.w	r1, #0
200006bc:	f005 fede 	bl	2000647c <I2C_wait_complete>
200006c0:	4603      	mov	r3, r0
200006c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200006c6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200006ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200006ce:	4413      	add	r3, r2
200006d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200006d4:	7d3b      	ldrb	r3, [r7, #20]
200006d6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200006da:	b29a      	uxth	r2, r3
200006dc:	7e3b      	ldrb	r3, [r7, #24]
200006de:	ea42 0303 	orr.w	r3, r2, r3
200006e2:	b29b      	uxth	r3, r3
200006e4:	b29a      	uxth	r2, r3
200006e6:	68bb      	ldr	r3, [r7, #8]
200006e8:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
200006ea:	68bb      	ldr	r3, [r7, #8]
200006ec:	881b      	ldrh	r3, [r3, #0]
200006ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200006f2:	d906      	bls.n	20000702 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
200006f4:	68bb      	ldr	r3, [r7, #8]
200006f6:	881b      	ldrh	r3, [r3, #0]
200006f8:	ea6f 0303 	mvn.w	r3, r3
200006fc:	b29a      	uxth	r2, r3
200006fe:	68bb      	ldr	r3, [r7, #8]
20000700:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
20000702:	f107 0330 	add.w	r3, r7, #48	; 0x30
20000706:	f107 0218 	add.w	r2, r7, #24
2000070a:	9200      	str	r2, [sp, #0]
2000070c:	f04f 0201 	mov.w	r2, #1
20000710:	9201      	str	r2, [sp, #4]
20000712:	f04f 0200 	mov.w	r2, #0
20000716:	9202      	str	r2, [sp, #8]
20000718:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
2000071c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000720:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000724:	461a      	mov	r2, r3
20000726:	f04f 0301 	mov.w	r3, #1
2000072a:	f005 fe0f 	bl	2000634c <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000072e:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000732:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000736:	f04f 0100 	mov.w	r1, #0
2000073a:	f005 fe9f 	bl	2000647c <I2C_wait_complete>
2000073e:	4603      	mov	r3, r0
20000740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000744:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000074c:	4413      	add	r3, r2
2000074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
20000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000756:	f107 0214 	add.w	r2, r7, #20
2000075a:	9200      	str	r2, [sp, #0]
2000075c:	f04f 0201 	mov.w	r2, #1
20000760:	9201      	str	r2, [sp, #4]
20000762:	f04f 0200 	mov.w	r2, #0
20000766:	9202      	str	r2, [sp, #8]
20000768:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
2000076c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000770:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000774:	461a      	mov	r2, r3
20000776:	f04f 0301 	mov.w	r3, #1
2000077a:	f005 fde7 	bl	2000634c <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000077e:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000782:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000786:	f04f 0100 	mov.w	r1, #0
2000078a:	f005 fe77 	bl	2000647c <I2C_wait_complete>
2000078e:	4603      	mov	r3, r0
20000790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000794:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000079c:	4413      	add	r3, r2
2000079e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200007a2:	7d3b      	ldrb	r3, [r7, #20]
200007a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
200007a8:	b29a      	uxth	r2, r3
200007aa:	7e3b      	ldrb	r3, [r7, #24]
200007ac:	ea42 0303 	orr.w	r3, r2, r3
200007b0:	b29b      	uxth	r3, r3
200007b2:	b29a      	uxth	r2, r3
200007b4:	68fb      	ldr	r3, [r7, #12]
200007b6:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
200007b8:	68fb      	ldr	r3, [r7, #12]
200007ba:	881b      	ldrh	r3, [r3, #0]
200007bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200007c0:	d906      	bls.n	200007d0 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
200007c2:	68fb      	ldr	r3, [r7, #12]
200007c4:	881b      	ldrh	r3, [r3, #0]
200007c6:	ea6f 0303 	mvn.w	r3, r3
200007ca:	b29a      	uxth	r2, r3
200007cc:	68fb      	ldr	r3, [r7, #12]
200007ce:	801a      	strh	r2, [r3, #0]
	}

	return status;
200007d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
200007d4:	4618      	mov	r0, r3
200007d6:	f107 0738 	add.w	r7, r7, #56	; 0x38
200007da:	46bd      	mov	sp, r7
200007dc:	bd80      	pop	{r7, pc}
200007de:	bf00      	nop

200007e0 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
200007e0:	b580      	push	{r7, lr}
200007e2:	b092      	sub	sp, #72	; 0x48
200007e4:	af04      	add	r7, sp, #16
200007e6:	60f8      	str	r0, [r7, #12]
200007e8:	60b9      	str	r1, [r7, #8]
200007ea:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
200007ec:	f247 73d4 	movw	r3, #30676	; 0x77d4
200007f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007f4:	881b      	ldrh	r3, [r3, #0]
200007f6:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
200007f8:	f04f 0318 	mov.w	r3, #24
200007fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
20000800:	f04f 031a 	mov.w	r3, #26
20000804:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
20000808:	f04f 031c 	mov.w	r3, #28
2000080c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
20000810:	f04f 0319 	mov.w	r3, #25
20000814:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
20000818:	f04f 031b 	mov.w	r3, #27
2000081c:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
2000081e:	f04f 031d 	mov.w	r3, #29
20000822:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
20000824:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000828:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
2000082c:	f04f 0300 	mov.w	r3, #0
20000830:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
20000834:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000838:	f107 0330 	add.w	r3, r7, #48	; 0x30
2000083c:	f107 0114 	add.w	r1, r7, #20
20000840:	9100      	str	r1, [sp, #0]
20000842:	f04f 0101 	mov.w	r1, #1
20000846:	9101      	str	r1, [sp, #4]
20000848:	f04f 0100 	mov.w	r1, #0
2000084c:	9102      	str	r1, [sp, #8]
2000084e:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000852:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000856:	4611      	mov	r1, r2
20000858:	461a      	mov	r2, r3
2000085a:	f04f 0302 	mov.w	r3, #2
2000085e:	f005 fd75 	bl	2000634c <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000862:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000866:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086a:	f04f 0100 	mov.w	r1, #0
2000086e:	f005 fe05 	bl	2000647c <I2C_wait_complete>
20000872:	4603      	mov	r3, r0
20000874:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000878:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000087c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000880:	4413      	add	r3, r2
20000882:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
20000886:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000088e:	f107 0114 	add.w	r1, r7, #20
20000892:	9100      	str	r1, [sp, #0]
20000894:	f04f 0101 	mov.w	r1, #1
20000898:	9101      	str	r1, [sp, #4]
2000089a:	f04f 0100 	mov.w	r1, #0
2000089e:	9102      	str	r1, [sp, #8]
200008a0:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200008a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008a8:	4611      	mov	r1, r2
200008aa:	461a      	mov	r2, r3
200008ac:	f04f 0301 	mov.w	r3, #1
200008b0:	f005 fd4c 	bl	2000634c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200008b4:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200008b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008bc:	f04f 0100 	mov.w	r1, #0
200008c0:	f005 fddc 	bl	2000647c <I2C_wait_complete>
200008c4:	4603      	mov	r3, r0
200008c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200008ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200008ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200008d2:	4413      	add	r3, r2
200008d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
200008d8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200008dc:	f107 0318 	add.w	r3, r7, #24
200008e0:	f107 0110 	add.w	r1, r7, #16
200008e4:	9100      	str	r1, [sp, #0]
200008e6:	f04f 0101 	mov.w	r1, #1
200008ea:	9101      	str	r1, [sp, #4]
200008ec:	f04f 0100 	mov.w	r1, #0
200008f0:	9102      	str	r1, [sp, #8]
200008f2:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200008f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008fa:	4611      	mov	r1, r2
200008fc:	461a      	mov	r2, r3
200008fe:	f04f 0301 	mov.w	r3, #1
20000902:	f005 fd23 	bl	2000634c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000906:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
2000090a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000090e:	f04f 0100 	mov.w	r1, #0
20000912:	f005 fdb3 	bl	2000647c <I2C_wait_complete>
20000916:	4603      	mov	r3, r0
20000918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
2000091c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000920:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000924:	4413      	add	r3, r2
20000926:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
2000092a:	7c3b      	ldrb	r3, [r7, #16]
2000092c:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000930:	b29a      	uxth	r2, r3
20000932:	7d3b      	ldrb	r3, [r7, #20]
20000934:	ea42 0303 	orr.w	r3, r2, r3
20000938:	b29b      	uxth	r3, r3
2000093a:	b29a      	uxth	r2, r3
2000093c:	68fb      	ldr	r3, [r7, #12]
2000093e:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
20000940:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000944:	f107 0328 	add.w	r3, r7, #40	; 0x28
20000948:	f107 0114 	add.w	r1, r7, #20
2000094c:	9100      	str	r1, [sp, #0]
2000094e:	f04f 0101 	mov.w	r1, #1
20000952:	9101      	str	r1, [sp, #4]
20000954:	f04f 0100 	mov.w	r1, #0
20000958:	9102      	str	r1, [sp, #8]
2000095a:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
2000095e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000962:	4611      	mov	r1, r2
20000964:	461a      	mov	r2, r3
20000966:	f04f 0301 	mov.w	r3, #1
2000096a:	f005 fcef 	bl	2000634c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000096e:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000972:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000976:	f04f 0100 	mov.w	r1, #0
2000097a:	f005 fd7f 	bl	2000647c <I2C_wait_complete>
2000097e:	4603      	mov	r3, r0
20000980:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000984:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000098c:	4413      	add	r3, r2
2000098e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
20000992:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000996:	f107 031c 	add.w	r3, r7, #28
2000099a:	f107 0110 	add.w	r1, r7, #16
2000099e:	9100      	str	r1, [sp, #0]
200009a0:	f04f 0101 	mov.w	r1, #1
200009a4:	9101      	str	r1, [sp, #4]
200009a6:	f04f 0100 	mov.w	r1, #0
200009aa:	9102      	str	r1, [sp, #8]
200009ac:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200009b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009b4:	4611      	mov	r1, r2
200009b6:	461a      	mov	r2, r3
200009b8:	f04f 0301 	mov.w	r3, #1
200009bc:	f005 fcc6 	bl	2000634c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200009c0:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200009c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009c8:	f04f 0100 	mov.w	r1, #0
200009cc:	f005 fd56 	bl	2000647c <I2C_wait_complete>
200009d0:	4603      	mov	r3, r0
200009d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200009d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200009da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200009de:	4413      	add	r3, r2
200009e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200009e4:	7c3b      	ldrb	r3, [r7, #16]
200009e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
200009ea:	b29a      	uxth	r2, r3
200009ec:	7d3b      	ldrb	r3, [r7, #20]
200009ee:	ea42 0303 	orr.w	r3, r2, r3
200009f2:	b29b      	uxth	r3, r3
200009f4:	b29a      	uxth	r2, r3
200009f6:	68bb      	ldr	r3, [r7, #8]
200009f8:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
200009fa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200009fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
20000a02:	f107 0114 	add.w	r1, r7, #20
20000a06:	9100      	str	r1, [sp, #0]
20000a08:	f04f 0101 	mov.w	r1, #1
20000a0c:	9101      	str	r1, [sp, #4]
20000a0e:	f04f 0100 	mov.w	r1, #0
20000a12:	9102      	str	r1, [sp, #8]
20000a14:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000a18:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a1c:	4611      	mov	r1, r2
20000a1e:	461a      	mov	r2, r3
20000a20:	f04f 0301 	mov.w	r3, #1
20000a24:	f005 fc92 	bl	2000634c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a28:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000a2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a30:	f04f 0100 	mov.w	r1, #0
20000a34:	f005 fd22 	bl	2000647c <I2C_wait_complete>
20000a38:	4603      	mov	r3, r0
20000a3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a3e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a46:	4413      	add	r3, r2
20000a48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
20000a4c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a50:	f107 0320 	add.w	r3, r7, #32
20000a54:	f107 0110 	add.w	r1, r7, #16
20000a58:	9100      	str	r1, [sp, #0]
20000a5a:	f04f 0101 	mov.w	r1, #1
20000a5e:	9101      	str	r1, [sp, #4]
20000a60:	f04f 0100 	mov.w	r1, #0
20000a64:	9102      	str	r1, [sp, #8]
20000a66:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000a6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a6e:	4611      	mov	r1, r2
20000a70:	461a      	mov	r2, r3
20000a72:	f04f 0301 	mov.w	r3, #1
20000a76:	f005 fc69 	bl	2000634c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a7a:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000a7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a82:	f04f 0100 	mov.w	r1, #0
20000a86:	f005 fcf9 	bl	2000647c <I2C_wait_complete>
20000a8a:	4603      	mov	r3, r0
20000a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a90:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a98:	4413      	add	r3, r2
20000a9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000a9e:	7c3b      	ldrb	r3, [r7, #16]
20000aa0:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000aa4:	b29a      	uxth	r2, r3
20000aa6:	7d3b      	ldrb	r3, [r7, #20]
20000aa8:	ea42 0303 	orr.w	r3, r2, r3
20000aac:	b29b      	uxth	r3, r3
20000aae:	b29a      	uxth	r2, r3
20000ab0:	687b      	ldr	r3, [r7, #4]
20000ab2:	801a      	strh	r2, [r3, #0]

		return status;
20000ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
20000ab8:	4618      	mov	r0, r3
20000aba:	f107 0738 	add.w	r7, r7, #56	; 0x38
20000abe:	46bd      	mov	sp, r7
20000ac0:	bd80      	pop	{r7, pc}
20000ac2:	bf00      	nop

20000ac4 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
20000ac4:	b580      	push	{r7, lr}
20000ac6:	b08a      	sub	sp, #40	; 0x28
20000ac8:	af04      	add	r7, sp, #16
20000aca:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
20000acc:	f04f 0315 	mov.w	r3, #21
20000ad0:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
20000ad2:	f04f 0316 	mov.w	r3, #22
20000ad6:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
20000ad8:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000adc:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
20000ade:	7dba      	ldrb	r2, [r7, #22]
20000ae0:	f107 0314 	add.w	r3, r7, #20
20000ae4:	f107 010c 	add.w	r1, r7, #12
20000ae8:	9100      	str	r1, [sp, #0]
20000aea:	f04f 0101 	mov.w	r1, #1
20000aee:	9101      	str	r1, [sp, #4]
20000af0:	f04f 0100 	mov.w	r1, #0
20000af4:	9102      	str	r1, [sp, #8]
20000af6:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000afa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000afe:	4611      	mov	r1, r2
20000b00:	461a      	mov	r2, r3
20000b02:	f04f 0301 	mov.w	r3, #1
20000b06:	f005 fc21 	bl	2000634c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000b0a:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000b0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b12:	f04f 0100 	mov.w	r1, #0
20000b16:	f005 fcb1 	bl	2000647c <I2C_wait_complete>
20000b1a:	4603      	mov	r3, r0
20000b1c:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
20000b1e:	7dba      	ldrb	r2, [r7, #22]
20000b20:	f107 0310 	add.w	r3, r7, #16
20000b24:	f107 0108 	add.w	r1, r7, #8
20000b28:	9100      	str	r1, [sp, #0]
20000b2a:	f04f 0101 	mov.w	r1, #1
20000b2e:	9101      	str	r1, [sp, #4]
20000b30:	f04f 0100 	mov.w	r1, #0
20000b34:	9102      	str	r1, [sp, #8]
20000b36:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000b3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b3e:	4611      	mov	r1, r2
20000b40:	461a      	mov	r2, r3
20000b42:	f04f 0301 	mov.w	r3, #1
20000b46:	f005 fc01 	bl	2000634c <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000b4a:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000b4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b52:	f04f 0100 	mov.w	r1, #0
20000b56:	f005 fc91 	bl	2000647c <I2C_wait_complete>
20000b5a:	4603      	mov	r3, r0
20000b5c:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
20000b5e:	7b3b      	ldrb	r3, [r7, #12]
20000b60:	461a      	mov	r2, r3
20000b62:	7a3b      	ldrb	r3, [r7, #8]
20000b64:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b68:	b29b      	uxth	r3, r3
20000b6a:	ea42 0303 	orr.w	r3, r2, r3
20000b6e:	b29b      	uxth	r3, r3
20000b70:	b29a      	uxth	r2, r3
20000b72:	687b      	ldr	r3, [r7, #4]
20000b74:	801a      	strh	r2, [r3, #0]

		return 0;
20000b76:	f04f 0300 	mov.w	r3, #0

}
20000b7a:	4618      	mov	r0, r3
20000b7c:	f107 0718 	add.w	r7, r7, #24
20000b80:	46bd      	mov	sp, r7
20000b82:	bd80      	pop	{r7, pc}

20000b84 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
20000b84:	b580      	push	{r7, lr}
20000b86:	b086      	sub	sp, #24
20000b88:	af02      	add	r7, sp, #8
20000b8a:	60b9      	str	r1, [r7, #8]
20000b8c:	4613      	mov	r3, r2
20000b8e:	4602      	mov	r2, r0
20000b90:	73fa      	strb	r2, [r7, #15]
20000b92:	71fb      	strb	r3, [r7, #7]
     count = 0;
20000b94:	f24e 1320 	movw	r3, #57632	; 0xe120
20000b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b9c:	f04f 0200 	mov.w	r2, #0
20000ba0:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000ba2:	e032      	b.n	20000c0a <vc_write+0x86>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
20000ba4:	79fb      	ldrb	r3, [r7, #7]
20000ba6:	7bfa      	ldrb	r2, [r7, #15]
20000ba8:	f04f 0100 	mov.w	r1, #0
20000bac:	9100      	str	r1, [sp, #0]
20000bae:	f64d 4034 	movw	r0, #56372	; 0xdc34
20000bb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bb6:	4611      	mov	r1, r2
20000bb8:	68ba      	ldr	r2, [r7, #8]
20000bba:	f005 fae3 	bl	20006184 <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000bbe:	f64d 4034 	movw	r0, #56372	; 0xdc34
20000bc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bc6:	f04f 0100 	mov.w	r1, #0
20000bca:	f005 fc57 	bl	2000647c <I2C_wait_complete>
20000bce:	4603      	mov	r3, r0
20000bd0:	461a      	mov	r2, r3
20000bd2:	f24e 1322 	movw	r3, #57634	; 0xe122
20000bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bda:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000bdc:	f24e 1322 	movw	r3, #57634	; 0xe122
20000be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000be4:	781b      	ldrb	r3, [r3, #0]
20000be6:	2b00      	cmp	r3, #0
20000be8:	d102      	bne.n	20000bf0 <vc_write+0x6c>
            return 0;
20000bea:	f04f 0300 	mov.w	r3, #0
20000bee:	e018      	b.n	20000c22 <vc_write+0x9e>
        }
        count++;
20000bf0:	f24e 1320 	movw	r3, #57632	; 0xe120
20000bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bf8:	781b      	ldrb	r3, [r3, #0]
20000bfa:	f103 0301 	add.w	r3, r3, #1
20000bfe:	b2da      	uxtb	r2, r3
20000c00:	f24e 1320 	movw	r3, #57632	; 0xe120
20000c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c08:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
20000c0a:	f24e 1320 	movw	r3, #57632	; 0xe120
20000c0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c12:	781b      	ldrb	r3, [r3, #0]
20000c14:	2b09      	cmp	r3, #9
20000c16:	d9c5      	bls.n	20000ba4 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000c18:	f24e 1320 	movw	r3, #57632	; 0xe120
20000c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c20:	781b      	ldrb	r3, [r3, #0]

}
20000c22:	4618      	mov	r0, r3
20000c24:	f107 0710 	add.w	r7, r7, #16
20000c28:	46bd      	mov	sp, r7
20000c2a:	bd80      	pop	{r7, pc}

20000c2c <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
20000c2c:	b580      	push	{r7, lr}
20000c2e:	b086      	sub	sp, #24
20000c30:	af02      	add	r7, sp, #8
20000c32:	60b9      	str	r1, [r7, #8]
20000c34:	4613      	mov	r3, r2
20000c36:	4602      	mov	r2, r0
20000c38:	73fa      	strb	r2, [r7, #15]
20000c3a:	71fb      	strb	r3, [r7, #7]
    count = 0;
20000c3c:	f24e 1320 	movw	r3, #57632	; 0xe120
20000c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c44:	f04f 0200 	mov.w	r2, #0
20000c48:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000c4a:	e032      	b.n	20000cb2 <vc_read+0x86>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
20000c4c:	79fb      	ldrb	r3, [r7, #7]
20000c4e:	7bfa      	ldrb	r2, [r7, #15]
20000c50:	f04f 0100 	mov.w	r1, #0
20000c54:	9100      	str	r1, [sp, #0]
20000c56:	f64d 4034 	movw	r0, #56372	; 0xdc34
20000c5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c5e:	4611      	mov	r1, r2
20000c60:	68ba      	ldr	r2, [r7, #8]
20000c62:	f005 fb01 	bl	20006268 <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000c66:	f64d 4034 	movw	r0, #56372	; 0xdc34
20000c6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c6e:	f04f 0100 	mov.w	r1, #0
20000c72:	f005 fc03 	bl	2000647c <I2C_wait_complete>
20000c76:	4603      	mov	r3, r0
20000c78:	461a      	mov	r2, r3
20000c7a:	f24e 1322 	movw	r3, #57634	; 0xe122
20000c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c82:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000c84:	f24e 1322 	movw	r3, #57634	; 0xe122
20000c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c8c:	781b      	ldrb	r3, [r3, #0]
20000c8e:	2b00      	cmp	r3, #0
20000c90:	d102      	bne.n	20000c98 <vc_read+0x6c>
            return 0;
20000c92:	f04f 0300 	mov.w	r3, #0
20000c96:	e018      	b.n	20000cca <vc_read+0x9e>
        }
        count++;
20000c98:	f24e 1320 	movw	r3, #57632	; 0xe120
20000c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ca0:	781b      	ldrb	r3, [r3, #0]
20000ca2:	f103 0301 	add.w	r3, r3, #1
20000ca6:	b2da      	uxtb	r2, r3
20000ca8:	f24e 1320 	movw	r3, #57632	; 0xe120
20000cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cb0:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
20000cb2:	f24e 1320 	movw	r3, #57632	; 0xe120
20000cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cba:	781b      	ldrb	r3, [r3, #0]
20000cbc:	2b09      	cmp	r3, #9
20000cbe:	d9c5      	bls.n	20000c4c <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000cc0:	f24e 1320 	movw	r3, #57632	; 0xe120
20000cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cc8:	781b      	ldrb	r3, [r3, #0]

}
20000cca:	4618      	mov	r0, r3
20000ccc:	f107 0710 	add.w	r7, r7, #16
20000cd0:	46bd      	mov	sp, r7
20000cd2:	bd80      	pop	{r7, pc}

20000cd4 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
20000cd4:	b580      	push	{r7, lr}
20000cd6:	b082      	sub	sp, #8
20000cd8:	af00      	add	r7, sp, #0
20000cda:	460b      	mov	r3, r1
20000cdc:	603a      	str	r2, [r7, #0]
20000cde:	4602      	mov	r2, r0
20000ce0:	71fa      	strb	r2, [r7, #7]
20000ce2:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
20000ce4:	79fa      	ldrb	r2, [r7, #7]
20000ce6:	f107 0306 	add.w	r3, r7, #6
20000cea:	4610      	mov	r0, r2
20000cec:	4619      	mov	r1, r3
20000cee:	f04f 0201 	mov.w	r2, #1
20000cf2:	f7ff ff47 	bl	20000b84 <vc_write>
20000cf6:	4603      	mov	r3, r0
20000cf8:	2b09      	cmp	r3, #9
20000cfa:	d902      	bls.n	20000d02 <vc_read_reg+0x2e>
        return 1;
20000cfc:	f04f 0301 	mov.w	r3, #1
20000d00:	e00e      	b.n	20000d20 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
20000d02:	79fb      	ldrb	r3, [r7, #7]
20000d04:	4618      	mov	r0, r3
20000d06:	6839      	ldr	r1, [r7, #0]
20000d08:	f04f 0202 	mov.w	r2, #2
20000d0c:	f7ff ff8e 	bl	20000c2c <vc_read>
20000d10:	4603      	mov	r3, r0
20000d12:	2b09      	cmp	r3, #9
20000d14:	d902      	bls.n	20000d1c <vc_read_reg+0x48>
        return 1;
20000d16:	f04f 0301 	mov.w	r3, #1
20000d1a:	e001      	b.n	20000d20 <vc_read_reg+0x4c>
    }

    return 0;
20000d1c:	f04f 0300 	mov.w	r3, #0
}
20000d20:	4618      	mov	r0, r3
20000d22:	f107 0708 	add.w	r7, r7, #8
20000d26:	46bd      	mov	sp, r7
20000d28:	bd80      	pop	{r7, pc}
20000d2a:	bf00      	nop

20000d2c <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000d2c:	b580      	push	{r7, lr}
20000d2e:	b082      	sub	sp, #8
20000d30:	af00      	add	r7, sp, #0
20000d32:	460b      	mov	r3, r1
20000d34:	603a      	str	r2, [r7, #0]
20000d36:	4602      	mov	r2, r0
20000d38:	71fa      	strb	r2, [r7, #7]
20000d3a:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000d3c:	f24e 131c 	movw	r3, #57628	; 0xe11c
20000d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d44:	f04f 0200 	mov.w	r2, #0
20000d48:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000d4a:	f24e 131c 	movw	r3, #57628	; 0xe11c
20000d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d52:	f04f 0200 	mov.w	r2, #0
20000d56:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000d58:	f24e 131e 	movw	r3, #57630	; 0xe11e
20000d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d60:	f04f 0200 	mov.w	r2, #0
20000d64:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
20000d66:	79bb      	ldrb	r3, [r7, #6]
20000d68:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d6c:	b2db      	uxtb	r3, r3
20000d6e:	79fa      	ldrb	r2, [r7, #7]
20000d70:	4610      	mov	r0, r2
20000d72:	4619      	mov	r1, r3
20000d74:	f24e 121c 	movw	r2, #57628	; 0xe11c
20000d78:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000d7c:	f7ff ffaa 	bl	20000cd4 <vc_read_reg>
20000d80:	4603      	mov	r3, r0
20000d82:	2b00      	cmp	r3, #0
20000d84:	d11a      	bne.n	20000dbc <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
20000d86:	f24e 131c 	movw	r3, #57628	; 0xe11c
20000d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d8e:	781b      	ldrb	r3, [r3, #0]
20000d90:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000d94:	b29a      	uxth	r2, r3
20000d96:	f24e 131c 	movw	r3, #57628	; 0xe11c
20000d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d9e:	785b      	ldrb	r3, [r3, #1]
20000da0:	ea42 0303 	orr.w	r3, r2, r3
20000da4:	b29b      	uxth	r3, r3
20000da6:	b29a      	uxth	r2, r3
20000da8:	f24e 131e 	movw	r3, #57630	; 0xe11e
20000dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db0:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000db2:	683b      	ldr	r3, [r7, #0]
20000db4:	f04f 0200 	mov.w	r2, #0
20000db8:	701a      	strb	r2, [r3, #0]
20000dba:	e00a      	b.n	20000dd2 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
20000dbc:	683b      	ldr	r3, [r7, #0]
20000dbe:	f04f 0201 	mov.w	r2, #1
20000dc2:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000dc4:	f24e 131e 	movw	r3, #57630	; 0xe11e
20000dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dcc:	f04f 0200 	mov.w	r2, #0
20000dd0:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000dd2:	f24e 131e 	movw	r3, #57630	; 0xe11e
20000dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dda:	881b      	ldrh	r3, [r3, #0]
}
20000ddc:	4618      	mov	r0, r3
20000dde:	f107 0708 	add.w	r7, r7, #8
20000de2:	46bd      	mov	sp, r7
20000de4:	bd80      	pop	{r7, pc}
20000de6:	bf00      	nop

20000de8 <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000de8:	b580      	push	{r7, lr}
20000dea:	b082      	sub	sp, #8
20000dec:	af00      	add	r7, sp, #0
20000dee:	460b      	mov	r3, r1
20000df0:	603a      	str	r2, [r7, #0]
20000df2:	4602      	mov	r2, r0
20000df4:	71fa      	strb	r2, [r7, #7]
20000df6:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000df8:	f24e 131c 	movw	r3, #57628	; 0xe11c
20000dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e00:	f04f 0200 	mov.w	r2, #0
20000e04:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000e06:	f24e 131c 	movw	r3, #57628	; 0xe11c
20000e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e0e:	f04f 0200 	mov.w	r2, #0
20000e12:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000e14:	f24e 131e 	movw	r3, #57630	; 0xe11e
20000e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e1c:	f04f 0200 	mov.w	r2, #0
20000e20:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
20000e22:	79bb      	ldrb	r3, [r7, #6]
20000e24:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000e28:	b2db      	uxtb	r3, r3
20000e2a:	f103 33ff 	add.w	r3, r3, #4294967295
20000e2e:	b2db      	uxtb	r3, r3
20000e30:	79fa      	ldrb	r2, [r7, #7]
20000e32:	4610      	mov	r0, r2
20000e34:	4619      	mov	r1, r3
20000e36:	f24e 121c 	movw	r2, #57628	; 0xe11c
20000e3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000e3e:	f7ff ff49 	bl	20000cd4 <vc_read_reg>
20000e42:	4603      	mov	r3, r0
20000e44:	2b00      	cmp	r3, #0
20000e46:	d11a      	bne.n	20000e7e <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
20000e48:	f24e 131c 	movw	r3, #57628	; 0xe11c
20000e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e50:	781b      	ldrb	r3, [r3, #0]
20000e52:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e56:	b29a      	uxth	r2, r3
20000e58:	f24e 131c 	movw	r3, #57628	; 0xe11c
20000e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e60:	785b      	ldrb	r3, [r3, #1]
20000e62:	ea42 0303 	orr.w	r3, r2, r3
20000e66:	b29b      	uxth	r3, r3
20000e68:	b29a      	uxth	r2, r3
20000e6a:	f24e 131e 	movw	r3, #57630	; 0xe11e
20000e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e72:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000e74:	683b      	ldr	r3, [r7, #0]
20000e76:	f04f 0200 	mov.w	r2, #0
20000e7a:	701a      	strb	r2, [r3, #0]
20000e7c:	e00a      	b.n	20000e94 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
20000e7e:	683b      	ldr	r3, [r7, #0]
20000e80:	f04f 0201 	mov.w	r2, #1
20000e84:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000e86:	f24e 131e 	movw	r3, #57630	; 0xe11e
20000e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e8e:	f04f 0200 	mov.w	r2, #0
20000e92:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000e94:	f24e 131e 	movw	r3, #57630	; 0xe11e
20000e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e9c:	881b      	ldrh	r3, [r3, #0]
}
20000e9e:	4618      	mov	r0, r3
20000ea0:	f107 0708 	add.w	r7, r7, #8
20000ea4:	46bd      	mov	sp, r7
20000ea6:	bd80      	pop	{r7, pc}

20000ea8 <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
20000ea8:	b580      	push	{r7, lr}
20000eaa:	b08c      	sub	sp, #48	; 0x30
20000eac:	af04      	add	r7, sp, #16
20000eae:	60f8      	str	r0, [r7, #12]
20000eb0:	607b      	str	r3, [r7, #4]
20000eb2:	460b      	mov	r3, r1
20000eb4:	72fb      	strb	r3, [r7, #11]
20000eb6:	4613      	mov	r3, r2
20000eb8:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
20000eba:	7abb      	ldrb	r3, [r7, #10]
20000ebc:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
20000ebe:	7d3b      	ldrb	r3, [r7, #20]
20000ec0:	f043 0308 	orr.w	r3, r3, #8
20000ec4:	b2db      	uxtb	r3, r3
20000ec6:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
20000ec8:	7d3b      	ldrb	r3, [r7, #20]
20000eca:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000ece:	b2db      	uxtb	r3, r3
20000ed0:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
20000ed2:	7afa      	ldrb	r2, [r7, #11]
20000ed4:	f107 0314 	add.w	r3, r7, #20
20000ed8:	f107 0118 	add.w	r1, r7, #24
20000edc:	9100      	str	r1, [sp, #0]
20000ede:	f04f 0102 	mov.w	r1, #2
20000ee2:	9101      	str	r1, [sp, #4]
20000ee4:	f04f 0100 	mov.w	r1, #0
20000ee8:	9102      	str	r1, [sp, #8]
20000eea:	68f8      	ldr	r0, [r7, #12]
20000eec:	4611      	mov	r1, r2
20000eee:	461a      	mov	r2, r3
20000ef0:	f04f 0301 	mov.w	r3, #1
20000ef4:	f005 fa2a 	bl	2000634c <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
20000ef8:	68f8      	ldr	r0, [r7, #12]
20000efa:	f04f 0100 	mov.w	r1, #0
20000efe:	f005 fabd 	bl	2000647c <I2C_wait_complete>
20000f02:	4603      	mov	r3, r0
20000f04:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
20000f06:	7f7b      	ldrb	r3, [r7, #29]
20000f08:	2b00      	cmp	r3, #0
20000f0a:	d004      	beq.n	20000f16 <get_ADC_value+0x6e>
		*flag = 1;
20000f0c:	687b      	ldr	r3, [r7, #4]
20000f0e:	f04f 0201 	mov.w	r2, #1
20000f12:	701a      	strb	r2, [r3, #0]
20000f14:	e012      	b.n	20000f3c <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
20000f16:	7e3b      	ldrb	r3, [r7, #24]
20000f18:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000f1c:	b29a      	uxth	r2, r3
20000f1e:	7e7b      	ldrb	r3, [r7, #25]
20000f20:	ea42 0303 	orr.w	r3, r2, r3
20000f24:	b29b      	uxth	r3, r3
20000f26:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
20000f28:	8bfb      	ldrh	r3, [r7, #30]
20000f2a:	ea4f 5303 	mov.w	r3, r3, lsl #20
20000f2e:	ea4f 5313 	mov.w	r3, r3, lsr #20
20000f32:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
20000f34:	687b      	ldr	r3, [r7, #4]
20000f36:	f04f 0200 	mov.w	r2, #0
20000f3a:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
20000f3c:	8bfb      	ldrh	r3, [r7, #30]
}
20000f3e:	4618      	mov	r0, r3
20000f40:	f107 0720 	add.w	r7, r7, #32
20000f44:	46bd      	mov	sp, r7
20000f46:	bd80      	pop	{r7, pc}

20000f48 <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
20000f48:	b580      	push	{r7, lr}
20000f4a:	b084      	sub	sp, #16
20000f4c:	af00      	add	r7, sp, #0
20000f4e:	4603      	mov	r3, r0
20000f50:	6039      	str	r1, [r7, #0]
20000f52:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
20000f54:	79fb      	ldrb	r3, [r7, #7]
20000f56:	2b00      	cmp	r3, #0
20000f58:	d10e      	bne.n	20000f78 <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
20000f5a:	683b      	ldr	r3, [r7, #0]
20000f5c:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
20000f5e:	68bb      	ldr	r3, [r7, #8]
20000f60:	6859      	ldr	r1, [r3, #4]
20000f62:	68bb      	ldr	r3, [r7, #8]
20000f64:	689a      	ldr	r2, [r3, #8]
20000f66:	68bb      	ldr	r3, [r7, #8]
20000f68:	7b1b      	ldrb	r3, [r3, #12]
20000f6a:	4608      	mov	r0, r1
20000f6c:	4611      	mov	r1, r2
20000f6e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f72:	f005 f891 	bl	20006098 <I2C_init>
20000f76:	e030      	b.n	20000fda <init+0x92>
	}
	else if(d == vc_sensor){
20000f78:	79fb      	ldrb	r3, [r7, #7]
20000f7a:	2b0a      	cmp	r3, #10
20000f7c:	d10e      	bne.n	20000f9c <init+0x54>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
20000f7e:	683b      	ldr	r3, [r7, #0]
20000f80:	60fb      	str	r3, [r7, #12]
		I2C_init(vc_pkt->g_core_i2c2, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
20000f82:	68fb      	ldr	r3, [r7, #12]
20000f84:	6859      	ldr	r1, [r3, #4]
20000f86:	68fb      	ldr	r3, [r7, #12]
20000f88:	689a      	ldr	r2, [r3, #8]
20000f8a:	68fb      	ldr	r3, [r7, #12]
20000f8c:	7b1b      	ldrb	r3, [r3, #12]
20000f8e:	4608      	mov	r0, r1
20000f90:	4611      	mov	r1, r2
20000f92:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f96:	f005 f87f 	bl	20006098 <I2C_init>
20000f9a:	e01e      	b.n	20000fda <init+0x92>
	}
	else if(d == all){
20000f9c:	79fb      	ldrb	r3, [r7, #7]
20000f9e:	2b0b      	cmp	r3, #11
20000fa0:	d11b      	bne.n	20000fda <init+0x92>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000fa2:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
20000fa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000faa:	f245 0100 	movw	r1, #20480	; 0x5000
20000fae:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000fb2:	f04f 0288 	mov.w	r2, #136	; 0x88
20000fb6:	f04f 0300 	mov.w	r3, #0
20000fba:	f005 f86d 	bl	20006098 <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000fbe:	f64d 4034 	movw	r0, #56372	; 0xdc34
20000fc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000fc6:	f242 0100 	movw	r1, #8192	; 0x2000
20000fca:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000fce:	f04f 0288 	mov.w	r2, #136	; 0x88
20000fd2:	f04f 0300 	mov.w	r3, #0
20000fd6:	f005 f85f 	bl	20006098 <I2C_init>
	}
	else{

	}

}
20000fda:	f107 0710 	add.w	r7, r7, #16
20000fde:	46bd      	mov	sp, r7
20000fe0:	bd80      	pop	{r7, pc}
20000fe2:	bf00      	nop

20000fe4 <xMsToTicks>:

	vTaskDelay(tick_for_time);

}

TickType_t xMsToTicks(uint16_t timems){
20000fe4:	b480      	push	{r7}
20000fe6:	b083      	sub	sp, #12
20000fe8:	af00      	add	r7, sp, #0
20000fea:	4603      	mov	r3, r0
20000fec:	80fb      	strh	r3, [r7, #6]
	return pdMS_TO_TICKS(timems);
20000fee:	88fb      	ldrh	r3, [r7, #6]
20000ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20000ff4:	fb02 f203 	mul.w	r2, r2, r3
20000ff8:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20000ffc:	f2c1 0362 	movt	r3, #4194	; 0x1062
20001000:	fba3 1302 	umull	r1, r3, r3, r2
20001004:	ea4f 1393 	mov.w	r3, r3, lsr #6
}
20001008:	4618      	mov	r0, r3
2000100a:	f107 070c 	add.w	r7, r7, #12
2000100e:	46bd      	mov	sp, r7
20001010:	bc80      	pop	{r7}
20001012:	4770      	bx	lr

20001014 <cmd_valid>:
cmd_t cmd_list[NUM_CMDS];

extern uint16_t command_cnt;
extern uint16_t command_reject_cnt;

uint8_t cmd_valid(rx_cmd_t* rx_cmd){
20001014:	b480      	push	{r7}
20001016:	b083      	sub	sp, #12
20001018:	af00      	add	r7, sp, #0
2000101a:	6078      	str	r0, [r7, #4]
	return 1;  //Will be checking the validated of the checksum.
2000101c:	f04f 0301 	mov.w	r3, #1
}
20001020:	4618      	mov	r0, r3
20001022:	f107 070c 	add.w	r7, r7, #12
20001026:	46bd      	mov	sp, r7
20001028:	bc80      	pop	{r7}
2000102a:	4770      	bx	lr

2000102c <chk_s_cmd>:

uint8_t chk_s_cmd(rx_cmd_t* rx_cmd){
2000102c:	b480      	push	{r7}
2000102e:	b085      	sub	sp, #20
20001030:	af00      	add	r7, sp, #0
20001032:	6078      	str	r0, [r7, #4]
	uint16_t p;


	p = PILOT_REVERSE_BYTE_ORDER(rx_cmd->ccsds_cmd_p1);
20001034:	687b      	ldr	r3, [r7, #4]
20001036:	781a      	ldrb	r2, [r3, #0]
20001038:	785b      	ldrb	r3, [r3, #1]
2000103a:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000103e:	ea43 0302 	orr.w	r3, r3, r2
20001042:	b29b      	uxth	r3, r3
20001044:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001048:	b29a      	uxth	r2, r3
2000104a:	687b      	ldr	r3, [r7, #4]
2000104c:	7819      	ldrb	r1, [r3, #0]
2000104e:	785b      	ldrb	r3, [r3, #1]
20001050:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001054:	ea43 0301 	orr.w	r3, r3, r1
20001058:	b29b      	uxth	r3, r3
2000105a:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000105e:	b29b      	uxth	r3, r3
20001060:	ea42 0303 	orr.w	r3, r2, r3
20001064:	b29b      	uxth	r3, r3
20001066:	81fb      	strh	r3, [r7, #14]


	cmd->length = p & 0x07FF;
20001068:	f24e 3360 	movw	r3, #58208	; 0xe360
2000106c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001070:	681a      	ldr	r2, [r3, #0]
20001072:	89fb      	ldrh	r3, [r7, #14]
20001074:	ea4f 5343 	mov.w	r3, r3, lsl #21
20001078:	ea4f 5353 	mov.w	r3, r3, lsr #21
2000107c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20001080:	f04f 0000 	mov.w	r0, #0
20001084:	ea40 0101 	orr.w	r1, r0, r1
20001088:	7051      	strb	r1, [r2, #1]
2000108a:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000108e:	b29b      	uxth	r3, r3
20001090:	f04f 0100 	mov.w	r1, #0
20001094:	ea41 0303 	orr.w	r3, r1, r3
20001098:	7093      	strb	r3, [r2, #2]

	if( (p >> 11) & 0x01){
2000109a:	89fb      	ldrh	r3, [r7, #14]
2000109c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
200010a0:	b29b      	uxth	r3, r3
200010a2:	f003 0301 	and.w	r3, r3, #1
200010a6:	b2db      	uxtb	r3, r3
200010a8:	2b00      	cmp	r3, #0
200010aa:	d002      	beq.n	200010b2 <chk_s_cmd+0x86>
		return 1;
200010ac:	f04f 0301 	mov.w	r3, #1
200010b0:	e001      	b.n	200010b6 <chk_s_cmd+0x8a>
	}
	else{
		return 0;
200010b2:	f04f 0300 	mov.w	r3, #0
	}
}
200010b6:	4618      	mov	r0, r3
200010b8:	f107 0714 	add.w	r7, r7, #20
200010bc:	46bd      	mov	sp, r7
200010be:	bc80      	pop	{r7}
200010c0:	4770      	bx	lr
200010c2:	bf00      	nop

200010c4 <add_cmd>:


void add_cmd(uint8_t id, uint16_t length, void (*ex_func)(uint8_t id, rx_cmd_t* rcv_cmd)){
200010c4:	b480      	push	{r7}
200010c6:	b083      	sub	sp, #12
200010c8:	af00      	add	r7, sp, #0
200010ca:	460b      	mov	r3, r1
200010cc:	603a      	str	r2, [r7, #0]
200010ce:	4602      	mov	r2, r0
200010d0:	71fa      	strb	r2, [r7, #7]
200010d2:	80bb      	strh	r3, [r7, #4]

	cmd_list[id].id = id;
200010d4:	79f9      	ldrb	r1, [r7, #7]
200010d6:	f24e 3248 	movw	r2, #58184	; 0xe348
200010da:	f2c2 0200 	movt	r2, #8192	; 0x2000
200010de:	460b      	mov	r3, r1
200010e0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200010e4:	ebc1 0303 	rsb	r3, r1, r3
200010e8:	4413      	add	r3, r2
200010ea:	79fa      	ldrb	r2, [r7, #7]
200010ec:	701a      	strb	r2, [r3, #0]
	cmd_list[id].length = length;
200010ee:	79f9      	ldrb	r1, [r7, #7]
200010f0:	f24e 3248 	movw	r2, #58184	; 0xe348
200010f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
200010f8:	460b      	mov	r3, r1
200010fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200010fe:	ebc1 0303 	rsb	r3, r1, r3
20001102:	4413      	add	r3, r2
20001104:	793a      	ldrb	r2, [r7, #4]
20001106:	f04f 0100 	mov.w	r1, #0
2000110a:	ea41 0202 	orr.w	r2, r1, r2
2000110e:	705a      	strb	r2, [r3, #1]
20001110:	797a      	ldrb	r2, [r7, #5]
20001112:	f04f 0100 	mov.w	r1, #0
20001116:	ea41 0202 	orr.w	r2, r1, r2
2000111a:	709a      	strb	r2, [r3, #2]
	cmd_list[id].ex_func = ex_func;
2000111c:	79f8      	ldrb	r0, [r7, #7]
2000111e:	683a      	ldr	r2, [r7, #0]
20001120:	f24e 3148 	movw	r1, #58184	; 0xe348
20001124:	f2c2 0100 	movt	r1, #8192	; 0x2000
20001128:	4603      	mov	r3, r0
2000112a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000112e:	ebc0 0303 	rsb	r3, r0, r3
20001132:	440b      	add	r3, r1
20001134:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20001138:	f04f 0000 	mov.w	r0, #0
2000113c:	ea40 0101 	orr.w	r1, r0, r1
20001140:	70d9      	strb	r1, [r3, #3]
20001142:	ea4f 2112 	mov.w	r1, r2, lsr #8
20001146:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000114a:	f04f 0000 	mov.w	r0, #0
2000114e:	ea40 0101 	orr.w	r1, r0, r1
20001152:	7119      	strb	r1, [r3, #4]
20001154:	ea4f 4112 	mov.w	r1, r2, lsr #16
20001158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000115c:	f04f 0000 	mov.w	r0, #0
20001160:	ea40 0101 	orr.w	r1, r0, r1
20001164:	7159      	strb	r1, [r3, #5]
20001166:	ea4f 6212 	mov.w	r2, r2, lsr #24
2000116a:	f04f 0100 	mov.w	r1, #0
2000116e:	ea41 0202 	orr.w	r2, r1, r2
20001172:	719a      	strb	r2, [r3, #6]

}
20001174:	f107 070c 	add.w	r7, r7, #12
20001178:	46bd      	mov	sp, r7
2000117a:	bc80      	pop	{r7}
2000117c:	4770      	bx	lr
2000117e:	bf00      	nop

20001180 <vcmd_callback>:

void vcmd_callback(){
20001180:	b580      	push	{r7, lr}
20001182:	af00      	add	r7, sp, #0
	//Execution for the timer based command
	cmd_list[rx_cmd->ccsds_APID - 1].ex_func(rx_cmd);
20001184:	f24e 1310 	movw	r3, #57616	; 0xe110
20001188:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000118c:	681b      	ldr	r3, [r3, #0]
2000118e:	789a      	ldrb	r2, [r3, #2]
20001190:	78db      	ldrb	r3, [r3, #3]
20001192:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001196:	ea43 0302 	orr.w	r3, r3, r2
2000119a:	b29b      	uxth	r3, r3
2000119c:	f103 31ff 	add.w	r1, r3, #4294967295
200011a0:	f24e 3248 	movw	r2, #58184	; 0xe348
200011a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
200011a8:	460b      	mov	r3, r1
200011aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200011ae:	ebc1 0303 	rsb	r3, r1, r3
200011b2:	4413      	add	r3, r2
200011b4:	78da      	ldrb	r2, [r3, #3]
200011b6:	7919      	ldrb	r1, [r3, #4]
200011b8:	ea4f 2101 	mov.w	r1, r1, lsl #8
200011bc:	ea41 0202 	orr.w	r2, r1, r2
200011c0:	7959      	ldrb	r1, [r3, #5]
200011c2:	ea4f 4101 	mov.w	r1, r1, lsl #16
200011c6:	ea41 0202 	orr.w	r2, r1, r2
200011ca:	799b      	ldrb	r3, [r3, #6]
200011cc:	ea4f 6303 	mov.w	r3, r3, lsl #24
200011d0:	ea43 0302 	orr.w	r3, r3, r2
200011d4:	461a      	mov	r2, r3
200011d6:	f24e 1310 	movw	r3, #57616	; 0xe110
200011da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011de:	681b      	ldr	r3, [r3, #0]
200011e0:	4618      	mov	r0, r3
200011e2:	4790      	blx	r2
}
200011e4:	bd80      	pop	{r7, pc}
200011e6:	bf00      	nop

200011e8 <cmd_engine>:

void cmd_engine(rx_cmd_t* rx_cmd){
200011e8:	b590      	push	{r4, r7, lr}
200011ea:	b085      	sub	sp, #20
200011ec:	af02      	add	r7, sp, #8
200011ee:	6078      	str	r0, [r7, #4]

	add_cmd(0, 16, cmd_noop);
200011f0:	f241 330d 	movw	r3, #4877	; 0x130d
200011f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011f8:	f04f 0000 	mov.w	r0, #0
200011fc:	f04f 0110 	mov.w	r1, #16
20001200:	461a      	mov	r2, r3
20001202:	f7ff ff5f 	bl	200010c4 <add_cmd>
	add_cmd(1, 16, set_pkt_rate);   //the actual command apid's is one greater than this.
20001206:	f241 3321 	movw	r3, #4897	; 0x1321
2000120a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000120e:	f04f 0001 	mov.w	r0, #1
20001212:	f04f 0110 	mov.w	r1, #16
20001216:	461a      	mov	r2, r3
20001218:	f7ff ff54 	bl	200010c4 <add_cmd>
	add_cmd(2, 16, cmd_sc_reset);
2000121c:	f241 33b1 	movw	r3, #5041	; 0x13b1
20001220:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001224:	f04f 0002 	mov.w	r0, #2
20001228:	f04f 0110 	mov.w	r1, #16
2000122c:	461a      	mov	r2, r3
2000122e:	f7ff ff49 	bl	200010c4 <add_cmd>

	if(chk_s_cmd(rx_cmd)){  //if the command is storable
20001232:	6878      	ldr	r0, [r7, #4]
20001234:	f7ff fefa 	bl	2000102c <chk_s_cmd>
20001238:	4603      	mov	r3, r0
2000123a:	2b00      	cmp	r3, #0
2000123c:	d03b      	beq.n	200012b6 <cmd_engine+0xce>
		cmd_timer[0] = xTimerCreate("cmd_timer", pdMS_TO_TICKS(rx_cmd->ccsds_time * 1000), pdFALSE, (void*)0, vcmd_callback);
2000123e:	687b      	ldr	r3, [r7, #4]
20001240:	791b      	ldrb	r3, [r3, #4]
20001242:	461a      	mov	r2, r3
20001244:	f244 2340 	movw	r3, #16960	; 0x4240
20001248:	f2c0 030f 	movt	r3, #15
2000124c:	fb03 f302 	mul.w	r3, r3, r2
20001250:	461a      	mov	r2, r3
20001252:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20001256:	f2c1 0362 	movt	r3, #4194	; 0x1062
2000125a:	fba3 1302 	umull	r1, r3, r3, r2
2000125e:	ea4f 1293 	mov.w	r2, r3, lsr #6
20001262:	f241 1381 	movw	r3, #4481	; 0x1181
20001266:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000126a:	9300      	str	r3, [sp, #0]
2000126c:	f247 70dc 	movw	r0, #30684	; 0x77dc
20001270:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001274:	4611      	mov	r1, r2
20001276:	f04f 0200 	mov.w	r2, #0
2000127a:	f04f 0300 	mov.w	r3, #0
2000127e:	f002 fa93 	bl	200037a8 <xTimerCreate>
20001282:	4602      	mov	r2, r0
20001284:	f24e 1314 	movw	r3, #57620	; 0xe114
20001288:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000128c:	601a      	str	r2, [r3, #0]
		xTimerStart(cmd_timer[0], 0);
2000128e:	f24e 1314 	movw	r3, #57620	; 0xe114
20001292:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001296:	681c      	ldr	r4, [r3, #0]
20001298:	f001 fa74 	bl	20002784 <xTaskGetTickCount>
2000129c:	4603      	mov	r3, r0
2000129e:	f04f 0200 	mov.w	r2, #0
200012a2:	9200      	str	r2, [sp, #0]
200012a4:	4620      	mov	r0, r4
200012a6:	f04f 0101 	mov.w	r1, #1
200012aa:	461a      	mov	r2, r3
200012ac:	f04f 0300 	mov.w	r3, #0
200012b0:	f002 facc 	bl	2000384c <xTimerGenericCommand>
200012b4:	e025      	b.n	20001302 <cmd_engine+0x11a>
	}
	else{
		 //Commands needs to be executed right now.
//		add_cmd(rx_cmd->ccsds_APID, cmd->length, cmd_list[rx_cmd->ccsds_APID].ex_func(rx_cmd->ccsds_APID, rx_cmd->parameters, cmd->length));
		cmd_list[rx_cmd->ccsds_APID - 1].ex_func(rx_cmd);
200012b6:	687b      	ldr	r3, [r7, #4]
200012b8:	789a      	ldrb	r2, [r3, #2]
200012ba:	78db      	ldrb	r3, [r3, #3]
200012bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
200012c0:	ea43 0302 	orr.w	r3, r3, r2
200012c4:	b29b      	uxth	r3, r3
200012c6:	f103 31ff 	add.w	r1, r3, #4294967295
200012ca:	f24e 3248 	movw	r2, #58184	; 0xe348
200012ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
200012d2:	460b      	mov	r3, r1
200012d4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200012d8:	ebc1 0303 	rsb	r3, r1, r3
200012dc:	4413      	add	r3, r2
200012de:	78da      	ldrb	r2, [r3, #3]
200012e0:	7919      	ldrb	r1, [r3, #4]
200012e2:	ea4f 2101 	mov.w	r1, r1, lsl #8
200012e6:	ea41 0202 	orr.w	r2, r1, r2
200012ea:	7959      	ldrb	r1, [r3, #5]
200012ec:	ea4f 4101 	mov.w	r1, r1, lsl #16
200012f0:	ea41 0202 	orr.w	r2, r1, r2
200012f4:	799b      	ldrb	r3, [r3, #6]
200012f6:	ea4f 6303 	mov.w	r3, r3, lsl #24
200012fa:	ea43 0302 	orr.w	r3, r3, r2
200012fe:	6878      	ldr	r0, [r7, #4]
20001300:	4798      	blx	r3
	}

}
20001302:	f107 070c 	add.w	r7, r7, #12
20001306:	46bd      	mov	sp, r7
20001308:	bd90      	pop	{r4, r7, pc}
2000130a:	bf00      	nop

2000130c <cmd_noop>:

// Commands Definition

void cmd_noop(rx_cmd_t* rcv_cmd){
2000130c:	b480      	push	{r7}
2000130e:	b085      	sub	sp, #20
20001310:	af00      	add	r7, sp, #0
20001312:	6078      	str	r0, [r7, #4]

	uint8_t a;

}
20001314:	f107 0714 	add.w	r7, r7, #20
20001318:	46bd      	mov	sp, r7
2000131a:	bc80      	pop	{r7}
2000131c:	4770      	bx	lr
2000131e:	bf00      	nop

20001320 <set_pkt_rate>:

void set_pkt_rate(rx_cmd_t* rcv_cmd){
20001320:	b590      	push	{r4, r7, lr}
20001322:	b085      	sub	sp, #20
20001324:	af02      	add	r7, sp, #8
20001326:	6078      	str	r0, [r7, #4]

	if(rcv_cmd->parameters[1] != 0){
20001328:	687b      	ldr	r3, [r7, #4]
2000132a:	79db      	ldrb	r3, [r3, #7]
2000132c:	2b00      	cmp	r3, #0
2000132e:	d025      	beq.n	2000137c <set_pkt_rate+0x5c>
		xTimerChangePeriod(pkt_timer[rcv_cmd->parameters[0]], xMsToTicks(rcv_cmd->parameters[1] * 1000), 0);
20001330:	687b      	ldr	r3, [r7, #4]
20001332:	799b      	ldrb	r3, [r3, #6]
20001334:	461a      	mov	r2, r3
20001336:	f24e 1308 	movw	r3, #57608	; 0xe108
2000133a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000133e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
20001342:	687b      	ldr	r3, [r7, #4]
20001344:	79db      	ldrb	r3, [r3, #7]
20001346:	461a      	mov	r2, r3
20001348:	ea4f 1242 	mov.w	r2, r2, lsl #5
2000134c:	ebc3 0202 	rsb	r2, r3, r2
20001350:	ea4f 0282 	mov.w	r2, r2, lsl #2
20001354:	4413      	add	r3, r2
20001356:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000135a:	b29b      	uxth	r3, r3
2000135c:	4618      	mov	r0, r3
2000135e:	f7ff fe41 	bl	20000fe4 <xMsToTicks>
20001362:	4603      	mov	r3, r0
20001364:	f04f 0200 	mov.w	r2, #0
20001368:	9200      	str	r2, [sp, #0]
2000136a:	4620      	mov	r0, r4
2000136c:	f04f 0104 	mov.w	r1, #4
20001370:	461a      	mov	r2, r3
20001372:	f04f 0300 	mov.w	r3, #0
20001376:	f002 fa69 	bl	2000384c <xTimerGenericCommand>
2000137a:	e014      	b.n	200013a6 <set_pkt_rate+0x86>
	}
	else{
		xTimerStop(pkt_timer[rcv_cmd->parameters[0]], 0);
2000137c:	687b      	ldr	r3, [r7, #4]
2000137e:	799b      	ldrb	r3, [r3, #6]
20001380:	461a      	mov	r2, r3
20001382:	f24e 1308 	movw	r3, #57608	; 0xe108
20001386:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000138a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000138e:	f04f 0200 	mov.w	r2, #0
20001392:	9200      	str	r2, [sp, #0]
20001394:	4618      	mov	r0, r3
20001396:	f04f 0103 	mov.w	r1, #3
2000139a:	f04f 0200 	mov.w	r2, #0
2000139e:	f04f 0300 	mov.w	r3, #0
200013a2:	f002 fa53 	bl	2000384c <xTimerGenericCommand>
	// Write a function to take in APID and increase the downlink rate of that pkt.
//	if(pkt_rate->pkt_apid == HK_API_ID){
//		xTimerChangePeriod() Change the downlink rate of HK packet
//	}

}
200013a6:	f107 070c 	add.w	r7, r7, #12
200013aa:	46bd      	mov	sp, r7
200013ac:	bd90      	pop	{r4, r7, pc}
200013ae:	bf00      	nop

200013b0 <cmd_sc_reset>:

void cmd_sc_reset(rx_cmd_t* rcv_cmd){
200013b0:	b480      	push	{r7}
200013b2:	b083      	sub	sp, #12
200013b4:	af00      	add	r7, sp, #0
200013b6:	6078      	str	r0, [r7, #4]

	command_cnt = 0;
200013b8:	f24e 3364 	movw	r3, #58212	; 0xe364
200013bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013c0:	f04f 0200 	mov.w	r2, #0
200013c4:	801a      	strh	r2, [r3, #0]
	// Power Cycle other Components;

}
200013c6:	f107 070c 	add.w	r7, r7, #12
200013ca:	46bd      	mov	sp, r7
200013cc:	bc80      	pop	{r7}
200013ce:	4770      	bx	lr

200013d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
200013d0:	b480      	push	{r7}
200013d2:	b083      	sub	sp, #12
200013d4:	af00      	add	r7, sp, #0
200013d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
200013d8:	687b      	ldr	r3, [r7, #4]
200013da:	f103 0308 	add.w	r3, r3, #8
200013de:	461a      	mov	r2, r3
200013e0:	687b      	ldr	r3, [r7, #4]
200013e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
200013e4:	687b      	ldr	r3, [r7, #4]
200013e6:	f04f 32ff 	mov.w	r2, #4294967295
200013ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
200013ec:	687b      	ldr	r3, [r7, #4]
200013ee:	f103 0308 	add.w	r3, r3, #8
200013f2:	461a      	mov	r2, r3
200013f4:	687b      	ldr	r3, [r7, #4]
200013f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
200013f8:	687b      	ldr	r3, [r7, #4]
200013fa:	f103 0308 	add.w	r3, r3, #8
200013fe:	461a      	mov	r2, r3
20001400:	687b      	ldr	r3, [r7, #4]
20001402:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20001404:	687b      	ldr	r3, [r7, #4]
20001406:	f04f 0200 	mov.w	r2, #0
2000140a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
2000140c:	f107 070c 	add.w	r7, r7, #12
20001410:	46bd      	mov	sp, r7
20001412:	bc80      	pop	{r7}
20001414:	4770      	bx	lr
20001416:	bf00      	nop

20001418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20001418:	b480      	push	{r7}
2000141a:	b083      	sub	sp, #12
2000141c:	af00      	add	r7, sp, #0
2000141e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
20001420:	687b      	ldr	r3, [r7, #4]
20001422:	f04f 0200 	mov.w	r2, #0
20001426:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20001428:	f107 070c 	add.w	r7, r7, #12
2000142c:	46bd      	mov	sp, r7
2000142e:	bc80      	pop	{r7}
20001430:	4770      	bx	lr
20001432:	bf00      	nop

20001434 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001434:	b480      	push	{r7}
20001436:	b085      	sub	sp, #20
20001438:	af00      	add	r7, sp, #0
2000143a:	6078      	str	r0, [r7, #4]
2000143c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
2000143e:	687b      	ldr	r3, [r7, #4]
20001440:	685b      	ldr	r3, [r3, #4]
20001442:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20001444:	683b      	ldr	r3, [r7, #0]
20001446:	68fa      	ldr	r2, [r7, #12]
20001448:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
2000144a:	68fb      	ldr	r3, [r7, #12]
2000144c:	689a      	ldr	r2, [r3, #8]
2000144e:	683b      	ldr	r3, [r7, #0]
20001450:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20001452:	68fb      	ldr	r3, [r7, #12]
20001454:	689b      	ldr	r3, [r3, #8]
20001456:	683a      	ldr	r2, [r7, #0]
20001458:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
2000145a:	68fb      	ldr	r3, [r7, #12]
2000145c:	683a      	ldr	r2, [r7, #0]
2000145e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
20001460:	683b      	ldr	r3, [r7, #0]
20001462:	687a      	ldr	r2, [r7, #4]
20001464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20001466:	687b      	ldr	r3, [r7, #4]
20001468:	681b      	ldr	r3, [r3, #0]
2000146a:	f103 0201 	add.w	r2, r3, #1
2000146e:	687b      	ldr	r3, [r7, #4]
20001470:	601a      	str	r2, [r3, #0]
}
20001472:	f107 0714 	add.w	r7, r7, #20
20001476:	46bd      	mov	sp, r7
20001478:	bc80      	pop	{r7}
2000147a:	4770      	bx	lr

2000147c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
2000147c:	b480      	push	{r7}
2000147e:	b085      	sub	sp, #20
20001480:	af00      	add	r7, sp, #0
20001482:	6078      	str	r0, [r7, #4]
20001484:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
20001486:	683b      	ldr	r3, [r7, #0]
20001488:	681b      	ldr	r3, [r3, #0]
2000148a:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
2000148c:	68fb      	ldr	r3, [r7, #12]
2000148e:	f1b3 3fff 	cmp.w	r3, #4294967295
20001492:	d103      	bne.n	2000149c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
20001494:	687b      	ldr	r3, [r7, #4]
20001496:	691b      	ldr	r3, [r3, #16]
20001498:	60bb      	str	r3, [r7, #8]
2000149a:	e00d      	b.n	200014b8 <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
2000149c:	687b      	ldr	r3, [r7, #4]
2000149e:	f103 0308 	add.w	r3, r3, #8
200014a2:	60bb      	str	r3, [r7, #8]
200014a4:	e002      	b.n	200014ac <vListInsert+0x30>
200014a6:	68bb      	ldr	r3, [r7, #8]
200014a8:	685b      	ldr	r3, [r3, #4]
200014aa:	60bb      	str	r3, [r7, #8]
200014ac:	68bb      	ldr	r3, [r7, #8]
200014ae:	685b      	ldr	r3, [r3, #4]
200014b0:	681a      	ldr	r2, [r3, #0]
200014b2:	68fb      	ldr	r3, [r7, #12]
200014b4:	429a      	cmp	r2, r3
200014b6:	d9f6      	bls.n	200014a6 <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
200014b8:	68bb      	ldr	r3, [r7, #8]
200014ba:	685a      	ldr	r2, [r3, #4]
200014bc:	683b      	ldr	r3, [r7, #0]
200014be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
200014c0:	683b      	ldr	r3, [r7, #0]
200014c2:	685b      	ldr	r3, [r3, #4]
200014c4:	683a      	ldr	r2, [r7, #0]
200014c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
200014c8:	683b      	ldr	r3, [r7, #0]
200014ca:	68ba      	ldr	r2, [r7, #8]
200014cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
200014ce:	68bb      	ldr	r3, [r7, #8]
200014d0:	683a      	ldr	r2, [r7, #0]
200014d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
200014d4:	683b      	ldr	r3, [r7, #0]
200014d6:	687a      	ldr	r2, [r7, #4]
200014d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
200014da:	687b      	ldr	r3, [r7, #4]
200014dc:	681b      	ldr	r3, [r3, #0]
200014de:	f103 0201 	add.w	r2, r3, #1
200014e2:	687b      	ldr	r3, [r7, #4]
200014e4:	601a      	str	r2, [r3, #0]
}
200014e6:	f107 0714 	add.w	r7, r7, #20
200014ea:	46bd      	mov	sp, r7
200014ec:	bc80      	pop	{r7}
200014ee:	4770      	bx	lr

200014f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
200014f0:	b480      	push	{r7}
200014f2:	b085      	sub	sp, #20
200014f4:	af00      	add	r7, sp, #0
200014f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
200014f8:	687b      	ldr	r3, [r7, #4]
200014fa:	691b      	ldr	r3, [r3, #16]
200014fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
200014fe:	687b      	ldr	r3, [r7, #4]
20001500:	685b      	ldr	r3, [r3, #4]
20001502:	687a      	ldr	r2, [r7, #4]
20001504:	6892      	ldr	r2, [r2, #8]
20001506:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
20001508:	687b      	ldr	r3, [r7, #4]
2000150a:	689b      	ldr	r3, [r3, #8]
2000150c:	687a      	ldr	r2, [r7, #4]
2000150e:	6852      	ldr	r2, [r2, #4]
20001510:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
20001512:	68fb      	ldr	r3, [r7, #12]
20001514:	685a      	ldr	r2, [r3, #4]
20001516:	687b      	ldr	r3, [r7, #4]
20001518:	429a      	cmp	r2, r3
2000151a:	d103      	bne.n	20001524 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
2000151c:	687b      	ldr	r3, [r7, #4]
2000151e:	689a      	ldr	r2, [r3, #8]
20001520:	68fb      	ldr	r3, [r7, #12]
20001522:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
20001524:	687b      	ldr	r3, [r7, #4]
20001526:	f04f 0200 	mov.w	r2, #0
2000152a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
2000152c:	68fb      	ldr	r3, [r7, #12]
2000152e:	681b      	ldr	r3, [r3, #0]
20001530:	f103 32ff 	add.w	r2, r3, #4294967295
20001534:	68fb      	ldr	r3, [r7, #12]
20001536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
20001538:	68fb      	ldr	r3, [r7, #12]
2000153a:	681b      	ldr	r3, [r3, #0]
}
2000153c:	4618      	mov	r0, r3
2000153e:	f107 0714 	add.w	r7, r7, #20
20001542:	46bd      	mov	sp, r7
20001544:	bc80      	pop	{r7}
20001546:	4770      	bx	lr

20001548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
20001548:	b580      	push	{r7, lr}
2000154a:	b084      	sub	sp, #16
2000154c:	af00      	add	r7, sp, #0
2000154e:	6078      	str	r0, [r7, #4]
20001550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001552:	687b      	ldr	r3, [r7, #4]
20001554:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
20001556:	68bb      	ldr	r3, [r7, #8]
20001558:	2b00      	cmp	r3, #0
2000155a:	d109      	bne.n	20001570 <xQueueGenericReset+0x28>
2000155c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001560:	f383 8811 	msr	BASEPRI, r3
20001564:	f3bf 8f6f 	isb	sy
20001568:	f3bf 8f4f 	dsb	sy
2000156c:	60fb      	str	r3, [r7, #12]
2000156e:	e7fe      	b.n	2000156e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
20001570:	f003 f804 	bl	2000457c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
20001574:	68bb      	ldr	r3, [r7, #8]
20001576:	681a      	ldr	r2, [r3, #0]
20001578:	68bb      	ldr	r3, [r7, #8]
2000157a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000157c:	68b9      	ldr	r1, [r7, #8]
2000157e:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001580:	fb01 f303 	mul.w	r3, r1, r3
20001584:	441a      	add	r2, r3
20001586:	68bb      	ldr	r3, [r7, #8]
20001588:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
2000158a:	68bb      	ldr	r3, [r7, #8]
2000158c:	f04f 0200 	mov.w	r2, #0
20001590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
20001592:	68bb      	ldr	r3, [r7, #8]
20001594:	681a      	ldr	r2, [r3, #0]
20001596:	68bb      	ldr	r3, [r7, #8]
20001598:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
2000159a:	68bb      	ldr	r3, [r7, #8]
2000159c:	681a      	ldr	r2, [r3, #0]
2000159e:	68bb      	ldr	r3, [r7, #8]
200015a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015a2:	f103 33ff 	add.w	r3, r3, #4294967295
200015a6:	68b9      	ldr	r1, [r7, #8]
200015a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
200015aa:	fb01 f303 	mul.w	r3, r1, r3
200015ae:	441a      	add	r2, r3
200015b0:	68bb      	ldr	r3, [r7, #8]
200015b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
200015b4:	68bb      	ldr	r3, [r7, #8]
200015b6:	f04f 32ff 	mov.w	r2, #4294967295
200015ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
200015be:	68bb      	ldr	r3, [r7, #8]
200015c0:	f04f 32ff 	mov.w	r2, #4294967295
200015c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
200015c8:	683b      	ldr	r3, [r7, #0]
200015ca:	2b00      	cmp	r3, #0
200015cc:	d118      	bne.n	20001600 <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
200015ce:	68bb      	ldr	r3, [r7, #8]
200015d0:	691b      	ldr	r3, [r3, #16]
200015d2:	2b00      	cmp	r3, #0
200015d4:	d021      	beq.n	2000161a <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
200015d6:	68bb      	ldr	r3, [r7, #8]
200015d8:	f103 0310 	add.w	r3, r3, #16
200015dc:	4618      	mov	r0, r3
200015de:	f001 fb0f 	bl	20002c00 <xTaskRemoveFromEventList>
200015e2:	4603      	mov	r3, r0
200015e4:	2b00      	cmp	r3, #0
200015e6:	d01a      	beq.n	2000161e <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
200015e8:	f64e 5304 	movw	r3, #60676	; 0xed04
200015ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
200015f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200015f4:	601a      	str	r2, [r3, #0]
200015f6:	f3bf 8f4f 	dsb	sy
200015fa:	f3bf 8f6f 	isb	sy
200015fe:	e00f      	b.n	20001620 <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
20001600:	68bb      	ldr	r3, [r7, #8]
20001602:	f103 0310 	add.w	r3, r3, #16
20001606:	4618      	mov	r0, r3
20001608:	f7ff fee2 	bl	200013d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
2000160c:	68bb      	ldr	r3, [r7, #8]
2000160e:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001612:	4618      	mov	r0, r3
20001614:	f7ff fedc 	bl	200013d0 <vListInitialise>
20001618:	e002      	b.n	20001620 <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
2000161a:	bf00      	nop
2000161c:	e000      	b.n	20001620 <xQueueGenericReset+0xd8>
2000161e:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
20001620:	f002 ffe4 	bl	200045ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
20001624:	f04f 0301 	mov.w	r3, #1
}
20001628:	4618      	mov	r0, r3
2000162a:	f107 0710 	add.w	r7, r7, #16
2000162e:	46bd      	mov	sp, r7
20001630:	bd80      	pop	{r7, pc}
20001632:	bf00      	nop

20001634 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
20001634:	b580      	push	{r7, lr}
20001636:	b08a      	sub	sp, #40	; 0x28
20001638:	af02      	add	r7, sp, #8
2000163a:	60f8      	str	r0, [r7, #12]
2000163c:	60b9      	str	r1, [r7, #8]
2000163e:	4613      	mov	r3, r2
20001640:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
20001642:	68fb      	ldr	r3, [r7, #12]
20001644:	2b00      	cmp	r3, #0
20001646:	d109      	bne.n	2000165c <xQueueGenericCreate+0x28>
20001648:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000164c:	f383 8811 	msr	BASEPRI, r3
20001650:	f3bf 8f6f 	isb	sy
20001654:	f3bf 8f4f 	dsb	sy
20001658:	61fb      	str	r3, [r7, #28]
2000165a:	e7fe      	b.n	2000165a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
2000165c:	68bb      	ldr	r3, [r7, #8]
2000165e:	2b00      	cmp	r3, #0
20001660:	d103      	bne.n	2000166a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
20001662:	f04f 0300 	mov.w	r3, #0
20001666:	617b      	str	r3, [r7, #20]
20001668:	e004      	b.n	20001674 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000166a:	68fb      	ldr	r3, [r7, #12]
2000166c:	68ba      	ldr	r2, [r7, #8]
2000166e:	fb02 f303 	mul.w	r3, r2, r3
20001672:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
20001674:	697b      	ldr	r3, [r7, #20]
20001676:	f103 0350 	add.w	r3, r3, #80	; 0x50
2000167a:	4618      	mov	r0, r3
2000167c:	f002 fc2e 	bl	20003edc <pvPortMalloc>
20001680:	4603      	mov	r3, r0
20001682:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
20001684:	693b      	ldr	r3, [r7, #16]
20001686:	2b00      	cmp	r3, #0
20001688:	d00b      	beq.n	200016a2 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
2000168a:	693b      	ldr	r3, [r7, #16]
2000168c:	f103 0350 	add.w	r3, r3, #80	; 0x50
20001690:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
20001692:	79fb      	ldrb	r3, [r7, #7]
20001694:	693a      	ldr	r2, [r7, #16]
20001696:	9200      	str	r2, [sp, #0]
20001698:	68f8      	ldr	r0, [r7, #12]
2000169a:	68b9      	ldr	r1, [r7, #8]
2000169c:	69ba      	ldr	r2, [r7, #24]
2000169e:	f000 f807 	bl	200016b0 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
200016a2:	693b      	ldr	r3, [r7, #16]
	}
200016a4:	4618      	mov	r0, r3
200016a6:	f107 0720 	add.w	r7, r7, #32
200016aa:	46bd      	mov	sp, r7
200016ac:	bd80      	pop	{r7, pc}
200016ae:	bf00      	nop

200016b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
200016b0:	b580      	push	{r7, lr}
200016b2:	b084      	sub	sp, #16
200016b4:	af00      	add	r7, sp, #0
200016b6:	60f8      	str	r0, [r7, #12]
200016b8:	60b9      	str	r1, [r7, #8]
200016ba:	607a      	str	r2, [r7, #4]
200016bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
200016be:	68bb      	ldr	r3, [r7, #8]
200016c0:	2b00      	cmp	r3, #0
200016c2:	d103      	bne.n	200016cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
200016c4:	69ba      	ldr	r2, [r7, #24]
200016c6:	69bb      	ldr	r3, [r7, #24]
200016c8:	601a      	str	r2, [r3, #0]
200016ca:	e002      	b.n	200016d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
200016cc:	687a      	ldr	r2, [r7, #4]
200016ce:	69bb      	ldr	r3, [r7, #24]
200016d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
200016d2:	69bb      	ldr	r3, [r7, #24]
200016d4:	68fa      	ldr	r2, [r7, #12]
200016d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
200016d8:	69bb      	ldr	r3, [r7, #24]
200016da:	68ba      	ldr	r2, [r7, #8]
200016dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
200016de:	69b8      	ldr	r0, [r7, #24]
200016e0:	f04f 0101 	mov.w	r1, #1
200016e4:	f7ff ff30 	bl	20001548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
200016e8:	69bb      	ldr	r3, [r7, #24]
200016ea:	78fa      	ldrb	r2, [r7, #3]
200016ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
200016f0:	f107 0710 	add.w	r7, r7, #16
200016f4:	46bd      	mov	sp, r7
200016f6:	bd80      	pop	{r7, pc}

200016f8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
200016f8:	b580      	push	{r7, lr}
200016fa:	b082      	sub	sp, #8
200016fc:	af00      	add	r7, sp, #0
200016fe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	2b00      	cmp	r3, #0
20001704:	d014      	beq.n	20001730 <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
20001706:	687b      	ldr	r3, [r7, #4]
20001708:	f04f 0200 	mov.w	r2, #0
2000170c:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
2000170e:	687b      	ldr	r3, [r7, #4]
20001710:	f04f 0200 	mov.w	r2, #0
20001714:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
20001716:	687b      	ldr	r3, [r7, #4]
20001718:	f04f 0200 	mov.w	r2, #0
2000171c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
2000171e:	6878      	ldr	r0, [r7, #4]
20001720:	f04f 0100 	mov.w	r1, #0
20001724:	f04f 0200 	mov.w	r2, #0
20001728:	f04f 0300 	mov.w	r3, #0
2000172c:	f000 f820 	bl	20001770 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
20001730:	f107 0708 	add.w	r7, r7, #8
20001734:	46bd      	mov	sp, r7
20001736:	bd80      	pop	{r7, pc}

20001738 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
20001738:	b580      	push	{r7, lr}
2000173a:	b086      	sub	sp, #24
2000173c:	af00      	add	r7, sp, #0
2000173e:	4603      	mov	r3, r0
20001740:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
20001742:	f04f 0301 	mov.w	r3, #1
20001746:	613b      	str	r3, [r7, #16]
20001748:	f04f 0300 	mov.w	r3, #0
2000174c:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
2000174e:	79fb      	ldrb	r3, [r7, #7]
20001750:	6938      	ldr	r0, [r7, #16]
20001752:	6979      	ldr	r1, [r7, #20]
20001754:	461a      	mov	r2, r3
20001756:	f7ff ff6d 	bl	20001634 <xQueueGenericCreate>
2000175a:	4603      	mov	r3, r0
2000175c:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
2000175e:	68f8      	ldr	r0, [r7, #12]
20001760:	f7ff ffca 	bl	200016f8 <prvInitialiseMutex>

		return pxNewQueue;
20001764:	68fb      	ldr	r3, [r7, #12]
	}
20001766:	4618      	mov	r0, r3
20001768:	f107 0718 	add.w	r7, r7, #24
2000176c:	46bd      	mov	sp, r7
2000176e:	bd80      	pop	{r7, pc}

20001770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
20001770:	b580      	push	{r7, lr}
20001772:	b08e      	sub	sp, #56	; 0x38
20001774:	af00      	add	r7, sp, #0
20001776:	60f8      	str	r0, [r7, #12]
20001778:	60b9      	str	r1, [r7, #8]
2000177a:	607a      	str	r2, [r7, #4]
2000177c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
2000177e:	f04f 0300 	mov.w	r3, #0
20001782:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001784:	68fb      	ldr	r3, [r7, #12]
20001786:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
20001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000178a:	2b00      	cmp	r3, #0
2000178c:	d109      	bne.n	200017a2 <xQueueGenericSend+0x32>
2000178e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001792:	f383 8811 	msr	BASEPRI, r3
20001796:	f3bf 8f6f 	isb	sy
2000179a:	f3bf 8f4f 	dsb	sy
2000179e:	62bb      	str	r3, [r7, #40]	; 0x28
200017a0:	e7fe      	b.n	200017a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
200017a2:	68bb      	ldr	r3, [r7, #8]
200017a4:	2b00      	cmp	r3, #0
200017a6:	d103      	bne.n	200017b0 <xQueueGenericSend+0x40>
200017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200017ac:	2b00      	cmp	r3, #0
200017ae:	d102      	bne.n	200017b6 <xQueueGenericSend+0x46>
200017b0:	f04f 0301 	mov.w	r3, #1
200017b4:	e001      	b.n	200017ba <xQueueGenericSend+0x4a>
200017b6:	f04f 0300 	mov.w	r3, #0
200017ba:	2b00      	cmp	r3, #0
200017bc:	d109      	bne.n	200017d2 <xQueueGenericSend+0x62>
200017be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200017c2:	f383 8811 	msr	BASEPRI, r3
200017c6:	f3bf 8f6f 	isb	sy
200017ca:	f3bf 8f4f 	dsb	sy
200017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
200017d0:	e7fe      	b.n	200017d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
200017d2:	683b      	ldr	r3, [r7, #0]
200017d4:	2b02      	cmp	r3, #2
200017d6:	d103      	bne.n	200017e0 <xQueueGenericSend+0x70>
200017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200017dc:	2b01      	cmp	r3, #1
200017de:	d102      	bne.n	200017e6 <xQueueGenericSend+0x76>
200017e0:	f04f 0301 	mov.w	r3, #1
200017e4:	e001      	b.n	200017ea <xQueueGenericSend+0x7a>
200017e6:	f04f 0300 	mov.w	r3, #0
200017ea:	2b00      	cmp	r3, #0
200017ec:	d109      	bne.n	20001802 <xQueueGenericSend+0x92>
200017ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200017f2:	f383 8811 	msr	BASEPRI, r3
200017f6:	f3bf 8f6f 	isb	sy
200017fa:	f3bf 8f4f 	dsb	sy
200017fe:	633b      	str	r3, [r7, #48]	; 0x30
20001800:	e7fe      	b.n	20001800 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001802:	f001 fc05 	bl	20003010 <xTaskGetSchedulerState>
20001806:	4603      	mov	r3, r0
20001808:	2b00      	cmp	r3, #0
2000180a:	d102      	bne.n	20001812 <xQueueGenericSend+0xa2>
2000180c:	687b      	ldr	r3, [r7, #4]
2000180e:	2b00      	cmp	r3, #0
20001810:	d102      	bne.n	20001818 <xQueueGenericSend+0xa8>
20001812:	f04f 0301 	mov.w	r3, #1
20001816:	e001      	b.n	2000181c <xQueueGenericSend+0xac>
20001818:	f04f 0300 	mov.w	r3, #0
2000181c:	2b00      	cmp	r3, #0
2000181e:	d10a      	bne.n	20001836 <xQueueGenericSend+0xc6>
20001820:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001824:	f383 8811 	msr	BASEPRI, r3
20001828:	f3bf 8f6f 	isb	sy
2000182c:	f3bf 8f4f 	dsb	sy
20001830:	637b      	str	r3, [r7, #52]	; 0x34
20001832:	e7fe      	b.n	20001832 <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
20001834:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001836:	f002 fea1 	bl	2000457c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
2000183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000183c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001842:	429a      	cmp	r2, r3
20001844:	d302      	bcc.n	2000184c <xQueueGenericSend+0xdc>
20001846:	683b      	ldr	r3, [r7, #0]
20001848:	2b02      	cmp	r3, #2
2000184a:	d134      	bne.n	200018b6 <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
2000184c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000184e:	68b9      	ldr	r1, [r7, #8]
20001850:	683a      	ldr	r2, [r7, #0]
20001852:	f000 fa7b 	bl	20001d4c <prvCopyDataToQueue>
20001856:	4603      	mov	r3, r0
20001858:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000185e:	2b00      	cmp	r3, #0
20001860:	d014      	beq.n	2000188c <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001864:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001868:	4618      	mov	r0, r3
2000186a:	f001 f9c9 	bl	20002c00 <xTaskRemoveFromEventList>
2000186e:	4603      	mov	r3, r0
20001870:	2b00      	cmp	r3, #0
20001872:	d01a      	beq.n	200018aa <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001874:	f64e 5304 	movw	r3, #60676	; 0xed04
20001878:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000187c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001880:	601a      	str	r2, [r3, #0]
20001882:	f3bf 8f4f 	dsb	sy
20001886:	f3bf 8f6f 	isb	sy
2000188a:	e00f      	b.n	200018ac <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
2000188c:	6a3b      	ldr	r3, [r7, #32]
2000188e:	2b00      	cmp	r3, #0
20001890:	d00c      	beq.n	200018ac <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
20001892:	f64e 5304 	movw	r3, #60676	; 0xed04
20001896:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000189a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000189e:	601a      	str	r2, [r3, #0]
200018a0:	f3bf 8f4f 	dsb	sy
200018a4:	f3bf 8f6f 	isb	sy
200018a8:	e000      	b.n	200018ac <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
200018aa:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
200018ac:	f002 fe9e 	bl	200045ec <vPortExitCritical>
				return pdPASS;
200018b0:	f04f 0301 	mov.w	r3, #1
200018b4:	e06f      	b.n	20001996 <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
200018b6:	687b      	ldr	r3, [r7, #4]
200018b8:	2b00      	cmp	r3, #0
200018ba:	d104      	bne.n	200018c6 <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
200018bc:	f002 fe96 	bl	200045ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
200018c0:	f04f 0300 	mov.w	r3, #0
200018c4:	e067      	b.n	20001996 <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
200018c6:	69fb      	ldr	r3, [r7, #28]
200018c8:	2b00      	cmp	r3, #0
200018ca:	d107      	bne.n	200018dc <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
200018cc:	f107 0314 	add.w	r3, r7, #20
200018d0:	4618      	mov	r0, r3
200018d2:	f001 fa0d 	bl	20002cf0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
200018d6:	f04f 0301 	mov.w	r3, #1
200018da:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
200018dc:	f002 fe86 	bl	200045ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
200018e0:	f000 fe6e 	bl	200025c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
200018e4:	f002 fe4a 	bl	2000457c <vPortEnterCritical>
200018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200018ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200018ee:	b2db      	uxtb	r3, r3
200018f0:	b25b      	sxtb	r3, r3
200018f2:	f1b3 3fff 	cmp.w	r3, #4294967295
200018f6:	d104      	bne.n	20001902 <xQueueGenericSend+0x192>
200018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200018fa:	f04f 0200 	mov.w	r2, #0
200018fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001908:	b2db      	uxtb	r3, r3
2000190a:	b25b      	sxtb	r3, r3
2000190c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001910:	d104      	bne.n	2000191c <xQueueGenericSend+0x1ac>
20001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001914:	f04f 0200 	mov.w	r2, #0
20001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
2000191c:	f002 fe66 	bl	200045ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001920:	f107 0214 	add.w	r2, r7, #20
20001924:	f107 0304 	add.w	r3, r7, #4
20001928:	4610      	mov	r0, r2
2000192a:	4619      	mov	r1, r3
2000192c:	f001 fa04 	bl	20002d38 <xTaskCheckForTimeOut>
20001930:	4603      	mov	r3, r0
20001932:	2b00      	cmp	r3, #0
20001934:	d128      	bne.n	20001988 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
20001936:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001938:	f000 fb18 	bl	20001f6c <prvIsQueueFull>
2000193c:	4603      	mov	r3, r0
2000193e:	2b00      	cmp	r3, #0
20001940:	d01c      	beq.n	2000197c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
20001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001944:	f103 0210 	add.w	r2, r3, #16
20001948:	687b      	ldr	r3, [r7, #4]
2000194a:	4610      	mov	r0, r2
2000194c:	4619      	mov	r1, r3
2000194e:	f001 f905 	bl	20002b5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
20001952:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001954:	f000 fa9a 	bl	20001e8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
20001958:	f000 fe44 	bl	200025e4 <xTaskResumeAll>
2000195c:	4603      	mov	r3, r0
2000195e:	2b00      	cmp	r3, #0
20001960:	f47f af68 	bne.w	20001834 <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
20001964:	f64e 5304 	movw	r3, #60676	; 0xed04
20001968:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000196c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001970:	601a      	str	r2, [r3, #0]
20001972:	f3bf 8f4f 	dsb	sy
20001976:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
2000197a:	e75c      	b.n	20001836 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
2000197c:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000197e:	f000 fa85 	bl	20001e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001982:	f000 fe2f 	bl	200025e4 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
20001986:	e756      	b.n	20001836 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
20001988:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000198a:	f000 fa7f 	bl	20001e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
2000198e:	f000 fe29 	bl	200025e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
20001992:	f04f 0300 	mov.w	r3, #0
		}
	}
}
20001996:	4618      	mov	r0, r3
20001998:	f107 0738 	add.w	r7, r7, #56	; 0x38
2000199c:	46bd      	mov	sp, r7
2000199e:	bd80      	pop	{r7, pc}

200019a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
200019a0:	b580      	push	{r7, lr}
200019a2:	b08e      	sub	sp, #56	; 0x38
200019a4:	af00      	add	r7, sp, #0
200019a6:	60f8      	str	r0, [r7, #12]
200019a8:	60b9      	str	r1, [r7, #8]
200019aa:	607a      	str	r2, [r7, #4]
200019ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200019ae:	68fb      	ldr	r3, [r7, #12]
200019b0:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
200019b2:	69bb      	ldr	r3, [r7, #24]
200019b4:	2b00      	cmp	r3, #0
200019b6:	d109      	bne.n	200019cc <xQueueGenericSendFromISR+0x2c>
200019b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200019bc:	f383 8811 	msr	BASEPRI, r3
200019c0:	f3bf 8f6f 	isb	sy
200019c4:	f3bf 8f4f 	dsb	sy
200019c8:	623b      	str	r3, [r7, #32]
200019ca:	e7fe      	b.n	200019ca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
200019cc:	68bb      	ldr	r3, [r7, #8]
200019ce:	2b00      	cmp	r3, #0
200019d0:	d103      	bne.n	200019da <xQueueGenericSendFromISR+0x3a>
200019d2:	69bb      	ldr	r3, [r7, #24]
200019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200019d6:	2b00      	cmp	r3, #0
200019d8:	d102      	bne.n	200019e0 <xQueueGenericSendFromISR+0x40>
200019da:	f04f 0301 	mov.w	r3, #1
200019de:	e001      	b.n	200019e4 <xQueueGenericSendFromISR+0x44>
200019e0:	f04f 0300 	mov.w	r3, #0
200019e4:	2b00      	cmp	r3, #0
200019e6:	d109      	bne.n	200019fc <xQueueGenericSendFromISR+0x5c>
200019e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200019ec:	f383 8811 	msr	BASEPRI, r3
200019f0:	f3bf 8f6f 	isb	sy
200019f4:	f3bf 8f4f 	dsb	sy
200019f8:	627b      	str	r3, [r7, #36]	; 0x24
200019fa:	e7fe      	b.n	200019fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
200019fc:	683b      	ldr	r3, [r7, #0]
200019fe:	2b02      	cmp	r3, #2
20001a00:	d103      	bne.n	20001a0a <xQueueGenericSendFromISR+0x6a>
20001a02:	69bb      	ldr	r3, [r7, #24]
20001a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001a06:	2b01      	cmp	r3, #1
20001a08:	d102      	bne.n	20001a10 <xQueueGenericSendFromISR+0x70>
20001a0a:	f04f 0301 	mov.w	r3, #1
20001a0e:	e001      	b.n	20001a14 <xQueueGenericSendFromISR+0x74>
20001a10:	f04f 0300 	mov.w	r3, #0
20001a14:	2b00      	cmp	r3, #0
20001a16:	d109      	bne.n	20001a2c <xQueueGenericSendFromISR+0x8c>
20001a18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a1c:	f383 8811 	msr	BASEPRI, r3
20001a20:	f3bf 8f6f 	isb	sy
20001a24:	f3bf 8f4f 	dsb	sy
20001a28:	62bb      	str	r3, [r7, #40]	; 0x28
20001a2a:	e7fe      	b.n	20001a2a <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001a2c:	f002 fe7a 	bl	20004724 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20001a30:	f3ef 8211 	mrs	r2, BASEPRI
20001a34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001a38:	f383 8811 	msr	BASEPRI, r3
20001a3c:	f3bf 8f6f 	isb	sy
20001a40:	f3bf 8f4f 	dsb	sy
20001a44:	633a      	str	r2, [r7, #48]	; 0x30
20001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
20001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20001a4a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001a4c:	69bb      	ldr	r3, [r7, #24]
20001a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001a50:	69bb      	ldr	r3, [r7, #24]
20001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001a54:	429a      	cmp	r2, r3
20001a56:	d302      	bcc.n	20001a5e <xQueueGenericSendFromISR+0xbe>
20001a58:	683b      	ldr	r3, [r7, #0]
20001a5a:	2b02      	cmp	r3, #2
20001a5c:	d134      	bne.n	20001ac8 <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001a5e:	69bb      	ldr	r3, [r7, #24]
20001a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001a64:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001a66:	69b8      	ldr	r0, [r7, #24]
20001a68:	68b9      	ldr	r1, [r7, #8]
20001a6a:	683a      	ldr	r2, [r7, #0]
20001a6c:	f000 f96e 	bl	20001d4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001a70:	f997 301f 	ldrsb.w	r3, [r7, #31]
20001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
20001a78:	d114      	bne.n	20001aa4 <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001a7a:	69bb      	ldr	r3, [r7, #24]
20001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001a7e:	2b00      	cmp	r3, #0
20001a80:	d019      	beq.n	20001ab6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001a82:	69bb      	ldr	r3, [r7, #24]
20001a84:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001a88:	4618      	mov	r0, r3
20001a8a:	f001 f8b9 	bl	20002c00 <xTaskRemoveFromEventList>
20001a8e:	4603      	mov	r3, r0
20001a90:	2b00      	cmp	r3, #0
20001a92:	d012      	beq.n	20001aba <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001a94:	687b      	ldr	r3, [r7, #4]
20001a96:	2b00      	cmp	r3, #0
20001a98:	d011      	beq.n	20001abe <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001a9a:	687b      	ldr	r3, [r7, #4]
20001a9c:	f04f 0201 	mov.w	r2, #1
20001aa0:	601a      	str	r2, [r3, #0]
20001aa2:	e00d      	b.n	20001ac0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001aa4:	7ffb      	ldrb	r3, [r7, #31]
20001aa6:	f103 0301 	add.w	r3, r3, #1
20001aaa:	b2db      	uxtb	r3, r3
20001aac:	461a      	mov	r2, r3
20001aae:	69bb      	ldr	r3, [r7, #24]
20001ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001ab4:	e004      	b.n	20001ac0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001ab6:	bf00      	nop
20001ab8:	e002      	b.n	20001ac0 <xQueueGenericSendFromISR+0x120>
20001aba:	bf00      	nop
20001abc:	e000      	b.n	20001ac0 <xQueueGenericSendFromISR+0x120>
20001abe:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
20001ac0:	f04f 0301 	mov.w	r3, #1
20001ac4:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001ac6:	e002      	b.n	20001ace <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001ac8:	f04f 0300 	mov.w	r3, #0
20001acc:	613b      	str	r3, [r7, #16]
20001ace:	697b      	ldr	r3, [r7, #20]
20001ad0:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001ad4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001ad8:	693b      	ldr	r3, [r7, #16]
}
20001ada:	4618      	mov	r0, r3
20001adc:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001ae0:	46bd      	mov	sp, r7
20001ae2:	bd80      	pop	{r7, pc}

20001ae4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
20001ae4:	b580      	push	{r7, lr}
20001ae6:	b08e      	sub	sp, #56	; 0x38
20001ae8:	af00      	add	r7, sp, #0
20001aea:	60f8      	str	r0, [r7, #12]
20001aec:	60b9      	str	r1, [r7, #8]
20001aee:	607a      	str	r2, [r7, #4]
20001af0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
20001af2:	f04f 0300 	mov.w	r3, #0
20001af6:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001af8:	68fb      	ldr	r3, [r7, #12]
20001afa:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
20001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001afe:	2b00      	cmp	r3, #0
20001b00:	d109      	bne.n	20001b16 <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20001b02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001b06:	f383 8811 	msr	BASEPRI, r3
20001b0a:	f3bf 8f6f 	isb	sy
20001b0e:	f3bf 8f4f 	dsb	sy
20001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
20001b14:	e7fe      	b.n	20001b14 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001b16:	68bb      	ldr	r3, [r7, #8]
20001b18:	2b00      	cmp	r3, #0
20001b1a:	d103      	bne.n	20001b24 <xQueueGenericReceive+0x40>
20001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001b20:	2b00      	cmp	r3, #0
20001b22:	d102      	bne.n	20001b2a <xQueueGenericReceive+0x46>
20001b24:	f04f 0301 	mov.w	r3, #1
20001b28:	e001      	b.n	20001b2e <xQueueGenericReceive+0x4a>
20001b2a:	f04f 0300 	mov.w	r3, #0
20001b2e:	2b00      	cmp	r3, #0
20001b30:	d109      	bne.n	20001b46 <xQueueGenericReceive+0x62>
20001b32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001b36:	f383 8811 	msr	BASEPRI, r3
20001b3a:	f3bf 8f6f 	isb	sy
20001b3e:	f3bf 8f4f 	dsb	sy
20001b42:	633b      	str	r3, [r7, #48]	; 0x30
20001b44:	e7fe      	b.n	20001b44 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001b46:	f001 fa63 	bl	20003010 <xTaskGetSchedulerState>
20001b4a:	4603      	mov	r3, r0
20001b4c:	2b00      	cmp	r3, #0
20001b4e:	d102      	bne.n	20001b56 <xQueueGenericReceive+0x72>
20001b50:	687b      	ldr	r3, [r7, #4]
20001b52:	2b00      	cmp	r3, #0
20001b54:	d102      	bne.n	20001b5c <xQueueGenericReceive+0x78>
20001b56:	f04f 0301 	mov.w	r3, #1
20001b5a:	e001      	b.n	20001b60 <xQueueGenericReceive+0x7c>
20001b5c:	f04f 0300 	mov.w	r3, #0
20001b60:	2b00      	cmp	r3, #0
20001b62:	d10c      	bne.n	20001b7e <xQueueGenericReceive+0x9a>
20001b64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001b68:	f383 8811 	msr	BASEPRI, r3
20001b6c:	f3bf 8f6f 	isb	sy
20001b70:	f3bf 8f4f 	dsb	sy
20001b74:	637b      	str	r3, [r7, #52]	; 0x34
20001b76:	e7fe      	b.n	20001b76 <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001b78:	bf00      	nop
20001b7a:	e000      	b.n	20001b7e <xQueueGenericReceive+0x9a>
20001b7c:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
20001b7e:	f002 fcfd 	bl	2000457c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001b86:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001b8a:	2b00      	cmp	r3, #0
20001b8c:	d055      	beq.n	20001c3a <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
20001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b90:	68db      	ldr	r3, [r3, #12]
20001b92:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001b96:	68b9      	ldr	r1, [r7, #8]
20001b98:	f000 f950 	bl	20001e3c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
20001b9c:	683b      	ldr	r3, [r7, #0]
20001b9e:	2b00      	cmp	r3, #0
20001ba0:	d127      	bne.n	20001bf2 <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
20001ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001ba4:	f103 32ff 	add.w	r2, r3, #4294967295
20001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001baa:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bae:	681b      	ldr	r3, [r3, #0]
20001bb0:	2b00      	cmp	r3, #0
20001bb2:	d105      	bne.n	20001bc0 <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
20001bb4:	f001 fb9c 	bl	200032f0 <pvTaskIncrementMutexHeldCount>
20001bb8:	4603      	mov	r3, r0
20001bba:	461a      	mov	r2, r3
20001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bbe:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bc2:	691b      	ldr	r3, [r3, #16]
20001bc4:	2b00      	cmp	r3, #0
20001bc6:	d030      	beq.n	20001c2a <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bca:	f103 0310 	add.w	r3, r3, #16
20001bce:	4618      	mov	r0, r3
20001bd0:	f001 f816 	bl	20002c00 <xTaskRemoveFromEventList>
20001bd4:	4603      	mov	r3, r0
20001bd6:	2b00      	cmp	r3, #0
20001bd8:	d029      	beq.n	20001c2e <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
20001bda:	f64e 5304 	movw	r3, #60676	; 0xed04
20001bde:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001be6:	601a      	str	r2, [r3, #0]
20001be8:	f3bf 8f4f 	dsb	sy
20001bec:	f3bf 8f6f 	isb	sy
20001bf0:	e01e      	b.n	20001c30 <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
20001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bf4:	6a3a      	ldr	r2, [r7, #32]
20001bf6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001bfc:	2b00      	cmp	r3, #0
20001bfe:	d017      	beq.n	20001c30 <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c02:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001c06:	4618      	mov	r0, r3
20001c08:	f000 fffa 	bl	20002c00 <xTaskRemoveFromEventList>
20001c0c:	4603      	mov	r3, r0
20001c0e:	2b00      	cmp	r3, #0
20001c10:	d00e      	beq.n	20001c30 <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
20001c12:	f64e 5304 	movw	r3, #60676	; 0xed04
20001c16:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c1e:	601a      	str	r2, [r3, #0]
20001c20:	f3bf 8f4f 	dsb	sy
20001c24:	f3bf 8f6f 	isb	sy
20001c28:	e002      	b.n	20001c30 <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
20001c2a:	bf00      	nop
20001c2c:	e000      	b.n	20001c30 <xQueueGenericReceive+0x14c>
20001c2e:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
20001c30:	f002 fcdc 	bl	200045ec <vPortExitCritical>
				return pdPASS;
20001c34:	f04f 0301 	mov.w	r3, #1
20001c38:	e083      	b.n	20001d42 <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001c3a:	687b      	ldr	r3, [r7, #4]
20001c3c:	2b00      	cmp	r3, #0
20001c3e:	d104      	bne.n	20001c4a <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001c40:	f002 fcd4 	bl	200045ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001c44:	f04f 0300 	mov.w	r3, #0
20001c48:	e07b      	b.n	20001d42 <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
20001c4a:	69fb      	ldr	r3, [r7, #28]
20001c4c:	2b00      	cmp	r3, #0
20001c4e:	d107      	bne.n	20001c60 <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001c50:	f107 0314 	add.w	r3, r7, #20
20001c54:	4618      	mov	r0, r3
20001c56:	f001 f84b 	bl	20002cf0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001c5a:	f04f 0301 	mov.w	r3, #1
20001c5e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001c60:	f002 fcc4 	bl	200045ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001c64:	f000 fcac 	bl	200025c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001c68:	f002 fc88 	bl	2000457c <vPortEnterCritical>
20001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001c72:	b2db      	uxtb	r3, r3
20001c74:	b25b      	sxtb	r3, r3
20001c76:	f1b3 3fff 	cmp.w	r3, #4294967295
20001c7a:	d104      	bne.n	20001c86 <xQueueGenericReceive+0x1a2>
20001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c7e:	f04f 0200 	mov.w	r2, #0
20001c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001c8c:	b2db      	uxtb	r3, r3
20001c8e:	b25b      	sxtb	r3, r3
20001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
20001c94:	d104      	bne.n	20001ca0 <xQueueGenericReceive+0x1bc>
20001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c98:	f04f 0200 	mov.w	r2, #0
20001c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001ca0:	f002 fca4 	bl	200045ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001ca4:	f107 0214 	add.w	r2, r7, #20
20001ca8:	f107 0304 	add.w	r3, r7, #4
20001cac:	4610      	mov	r0, r2
20001cae:	4619      	mov	r1, r3
20001cb0:	f001 f842 	bl	20002d38 <xTaskCheckForTimeOut>
20001cb4:	4603      	mov	r3, r0
20001cb6:	2b00      	cmp	r3, #0
20001cb8:	d135      	bne.n	20001d26 <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001cbc:	f000 f93c 	bl	20001f38 <prvIsQueueEmpty>
20001cc0:	4603      	mov	r3, r0
20001cc2:	2b00      	cmp	r3, #0
20001cc4:	d029      	beq.n	20001d1a <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cc8:	681b      	ldr	r3, [r3, #0]
20001cca:	2b00      	cmp	r3, #0
20001ccc:	d108      	bne.n	20001ce0 <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
20001cce:	f002 fc55 	bl	2000457c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
20001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001cd4:	685b      	ldr	r3, [r3, #4]
20001cd6:	4618      	mov	r0, r3
20001cd8:	f001 f9be 	bl	20003058 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
20001cdc:	f002 fc86 	bl	200045ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ce2:	f103 0224 	add.w	r2, r3, #36	; 0x24
20001ce6:	687b      	ldr	r3, [r7, #4]
20001ce8:	4610      	mov	r0, r2
20001cea:	4619      	mov	r1, r3
20001cec:	f000 ff36 	bl	20002b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001cf2:	f000 f8cb 	bl	20001e8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001cf6:	f000 fc75 	bl	200025e4 <xTaskResumeAll>
20001cfa:	4603      	mov	r3, r0
20001cfc:	2b00      	cmp	r3, #0
20001cfe:	f47f af3b 	bne.w	20001b78 <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
20001d02:	f64e 5304 	movw	r3, #60676	; 0xed04
20001d06:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001d0e:	601a      	str	r2, [r3, #0]
20001d10:	f3bf 8f4f 	dsb	sy
20001d14:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001d18:	e731      	b.n	20001b7e <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d1c:	f000 f8b6 	bl	20001e8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001d20:	f000 fc60 	bl	200025e4 <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001d24:	e72b      	b.n	20001b7e <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
20001d26:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d28:	f000 f8b0 	bl	20001e8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001d2c:	f000 fc5a 	bl	200025e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001d32:	f000 f901 	bl	20001f38 <prvIsQueueEmpty>
20001d36:	4603      	mov	r3, r0
20001d38:	2b00      	cmp	r3, #0
20001d3a:	f43f af1f 	beq.w	20001b7c <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001d3e:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
20001d42:	4618      	mov	r0, r3
20001d44:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001d48:	46bd      	mov	sp, r7
20001d4a:	bd80      	pop	{r7, pc}

20001d4c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001d4c:	b580      	push	{r7, lr}
20001d4e:	b086      	sub	sp, #24
20001d50:	af00      	add	r7, sp, #0
20001d52:	60f8      	str	r0, [r7, #12]
20001d54:	60b9      	str	r1, [r7, #8]
20001d56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
20001d58:	f04f 0300 	mov.w	r3, #0
20001d5c:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001d5e:	68fb      	ldr	r3, [r7, #12]
20001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001d62:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001d64:	68fb      	ldr	r3, [r7, #12]
20001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d68:	2b00      	cmp	r3, #0
20001d6a:	d10f      	bne.n	20001d8c <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001d6c:	68fb      	ldr	r3, [r7, #12]
20001d6e:	681b      	ldr	r3, [r3, #0]
20001d70:	2b00      	cmp	r3, #0
20001d72:	d155      	bne.n	20001e20 <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
20001d74:	68fb      	ldr	r3, [r7, #12]
20001d76:	685b      	ldr	r3, [r3, #4]
20001d78:	4618      	mov	r0, r3
20001d7a:	f001 fa13 	bl	200031a4 <xTaskPriorityDisinherit>
20001d7e:	4603      	mov	r3, r0
20001d80:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
20001d82:	68fb      	ldr	r3, [r7, #12]
20001d84:	f04f 0200 	mov.w	r2, #0
20001d88:	605a      	str	r2, [r3, #4]
20001d8a:	e04c      	b.n	20001e26 <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001d8c:	687b      	ldr	r3, [r7, #4]
20001d8e:	2b00      	cmp	r3, #0
20001d90:	d11a      	bne.n	20001dc8 <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
20001d92:	68fb      	ldr	r3, [r7, #12]
20001d94:	689a      	ldr	r2, [r3, #8]
20001d96:	68fb      	ldr	r3, [r7, #12]
20001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d9a:	4610      	mov	r0, r2
20001d9c:	68b9      	ldr	r1, [r7, #8]
20001d9e:	461a      	mov	r2, r3
20001da0:	f005 fbe6 	bl	20007570 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
20001da4:	68fb      	ldr	r3, [r7, #12]
20001da6:	689a      	ldr	r2, [r3, #8]
20001da8:	68fb      	ldr	r3, [r7, #12]
20001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001dac:	441a      	add	r2, r3
20001dae:	68fb      	ldr	r3, [r7, #12]
20001db0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001db2:	68fb      	ldr	r3, [r7, #12]
20001db4:	689a      	ldr	r2, [r3, #8]
20001db6:	68fb      	ldr	r3, [r7, #12]
20001db8:	685b      	ldr	r3, [r3, #4]
20001dba:	429a      	cmp	r2, r3
20001dbc:	d332      	bcc.n	20001e24 <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001dbe:	68fb      	ldr	r3, [r7, #12]
20001dc0:	681a      	ldr	r2, [r3, #0]
20001dc2:	68fb      	ldr	r3, [r7, #12]
20001dc4:	609a      	str	r2, [r3, #8]
20001dc6:	e02e      	b.n	20001e26 <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001dc8:	68fb      	ldr	r3, [r7, #12]
20001dca:	68da      	ldr	r2, [r3, #12]
20001dcc:	68fb      	ldr	r3, [r7, #12]
20001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001dd0:	4610      	mov	r0, r2
20001dd2:	68b9      	ldr	r1, [r7, #8]
20001dd4:	461a      	mov	r2, r3
20001dd6:	f005 fbcb 	bl	20007570 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
20001dda:	68fb      	ldr	r3, [r7, #12]
20001ddc:	68da      	ldr	r2, [r3, #12]
20001dde:	68fb      	ldr	r3, [r7, #12]
20001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001de2:	f1c3 0300 	rsb	r3, r3, #0
20001de6:	441a      	add	r2, r3
20001de8:	68fb      	ldr	r3, [r7, #12]
20001dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001dec:	68fb      	ldr	r3, [r7, #12]
20001dee:	68da      	ldr	r2, [r3, #12]
20001df0:	68fb      	ldr	r3, [r7, #12]
20001df2:	681b      	ldr	r3, [r3, #0]
20001df4:	429a      	cmp	r2, r3
20001df6:	d208      	bcs.n	20001e0a <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
20001df8:	68fb      	ldr	r3, [r7, #12]
20001dfa:	685a      	ldr	r2, [r3, #4]
20001dfc:	68fb      	ldr	r3, [r7, #12]
20001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e00:	f1c3 0300 	rsb	r3, r3, #0
20001e04:	441a      	add	r2, r3
20001e06:	68fb      	ldr	r3, [r7, #12]
20001e08:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20001e0a:	687b      	ldr	r3, [r7, #4]
20001e0c:	2b02      	cmp	r3, #2
20001e0e:	d10a      	bne.n	20001e26 <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001e10:	697b      	ldr	r3, [r7, #20]
20001e12:	2b00      	cmp	r3, #0
20001e14:	d007      	beq.n	20001e26 <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
20001e16:	697b      	ldr	r3, [r7, #20]
20001e18:	f103 33ff 	add.w	r3, r3, #4294967295
20001e1c:	617b      	str	r3, [r7, #20]
20001e1e:	e002      	b.n	20001e26 <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
20001e20:	bf00      	nop
20001e22:	e000      	b.n	20001e26 <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001e24:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
20001e26:	697b      	ldr	r3, [r7, #20]
20001e28:	f103 0201 	add.w	r2, r3, #1
20001e2c:	68fb      	ldr	r3, [r7, #12]
20001e2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
20001e30:	693b      	ldr	r3, [r7, #16]
}
20001e32:	4618      	mov	r0, r3
20001e34:	f107 0718 	add.w	r7, r7, #24
20001e38:	46bd      	mov	sp, r7
20001e3a:	bd80      	pop	{r7, pc}

20001e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001e3c:	b580      	push	{r7, lr}
20001e3e:	b082      	sub	sp, #8
20001e40:	af00      	add	r7, sp, #0
20001e42:	6078      	str	r0, [r7, #4]
20001e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001e46:	687b      	ldr	r3, [r7, #4]
20001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e4a:	2b00      	cmp	r3, #0
20001e4c:	d019      	beq.n	20001e82 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
20001e4e:	687b      	ldr	r3, [r7, #4]
20001e50:	68da      	ldr	r2, [r3, #12]
20001e52:	687b      	ldr	r3, [r7, #4]
20001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e56:	441a      	add	r2, r3
20001e58:	687b      	ldr	r3, [r7, #4]
20001e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001e5c:	687b      	ldr	r3, [r7, #4]
20001e5e:	68da      	ldr	r2, [r3, #12]
20001e60:	687b      	ldr	r3, [r7, #4]
20001e62:	685b      	ldr	r3, [r3, #4]
20001e64:	429a      	cmp	r2, r3
20001e66:	d303      	bcc.n	20001e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
20001e68:	687b      	ldr	r3, [r7, #4]
20001e6a:	681a      	ldr	r2, [r3, #0]
20001e6c:	687b      	ldr	r3, [r7, #4]
20001e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
20001e70:	687b      	ldr	r3, [r7, #4]
20001e72:	68da      	ldr	r2, [r3, #12]
20001e74:	687b      	ldr	r3, [r7, #4]
20001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e78:	6838      	ldr	r0, [r7, #0]
20001e7a:	4611      	mov	r1, r2
20001e7c:	461a      	mov	r2, r3
20001e7e:	f005 fb77 	bl	20007570 <memcpy>
	}
}
20001e82:	f107 0708 	add.w	r7, r7, #8
20001e86:	46bd      	mov	sp, r7
20001e88:	bd80      	pop	{r7, pc}
20001e8a:	bf00      	nop

20001e8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001e8c:	b580      	push	{r7, lr}
20001e8e:	b084      	sub	sp, #16
20001e90:	af00      	add	r7, sp, #0
20001e92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001e94:	f002 fb72 	bl	2000457c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001e98:	687b      	ldr	r3, [r7, #4]
20001e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001e9e:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001ea0:	e012      	b.n	20001ec8 <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001ea2:	687b      	ldr	r3, [r7, #4]
20001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001ea6:	2b00      	cmp	r3, #0
20001ea8:	d013      	beq.n	20001ed2 <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001eaa:	687b      	ldr	r3, [r7, #4]
20001eac:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001eb0:	4618      	mov	r0, r3
20001eb2:	f000 fea5 	bl	20002c00 <xTaskRemoveFromEventList>
20001eb6:	4603      	mov	r3, r0
20001eb8:	2b00      	cmp	r3, #0
20001eba:	d001      	beq.n	20001ec0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001ebc:	f000 ffa4 	bl	20002e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001ec0:	7bbb      	ldrb	r3, [r7, #14]
20001ec2:	f103 33ff 	add.w	r3, r3, #4294967295
20001ec6:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001ecc:	2b00      	cmp	r3, #0
20001ece:	dce8      	bgt.n	20001ea2 <prvUnlockQueue+0x16>
20001ed0:	e000      	b.n	20001ed4 <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
20001ed2:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001ed4:	687b      	ldr	r3, [r7, #4]
20001ed6:	f04f 32ff 	mov.w	r2, #4294967295
20001eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001ede:	f002 fb85 	bl	200045ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001ee2:	f002 fb4b 	bl	2000457c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001ee6:	687b      	ldr	r3, [r7, #4]
20001ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001eec:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001eee:	e012      	b.n	20001f16 <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001ef0:	687b      	ldr	r3, [r7, #4]
20001ef2:	691b      	ldr	r3, [r3, #16]
20001ef4:	2b00      	cmp	r3, #0
20001ef6:	d013      	beq.n	20001f20 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001ef8:	687b      	ldr	r3, [r7, #4]
20001efa:	f103 0310 	add.w	r3, r3, #16
20001efe:	4618      	mov	r0, r3
20001f00:	f000 fe7e 	bl	20002c00 <xTaskRemoveFromEventList>
20001f04:	4603      	mov	r3, r0
20001f06:	2b00      	cmp	r3, #0
20001f08:	d001      	beq.n	20001f0e <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
20001f0a:	f000 ff7d 	bl	20002e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001f0e:	7bfb      	ldrb	r3, [r7, #15]
20001f10:	f103 33ff 	add.w	r3, r3, #4294967295
20001f14:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001f1a:	2b00      	cmp	r3, #0
20001f1c:	dce8      	bgt.n	20001ef0 <prvUnlockQueue+0x64>
20001f1e:	e000      	b.n	20001f22 <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
20001f20:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001f22:	687b      	ldr	r3, [r7, #4]
20001f24:	f04f 32ff 	mov.w	r2, #4294967295
20001f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001f2c:	f002 fb5e 	bl	200045ec <vPortExitCritical>
}
20001f30:	f107 0710 	add.w	r7, r7, #16
20001f34:	46bd      	mov	sp, r7
20001f36:	bd80      	pop	{r7, pc}

20001f38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001f38:	b580      	push	{r7, lr}
20001f3a:	b084      	sub	sp, #16
20001f3c:	af00      	add	r7, sp, #0
20001f3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001f40:	f002 fb1c 	bl	2000457c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001f44:	687b      	ldr	r3, [r7, #4]
20001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001f48:	2b00      	cmp	r3, #0
20001f4a:	d103      	bne.n	20001f54 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
20001f4c:	f04f 0301 	mov.w	r3, #1
20001f50:	60fb      	str	r3, [r7, #12]
20001f52:	e002      	b.n	20001f5a <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001f54:	f04f 0300 	mov.w	r3, #0
20001f58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001f5a:	f002 fb47 	bl	200045ec <vPortExitCritical>

	return xReturn;
20001f5e:	68fb      	ldr	r3, [r7, #12]
}
20001f60:	4618      	mov	r0, r3
20001f62:	f107 0710 	add.w	r7, r7, #16
20001f66:	46bd      	mov	sp, r7
20001f68:	bd80      	pop	{r7, pc}
20001f6a:	bf00      	nop

20001f6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001f6c:	b580      	push	{r7, lr}
20001f6e:	b084      	sub	sp, #16
20001f70:	af00      	add	r7, sp, #0
20001f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001f74:	f002 fb02 	bl	2000457c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001f78:	687b      	ldr	r3, [r7, #4]
20001f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001f7c:	687b      	ldr	r3, [r7, #4]
20001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001f80:	429a      	cmp	r2, r3
20001f82:	d103      	bne.n	20001f8c <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
20001f84:	f04f 0301 	mov.w	r3, #1
20001f88:	60fb      	str	r3, [r7, #12]
20001f8a:	e002      	b.n	20001f92 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
20001f8c:	f04f 0300 	mov.w	r3, #0
20001f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001f92:	f002 fb2b 	bl	200045ec <vPortExitCritical>

	return xReturn;
20001f96:	68fb      	ldr	r3, [r7, #12]
}
20001f98:	4618      	mov	r0, r3
20001f9a:	f107 0710 	add.w	r7, r7, #16
20001f9e:	46bd      	mov	sp, r7
20001fa0:	bd80      	pop	{r7, pc}
20001fa2:	bf00      	nop

20001fa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001fa4:	b580      	push	{r7, lr}
20001fa6:	b086      	sub	sp, #24
20001fa8:	af00      	add	r7, sp, #0
20001faa:	60f8      	str	r0, [r7, #12]
20001fac:	60b9      	str	r1, [r7, #8]
20001fae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001fb0:	68fb      	ldr	r3, [r7, #12]
20001fb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001fb4:	f002 fae2 	bl	2000457c <vPortEnterCritical>
20001fb8:	697b      	ldr	r3, [r7, #20]
20001fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001fbe:	b2db      	uxtb	r3, r3
20001fc0:	b25b      	sxtb	r3, r3
20001fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
20001fc6:	d104      	bne.n	20001fd2 <vQueueWaitForMessageRestricted+0x2e>
20001fc8:	697b      	ldr	r3, [r7, #20]
20001fca:	f04f 0200 	mov.w	r2, #0
20001fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001fd2:	697b      	ldr	r3, [r7, #20]
20001fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001fd8:	b2db      	uxtb	r3, r3
20001fda:	b25b      	sxtb	r3, r3
20001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
20001fe0:	d104      	bne.n	20001fec <vQueueWaitForMessageRestricted+0x48>
20001fe2:	697b      	ldr	r3, [r7, #20]
20001fe4:	f04f 0200 	mov.w	r2, #0
20001fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001fec:	f002 fafe 	bl	200045ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20001ff0:	697b      	ldr	r3, [r7, #20]
20001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001ff4:	2b00      	cmp	r3, #0
20001ff6:	d107      	bne.n	20002008 <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20001ff8:	697b      	ldr	r3, [r7, #20]
20001ffa:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001ffe:	4618      	mov	r0, r3
20002000:	68b9      	ldr	r1, [r7, #8]
20002002:	687a      	ldr	r2, [r7, #4]
20002004:	f000 fdd0 	bl	20002ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20002008:	6978      	ldr	r0, [r7, #20]
2000200a:	f7ff ff3f 	bl	20001e8c <prvUnlockQueue>
	}
2000200e:	f107 0718 	add.w	r7, r7, #24
20002012:	46bd      	mov	sp, r7
20002014:	bd80      	pop	{r7, pc}
20002016:	bf00      	nop

20002018 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20002018:	b580      	push	{r7, lr}
2000201a:	b08c      	sub	sp, #48	; 0x30
2000201c:	af04      	add	r7, sp, #16
2000201e:	60f8      	str	r0, [r7, #12]
20002020:	60b9      	str	r1, [r7, #8]
20002022:	603b      	str	r3, [r7, #0]
20002024:	4613      	mov	r3, r2
20002026:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002028:	88fb      	ldrh	r3, [r7, #6]
2000202a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000202e:	4618      	mov	r0, r3
20002030:	f001 ff54 	bl	20003edc <pvPortMalloc>
20002034:	4603      	mov	r3, r0
20002036:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
20002038:	69fb      	ldr	r3, [r7, #28]
2000203a:	2b00      	cmp	r3, #0
2000203c:	d010      	beq.n	20002060 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
2000203e:	f04f 005c 	mov.w	r0, #92	; 0x5c
20002042:	f001 ff4b 	bl	20003edc <pvPortMalloc>
20002046:	4603      	mov	r3, r0
20002048:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
2000204a:	697b      	ldr	r3, [r7, #20]
2000204c:	2b00      	cmp	r3, #0
2000204e:	d003      	beq.n	20002058 <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20002050:	697b      	ldr	r3, [r7, #20]
20002052:	69fa      	ldr	r2, [r7, #28]
20002054:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20002056:	e006      	b.n	20002066 <xTaskCreate+0x4e>
20002058:	69f8      	ldr	r0, [r7, #28]
2000205a:	f002 f83b 	bl	200040d4 <vPortFree>
2000205e:	e002      	b.n	20002066 <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
20002060:	f04f 0300 	mov.w	r3, #0
20002064:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20002066:	697b      	ldr	r3, [r7, #20]
20002068:	2b00      	cmp	r3, #0
2000206a:	d016      	beq.n	2000209a <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
2000206c:	88fb      	ldrh	r3, [r7, #6]
2000206e:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002070:	9200      	str	r2, [sp, #0]
20002072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20002074:	9201      	str	r2, [sp, #4]
20002076:	697a      	ldr	r2, [r7, #20]
20002078:	9202      	str	r2, [sp, #8]
2000207a:	f04f 0200 	mov.w	r2, #0
2000207e:	9203      	str	r2, [sp, #12]
20002080:	68f8      	ldr	r0, [r7, #12]
20002082:	68b9      	ldr	r1, [r7, #8]
20002084:	461a      	mov	r2, r3
20002086:	683b      	ldr	r3, [r7, #0]
20002088:	f000 f810 	bl	200020ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
2000208c:	6978      	ldr	r0, [r7, #20]
2000208e:	f000 f8a3 	bl	200021d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20002092:	f04f 0301 	mov.w	r3, #1
20002096:	61bb      	str	r3, [r7, #24]
20002098:	e002      	b.n	200020a0 <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
2000209a:	f04f 33ff 	mov.w	r3, #4294967295
2000209e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
200020a0:	69bb      	ldr	r3, [r7, #24]
	}
200020a2:	4618      	mov	r0, r3
200020a4:	f107 0720 	add.w	r7, r7, #32
200020a8:	46bd      	mov	sp, r7
200020aa:	bd80      	pop	{r7, pc}

200020ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
200020ac:	b580      	push	{r7, lr}
200020ae:	b088      	sub	sp, #32
200020b0:	af00      	add	r7, sp, #0
200020b2:	60f8      	str	r0, [r7, #12]
200020b4:	60b9      	str	r1, [r7, #8]
200020b6:	607a      	str	r2, [r7, #4]
200020b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
200020ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200020be:	687b      	ldr	r3, [r7, #4]
200020c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
200020c4:	4610      	mov	r0, r2
200020c6:	f04f 01a5 	mov.w	r1, #165	; 0xa5
200020ca:	461a      	mov	r2, r3
200020cc:	f005 fb18 	bl	20007700 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
200020d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200020d4:	687b      	ldr	r3, [r7, #4]
200020d6:	f103 33ff 	add.w	r3, r3, #4294967295
200020da:	ea4f 0383 	mov.w	r3, r3, lsl #2
200020de:	4413      	add	r3, r2
200020e0:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
200020e2:	697b      	ldr	r3, [r7, #20]
200020e4:	f023 0307 	bic.w	r3, r3, #7
200020e8:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
200020ea:	697b      	ldr	r3, [r7, #20]
200020ec:	f003 0307 	and.w	r3, r3, #7
200020f0:	2b00      	cmp	r3, #0
200020f2:	d009      	beq.n	20002108 <prvInitialiseNewTask+0x5c>
200020f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200020f8:	f383 8811 	msr	BASEPRI, r3
200020fc:	f3bf 8f6f 	isb	sy
20002100:	f3bf 8f4f 	dsb	sy
20002104:	61fb      	str	r3, [r7, #28]
20002106:	e7fe      	b.n	20002106 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20002108:	f04f 0300 	mov.w	r3, #0
2000210c:	61bb      	str	r3, [r7, #24]
2000210e:	e012      	b.n	20002136 <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20002110:	69b9      	ldr	r1, [r7, #24]
20002112:	68ba      	ldr	r2, [r7, #8]
20002114:	69bb      	ldr	r3, [r7, #24]
20002116:	4413      	add	r3, r2
20002118:	781a      	ldrb	r2, [r3, #0]
2000211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000211c:	440b      	add	r3, r1
2000211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
20002122:	68ba      	ldr	r2, [r7, #8]
20002124:	69bb      	ldr	r3, [r7, #24]
20002126:	4413      	add	r3, r2
20002128:	781b      	ldrb	r3, [r3, #0]
2000212a:	2b00      	cmp	r3, #0
2000212c:	d007      	beq.n	2000213e <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2000212e:	69bb      	ldr	r3, [r7, #24]
20002130:	f103 0301 	add.w	r3, r3, #1
20002134:	61bb      	str	r3, [r7, #24]
20002136:	69bb      	ldr	r3, [r7, #24]
20002138:	2b09      	cmp	r3, #9
2000213a:	d9e9      	bls.n	20002110 <prvInitialiseNewTask+0x64>
2000213c:	e000      	b.n	20002140 <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
2000213e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002142:	f04f 0200 	mov.w	r2, #0
20002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2000214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000214c:	2b04      	cmp	r3, #4
2000214e:	d902      	bls.n	20002156 <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20002150:	f04f 0304 	mov.w	r3, #4
20002154:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002158:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000215a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
2000215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000215e:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002160:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
20002162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002164:	f04f 0200 	mov.w	r2, #0
20002168:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
2000216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000216c:	f103 0304 	add.w	r3, r3, #4
20002170:	4618      	mov	r0, r3
20002172:	f7ff f951 	bl	20001418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002178:	f103 0318 	add.w	r3, r3, #24
2000217c:	4618      	mov	r0, r3
2000217e:	f7ff f94b 	bl	20001418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
20002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002186:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000218a:	f1c3 0205 	rsb	r2, r3, #5
2000218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002190:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
20002192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002196:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
20002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000219a:	f04f 0200 	mov.w	r2, #0
2000219e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
200021a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021a2:	f04f 0200 	mov.w	r2, #0
200021a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021aa:	f04f 0200 	mov.w	r2, #0
200021ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
200021b2:	6978      	ldr	r0, [r7, #20]
200021b4:	68f9      	ldr	r1, [r7, #12]
200021b6:	683a      	ldr	r2, [r7, #0]
200021b8:	f002 f8d8 	bl	2000436c <pxPortInitialiseStack>
200021bc:	4603      	mov	r3, r0
200021be:	461a      	mov	r2, r3
200021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
200021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200021c6:	2b00      	cmp	r3, #0
200021c8:	d002      	beq.n	200021d0 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
200021ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200021cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200021ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
200021d0:	f107 0720 	add.w	r7, r7, #32
200021d4:	46bd      	mov	sp, r7
200021d6:	bd80      	pop	{r7, pc}

200021d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
200021d8:	b580      	push	{r7, lr}
200021da:	b082      	sub	sp, #8
200021dc:	af00      	add	r7, sp, #0
200021de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
200021e0:	f002 f9cc 	bl	2000457c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
200021e4:	f647 13c4 	movw	r3, #31172	; 0x79c4
200021e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021ec:	681b      	ldr	r3, [r3, #0]
200021ee:	f103 0201 	add.w	r2, r3, #1
200021f2:	f647 13c4 	movw	r3, #31172	; 0x79c4
200021f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021fa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
200021fc:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002200:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002204:	681b      	ldr	r3, [r3, #0]
20002206:	2b00      	cmp	r3, #0
20002208:	d10f      	bne.n	2000222a <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
2000220a:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000220e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002212:	687a      	ldr	r2, [r7, #4]
20002214:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20002216:	f647 13c4 	movw	r3, #31172	; 0x79c4
2000221a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000221e:	681b      	ldr	r3, [r3, #0]
20002220:	2b01      	cmp	r3, #1
20002222:	d11a      	bne.n	2000225a <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20002224:	f000 fe18 	bl	20002e58 <prvInitialiseTaskLists>
20002228:	e018      	b.n	2000225c <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
2000222a:	f647 13d0 	movw	r3, #31184	; 0x79d0
2000222e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002232:	681b      	ldr	r3, [r3, #0]
20002234:	2b00      	cmp	r3, #0
20002236:	d111      	bne.n	2000225c <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
20002238:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000223c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002240:	681b      	ldr	r3, [r3, #0]
20002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002244:	687b      	ldr	r3, [r7, #4]
20002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002248:	429a      	cmp	r2, r3
2000224a:	d807      	bhi.n	2000225c <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
2000224c:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002250:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002254:	687a      	ldr	r2, [r7, #4]
20002256:	601a      	str	r2, [r3, #0]
20002258:	e000      	b.n	2000225c <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
2000225a:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
2000225c:	f647 13e0 	movw	r3, #31200	; 0x79e0
20002260:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002264:	681b      	ldr	r3, [r3, #0]
20002266:	f103 0201 	add.w	r2, r3, #1
2000226a:	f647 13e0 	movw	r3, #31200	; 0x79e0
2000226e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002272:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
20002274:	f647 13e0 	movw	r3, #31200	; 0x79e0
20002278:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000227c:	681a      	ldr	r2, [r3, #0]
2000227e:	687b      	ldr	r3, [r7, #4]
20002280:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
20002282:	687b      	ldr	r3, [r7, #4]
20002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002286:	f04f 0201 	mov.w	r2, #1
2000228a:	fa02 f203 	lsl.w	r2, r2, r3
2000228e:	f647 13cc 	movw	r3, #31180	; 0x79cc
20002292:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002296:	681b      	ldr	r3, [r3, #0]
20002298:	ea42 0203 	orr.w	r2, r2, r3
2000229c:	f647 13cc 	movw	r3, #31180	; 0x79cc
200022a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022a4:	601a      	str	r2, [r3, #0]
200022a6:	687b      	ldr	r3, [r7, #4]
200022a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022aa:	4613      	mov	r3, r2
200022ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022b0:	4413      	add	r3, r2
200022b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022b6:	461a      	mov	r2, r3
200022b8:	f647 03f0 	movw	r3, #30960	; 0x78f0
200022bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022c0:	441a      	add	r2, r3
200022c2:	687b      	ldr	r3, [r7, #4]
200022c4:	f103 0304 	add.w	r3, r3, #4
200022c8:	4610      	mov	r0, r2
200022ca:	4619      	mov	r1, r3
200022cc:	f7ff f8b2 	bl	20001434 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
200022d0:	f002 f98c 	bl	200045ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
200022d4:	f647 13d0 	movw	r3, #31184	; 0x79d0
200022d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022dc:	681b      	ldr	r3, [r3, #0]
200022de:	2b00      	cmp	r3, #0
200022e0:	d014      	beq.n	2000230c <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
200022e2:	f647 03ec 	movw	r3, #30956	; 0x78ec
200022e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022ea:	681b      	ldr	r3, [r3, #0]
200022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022ee:	687b      	ldr	r3, [r7, #4]
200022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200022f2:	429a      	cmp	r2, r3
200022f4:	d20a      	bcs.n	2000230c <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
200022f6:	f64e 5304 	movw	r3, #60676	; 0xed04
200022fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
200022fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002302:	601a      	str	r2, [r3, #0]
20002304:	f3bf 8f4f 	dsb	sy
20002308:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
2000230c:	f107 0708 	add.w	r7, r7, #8
20002310:	46bd      	mov	sp, r7
20002312:	bd80      	pop	{r7, pc}

20002314 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
20002314:	b580      	push	{r7, lr}
20002316:	b084      	sub	sp, #16
20002318:	af00      	add	r7, sp, #0
2000231a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
2000231c:	f002 f92e 	bl	2000457c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
20002320:	687b      	ldr	r3, [r7, #4]
20002322:	2b00      	cmp	r3, #0
20002324:	d105      	bne.n	20002332 <uxTaskPriorityGet+0x1e>
20002326:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000232a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000232e:	681b      	ldr	r3, [r3, #0]
20002330:	e000      	b.n	20002334 <uxTaskPriorityGet+0x20>
20002332:	687b      	ldr	r3, [r7, #4]
20002334:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxPriority;
20002336:	68bb      	ldr	r3, [r7, #8]
20002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000233a:	60fb      	str	r3, [r7, #12]
		}
		taskEXIT_CRITICAL();
2000233c:	f002 f956 	bl	200045ec <vPortExitCritical>

		return uxReturn;
20002340:	68fb      	ldr	r3, [r7, #12]
	}
20002342:	4618      	mov	r0, r3
20002344:	f107 0710 	add.w	r7, r7, #16
20002348:	46bd      	mov	sp, r7
2000234a:	bd80      	pop	{r7, pc}

2000234c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
2000234c:	b580      	push	{r7, lr}
2000234e:	b088      	sub	sp, #32
20002350:	af00      	add	r7, sp, #0
20002352:	6078      	str	r0, [r7, #4]
20002354:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
20002356:	f04f 0300 	mov.w	r3, #0
2000235a:	61bb      	str	r3, [r7, #24]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
2000235c:	683b      	ldr	r3, [r7, #0]
2000235e:	2b04      	cmp	r3, #4
20002360:	d909      	bls.n	20002376 <vTaskPrioritySet+0x2a>
20002362:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002366:	f383 8811 	msr	BASEPRI, r3
2000236a:	f3bf 8f6f 	isb	sy
2000236e:	f3bf 8f4f 	dsb	sy
20002372:	61fb      	str	r3, [r7, #28]
20002374:	e7fe      	b.n	20002374 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20002376:	683b      	ldr	r3, [r7, #0]
20002378:	2b04      	cmp	r3, #4
2000237a:	d902      	bls.n	20002382 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
2000237c:	f04f 0304 	mov.w	r3, #4
20002380:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
20002382:	f002 f8fb 	bl	2000457c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
20002386:	687b      	ldr	r3, [r7, #4]
20002388:	2b00      	cmp	r3, #0
2000238a:	d105      	bne.n	20002398 <vTaskPrioritySet+0x4c>
2000238c:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002390:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002394:	681b      	ldr	r3, [r3, #0]
20002396:	e000      	b.n	2000239a <vTaskPrioritySet+0x4e>
20002398:	687b      	ldr	r3, [r7, #4]
2000239a:	60fb      	str	r3, [r7, #12]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
2000239c:	68fb      	ldr	r3, [r7, #12]
2000239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200023a0:	613b      	str	r3, [r7, #16]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
200023a2:	693a      	ldr	r2, [r7, #16]
200023a4:	683b      	ldr	r3, [r7, #0]
200023a6:	429a      	cmp	r2, r3
200023a8:	f000 80a9 	beq.w	200024fe <vTaskPrioritySet+0x1b2>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
200023ac:	683a      	ldr	r2, [r7, #0]
200023ae:	693b      	ldr	r3, [r7, #16]
200023b0:	429a      	cmp	r2, r3
200023b2:	d914      	bls.n	200023de <vTaskPrioritySet+0x92>
				{
					if( pxTCB != pxCurrentTCB )
200023b4:	f647 03ec 	movw	r3, #30956	; 0x78ec
200023b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023bc:	681b      	ldr	r3, [r3, #0]
200023be:	68fa      	ldr	r2, [r7, #12]
200023c0:	429a      	cmp	r2, r3
200023c2:	d018      	beq.n	200023f6 <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
200023c4:	f647 03ec 	movw	r3, #30956	; 0x78ec
200023c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023cc:	681b      	ldr	r3, [r3, #0]
200023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200023d0:	683b      	ldr	r3, [r7, #0]
200023d2:	429a      	cmp	r2, r3
200023d4:	d811      	bhi.n	200023fa <vTaskPrioritySet+0xae>
						{
							xYieldRequired = pdTRUE;
200023d6:	f04f 0301 	mov.w	r3, #1
200023da:	61bb      	str	r3, [r7, #24]
200023dc:	e00e      	b.n	200023fc <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
200023de:	f647 03ec 	movw	r3, #30956	; 0x78ec
200023e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023e6:	681b      	ldr	r3, [r3, #0]
200023e8:	68fa      	ldr	r2, [r7, #12]
200023ea:	429a      	cmp	r2, r3
200023ec:	d106      	bne.n	200023fc <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
200023ee:	f04f 0301 	mov.w	r3, #1
200023f2:	61bb      	str	r3, [r7, #24]
200023f4:	e002      	b.n	200023fc <vTaskPrioritySet+0xb0>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
200023f6:	bf00      	nop
200023f8:	e000      	b.n	200023fc <vTaskPrioritySet+0xb0>
200023fa:	bf00      	nop
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
200023fc:	68fb      	ldr	r3, [r7, #12]
200023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002400:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
20002402:	68fb      	ldr	r3, [r7, #12]
20002404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20002406:	68fb      	ldr	r3, [r7, #12]
20002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000240a:	429a      	cmp	r2, r3
2000240c:	d102      	bne.n	20002414 <vTaskPrioritySet+0xc8>
					{
						pxTCB->uxPriority = uxNewPriority;
2000240e:	68fb      	ldr	r3, [r7, #12]
20002410:	683a      	ldr	r2, [r7, #0]
20002412:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
20002414:	68fb      	ldr	r3, [r7, #12]
20002416:	683a      	ldr	r2, [r7, #0]
20002418:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
2000241a:	68fb      	ldr	r3, [r7, #12]
2000241c:	699b      	ldr	r3, [r3, #24]
2000241e:	2b00      	cmp	r3, #0
20002420:	db04      	blt.n	2000242c <vTaskPrioritySet+0xe0>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002422:	683b      	ldr	r3, [r7, #0]
20002424:	f1c3 0205 	rsb	r2, r3, #5
20002428:	68fb      	ldr	r3, [r7, #12]
2000242a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
2000242c:	68fb      	ldr	r3, [r7, #12]
2000242e:	6959      	ldr	r1, [r3, #20]
20002430:	697a      	ldr	r2, [r7, #20]
20002432:	4613      	mov	r3, r2
20002434:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002438:	4413      	add	r3, r2
2000243a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000243e:	461a      	mov	r2, r3
20002440:	f647 03f0 	movw	r3, #30960	; 0x78f0
20002444:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002448:	4413      	add	r3, r2
2000244a:	4299      	cmp	r1, r3
2000244c:	d102      	bne.n	20002454 <vTaskPrioritySet+0x108>
2000244e:	f04f 0301 	mov.w	r3, #1
20002452:	e001      	b.n	20002458 <vTaskPrioritySet+0x10c>
20002454:	f04f 0300 	mov.w	r3, #0
20002458:	2b00      	cmp	r3, #0
2000245a:	d042      	beq.n	200024e2 <vTaskPrioritySet+0x196>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2000245c:	68fb      	ldr	r3, [r7, #12]
2000245e:	f103 0304 	add.w	r3, r3, #4
20002462:	4618      	mov	r0, r3
20002464:	f7ff f844 	bl	200014f0 <uxListRemove>
20002468:	4603      	mov	r3, r0
2000246a:	2b00      	cmp	r3, #0
2000246c:	d112      	bne.n	20002494 <vTaskPrioritySet+0x148>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
2000246e:	697b      	ldr	r3, [r7, #20]
20002470:	f04f 0201 	mov.w	r2, #1
20002474:	fa02 f303 	lsl.w	r3, r2, r3
20002478:	ea6f 0203 	mvn.w	r2, r3
2000247c:	f647 13cc 	movw	r3, #31180	; 0x79cc
20002480:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002484:	681b      	ldr	r3, [r3, #0]
20002486:	ea02 0203 	and.w	r2, r2, r3
2000248a:	f647 13cc 	movw	r3, #31180	; 0x79cc
2000248e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002492:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
20002494:	68fb      	ldr	r3, [r7, #12]
20002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002498:	f04f 0201 	mov.w	r2, #1
2000249c:	fa02 f203 	lsl.w	r2, r2, r3
200024a0:	f647 13cc 	movw	r3, #31180	; 0x79cc
200024a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024a8:	681b      	ldr	r3, [r3, #0]
200024aa:	ea42 0203 	orr.w	r2, r2, r3
200024ae:	f647 13cc 	movw	r3, #31180	; 0x79cc
200024b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024b6:	601a      	str	r2, [r3, #0]
200024b8:	68fb      	ldr	r3, [r7, #12]
200024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200024bc:	4613      	mov	r3, r2
200024be:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024c2:	4413      	add	r3, r2
200024c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024c8:	461a      	mov	r2, r3
200024ca:	f647 03f0 	movw	r3, #30960	; 0x78f0
200024ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024d2:	441a      	add	r2, r3
200024d4:	68fb      	ldr	r3, [r7, #12]
200024d6:	f103 0304 	add.w	r3, r3, #4
200024da:	4610      	mov	r0, r2
200024dc:	4619      	mov	r1, r3
200024de:	f7fe ffa9 	bl	20001434 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
200024e2:	69bb      	ldr	r3, [r7, #24]
200024e4:	2b00      	cmp	r3, #0
200024e6:	d00a      	beq.n	200024fe <vTaskPrioritySet+0x1b2>
				{
					taskYIELD_IF_USING_PREEMPTION();
200024e8:	f64e 5304 	movw	r3, #60676	; 0xed04
200024ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
200024f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200024f4:	601a      	str	r2, [r3, #0]
200024f6:	f3bf 8f4f 	dsb	sy
200024fa:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
200024fe:	f002 f875 	bl	200045ec <vPortExitCritical>
	}
20002502:	f107 0720 	add.w	r7, r7, #32
20002506:	46bd      	mov	sp, r7
20002508:	bd80      	pop	{r7, pc}
2000250a:	bf00      	nop

2000250c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
2000250c:	b580      	push	{r7, lr}
2000250e:	b086      	sub	sp, #24
20002510:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
20002512:	f04f 0300 	mov.w	r3, #0
20002516:	9300      	str	r3, [sp, #0]
20002518:	f647 13e8 	movw	r3, #31208	; 0x79e8
2000251c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002520:	9301      	str	r3, [sp, #4]
20002522:	f642 6021 	movw	r0, #11809	; 0x2e21
20002526:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000252a:	f247 71e8 	movw	r1, #30696	; 0x77e8
2000252e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20002532:	f04f 0250 	mov.w	r2, #80	; 0x50
20002536:	f04f 0300 	mov.w	r3, #0
2000253a:	f7ff fd6d 	bl	20002018 <xTaskCreate>
2000253e:	4603      	mov	r3, r0
20002540:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
20002542:	687b      	ldr	r3, [r7, #4]
20002544:	2b01      	cmp	r3, #1
20002546:	d103      	bne.n	20002550 <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
20002548:	f001 f8f4 	bl	20003734 <xTimerCreateTimerTask>
2000254c:	4603      	mov	r3, r0
2000254e:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
20002550:	687b      	ldr	r3, [r7, #4]
20002552:	2b01      	cmp	r3, #1
20002554:	d122      	bne.n	2000259c <vTaskStartScheduler+0x90>
20002556:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000255a:	f383 8811 	msr	BASEPRI, r3
2000255e:	f3bf 8f6f 	isb	sy
20002562:	f3bf 8f4f 	dsb	sy
20002566:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
20002568:	f647 13e4 	movw	r3, #31204	; 0x79e4
2000256c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002570:	f04f 32ff 	mov.w	r2, #4294967295
20002574:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
20002576:	f647 13d0 	movw	r3, #31184	; 0x79d0
2000257a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000257e:	f04f 0201 	mov.w	r2, #1
20002582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
20002584:	f647 13c8 	movw	r3, #31176	; 0x79c8
20002588:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000258c:	f04f 0200 	mov.w	r2, #0
20002590:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
20002592:	f7fd fec5 	bl	20000320 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
20002596:	f001 ff6b 	bl	20004470 <xPortStartScheduler>
2000259a:	e00d      	b.n	200025b8 <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2000259c:	687b      	ldr	r3, [r7, #4]
2000259e:	f1b3 3fff 	cmp.w	r3, #4294967295
200025a2:	d109      	bne.n	200025b8 <vTaskStartScheduler+0xac>
200025a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200025a8:	f383 8811 	msr	BASEPRI, r3
200025ac:	f3bf 8f6f 	isb	sy
200025b0:	f3bf 8f4f 	dsb	sy
200025b4:	60fb      	str	r3, [r7, #12]
200025b6:	e7fe      	b.n	200025b6 <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
200025b8:	f107 0710 	add.w	r7, r7, #16
200025bc:	46bd      	mov	sp, r7
200025be:	bd80      	pop	{r7, pc}

200025c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
200025c0:	b480      	push	{r7}
200025c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
200025c4:	f647 13ec 	movw	r3, #31212	; 0x79ec
200025c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025cc:	681b      	ldr	r3, [r3, #0]
200025ce:	f103 0201 	add.w	r2, r3, #1
200025d2:	f647 13ec 	movw	r3, #31212	; 0x79ec
200025d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025da:	601a      	str	r2, [r3, #0]
}
200025dc:	46bd      	mov	sp, r7
200025de:	bc80      	pop	{r7}
200025e0:	4770      	bx	lr
200025e2:	bf00      	nop

200025e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
200025e4:	b580      	push	{r7, lr}
200025e6:	b084      	sub	sp, #16
200025e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
200025ea:	f04f 0300 	mov.w	r3, #0
200025ee:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
200025f0:	f04f 0300 	mov.w	r3, #0
200025f4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
200025f6:	f647 13ec 	movw	r3, #31212	; 0x79ec
200025fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025fe:	681b      	ldr	r3, [r3, #0]
20002600:	2b00      	cmp	r3, #0
20002602:	d109      	bne.n	20002618 <xTaskResumeAll+0x34>
20002604:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002608:	f383 8811 	msr	BASEPRI, r3
2000260c:	f3bf 8f6f 	isb	sy
20002610:	f3bf 8f4f 	dsb	sy
20002614:	60fb      	str	r3, [r7, #12]
20002616:	e7fe      	b.n	20002616 <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20002618:	f001 ffb0 	bl	2000457c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
2000261c:	f647 13ec 	movw	r3, #31212	; 0x79ec
20002620:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002624:	681b      	ldr	r3, [r3, #0]
20002626:	f103 32ff 	add.w	r2, r3, #4294967295
2000262a:	f647 13ec 	movw	r3, #31212	; 0x79ec
2000262e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002632:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002634:	f647 13ec 	movw	r3, #31212	; 0x79ec
20002638:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000263c:	681b      	ldr	r3, [r3, #0]
2000263e:	2b00      	cmp	r3, #0
20002640:	f040 8098 	bne.w	20002774 <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
20002644:	f647 13c4 	movw	r3, #31172	; 0x79c4
20002648:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000264c:	681b      	ldr	r3, [r3, #0]
2000264e:	2b00      	cmp	r3, #0
20002650:	f000 8090 	beq.w	20002774 <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002654:	e04a      	b.n	200026ec <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
20002656:	f647 1384 	movw	r3, #31108	; 0x7984
2000265a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000265e:	68db      	ldr	r3, [r3, #12]
20002660:	68db      	ldr	r3, [r3, #12]
20002662:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002664:	683b      	ldr	r3, [r7, #0]
20002666:	f103 0318 	add.w	r3, r3, #24
2000266a:	4618      	mov	r0, r3
2000266c:	f7fe ff40 	bl	200014f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002670:	683b      	ldr	r3, [r7, #0]
20002672:	f103 0304 	add.w	r3, r3, #4
20002676:	4618      	mov	r0, r3
20002678:	f7fe ff3a 	bl	200014f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
2000267c:	683b      	ldr	r3, [r7, #0]
2000267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002680:	f04f 0201 	mov.w	r2, #1
20002684:	fa02 f203 	lsl.w	r2, r2, r3
20002688:	f647 13cc 	movw	r3, #31180	; 0x79cc
2000268c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002690:	681b      	ldr	r3, [r3, #0]
20002692:	ea42 0203 	orr.w	r2, r2, r3
20002696:	f647 13cc 	movw	r3, #31180	; 0x79cc
2000269a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000269e:	601a      	str	r2, [r3, #0]
200026a0:	683b      	ldr	r3, [r7, #0]
200026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200026a4:	4613      	mov	r3, r2
200026a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
200026aa:	4413      	add	r3, r2
200026ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
200026b0:	461a      	mov	r2, r3
200026b2:	f647 03f0 	movw	r3, #30960	; 0x78f0
200026b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026ba:	441a      	add	r2, r3
200026bc:	683b      	ldr	r3, [r7, #0]
200026be:	f103 0304 	add.w	r3, r3, #4
200026c2:	4610      	mov	r0, r2
200026c4:	4619      	mov	r1, r3
200026c6:	f7fe feb5 	bl	20001434 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
200026ca:	683b      	ldr	r3, [r7, #0]
200026cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200026ce:	f647 03ec 	movw	r3, #30956	; 0x78ec
200026d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026d6:	681b      	ldr	r3, [r3, #0]
200026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200026da:	429a      	cmp	r2, r3
200026dc:	d306      	bcc.n	200026ec <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
200026de:	f647 13d8 	movw	r3, #31192	; 0x79d8
200026e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026e6:	f04f 0201 	mov.w	r2, #1
200026ea:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200026ec:	f647 1384 	movw	r3, #31108	; 0x7984
200026f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026f4:	681b      	ldr	r3, [r3, #0]
200026f6:	2b00      	cmp	r3, #0
200026f8:	d1ad      	bne.n	20002656 <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
200026fa:	683b      	ldr	r3, [r7, #0]
200026fc:	2b00      	cmp	r3, #0
200026fe:	d001      	beq.n	20002704 <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
20002700:	f000 fc58 	bl	20002fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
20002704:	f647 13d4 	movw	r3, #31188	; 0x79d4
20002708:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000270c:	681b      	ldr	r3, [r3, #0]
2000270e:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
20002710:	68bb      	ldr	r3, [r7, #8]
20002712:	2b00      	cmp	r3, #0
20002714:	d019      	beq.n	2000274a <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
20002716:	f000 f845 	bl	200027a4 <xTaskIncrementTick>
2000271a:	4603      	mov	r3, r0
2000271c:	2b00      	cmp	r3, #0
2000271e:	d006      	beq.n	2000272e <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
20002720:	f647 13d8 	movw	r3, #31192	; 0x79d8
20002724:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002728:	f04f 0201 	mov.w	r2, #1
2000272c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
2000272e:	68bb      	ldr	r3, [r7, #8]
20002730:	f103 33ff 	add.w	r3, r3, #4294967295
20002734:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
20002736:	68bb      	ldr	r3, [r7, #8]
20002738:	2b00      	cmp	r3, #0
2000273a:	d1ec      	bne.n	20002716 <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
2000273c:	f647 13d4 	movw	r3, #31188	; 0x79d4
20002740:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002744:	f04f 0200 	mov.w	r2, #0
20002748:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
2000274a:	f647 13d8 	movw	r3, #31192	; 0x79d8
2000274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002752:	681b      	ldr	r3, [r3, #0]
20002754:	2b00      	cmp	r3, #0
20002756:	d00d      	beq.n	20002774 <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
20002758:	f04f 0301 	mov.w	r3, #1
2000275c:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
2000275e:	f64e 5304 	movw	r3, #60676	; 0xed04
20002762:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000276a:	601a      	str	r2, [r3, #0]
2000276c:	f3bf 8f4f 	dsb	sy
20002770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002774:	f001 ff3a 	bl	200045ec <vPortExitCritical>

	return xAlreadyYielded;
20002778:	687b      	ldr	r3, [r7, #4]
}
2000277a:	4618      	mov	r0, r3
2000277c:	f107 0710 	add.w	r7, r7, #16
20002780:	46bd      	mov	sp, r7
20002782:	bd80      	pop	{r7, pc}

20002784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002784:	b480      	push	{r7}
20002786:	b083      	sub	sp, #12
20002788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
2000278a:	f647 13c8 	movw	r3, #31176	; 0x79c8
2000278e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002792:	681b      	ldr	r3, [r3, #0]
20002794:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
20002796:	687b      	ldr	r3, [r7, #4]
}
20002798:	4618      	mov	r0, r3
2000279a:	f107 070c 	add.w	r7, r7, #12
2000279e:	46bd      	mov	sp, r7
200027a0:	bc80      	pop	{r7}
200027a2:	4770      	bx	lr

200027a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
200027a4:	b580      	push	{r7, lr}
200027a6:	b086      	sub	sp, #24
200027a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
200027aa:	f04f 0300 	mov.w	r3, #0
200027ae:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200027b0:	f647 13ec 	movw	r3, #31212	; 0x79ec
200027b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027b8:	681b      	ldr	r3, [r3, #0]
200027ba:	2b00      	cmp	r3, #0
200027bc:	f040 80dc 	bne.w	20002978 <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
200027c0:	f647 13c8 	movw	r3, #31176	; 0x79c8
200027c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027c8:	681b      	ldr	r3, [r3, #0]
200027ca:	f103 0301 	add.w	r3, r3, #1
200027ce:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
200027d0:	f647 13c8 	movw	r3, #31176	; 0x79c8
200027d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027d8:	68fa      	ldr	r2, [r7, #12]
200027da:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
200027dc:	68fb      	ldr	r3, [r7, #12]
200027de:	2b00      	cmp	r3, #0
200027e0:	d135      	bne.n	2000284e <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
200027e2:	f647 137c 	movw	r3, #31100	; 0x797c
200027e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027ea:	681b      	ldr	r3, [r3, #0]
200027ec:	681b      	ldr	r3, [r3, #0]
200027ee:	2b00      	cmp	r3, #0
200027f0:	d009      	beq.n	20002806 <xTaskIncrementTick+0x62>
200027f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200027f6:	f383 8811 	msr	BASEPRI, r3
200027fa:	f3bf 8f6f 	isb	sy
200027fe:	f3bf 8f4f 	dsb	sy
20002802:	617b      	str	r3, [r7, #20]
20002804:	e7fe      	b.n	20002804 <xTaskIncrementTick+0x60>
20002806:	f647 137c 	movw	r3, #31100	; 0x797c
2000280a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000280e:	681b      	ldr	r3, [r3, #0]
20002810:	613b      	str	r3, [r7, #16]
20002812:	f647 1380 	movw	r3, #31104	; 0x7980
20002816:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000281a:	681a      	ldr	r2, [r3, #0]
2000281c:	f647 137c 	movw	r3, #31100	; 0x797c
20002820:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002824:	601a      	str	r2, [r3, #0]
20002826:	f647 1380 	movw	r3, #31104	; 0x7980
2000282a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000282e:	693a      	ldr	r2, [r7, #16]
20002830:	601a      	str	r2, [r3, #0]
20002832:	f647 13dc 	movw	r3, #31196	; 0x79dc
20002836:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000283a:	681b      	ldr	r3, [r3, #0]
2000283c:	f103 0201 	add.w	r2, r3, #1
20002840:	f647 13dc 	movw	r3, #31196	; 0x79dc
20002844:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002848:	601a      	str	r2, [r3, #0]
2000284a:	f000 fbb3 	bl	20002fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
2000284e:	f647 13e4 	movw	r3, #31204	; 0x79e4
20002852:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002856:	681b      	ldr	r3, [r3, #0]
20002858:	68fa      	ldr	r2, [r7, #12]
2000285a:	429a      	cmp	r2, r3
2000285c:	d373      	bcc.n	20002946 <xTaskIncrementTick+0x1a2>
2000285e:	e000      	b.n	20002862 <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002860:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002862:	f647 137c 	movw	r3, #31100	; 0x797c
20002866:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000286a:	681b      	ldr	r3, [r3, #0]
2000286c:	681b      	ldr	r3, [r3, #0]
2000286e:	2b00      	cmp	r3, #0
20002870:	d102      	bne.n	20002878 <xTaskIncrementTick+0xd4>
20002872:	f04f 0301 	mov.w	r3, #1
20002876:	e001      	b.n	2000287c <xTaskIncrementTick+0xd8>
20002878:	f04f 0300 	mov.w	r3, #0
2000287c:	2b00      	cmp	r3, #0
2000287e:	d007      	beq.n	20002890 <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002880:	f647 13e4 	movw	r3, #31204	; 0x79e4
20002884:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002888:	f04f 32ff 	mov.w	r2, #4294967295
2000288c:	601a      	str	r2, [r3, #0]
					break;
2000288e:	e05a      	b.n	20002946 <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
20002890:	f647 137c 	movw	r3, #31100	; 0x797c
20002894:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002898:	681b      	ldr	r3, [r3, #0]
2000289a:	68db      	ldr	r3, [r3, #12]
2000289c:	68db      	ldr	r3, [r3, #12]
2000289e:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
200028a0:	683b      	ldr	r3, [r7, #0]
200028a2:	685b      	ldr	r3, [r3, #4]
200028a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
200028a6:	68fa      	ldr	r2, [r7, #12]
200028a8:	687b      	ldr	r3, [r7, #4]
200028aa:	429a      	cmp	r2, r3
200028ac:	d206      	bcs.n	200028bc <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
200028ae:	f647 13e4 	movw	r3, #31204	; 0x79e4
200028b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028b6:	687a      	ldr	r2, [r7, #4]
200028b8:	601a      	str	r2, [r3, #0]
						break;
200028ba:	e044      	b.n	20002946 <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200028bc:	683b      	ldr	r3, [r7, #0]
200028be:	f103 0304 	add.w	r3, r3, #4
200028c2:	4618      	mov	r0, r3
200028c4:	f7fe fe14 	bl	200014f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
200028c8:	683b      	ldr	r3, [r7, #0]
200028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200028cc:	2b00      	cmp	r3, #0
200028ce:	d005      	beq.n	200028dc <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
200028d0:	683b      	ldr	r3, [r7, #0]
200028d2:	f103 0318 	add.w	r3, r3, #24
200028d6:	4618      	mov	r0, r3
200028d8:	f7fe fe0a 	bl	200014f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
200028dc:	683b      	ldr	r3, [r7, #0]
200028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200028e0:	f04f 0201 	mov.w	r2, #1
200028e4:	fa02 f203 	lsl.w	r2, r2, r3
200028e8:	f647 13cc 	movw	r3, #31180	; 0x79cc
200028ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028f0:	681b      	ldr	r3, [r3, #0]
200028f2:	ea42 0203 	orr.w	r2, r2, r3
200028f6:	f647 13cc 	movw	r3, #31180	; 0x79cc
200028fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028fe:	601a      	str	r2, [r3, #0]
20002900:	683b      	ldr	r3, [r7, #0]
20002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002904:	4613      	mov	r3, r2
20002906:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000290a:	4413      	add	r3, r2
2000290c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002910:	461a      	mov	r2, r3
20002912:	f647 03f0 	movw	r3, #30960	; 0x78f0
20002916:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000291a:	441a      	add	r2, r3
2000291c:	683b      	ldr	r3, [r7, #0]
2000291e:	f103 0304 	add.w	r3, r3, #4
20002922:	4610      	mov	r0, r2
20002924:	4619      	mov	r1, r3
20002926:	f7fe fd85 	bl	20001434 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2000292a:	683b      	ldr	r3, [r7, #0]
2000292c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000292e:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002932:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002936:	681b      	ldr	r3, [r3, #0]
20002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000293a:	429a      	cmp	r2, r3
2000293c:	d390      	bcc.n	20002860 <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
2000293e:	f04f 0301 	mov.w	r3, #1
20002942:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
20002944:	e78d      	b.n	20002862 <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
20002946:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000294e:	681b      	ldr	r3, [r3, #0]
20002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002952:	4613      	mov	r3, r2
20002954:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002958:	4413      	add	r3, r2
2000295a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000295e:	461a      	mov	r2, r3
20002960:	f647 03f0 	movw	r3, #30960	; 0x78f0
20002964:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002968:	4413      	add	r3, r2
2000296a:	681b      	ldr	r3, [r3, #0]
2000296c:	2b01      	cmp	r3, #1
2000296e:	d910      	bls.n	20002992 <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
20002970:	f04f 0301 	mov.w	r3, #1
20002974:	60bb      	str	r3, [r7, #8]
20002976:	e00d      	b.n	20002994 <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
20002978:	f647 13d4 	movw	r3, #31188	; 0x79d4
2000297c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002980:	681b      	ldr	r3, [r3, #0]
20002982:	f103 0201 	add.w	r2, r3, #1
20002986:	f647 13d4 	movw	r3, #31188	; 0x79d4
2000298a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000298e:	601a      	str	r2, [r3, #0]
20002990:	e000      	b.n	20002994 <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
20002992:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
20002994:	f647 13d8 	movw	r3, #31192	; 0x79d8
20002998:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000299c:	681b      	ldr	r3, [r3, #0]
2000299e:	2b00      	cmp	r3, #0
200029a0:	d002      	beq.n	200029a8 <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
200029a2:	f04f 0301 	mov.w	r3, #1
200029a6:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
200029a8:	68bb      	ldr	r3, [r7, #8]
}
200029aa:	4618      	mov	r0, r3
200029ac:	f107 0718 	add.w	r7, r7, #24
200029b0:	46bd      	mov	sp, r7
200029b2:	bd80      	pop	{r7, pc}

200029b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
200029b4:	b580      	push	{r7, lr}
200029b6:	b088      	sub	sp, #32
200029b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
200029ba:	f647 13ec 	movw	r3, #31212	; 0x79ec
200029be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029c2:	681b      	ldr	r3, [r3, #0]
200029c4:	2b00      	cmp	r3, #0
200029c6:	d007      	beq.n	200029d8 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
200029c8:	f647 13d8 	movw	r3, #31192	; 0x79d8
200029cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029d0:	f04f 0201 	mov.w	r2, #1
200029d4:	601a      	str	r2, [r3, #0]
200029d6:	e0bc      	b.n	20002b52 <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
200029d8:	f647 13d8 	movw	r3, #31192	; 0x79d8
200029dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029e0:	f04f 0200 	mov.w	r2, #0
200029e4:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
200029e6:	f7fd fcbf 	bl	20000368 <ulGetRunTimeCounterValue>
200029ea:	4602      	mov	r2, r0
200029ec:	f647 13f4 	movw	r3, #31220	; 0x79f4
200029f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029f4:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
200029f6:	f647 13f4 	movw	r3, #31220	; 0x79f4
200029fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029fe:	681a      	ldr	r2, [r3, #0]
20002a00:	f647 13f0 	movw	r3, #31216	; 0x79f0
20002a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a08:	681b      	ldr	r3, [r3, #0]
20002a0a:	429a      	cmp	r2, r3
20002a0c:	d913      	bls.n	20002a36 <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
20002a0e:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a16:	681a      	ldr	r2, [r3, #0]
20002a18:	6d11      	ldr	r1, [r2, #80]	; 0x50
20002a1a:	f647 13f4 	movw	r3, #31220	; 0x79f4
20002a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a22:	6818      	ldr	r0, [r3, #0]
20002a24:	f647 13f0 	movw	r3, #31216	; 0x79f0
20002a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a2c:	681b      	ldr	r3, [r3, #0]
20002a2e:	ebc3 0300 	rsb	r3, r3, r0
20002a32:	440b      	add	r3, r1
20002a34:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
20002a36:	f647 13f4 	movw	r3, #31220	; 0x79f4
20002a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a3e:	681a      	ldr	r2, [r3, #0]
20002a40:	f647 13f0 	movw	r3, #31216	; 0x79f0
20002a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a48:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
20002a4a:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a52:	681b      	ldr	r3, [r3, #0]
20002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002a56:	607b      	str	r3, [r7, #4]
20002a58:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
20002a5c:	60bb      	str	r3, [r7, #8]
20002a5e:	687b      	ldr	r3, [r7, #4]
20002a60:	681a      	ldr	r2, [r3, #0]
20002a62:	68bb      	ldr	r3, [r7, #8]
20002a64:	429a      	cmp	r2, r3
20002a66:	d114      	bne.n	20002a92 <vTaskSwitchContext+0xde>
20002a68:	687b      	ldr	r3, [r7, #4]
20002a6a:	f103 0304 	add.w	r3, r3, #4
20002a6e:	681a      	ldr	r2, [r3, #0]
20002a70:	68bb      	ldr	r3, [r7, #8]
20002a72:	429a      	cmp	r2, r3
20002a74:	d10d      	bne.n	20002a92 <vTaskSwitchContext+0xde>
20002a76:	687b      	ldr	r3, [r7, #4]
20002a78:	f103 0308 	add.w	r3, r3, #8
20002a7c:	681a      	ldr	r2, [r3, #0]
20002a7e:	68bb      	ldr	r3, [r7, #8]
20002a80:	429a      	cmp	r2, r3
20002a82:	d106      	bne.n	20002a92 <vTaskSwitchContext+0xde>
20002a84:	687b      	ldr	r3, [r7, #4]
20002a86:	f103 030c 	add.w	r3, r3, #12
20002a8a:	681a      	ldr	r2, [r3, #0]
20002a8c:	68bb      	ldr	r3, [r7, #8]
20002a8e:	429a      	cmp	r2, r3
20002a90:	d00f      	beq.n	20002ab2 <vTaskSwitchContext+0xfe>
20002a92:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a9a:	681a      	ldr	r2, [r3, #0]
20002a9c:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aa4:	681b      	ldr	r3, [r3, #0]
20002aa6:	f103 0334 	add.w	r3, r3, #52	; 0x34
20002aaa:	4610      	mov	r0, r2
20002aac:	4619      	mov	r1, r3
20002aae:	f7fd fcc9 	bl	20000444 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
20002ab2:	f647 13cc 	movw	r3, #31180	; 0x79cc
20002ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aba:	681b      	ldr	r3, [r3, #0]
20002abc:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
20002abe:	697b      	ldr	r3, [r7, #20]
20002ac0:	fab3 f383 	clz	r3, r3
20002ac4:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
20002ac6:	7efb      	ldrb	r3, [r7, #27]
20002ac8:	f1c3 031f 	rsb	r3, r3, #31
20002acc:	60fb      	str	r3, [r7, #12]
20002ace:	68fa      	ldr	r2, [r7, #12]
20002ad0:	4613      	mov	r3, r2
20002ad2:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002ad6:	4413      	add	r3, r2
20002ad8:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002adc:	461a      	mov	r2, r3
20002ade:	f647 03f0 	movw	r3, #30960	; 0x78f0
20002ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ae6:	4413      	add	r3, r2
20002ae8:	681b      	ldr	r3, [r3, #0]
20002aea:	2b00      	cmp	r3, #0
20002aec:	d109      	bne.n	20002b02 <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20002aee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002af2:	f383 8811 	msr	BASEPRI, r3
20002af6:	f3bf 8f6f 	isb	sy
20002afa:	f3bf 8f4f 	dsb	sy
20002afe:	61fb      	str	r3, [r7, #28]
20002b00:	e7fe      	b.n	20002b00 <vTaskSwitchContext+0x14c>
20002b02:	68fa      	ldr	r2, [r7, #12]
20002b04:	4613      	mov	r3, r2
20002b06:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b0a:	4413      	add	r3, r2
20002b0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002b10:	461a      	mov	r2, r3
20002b12:	f647 03f0 	movw	r3, #30960	; 0x78f0
20002b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b1a:	4413      	add	r3, r2
20002b1c:	613b      	str	r3, [r7, #16]
20002b1e:	693b      	ldr	r3, [r7, #16]
20002b20:	685b      	ldr	r3, [r3, #4]
20002b22:	685a      	ldr	r2, [r3, #4]
20002b24:	693b      	ldr	r3, [r7, #16]
20002b26:	605a      	str	r2, [r3, #4]
20002b28:	693b      	ldr	r3, [r7, #16]
20002b2a:	685a      	ldr	r2, [r3, #4]
20002b2c:	693b      	ldr	r3, [r7, #16]
20002b2e:	f103 0308 	add.w	r3, r3, #8
20002b32:	429a      	cmp	r2, r3
20002b34:	d104      	bne.n	20002b40 <vTaskSwitchContext+0x18c>
20002b36:	693b      	ldr	r3, [r7, #16]
20002b38:	685b      	ldr	r3, [r3, #4]
20002b3a:	685a      	ldr	r2, [r3, #4]
20002b3c:	693b      	ldr	r3, [r7, #16]
20002b3e:	605a      	str	r2, [r3, #4]
20002b40:	693b      	ldr	r3, [r7, #16]
20002b42:	685b      	ldr	r3, [r3, #4]
20002b44:	68db      	ldr	r3, [r3, #12]
20002b46:	461a      	mov	r2, r3
20002b48:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b50:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
20002b52:	f107 0720 	add.w	r7, r7, #32
20002b56:	46bd      	mov	sp, r7
20002b58:	bd80      	pop	{r7, pc}
20002b5a:	bf00      	nop

20002b5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002b5c:	b580      	push	{r7, lr}
20002b5e:	b084      	sub	sp, #16
20002b60:	af00      	add	r7, sp, #0
20002b62:	6078      	str	r0, [r7, #4]
20002b64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002b66:	687b      	ldr	r3, [r7, #4]
20002b68:	2b00      	cmp	r3, #0
20002b6a:	d109      	bne.n	20002b80 <vTaskPlaceOnEventList+0x24>
20002b6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002b70:	f383 8811 	msr	BASEPRI, r3
20002b74:	f3bf 8f6f 	isb	sy
20002b78:	f3bf 8f4f 	dsb	sy
20002b7c:	60fb      	str	r3, [r7, #12]
20002b7e:	e7fe      	b.n	20002b7e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002b80:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b88:	681b      	ldr	r3, [r3, #0]
20002b8a:	f103 0318 	add.w	r3, r3, #24
20002b8e:	6878      	ldr	r0, [r7, #4]
20002b90:	4619      	mov	r1, r3
20002b92:	f7fe fc73 	bl	2000147c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002b96:	6838      	ldr	r0, [r7, #0]
20002b98:	f04f 0101 	mov.w	r1, #1
20002b9c:	f000 fd42 	bl	20003624 <prvAddCurrentTaskToDelayedList>
}
20002ba0:	f107 0710 	add.w	r7, r7, #16
20002ba4:	46bd      	mov	sp, r7
20002ba6:	bd80      	pop	{r7, pc}

20002ba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002ba8:	b580      	push	{r7, lr}
20002baa:	b086      	sub	sp, #24
20002bac:	af00      	add	r7, sp, #0
20002bae:	60f8      	str	r0, [r7, #12]
20002bb0:	60b9      	str	r1, [r7, #8]
20002bb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002bb4:	68fb      	ldr	r3, [r7, #12]
20002bb6:	2b00      	cmp	r3, #0
20002bb8:	d109      	bne.n	20002bce <vTaskPlaceOnEventListRestricted+0x26>
20002bba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002bbe:	f383 8811 	msr	BASEPRI, r3
20002bc2:	f3bf 8f6f 	isb	sy
20002bc6:	f3bf 8f4f 	dsb	sy
20002bca:	617b      	str	r3, [r7, #20]
20002bcc:	e7fe      	b.n	20002bcc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002bce:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bd6:	681b      	ldr	r3, [r3, #0]
20002bd8:	f103 0318 	add.w	r3, r3, #24
20002bdc:	68f8      	ldr	r0, [r7, #12]
20002bde:	4619      	mov	r1, r3
20002be0:	f7fe fc28 	bl	20001434 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
20002be4:	687b      	ldr	r3, [r7, #4]
20002be6:	2b00      	cmp	r3, #0
20002be8:	d002      	beq.n	20002bf0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
20002bea:	f04f 33ff 	mov.w	r3, #4294967295
20002bee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
20002bf0:	68b8      	ldr	r0, [r7, #8]
20002bf2:	6879      	ldr	r1, [r7, #4]
20002bf4:	f000 fd16 	bl	20003624 <prvAddCurrentTaskToDelayedList>
	}
20002bf8:	f107 0718 	add.w	r7, r7, #24
20002bfc:	46bd      	mov	sp, r7
20002bfe:	bd80      	pop	{r7, pc}

20002c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002c00:	b580      	push	{r7, lr}
20002c02:	b086      	sub	sp, #24
20002c04:	af00      	add	r7, sp, #0
20002c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
20002c08:	687b      	ldr	r3, [r7, #4]
20002c0a:	68db      	ldr	r3, [r3, #12]
20002c0c:	68db      	ldr	r3, [r3, #12]
20002c0e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
20002c10:	68fb      	ldr	r3, [r7, #12]
20002c12:	2b00      	cmp	r3, #0
20002c14:	d109      	bne.n	20002c2a <xTaskRemoveFromEventList+0x2a>
20002c16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002c1a:	f383 8811 	msr	BASEPRI, r3
20002c1e:	f3bf 8f6f 	isb	sy
20002c22:	f3bf 8f4f 	dsb	sy
20002c26:	617b      	str	r3, [r7, #20]
20002c28:	e7fe      	b.n	20002c28 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002c2a:	68fb      	ldr	r3, [r7, #12]
20002c2c:	f103 0318 	add.w	r3, r3, #24
20002c30:	4618      	mov	r0, r3
20002c32:	f7fe fc5d 	bl	200014f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002c36:	f647 13ec 	movw	r3, #31212	; 0x79ec
20002c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c3e:	681b      	ldr	r3, [r3, #0]
20002c40:	2b00      	cmp	r3, #0
20002c42:	d12d      	bne.n	20002ca0 <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002c44:	68fb      	ldr	r3, [r7, #12]
20002c46:	f103 0304 	add.w	r3, r3, #4
20002c4a:	4618      	mov	r0, r3
20002c4c:	f7fe fc50 	bl	200014f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002c50:	68fb      	ldr	r3, [r7, #12]
20002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c54:	f04f 0201 	mov.w	r2, #1
20002c58:	fa02 f203 	lsl.w	r2, r2, r3
20002c5c:	f647 13cc 	movw	r3, #31180	; 0x79cc
20002c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c64:	681b      	ldr	r3, [r3, #0]
20002c66:	ea42 0203 	orr.w	r2, r2, r3
20002c6a:	f647 13cc 	movw	r3, #31180	; 0x79cc
20002c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c72:	601a      	str	r2, [r3, #0]
20002c74:	68fb      	ldr	r3, [r7, #12]
20002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c78:	4613      	mov	r3, r2
20002c7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c7e:	4413      	add	r3, r2
20002c80:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002c84:	461a      	mov	r2, r3
20002c86:	f647 03f0 	movw	r3, #30960	; 0x78f0
20002c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c8e:	441a      	add	r2, r3
20002c90:	68fb      	ldr	r3, [r7, #12]
20002c92:	f103 0304 	add.w	r3, r3, #4
20002c96:	4610      	mov	r0, r2
20002c98:	4619      	mov	r1, r3
20002c9a:	f7fe fbcb 	bl	20001434 <vListInsertEnd>
20002c9e:	e009      	b.n	20002cb4 <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002ca0:	68fb      	ldr	r3, [r7, #12]
20002ca2:	f103 0318 	add.w	r3, r3, #24
20002ca6:	f647 1084 	movw	r0, #31108	; 0x7984
20002caa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002cae:	4619      	mov	r1, r3
20002cb0:	f7fe fbc0 	bl	20001434 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002cb4:	68fb      	ldr	r3, [r7, #12]
20002cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002cb8:	f647 03ec 	movw	r3, #30956	; 0x78ec
20002cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cc0:	681b      	ldr	r3, [r3, #0]
20002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002cc4:	429a      	cmp	r2, r3
20002cc6:	d90a      	bls.n	20002cde <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002cc8:	f04f 0301 	mov.w	r3, #1
20002ccc:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002cce:	f647 13d8 	movw	r3, #31192	; 0x79d8
20002cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002cd6:	f04f 0201 	mov.w	r2, #1
20002cda:	601a      	str	r2, [r3, #0]
20002cdc:	e002      	b.n	20002ce4 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
20002cde:	f04f 0300 	mov.w	r3, #0
20002ce2:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
20002ce4:	693b      	ldr	r3, [r7, #16]
}
20002ce6:	4618      	mov	r0, r3
20002ce8:	f107 0718 	add.w	r7, r7, #24
20002cec:	46bd      	mov	sp, r7
20002cee:	bd80      	pop	{r7, pc}

20002cf0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002cf0:	b480      	push	{r7}
20002cf2:	b085      	sub	sp, #20
20002cf4:	af00      	add	r7, sp, #0
20002cf6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
20002cf8:	687b      	ldr	r3, [r7, #4]
20002cfa:	2b00      	cmp	r3, #0
20002cfc:	d109      	bne.n	20002d12 <vTaskSetTimeOutState+0x22>
20002cfe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002d02:	f383 8811 	msr	BASEPRI, r3
20002d06:	f3bf 8f6f 	isb	sy
20002d0a:	f3bf 8f4f 	dsb	sy
20002d0e:	60fb      	str	r3, [r7, #12]
20002d10:	e7fe      	b.n	20002d10 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002d12:	f647 13dc 	movw	r3, #31196	; 0x79dc
20002d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d1a:	681a      	ldr	r2, [r3, #0]
20002d1c:	687b      	ldr	r3, [r7, #4]
20002d1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002d20:	f647 13c8 	movw	r3, #31176	; 0x79c8
20002d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d28:	681a      	ldr	r2, [r3, #0]
20002d2a:	687b      	ldr	r3, [r7, #4]
20002d2c:	605a      	str	r2, [r3, #4]
}
20002d2e:	f107 0714 	add.w	r7, r7, #20
20002d32:	46bd      	mov	sp, r7
20002d34:	bc80      	pop	{r7}
20002d36:	4770      	bx	lr

20002d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002d38:	b580      	push	{r7, lr}
20002d3a:	b086      	sub	sp, #24
20002d3c:	af00      	add	r7, sp, #0
20002d3e:	6078      	str	r0, [r7, #4]
20002d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002d42:	687b      	ldr	r3, [r7, #4]
20002d44:	2b00      	cmp	r3, #0
20002d46:	d109      	bne.n	20002d5c <xTaskCheckForTimeOut+0x24>
20002d48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002d4c:	f383 8811 	msr	BASEPRI, r3
20002d50:	f3bf 8f6f 	isb	sy
20002d54:	f3bf 8f4f 	dsb	sy
20002d58:	613b      	str	r3, [r7, #16]
20002d5a:	e7fe      	b.n	20002d5a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
20002d5c:	683b      	ldr	r3, [r7, #0]
20002d5e:	2b00      	cmp	r3, #0
20002d60:	d109      	bne.n	20002d76 <xTaskCheckForTimeOut+0x3e>
20002d62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002d66:	f383 8811 	msr	BASEPRI, r3
20002d6a:	f3bf 8f6f 	isb	sy
20002d6e:	f3bf 8f4f 	dsb	sy
20002d72:	617b      	str	r3, [r7, #20]
20002d74:	e7fe      	b.n	20002d74 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
20002d76:	f001 fc01 	bl	2000457c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002d7a:	f647 13c8 	movw	r3, #31176	; 0x79c8
20002d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d82:	681b      	ldr	r3, [r3, #0]
20002d84:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002d86:	683b      	ldr	r3, [r7, #0]
20002d88:	681b      	ldr	r3, [r3, #0]
20002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
20002d8e:	d103      	bne.n	20002d98 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002d90:	f04f 0300 	mov.w	r3, #0
20002d94:	60bb      	str	r3, [r7, #8]
20002d96:	e02e      	b.n	20002df6 <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002d98:	687b      	ldr	r3, [r7, #4]
20002d9a:	681a      	ldr	r2, [r3, #0]
20002d9c:	f647 13dc 	movw	r3, #31196	; 0x79dc
20002da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002da4:	681b      	ldr	r3, [r3, #0]
20002da6:	429a      	cmp	r2, r3
20002da8:	d008      	beq.n	20002dbc <xTaskCheckForTimeOut+0x84>
20002daa:	687b      	ldr	r3, [r7, #4]
20002dac:	685a      	ldr	r2, [r3, #4]
20002dae:	68fb      	ldr	r3, [r7, #12]
20002db0:	429a      	cmp	r2, r3
20002db2:	d803      	bhi.n	20002dbc <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002db4:	f04f 0301 	mov.w	r3, #1
20002db8:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002dba:	e01c      	b.n	20002df6 <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002dbc:	687b      	ldr	r3, [r7, #4]
20002dbe:	685b      	ldr	r3, [r3, #4]
20002dc0:	68fa      	ldr	r2, [r7, #12]
20002dc2:	ebc3 0202 	rsb	r2, r3, r2
20002dc6:	683b      	ldr	r3, [r7, #0]
20002dc8:	681b      	ldr	r3, [r3, #0]
20002dca:	429a      	cmp	r2, r3
20002dcc:	d210      	bcs.n	20002df0 <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
20002dce:	683b      	ldr	r3, [r7, #0]
20002dd0:	681a      	ldr	r2, [r3, #0]
20002dd2:	687b      	ldr	r3, [r7, #4]
20002dd4:	6859      	ldr	r1, [r3, #4]
20002dd6:	68fb      	ldr	r3, [r7, #12]
20002dd8:	ebc3 0301 	rsb	r3, r3, r1
20002ddc:	441a      	add	r2, r3
20002dde:	683b      	ldr	r3, [r7, #0]
20002de0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
20002de2:	6878      	ldr	r0, [r7, #4]
20002de4:	f7ff ff84 	bl	20002cf0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
20002de8:	f04f 0300 	mov.w	r3, #0
20002dec:	60bb      	str	r3, [r7, #8]
20002dee:	e002      	b.n	20002df6 <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
20002df0:	f04f 0301 	mov.w	r3, #1
20002df4:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
20002df6:	f001 fbf9 	bl	200045ec <vPortExitCritical>

	return xReturn;
20002dfa:	68bb      	ldr	r3, [r7, #8]
}
20002dfc:	4618      	mov	r0, r3
20002dfe:	f107 0718 	add.w	r7, r7, #24
20002e02:	46bd      	mov	sp, r7
20002e04:	bd80      	pop	{r7, pc}
20002e06:	bf00      	nop

20002e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002e08:	b480      	push	{r7}
20002e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
20002e0c:	f647 13d8 	movw	r3, #31192	; 0x79d8
20002e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e14:	f04f 0201 	mov.w	r2, #1
20002e18:	601a      	str	r2, [r3, #0]
}
20002e1a:	46bd      	mov	sp, r7
20002e1c:	bc80      	pop	{r7}
20002e1e:	4770      	bx	lr

20002e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002e20:	b580      	push	{r7, lr}
20002e22:	b082      	sub	sp, #8
20002e24:	af00      	add	r7, sp, #0
20002e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002e28:	f000 f868 	bl	20002efc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
20002e2c:	f647 03f0 	movw	r3, #30960	; 0x78f0
20002e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e34:	681b      	ldr	r3, [r3, #0]
20002e36:	2b01      	cmp	r3, #1
20002e38:	d90a      	bls.n	20002e50 <prvIdleTask+0x30>
			{
				taskYIELD();
20002e3a:	f64e 5304 	movw	r3, #60676	; 0xed04
20002e3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002e46:	601a      	str	r2, [r3, #0]
20002e48:	f3bf 8f4f 	dsb	sy
20002e4c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
20002e50:	f7fd faf2 	bl	20000438 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
20002e54:	e7e8      	b.n	20002e28 <prvIdleTask+0x8>
20002e56:	bf00      	nop

20002e58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002e58:	b580      	push	{r7, lr}
20002e5a:	b082      	sub	sp, #8
20002e5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002e5e:	f04f 0300 	mov.w	r3, #0
20002e62:	607b      	str	r3, [r7, #4]
20002e64:	e013      	b.n	20002e8e <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002e66:	687a      	ldr	r2, [r7, #4]
20002e68:	4613      	mov	r3, r2
20002e6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002e6e:	4413      	add	r3, r2
20002e70:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002e74:	461a      	mov	r2, r3
20002e76:	f647 03f0 	movw	r3, #30960	; 0x78f0
20002e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e7e:	4413      	add	r3, r2
20002e80:	4618      	mov	r0, r3
20002e82:	f7fe faa5 	bl	200013d0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002e86:	687b      	ldr	r3, [r7, #4]
20002e88:	f103 0301 	add.w	r3, r3, #1
20002e8c:	607b      	str	r3, [r7, #4]
20002e8e:	687b      	ldr	r3, [r7, #4]
20002e90:	2b04      	cmp	r3, #4
20002e92:	d9e8      	bls.n	20002e66 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
20002e94:	f647 1054 	movw	r0, #31060	; 0x7954
20002e98:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002e9c:	f7fe fa98 	bl	200013d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002ea0:	f647 1068 	movw	r0, #31080	; 0x7968
20002ea4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002ea8:	f7fe fa92 	bl	200013d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002eac:	f647 1084 	movw	r0, #31108	; 0x7984
20002eb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002eb4:	f7fe fa8c 	bl	200013d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002eb8:	f647 1098 	movw	r0, #31128	; 0x7998
20002ebc:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002ec0:	f7fe fa86 	bl	200013d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002ec4:	f647 10b0 	movw	r0, #31152	; 0x79b0
20002ec8:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002ecc:	f7fe fa80 	bl	200013d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
20002ed0:	f647 137c 	movw	r3, #31100	; 0x797c
20002ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ed8:	f647 1254 	movw	r2, #31060	; 0x7954
20002edc:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002ee0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002ee2:	f647 1380 	movw	r3, #31104	; 0x7980
20002ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002eea:	f647 1268 	movw	r2, #31080	; 0x7968
20002eee:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002ef2:	601a      	str	r2, [r3, #0]
}
20002ef4:	f107 0708 	add.w	r7, r7, #8
20002ef8:	46bd      	mov	sp, r7
20002efa:	bd80      	pop	{r7, pc}

20002efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002efc:	b580      	push	{r7, lr}
20002efe:	b082      	sub	sp, #8
20002f00:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002f02:	e03c      	b.n	20002f7e <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
20002f04:	f7ff fb5c 	bl	200025c0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
20002f08:	f647 1398 	movw	r3, #31128	; 0x7998
20002f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f10:	681b      	ldr	r3, [r3, #0]
20002f12:	2b00      	cmp	r3, #0
20002f14:	bf14      	ite	ne
20002f16:	2300      	movne	r3, #0
20002f18:	2301      	moveq	r3, #1
20002f1a:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
20002f1c:	f7ff fb62 	bl	200025e4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
20002f20:	683b      	ldr	r3, [r7, #0]
20002f22:	2b00      	cmp	r3, #0
20002f24:	d12b      	bne.n	20002f7e <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
20002f26:	f001 fb29 	bl	2000457c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
20002f2a:	f647 1398 	movw	r3, #31128	; 0x7998
20002f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f32:	68db      	ldr	r3, [r3, #12]
20002f34:	68db      	ldr	r3, [r3, #12]
20002f36:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002f38:	687b      	ldr	r3, [r7, #4]
20002f3a:	f103 0304 	add.w	r3, r3, #4
20002f3e:	4618      	mov	r0, r3
20002f40:	f7fe fad6 	bl	200014f0 <uxListRemove>
					--uxCurrentNumberOfTasks;
20002f44:	f647 13c4 	movw	r3, #31172	; 0x79c4
20002f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f4c:	681b      	ldr	r3, [r3, #0]
20002f4e:	f103 32ff 	add.w	r2, r3, #4294967295
20002f52:	f647 13c4 	movw	r3, #31172	; 0x79c4
20002f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f5a:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
20002f5c:	f647 13ac 	movw	r3, #31148	; 0x79ac
20002f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f64:	681b      	ldr	r3, [r3, #0]
20002f66:	f103 32ff 	add.w	r2, r3, #4294967295
20002f6a:	f647 13ac 	movw	r3, #31148	; 0x79ac
20002f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f72:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
20002f74:	f001 fb3a 	bl	200045ec <vPortExitCritical>

				prvDeleteTCB( pxTCB );
20002f78:	6878      	ldr	r0, [r7, #4]
20002f7a:	f000 f80b 	bl	20002f94 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002f7e:	f647 13ac 	movw	r3, #31148	; 0x79ac
20002f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f86:	681b      	ldr	r3, [r3, #0]
20002f88:	2b00      	cmp	r3, #0
20002f8a:	d1bb      	bne.n	20002f04 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002f8c:	f107 0708 	add.w	r7, r7, #8
20002f90:	46bd      	mov	sp, r7
20002f92:	bd80      	pop	{r7, pc}

20002f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20002f94:	b580      	push	{r7, lr}
20002f96:	b082      	sub	sp, #8
20002f98:	af00      	add	r7, sp, #0
20002f9a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
20002f9c:	687b      	ldr	r3, [r7, #4]
20002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002fa0:	4618      	mov	r0, r3
20002fa2:	f001 f897 	bl	200040d4 <vPortFree>
			vPortFree( pxTCB );
20002fa6:	6878      	ldr	r0, [r7, #4]
20002fa8:	f001 f894 	bl	200040d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20002fac:	f107 0708 	add.w	r7, r7, #8
20002fb0:	46bd      	mov	sp, r7
20002fb2:	bd80      	pop	{r7, pc}

20002fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002fb4:	b480      	push	{r7}
20002fb6:	b083      	sub	sp, #12
20002fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002fba:	f647 137c 	movw	r3, #31100	; 0x797c
20002fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fc2:	681b      	ldr	r3, [r3, #0]
20002fc4:	681b      	ldr	r3, [r3, #0]
20002fc6:	2b00      	cmp	r3, #0
20002fc8:	d102      	bne.n	20002fd0 <prvResetNextTaskUnblockTime+0x1c>
20002fca:	f04f 0301 	mov.w	r3, #1
20002fce:	e001      	b.n	20002fd4 <prvResetNextTaskUnblockTime+0x20>
20002fd0:	f04f 0300 	mov.w	r3, #0
20002fd4:	2b00      	cmp	r3, #0
20002fd6:	d007      	beq.n	20002fe8 <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20002fd8:	f647 13e4 	movw	r3, #31204	; 0x79e4
20002fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fe0:	f04f 32ff 	mov.w	r2, #4294967295
20002fe4:	601a      	str	r2, [r3, #0]
20002fe6:	e00e      	b.n	20003006 <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
20002fe8:	f647 137c 	movw	r3, #31100	; 0x797c
20002fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ff0:	681b      	ldr	r3, [r3, #0]
20002ff2:	68db      	ldr	r3, [r3, #12]
20002ff4:	68db      	ldr	r3, [r3, #12]
20002ff6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
20002ff8:	687b      	ldr	r3, [r7, #4]
20002ffa:	685a      	ldr	r2, [r3, #4]
20002ffc:	f647 13e4 	movw	r3, #31204	; 0x79e4
20003000:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003004:	601a      	str	r2, [r3, #0]
	}
}
20003006:	f107 070c 	add.w	r7, r7, #12
2000300a:	46bd      	mov	sp, r7
2000300c:	bc80      	pop	{r7}
2000300e:	4770      	bx	lr

20003010 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20003010:	b480      	push	{r7}
20003012:	b083      	sub	sp, #12
20003014:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
20003016:	f647 13d0 	movw	r3, #31184	; 0x79d0
2000301a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000301e:	681b      	ldr	r3, [r3, #0]
20003020:	2b00      	cmp	r3, #0
20003022:	d103      	bne.n	2000302c <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
20003024:	f04f 0301 	mov.w	r3, #1
20003028:	607b      	str	r3, [r7, #4]
2000302a:	e00d      	b.n	20003048 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000302c:	f647 13ec 	movw	r3, #31212	; 0x79ec
20003030:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003034:	681b      	ldr	r3, [r3, #0]
20003036:	2b00      	cmp	r3, #0
20003038:	d103      	bne.n	20003042 <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
2000303a:	f04f 0302 	mov.w	r3, #2
2000303e:	607b      	str	r3, [r7, #4]
20003040:	e002      	b.n	20003048 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20003042:	f04f 0300 	mov.w	r3, #0
20003046:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
20003048:	687b      	ldr	r3, [r7, #4]
	}
2000304a:	4618      	mov	r0, r3
2000304c:	f107 070c 	add.w	r7, r7, #12
20003050:	46bd      	mov	sp, r7
20003052:	bc80      	pop	{r7}
20003054:	4770      	bx	lr
20003056:	bf00      	nop

20003058 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
20003058:	b580      	push	{r7, lr}
2000305a:	b084      	sub	sp, #16
2000305c:	af00      	add	r7, sp, #0
2000305e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20003060:	687b      	ldr	r3, [r7, #4]
20003062:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
20003064:	687b      	ldr	r3, [r7, #4]
20003066:	2b00      	cmp	r3, #0
20003068:	f000 8098 	beq.w	2000319c <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
2000306c:	68fb      	ldr	r3, [r7, #12]
2000306e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003070:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003074:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003078:	681b      	ldr	r3, [r3, #0]
2000307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000307c:	429a      	cmp	r2, r3
2000307e:	f080 808d 	bcs.w	2000319c <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20003082:	68fb      	ldr	r3, [r7, #12]
20003084:	699b      	ldr	r3, [r3, #24]
20003086:	2b00      	cmp	r3, #0
20003088:	db09      	blt.n	2000309e <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000308a:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000308e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003092:	681b      	ldr	r3, [r3, #0]
20003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003096:	f1c3 0205 	rsb	r2, r3, #5
2000309a:	68fb      	ldr	r3, [r7, #12]
2000309c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
2000309e:	68fb      	ldr	r3, [r7, #12]
200030a0:	6959      	ldr	r1, [r3, #20]
200030a2:	68fb      	ldr	r3, [r7, #12]
200030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200030a6:	4613      	mov	r3, r2
200030a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200030ac:	4413      	add	r3, r2
200030ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
200030b2:	461a      	mov	r2, r3
200030b4:	f647 03f0 	movw	r3, #30960	; 0x78f0
200030b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030bc:	4413      	add	r3, r2
200030be:	4299      	cmp	r1, r3
200030c0:	d102      	bne.n	200030c8 <vTaskPriorityInherit+0x70>
200030c2:	f04f 0301 	mov.w	r3, #1
200030c6:	e001      	b.n	200030cc <vTaskPriorityInherit+0x74>
200030c8:	f04f 0300 	mov.w	r3, #0
200030cc:	2b00      	cmp	r3, #0
200030ce:	d05d      	beq.n	2000318c <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200030d0:	68fb      	ldr	r3, [r7, #12]
200030d2:	f103 0304 	add.w	r3, r3, #4
200030d6:	4618      	mov	r0, r3
200030d8:	f7fe fa0a 	bl	200014f0 <uxListRemove>
200030dc:	4603      	mov	r3, r0
200030de:	2b00      	cmp	r3, #0
200030e0:	d124      	bne.n	2000312c <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
200030e2:	68fb      	ldr	r3, [r7, #12]
200030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200030e6:	4613      	mov	r3, r2
200030e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200030ec:	4413      	add	r3, r2
200030ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
200030f2:	461a      	mov	r2, r3
200030f4:	f647 03f0 	movw	r3, #30960	; 0x78f0
200030f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030fc:	4413      	add	r3, r2
200030fe:	681b      	ldr	r3, [r3, #0]
20003100:	2b00      	cmp	r3, #0
20003102:	d113      	bne.n	2000312c <vTaskPriorityInherit+0xd4>
20003104:	68fb      	ldr	r3, [r7, #12]
20003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003108:	f04f 0201 	mov.w	r2, #1
2000310c:	fa02 f303 	lsl.w	r3, r2, r3
20003110:	ea6f 0203 	mvn.w	r2, r3
20003114:	f647 13cc 	movw	r3, #31180	; 0x79cc
20003118:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000311c:	681b      	ldr	r3, [r3, #0]
2000311e:	ea02 0203 	and.w	r2, r2, r3
20003122:	f647 13cc 	movw	r3, #31180	; 0x79cc
20003126:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000312a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
2000312c:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003130:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003134:	681b      	ldr	r3, [r3, #0]
20003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003138:	68fb      	ldr	r3, [r7, #12]
2000313a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
2000313c:	68fb      	ldr	r3, [r7, #12]
2000313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003140:	f04f 0201 	mov.w	r2, #1
20003144:	fa02 f203 	lsl.w	r2, r2, r3
20003148:	f647 13cc 	movw	r3, #31180	; 0x79cc
2000314c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003150:	681b      	ldr	r3, [r3, #0]
20003152:	ea42 0203 	orr.w	r2, r2, r3
20003156:	f647 13cc 	movw	r3, #31180	; 0x79cc
2000315a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000315e:	601a      	str	r2, [r3, #0]
20003160:	68fb      	ldr	r3, [r7, #12]
20003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003164:	4613      	mov	r3, r2
20003166:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000316a:	4413      	add	r3, r2
2000316c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003170:	461a      	mov	r2, r3
20003172:	f647 03f0 	movw	r3, #30960	; 0x78f0
20003176:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000317a:	441a      	add	r2, r3
2000317c:	68fb      	ldr	r3, [r7, #12]
2000317e:	f103 0304 	add.w	r3, r3, #4
20003182:	4610      	mov	r0, r2
20003184:	4619      	mov	r1, r3
20003186:	f7fe f955 	bl	20001434 <vListInsertEnd>
2000318a:	e007      	b.n	2000319c <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
2000318c:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003190:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003194:	681b      	ldr	r3, [r3, #0]
20003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003198:	68fb      	ldr	r3, [r7, #12]
2000319a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
2000319c:	f107 0710 	add.w	r7, r7, #16
200031a0:	46bd      	mov	sp, r7
200031a2:	bd80      	pop	{r7, pc}

200031a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
200031a4:	b580      	push	{r7, lr}
200031a6:	b086      	sub	sp, #24
200031a8:	af00      	add	r7, sp, #0
200031aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
200031ac:	687b      	ldr	r3, [r7, #4]
200031ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
200031b0:	f04f 0300 	mov.w	r3, #0
200031b4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
200031b6:	687b      	ldr	r3, [r7, #4]
200031b8:	2b00      	cmp	r3, #0
200031ba:	f000 8092 	beq.w	200032e2 <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
200031be:	f647 03ec 	movw	r3, #30956	; 0x78ec
200031c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031c6:	681b      	ldr	r3, [r3, #0]
200031c8:	68ba      	ldr	r2, [r7, #8]
200031ca:	429a      	cmp	r2, r3
200031cc:	d009      	beq.n	200031e2 <xTaskPriorityDisinherit+0x3e>
200031ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200031d2:	f383 8811 	msr	BASEPRI, r3
200031d6:	f3bf 8f6f 	isb	sy
200031da:	f3bf 8f4f 	dsb	sy
200031de:	613b      	str	r3, [r7, #16]
200031e0:	e7fe      	b.n	200031e0 <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
200031e2:	68bb      	ldr	r3, [r7, #8]
200031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200031e6:	2b00      	cmp	r3, #0
200031e8:	d109      	bne.n	200031fe <xTaskPriorityDisinherit+0x5a>
200031ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200031ee:	f383 8811 	msr	BASEPRI, r3
200031f2:	f3bf 8f6f 	isb	sy
200031f6:	f3bf 8f4f 	dsb	sy
200031fa:	617b      	str	r3, [r7, #20]
200031fc:	e7fe      	b.n	200031fc <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
200031fe:	68bb      	ldr	r3, [r7, #8]
20003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20003202:	f103 32ff 	add.w	r2, r3, #4294967295
20003206:	68bb      	ldr	r3, [r7, #8]
20003208:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
2000320a:	68bb      	ldr	r3, [r7, #8]
2000320c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000320e:	68bb      	ldr	r3, [r7, #8]
20003210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20003212:	429a      	cmp	r2, r3
20003214:	d065      	beq.n	200032e2 <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
20003216:	68bb      	ldr	r3, [r7, #8]
20003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000321a:	2b00      	cmp	r3, #0
2000321c:	d161      	bne.n	200032e2 <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2000321e:	68bb      	ldr	r3, [r7, #8]
20003220:	f103 0304 	add.w	r3, r3, #4
20003224:	4618      	mov	r0, r3
20003226:	f7fe f963 	bl	200014f0 <uxListRemove>
2000322a:	4603      	mov	r3, r0
2000322c:	2b00      	cmp	r3, #0
2000322e:	d124      	bne.n	2000327a <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20003230:	68bb      	ldr	r3, [r7, #8]
20003232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003234:	4613      	mov	r3, r2
20003236:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000323a:	4413      	add	r3, r2
2000323c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003240:	461a      	mov	r2, r3
20003242:	f647 03f0 	movw	r3, #30960	; 0x78f0
20003246:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000324a:	4413      	add	r3, r2
2000324c:	681b      	ldr	r3, [r3, #0]
2000324e:	2b00      	cmp	r3, #0
20003250:	d113      	bne.n	2000327a <xTaskPriorityDisinherit+0xd6>
20003252:	68bb      	ldr	r3, [r7, #8]
20003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003256:	f04f 0201 	mov.w	r2, #1
2000325a:	fa02 f303 	lsl.w	r3, r2, r3
2000325e:	ea6f 0203 	mvn.w	r2, r3
20003262:	f647 13cc 	movw	r3, #31180	; 0x79cc
20003266:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000326a:	681b      	ldr	r3, [r3, #0]
2000326c:	ea02 0203 	and.w	r2, r2, r3
20003270:	f647 13cc 	movw	r3, #31180	; 0x79cc
20003274:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003278:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
2000327a:	68bb      	ldr	r3, [r7, #8]
2000327c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000327e:	68bb      	ldr	r3, [r7, #8]
20003280:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003282:	68bb      	ldr	r3, [r7, #8]
20003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003286:	f1c3 0205 	rsb	r2, r3, #5
2000328a:	68bb      	ldr	r3, [r7, #8]
2000328c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
2000328e:	68bb      	ldr	r3, [r7, #8]
20003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003292:	f04f 0201 	mov.w	r2, #1
20003296:	fa02 f203 	lsl.w	r2, r2, r3
2000329a:	f647 13cc 	movw	r3, #31180	; 0x79cc
2000329e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032a2:	681b      	ldr	r3, [r3, #0]
200032a4:	ea42 0203 	orr.w	r2, r2, r3
200032a8:	f647 13cc 	movw	r3, #31180	; 0x79cc
200032ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032b0:	601a      	str	r2, [r3, #0]
200032b2:	68bb      	ldr	r3, [r7, #8]
200032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200032b6:	4613      	mov	r3, r2
200032b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200032bc:	4413      	add	r3, r2
200032be:	ea4f 0383 	mov.w	r3, r3, lsl #2
200032c2:	461a      	mov	r2, r3
200032c4:	f647 03f0 	movw	r3, #30960	; 0x78f0
200032c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032cc:	441a      	add	r2, r3
200032ce:	68bb      	ldr	r3, [r7, #8]
200032d0:	f103 0304 	add.w	r3, r3, #4
200032d4:	4610      	mov	r0, r2
200032d6:	4619      	mov	r1, r3
200032d8:	f7fe f8ac 	bl	20001434 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
200032dc:	f04f 0301 	mov.w	r3, #1
200032e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
200032e2:	68fb      	ldr	r3, [r7, #12]
	}
200032e4:	4618      	mov	r0, r3
200032e6:	f107 0718 	add.w	r7, r7, #24
200032ea:	46bd      	mov	sp, r7
200032ec:	bd80      	pop	{r7, pc}
200032ee:	bf00      	nop

200032f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
200032f0:	b480      	push	{r7}
200032f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
200032f4:	f647 03ec 	movw	r3, #30956	; 0x78ec
200032f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032fc:	681b      	ldr	r3, [r3, #0]
200032fe:	2b00      	cmp	r3, #0
20003300:	d008      	beq.n	20003314 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
20003302:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003306:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000330a:	681b      	ldr	r3, [r3, #0]
2000330c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2000330e:	f102 0201 	add.w	r2, r2, #1
20003312:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
20003314:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003318:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000331c:	681b      	ldr	r3, [r3, #0]
	}
2000331e:	4618      	mov	r0, r3
20003320:	46bd      	mov	sp, r7
20003322:	bc80      	pop	{r7}
20003324:	4770      	bx	lr
20003326:	bf00      	nop

20003328 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
20003328:	b580      	push	{r7, lr}
2000332a:	b084      	sub	sp, #16
2000332c:	af00      	add	r7, sp, #0
2000332e:	6078      	str	r0, [r7, #4]
20003330:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
20003332:	f001 f923 	bl	2000457c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
20003336:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000333e:	681b      	ldr	r3, [r3, #0]
20003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20003342:	2b00      	cmp	r3, #0
20003344:	d11b      	bne.n	2000337e <ulTaskNotifyTake+0x56>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
20003346:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000334a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000334e:	681b      	ldr	r3, [r3, #0]
20003350:	f04f 0201 	mov.w	r2, #1
20003354:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
20003358:	683b      	ldr	r3, [r7, #0]
2000335a:	2b00      	cmp	r3, #0
2000335c:	d00f      	beq.n	2000337e <ulTaskNotifyTake+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2000335e:	6838      	ldr	r0, [r7, #0]
20003360:	f04f 0101 	mov.w	r1, #1
20003364:	f000 f95e 	bl	20003624 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
20003368:	f64e 5304 	movw	r3, #60676	; 0xed04
2000336c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003374:	601a      	str	r2, [r3, #0]
20003376:	f3bf 8f4f 	dsb	sy
2000337a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
2000337e:	f001 f935 	bl	200045ec <vPortExitCritical>

		taskENTER_CRITICAL();
20003382:	f001 f8fb 	bl	2000457c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
20003386:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000338a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000338e:	681b      	ldr	r3, [r3, #0]
20003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20003392:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
20003394:	68fb      	ldr	r3, [r7, #12]
20003396:	2b00      	cmp	r3, #0
20003398:	d014      	beq.n	200033c4 <ulTaskNotifyTake+0x9c>
			{
				if( xClearCountOnExit != pdFALSE )
2000339a:	687b      	ldr	r3, [r7, #4]
2000339c:	2b00      	cmp	r3, #0
2000339e:	d008      	beq.n	200033b2 <ulTaskNotifyTake+0x8a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
200033a0:	f647 03ec 	movw	r3, #30956	; 0x78ec
200033a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033a8:	681b      	ldr	r3, [r3, #0]
200033aa:	f04f 0200 	mov.w	r2, #0
200033ae:	655a      	str	r2, [r3, #84]	; 0x54
200033b0:	e008      	b.n	200033c4 <ulTaskNotifyTake+0x9c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
200033b2:	f647 03ec 	movw	r3, #30956	; 0x78ec
200033b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033ba:	681b      	ldr	r3, [r3, #0]
200033bc:	68fa      	ldr	r2, [r7, #12]
200033be:	f102 32ff 	add.w	r2, r2, #4294967295
200033c2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200033c4:	f647 03ec 	movw	r3, #30956	; 0x78ec
200033c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033cc:	681b      	ldr	r3, [r3, #0]
200033ce:	f04f 0200 	mov.w	r2, #0
200033d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
200033d6:	f001 f909 	bl	200045ec <vPortExitCritical>

		return ulReturn;
200033da:	68fb      	ldr	r3, [r7, #12]
	}
200033dc:	4618      	mov	r0, r3
200033de:	f107 0710 	add.w	r7, r7, #16
200033e2:	46bd      	mov	sp, r7
200033e4:	bd80      	pop	{r7, pc}
200033e6:	bf00      	nop

200033e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
200033e8:	b580      	push	{r7, lr}
200033ea:	b086      	sub	sp, #24
200033ec:	af00      	add	r7, sp, #0
200033ee:	60f8      	str	r0, [r7, #12]
200033f0:	60b9      	str	r1, [r7, #8]
200033f2:	607a      	str	r2, [r7, #4]
200033f4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
200033f6:	f001 f8c1 	bl	2000457c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
200033fa:	f647 03ec 	movw	r3, #30956	; 0x78ec
200033fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003402:	681b      	ldr	r3, [r3, #0]
20003404:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
20003408:	b2db      	uxtb	r3, r3
2000340a:	2b02      	cmp	r3, #2
2000340c:	d027      	beq.n	2000345e <xTaskNotifyWait+0x76>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
2000340e:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003412:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003416:	681b      	ldr	r3, [r3, #0]
20003418:	6d59      	ldr	r1, [r3, #84]	; 0x54
2000341a:	68fa      	ldr	r2, [r7, #12]
2000341c:	ea6f 0202 	mvn.w	r2, r2
20003420:	ea01 0202 	and.w	r2, r1, r2
20003424:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
20003426:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000342a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000342e:	681b      	ldr	r3, [r3, #0]
20003430:	f04f 0201 	mov.w	r2, #1
20003434:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
20003438:	683b      	ldr	r3, [r7, #0]
2000343a:	2b00      	cmp	r3, #0
2000343c:	d00f      	beq.n	2000345e <xTaskNotifyWait+0x76>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2000343e:	6838      	ldr	r0, [r7, #0]
20003440:	f04f 0101 	mov.w	r1, #1
20003444:	f000 f8ee 	bl	20003624 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
20003448:	f64e 5304 	movw	r3, #60676	; 0xed04
2000344c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003454:	601a      	str	r2, [r3, #0]
20003456:	f3bf 8f4f 	dsb	sy
2000345a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
2000345e:	f001 f8c5 	bl	200045ec <vPortExitCritical>

		taskENTER_CRITICAL();
20003462:	f001 f88b 	bl	2000457c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
20003466:	687b      	ldr	r3, [r7, #4]
20003468:	2b00      	cmp	r3, #0
2000346a:	d007      	beq.n	2000347c <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
2000346c:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003470:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003474:	681b      	ldr	r3, [r3, #0]
20003476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
20003478:	687b      	ldr	r3, [r7, #4]
2000347a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
2000347c:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003480:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003484:	681b      	ldr	r3, [r3, #0]
20003486:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
2000348a:	b2db      	uxtb	r3, r3
2000348c:	2b01      	cmp	r3, #1
2000348e:	d103      	bne.n	20003498 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
20003490:	f04f 0300 	mov.w	r3, #0
20003494:	617b      	str	r3, [r7, #20]
20003496:	e00e      	b.n	200034b6 <xTaskNotifyWait+0xce>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
20003498:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000349c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034a0:	681b      	ldr	r3, [r3, #0]
200034a2:	6d59      	ldr	r1, [r3, #84]	; 0x54
200034a4:	68ba      	ldr	r2, [r7, #8]
200034a6:	ea6f 0202 	mvn.w	r2, r2
200034aa:	ea01 0202 	and.w	r2, r1, r2
200034ae:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
200034b0:	f04f 0301 	mov.w	r3, #1
200034b4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200034b6:	f647 03ec 	movw	r3, #30956	; 0x78ec
200034ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034be:	681b      	ldr	r3, [r3, #0]
200034c0:	f04f 0200 	mov.w	r2, #0
200034c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
200034c8:	f001 f890 	bl	200045ec <vPortExitCritical>

		return xReturn;
200034cc:	697b      	ldr	r3, [r7, #20]
	}
200034ce:	4618      	mov	r0, r3
200034d0:	f107 0718 	add.w	r7, r7, #24
200034d4:	46bd      	mov	sp, r7
200034d6:	bd80      	pop	{r7, pc}

200034d8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
200034d8:	b580      	push	{r7, lr}
200034da:	b08a      	sub	sp, #40	; 0x28
200034dc:	af00      	add	r7, sp, #0
200034de:	6078      	str	r0, [r7, #4]
200034e0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
200034e2:	687b      	ldr	r3, [r7, #4]
200034e4:	2b00      	cmp	r3, #0
200034e6:	d109      	bne.n	200034fc <vTaskNotifyGiveFromISR+0x24>
200034e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200034ec:	f383 8811 	msr	BASEPRI, r3
200034f0:	f3bf 8f6f 	isb	sy
200034f4:	f3bf 8f4f 	dsb	sy
200034f8:	617b      	str	r3, [r7, #20]
200034fa:	e7fe      	b.n	200034fa <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200034fc:	f001 f912 	bl	20004724 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
20003500:	687b      	ldr	r3, [r7, #4]
20003502:	60bb      	str	r3, [r7, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20003504:	f3ef 8211 	mrs	r2, BASEPRI
20003508:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000350c:	f383 8811 	msr	BASEPRI, r3
20003510:	f3bf 8f6f 	isb	sy
20003514:	f3bf 8f4f 	dsb	sy
20003518:	61fa      	str	r2, [r7, #28]
2000351a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
2000351c:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2000351e:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
20003520:	68bb      	ldr	r3, [r7, #8]
20003522:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
20003526:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
20003528:	68bb      	ldr	r3, [r7, #8]
2000352a:	f04f 0202 	mov.w	r2, #2
2000352e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
20003532:	68bb      	ldr	r3, [r7, #8]
20003534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20003536:	f103 0201 	add.w	r2, r3, #1
2000353a:	68bb      	ldr	r3, [r7, #8]
2000353c:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
2000353e:	7bfb      	ldrb	r3, [r7, #15]
20003540:	2b01      	cmp	r3, #1
20003542:	d165      	bne.n	20003610 <vTaskNotifyGiveFromISR+0x138>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
20003544:	68bb      	ldr	r3, [r7, #8]
20003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20003548:	2b00      	cmp	r3, #0
2000354a:	d009      	beq.n	20003560 <vTaskNotifyGiveFromISR+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
2000354c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003550:	f383 8811 	msr	BASEPRI, r3
20003554:	f3bf 8f6f 	isb	sy
20003558:	f3bf 8f4f 	dsb	sy
2000355c:	623b      	str	r3, [r7, #32]
2000355e:	e7fe      	b.n	2000355e <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20003560:	f647 13ec 	movw	r3, #31212	; 0x79ec
20003564:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003568:	681b      	ldr	r3, [r3, #0]
2000356a:	2b00      	cmp	r3, #0
2000356c:	d12d      	bne.n	200035ca <vTaskNotifyGiveFromISR+0xf2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2000356e:	68bb      	ldr	r3, [r7, #8]
20003570:	f103 0304 	add.w	r3, r3, #4
20003574:	4618      	mov	r0, r3
20003576:	f7fd ffbb 	bl	200014f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
2000357a:	68bb      	ldr	r3, [r7, #8]
2000357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000357e:	f04f 0201 	mov.w	r2, #1
20003582:	fa02 f203 	lsl.w	r2, r2, r3
20003586:	f647 13cc 	movw	r3, #31180	; 0x79cc
2000358a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000358e:	681b      	ldr	r3, [r3, #0]
20003590:	ea42 0203 	orr.w	r2, r2, r3
20003594:	f647 13cc 	movw	r3, #31180	; 0x79cc
20003598:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000359c:	601a      	str	r2, [r3, #0]
2000359e:	68bb      	ldr	r3, [r7, #8]
200035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200035a2:	4613      	mov	r3, r2
200035a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200035a8:	4413      	add	r3, r2
200035aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
200035ae:	461a      	mov	r2, r3
200035b0:	f647 03f0 	movw	r3, #30960	; 0x78f0
200035b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035b8:	441a      	add	r2, r3
200035ba:	68bb      	ldr	r3, [r7, #8]
200035bc:	f103 0304 	add.w	r3, r3, #4
200035c0:	4610      	mov	r0, r2
200035c2:	4619      	mov	r1, r3
200035c4:	f7fd ff36 	bl	20001434 <vListInsertEnd>
200035c8:	e009      	b.n	200035de <vTaskNotifyGiveFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
200035ca:	68bb      	ldr	r3, [r7, #8]
200035cc:	f103 0318 	add.w	r3, r3, #24
200035d0:	f647 1084 	movw	r0, #31108	; 0x7984
200035d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200035d8:	4619      	mov	r1, r3
200035da:	f7fd ff2b 	bl	20001434 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
200035de:	68bb      	ldr	r3, [r7, #8]
200035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200035e2:	f647 03ec 	movw	r3, #30956	; 0x78ec
200035e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035ea:	681b      	ldr	r3, [r3, #0]
200035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200035ee:	429a      	cmp	r2, r3
200035f0:	d90e      	bls.n	20003610 <vTaskNotifyGiveFromISR+0x138>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
200035f2:	683b      	ldr	r3, [r7, #0]
200035f4:	2b00      	cmp	r3, #0
200035f6:	d004      	beq.n	20003602 <vTaskNotifyGiveFromISR+0x12a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
200035f8:	683b      	ldr	r3, [r7, #0]
200035fa:	f04f 0201 	mov.w	r2, #1
200035fe:	601a      	str	r2, [r3, #0]
20003600:	e006      	b.n	20003610 <vTaskNotifyGiveFromISR+0x138>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
20003602:	f647 13d8 	movw	r3, #31192	; 0x79d8
20003606:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000360a:	f04f 0201 	mov.w	r2, #1
2000360e:	601a      	str	r2, [r3, #0]
20003610:	693b      	ldr	r3, [r7, #16]
20003612:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003616:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
2000361a:	f107 0728 	add.w	r7, r7, #40	; 0x28
2000361e:	46bd      	mov	sp, r7
20003620:	bd80      	pop	{r7, pc}
20003622:	bf00      	nop

20003624 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
20003624:	b580      	push	{r7, lr}
20003626:	b084      	sub	sp, #16
20003628:	af00      	add	r7, sp, #0
2000362a:	6078      	str	r0, [r7, #4]
2000362c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
2000362e:	f647 13c8 	movw	r3, #31176	; 0x79c8
20003632:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003636:	681b      	ldr	r3, [r3, #0]
20003638:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2000363a:	f647 03ec 	movw	r3, #30956	; 0x78ec
2000363e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003642:	681b      	ldr	r3, [r3, #0]
20003644:	f103 0304 	add.w	r3, r3, #4
20003648:	4618      	mov	r0, r3
2000364a:	f7fd ff51 	bl	200014f0 <uxListRemove>
2000364e:	4603      	mov	r3, r0
20003650:	2b00      	cmp	r3, #0
20003652:	d117      	bne.n	20003684 <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
20003654:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003658:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000365c:	681b      	ldr	r3, [r3, #0]
2000365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003660:	f04f 0201 	mov.w	r2, #1
20003664:	fa02 f303 	lsl.w	r3, r2, r3
20003668:	ea6f 0203 	mvn.w	r2, r3
2000366c:	f647 13cc 	movw	r3, #31180	; 0x79cc
20003670:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003674:	681b      	ldr	r3, [r3, #0]
20003676:	ea02 0203 	and.w	r2, r2, r3
2000367a:	f647 13cc 	movw	r3, #31180	; 0x79cc
2000367e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003682:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003684:	687b      	ldr	r3, [r7, #4]
20003686:	f1b3 3fff 	cmp.w	r3, #4294967295
2000368a:	d111      	bne.n	200036b0 <prvAddCurrentTaskToDelayedList+0x8c>
2000368c:	683b      	ldr	r3, [r7, #0]
2000368e:	2b00      	cmp	r3, #0
20003690:	d00e      	beq.n	200036b0 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003692:	f647 03ec 	movw	r3, #30956	; 0x78ec
20003696:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000369a:	681b      	ldr	r3, [r3, #0]
2000369c:	f103 0304 	add.w	r3, r3, #4
200036a0:	f647 10b0 	movw	r0, #31152	; 0x79b0
200036a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200036a8:	4619      	mov	r1, r3
200036aa:	f7fd fec3 	bl	20001434 <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
200036ae:	e03d      	b.n	2000372c <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
200036b0:	68fa      	ldr	r2, [r7, #12]
200036b2:	687b      	ldr	r3, [r7, #4]
200036b4:	4413      	add	r3, r2
200036b6:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
200036b8:	f647 03ec 	movw	r3, #30956	; 0x78ec
200036bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036c0:	681b      	ldr	r3, [r3, #0]
200036c2:	68ba      	ldr	r2, [r7, #8]
200036c4:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
200036c6:	68ba      	ldr	r2, [r7, #8]
200036c8:	68fb      	ldr	r3, [r7, #12]
200036ca:	429a      	cmp	r2, r3
200036cc:	d210      	bcs.n	200036f0 <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
200036ce:	f647 1380 	movw	r3, #31104	; 0x7980
200036d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036d6:	681a      	ldr	r2, [r3, #0]
200036d8:	f647 03ec 	movw	r3, #30956	; 0x78ec
200036dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036e0:	681b      	ldr	r3, [r3, #0]
200036e2:	f103 0304 	add.w	r3, r3, #4
200036e6:	4610      	mov	r0, r2
200036e8:	4619      	mov	r1, r3
200036ea:	f7fd fec7 	bl	2000147c <vListInsert>
200036ee:	e01d      	b.n	2000372c <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
200036f0:	f647 137c 	movw	r3, #31100	; 0x797c
200036f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036f8:	681a      	ldr	r2, [r3, #0]
200036fa:	f647 03ec 	movw	r3, #30956	; 0x78ec
200036fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003702:	681b      	ldr	r3, [r3, #0]
20003704:	f103 0304 	add.w	r3, r3, #4
20003708:	4610      	mov	r0, r2
2000370a:	4619      	mov	r1, r3
2000370c:	f7fd feb6 	bl	2000147c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
20003710:	f647 13e4 	movw	r3, #31204	; 0x79e4
20003714:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003718:	681b      	ldr	r3, [r3, #0]
2000371a:	68ba      	ldr	r2, [r7, #8]
2000371c:	429a      	cmp	r2, r3
2000371e:	d205      	bcs.n	2000372c <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
20003720:	f647 13e4 	movw	r3, #31204	; 0x79e4
20003724:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003728:	68ba      	ldr	r2, [r7, #8]
2000372a:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
2000372c:	f107 0710 	add.w	r7, r7, #16
20003730:	46bd      	mov	sp, r7
20003732:	bd80      	pop	{r7, pc}

20003734 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
20003734:	b580      	push	{r7, lr}
20003736:	b084      	sub	sp, #16
20003738:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
2000373a:	f04f 0300 	mov.w	r3, #0
2000373e:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
20003740:	f000 fb72 	bl	20003e28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
20003744:	f647 2328 	movw	r3, #31272	; 0x7a28
20003748:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000374c:	681b      	ldr	r3, [r3, #0]
2000374e:	2b00      	cmp	r3, #0
20003750:	d017      	beq.n	20003782 <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
20003752:	f04f 0302 	mov.w	r3, #2
20003756:	9300      	str	r3, [sp, #0]
20003758:	f647 232c 	movw	r3, #31276	; 0x7a2c
2000375c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003760:	9301      	str	r3, [sp, #4]
20003762:	f643 10a5 	movw	r0, #14757	; 0x39a5
20003766:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000376a:	f647 0118 	movw	r1, #30744	; 0x7818
2000376e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20003772:	f04f 02a0 	mov.w	r2, #160	; 0xa0
20003776:	f04f 0300 	mov.w	r3, #0
2000377a:	f7fe fc4d 	bl	20002018 <xTaskCreate>
2000377e:	4603      	mov	r3, r0
20003780:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
20003782:	683b      	ldr	r3, [r7, #0]
20003784:	2b00      	cmp	r3, #0
20003786:	d109      	bne.n	2000379c <xTimerCreateTimerTask+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20003788:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000378c:	f383 8811 	msr	BASEPRI, r3
20003790:	f3bf 8f6f 	isb	sy
20003794:	f3bf 8f4f 	dsb	sy
20003798:	607b      	str	r3, [r7, #4]
2000379a:	e7fe      	b.n	2000379a <xTimerCreateTimerTask+0x66>
	return xReturn;
2000379c:	683b      	ldr	r3, [r7, #0]
}
2000379e:	4618      	mov	r0, r3
200037a0:	f107 0708 	add.w	r7, r7, #8
200037a4:	46bd      	mov	sp, r7
200037a6:	bd80      	pop	{r7, pc}

200037a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
200037a8:	b580      	push	{r7, lr}
200037aa:	b088      	sub	sp, #32
200037ac:	af02      	add	r7, sp, #8
200037ae:	60f8      	str	r0, [r7, #12]
200037b0:	60b9      	str	r1, [r7, #8]
200037b2:	607a      	str	r2, [r7, #4]
200037b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
200037b6:	f04f 002c 	mov.w	r0, #44	; 0x2c
200037ba:	f000 fb8f 	bl	20003edc <pvPortMalloc>
200037be:	4603      	mov	r3, r0
200037c0:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
200037c2:	697b      	ldr	r3, [r7, #20]
200037c4:	2b00      	cmp	r3, #0
200037c6:	d009      	beq.n	200037dc <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
200037c8:	6a3b      	ldr	r3, [r7, #32]
200037ca:	9300      	str	r3, [sp, #0]
200037cc:	697b      	ldr	r3, [r7, #20]
200037ce:	9301      	str	r3, [sp, #4]
200037d0:	68f8      	ldr	r0, [r7, #12]
200037d2:	68b9      	ldr	r1, [r7, #8]
200037d4:	687a      	ldr	r2, [r7, #4]
200037d6:	683b      	ldr	r3, [r7, #0]
200037d8:	f000 f806 	bl	200037e8 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
200037dc:	697b      	ldr	r3, [r7, #20]
	}
200037de:	4618      	mov	r0, r3
200037e0:	f107 0718 	add.w	r7, r7, #24
200037e4:	46bd      	mov	sp, r7
200037e6:	bd80      	pop	{r7, pc}

200037e8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
200037e8:	b580      	push	{r7, lr}
200037ea:	b086      	sub	sp, #24
200037ec:	af00      	add	r7, sp, #0
200037ee:	60f8      	str	r0, [r7, #12]
200037f0:	60b9      	str	r1, [r7, #8]
200037f2:	607a      	str	r2, [r7, #4]
200037f4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
200037f6:	68bb      	ldr	r3, [r7, #8]
200037f8:	2b00      	cmp	r3, #0
200037fa:	d109      	bne.n	20003810 <prvInitialiseNewTimer+0x28>
200037fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003800:	f383 8811 	msr	BASEPRI, r3
20003804:	f3bf 8f6f 	isb	sy
20003808:	f3bf 8f4f 	dsb	sy
2000380c:	617b      	str	r3, [r7, #20]
2000380e:	e7fe      	b.n	2000380e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
20003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003812:	2b00      	cmp	r3, #0
20003814:	d016      	beq.n	20003844 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
20003816:	f000 fb07 	bl	20003e28 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
2000381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000381c:	68fa      	ldr	r2, [r7, #12]
2000381e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
20003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003822:	68ba      	ldr	r2, [r7, #8]
20003824:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
20003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003828:	687a      	ldr	r2, [r7, #4]
2000382a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
2000382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000382e:	683a      	ldr	r2, [r7, #0]
20003830:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
20003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003834:	6a3a      	ldr	r2, [r7, #32]
20003836:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
20003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000383a:	f103 0304 	add.w	r3, r3, #4
2000383e:	4618      	mov	r0, r3
20003840:	f7fd fdea 	bl	20001418 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
20003844:	f107 0718 	add.w	r7, r7, #24
20003848:	46bd      	mov	sp, r7
2000384a:	bd80      	pop	{r7, pc}

2000384c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
2000384c:	b580      	push	{r7, lr}
2000384e:	b08a      	sub	sp, #40	; 0x28
20003850:	af00      	add	r7, sp, #0
20003852:	60f8      	str	r0, [r7, #12]
20003854:	60b9      	str	r1, [r7, #8]
20003856:	607a      	str	r2, [r7, #4]
20003858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
2000385a:	f04f 0300 	mov.w	r3, #0
2000385e:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
20003860:	68fb      	ldr	r3, [r7, #12]
20003862:	2b00      	cmp	r3, #0
20003864:	d109      	bne.n	2000387a <xTimerGenericCommand+0x2e>
20003866:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000386a:	f383 8811 	msr	BASEPRI, r3
2000386e:	f3bf 8f6f 	isb	sy
20003872:	f3bf 8f4f 	dsb	sy
20003876:	627b      	str	r3, [r7, #36]	; 0x24
20003878:	e7fe      	b.n	20003878 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
2000387a:	f647 2328 	movw	r3, #31272	; 0x7a28
2000387e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003882:	681b      	ldr	r3, [r3, #0]
20003884:	2b00      	cmp	r3, #0
20003886:	d040      	beq.n	2000390a <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
20003888:	68bb      	ldr	r3, [r7, #8]
2000388a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
2000388c:	687b      	ldr	r3, [r7, #4]
2000388e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
20003890:	68fb      	ldr	r3, [r7, #12]
20003892:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20003894:	68bb      	ldr	r3, [r7, #8]
20003896:	2b05      	cmp	r3, #5
20003898:	dc27      	bgt.n	200038ea <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
2000389a:	f7ff fbb9 	bl	20003010 <xTaskGetSchedulerState>
2000389e:	4603      	mov	r3, r0
200038a0:	2b02      	cmp	r3, #2
200038a2:	d110      	bne.n	200038c6 <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
200038a4:	f647 2328 	movw	r3, #31272	; 0x7a28
200038a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038ac:	681a      	ldr	r2, [r3, #0]
200038ae:	f107 0310 	add.w	r3, r7, #16
200038b2:	4610      	mov	r0, r2
200038b4:	4619      	mov	r1, r3
200038b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200038b8:	f04f 0300 	mov.w	r3, #0
200038bc:	f7fd ff58 	bl	20001770 <xQueueGenericSend>
200038c0:	4603      	mov	r3, r0
200038c2:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
200038c4:	e021      	b.n	2000390a <xTimerGenericCommand+0xbe>
200038c6:	f647 2328 	movw	r3, #31272	; 0x7a28
200038ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038ce:	681a      	ldr	r2, [r3, #0]
200038d0:	f107 0310 	add.w	r3, r7, #16
200038d4:	4610      	mov	r0, r2
200038d6:	4619      	mov	r1, r3
200038d8:	f04f 0200 	mov.w	r2, #0
200038dc:	f04f 0300 	mov.w	r3, #0
200038e0:	f7fd ff46 	bl	20001770 <xQueueGenericSend>
200038e4:	4603      	mov	r3, r0
200038e6:	623b      	str	r3, [r7, #32]
200038e8:	e00f      	b.n	2000390a <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
200038ea:	f647 2328 	movw	r3, #31272	; 0x7a28
200038ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038f2:	681a      	ldr	r2, [r3, #0]
200038f4:	f107 0310 	add.w	r3, r7, #16
200038f8:	4610      	mov	r0, r2
200038fa:	4619      	mov	r1, r3
200038fc:	683a      	ldr	r2, [r7, #0]
200038fe:	f04f 0300 	mov.w	r3, #0
20003902:	f7fe f84d 	bl	200019a0 <xQueueGenericSendFromISR>
20003906:	4603      	mov	r3, r0
20003908:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
2000390a:	6a3b      	ldr	r3, [r7, #32]
}
2000390c:	4618      	mov	r0, r3
2000390e:	f107 0728 	add.w	r7, r7, #40	; 0x28
20003912:	46bd      	mov	sp, r7
20003914:	bd80      	pop	{r7, pc}
20003916:	bf00      	nop

20003918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
20003918:	b580      	push	{r7, lr}
2000391a:	b088      	sub	sp, #32
2000391c:	af02      	add	r7, sp, #8
2000391e:	6078      	str	r0, [r7, #4]
20003920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003922:	f647 2320 	movw	r3, #31264	; 0x7a20
20003926:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000392a:	681b      	ldr	r3, [r3, #0]
2000392c:	68db      	ldr	r3, [r3, #12]
2000392e:	68db      	ldr	r3, [r3, #12]
20003930:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003932:	693b      	ldr	r3, [r7, #16]
20003934:	f103 0304 	add.w	r3, r3, #4
20003938:	4618      	mov	r0, r3
2000393a:	f7fd fdd9 	bl	200014f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
2000393e:	693b      	ldr	r3, [r7, #16]
20003940:	69db      	ldr	r3, [r3, #28]
20003942:	2b01      	cmp	r3, #1
20003944:	d126      	bne.n	20003994 <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
20003946:	693b      	ldr	r3, [r7, #16]
20003948:	699a      	ldr	r2, [r3, #24]
2000394a:	687b      	ldr	r3, [r7, #4]
2000394c:	4413      	add	r3, r2
2000394e:	6938      	ldr	r0, [r7, #16]
20003950:	4619      	mov	r1, r3
20003952:	683a      	ldr	r2, [r7, #0]
20003954:	687b      	ldr	r3, [r7, #4]
20003956:	f000 f8df 	bl	20003b18 <prvInsertTimerInActiveList>
2000395a:	4603      	mov	r3, r0
2000395c:	2b00      	cmp	r3, #0
2000395e:	d019      	beq.n	20003994 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003960:	f04f 0300 	mov.w	r3, #0
20003964:	9300      	str	r3, [sp, #0]
20003966:	6938      	ldr	r0, [r7, #16]
20003968:	f04f 0100 	mov.w	r1, #0
2000396c:	687a      	ldr	r2, [r7, #4]
2000396e:	f04f 0300 	mov.w	r3, #0
20003972:	f7ff ff6b 	bl	2000384c <xTimerGenericCommand>
20003976:	4603      	mov	r3, r0
20003978:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
2000397a:	68fb      	ldr	r3, [r7, #12]
2000397c:	2b00      	cmp	r3, #0
2000397e:	d109      	bne.n	20003994 <prvProcessExpiredTimer+0x7c>
20003980:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003984:	f383 8811 	msr	BASEPRI, r3
20003988:	f3bf 8f6f 	isb	sy
2000398c:	f3bf 8f4f 	dsb	sy
20003990:	617b      	str	r3, [r7, #20]
20003992:	e7fe      	b.n	20003992 <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003994:	693b      	ldr	r3, [r7, #16]
20003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003998:	6938      	ldr	r0, [r7, #16]
2000399a:	4798      	blx	r3
}
2000399c:	f107 0718 	add.w	r7, r7, #24
200039a0:	46bd      	mov	sp, r7
200039a2:	bd80      	pop	{r7, pc}

200039a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
200039a4:	b580      	push	{r7, lr}
200039a6:	b084      	sub	sp, #16
200039a8:	af00      	add	r7, sp, #0
200039aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
200039ac:	f107 0308 	add.w	r3, r7, #8
200039b0:	4618      	mov	r0, r3
200039b2:	f000 f861 	bl	20003a78 <prvGetNextExpireTime>
200039b6:	4603      	mov	r3, r0
200039b8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
200039ba:	68bb      	ldr	r3, [r7, #8]
200039bc:	68f8      	ldr	r0, [r7, #12]
200039be:	4619      	mov	r1, r3
200039c0:	f000 f804 	bl	200039cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
200039c4:	f000 f8f4 	bl	20003bb0 <prvProcessReceivedCommands>
	}
200039c8:	e7f0      	b.n	200039ac <prvTimerTask+0x8>
200039ca:	bf00      	nop

200039cc <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
200039cc:	b580      	push	{r7, lr}
200039ce:	b084      	sub	sp, #16
200039d0:	af00      	add	r7, sp, #0
200039d2:	6078      	str	r0, [r7, #4]
200039d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
200039d6:	f7fe fdf3 	bl	200025c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
200039da:	f107 0308 	add.w	r3, r7, #8
200039de:	4618      	mov	r0, r3
200039e0:	f000 f872 	bl	20003ac8 <prvSampleTimeNow>
200039e4:	4603      	mov	r3, r0
200039e6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
200039e8:	68bb      	ldr	r3, [r7, #8]
200039ea:	2b00      	cmp	r3, #0
200039ec:	d13b      	bne.n	20003a66 <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
200039ee:	683b      	ldr	r3, [r7, #0]
200039f0:	2b00      	cmp	r3, #0
200039f2:	d10b      	bne.n	20003a0c <prvProcessTimerOrBlockTask+0x40>
200039f4:	687a      	ldr	r2, [r7, #4]
200039f6:	68fb      	ldr	r3, [r7, #12]
200039f8:	429a      	cmp	r2, r3
200039fa:	d807      	bhi.n	20003a0c <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
200039fc:	f7fe fdf2 	bl	200025e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
20003a00:	6878      	ldr	r0, [r7, #4]
20003a02:	68f9      	ldr	r1, [r7, #12]
20003a04:	f7ff ff88 	bl	20003918 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003a08:	bf00      	nop
20003a0a:	e030      	b.n	20003a6e <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
20003a0c:	683b      	ldr	r3, [r7, #0]
20003a0e:	2b00      	cmp	r3, #0
20003a10:	d00a      	beq.n	20003a28 <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
20003a12:	f647 2324 	movw	r3, #31268	; 0x7a24
20003a16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a1a:	681b      	ldr	r3, [r3, #0]
20003a1c:	681b      	ldr	r3, [r3, #0]
20003a1e:	2b00      	cmp	r3, #0
20003a20:	bf14      	ite	ne
20003a22:	2300      	movne	r3, #0
20003a24:	2301      	moveq	r3, #1
20003a26:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
20003a28:	f647 2328 	movw	r3, #31272	; 0x7a28
20003a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a30:	681a      	ldr	r2, [r3, #0]
20003a32:	6879      	ldr	r1, [r7, #4]
20003a34:	68fb      	ldr	r3, [r7, #12]
20003a36:	ebc3 0301 	rsb	r3, r3, r1
20003a3a:	4610      	mov	r0, r2
20003a3c:	4619      	mov	r1, r3
20003a3e:	683a      	ldr	r2, [r7, #0]
20003a40:	f7fe fab0 	bl	20001fa4 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
20003a44:	f7fe fdce 	bl	200025e4 <xTaskResumeAll>
20003a48:	4603      	mov	r3, r0
20003a4a:	2b00      	cmp	r3, #0
20003a4c:	d10e      	bne.n	20003a6c <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003a4e:	f64e 5304 	movw	r3, #60676	; 0xed04
20003a52:	f2ce 0300 	movt	r3, #57344	; 0xe000
20003a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003a5a:	601a      	str	r2, [r3, #0]
20003a5c:	f3bf 8f4f 	dsb	sy
20003a60:	f3bf 8f6f 	isb	sy
20003a64:	e003      	b.n	20003a6e <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
20003a66:	f7fe fdbd 	bl	200025e4 <xTaskResumeAll>
20003a6a:	e000      	b.n	20003a6e <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
20003a6c:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
20003a6e:	f107 0710 	add.w	r7, r7, #16
20003a72:	46bd      	mov	sp, r7
20003a74:	bd80      	pop	{r7, pc}
20003a76:	bf00      	nop

20003a78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
20003a78:	b480      	push	{r7}
20003a7a:	b085      	sub	sp, #20
20003a7c:	af00      	add	r7, sp, #0
20003a7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
20003a80:	f647 2320 	movw	r3, #31264	; 0x7a20
20003a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a88:	681b      	ldr	r3, [r3, #0]
20003a8a:	681b      	ldr	r3, [r3, #0]
20003a8c:	2b00      	cmp	r3, #0
20003a8e:	bf14      	ite	ne
20003a90:	2200      	movne	r2, #0
20003a92:	2201      	moveq	r2, #1
20003a94:	687b      	ldr	r3, [r7, #4]
20003a96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20003a98:	687b      	ldr	r3, [r7, #4]
20003a9a:	681b      	ldr	r3, [r3, #0]
20003a9c:	2b00      	cmp	r3, #0
20003a9e:	d108      	bne.n	20003ab2 <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003aa0:	f647 2320 	movw	r3, #31264	; 0x7a20
20003aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003aa8:	681b      	ldr	r3, [r3, #0]
20003aaa:	68db      	ldr	r3, [r3, #12]
20003aac:	681b      	ldr	r3, [r3, #0]
20003aae:	60fb      	str	r3, [r7, #12]
20003ab0:	e002      	b.n	20003ab8 <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003ab2:	f04f 0300 	mov.w	r3, #0
20003ab6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
20003ab8:	68fb      	ldr	r3, [r7, #12]
}
20003aba:	4618      	mov	r0, r3
20003abc:	f107 0714 	add.w	r7, r7, #20
20003ac0:	46bd      	mov	sp, r7
20003ac2:	bc80      	pop	{r7}
20003ac4:	4770      	bx	lr
20003ac6:	bf00      	nop

20003ac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003ac8:	b580      	push	{r7, lr}
20003aca:	b084      	sub	sp, #16
20003acc:	af00      	add	r7, sp, #0
20003ace:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003ad0:	f7fe fe58 	bl	20002784 <xTaskGetTickCount>
20003ad4:	4603      	mov	r3, r0
20003ad6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
20003ad8:	f647 2330 	movw	r3, #31280	; 0x7a30
20003adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ae0:	681b      	ldr	r3, [r3, #0]
20003ae2:	68fa      	ldr	r2, [r7, #12]
20003ae4:	429a      	cmp	r2, r3
20003ae6:	d206      	bcs.n	20003af6 <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
20003ae8:	f000 f924 	bl	20003d34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
20003aec:	687b      	ldr	r3, [r7, #4]
20003aee:	f04f 0201 	mov.w	r2, #1
20003af2:	601a      	str	r2, [r3, #0]
20003af4:	e003      	b.n	20003afe <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
20003af6:	687b      	ldr	r3, [r7, #4]
20003af8:	f04f 0200 	mov.w	r2, #0
20003afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
20003afe:	f647 2330 	movw	r3, #31280	; 0x7a30
20003b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b06:	68fa      	ldr	r2, [r7, #12]
20003b08:	601a      	str	r2, [r3, #0]

	return xTimeNow;
20003b0a:	68fb      	ldr	r3, [r7, #12]
}
20003b0c:	4618      	mov	r0, r3
20003b0e:	f107 0710 	add.w	r7, r7, #16
20003b12:	46bd      	mov	sp, r7
20003b14:	bd80      	pop	{r7, pc}
20003b16:	bf00      	nop

20003b18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20003b18:	b580      	push	{r7, lr}
20003b1a:	b086      	sub	sp, #24
20003b1c:	af00      	add	r7, sp, #0
20003b1e:	60f8      	str	r0, [r7, #12]
20003b20:	60b9      	str	r1, [r7, #8]
20003b22:	607a      	str	r2, [r7, #4]
20003b24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
20003b26:	f04f 0300 	mov.w	r3, #0
20003b2a:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20003b2c:	68fb      	ldr	r3, [r7, #12]
20003b2e:	68ba      	ldr	r2, [r7, #8]
20003b30:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003b32:	68fb      	ldr	r3, [r7, #12]
20003b34:	68fa      	ldr	r2, [r7, #12]
20003b36:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
20003b38:	68ba      	ldr	r2, [r7, #8]
20003b3a:	687b      	ldr	r3, [r7, #4]
20003b3c:	429a      	cmp	r2, r3
20003b3e:	d818      	bhi.n	20003b72 <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003b40:	687a      	ldr	r2, [r7, #4]
20003b42:	683b      	ldr	r3, [r7, #0]
20003b44:	ebc3 0202 	rsb	r2, r3, r2
20003b48:	68fb      	ldr	r3, [r7, #12]
20003b4a:	699b      	ldr	r3, [r3, #24]
20003b4c:	429a      	cmp	r2, r3
20003b4e:	d303      	bcc.n	20003b58 <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003b50:	f04f 0301 	mov.w	r3, #1
20003b54:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
20003b56:	e024      	b.n	20003ba2 <prvInsertTimerInActiveList+0x8a>
20003b58:	f647 2324 	movw	r3, #31268	; 0x7a24
20003b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b60:	681a      	ldr	r2, [r3, #0]
20003b62:	68fb      	ldr	r3, [r7, #12]
20003b64:	f103 0304 	add.w	r3, r3, #4
20003b68:	4610      	mov	r0, r2
20003b6a:	4619      	mov	r1, r3
20003b6c:	f7fd fc86 	bl	2000147c <vListInsert>
20003b70:	e017      	b.n	20003ba2 <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003b72:	687a      	ldr	r2, [r7, #4]
20003b74:	683b      	ldr	r3, [r7, #0]
20003b76:	429a      	cmp	r2, r3
20003b78:	d207      	bcs.n	20003b8a <prvInsertTimerInActiveList+0x72>
20003b7a:	68ba      	ldr	r2, [r7, #8]
20003b7c:	683b      	ldr	r3, [r7, #0]
20003b7e:	429a      	cmp	r2, r3
20003b80:	d303      	bcc.n	20003b8a <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
20003b82:	f04f 0301 	mov.w	r3, #1
20003b86:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20003b88:	e00b      	b.n	20003ba2 <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003b8a:	f647 2320 	movw	r3, #31264	; 0x7a20
20003b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b92:	681a      	ldr	r2, [r3, #0]
20003b94:	68fb      	ldr	r3, [r7, #12]
20003b96:	f103 0304 	add.w	r3, r3, #4
20003b9a:	4610      	mov	r0, r2
20003b9c:	4619      	mov	r1, r3
20003b9e:	f7fd fc6d 	bl	2000147c <vListInsert>
		}
	}

	return xProcessTimerNow;
20003ba2:	697b      	ldr	r3, [r7, #20]
}
20003ba4:	4618      	mov	r0, r3
20003ba6:	f107 0718 	add.w	r7, r7, #24
20003baa:	46bd      	mov	sp, r7
20003bac:	bd80      	pop	{r7, pc}
20003bae:	bf00      	nop

20003bb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20003bb0:	b580      	push	{r7, lr}
20003bb2:	b08e      	sub	sp, #56	; 0x38
20003bb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003bb6:	e0a5      	b.n	20003d04 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20003bb8:	687b      	ldr	r3, [r7, #4]
20003bba:	2b00      	cmp	r3, #0
20003bbc:	da1a      	bge.n	20003bf4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
20003bbe:	f107 0304 	add.w	r3, r7, #4
20003bc2:	f103 0304 	add.w	r3, r3, #4
20003bc6:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003bc8:	6a3b      	ldr	r3, [r7, #32]
20003bca:	2b00      	cmp	r3, #0
20003bcc:	d109      	bne.n	20003be2 <prvProcessReceivedCommands+0x32>
20003bce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003bd2:	f383 8811 	msr	BASEPRI, r3
20003bd6:	f3bf 8f6f 	isb	sy
20003bda:	f3bf 8f4f 	dsb	sy
20003bde:	627b      	str	r3, [r7, #36]	; 0x24
20003be0:	e7fe      	b.n	20003be0 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
20003be2:	6a3b      	ldr	r3, [r7, #32]
20003be4:	681b      	ldr	r3, [r3, #0]
20003be6:	6a3a      	ldr	r2, [r7, #32]
20003be8:	6851      	ldr	r1, [r2, #4]
20003bea:	6a3a      	ldr	r2, [r7, #32]
20003bec:	6892      	ldr	r2, [r2, #8]
20003bee:	4608      	mov	r0, r1
20003bf0:	4611      	mov	r1, r2
20003bf2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
20003bf4:	687b      	ldr	r3, [r7, #4]
20003bf6:	2b00      	cmp	r3, #0
20003bf8:	f2c0 8084 	blt.w	20003d04 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
20003bfc:	68fb      	ldr	r3, [r7, #12]
20003bfe:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
20003c00:	697b      	ldr	r3, [r7, #20]
20003c02:	695b      	ldr	r3, [r3, #20]
20003c04:	2b00      	cmp	r3, #0
20003c06:	d005      	beq.n	20003c14 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003c08:	697b      	ldr	r3, [r7, #20]
20003c0a:	f103 0304 	add.w	r3, r3, #4
20003c0e:	4618      	mov	r0, r3
20003c10:	f7fd fc6e 	bl	200014f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003c14:	463b      	mov	r3, r7
20003c16:	4618      	mov	r0, r3
20003c18:	f7ff ff56 	bl	20003ac8 <prvSampleTimeNow>
20003c1c:	4603      	mov	r3, r0
20003c1e:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
20003c20:	687b      	ldr	r3, [r7, #4]
20003c22:	2b09      	cmp	r3, #9
20003c24:	d86e      	bhi.n	20003d04 <prvProcessReceivedCommands+0x154>
20003c26:	a201      	add	r2, pc, #4	; (adr r2, 20003c2c <prvProcessReceivedCommands+0x7c>)
20003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003c2c:	20003c55 	.word	0x20003c55
20003c30:	20003c55 	.word	0x20003c55
20003c34:	20003c55 	.word	0x20003c55
20003c38:	20003d05 	.word	0x20003d05
20003c3c:	20003cbb 	.word	0x20003cbb
20003c40:	20003cf3 	.word	0x20003cf3
20003c44:	20003c55 	.word	0x20003c55
20003c48:	20003c55 	.word	0x20003c55
20003c4c:	20003d05 	.word	0x20003d05
20003c50:	20003cbb 	.word	0x20003cbb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003c54:	68ba      	ldr	r2, [r7, #8]
20003c56:	697b      	ldr	r3, [r7, #20]
20003c58:	699b      	ldr	r3, [r3, #24]
20003c5a:	441a      	add	r2, r3
20003c5c:	68bb      	ldr	r3, [r7, #8]
20003c5e:	6978      	ldr	r0, [r7, #20]
20003c60:	4611      	mov	r1, r2
20003c62:	69fa      	ldr	r2, [r7, #28]
20003c64:	f7ff ff58 	bl	20003b18 <prvInsertTimerInActiveList>
20003c68:	4603      	mov	r3, r0
20003c6a:	2b00      	cmp	r3, #0
20003c6c:	d045      	beq.n	20003cfa <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003c6e:	697b      	ldr	r3, [r7, #20]
20003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003c72:	6978      	ldr	r0, [r7, #20]
20003c74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003c76:	697b      	ldr	r3, [r7, #20]
20003c78:	69db      	ldr	r3, [r3, #28]
20003c7a:	2b01      	cmp	r3, #1
20003c7c:	d13f      	bne.n	20003cfe <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
20003c7e:	68ba      	ldr	r2, [r7, #8]
20003c80:	697b      	ldr	r3, [r7, #20]
20003c82:	699b      	ldr	r3, [r3, #24]
20003c84:	4413      	add	r3, r2
20003c86:	f04f 0200 	mov.w	r2, #0
20003c8a:	9200      	str	r2, [sp, #0]
20003c8c:	6978      	ldr	r0, [r7, #20]
20003c8e:	f04f 0100 	mov.w	r1, #0
20003c92:	461a      	mov	r2, r3
20003c94:	f04f 0300 	mov.w	r3, #0
20003c98:	f7ff fdd8 	bl	2000384c <xTimerGenericCommand>
20003c9c:	4603      	mov	r3, r0
20003c9e:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
20003ca0:	69bb      	ldr	r3, [r7, #24]
20003ca2:	2b00      	cmp	r3, #0
20003ca4:	d12d      	bne.n	20003d02 <prvProcessReceivedCommands+0x152>
20003ca6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003caa:	f383 8811 	msr	BASEPRI, r3
20003cae:	f3bf 8f6f 	isb	sy
20003cb2:	f3bf 8f4f 	dsb	sy
20003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
20003cb8:	e7fe      	b.n	20003cb8 <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20003cba:	68ba      	ldr	r2, [r7, #8]
20003cbc:	697b      	ldr	r3, [r7, #20]
20003cbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003cc0:	697b      	ldr	r3, [r7, #20]
20003cc2:	699b      	ldr	r3, [r3, #24]
20003cc4:	2b00      	cmp	r3, #0
20003cc6:	d109      	bne.n	20003cdc <prvProcessReceivedCommands+0x12c>
20003cc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003ccc:	f383 8811 	msr	BASEPRI, r3
20003cd0:	f3bf 8f6f 	isb	sy
20003cd4:	f3bf 8f4f 	dsb	sy
20003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
20003cda:	e7fe      	b.n	20003cda <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
20003cdc:	697b      	ldr	r3, [r7, #20]
20003cde:	699a      	ldr	r2, [r3, #24]
20003ce0:	69fb      	ldr	r3, [r7, #28]
20003ce2:	4413      	add	r3, r2
20003ce4:	6978      	ldr	r0, [r7, #20]
20003ce6:	4619      	mov	r1, r3
20003ce8:	69fa      	ldr	r2, [r7, #28]
20003cea:	69fb      	ldr	r3, [r7, #28]
20003cec:	f7ff ff14 	bl	20003b18 <prvInsertTimerInActiveList>
					break;
20003cf0:	e008      	b.n	20003d04 <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
20003cf2:	6978      	ldr	r0, [r7, #20]
20003cf4:	f000 f9ee 	bl	200040d4 <vPortFree>
20003cf8:	e004      	b.n	20003d04 <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
20003cfa:	bf00      	nop
20003cfc:	e002      	b.n	20003d04 <prvProcessReceivedCommands+0x154>
20003cfe:	bf00      	nop
20003d00:	e000      	b.n	20003d04 <prvProcessReceivedCommands+0x154>
20003d02:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003d04:	f647 2328 	movw	r3, #31272	; 0x7a28
20003d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d0c:	681a      	ldr	r2, [r3, #0]
20003d0e:	f107 0304 	add.w	r3, r7, #4
20003d12:	4610      	mov	r0, r2
20003d14:	4619      	mov	r1, r3
20003d16:	f04f 0200 	mov.w	r2, #0
20003d1a:	f04f 0300 	mov.w	r3, #0
20003d1e:	f7fd fee1 	bl	20001ae4 <xQueueGenericReceive>
20003d22:	4603      	mov	r3, r0
20003d24:	2b00      	cmp	r3, #0
20003d26:	f47f af47 	bne.w	20003bb8 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
20003d2a:	f107 0730 	add.w	r7, r7, #48	; 0x30
20003d2e:	46bd      	mov	sp, r7
20003d30:	bd80      	pop	{r7, pc}
20003d32:	bf00      	nop

20003d34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003d34:	b580      	push	{r7, lr}
20003d36:	b088      	sub	sp, #32
20003d38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003d3a:	e053      	b.n	20003de4 <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003d3c:	f647 2320 	movw	r3, #31264	; 0x7a20
20003d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d44:	681b      	ldr	r3, [r3, #0]
20003d46:	68db      	ldr	r3, [r3, #12]
20003d48:	681b      	ldr	r3, [r3, #0]
20003d4a:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003d4c:	f647 2320 	movw	r3, #31264	; 0x7a20
20003d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d54:	681b      	ldr	r3, [r3, #0]
20003d56:	68db      	ldr	r3, [r3, #12]
20003d58:	68db      	ldr	r3, [r3, #12]
20003d5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003d5c:	68fb      	ldr	r3, [r7, #12]
20003d5e:	f103 0304 	add.w	r3, r3, #4
20003d62:	4618      	mov	r0, r3
20003d64:	f7fd fbc4 	bl	200014f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003d68:	68fb      	ldr	r3, [r7, #12]
20003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003d6c:	68f8      	ldr	r0, [r7, #12]
20003d6e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003d70:	68fb      	ldr	r3, [r7, #12]
20003d72:	69db      	ldr	r3, [r3, #28]
20003d74:	2b01      	cmp	r3, #1
20003d76:	d135      	bne.n	20003de4 <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003d78:	68fb      	ldr	r3, [r7, #12]
20003d7a:	699a      	ldr	r2, [r3, #24]
20003d7c:	683b      	ldr	r3, [r7, #0]
20003d7e:	4413      	add	r3, r2
20003d80:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
20003d82:	687a      	ldr	r2, [r7, #4]
20003d84:	683b      	ldr	r3, [r7, #0]
20003d86:	429a      	cmp	r2, r3
20003d88:	d912      	bls.n	20003db0 <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20003d8a:	68fb      	ldr	r3, [r7, #12]
20003d8c:	687a      	ldr	r2, [r7, #4]
20003d8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003d90:	68fb      	ldr	r3, [r7, #12]
20003d92:	68fa      	ldr	r2, [r7, #12]
20003d94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003d96:	f647 2320 	movw	r3, #31264	; 0x7a20
20003d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d9e:	681a      	ldr	r2, [r3, #0]
20003da0:	68fb      	ldr	r3, [r7, #12]
20003da2:	f103 0304 	add.w	r3, r3, #4
20003da6:	4610      	mov	r0, r2
20003da8:	4619      	mov	r1, r3
20003daa:	f7fd fb67 	bl	2000147c <vListInsert>
20003dae:	e019      	b.n	20003de4 <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003db0:	f04f 0300 	mov.w	r3, #0
20003db4:	9300      	str	r3, [sp, #0]
20003db6:	68f8      	ldr	r0, [r7, #12]
20003db8:	f04f 0100 	mov.w	r1, #0
20003dbc:	683a      	ldr	r2, [r7, #0]
20003dbe:	f04f 0300 	mov.w	r3, #0
20003dc2:	f7ff fd43 	bl	2000384c <xTimerGenericCommand>
20003dc6:	4603      	mov	r3, r0
20003dc8:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
20003dca:	693b      	ldr	r3, [r7, #16]
20003dcc:	2b00      	cmp	r3, #0
20003dce:	d109      	bne.n	20003de4 <prvSwitchTimerLists+0xb0>
20003dd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003dd4:	f383 8811 	msr	BASEPRI, r3
20003dd8:	f3bf 8f6f 	isb	sy
20003ddc:	f3bf 8f4f 	dsb	sy
20003de0:	617b      	str	r3, [r7, #20]
20003de2:	e7fe      	b.n	20003de2 <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003de4:	f647 2320 	movw	r3, #31264	; 0x7a20
20003de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003dec:	681b      	ldr	r3, [r3, #0]
20003dee:	681b      	ldr	r3, [r3, #0]
20003df0:	2b00      	cmp	r3, #0
20003df2:	d1a3      	bne.n	20003d3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
20003df4:	f647 2320 	movw	r3, #31264	; 0x7a20
20003df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003dfc:	681b      	ldr	r3, [r3, #0]
20003dfe:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
20003e00:	f647 2324 	movw	r3, #31268	; 0x7a24
20003e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e08:	681a      	ldr	r2, [r3, #0]
20003e0a:	f647 2320 	movw	r3, #31264	; 0x7a20
20003e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e12:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
20003e14:	f647 2324 	movw	r3, #31268	; 0x7a24
20003e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e1c:	68ba      	ldr	r2, [r7, #8]
20003e1e:	601a      	str	r2, [r3, #0]
}
20003e20:	f107 0718 	add.w	r7, r7, #24
20003e24:	46bd      	mov	sp, r7
20003e26:	bd80      	pop	{r7, pc}

20003e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003e28:	b580      	push	{r7, lr}
20003e2a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003e2c:	f000 fba6 	bl	2000457c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
20003e30:	f647 2328 	movw	r3, #31272	; 0x7a28
20003e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e38:	681b      	ldr	r3, [r3, #0]
20003e3a:	2b00      	cmp	r3, #0
20003e3c:	d12b      	bne.n	20003e96 <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
20003e3e:	f647 10f8 	movw	r0, #31224	; 0x79f8
20003e42:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003e46:	f7fd fac3 	bl	200013d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003e4a:	f647 200c 	movw	r0, #31244	; 0x7a0c
20003e4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003e52:	f7fd fabd 	bl	200013d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003e56:	f647 2320 	movw	r3, #31264	; 0x7a20
20003e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e5e:	f647 12f8 	movw	r2, #31224	; 0x79f8
20003e62:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003e66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003e68:	f647 2324 	movw	r3, #31268	; 0x7a24
20003e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e70:	f647 220c 	movw	r2, #31244	; 0x7a0c
20003e74:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003e78:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
20003e7a:	f04f 0005 	mov.w	r0, #5
20003e7e:	f04f 0110 	mov.w	r1, #16
20003e82:	f04f 0200 	mov.w	r2, #0
20003e86:	f7fd fbd5 	bl	20001634 <xQueueGenericCreate>
20003e8a:	4602      	mov	r2, r0
20003e8c:	f647 2328 	movw	r3, #31272	; 0x7a28
20003e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e94:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003e96:	f000 fba9 	bl	200045ec <vPortExitCritical>
}
20003e9a:	bd80      	pop	{r7, pc}

20003e9c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
20003e9c:	b580      	push	{r7, lr}
20003e9e:	b086      	sub	sp, #24
20003ea0:	af00      	add	r7, sp, #0
20003ea2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
20003ea4:	687b      	ldr	r3, [r7, #4]
20003ea6:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
20003ea8:	687b      	ldr	r3, [r7, #4]
20003eaa:	2b00      	cmp	r3, #0
20003eac:	d109      	bne.n	20003ec2 <pvTimerGetTimerID+0x26>
20003eae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003eb2:	f383 8811 	msr	BASEPRI, r3
20003eb6:	f3bf 8f6f 	isb	sy
20003eba:	f3bf 8f4f 	dsb	sy
20003ebe:	617b      	str	r3, [r7, #20]
20003ec0:	e7fe      	b.n	20003ec0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
20003ec2:	f000 fb5b 	bl	2000457c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
20003ec6:	68fb      	ldr	r3, [r7, #12]
20003ec8:	6a1b      	ldr	r3, [r3, #32]
20003eca:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
20003ecc:	f000 fb8e 	bl	200045ec <vPortExitCritical>

	return pvReturn;
20003ed0:	693b      	ldr	r3, [r7, #16]
}
20003ed2:	4618      	mov	r0, r3
20003ed4:	f107 0718 	add.w	r7, r7, #24
20003ed8:	46bd      	mov	sp, r7
20003eda:	bd80      	pop	{r7, pc}

20003edc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003edc:	b580      	push	{r7, lr}
20003ede:	b08a      	sub	sp, #40	; 0x28
20003ee0:	af00      	add	r7, sp, #0
20003ee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003ee4:	f04f 0300 	mov.w	r3, #0
20003ee8:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
20003eea:	f7fe fb69 	bl	200025c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003eee:	f64d 33e4 	movw	r3, #56292	; 0xdbe4
20003ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ef6:	681b      	ldr	r3, [r3, #0]
20003ef8:	2b00      	cmp	r3, #0
20003efa:	d101      	bne.n	20003f00 <pvPortMalloc+0x24>
		{
			prvHeapInit();
20003efc:	f000 f956 	bl	200041ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003f00:	f64d 33f0 	movw	r3, #56304	; 0xdbf0
20003f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f08:	681a      	ldr	r2, [r3, #0]
20003f0a:	687b      	ldr	r3, [r7, #4]
20003f0c:	ea02 0303 	and.w	r3, r2, r3
20003f10:	2b00      	cmp	r3, #0
20003f12:	f040 80c2 	bne.w	2000409a <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003f16:	687b      	ldr	r3, [r7, #4]
20003f18:	2b00      	cmp	r3, #0
20003f1a:	d021      	beq.n	20003f60 <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
20003f1c:	f647 0320 	movw	r3, #30752	; 0x7820
20003f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f24:	681b      	ldr	r3, [r3, #0]
20003f26:	687a      	ldr	r2, [r7, #4]
20003f28:	4413      	add	r3, r2
20003f2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003f2c:	687b      	ldr	r3, [r7, #4]
20003f2e:	f003 0307 	and.w	r3, r3, #7
20003f32:	2b00      	cmp	r3, #0
20003f34:	d014      	beq.n	20003f60 <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
20003f36:	687b      	ldr	r3, [r7, #4]
20003f38:	f023 0307 	bic.w	r3, r3, #7
20003f3c:	f103 0308 	add.w	r3, r3, #8
20003f40:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003f42:	687b      	ldr	r3, [r7, #4]
20003f44:	f003 0307 	and.w	r3, r3, #7
20003f48:	2b00      	cmp	r3, #0
20003f4a:	d009      	beq.n	20003f60 <pvPortMalloc+0x84>
20003f4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f50:	f383 8811 	msr	BASEPRI, r3
20003f54:	f3bf 8f6f 	isb	sy
20003f58:	f3bf 8f4f 	dsb	sy
20003f5c:	61fb      	str	r3, [r7, #28]
20003f5e:	e7fe      	b.n	20003f5e <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
20003f60:	687b      	ldr	r3, [r7, #4]
20003f62:	2b00      	cmp	r3, #0
20003f64:	f000 8099 	beq.w	2000409a <pvPortMalloc+0x1be>
20003f68:	f64d 33e8 	movw	r3, #56296	; 0xdbe8
20003f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f70:	681b      	ldr	r3, [r3, #0]
20003f72:	687a      	ldr	r2, [r7, #4]
20003f74:	429a      	cmp	r2, r3
20003f76:	f200 8090 	bhi.w	2000409a <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003f7a:	f64d 33dc 	movw	r3, #56284	; 0xdbdc
20003f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f82:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
20003f84:	f64d 33dc 	movw	r3, #56284	; 0xdbdc
20003f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f8c:	681b      	ldr	r3, [r3, #0]
20003f8e:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003f90:	e004      	b.n	20003f9c <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
20003f92:	68fb      	ldr	r3, [r7, #12]
20003f94:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
20003f96:	68fb      	ldr	r3, [r7, #12]
20003f98:	681b      	ldr	r3, [r3, #0]
20003f9a:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003f9c:	68fb      	ldr	r3, [r7, #12]
20003f9e:	685a      	ldr	r2, [r3, #4]
20003fa0:	687b      	ldr	r3, [r7, #4]
20003fa2:	429a      	cmp	r2, r3
20003fa4:	d203      	bcs.n	20003fae <pvPortMalloc+0xd2>
20003fa6:	68fb      	ldr	r3, [r7, #12]
20003fa8:	681b      	ldr	r3, [r3, #0]
20003faa:	2b00      	cmp	r3, #0
20003fac:	d1f1      	bne.n	20003f92 <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
20003fae:	f64d 33e4 	movw	r3, #56292	; 0xdbe4
20003fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fb6:	681b      	ldr	r3, [r3, #0]
20003fb8:	68fa      	ldr	r2, [r7, #12]
20003fba:	429a      	cmp	r2, r3
20003fbc:	d06d      	beq.n	2000409a <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20003fbe:	693b      	ldr	r3, [r7, #16]
20003fc0:	681a      	ldr	r2, [r3, #0]
20003fc2:	f647 0320 	movw	r3, #30752	; 0x7820
20003fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fca:	681b      	ldr	r3, [r3, #0]
20003fcc:	4413      	add	r3, r2
20003fce:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20003fd0:	68fb      	ldr	r3, [r7, #12]
20003fd2:	681a      	ldr	r2, [r3, #0]
20003fd4:	693b      	ldr	r3, [r7, #16]
20003fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003fd8:	68fb      	ldr	r3, [r7, #12]
20003fda:	685a      	ldr	r2, [r3, #4]
20003fdc:	687b      	ldr	r3, [r7, #4]
20003fde:	ebc3 0202 	rsb	r2, r3, r2
20003fe2:	f647 0320 	movw	r3, #30752	; 0x7820
20003fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fea:	681b      	ldr	r3, [r3, #0]
20003fec:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003ff0:	429a      	cmp	r2, r3
20003ff2:	d91f      	bls.n	20004034 <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003ff4:	68fa      	ldr	r2, [r7, #12]
20003ff6:	687b      	ldr	r3, [r7, #4]
20003ff8:	4413      	add	r3, r2
20003ffa:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20003ffc:	697b      	ldr	r3, [r7, #20]
20003ffe:	f003 0307 	and.w	r3, r3, #7
20004002:	2b00      	cmp	r3, #0
20004004:	d009      	beq.n	2000401a <pvPortMalloc+0x13e>
20004006:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000400a:	f383 8811 	msr	BASEPRI, r3
2000400e:	f3bf 8f6f 	isb	sy
20004012:	f3bf 8f4f 	dsb	sy
20004016:	623b      	str	r3, [r7, #32]
20004018:	e7fe      	b.n	20004018 <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
2000401a:	68fb      	ldr	r3, [r7, #12]
2000401c:	685a      	ldr	r2, [r3, #4]
2000401e:	687b      	ldr	r3, [r7, #4]
20004020:	ebc3 0202 	rsb	r2, r3, r2
20004024:	697b      	ldr	r3, [r7, #20]
20004026:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
20004028:	68fb      	ldr	r3, [r7, #12]
2000402a:	687a      	ldr	r2, [r7, #4]
2000402c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
2000402e:	6978      	ldr	r0, [r7, #20]
20004030:	f000 f93e 	bl	200042b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20004034:	f64d 33e8 	movw	r3, #56296	; 0xdbe8
20004038:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000403c:	681a      	ldr	r2, [r3, #0]
2000403e:	68fb      	ldr	r3, [r7, #12]
20004040:	685b      	ldr	r3, [r3, #4]
20004042:	ebc3 0202 	rsb	r2, r3, r2
20004046:	f64d 33e8 	movw	r3, #56296	; 0xdbe8
2000404a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000404e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
20004050:	f64d 33e8 	movw	r3, #56296	; 0xdbe8
20004054:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004058:	681a      	ldr	r2, [r3, #0]
2000405a:	f64d 33ec 	movw	r3, #56300	; 0xdbec
2000405e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004062:	681b      	ldr	r3, [r3, #0]
20004064:	429a      	cmp	r2, r3
20004066:	d209      	bcs.n	2000407c <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
20004068:	f64d 33e8 	movw	r3, #56296	; 0xdbe8
2000406c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004070:	681a      	ldr	r2, [r3, #0]
20004072:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20004076:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000407a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
2000407c:	68fb      	ldr	r3, [r7, #12]
2000407e:	685a      	ldr	r2, [r3, #4]
20004080:	f64d 33f0 	movw	r3, #56304	; 0xdbf0
20004084:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004088:	681b      	ldr	r3, [r3, #0]
2000408a:	ea42 0203 	orr.w	r2, r2, r3
2000408e:	68fb      	ldr	r3, [r7, #12]
20004090:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20004092:	68fb      	ldr	r3, [r7, #12]
20004094:	f04f 0200 	mov.w	r2, #0
20004098:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
2000409a:	f7fe faa3 	bl	200025e4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
2000409e:	69bb      	ldr	r3, [r7, #24]
200040a0:	2b00      	cmp	r3, #0
200040a2:	d101      	bne.n	200040a8 <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
200040a4:	f7fc f9ba 	bl	2000041c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
200040a8:	69bb      	ldr	r3, [r7, #24]
200040aa:	f003 0307 	and.w	r3, r3, #7
200040ae:	2b00      	cmp	r3, #0
200040b0:	d009      	beq.n	200040c6 <pvPortMalloc+0x1ea>
200040b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200040b6:	f383 8811 	msr	BASEPRI, r3
200040ba:	f3bf 8f6f 	isb	sy
200040be:	f3bf 8f4f 	dsb	sy
200040c2:	627b      	str	r3, [r7, #36]	; 0x24
200040c4:	e7fe      	b.n	200040c4 <pvPortMalloc+0x1e8>
	return pvReturn;
200040c6:	69bb      	ldr	r3, [r7, #24]
}
200040c8:	4618      	mov	r0, r3
200040ca:	f107 0728 	add.w	r7, r7, #40	; 0x28
200040ce:	46bd      	mov	sp, r7
200040d0:	bd80      	pop	{r7, pc}
200040d2:	bf00      	nop

200040d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
200040d4:	b580      	push	{r7, lr}
200040d6:	b086      	sub	sp, #24
200040d8:	af00      	add	r7, sp, #0
200040da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
200040dc:	687b      	ldr	r3, [r7, #4]
200040de:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
200040e0:	687b      	ldr	r3, [r7, #4]
200040e2:	2b00      	cmp	r3, #0
200040e4:	d05e      	beq.n	200041a4 <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
200040e6:	f647 0320 	movw	r3, #30752	; 0x7820
200040ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040ee:	681b      	ldr	r3, [r3, #0]
200040f0:	f1c3 0300 	rsb	r3, r3, #0
200040f4:	68ba      	ldr	r2, [r7, #8]
200040f6:	4413      	add	r3, r2
200040f8:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
200040fa:	68bb      	ldr	r3, [r7, #8]
200040fc:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
200040fe:	68fb      	ldr	r3, [r7, #12]
20004100:	685a      	ldr	r2, [r3, #4]
20004102:	f64d 33f0 	movw	r3, #56304	; 0xdbf0
20004106:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000410a:	681b      	ldr	r3, [r3, #0]
2000410c:	ea02 0303 	and.w	r3, r2, r3
20004110:	2b00      	cmp	r3, #0
20004112:	d109      	bne.n	20004128 <vPortFree+0x54>
20004114:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004118:	f383 8811 	msr	BASEPRI, r3
2000411c:	f3bf 8f6f 	isb	sy
20004120:	f3bf 8f4f 	dsb	sy
20004124:	613b      	str	r3, [r7, #16]
20004126:	e7fe      	b.n	20004126 <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
20004128:	68fb      	ldr	r3, [r7, #12]
2000412a:	681b      	ldr	r3, [r3, #0]
2000412c:	2b00      	cmp	r3, #0
2000412e:	d009      	beq.n	20004144 <vPortFree+0x70>
20004130:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004134:	f383 8811 	msr	BASEPRI, r3
20004138:	f3bf 8f6f 	isb	sy
2000413c:	f3bf 8f4f 	dsb	sy
20004140:	617b      	str	r3, [r7, #20]
20004142:	e7fe      	b.n	20004142 <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20004144:	68fb      	ldr	r3, [r7, #12]
20004146:	685a      	ldr	r2, [r3, #4]
20004148:	f64d 33f0 	movw	r3, #56304	; 0xdbf0
2000414c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004150:	681b      	ldr	r3, [r3, #0]
20004152:	ea02 0303 	and.w	r3, r2, r3
20004156:	2b00      	cmp	r3, #0
20004158:	d024      	beq.n	200041a4 <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
2000415a:	68fb      	ldr	r3, [r7, #12]
2000415c:	681b      	ldr	r3, [r3, #0]
2000415e:	2b00      	cmp	r3, #0
20004160:	d120      	bne.n	200041a4 <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20004162:	68fb      	ldr	r3, [r7, #12]
20004164:	685a      	ldr	r2, [r3, #4]
20004166:	f64d 33f0 	movw	r3, #56304	; 0xdbf0
2000416a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000416e:	681b      	ldr	r3, [r3, #0]
20004170:	ea6f 0303 	mvn.w	r3, r3
20004174:	ea02 0203 	and.w	r2, r2, r3
20004178:	68fb      	ldr	r3, [r7, #12]
2000417a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
2000417c:	f7fe fa20 	bl	200025c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20004180:	68fb      	ldr	r3, [r7, #12]
20004182:	685a      	ldr	r2, [r3, #4]
20004184:	f64d 33e8 	movw	r3, #56296	; 0xdbe8
20004188:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000418c:	681b      	ldr	r3, [r3, #0]
2000418e:	441a      	add	r2, r3
20004190:	f64d 33e8 	movw	r3, #56296	; 0xdbe8
20004194:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004198:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
2000419a:	68f8      	ldr	r0, [r7, #12]
2000419c:	f000 f888 	bl	200042b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
200041a0:	f7fe fa20 	bl	200025e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
200041a4:	f107 0718 	add.w	r7, r7, #24
200041a8:	46bd      	mov	sp, r7
200041aa:	bd80      	pop	{r7, pc}

200041ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
200041ac:	b480      	push	{r7}
200041ae:	b085      	sub	sp, #20
200041b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
200041b2:	f246 13a8 	movw	r3, #25000	; 0x61a8
200041b6:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
200041b8:	f647 2334 	movw	r3, #31284	; 0x7a34
200041bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041c0:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
200041c2:	68bb      	ldr	r3, [r7, #8]
200041c4:	f003 0307 	and.w	r3, r3, #7
200041c8:	2b00      	cmp	r3, #0
200041ca:	d011      	beq.n	200041f0 <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
200041cc:	68bb      	ldr	r3, [r7, #8]
200041ce:	f103 0307 	add.w	r3, r3, #7
200041d2:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
200041d4:	68bb      	ldr	r3, [r7, #8]
200041d6:	f023 0307 	bic.w	r3, r3, #7
200041da:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
200041dc:	68fa      	ldr	r2, [r7, #12]
200041de:	68bb      	ldr	r3, [r7, #8]
200041e0:	ebc3 0202 	rsb	r2, r3, r2
200041e4:	f647 2334 	movw	r3, #31284	; 0x7a34
200041e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041ec:	4413      	add	r3, r2
200041ee:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
200041f0:	68bb      	ldr	r3, [r7, #8]
200041f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
200041f4:	687a      	ldr	r2, [r7, #4]
200041f6:	f64d 33dc 	movw	r3, #56284	; 0xdbdc
200041fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041fe:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
20004200:	f64d 33dc 	movw	r3, #56284	; 0xdbdc
20004204:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004208:	f04f 0200 	mov.w	r2, #0
2000420c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
2000420e:	687a      	ldr	r2, [r7, #4]
20004210:	68fb      	ldr	r3, [r7, #12]
20004212:	4413      	add	r3, r2
20004214:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
20004216:	f647 0320 	movw	r3, #30752	; 0x7820
2000421a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000421e:	681b      	ldr	r3, [r3, #0]
20004220:	68ba      	ldr	r2, [r7, #8]
20004222:	ebc3 0302 	rsb	r3, r3, r2
20004226:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20004228:	68bb      	ldr	r3, [r7, #8]
2000422a:	f023 0307 	bic.w	r3, r3, #7
2000422e:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
20004230:	68ba      	ldr	r2, [r7, #8]
20004232:	f64d 33e4 	movw	r3, #56292	; 0xdbe4
20004236:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000423a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
2000423c:	f64d 33e4 	movw	r3, #56292	; 0xdbe4
20004240:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004244:	681b      	ldr	r3, [r3, #0]
20004246:	f04f 0200 	mov.w	r2, #0
2000424a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
2000424c:	f64d 33e4 	movw	r3, #56292	; 0xdbe4
20004250:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004254:	681b      	ldr	r3, [r3, #0]
20004256:	f04f 0200 	mov.w	r2, #0
2000425a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
2000425c:	687b      	ldr	r3, [r7, #4]
2000425e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
20004260:	683b      	ldr	r3, [r7, #0]
20004262:	68ba      	ldr	r2, [r7, #8]
20004264:	ebc3 0202 	rsb	r2, r3, r2
20004268:	683b      	ldr	r3, [r7, #0]
2000426a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
2000426c:	f64d 33e4 	movw	r3, #56292	; 0xdbe4
20004270:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004274:	681a      	ldr	r2, [r3, #0]
20004276:	683b      	ldr	r3, [r7, #0]
20004278:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
2000427a:	683b      	ldr	r3, [r7, #0]
2000427c:	685a      	ldr	r2, [r3, #4]
2000427e:	f64d 33ec 	movw	r3, #56300	; 0xdbec
20004282:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004286:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20004288:	683b      	ldr	r3, [r7, #0]
2000428a:	685a      	ldr	r2, [r3, #4]
2000428c:	f64d 33e8 	movw	r3, #56296	; 0xdbe8
20004290:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004294:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
20004296:	f64d 33f0 	movw	r3, #56304	; 0xdbf0
2000429a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000429e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
200042a2:	601a      	str	r2, [r3, #0]
}
200042a4:	f107 0714 	add.w	r7, r7, #20
200042a8:	46bd      	mov	sp, r7
200042aa:	bc80      	pop	{r7}
200042ac:	4770      	bx	lr
200042ae:	bf00      	nop

200042b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
200042b0:	b480      	push	{r7}
200042b2:	b085      	sub	sp, #20
200042b4:	af00      	add	r7, sp, #0
200042b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
200042b8:	f64d 33dc 	movw	r3, #56284	; 0xdbdc
200042bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042c0:	60bb      	str	r3, [r7, #8]
200042c2:	e002      	b.n	200042ca <prvInsertBlockIntoFreeList+0x1a>
200042c4:	68bb      	ldr	r3, [r7, #8]
200042c6:	681b      	ldr	r3, [r3, #0]
200042c8:	60bb      	str	r3, [r7, #8]
200042ca:	68bb      	ldr	r3, [r7, #8]
200042cc:	681a      	ldr	r2, [r3, #0]
200042ce:	687b      	ldr	r3, [r7, #4]
200042d0:	429a      	cmp	r2, r3
200042d2:	d3f7      	bcc.n	200042c4 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
200042d4:	68bb      	ldr	r3, [r7, #8]
200042d6:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
200042d8:	68bb      	ldr	r3, [r7, #8]
200042da:	685a      	ldr	r2, [r3, #4]
200042dc:	68fb      	ldr	r3, [r7, #12]
200042de:	441a      	add	r2, r3
200042e0:	687b      	ldr	r3, [r7, #4]
200042e2:	429a      	cmp	r2, r3
200042e4:	d108      	bne.n	200042f8 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
200042e6:	68bb      	ldr	r3, [r7, #8]
200042e8:	685a      	ldr	r2, [r3, #4]
200042ea:	687b      	ldr	r3, [r7, #4]
200042ec:	685b      	ldr	r3, [r3, #4]
200042ee:	441a      	add	r2, r3
200042f0:	68bb      	ldr	r3, [r7, #8]
200042f2:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
200042f4:	68bb      	ldr	r3, [r7, #8]
200042f6:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
200042f8:	687b      	ldr	r3, [r7, #4]
200042fa:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
200042fc:	687b      	ldr	r3, [r7, #4]
200042fe:	685a      	ldr	r2, [r3, #4]
20004300:	68fb      	ldr	r3, [r7, #12]
20004302:	441a      	add	r2, r3
20004304:	68bb      	ldr	r3, [r7, #8]
20004306:	681b      	ldr	r3, [r3, #0]
20004308:	429a      	cmp	r2, r3
2000430a:	d11e      	bne.n	2000434a <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
2000430c:	68bb      	ldr	r3, [r7, #8]
2000430e:	681a      	ldr	r2, [r3, #0]
20004310:	f64d 33e4 	movw	r3, #56292	; 0xdbe4
20004314:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004318:	681b      	ldr	r3, [r3, #0]
2000431a:	429a      	cmp	r2, r3
2000431c:	d00d      	beq.n	2000433a <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
2000431e:	687b      	ldr	r3, [r7, #4]
20004320:	685a      	ldr	r2, [r3, #4]
20004322:	68bb      	ldr	r3, [r7, #8]
20004324:	681b      	ldr	r3, [r3, #0]
20004326:	685b      	ldr	r3, [r3, #4]
20004328:	441a      	add	r2, r3
2000432a:	687b      	ldr	r3, [r7, #4]
2000432c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
2000432e:	68bb      	ldr	r3, [r7, #8]
20004330:	681b      	ldr	r3, [r3, #0]
20004332:	681a      	ldr	r2, [r3, #0]
20004334:	687b      	ldr	r3, [r7, #4]
20004336:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
20004338:	e00b      	b.n	20004352 <prvInsertBlockIntoFreeList+0xa2>
2000433a:	f64d 33e4 	movw	r3, #56292	; 0xdbe4
2000433e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004342:	681a      	ldr	r2, [r3, #0]
20004344:	687b      	ldr	r3, [r7, #4]
20004346:	601a      	str	r2, [r3, #0]
20004348:	e003      	b.n	20004352 <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
2000434a:	68bb      	ldr	r3, [r7, #8]
2000434c:	681a      	ldr	r2, [r3, #0]
2000434e:	687b      	ldr	r3, [r7, #4]
20004350:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
20004352:	68ba      	ldr	r2, [r7, #8]
20004354:	687b      	ldr	r3, [r7, #4]
20004356:	429a      	cmp	r2, r3
20004358:	d002      	beq.n	20004360 <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
2000435a:	68bb      	ldr	r3, [r7, #8]
2000435c:	687a      	ldr	r2, [r7, #4]
2000435e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20004360:	f107 0714 	add.w	r7, r7, #20
20004364:	46bd      	mov	sp, r7
20004366:	bc80      	pop	{r7}
20004368:	4770      	bx	lr
2000436a:	bf00      	nop

2000436c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
2000436c:	b480      	push	{r7}
2000436e:	b085      	sub	sp, #20
20004370:	af00      	add	r7, sp, #0
20004372:	60f8      	str	r0, [r7, #12]
20004374:	60b9      	str	r1, [r7, #8]
20004376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
20004378:	68fb      	ldr	r3, [r7, #12]
2000437a:	f1a3 0304 	sub.w	r3, r3, #4
2000437e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20004380:	68fb      	ldr	r3, [r7, #12]
20004382:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20004386:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20004388:	68fb      	ldr	r3, [r7, #12]
2000438a:	f1a3 0304 	sub.w	r3, r3, #4
2000438e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20004390:	68bb      	ldr	r3, [r7, #8]
20004392:	f023 0201 	bic.w	r2, r3, #1
20004396:	68fb      	ldr	r3, [r7, #12]
20004398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
2000439a:	68fb      	ldr	r3, [r7, #12]
2000439c:	f1a3 0304 	sub.w	r3, r3, #4
200043a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
200043a2:	f244 33d5 	movw	r3, #17365	; 0x43d5
200043a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043aa:	68fa      	ldr	r2, [r7, #12]
200043ac:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
200043ae:	68fb      	ldr	r3, [r7, #12]
200043b0:	f1a3 0314 	sub.w	r3, r3, #20
200043b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
200043b6:	687a      	ldr	r2, [r7, #4]
200043b8:	68fb      	ldr	r3, [r7, #12]
200043ba:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
200043bc:	68fb      	ldr	r3, [r7, #12]
200043be:	f1a3 0320 	sub.w	r3, r3, #32
200043c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
200043c4:	68fb      	ldr	r3, [r7, #12]
}
200043c6:	4618      	mov	r0, r3
200043c8:	f107 0714 	add.w	r7, r7, #20
200043cc:	46bd      	mov	sp, r7
200043ce:	bc80      	pop	{r7}
200043d0:	4770      	bx	lr
200043d2:	bf00      	nop

200043d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
200043d4:	b480      	push	{r7}
200043d6:	b083      	sub	sp, #12
200043d8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
200043da:	f647 0384 	movw	r3, #30852	; 0x7884
200043de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043e2:	681b      	ldr	r3, [r3, #0]
200043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
200043e8:	d009      	beq.n	200043fe <prvTaskExitError+0x2a>
200043ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200043ee:	f383 8811 	msr	BASEPRI, r3
200043f2:	f3bf 8f6f 	isb	sy
200043f6:	f3bf 8f4f 	dsb	sy
200043fa:	603b      	str	r3, [r7, #0]
200043fc:	e7fe      	b.n	200043fc <prvTaskExitError+0x28>
200043fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004402:	f383 8811 	msr	BASEPRI, r3
20004406:	f3bf 8f6f 	isb	sy
2000440a:	f3bf 8f4f 	dsb	sy
2000440e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
20004410:	e7fe      	b.n	20004410 <prvTaskExitError+0x3c>
20004412:	bf00      	nop
	...

20004420 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20004420:	4b07      	ldr	r3, [pc, #28]	; (20004440 <pxCurrentTCBConst2>)
20004422:	6819      	ldr	r1, [r3, #0]
20004424:	6808      	ldr	r0, [r1, #0]
20004426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
2000442a:	f380 8809 	msr	PSP, r0
2000442e:	f3bf 8f6f 	isb	sy
20004432:	f04f 0000 	mov.w	r0, #0
20004436:	f380 8811 	msr	BASEPRI, r0
2000443a:	f04e 0e0d 	orr.w	lr, lr, #13
2000443e:	4770      	bx	lr

20004440 <pxCurrentTCBConst2>:
20004440:	200078ec 	.word	0x200078ec
20004444:	f3af 8000 	nop.w
20004448:	f3af 8000 	nop.w
2000444c:	f3af 8000 	nop.w

20004450 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
20004450:	4806      	ldr	r0, [pc, #24]	; (2000446c <prvPortStartFirstTask+0x1c>)
20004452:	6800      	ldr	r0, [r0, #0]
20004454:	6800      	ldr	r0, [r0, #0]
20004456:	f380 8808 	msr	MSP, r0
2000445a:	b662      	cpsie	i
2000445c:	b661      	cpsie	f
2000445e:	f3bf 8f4f 	dsb	sy
20004462:	f3bf 8f6f 	isb	sy
20004466:	df00      	svc	0
20004468:	bf00      	nop
2000446a:	0000      	.short	0x0000
2000446c:	e000ed08 	.word	0xe000ed08

20004470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20004470:	b580      	push	{r7, lr}
20004472:	b084      	sub	sp, #16
20004474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20004476:	f24e 4300 	movw	r3, #58368	; 0xe400
2000447a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000447e:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
20004480:	68fb      	ldr	r3, [r7, #12]
20004482:	781b      	ldrb	r3, [r3, #0]
20004484:	b2db      	uxtb	r3, r3
20004486:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20004488:	68fb      	ldr	r3, [r7, #12]
2000448a:	f04f 32ff 	mov.w	r2, #4294967295
2000448e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20004490:	68fb      	ldr	r3, [r7, #12]
20004492:	781b      	ldrb	r3, [r3, #0]
20004494:	b2db      	uxtb	r3, r3
20004496:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20004498:	79fb      	ldrb	r3, [r7, #7]
2000449a:	b2db      	uxtb	r3, r3
2000449c:	461a      	mov	r2, r3
2000449e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
200044a2:	f64d 33f4 	movw	r3, #56308	; 0xdbf4
200044a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044aa:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
200044ac:	f64d 33f8 	movw	r3, #56312	; 0xdbf8
200044b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044b4:	f04f 0207 	mov.w	r2, #7
200044b8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
200044ba:	e011      	b.n	200044e0 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
200044bc:	f64d 33f8 	movw	r3, #56312	; 0xdbf8
200044c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044c4:	681b      	ldr	r3, [r3, #0]
200044c6:	f103 32ff 	add.w	r2, r3, #4294967295
200044ca:	f64d 33f8 	movw	r3, #56312	; 0xdbf8
200044ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044d2:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
200044d4:	79fb      	ldrb	r3, [r7, #7]
200044d6:	b2db      	uxtb	r3, r3
200044d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
200044dc:	b2db      	uxtb	r3, r3
200044de:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
200044e0:	79fb      	ldrb	r3, [r7, #7]
200044e2:	b2db      	uxtb	r3, r3
200044e4:	b25b      	sxtb	r3, r3
200044e6:	2b00      	cmp	r3, #0
200044e8:	dbe8      	blt.n	200044bc <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
200044ea:	f64d 33f8 	movw	r3, #56312	; 0xdbf8
200044ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200044f2:	681b      	ldr	r3, [r3, #0]
200044f4:	ea4f 2203 	mov.w	r2, r3, lsl #8
200044f8:	f64d 33f8 	movw	r3, #56312	; 0xdbf8
200044fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004500:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20004502:	f64d 33f8 	movw	r3, #56312	; 0xdbf8
20004506:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000450a:	681b      	ldr	r3, [r3, #0]
2000450c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20004510:	f64d 33f8 	movw	r3, #56312	; 0xdbf8
20004514:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004518:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
2000451a:	68bb      	ldr	r3, [r7, #8]
2000451c:	b2da      	uxtb	r2, r3
2000451e:	68fb      	ldr	r3, [r7, #12]
20004520:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
20004522:	f64e 5320 	movw	r3, #60704	; 0xed20
20004526:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000452a:	f64e 5220 	movw	r2, #60704	; 0xed20
2000452e:	f2ce 0200 	movt	r2, #57344	; 0xe000
20004532:	6812      	ldr	r2, [r2, #0]
20004534:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
20004538:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
2000453a:	f64e 5320 	movw	r3, #60704	; 0xed20
2000453e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004542:	f64e 5220 	movw	r2, #60704	; 0xed20
20004546:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000454a:	6812      	ldr	r2, [r2, #0]
2000454c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
20004550:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
20004552:	f000 f8c7 	bl	200046e4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
20004556:	f647 0384 	movw	r3, #30852	; 0x7884
2000455a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000455e:	f04f 0200 	mov.w	r2, #0
20004562:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20004564:	f7ff ff74 	bl	20004450 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
20004568:	f7ff ff34 	bl	200043d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
2000456c:	f04f 0300 	mov.w	r3, #0
}
20004570:	4618      	mov	r0, r3
20004572:	f107 0710 	add.w	r7, r7, #16
20004576:	46bd      	mov	sp, r7
20004578:	bd80      	pop	{r7, pc}
2000457a:	bf00      	nop

2000457c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
2000457c:	b480      	push	{r7}
2000457e:	b083      	sub	sp, #12
20004580:	af00      	add	r7, sp, #0
20004582:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004586:	f383 8811 	msr	BASEPRI, r3
2000458a:	f3bf 8f6f 	isb	sy
2000458e:	f3bf 8f4f 	dsb	sy
20004592:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20004594:	f647 0384 	movw	r3, #30852	; 0x7884
20004598:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000459c:	681b      	ldr	r3, [r3, #0]
2000459e:	f103 0201 	add.w	r2, r3, #1
200045a2:	f647 0384 	movw	r3, #30852	; 0x7884
200045a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045aa:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
200045ac:	f647 0384 	movw	r3, #30852	; 0x7884
200045b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045b4:	681b      	ldr	r3, [r3, #0]
200045b6:	2b01      	cmp	r3, #1
200045b8:	d112      	bne.n	200045e0 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
200045ba:	f64e 5304 	movw	r3, #60676	; 0xed04
200045be:	f2ce 0300 	movt	r3, #57344	; 0xe000
200045c2:	681b      	ldr	r3, [r3, #0]
200045c4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
200045c8:	2b00      	cmp	r3, #0
200045ca:	d009      	beq.n	200045e0 <vPortEnterCritical+0x64>
200045cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200045d0:	f383 8811 	msr	BASEPRI, r3
200045d4:	f3bf 8f6f 	isb	sy
200045d8:	f3bf 8f4f 	dsb	sy
200045dc:	607b      	str	r3, [r7, #4]
200045de:	e7fe      	b.n	200045de <vPortEnterCritical+0x62>
	}
}
200045e0:	f107 070c 	add.w	r7, r7, #12
200045e4:	46bd      	mov	sp, r7
200045e6:	bc80      	pop	{r7}
200045e8:	4770      	bx	lr
200045ea:	bf00      	nop

200045ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
200045ec:	b480      	push	{r7}
200045ee:	b083      	sub	sp, #12
200045f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
200045f2:	f647 0384 	movw	r3, #30852	; 0x7884
200045f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045fa:	681b      	ldr	r3, [r3, #0]
200045fc:	2b00      	cmp	r3, #0
200045fe:	d109      	bne.n	20004614 <vPortExitCritical+0x28>
20004600:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004604:	f383 8811 	msr	BASEPRI, r3
20004608:	f3bf 8f6f 	isb	sy
2000460c:	f3bf 8f4f 	dsb	sy
20004610:	603b      	str	r3, [r7, #0]
20004612:	e7fe      	b.n	20004612 <vPortExitCritical+0x26>
	uxCriticalNesting--;
20004614:	f647 0384 	movw	r3, #30852	; 0x7884
20004618:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000461c:	681b      	ldr	r3, [r3, #0]
2000461e:	f103 32ff 	add.w	r2, r3, #4294967295
20004622:	f647 0384 	movw	r3, #30852	; 0x7884
20004626:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000462a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
2000462c:	f647 0384 	movw	r3, #30852	; 0x7884
20004630:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004634:	681b      	ldr	r3, [r3, #0]
20004636:	2b00      	cmp	r3, #0
20004638:	d105      	bne.n	20004646 <vPortExitCritical+0x5a>
2000463a:	f04f 0300 	mov.w	r3, #0
2000463e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20004640:	687b      	ldr	r3, [r7, #4]
20004642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
20004646:	f107 070c 	add.w	r7, r7, #12
2000464a:	46bd      	mov	sp, r7
2000464c:	bc80      	pop	{r7}
2000464e:	4770      	bx	lr

20004650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20004650:	f3ef 8009 	mrs	r0, PSP
20004654:	f3bf 8f6f 	isb	sy
20004658:	4b0d      	ldr	r3, [pc, #52]	; (20004690 <pxCurrentTCBConst>)
2000465a:	681a      	ldr	r2, [r3, #0]
2000465c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004660:	6010      	str	r0, [r2, #0]
20004662:	e92d 4008 	stmdb	sp!, {r3, lr}
20004666:	f04f 00a0 	mov.w	r0, #160	; 0xa0
2000466a:	f380 8811 	msr	BASEPRI, r0
2000466e:	f7fe f9a1 	bl	200029b4 <vTaskSwitchContext>
20004672:	f04f 0000 	mov.w	r0, #0
20004676:	f380 8811 	msr	BASEPRI, r0
2000467a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000467e:	6819      	ldr	r1, [r3, #0]
20004680:	6808      	ldr	r0, [r1, #0]
20004682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004686:	f380 8809 	msr	PSP, r0
2000468a:	f3bf 8f6f 	isb	sy
2000468e:	4770      	bx	lr

20004690 <pxCurrentTCBConst>:
20004690:	200078ec 	.word	0x200078ec
20004694:	f3af 8000 	nop.w
20004698:	f3af 8000 	nop.w
2000469c:	f3af 8000 	nop.w

200046a0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
200046a0:	b580      	push	{r7, lr}
200046a2:	b082      	sub	sp, #8
200046a4:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200046a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200046aa:	f383 8811 	msr	BASEPRI, r3
200046ae:	f3bf 8f6f 	isb	sy
200046b2:	f3bf 8f4f 	dsb	sy
200046b6:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
200046b8:	f7fe f874 	bl	200027a4 <xTaskIncrementTick>
200046bc:	4603      	mov	r3, r0
200046be:	2b00      	cmp	r3, #0
200046c0:	d006      	beq.n	200046d0 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
200046c2:	f64e 5304 	movw	r3, #60676	; 0xed04
200046c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200046ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200046ce:	601a      	str	r2, [r3, #0]
200046d0:	f04f 0300 	mov.w	r3, #0
200046d4:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200046d6:	687b      	ldr	r3, [r7, #4]
200046d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
200046dc:	f107 0708 	add.w	r7, r7, #8
200046e0:	46bd      	mov	sp, r7
200046e2:	bd80      	pop	{r7, pc}

200046e4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
200046e4:	b480      	push	{r7}
200046e6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
200046e8:	f24e 0314 	movw	r3, #57364	; 0xe014
200046ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
200046f0:	f647 02c4 	movw	r2, #30916	; 0x78c4
200046f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
200046f8:	6811      	ldr	r1, [r2, #0]
200046fa:	f644 52d3 	movw	r2, #19923	; 0x4dd3
200046fe:	f2c1 0262 	movt	r2, #4194	; 0x1062
20004702:	fba2 0201 	umull	r0, r2, r2, r1
20004706:	ea4f 1292 	mov.w	r2, r2, lsr #6
2000470a:	f102 32ff 	add.w	r2, r2, #4294967295
2000470e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20004710:	f24e 0310 	movw	r3, #57360	; 0xe010
20004714:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004718:	f04f 0207 	mov.w	r2, #7
2000471c:	601a      	str	r2, [r3, #0]
}
2000471e:	46bd      	mov	sp, r7
20004720:	bc80      	pop	{r7}
20004722:	4770      	bx	lr

20004724 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20004724:	b480      	push	{r7}
20004726:	b085      	sub	sp, #20
20004728:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
2000472a:	f3ef 8305 	mrs	r3, IPSR
2000472e:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
20004730:	683b      	ldr	r3, [r7, #0]
20004732:	2b0f      	cmp	r3, #15
20004734:	d91a      	bls.n	2000476c <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
20004736:	f647 0324 	movw	r3, #30756	; 0x7824
2000473a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000473e:	681a      	ldr	r2, [r3, #0]
20004740:	683b      	ldr	r3, [r7, #0]
20004742:	4413      	add	r3, r2
20004744:	781b      	ldrb	r3, [r3, #0]
20004746:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
20004748:	f64d 33f4 	movw	r3, #56308	; 0xdbf4
2000474c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004750:	781b      	ldrb	r3, [r3, #0]
20004752:	79fa      	ldrb	r2, [r7, #7]
20004754:	429a      	cmp	r2, r3
20004756:	d209      	bcs.n	2000476c <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20004758:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000475c:	f383 8811 	msr	BASEPRI, r3
20004760:	f3bf 8f6f 	isb	sy
20004764:	f3bf 8f4f 	dsb	sy
20004768:	60bb      	str	r3, [r7, #8]
2000476a:	e7fe      	b.n	2000476a <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
2000476c:	f64e 530c 	movw	r3, #60684	; 0xed0c
20004770:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004774:	681b      	ldr	r3, [r3, #0]
20004776:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
2000477a:	f64d 33f8 	movw	r3, #56312	; 0xdbf8
2000477e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004782:	681b      	ldr	r3, [r3, #0]
20004784:	429a      	cmp	r2, r3
20004786:	d909      	bls.n	2000479c <vPortValidateInterruptPriority+0x78>
20004788:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000478c:	f383 8811 	msr	BASEPRI, r3
20004790:	f3bf 8f6f 	isb	sy
20004794:	f3bf 8f4f 	dsb	sy
20004798:	60fb      	str	r3, [r7, #12]
2000479a:	e7fe      	b.n	2000479a <vPortValidateInterruptPriority+0x76>
	}
2000479c:	f107 0714 	add.w	r7, r7, #20
200047a0:	46bd      	mov	sp, r7
200047a2:	bc80      	pop	{r7}
200047a4:	4770      	bx	lr
200047a6:	bf00      	nop

200047a8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200047a8:	b480      	push	{r7}
200047aa:	b083      	sub	sp, #12
200047ac:	af00      	add	r7, sp, #0
200047ae:	4603      	mov	r3, r0
200047b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200047b2:	f24e 1300 	movw	r3, #57600	; 0xe100
200047b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200047ba:	f997 2007 	ldrsb.w	r2, [r7, #7]
200047be:	ea4f 1252 	mov.w	r2, r2, lsr #5
200047c2:	79f9      	ldrb	r1, [r7, #7]
200047c4:	f001 011f 	and.w	r1, r1, #31
200047c8:	f04f 0001 	mov.w	r0, #1
200047cc:	fa00 f101 	lsl.w	r1, r0, r1
200047d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200047d4:	f107 070c 	add.w	r7, r7, #12
200047d8:	46bd      	mov	sp, r7
200047da:	bc80      	pop	{r7}
200047dc:	4770      	bx	lr
200047de:	bf00      	nop

200047e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200047e0:	b480      	push	{r7}
200047e2:	b083      	sub	sp, #12
200047e4:	af00      	add	r7, sp, #0
200047e6:	4603      	mov	r3, r0
200047e8:	6039      	str	r1, [r7, #0]
200047ea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
200047ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
200047f0:	2b00      	cmp	r3, #0
200047f2:	da10      	bge.n	20004816 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
200047f4:	f64e 5300 	movw	r3, #60672	; 0xed00
200047f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
200047fc:	79fa      	ldrb	r2, [r7, #7]
200047fe:	f002 020f 	and.w	r2, r2, #15
20004802:	f1a2 0104 	sub.w	r1, r2, #4
20004806:	683a      	ldr	r2, [r7, #0]
20004808:	b2d2      	uxtb	r2, r2
2000480a:	ea4f 1202 	mov.w	r2, r2, lsl #4
2000480e:	b2d2      	uxtb	r2, r2
20004810:	440b      	add	r3, r1
20004812:	761a      	strb	r2, [r3, #24]
20004814:	e00d      	b.n	20004832 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
20004816:	f24e 1300 	movw	r3, #57600	; 0xe100
2000481a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000481e:	f997 1007 	ldrsb.w	r1, [r7, #7]
20004822:	683a      	ldr	r2, [r7, #0]
20004824:	b2d2      	uxtb	r2, r2
20004826:	ea4f 1202 	mov.w	r2, r2, lsl #4
2000482a:	b2d2      	uxtb	r2, r2
2000482c:	440b      	add	r3, r1
2000482e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
20004832:	f107 070c 	add.w	r7, r7, #12
20004836:	46bd      	mov	sp, r7
20004838:	bc80      	pop	{r7}
2000483a:	4770      	bx	lr

2000483c <get_hk_data>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void get_hk_data(void* d){
2000483c:	b590      	push	{r4, r7, lr}
2000483e:	b089      	sub	sp, #36	; 0x24
20004840:	af00      	add	r7, sp, #0
20004842:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(get_pld_pkt_handle);
20004844:	f24e 3370 	movw	r3, #58224	; 0xe370
20004848:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000484c:	681b      	ldr	r3, [r3, #0]
2000484e:	4618      	mov	r0, r3
20004850:	f7fd fd60 	bl	20002314 <uxTaskPriorityGet>
20004854:	4603      	mov	r3, r0
20004856:	61bb      	str	r3, [r7, #24]

	if(feed_get_hk_data != pdFAIL){
20004858:	f24e 338c 	movw	r3, #58252	; 0xe38c
2000485c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004860:	681b      	ldr	r3, [r3, #0]
20004862:	2b00      	cmp	r3, #0
20004864:	f000 81e8 	beq.w	20004c38 <get_hk_data+0x3fc>

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
20004868:	f04f 0300 	mov.w	r3, #0
2000486c:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
2000486e:	f04f 0300 	mov.w	r3, #0
20004872:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
20004874:	f64d 42e0 	movw	r2, #56544	; 0xdce0
20004878:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000487c:	f24e 3378 	movw	r3, #58232	; 0xe378
20004880:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004884:	601a      	str	r2, [r3, #0]


		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
20004886:	f107 0116 	add.w	r1, r7, #22
2000488a:	f107 0214 	add.w	r2, r7, #20
2000488e:	f107 0312 	add.w	r3, r7, #18
20004892:	4608      	mov	r0, r1
20004894:	4611      	mov	r1, r2
20004896:	461a      	mov	r2, r3
20004898:	f7fb fe0c 	bl	200004b4 <get_IMU_acc>
2000489c:	4603      	mov	r3, r0
2000489e:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
200048a0:	f107 010e 	add.w	r1, r7, #14
200048a4:	f107 020c 	add.w	r2, r7, #12
200048a8:	f107 030a 	add.w	r3, r7, #10
200048ac:	4608      	mov	r0, r1
200048ae:	4611      	mov	r1, r2
200048b0:	461a      	mov	r2, r3
200048b2:	f7fb ff95 	bl	200007e0 <get_IMU_gyro>
200048b6:	4603      	mov	r3, r0
200048b8:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;
			hk_pkt->cmd_cnt = command_cnt;
200048ba:	f24e 3378 	movw	r3, #58232	; 0xe378
200048be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048c2:	681a      	ldr	r2, [r3, #0]
200048c4:	f24e 3364 	movw	r3, #58212	; 0xe364
200048c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048cc:	881b      	ldrh	r3, [r3, #0]
200048ce:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200048d2:	f04f 0000 	mov.w	r0, #0
200048d6:	ea40 0101 	orr.w	r1, r0, r1
200048da:	7391      	strb	r1, [r2, #14]
200048dc:	ea4f 2313 	mov.w	r3, r3, lsr #8
200048e0:	b29b      	uxth	r3, r3
200048e2:	f04f 0100 	mov.w	r1, #0
200048e6:	ea41 0303 	orr.w	r3, r1, r3
200048ea:	73d3      	strb	r3, [r2, #15]
			hk_pkt->cmd_reject_cnt = command_reject_cnt;
200048ec:	f24e 3378 	movw	r3, #58232	; 0xe378
200048f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048f4:	681a      	ldr	r2, [r3, #0]
200048f6:	f24e 33a4 	movw	r3, #58276	; 0xe3a4
200048fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048fe:	881b      	ldrh	r3, [r3, #0]
20004900:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004904:	f04f 0000 	mov.w	r0, #0
20004908:	ea40 0101 	orr.w	r1, r0, r1
2000490c:	7411      	strb	r1, [r2, #16]
2000490e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004912:	b29b      	uxth	r3, r3
20004914:	f04f 0100 	mov.w	r1, #0
20004918:	ea41 0303 	orr.w	r3, r1, r3
2000491c:	7453      	strb	r3, [r2, #17]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
2000491e:	f24e 3378 	movw	r3, #58232	; 0xe378
20004922:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004926:	681b      	ldr	r3, [r3, #0]
20004928:	8afa      	ldrh	r2, [r7, #22]
2000492a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2000492e:	f04f 0000 	mov.w	r0, #0
20004932:	ea40 0101 	orr.w	r1, r0, r1
20004936:	7499      	strb	r1, [r3, #18]
20004938:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000493c:	b292      	uxth	r2, r2
2000493e:	f04f 0100 	mov.w	r1, #0
20004942:	ea41 0202 	orr.w	r2, r1, r2
20004946:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
20004948:	f24e 3378 	movw	r3, #58232	; 0xe378
2000494c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004950:	681b      	ldr	r3, [r3, #0]
20004952:	8aba      	ldrh	r2, [r7, #20]
20004954:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004958:	f04f 0000 	mov.w	r0, #0
2000495c:	ea40 0101 	orr.w	r1, r0, r1
20004960:	7519      	strb	r1, [r3, #20]
20004962:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004966:	b292      	uxth	r2, r2
20004968:	f04f 0100 	mov.w	r1, #0
2000496c:	ea41 0202 	orr.w	r2, r1, r2
20004970:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Acc[2] = ((az));
20004972:	f24e 3378 	movw	r3, #58232	; 0xe378
20004976:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000497a:	681b      	ldr	r3, [r3, #0]
2000497c:	8a7a      	ldrh	r2, [r7, #18]
2000497e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004982:	f04f 0000 	mov.w	r0, #0
20004986:	ea40 0101 	orr.w	r1, r0, r1
2000498a:	7599      	strb	r1, [r3, #22]
2000498c:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004990:	b292      	uxth	r2, r2
20004992:	f04f 0100 	mov.w	r1, #0
20004996:	ea41 0202 	orr.w	r2, r1, r2
2000499a:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
2000499c:	f24e 3378 	movw	r3, #58232	; 0xe378
200049a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049a4:	681b      	ldr	r3, [r3, #0]
200049a6:	89fa      	ldrh	r2, [r7, #14]
200049a8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200049ac:	f04f 0000 	mov.w	r0, #0
200049b0:	ea40 0101 	orr.w	r1, r0, r1
200049b4:	7619      	strb	r1, [r3, #24]
200049b6:	ea4f 2212 	mov.w	r2, r2, lsr #8
200049ba:	b292      	uxth	r2, r2
200049bc:	f04f 0100 	mov.w	r1, #0
200049c0:	ea41 0202 	orr.w	r2, r1, r2
200049c4:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
200049c6:	f24e 3378 	movw	r3, #58232	; 0xe378
200049ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049ce:	681b      	ldr	r3, [r3, #0]
200049d0:	89ba      	ldrh	r2, [r7, #12]
200049d2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200049d6:	f04f 0000 	mov.w	r0, #0
200049da:	ea40 0101 	orr.w	r1, r0, r1
200049de:	7699      	strb	r1, [r3, #26]
200049e0:	ea4f 2212 	mov.w	r2, r2, lsr #8
200049e4:	b292      	uxth	r2, r2
200049e6:	f04f 0100 	mov.w	r1, #0
200049ea:	ea41 0202 	orr.w	r2, r1, r2
200049ee:	76da      	strb	r2, [r3, #27]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
200049f0:	f24e 3378 	movw	r3, #58232	; 0xe378
200049f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049f8:	681b      	ldr	r3, [r3, #0]
200049fa:	897a      	ldrh	r2, [r7, #10]
200049fc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004a00:	f04f 0000 	mov.w	r0, #0
20004a04:	ea40 0101 	orr.w	r1, r0, r1
20004a08:	7719      	strb	r1, [r3, #28]
20004a0a:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a0e:	b292      	uxth	r2, r2
20004a10:	f04f 0100 	mov.w	r1, #0
20004a14:	ea41 0202 	orr.w	r2, r1, r2
20004a18:	775a      	strb	r2, [r3, #29]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
20004a1a:	f107 0308 	add.w	r3, r7, #8
20004a1e:	4618      	mov	r0, r3
20004a20:	f7fc f850 	bl	20000ac4 <get_IMU_temp>
20004a24:	4603      	mov	r3, r0
20004a26:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
20004a28:	f24e 3378 	movw	r3, #58232	; 0xe378
20004a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a30:	681b      	ldr	r3, [r3, #0]
20004a32:	893a      	ldrh	r2, [r7, #8]
20004a34:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004a38:	f04f 0000 	mov.w	r0, #0
20004a3c:	ea40 0101 	orr.w	r1, r0, r1
20004a40:	7799      	strb	r1, [r3, #30]
20004a42:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004a46:	b292      	uxth	r2, r2
20004a48:	f04f 0100 	mov.w	r1, #0
20004a4c:	ea41 0202 	orr.w	r2, r1, r2
20004a50:	77da      	strb	r2, [r3, #31]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
20004a52:	f24e 3378 	movw	r3, #58232	; 0xe378
20004a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a5a:	681c      	ldr	r4, [r3, #0]
20004a5c:	f107 0311 	add.w	r3, r7, #17
20004a60:	f04f 0040 	mov.w	r0, #64	; 0x40
20004a64:	f04f 0101 	mov.w	r1, #1
20004a68:	461a      	mov	r2, r3
20004a6a:	f7fc f95f 	bl	20000d2c <read_bus_voltage>
20004a6e:	4603      	mov	r3, r0
20004a70:	b29b      	uxth	r3, r3
20004a72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004a76:	f04f 0100 	mov.w	r1, #0
20004a7a:	ea41 0202 	orr.w	r2, r1, r2
20004a7e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
20004a82:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004a86:	b29b      	uxth	r3, r3
20004a88:	f04f 0200 	mov.w	r2, #0
20004a8c:	ea42 0303 	orr.w	r3, r2, r3
20004a90:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
20004a94:	7c7a      	ldrb	r2, [r7, #17]
20004a96:	7ffb      	ldrb	r3, [r7, #31]
20004a98:	4413      	add	r3, r2
20004a9a:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
20004a9c:	f24e 3378 	movw	r3, #58232	; 0xe378
20004aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004aa4:	681c      	ldr	r4, [r3, #0]
20004aa6:	f107 0311 	add.w	r3, r7, #17
20004aaa:	f04f 0040 	mov.w	r0, #64	; 0x40
20004aae:	f04f 0102 	mov.w	r1, #2
20004ab2:	461a      	mov	r2, r3
20004ab4:	f7fc f93a 	bl	20000d2c <read_bus_voltage>
20004ab8:	4603      	mov	r3, r0
20004aba:	b29b      	uxth	r3, r3
20004abc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004ac0:	f04f 0100 	mov.w	r1, #0
20004ac4:	ea41 0202 	orr.w	r2, r1, r2
20004ac8:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
20004acc:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004ad0:	b29b      	uxth	r3, r3
20004ad2:	f04f 0200 	mov.w	r2, #0
20004ad6:	ea42 0303 	orr.w	r3, r2, r3
20004ada:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
20004ade:	7c7a      	ldrb	r2, [r7, #17]
20004ae0:	7ffb      	ldrb	r3, [r7, #31]
20004ae2:	4413      	add	r3, r2
20004ae4:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
20004ae6:	f24e 3378 	movw	r3, #58232	; 0xe378
20004aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004aee:	681c      	ldr	r4, [r3, #0]
20004af0:	f107 0311 	add.w	r3, r7, #17
20004af4:	f04f 0040 	mov.w	r0, #64	; 0x40
20004af8:	f04f 0103 	mov.w	r1, #3
20004afc:	461a      	mov	r2, r3
20004afe:	f7fc f915 	bl	20000d2c <read_bus_voltage>
20004b02:	4603      	mov	r3, r0
20004b04:	b29b      	uxth	r3, r3
20004b06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b0a:	f04f 0100 	mov.w	r1, #0
20004b0e:	ea41 0202 	orr.w	r2, r1, r2
20004b12:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
20004b16:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004b1a:	b29b      	uxth	r3, r3
20004b1c:	f04f 0200 	mov.w	r2, #0
20004b20:	ea42 0303 	orr.w	r3, r2, r3
20004b24:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
20004b28:	7c7a      	ldrb	r2, [r7, #17]
20004b2a:	7ffb      	ldrb	r3, [r7, #31]
20004b2c:	4413      	add	r3, r2
20004b2e:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
20004b30:	f24e 3378 	movw	r3, #58232	; 0xe378
20004b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b38:	681c      	ldr	r4, [r3, #0]
20004b3a:	f107 0311 	add.w	r3, r7, #17
20004b3e:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b42:	f04f 0101 	mov.w	r1, #1
20004b46:	461a      	mov	r2, r3
20004b48:	f7fc f94e 	bl	20000de8 <read_shunt_voltage>
20004b4c:	4603      	mov	r3, r0
20004b4e:	b29b      	uxth	r3, r3
20004b50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b54:	f04f 0100 	mov.w	r1, #0
20004b58:	ea41 0202 	orr.w	r2, r1, r2
20004b5c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
20004b60:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004b64:	b29b      	uxth	r3, r3
20004b66:	f04f 0200 	mov.w	r2, #0
20004b6a:	ea42 0303 	orr.w	r3, r2, r3
20004b6e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
20004b72:	7c7a      	ldrb	r2, [r7, #17]
20004b74:	7ffb      	ldrb	r3, [r7, #31]
20004b76:	4413      	add	r3, r2
20004b78:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
20004b7a:	f24e 3378 	movw	r3, #58232	; 0xe378
20004b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b82:	681c      	ldr	r4, [r3, #0]
20004b84:	f107 0311 	add.w	r3, r7, #17
20004b88:	f04f 0040 	mov.w	r0, #64	; 0x40
20004b8c:	f04f 0102 	mov.w	r1, #2
20004b90:	461a      	mov	r2, r3
20004b92:	f7fc f929 	bl	20000de8 <read_shunt_voltage>
20004b96:	4603      	mov	r3, r0
20004b98:	b29b      	uxth	r3, r3
20004b9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004b9e:	f04f 0100 	mov.w	r1, #0
20004ba2:	ea41 0202 	orr.w	r2, r1, r2
20004ba6:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
20004baa:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004bae:	b29b      	uxth	r3, r3
20004bb0:	f04f 0200 	mov.w	r2, #0
20004bb4:	ea42 0303 	orr.w	r3, r2, r3
20004bb8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
20004bbc:	7c7a      	ldrb	r2, [r7, #17]
20004bbe:	7ffb      	ldrb	r3, [r7, #31]
20004bc0:	4413      	add	r3, r2
20004bc2:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
20004bc4:	f24e 3378 	movw	r3, #58232	; 0xe378
20004bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bcc:	681c      	ldr	r4, [r3, #0]
20004bce:	f107 0311 	add.w	r3, r7, #17
20004bd2:	f04f 0040 	mov.w	r0, #64	; 0x40
20004bd6:	f04f 0103 	mov.w	r1, #3
20004bda:	461a      	mov	r2, r3
20004bdc:	f7fc f904 	bl	20000de8 <read_shunt_voltage>
20004be0:	4603      	mov	r3, r0
20004be2:	b29b      	uxth	r3, r3
20004be4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004be8:	f04f 0100 	mov.w	r1, #0
20004bec:	ea41 0202 	orr.w	r2, r1, r2
20004bf0:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
20004bf4:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004bf8:	b29b      	uxth	r3, r3
20004bfa:	f04f 0200 	mov.w	r2, #0
20004bfe:	ea42 0303 	orr.w	r3, r2, r3
20004c02:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			loss_count+= flag;
20004c06:	7c7a      	ldrb	r2, [r7, #17]
20004c08:	7ffb      	ldrb	r3, [r7, #31]
20004c0a:	4413      	add	r3, r2
20004c0c:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
20004c0e:	f64d 43e0 	movw	r3, #56544	; 0xdce0
20004c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c16:	f04f 0201 	mov.w	r2, #1
20004c1a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(get_pld_pkt_handle, uxPriority + 1);
20004c1e:	f24e 3370 	movw	r3, #58224	; 0xe370
20004c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c26:	681a      	ldr	r2, [r3, #0]
20004c28:	69bb      	ldr	r3, [r7, #24]
20004c2a:	f103 0301 	add.w	r3, r3, #1
20004c2e:	4610      	mov	r0, r2
20004c30:	4619      	mov	r1, r3
20004c32:	f7fd fb8b 	bl	2000234c <vTaskPrioritySet>

		}
20004c36:	e626      	b.n	20004886 <get_hk_data+0x4a>
	}
}
20004c38:	f107 0724 	add.w	r7, r7, #36	; 0x24
20004c3c:	46bd      	mov	sp, r7
20004c3e:	bd90      	pop	{r4, r7, pc}

20004c40 <get_pld_data>:

void get_pld_data(void* d1){
20004c40:	b5b0      	push	{r4, r5, r7, lr}
20004c42:	b084      	sub	sp, #16
20004c44:	af00      	add	r7, sp, #0
20004c46:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(NULL);
20004c48:	f04f 0000 	mov.w	r0, #0
20004c4c:	f7fd fb62 	bl	20002314 <uxTaskPriorityGet>
20004c50:	4603      	mov	r3, r0
20004c52:	60bb      	str	r3, [r7, #8]

	if(feed_get_payload_data != pdFAIL){
20004c54:	f24e 3398 	movw	r3, #58264	; 0xe398
20004c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c5c:	681b      	ldr	r3, [r3, #0]
20004c5e:	2b00      	cmp	r3, #0
20004c60:	d04f      	beq.n	20004d02 <get_pld_data+0xc2>

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
20004c62:	f64d 4200 	movw	r2, #56320	; 0xdc00
20004c66:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004c6a:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
20004c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c72:	601a      	str	r2, [r3, #0]
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004c74:	f04f 0300 	mov.w	r3, #0
20004c78:	73fb      	strb	r3, [r7, #15]
20004c7a:	e02e      	b.n	20004cda <get_pld_data+0x9a>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
20004c7c:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
20004c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c84:	681c      	ldr	r4, [r3, #0]
20004c86:	7bfd      	ldrb	r5, [r7, #15]
20004c88:	7bbb      	ldrb	r3, [r7, #14]
20004c8a:	7bfa      	ldrb	r2, [r7, #15]
20004c8c:	f24e 20dc 	movw	r0, #58076	; 0xe2dc
20004c90:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004c94:	f04f 0121 	mov.w	r1, #33	; 0x21
20004c98:	f7fc f906 	bl	20000ea8 <get_ADC_value>
20004c9c:	4603      	mov	r3, r0
20004c9e:	4619      	mov	r1, r3
20004ca0:	f105 0204 	add.w	r2, r5, #4
20004ca4:	f001 00ff 	and.w	r0, r1, #255	; 0xff
20004ca8:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004cac:	4423      	add	r3, r4
20004cae:	f04f 0c00 	mov.w	ip, #0
20004cb2:	ea4c 0000 	orr.w	r0, ip, r0
20004cb6:	7198      	strb	r0, [r3, #6]
20004cb8:	ea4f 2311 	mov.w	r3, r1, lsr #8
20004cbc:	b298      	uxth	r0, r3
20004cbe:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004cc2:	4423      	add	r3, r4
20004cc4:	f04f 0200 	mov.w	r2, #0
20004cc8:	4611      	mov	r1, r2
20004cca:	4602      	mov	r2, r0
20004ccc:	ea41 0202 	orr.w	r2, r1, r2
20004cd0:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004cd2:	7bfb      	ldrb	r3, [r7, #15]
20004cd4:	f103 0301 	add.w	r3, r3, #1
20004cd8:	73fb      	strb	r3, [r7, #15]
20004cda:	7bfb      	ldrb	r3, [r7, #15]
20004cdc:	2b06      	cmp	r3, #6
20004cde:	d9cd      	bls.n	20004c7c <get_pld_data+0x3c>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
20004ce0:	f64d 4300 	movw	r3, #56320	; 0xdc00
20004ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ce8:	f04f 0202 	mov.w	r2, #2
20004cec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(NULL, uxPriority - 2);
20004cf0:	68bb      	ldr	r3, [r7, #8]
20004cf2:	f1a3 0302 	sub.w	r3, r3, #2
20004cf6:	f04f 0000 	mov.w	r0, #0
20004cfa:	4619      	mov	r1, r3
20004cfc:	f7fd fb26 	bl	2000234c <vTaskPrioritySet>

		}
20004d00:	e7b8      	b.n	20004c74 <get_pld_data+0x34>

	}
}
20004d02:	f107 0710 	add.w	r7, r7, #16
20004d06:	46bd      	mov	sp, r7
20004d08:	bdb0      	pop	{r4, r5, r7, pc}
20004d0a:	bf00      	nop

20004d0c <vGetPktStruct>:


void vGetPktStruct(pkt_name_t pktname, void* pktdata, uint8_t pktsize){
20004d0c:	b580      	push	{r7, lr}
20004d0e:	b088      	sub	sp, #32
20004d10:	af00      	add	r7, sp, #0
20004d12:	60b9      	str	r1, [r7, #8]
20004d14:	4613      	mov	r3, r2
20004d16:	4602      	mov	r2, r0
20004d18:	73fa      	strb	r2, [r7, #15]
20004d1a:	71fb      	strb	r3, [r7, #7]

	pkt_t pkt;

	pkt.pkt_type = pktname;
20004d1c:	7bfb      	ldrb	r3, [r7, #15]
20004d1e:	753b      	strb	r3, [r7, #20]
	pkt.pkt_data = pktdata;
20004d20:	68bb      	ldr	r3, [r7, #8]
20004d22:	61bb      	str	r3, [r7, #24]
	pkt.pkt_size = pktsize;
20004d24:	79fb      	ldrb	r3, [r7, #7]
20004d26:	773b      	strb	r3, [r7, #28]

//	xQueueSend(Data_PKT_Queue, &pkt, 0);

	// Storing the packets
	if(pkt_stream[pktname].rate != 0){
20004d28:	7bf9      	ldrb	r1, [r7, #15]
20004d2a:	f24e 02e4 	movw	r2, #57572	; 0xe0e4
20004d2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004d32:	460b      	mov	r3, r1
20004d34:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20004d38:	440b      	add	r3, r1
20004d3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
20004d3e:	4413      	add	r3, r2
20004d40:	f103 0310 	add.w	r3, r3, #16
20004d44:	881b      	ldrh	r3, [r3, #0]
20004d46:	2b00      	cmp	r3, #0
20004d48:	d011      	beq.n	20004d6e <vGetPktStruct+0x62>
		xQueueSend(Data_PKT_Queue, &pkt , 0);
20004d4a:	f24e 339c 	movw	r3, #58268	; 0xe39c
20004d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d52:	681a      	ldr	r2, [r3, #0]
20004d54:	f107 0314 	add.w	r3, r7, #20
20004d58:	4610      	mov	r0, r2
20004d5a:	4619      	mov	r1, r3
20004d5c:	f04f 0200 	mov.w	r2, #0
20004d60:	f04f 0300 	mov.w	r3, #0
20004d64:	f7fc fd04 	bl	20001770 <xQueueGenericSend>
		vtlm_sender();
20004d68:	f000 f926 	bl	20004fb8 <vtlm_sender>
20004d6c:	e00e      	b.n	20004d8c <vGetPktStruct+0x80>
	}
	else{
		xQueueSend(Store_PKT_Queue, &pkt, 0);
20004d6e:	f24e 3368 	movw	r3, #58216	; 0xe368
20004d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d76:	681a      	ldr	r2, [r3, #0]
20004d78:	f107 0314 	add.w	r3, r7, #20
20004d7c:	4610      	mov	r0, r2
20004d7e:	4619      	mov	r1, r3
20004d80:	f04f 0200 	mov.w	r2, #0
20004d84:	f04f 0300 	mov.w	r3, #0
20004d88:	f7fc fcf2 	bl	20001770 <xQueueGenericSend>
	}

}
20004d8c:	f107 0720 	add.w	r7, r7, #32
20004d90:	46bd      	mov	sp, r7
20004d92:	bd80      	pop	{r7, pc}

20004d94 <vtlm_task>:

void vtlm_task(TimerHandle_t exp_timer){
20004d94:	b580      	push	{r7, lr}
20004d96:	b084      	sub	sp, #16
20004d98:	af00      	add	r7, sp, #0
20004d9a:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;  // Try to generalised this timer callback function. Also combine the tlm_task and the tlm_sender task.
20004d9c:	f04f 0300 	mov.w	r3, #0
20004da0:	817b      	strh	r3, [r7, #10]
	uint16_t* t_id;
	t_id = (uint16_t* )pvTimerGetTimerID(exp_timer);
20004da2:	6878      	ldr	r0, [r7, #4]
20004da4:	f7ff f87a 	bl	20003e9c <pvTimerGetTimerID>
20004da8:	4603      	mov	r3, r0
20004daa:	60fb      	str	r3, [r7, #12]
//
//	if(pkt_stream->pkt_timer_id == pkt_stream->pkt.pkt_type){
//
//	}

	if(t_id == 0){
20004dac:	68fb      	ldr	r3, [r7, #12]
20004dae:	2b00      	cmp	r3, #0
20004db0:	d17d      	bne.n	20004eae <vtlm_task+0x11a>
		hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
20004db2:	f24e 3378 	movw	r3, #58232	; 0xe378
20004db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dba:	681b      	ldr	r3, [r3, #0]
20004dbc:	f04f 0200 	mov.w	r2, #0
20004dc0:	f042 0208 	orr.w	r2, r2, #8
20004dc4:	701a      	strb	r2, [r3, #0]
20004dc6:	f04f 0200 	mov.w	r2, #0
20004dca:	f042 0201 	orr.w	r2, r2, #1
20004dce:	705a      	strb	r2, [r3, #1]
		hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004dd0:	f24e 3378 	movw	r3, #58232	; 0xe378
20004dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004dd8:	681a      	ldr	r2, [r3, #0]
20004dda:	897b      	ldrh	r3, [r7, #10]
20004ddc:	f103 0301 	add.w	r3, r3, #1
20004de0:	817b      	strh	r3, [r7, #10]
20004de2:	897b      	ldrh	r3, [r7, #10]
20004de4:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004de8:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004dec:	b29b      	uxth	r3, r3
20004dee:	b29b      	uxth	r3, r3
20004df0:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004df4:	b299      	uxth	r1, r3
20004df6:	897b      	ldrh	r3, [r7, #10]
20004df8:	f103 0301 	add.w	r3, r3, #1
20004dfc:	817b      	strh	r3, [r7, #10]
20004dfe:	897b      	ldrh	r3, [r7, #10]
20004e00:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004e04:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004e08:	b29b      	uxth	r3, r3
20004e0a:	b29b      	uxth	r3, r3
20004e0c:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004e10:	b29b      	uxth	r3, r3
20004e12:	ea41 0303 	orr.w	r3, r1, r3
20004e16:	b29b      	uxth	r3, r3
20004e18:	b29b      	uxth	r3, r3
20004e1a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004e1e:	f04f 0000 	mov.w	r0, #0
20004e22:	ea40 0101 	orr.w	r1, r0, r1
20004e26:	7091      	strb	r1, [r2, #2]
20004e28:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004e2c:	b29b      	uxth	r3, r3
20004e2e:	f04f 0100 	mov.w	r1, #0
20004e32:	ea41 0303 	orr.w	r3, r1, r3
20004e36:	70d3      	strb	r3, [r2, #3]
		hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
20004e38:	f24e 3378 	movw	r3, #58232	; 0xe378
20004e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e40:	681b      	ldr	r3, [r3, #0]
20004e42:	f04f 0200 	mov.w	r2, #0
20004e46:	711a      	strb	r2, [r3, #4]
20004e48:	f04f 0200 	mov.w	r2, #0
20004e4c:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
20004e50:	715a      	strb	r2, [r3, #5]
		hk_pkt->ccsds_s1 = 0;
20004e52:	f24e 3378 	movw	r3, #58232	; 0xe378
20004e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e5a:	681b      	ldr	r3, [r3, #0]
20004e5c:	f04f 0200 	mov.w	r2, #0
20004e60:	719a      	strb	r2, [r3, #6]
20004e62:	f04f 0200 	mov.w	r2, #0
20004e66:	71da      	strb	r2, [r3, #7]
20004e68:	f04f 0200 	mov.w	r2, #0
20004e6c:	721a      	strb	r2, [r3, #8]
20004e6e:	f04f 0200 	mov.w	r2, #0
20004e72:	725a      	strb	r2, [r3, #9]
		hk_pkt->ccsds_s2 = 0;
20004e74:	f24e 3378 	movw	r3, #58232	; 0xe378
20004e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e7c:	681b      	ldr	r3, [r3, #0]
20004e7e:	f04f 0200 	mov.w	r2, #0
20004e82:	729a      	strb	r2, [r3, #10]
20004e84:	f04f 0200 	mov.w	r2, #0
20004e88:	72da      	strb	r2, [r3, #11]
20004e8a:	f04f 0200 	mov.w	r2, #0
20004e8e:	731a      	strb	r2, [r3, #12]
20004e90:	f04f 0200 	mov.w	r2, #0
20004e94:	735a      	strb	r2, [r3, #13]

		vGetPktStruct( hk, (void*) hk_pkt, HK_PKT_LENGTH);
20004e96:	f24e 3378 	movw	r3, #58232	; 0xe378
20004e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e9e:	681b      	ldr	r3, [r3, #0]
20004ea0:	f04f 0000 	mov.w	r0, #0
20004ea4:	4619      	mov	r1, r3
20004ea6:	f04f 022e 	mov.w	r2, #46	; 0x2e
20004eaa:	f7ff ff2f 	bl	20004d0c <vGetPktStruct>
	}
	if(t_id == 1){
20004eae:	68fb      	ldr	r3, [r7, #12]
20004eb0:	2b01      	cmp	r3, #1
20004eb2:	d17d      	bne.n	20004fb0 <vtlm_task+0x21c>
		pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
20004eb4:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
20004eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ebc:	681b      	ldr	r3, [r3, #0]
20004ebe:	f04f 0200 	mov.w	r2, #0
20004ec2:	f042 0208 	orr.w	r2, r2, #8
20004ec6:	701a      	strb	r2, [r3, #0]
20004ec8:	f04f 0200 	mov.w	r2, #0
20004ecc:	f042 0202 	orr.w	r2, r2, #2
20004ed0:	705a      	strb	r2, [r3, #1]
		pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004ed2:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
20004ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004eda:	681a      	ldr	r2, [r3, #0]
20004edc:	897b      	ldrh	r3, [r7, #10]
20004ede:	f103 0301 	add.w	r3, r3, #1
20004ee2:	817b      	strh	r3, [r7, #10]
20004ee4:	897b      	ldrh	r3, [r7, #10]
20004ee6:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004eea:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004eee:	b29b      	uxth	r3, r3
20004ef0:	b29b      	uxth	r3, r3
20004ef2:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004ef6:	b299      	uxth	r1, r3
20004ef8:	897b      	ldrh	r3, [r7, #10]
20004efa:	f103 0301 	add.w	r3, r3, #1
20004efe:	817b      	strh	r3, [r7, #10]
20004f00:	897b      	ldrh	r3, [r7, #10]
20004f02:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004f06:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004f0a:	b29b      	uxth	r3, r3
20004f0c:	b29b      	uxth	r3, r3
20004f0e:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004f12:	b29b      	uxth	r3, r3
20004f14:	ea41 0303 	orr.w	r3, r1, r3
20004f18:	b29b      	uxth	r3, r3
20004f1a:	b29b      	uxth	r3, r3
20004f1c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004f20:	f04f 0000 	mov.w	r0, #0
20004f24:	ea40 0101 	orr.w	r1, r0, r1
20004f28:	7091      	strb	r1, [r2, #2]
20004f2a:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004f2e:	b29b      	uxth	r3, r3
20004f30:	f04f 0100 	mov.w	r1, #0
20004f34:	ea41 0303 	orr.w	r3, r1, r3
20004f38:	70d3      	strb	r3, [r2, #3]
		pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
20004f3a:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
20004f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f42:	681b      	ldr	r3, [r3, #0]
20004f44:	f04f 0200 	mov.w	r2, #0
20004f48:	711a      	strb	r2, [r3, #4]
20004f4a:	f04f 0200 	mov.w	r2, #0
20004f4e:	f042 021e 	orr.w	r2, r2, #30
20004f52:	715a      	strb	r2, [r3, #5]

		pld_pkt->ccsds_s1 = 0;
20004f54:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
20004f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f5c:	681b      	ldr	r3, [r3, #0]
20004f5e:	f04f 0200 	mov.w	r2, #0
20004f62:	719a      	strb	r2, [r3, #6]
20004f64:	f04f 0200 	mov.w	r2, #0
20004f68:	71da      	strb	r2, [r3, #7]
20004f6a:	f04f 0200 	mov.w	r2, #0
20004f6e:	721a      	strb	r2, [r3, #8]
20004f70:	f04f 0200 	mov.w	r2, #0
20004f74:	725a      	strb	r2, [r3, #9]
		pld_pkt->ccsds_s2 = 0;
20004f76:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
20004f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f7e:	681b      	ldr	r3, [r3, #0]
20004f80:	f04f 0200 	mov.w	r2, #0
20004f84:	729a      	strb	r2, [r3, #10]
20004f86:	f04f 0200 	mov.w	r2, #0
20004f8a:	72da      	strb	r2, [r3, #11]
20004f8c:	f04f 0200 	mov.w	r2, #0
20004f90:	731a      	strb	r2, [r3, #12]
20004f92:	f04f 0200 	mov.w	r2, #0
20004f96:	735a      	strb	r2, [r3, #13]

		vGetPktStruct(pld, (void* )pld_pkt, PLD_PKT_LENGTH);
20004f98:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
20004f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fa0:	681b      	ldr	r3, [r3, #0]
20004fa2:	f04f 0001 	mov.w	r0, #1
20004fa6:	4619      	mov	r1, r3
20004fa8:	f04f 021e 	mov.w	r2, #30
20004fac:	f7ff feae 	bl	20004d0c <vGetPktStruct>
	}
	else{

	}
}
20004fb0:	f107 0710 	add.w	r7, r7, #16
20004fb4:	46bd      	mov	sp, r7
20004fb6:	bd80      	pop	{r7, pc}

20004fb8 <vtlm_sender>:


void vtlm_sender(void* d){
20004fb8:	b580      	push	{r7, lr}
20004fba:	b086      	sub	sp, #24
20004fbc:	af00      	add	r7, sp, #0
20004fbe:	6078      	str	r0, [r7, #4]

	pkt_t pkt_send;

//	pkt_stream(pkt_send);

	xQueueReceive(Data_PKT_Queue, &pkt_send, portMAX_DELAY);
20004fc0:	f24e 339c 	movw	r3, #58268	; 0xe39c
20004fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fc8:	681a      	ldr	r2, [r3, #0]
20004fca:	f107 030c 	add.w	r3, r7, #12
20004fce:	4610      	mov	r0, r2
20004fd0:	4619      	mov	r1, r3
20004fd2:	f04f 32ff 	mov.w	r2, #4294967295
20004fd6:	f04f 0300 	mov.w	r3, #0
20004fda:	f7fc fd83 	bl	20001ae4 <xQueueGenericReceive>

	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);
20004fde:	693b      	ldr	r3, [r7, #16]
20004fe0:	461a      	mov	r2, r3
20004fe2:	7d3b      	ldrb	r3, [r7, #20]
20004fe4:	f24e 30ec 	movw	r0, #58348	; 0xe3ec
20004fe8:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004fec:	4611      	mov	r1, r2
20004fee:	461a      	mov	r2, r3
20004ff0:	f000 fb50 	bl	20005694 <MSS_UART_polled_tx>
//
//
//	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);


}
20004ff4:	f107 0718 	add.w	r7, r7, #24
20004ff8:	46bd      	mov	sp, r7
20004ffa:	bd80      	pop	{r7, pc}

20004ffc <irq_tsk_func>:
	}

}


void irq_tsk_func(void* f_param){
20004ffc:	b580      	push	{r7, lr}
20004ffe:	b084      	sub	sp, #16
20005000:	af00      	add	r7, sp, #0
20005002:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue;

	while(1){

		xTaskNotifyWait(0x00, 0, &ulNotifiedValue, portMAX_DELAY);
20005004:	f107 030c 	add.w	r3, r7, #12
20005008:	f04f 0000 	mov.w	r0, #0
2000500c:	f04f 0100 	mov.w	r1, #0
20005010:	461a      	mov	r2, r3
20005012:	f04f 33ff 	mov.w	r3, #4294967295
20005016:	f7fe f9e7 	bl	200033e8 <xTaskNotifyWait>
		ulTaskNotifyTake(pdTRUE, 1);
2000501a:	f04f 0001 	mov.w	r0, #1
2000501e:	f04f 0101 	mov.w	r1, #1
20005022:	f7fe f981 	bl	20003328 <ulTaskNotifyTake>
		rx_cmd = (rx_cmd_t* ) f_param;
20005026:	687a      	ldr	r2, [r7, #4]
20005028:	f24e 1310 	movw	r3, #57616	; 0xe110
2000502c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005030:	601a      	str	r2, [r3, #0]


		if(cmd_valid(rx_cmd)){
20005032:	f24e 1310 	movw	r3, #57616	; 0xe110
20005036:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000503a:	681b      	ldr	r3, [r3, #0]
2000503c:	4618      	mov	r0, r3
2000503e:	f7fb ffe9 	bl	20001014 <cmd_valid>
20005042:	4603      	mov	r3, r0
20005044:	2b00      	cmp	r3, #0
20005046:	d015      	beq.n	20005074 <irq_tsk_func+0x78>
			cmd_engine(rx_cmd);
20005048:	f24e 1310 	movw	r3, #57616	; 0xe110
2000504c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005050:	681b      	ldr	r3, [r3, #0]
20005052:	4618      	mov	r0, r3
20005054:	f7fc f8c8 	bl	200011e8 <cmd_engine>
			command_cnt++;
20005058:	f24e 3364 	movw	r3, #58212	; 0xe364
2000505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005060:	881b      	ldrh	r3, [r3, #0]
20005062:	f103 0301 	add.w	r3, r3, #1
20005066:	b29a      	uxth	r2, r3
20005068:	f24e 3364 	movw	r3, #58212	; 0xe364
2000506c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005070:	801a      	strh	r2, [r3, #0]
		else{
			command_reject_cnt++;
		}


	}
20005072:	e7c7      	b.n	20005004 <irq_tsk_func+0x8>
		if(cmd_valid(rx_cmd)){
			cmd_engine(rx_cmd);
			command_cnt++;
		}
		else{
			command_reject_cnt++;
20005074:	f24e 33a4 	movw	r3, #58276	; 0xe3a4
20005078:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000507c:	881b      	ldrh	r3, [r3, #0]
2000507e:	f103 0301 	add.w	r3, r3, #1
20005082:	b29a      	uxth	r2, r3
20005084:	f24e 33a4 	movw	r3, #58276	; 0xe3a4
20005088:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000508c:	801a      	strh	r2, [r3, #0]
		}


	}
2000508e:	e7b9      	b.n	20005004 <irq_tsk_func+0x8>

20005090 <uart0_rx_handler>:
}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
20005090:	b580      	push	{r7, lr}
20005092:	b084      	sub	sp, #16
20005094:	af00      	add	r7, sp, #0
20005096:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer, 8);
20005098:	6878      	ldr	r0, [r7, #4]
2000509a:	f64d 41a0 	movw	r1, #56480	; 0xdca0
2000509e:	f2c2 0100 	movt	r1, #8192	; 0x2000
200050a2:	f04f 0208 	mov.w	r2, #8
200050a6:	f000 fb67 	bl	20005778 <MSS_UART_get_rx>
200050aa:	4602      	mov	r2, r0
200050ac:	f64d 43dc 	movw	r3, #56540	; 0xdcdc
200050b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050b4:	601a      	str	r2, [r3, #0]

	BaseType_t xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
200050b6:	f04f 0300 	mov.w	r3, #0
200050ba:	60fb      	str	r3, [r7, #12]

	 vTaskNotifyGiveFromISR(uart_irq, &xHigherPriorityTaskWoken);
200050bc:	f64d 33fc 	movw	r3, #56316	; 0xdbfc
200050c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050c4:	681a      	ldr	r2, [r3, #0]
200050c6:	f107 030c 	add.w	r3, r7, #12
200050ca:	4610      	mov	r0, r2
200050cc:	4619      	mov	r1, r3
200050ce:	f7fe fa03 	bl	200034d8 <vTaskNotifyGiveFromISR>

	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
200050d2:	68fb      	ldr	r3, [r7, #12]
200050d4:	2b00      	cmp	r3, #0
200050d6:	d00a      	beq.n	200050ee <uart0_rx_handler+0x5e>
200050d8:	f64e 5304 	movw	r3, #60676	; 0xed04
200050dc:	f2ce 0300 	movt	r3, #57344	; 0xe000
200050e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200050e4:	601a      	str	r2, [r3, #0]
200050e6:	f3bf 8f4f 	dsb	sy
200050ea:	f3bf 8f6f 	isb	sy

}
200050ee:	f107 0710 	add.w	r7, r7, #16
200050f2:	46bd      	mov	sp, r7
200050f4:	bd80      	pop	{r7, pc}
200050f6:	bf00      	nop

200050f8 <demo_tasks>:
//	 }
//}



void demo_tasks(void){
200050f8:	b590      	push	{r4, r7, lr}
200050fa:	b08d      	sub	sp, #52	; 0x34
200050fc:	af02      	add	r7, sp, #8

		uint8_t REF_DATA[3] = {0x38, 0x00, 0x00};
200050fe:	f04f 0338 	mov.w	r3, #56	; 0x38
20005102:	743b      	strb	r3, [r7, #16]
20005104:	f04f 0300 	mov.w	r3, #0
20005108:	747b      	strb	r3, [r7, #17]
2000510a:	f04f 0300 	mov.w	r3, #0
2000510e:	74bb      	strb	r3, [r7, #18]
		uint8_t PWR[3] = {0x20, 0x00, 0x0F};
20005110:	f647 024c 	movw	r2, #30796	; 0x784c
20005114:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005118:	f107 030c 	add.w	r3, r7, #12
2000511c:	6812      	ldr	r2, [r2, #0]
2000511e:	4611      	mov	r1, r2
20005120:	8019      	strh	r1, [r3, #0]
20005122:	f103 0302 	add.w	r3, r3, #2
20005126:	ea4f 4212 	mov.w	r2, r2, lsr #16
2000512a:	701a      	strb	r2, [r3, #0]
		uint8_t config[3] = {0x30, 0x00, 0x01};
2000512c:	f647 0250 	movw	r2, #30800	; 0x7850
20005130:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005134:	f107 0308 	add.w	r3, r7, #8
20005138:	6812      	ldr	r2, [r2, #0]
2000513a:	4611      	mov	r1, r2
2000513c:	8019      	strh	r1, [r3, #0]
2000513e:	f103 0302 	add.w	r3, r3, #2
20005142:	ea4f 4212 	mov.w	r2, r2, lsr #16
20005146:	701a      	strb	r2, [r3, #0]
		uint8_t sw_clear[3] = {0x28, 0x00, 0x01};
20005148:	f647 0254 	movw	r2, #30804	; 0x7854
2000514c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005150:	f107 0304 	add.w	r3, r7, #4
20005154:	6812      	ldr	r2, [r2, #0]
20005156:	4611      	mov	r1, r2
20005158:	8019      	strh	r1, [r3, #0]
2000515a:	f103 0302 	add.w	r3, r3, #2
2000515e:	ea4f 4212 	mov.w	r2, r2, lsr #16
20005162:	701a      	strb	r2, [r3, #0]
		i2c_status_t status;

//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
20005164:	f64d 73e0 	movw	r3, #57312	; 0xdfe0
20005168:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000516c:	617b      	str	r3, [r7, #20]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
2000516e:	f647 0388 	movw	r3, #30856	; 0x7888
20005172:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005176:	61bb      	str	r3, [r7, #24]
		imu_ptr->init = &init;
20005178:	697a      	ldr	r2, [r7, #20]
2000517a:	f640 7349 	movw	r3, #3913	; 0xf49
2000517e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005182:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
20005184:	697b      	ldr	r3, [r7, #20]
20005186:	681b      	ldr	r3, [r3, #0]
20005188:	f04f 0000 	mov.w	r0, #0
2000518c:	69b9      	ldr	r1, [r7, #24]
2000518e:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
20005190:	f24e 20dc 	movw	r0, #58076	; 0xe2dc
20005194:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005198:	f244 0100 	movw	r1, #16384	; 0x4000
2000519c:	f2c5 0100 	movt	r1, #20480	; 0x5000
200051a0:	f04f 0221 	mov.w	r2, #33	; 0x21
200051a4:	f04f 0300 	mov.w	r3, #0
200051a8:	f000 ff76 	bl	20006098 <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
200051ac:	f64d 73e0 	movw	r3, #57312	; 0xdfe0
200051b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051b4:	61fb      	str	r3, [r7, #28]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
200051b6:	f647 03a8 	movw	r3, #30888	; 0x78a8
200051ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051be:	623b      	str	r3, [r7, #32]
		vc_ptr->init = &init;
200051c0:	69fa      	ldr	r2, [r7, #28]
200051c2:	f640 7349 	movw	r3, #3913	; 0xf49
200051c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051ca:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
200051cc:	69fb      	ldr	r3, [r7, #28]
200051ce:	681b      	ldr	r3, [r3, #0]
200051d0:	f04f 000a 	mov.w	r0, #10
200051d4:	6a39      	ldr	r1, [r7, #32]
200051d6:	4798      	blx	r3

		Data_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t));  //Common queue for all packets data storage
200051d8:	f04f 0003 	mov.w	r0, #3
200051dc:	f04f 010c 	mov.w	r1, #12
200051e0:	f04f 0200 	mov.w	r2, #0
200051e4:	f7fc fa26 	bl	20001634 <xQueueGenericCreate>
200051e8:	4602      	mov	r2, r0
200051ea:	f24e 339c 	movw	r3, #58268	; 0xe39c
200051ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200051f2:	601a      	str	r2, [r3, #0]
		Store_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t)); // Queue from which the data will be stored to the storage
200051f4:	f04f 0003 	mov.w	r0, #3
200051f8:	f04f 010c 	mov.w	r1, #12
200051fc:	f04f 0200 	mov.w	r2, #0
20005200:	f7fc fa18 	bl	20001634 <xQueueGenericCreate>
20005204:	4602      	mov	r2, r0
20005206:	f24e 3368 	movw	r3, #58216	; 0xe368
2000520a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000520e:	601a      	str	r2, [r3, #0]

		set_pktRate(hk, HK_PKT_PERIOD);   //Set all the default packet rate
20005210:	f04f 0000 	mov.w	r0, #0
20005214:	f04f 0103 	mov.w	r1, #3
20005218:	f7fb f924 	bl	20000464 <set_pktRate>
		set_pktRate(pld, PLD_PKT_PERIOD);
2000521c:	f04f 0001 	mov.w	r0, #1
20005220:	f04f 010a 	mov.w	r1, #10
20005224:	f7fb f91e 	bl	20000464 <set_pktRate>
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		NVIC_EnableIRQ(UART0_IRQn);
20005228:	f04f 000a 	mov.w	r0, #10
2000522c:	f7ff fabc 	bl	200047a8 <NVIC_EnableIRQ>
		NVIC_SetPriority(UART0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1);
20005230:	f04f 000a 	mov.w	r0, #10
20005234:	f04f 019f 	mov.w	r1, #159	; 0x9f
20005238:	f7ff fad2 	bl	200047e0 <NVIC_SetPriority>


		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
2000523c:	f24e 30ec 	movw	r0, #58348	; 0xe3ec
20005240:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005244:	f44f 5116 	mov.w	r1, #9600	; 0x2580
20005248:	f04f 0203 	mov.w	r2, #3
2000524c:	f000 f9e0 	bl	20005610 <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_FIFO_EIGHT_BYTES);
20005250:	f24e 30ec 	movw	r0, #58348	; 0xe3ec
20005254:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005258:	f245 0191 	movw	r1, #20625	; 0x5091
2000525c:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005260:	f04f 0280 	mov.w	r2, #128	; 0x80
20005264:	f000 faf6 	bl	20005854 <MSS_UART_set_rx_handler>
//		init_demo(imu);
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;


	 xMutex = xSemaphoreCreateMutex();
20005268:	f04f 0001 	mov.w	r0, #1
2000526c:	f7fc fa64 	bl	20001738 <xQueueCreateMutex>
20005270:	4602      	mov	r2, r0
20005272:	f24e 3388 	movw	r3, #58248	; 0xe388
20005276:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000527a:	601a      	str	r2, [r3, #0]
//	 xTaskCreate(get_imu_data, "IMU", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(get_vc_data, "VC", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(pktmngr, "Packet", configMINIMAL_STACK_SIZE, (void*) data, 1, NULL);


		feed_get_hk_data = xTaskCreate(get_hk_data, "HK", configMINIMAL_STACK_SIZE, (void*)data , 2, &get_hk_pkt_handle);
2000527c:	f04f 0302 	mov.w	r3, #2
20005280:	9300      	str	r3, [sp, #0]
20005282:	f24e 3394 	movw	r3, #58260	; 0xe394
20005286:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000528a:	9301      	str	r3, [sp, #4]
2000528c:	f644 003d 	movw	r0, #18493	; 0x483d
20005290:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005294:	f647 0128 	movw	r1, #30760	; 0x7828
20005298:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000529c:	f04f 0250 	mov.w	r2, #80	; 0x50
200052a0:	f64d 43e0 	movw	r3, #56544	; 0xdce0
200052a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052a8:	f7fc feb6 	bl	20002018 <xTaskCreate>
200052ac:	4602      	mov	r2, r0
200052ae:	f24e 338c 	movw	r3, #58252	; 0xe38c
200052b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052b6:	601a      	str	r2, [r3, #0]

		feed_get_payload_data = xTaskCreate(get_pld_data, "Payload", configMINIMAL_STACK_SIZE, (void* )data, 1, &get_pld_pkt_handle);
200052b8:	f04f 0301 	mov.w	r3, #1
200052bc:	9300      	str	r3, [sp, #0]
200052be:	f24e 3370 	movw	r3, #58224	; 0xe370
200052c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052c6:	9301      	str	r3, [sp, #4]
200052c8:	f644 4041 	movw	r0, #19521	; 0x4c41
200052cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200052d0:	f647 012c 	movw	r1, #30764	; 0x782c
200052d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
200052d8:	f04f 0250 	mov.w	r2, #80	; 0x50
200052dc:	f64d 43e0 	movw	r3, #56544	; 0xdce0
200052e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052e4:	f7fc fe98 	bl	20002018 <xTaskCreate>
200052e8:	4602      	mov	r2, r0
200052ea:	f24e 3398 	movw	r3, #58264	; 0xe398
200052ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200052f2:	601a      	str	r2, [r3, #0]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);
200052f4:	f04f 0303 	mov.w	r3, #3
200052f8:	9300      	str	r3, [sp, #0]
200052fa:	f64d 33fc 	movw	r3, #56316	; 0xdbfc
200052fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005302:	9301      	str	r3, [sp, #4]
20005304:	f644 70fd 	movw	r0, #20477	; 0x4ffd
20005308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000530c:	f647 0134 	movw	r1, #30772	; 0x7834
20005310:	f2c2 0100 	movt	r1, #8192	; 0x2000
20005314:	f04f 0250 	mov.w	r2, #80	; 0x50
20005318:	f64d 43a0 	movw	r3, #56480	; 0xdca0
2000531c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005320:	f7fc fe7a 	bl	20002018 <xTaskCreate>

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
20005324:	f04f 0300 	mov.w	r3, #0
20005328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
2000532c:	e08e      	b.n	2000544c <demo_tasks+0x354>
			if(pkt_stream[i].rate != DEFAULT_ZERO_TIMER_PERIOD* 1000){
2000532e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
20005332:	f24e 02e4 	movw	r2, #57572	; 0xe0e4
20005336:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000533a:	460b      	mov	r3, r1
2000533c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20005340:	440b      	add	r3, r1
20005342:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005346:	4413      	add	r3, r2
20005348:	f103 0310 	add.w	r3, r3, #16
2000534c:	881a      	ldrh	r2, [r3, #0]
2000534e:	f242 7310 	movw	r3, #10000	; 0x2710
20005352:	429a      	cmp	r2, r3
20005354:	d045      	beq.n	200053e2 <demo_tasks+0x2ea>
				pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )i, vtlm_task);
20005356:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
2000535a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
2000535e:	f24e 02e4 	movw	r2, #57572	; 0xe0e4
20005362:	f2c2 0200 	movt	r2, #8192	; 0x2000
20005366:	460b      	mov	r3, r1
20005368:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000536c:	440b      	add	r3, r1
2000536e:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005372:	4413      	add	r3, r2
20005374:	f103 0310 	add.w	r3, r3, #16
20005378:	881b      	ldrh	r3, [r3, #0]
2000537a:	4618      	mov	r0, r3
2000537c:	f7fb fe32 	bl	20000fe4 <xMsToTicks>
20005380:	4602      	mov	r2, r0
20005382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005386:	469c      	mov	ip, r3
20005388:	f644 5395 	movw	r3, #19861	; 0x4d95
2000538c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005390:	9300      	str	r3, [sp, #0]
20005392:	f647 0040 	movw	r0, #30784	; 0x7840
20005396:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000539a:	4611      	mov	r1, r2
2000539c:	f04f 0201 	mov.w	r2, #1
200053a0:	4663      	mov	r3, ip
200053a2:	f7fe fa01 	bl	200037a8 <xTimerCreate>
200053a6:	4602      	mov	r2, r0
200053a8:	f24e 1308 	movw	r3, #57608	; 0xe108
200053ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053b0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	//			vTimerSetTimerID(pkt_timer[i], (void* )i);
				xTimerStart(pkt_timer[i], 0);
200053b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
200053b8:	f24e 1308 	movw	r3, #57608	; 0xe108
200053bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053c0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
200053c4:	f7fd f9de 	bl	20002784 <xTaskGetTickCount>
200053c8:	4603      	mov	r3, r0
200053ca:	f04f 0200 	mov.w	r2, #0
200053ce:	9200      	str	r2, [sp, #0]
200053d0:	4620      	mov	r0, r4
200053d2:	f04f 0101 	mov.w	r1, #1
200053d6:	461a      	mov	r2, r3
200053d8:	f04f 0300 	mov.w	r3, #0
200053dc:	f7fe fa36 	bl	2000384c <xTimerGenericCommand>
200053e0:	e02e      	b.n	20005440 <demo_tasks+0x348>
			}
			else{
				pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )i, vtlm_task);
200053e2:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
200053e6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
200053ea:	f24e 02e4 	movw	r2, #57572	; 0xe0e4
200053ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
200053f2:	460b      	mov	r3, r1
200053f4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200053f8:	440b      	add	r3, r1
200053fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
200053fe:	4413      	add	r3, r2
20005400:	f103 0310 	add.w	r3, r3, #16
20005404:	881b      	ldrh	r3, [r3, #0]
20005406:	4618      	mov	r0, r3
20005408:	f7fb fdec 	bl	20000fe4 <xMsToTicks>
2000540c:	4602      	mov	r2, r0
2000540e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005412:	469c      	mov	ip, r3
20005414:	f644 5395 	movw	r3, #19861	; 0x4d95
20005418:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000541c:	9300      	str	r3, [sp, #0]
2000541e:	f647 0040 	movw	r0, #30784	; 0x7840
20005422:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005426:	4611      	mov	r1, r2
20005428:	f04f 0201 	mov.w	r2, #1
2000542c:	4663      	mov	r3, ip
2000542e:	f7fe f9bb 	bl	200037a8 <xTimerCreate>
20005432:	4602      	mov	r2, r0
20005434:	f24e 1308 	movw	r3, #57608	; 0xe108
20005438:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000543c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
20005440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005444:	f103 0301 	add.w	r3, r3, #1
20005448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
2000544c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20005450:	2b01      	cmp	r3, #1
20005452:	f67f af6c 	bls.w	2000532e <demo_tasks+0x236>
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
20005456:	f7fd f859 	bl	2000250c <vTaskStartScheduler>

}
2000545a:	f107 072c 	add.w	r7, r7, #44	; 0x2c
2000545e:	46bd      	mov	sp, r7
20005460:	bd90      	pop	{r4, r7, pc}
20005462:	bf00      	nop

20005464 <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
20005464:	b580      	push	{r7, lr}
20005466:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
20005468:	f24e 1024 	movw	r0, #57636	; 0xe124
2000546c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005470:	f001 f838 	bl	200064e4 <I2C_isr>
}
20005474:	bd80      	pop	{r7, pc}
20005476:	bf00      	nop

20005478 <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
20005478:	b580      	push	{r7, lr}
2000547a:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
2000547c:	f24e 1090 	movw	r0, #57744	; 0xe190
20005480:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005484:	f001 f82e 	bl	200064e4 <I2C_isr>
}
20005488:	bd80      	pop	{r7, pc}
2000548a:	bf00      	nop

2000548c <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
2000548c:	b580      	push	{r7, lr}
2000548e:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
20005490:	f64d 4034 	movw	r0, #56372	; 0xdc34
20005494:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005498:	f001 f824 	bl	200064e4 <I2C_isr>
}
2000549c:	bd80      	pop	{r7, pc}
2000549e:	bf00      	nop

200054a0 <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
200054a0:	b580      	push	{r7, lr}
200054a2:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
200054a4:	f24e 2068 	movw	r0, #57960	; 0xe268
200054a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200054ac:	f001 f81a 	bl	200064e4 <I2C_isr>
}
200054b0:	bd80      	pop	{r7, pc}
200054b2:	bf00      	nop

200054b4 <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
200054b4:	b580      	push	{r7, lr}
200054b6:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
200054b8:	f24e 20dc 	movw	r0, #58076	; 0xe2dc
200054bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200054c0:	f001 f810 	bl	200064e4 <I2C_isr>
}
200054c4:	bd80      	pop	{r7, pc}
200054c6:	bf00      	nop

200054c8 <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
200054c8:	b580      	push	{r7, lr}
200054ca:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
200054cc:	f24e 10fc 	movw	r0, #57852	; 0xe1fc
200054d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200054d4:	f001 f806 	bl	200064e4 <I2C_isr>
}
200054d8:	bd80      	pop	{r7, pc}
200054da:	bf00      	nop

200054dc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200054dc:	b480      	push	{r7}
200054de:	b083      	sub	sp, #12
200054e0:	af00      	add	r7, sp, #0
200054e2:	4603      	mov	r3, r0
200054e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200054e6:	f24e 1300 	movw	r3, #57600	; 0xe100
200054ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
200054ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
200054f2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200054f6:	79f9      	ldrb	r1, [r7, #7]
200054f8:	f001 011f 	and.w	r1, r1, #31
200054fc:	f04f 0001 	mov.w	r0, #1
20005500:	fa00 f101 	lsl.w	r1, r0, r1
20005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20005508:	f107 070c 	add.w	r7, r7, #12
2000550c:	46bd      	mov	sp, r7
2000550e:	bc80      	pop	{r7}
20005510:	4770      	bx	lr
20005512:	bf00      	nop

20005514 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20005514:	b480      	push	{r7}
20005516:	b083      	sub	sp, #12
20005518:	af00      	add	r7, sp, #0
2000551a:	4603      	mov	r3, r0
2000551c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000551e:	f24e 1300 	movw	r3, #57600	; 0xe100
20005522:	f2ce 0300 	movt	r3, #57344	; 0xe000
20005526:	f997 2007 	ldrsb.w	r2, [r7, #7]
2000552a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000552e:	79f9      	ldrb	r1, [r7, #7]
20005530:	f001 011f 	and.w	r1, r1, #31
20005534:	f04f 0001 	mov.w	r0, #1
20005538:	fa00 f101 	lsl.w	r1, r0, r1
2000553c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20005540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20005544:	f107 070c 	add.w	r7, r7, #12
20005548:	46bd      	mov	sp, r7
2000554a:	bc80      	pop	{r7}
2000554c:	4770      	bx	lr
2000554e:	bf00      	nop

20005550 <set_bit_reg8>:
static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005550:	b480      	push	{r7}
20005552:	b083      	sub	sp, #12
20005554:	af00      	add	r7, sp, #0
20005556:	6078      	str	r0, [r7, #4]
20005558:	460b      	mov	r3, r1
2000555a:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x1;
2000555c:	687b      	ldr	r3, [r7, #4]
2000555e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
20005562:	687b      	ldr	r3, [r7, #4]
20005564:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005568:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
2000556c:	ea4f 1343 	mov.w	r3, r3, lsl #5
20005570:	441a      	add	r2, r3
20005572:	78fb      	ldrb	r3, [r7, #3]
20005574:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005578:	4413      	add	r3, r2
2000557a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
2000557e:	f04f 0201 	mov.w	r2, #1
20005582:	601a      	str	r2, [r3, #0]
}
20005584:	f107 070c 	add.w	r7, r7, #12
20005588:	46bd      	mov	sp, r7
2000558a:	bc80      	pop	{r7}
2000558c:	4770      	bx	lr
2000558e:	bf00      	nop

20005590 <clear_bit_reg8>:
static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
20005590:	b480      	push	{r7}
20005592:	b083      	sub	sp, #12
20005594:	af00      	add	r7, sp, #0
20005596:	6078      	str	r0, [r7, #4]
20005598:	460b      	mov	r3, r1
2000559a:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x0;
2000559c:	687b      	ldr	r3, [r7, #4]
2000559e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200055a2:	687b      	ldr	r3, [r7, #4]
200055a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200055a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200055ac:	ea4f 1343 	mov.w	r3, r3, lsl #5
200055b0:	441a      	add	r2, r3
200055b2:	78fb      	ldrb	r3, [r7, #3]
200055b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200055b8:	4413      	add	r3, r2
200055ba:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200055be:	f04f 0200 	mov.w	r2, #0
200055c2:	601a      	str	r2, [r3, #0]
}
200055c4:	f107 070c 	add.w	r7, r7, #12
200055c8:	46bd      	mov	sp, r7
200055ca:	bc80      	pop	{r7}
200055cc:	4770      	bx	lr
200055ce:	bf00      	nop

200055d0 <read_bit_reg8>:
static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
200055d0:	b480      	push	{r7}
200055d2:	b083      	sub	sp, #12
200055d4:	af00      	add	r7, sp, #0
200055d6:	6078      	str	r0, [r7, #4]
200055d8:	460b      	mov	r3, r1
200055da:	70fb      	strb	r3, [r7, #3]
    return (HW_REG_BIT(reg,bit));
200055dc:	687b      	ldr	r3, [r7, #4]
200055de:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200055e2:	687b      	ldr	r3, [r7, #4]
200055e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200055e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200055ec:	ea4f 1343 	mov.w	r3, r3, lsl #5
200055f0:	441a      	add	r2, r3
200055f2:	78fb      	ldrb	r3, [r7, #3]
200055f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200055f8:	4413      	add	r3, r2
200055fa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200055fe:	681b      	ldr	r3, [r3, #0]
20005600:	b2db      	uxtb	r3, r3
}
20005602:	4618      	mov	r0, r3
20005604:	f107 070c 	add.w	r7, r7, #12
20005608:	46bd      	mov	sp, r7
2000560a:	bc80      	pop	{r7}
2000560c:	4770      	bx	lr
2000560e:	bf00      	nop

20005610 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20005610:	b580      	push	{r7, lr}
20005612:	b084      	sub	sp, #16
20005614:	af00      	add	r7, sp, #0
20005616:	60f8      	str	r0, [r7, #12]
20005618:	60b9      	str	r1, [r7, #8]
2000561a:	4613      	mov	r3, r2
2000561c:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
2000561e:	68fa      	ldr	r2, [r7, #12]
20005620:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005624:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005628:	429a      	cmp	r2, r3
2000562a:	d007      	beq.n	2000563c <MSS_UART_init+0x2c>
2000562c:	68fa      	ldr	r2, [r7, #12]
2000562e:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
20005632:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005636:	429a      	cmp	r2, r3
20005638:	d000      	beq.n	2000563c <MSS_UART_init+0x2c>
2000563a:	be00      	bkpt	0x0000

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
2000563c:	79fb      	ldrb	r3, [r7, #7]
2000563e:	68f8      	ldr	r0, [r7, #12]
20005640:	68b9      	ldr	r1, [r7, #8]
20005642:	461a      	mov	r2, r3
20005644:	f000 fa56 	bl	20005af4 <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
20005648:	68fb      	ldr	r3, [r7, #12]
2000564a:	681b      	ldr	r3, [r3, #0]
2000564c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005650:	4618      	mov	r0, r3
20005652:	f04f 0103 	mov.w	r1, #3
20005656:	f7ff ff9b 	bl	20005590 <clear_bit_reg8>

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
2000565a:	68fb      	ldr	r3, [r7, #12]
2000565c:	681b      	ldr	r3, [r3, #0]
2000565e:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005662:	4618      	mov	r0, r3
20005664:	f04f 0102 	mov.w	r1, #2
20005668:	f7ff ff92 	bl	20005590 <clear_bit_reg8>

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
2000566c:	68fb      	ldr	r3, [r7, #12]
2000566e:	681b      	ldr	r3, [r3, #0]
20005670:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005674:	4618      	mov	r0, r3
20005676:	f04f 0100 	mov.w	r1, #0
2000567a:	f7ff ff89 	bl	20005590 <clear_bit_reg8>

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
2000567e:	68fa      	ldr	r2, [r7, #12]
20005680:	f645 738d 	movw	r3, #24461	; 0x5f8d
20005684:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005688:	6253      	str	r3, [r2, #36]	; 0x24
}
2000568a:	f107 0710 	add.w	r7, r7, #16
2000568e:	46bd      	mov	sp, r7
20005690:	bd80      	pop	{r7, pc}
20005692:	bf00      	nop

20005694 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20005694:	b480      	push	{r7}
20005696:	b089      	sub	sp, #36	; 0x24
20005698:	af00      	add	r7, sp, #0
2000569a:	60f8      	str	r0, [r7, #12]
2000569c:	60b9      	str	r1, [r7, #8]
2000569e:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0u;
200056a0:	f04f 0300 	mov.w	r3, #0
200056a4:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
200056a6:	68fa      	ldr	r2, [r7, #12]
200056a8:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
200056ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056b0:	429a      	cmp	r2, r3
200056b2:	d007      	beq.n	200056c4 <MSS_UART_polled_tx+0x30>
200056b4:	68fa      	ldr	r2, [r7, #12]
200056b6:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
200056ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056be:	429a      	cmp	r2, r3
200056c0:	d000      	beq.n	200056c4 <MSS_UART_polled_tx+0x30>
200056c2:	be00      	bkpt	0x0000
    ASSERT(pbuff != ( (uint8_t *)0));
200056c4:	68bb      	ldr	r3, [r7, #8]
200056c6:	2b00      	cmp	r3, #0
200056c8:	d100      	bne.n	200056cc <MSS_UART_polled_tx+0x38>
200056ca:	be00      	bkpt	0x0000
    ASSERT(tx_size > 0u);
200056cc:	687b      	ldr	r3, [r7, #4]
200056ce:	2b00      	cmp	r3, #0
200056d0:	d100      	bne.n	200056d4 <MSS_UART_polled_tx+0x40>
200056d2:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
200056d4:	68fa      	ldr	r2, [r7, #12]
200056d6:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
200056da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056de:	429a      	cmp	r2, r3
200056e0:	d006      	beq.n	200056f0 <MSS_UART_polled_tx+0x5c>
200056e2:	68fa      	ldr	r2, [r7, #12]
200056e4:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
200056e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056ec:	429a      	cmp	r2, r3
200056ee:	d13d      	bne.n	2000576c <MSS_UART_polled_tx+0xd8>
200056f0:	68bb      	ldr	r3, [r7, #8]
200056f2:	2b00      	cmp	r3, #0
200056f4:	d03a      	beq.n	2000576c <MSS_UART_polled_tx+0xd8>
200056f6:	687b      	ldr	r3, [r7, #4]
200056f8:	2b00      	cmp	r3, #0
200056fa:	d037      	beq.n	2000576c <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
200056fc:	68fb      	ldr	r3, [r7, #12]
200056fe:	681b      	ldr	r3, [r3, #0]
20005700:	7d1b      	ldrb	r3, [r3, #20]
20005702:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
20005704:	68fb      	ldr	r3, [r7, #12]
20005706:	7b5a      	ldrb	r2, [r3, #13]
20005708:	7efb      	ldrb	r3, [r7, #27]
2000570a:	ea42 0303 	orr.w	r3, r2, r3
2000570e:	b2da      	uxtb	r2, r3
20005710:	68fb      	ldr	r3, [r7, #12]
20005712:	735a      	strb	r2, [r3, #13]

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
20005714:	7efb      	ldrb	r3, [r7, #27]
20005716:	f003 0320 	and.w	r3, r3, #32
2000571a:	2b00      	cmp	r3, #0
2000571c:	d023      	beq.n	20005766 <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
2000571e:	f04f 0310 	mov.w	r3, #16
20005722:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
20005724:	687b      	ldr	r3, [r7, #4]
20005726:	2b0f      	cmp	r3, #15
20005728:	d801      	bhi.n	2000572e <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
2000572a:	687b      	ldr	r3, [r7, #4]
2000572c:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
2000572e:	f04f 0300 	mov.w	r3, #0
20005732:	617b      	str	r3, [r7, #20]
20005734:	e00e      	b.n	20005754 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
20005736:	68fb      	ldr	r3, [r7, #12]
20005738:	681b      	ldr	r3, [r3, #0]
2000573a:	68b9      	ldr	r1, [r7, #8]
2000573c:	693a      	ldr	r2, [r7, #16]
2000573e:	440a      	add	r2, r1
20005740:	7812      	ldrb	r2, [r2, #0]
20005742:	701a      	strb	r2, [r3, #0]
                    char_idx++;
20005744:	693b      	ldr	r3, [r7, #16]
20005746:	f103 0301 	add.w	r3, r3, #1
2000574a:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
2000574c:	697b      	ldr	r3, [r7, #20]
2000574e:	f103 0301 	add.w	r3, r3, #1
20005752:	617b      	str	r3, [r7, #20]
20005754:	697a      	ldr	r2, [r7, #20]
20005756:	69fb      	ldr	r3, [r7, #28]
20005758:	429a      	cmp	r2, r3
2000575a:	d3ec      	bcc.n	20005736 <MSS_UART_polled_tx+0xa2>
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
2000575c:	687a      	ldr	r2, [r7, #4]
2000575e:	697b      	ldr	r3, [r7, #20]
20005760:	ebc3 0302 	rsb	r3, r3, r2
20005764:	607b      	str	r3, [r7, #4]
            }
        } while(tx_size);
20005766:	687b      	ldr	r3, [r7, #4]
20005768:	2b00      	cmp	r3, #0
2000576a:	d1c7      	bne.n	200056fc <MSS_UART_polled_tx+0x68>
    }
}
2000576c:	f107 0724 	add.w	r7, r7, #36	; 0x24
20005770:	46bd      	mov	sp, r7
20005772:	bc80      	pop	{r7}
20005774:	4770      	bx	lr
20005776:	bf00      	nop

20005778 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20005778:	b480      	push	{r7}
2000577a:	b087      	sub	sp, #28
2000577c:	af00      	add	r7, sp, #0
2000577e:	60f8      	str	r0, [r7, #12]
20005780:	60b9      	str	r1, [r7, #8]
20005782:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0u;
20005784:	f04f 0300 	mov.w	r3, #0
20005788:	613b      	str	r3, [r7, #16]
    uint8_t status = 0u;
2000578a:	f04f 0300 	mov.w	r3, #0
2000578e:	75fb      	strb	r3, [r7, #23]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005790:	68fa      	ldr	r2, [r7, #12]
20005792:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005796:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000579a:	429a      	cmp	r2, r3
2000579c:	d007      	beq.n	200057ae <MSS_UART_get_rx+0x36>
2000579e:	68fa      	ldr	r2, [r7, #12]
200057a0:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
200057a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200057a8:	429a      	cmp	r2, r3
200057aa:	d000      	beq.n	200057ae <MSS_UART_get_rx+0x36>
200057ac:	be00      	bkpt	0x0000
    ASSERT(rx_buff != ((uint8_t *)0));
200057ae:	68bb      	ldr	r3, [r7, #8]
200057b0:	2b00      	cmp	r3, #0
200057b2:	d100      	bne.n	200057b6 <MSS_UART_get_rx+0x3e>
200057b4:	be00      	bkpt	0x0000
    ASSERT(buff_size > 0u);
200057b6:	687b      	ldr	r3, [r7, #4]
200057b8:	2b00      	cmp	r3, #0
200057ba:	d100      	bne.n	200057be <MSS_UART_get_rx+0x46>
200057bc:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
200057be:	68fa      	ldr	r2, [r7, #12]
200057c0:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
200057c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200057c8:	429a      	cmp	r2, r3
200057ca:	d006      	beq.n	200057da <MSS_UART_get_rx+0x62>
200057cc:	68fa      	ldr	r2, [r7, #12]
200057ce:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
200057d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200057d6:	429a      	cmp	r2, r3
200057d8:	d134      	bne.n	20005844 <MSS_UART_get_rx+0xcc>
200057da:	68bb      	ldr	r3, [r7, #8]
200057dc:	2b00      	cmp	r3, #0
200057de:	d031      	beq.n	20005844 <MSS_UART_get_rx+0xcc>
200057e0:	687b      	ldr	r3, [r7, #4]
200057e2:	2b00      	cmp	r3, #0
200057e4:	d02e      	beq.n	20005844 <MSS_UART_get_rx+0xcc>
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
200057e6:	68fb      	ldr	r3, [r7, #12]
200057e8:	681b      	ldr	r3, [r3, #0]
200057ea:	7d1b      	ldrb	r3, [r3, #20]
200057ec:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
200057ee:	68fb      	ldr	r3, [r7, #12]
200057f0:	7b5a      	ldrb	r2, [r3, #13]
200057f2:	7dfb      	ldrb	r3, [r7, #23]
200057f4:	ea42 0303 	orr.w	r3, r2, r3
200057f8:	b2da      	uxtb	r2, r3
200057fa:	68fb      	ldr	r3, [r7, #12]
200057fc:	735a      	strb	r2, [r3, #13]

        while(((status & MSS_UART_DATA_READY) != 0u) &&
200057fe:	e017      	b.n	20005830 <MSS_UART_get_rx+0xb8>
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20005800:	68ba      	ldr	r2, [r7, #8]
20005802:	693b      	ldr	r3, [r7, #16]
20005804:	4413      	add	r3, r2
20005806:	68fa      	ldr	r2, [r7, #12]
20005808:	6812      	ldr	r2, [r2, #0]
2000580a:	7812      	ldrb	r2, [r2, #0]
2000580c:	b2d2      	uxtb	r2, r2
2000580e:	701a      	strb	r2, [r3, #0]
            ++rx_size;
20005810:	693b      	ldr	r3, [r7, #16]
20005812:	f103 0301 	add.w	r3, r3, #1
20005816:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
20005818:	68fb      	ldr	r3, [r7, #12]
2000581a:	681b      	ldr	r3, [r3, #0]
2000581c:	7d1b      	ldrb	r3, [r3, #20]
2000581e:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
20005820:	68fb      	ldr	r3, [r7, #12]
20005822:	7b5a      	ldrb	r2, [r3, #13]
20005824:	7dfb      	ldrb	r3, [r7, #23]
20005826:	ea42 0303 	orr.w	r3, r2, r3
2000582a:	b2da      	uxtb	r2, r3
2000582c:	68fb      	ldr	r3, [r7, #12]
2000582e:	735a      	strb	r2, [r3, #13]
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
20005830:	7dfb      	ldrb	r3, [r7, #23]
20005832:	f003 0301 	and.w	r3, r3, #1
20005836:	b2db      	uxtb	r3, r3
20005838:	2b00      	cmp	r3, #0
2000583a:	d003      	beq.n	20005844 <MSS_UART_get_rx+0xcc>
2000583c:	693a      	ldr	r2, [r7, #16]
2000583e:	687b      	ldr	r3, [r7, #4]
20005840:	429a      	cmp	r2, r3
20005842:	d3dd      	bcc.n	20005800 <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
20005844:	693b      	ldr	r3, [r7, #16]
}
20005846:	4618      	mov	r0, r3
20005848:	f107 071c 	add.w	r7, r7, #28
2000584c:	46bd      	mov	sp, r7
2000584e:	bc80      	pop	{r7}
20005850:	4770      	bx	lr
20005852:	bf00      	nop

20005854 <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
20005854:	b580      	push	{r7, lr}
20005856:	b084      	sub	sp, #16
20005858:	af00      	add	r7, sp, #0
2000585a:	60f8      	str	r0, [r7, #12]
2000585c:	60b9      	str	r1, [r7, #8]
2000585e:	4613      	mov	r3, r2
20005860:	71fb      	strb	r3, [r7, #7]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005862:	68fa      	ldr	r2, [r7, #12]
20005864:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005868:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000586c:	429a      	cmp	r2, r3
2000586e:	d007      	beq.n	20005880 <MSS_UART_set_rx_handler+0x2c>
20005870:	68fa      	ldr	r2, [r7, #12]
20005872:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
20005876:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000587a:	429a      	cmp	r2, r3
2000587c:	d000      	beq.n	20005880 <MSS_UART_set_rx_handler+0x2c>
2000587e:	be00      	bkpt	0x0000
    ASSERT(handler != INVALID_IRQ_HANDLER );
20005880:	68bb      	ldr	r3, [r7, #8]
20005882:	2b00      	cmp	r3, #0
20005884:	d100      	bne.n	20005888 <MSS_UART_set_rx_handler+0x34>
20005886:	be00      	bkpt	0x0000
    ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
20005888:	79fb      	ldrb	r3, [r7, #7]
2000588a:	2bc0      	cmp	r3, #192	; 0xc0
2000588c:	d900      	bls.n	20005890 <MSS_UART_set_rx_handler+0x3c>
2000588e:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005890:	68fa      	ldr	r2, [r7, #12]
20005892:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005896:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000589a:	429a      	cmp	r2, r3
2000589c:	d006      	beq.n	200058ac <MSS_UART_set_rx_handler+0x58>
2000589e:	68fa      	ldr	r2, [r7, #12]
200058a0:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
200058a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200058a8:	429a      	cmp	r2, r3
200058aa:	d12e      	bne.n	2000590a <MSS_UART_set_rx_handler+0xb6>
200058ac:	68bb      	ldr	r3, [r7, #8]
200058ae:	2b00      	cmp	r3, #0
200058b0:	d02b      	beq.n	2000590a <MSS_UART_set_rx_handler+0xb6>
200058b2:	79fb      	ldrb	r3, [r7, #7]
200058b4:	2bc0      	cmp	r3, #192	; 0xc0
200058b6:	d828      	bhi.n	2000590a <MSS_UART_set_rx_handler+0xb6>
       (handler != INVALID_IRQ_HANDLER) &&
       (trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL))
    {
        this_uart->rx_handler = handler;
200058b8:	68fb      	ldr	r3, [r7, #12]
200058ba:	68ba      	ldr	r2, [r7, #8]
200058bc:	621a      	str	r2, [r3, #32]

        /* Set the receive interrupt trigger level. */
        this_uart->hw_reg->FCR = (this_uart->hw_reg->FCR &
200058be:	68fb      	ldr	r3, [r7, #12]
200058c0:	681a      	ldr	r2, [r3, #0]
200058c2:	68fb      	ldr	r3, [r7, #12]
200058c4:	681b      	ldr	r3, [r3, #0]
200058c6:	7a1b      	ldrb	r3, [r3, #8]
200058c8:	b2db      	uxtb	r3, r3
200058ca:	b2db      	uxtb	r3, r3
200058cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200058d0:	79f8      	ldrb	r0, [r7, #7]
200058d2:	4619      	mov	r1, r3
200058d4:	4603      	mov	r3, r0
200058d6:	ea41 0303 	orr.w	r3, r1, r3
200058da:	b2db      	uxtb	r3, r3
200058dc:	b2db      	uxtb	r3, r3
200058de:	7213      	strb	r3, [r2, #8]
                                 (uint8_t)(~((uint8_t)FCR_TRIG_LEVEL_MASK))) |
                                 (uint8_t)trigger_level;
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
200058e0:	68fb      	ldr	r3, [r7, #12]
200058e2:	791b      	ldrb	r3, [r3, #4]
200058e4:	b25b      	sxtb	r3, r3
200058e6:	4618      	mov	r0, r3
200058e8:	f7ff fe14 	bl	20005514 <NVIC_ClearPendingIRQ>

        /* Enable receive interrupt. */
        set_bit_reg8(&this_uart->hw_reg->IER,ERBFI);
200058ec:	68fb      	ldr	r3, [r7, #12]
200058ee:	681b      	ldr	r3, [r3, #0]
200058f0:	f103 0304 	add.w	r3, r3, #4
200058f4:	4618      	mov	r0, r3
200058f6:	f04f 0100 	mov.w	r1, #0
200058fa:	f7ff fe29 	bl	20005550 <set_bit_reg8>

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ(this_uart->irqn);
200058fe:	68fb      	ldr	r3, [r7, #12]
20005900:	791b      	ldrb	r3, [r3, #4]
20005902:	b25b      	sxtb	r3, r3
20005904:	4618      	mov	r0, r3
20005906:	f7ff fde9 	bl	200054dc <NVIC_EnableIRQ>
    }
}
2000590a:	f107 0710 	add.w	r7, r7, #16
2000590e:	46bd      	mov	sp, r7
20005910:	bd80      	pop	{r7, pc}
20005912:	bf00      	nop

20005914 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
20005914:	4668      	mov	r0, sp
20005916:	f020 0107 	bic.w	r1, r0, #7
2000591a:	468d      	mov	sp, r1
2000591c:	b589      	push	{r0, r3, r7, lr}
2000591e:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart0);
20005920:	f24e 30ec 	movw	r0, #58348	; 0xe3ec
20005924:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005928:	f000 fa1a 	bl	20005d60 <MSS_UART_isr>
}
2000592c:	46bd      	mov	sp, r7
2000592e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20005932:	4685      	mov	sp, r0
20005934:	4770      	bx	lr
20005936:	bf00      	nop

20005938 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
20005938:	4668      	mov	r0, sp
2000593a:	f020 0107 	bic.w	r1, r0, #7
2000593e:	468d      	mov	sp, r1
20005940:	b589      	push	{r0, r3, r7, lr}
20005942:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart1);
20005944:	f24e 30ac 	movw	r0, #58284	; 0xe3ac
20005948:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000594c:	f000 fa08 	bl	20005d60 <MSS_UART_isr>
}
20005950:	46bd      	mov	sp, r7
20005952:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20005956:	4685      	mov	sp, r0
20005958:	4770      	bx	lr
2000595a:	bf00      	nop

2000595c <config_baud_divisors>:
config_baud_divisors
(
    mss_uart_instance_t * this_uart,
    uint32_t baudrate
)
{
2000595c:	b580      	push	{r7, lr}
2000595e:	b088      	sub	sp, #32
20005960:	af00      	add	r7, sp, #0
20005962:	6078      	str	r0, [r7, #4]
20005964:	6039      	str	r1, [r7, #0]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005966:	687a      	ldr	r2, [r7, #4]
20005968:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
2000596c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005970:	429a      	cmp	r2, r3
20005972:	d007      	beq.n	20005984 <config_baud_divisors+0x28>
20005974:	687a      	ldr	r2, [r7, #4]
20005976:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
2000597a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000597e:	429a      	cmp	r2, r3
20005980:	d000      	beq.n	20005984 <config_baud_divisors+0x28>
20005982:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20005984:	687a      	ldr	r2, [r7, #4]
20005986:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
2000598a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000598e:	429a      	cmp	r2, r3
20005990:	d007      	beq.n	200059a2 <config_baud_divisors+0x46>
20005992:	687a      	ldr	r2, [r7, #4]
20005994:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
20005998:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000599c:	429a      	cmp	r2, r3
2000599e:	f040 80a4 	bne.w	20005aea <config_baud_divisors+0x18e>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
200059a2:	687b      	ldr	r3, [r7, #4]
200059a4:	683a      	ldr	r2, [r7, #0]
200059a6:	609a      	str	r2, [r3, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
200059a8:	f001 fbca 	bl	20007140 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
200059ac:	687a      	ldr	r2, [r7, #4]
200059ae:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
200059b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200059b6:	429a      	cmp	r2, r3
200059b8:	d106      	bne.n	200059c8 <config_baud_divisors+0x6c>
        {
            pclk_freq = g_FrequencyPCLK0;
200059ba:	f647 03c8 	movw	r3, #30920	; 0x78c8
200059be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200059c2:	681b      	ldr	r3, [r3, #0]
200059c4:	61fb      	str	r3, [r7, #28]
200059c6:	e005      	b.n	200059d4 <config_baud_divisors+0x78>
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
200059c8:	f647 03cc 	movw	r3, #30924	; 0x78cc
200059cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200059d0:	681b      	ldr	r3, [r3, #0]
200059d2:	61fb      	str	r3, [r7, #28]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
200059d4:	69fb      	ldr	r3, [r7, #28]
200059d6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
200059da:	683b      	ldr	r3, [r7, #0]
200059dc:	fbb2 f3f3 	udiv	r3, r2, r3
200059e0:	617b      	str	r3, [r7, #20]
        baud_value_by_64 = baud_value_by_128 / 2u;
200059e2:	697b      	ldr	r3, [r7, #20]
200059e4:	ea4f 0353 	mov.w	r3, r3, lsr #1
200059e8:	613b      	str	r3, [r7, #16]
        baud_value = baud_value_by_64 / 64u;
200059ea:	693b      	ldr	r3, [r7, #16]
200059ec:	ea4f 1393 	mov.w	r3, r3, lsr #6
200059f0:	60fb      	str	r3, [r7, #12]
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
200059f2:	68fb      	ldr	r3, [r7, #12]
200059f4:	ea4f 1383 	mov.w	r3, r3, lsl #6
200059f8:	693a      	ldr	r2, [r7, #16]
200059fa:	ebc3 0302 	rsb	r3, r3, r2
200059fe:	61bb      	str	r3, [r7, #24]
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
20005a00:	68fb      	ldr	r3, [r7, #12]
20005a02:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20005a06:	697a      	ldr	r2, [r7, #20]
20005a08:	ebc3 0202 	rsb	r2, r3, r2
20005a0c:	69bb      	ldr	r3, [r7, #24]
20005a0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
20005a12:	ebc3 0302 	rsb	r3, r3, r2
20005a16:	69ba      	ldr	r2, [r7, #24]
20005a18:	4413      	add	r3, r2
20005a1a:	61bb      	str	r3, [r7, #24]

        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
20005a1c:	68fa      	ldr	r2, [r7, #12]
20005a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005a22:	429a      	cmp	r2, r3
20005a24:	d900      	bls.n	20005a28 <config_baud_divisors+0xcc>
20005a26:	be00      	bkpt	0x0000

        if(baud_value <= (uint32_t)UINT16_MAX)
20005a28:	68fa      	ldr	r2, [r7, #12]
20005a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005a2e:	429a      	cmp	r2, r3
20005a30:	d85b      	bhi.n	20005aea <config_baud_divisors+0x18e>
        {
            if(baud_value > 1u)
20005a32:	68fb      	ldr	r3, [r7, #12]
20005a34:	2b01      	cmp	r3, #1
20005a36:	d931      	bls.n	20005a9c <config_baud_divisors+0x140>
            {
                /*
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005a38:	687b      	ldr	r3, [r7, #4]
20005a3a:	681b      	ldr	r3, [r3, #0]
20005a3c:	f103 030c 	add.w	r3, r3, #12
20005a40:	4618      	mov	r0, r3
20005a42:	f04f 0107 	mov.w	r1, #7
20005a46:	f7ff fd83 	bl	20005550 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20005a4a:	687b      	ldr	r3, [r7, #4]
20005a4c:	681b      	ldr	r3, [r3, #0]
20005a4e:	68fa      	ldr	r2, [r7, #12]
20005a50:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005a54:	b2d2      	uxtb	r2, r2
20005a56:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20005a58:	687b      	ldr	r3, [r7, #4]
20005a5a:	681b      	ldr	r3, [r3, #0]
20005a5c:	68fa      	ldr	r2, [r7, #12]
20005a5e:	b2d2      	uxtb	r2, r2
20005a60:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005a62:	687b      	ldr	r3, [r7, #4]
20005a64:	681b      	ldr	r3, [r3, #0]
20005a66:	f103 030c 	add.w	r3, r3, #12
20005a6a:	4618      	mov	r0, r3
20005a6c:	f04f 0107 	mov.w	r1, #7
20005a70:	f7ff fd8e 	bl	20005590 <clear_bit_reg8>

                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005a74:	687b      	ldr	r3, [r7, #4]
20005a76:	681b      	ldr	r3, [r3, #0]
20005a78:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005a7c:	4618      	mov	r0, r3
20005a7e:	f04f 0107 	mov.w	r1, #7
20005a82:	f7ff fd65 	bl	20005550 <set_bit_reg8>

                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
20005a86:	69bb      	ldr	r3, [r7, #24]
20005a88:	2bff      	cmp	r3, #255	; 0xff
20005a8a:	d900      	bls.n	20005a8e <config_baud_divisors+0x132>
20005a8c:	be00      	bkpt	0x0000
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
20005a8e:	687b      	ldr	r3, [r7, #4]
20005a90:	681b      	ldr	r3, [r3, #0]
20005a92:	69ba      	ldr	r2, [r7, #24]
20005a94:	b2d2      	uxtb	r2, r2
20005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
20005a9a:	e026      	b.n	20005aea <config_baud_divisors+0x18e>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005a9c:	687b      	ldr	r3, [r7, #4]
20005a9e:	681b      	ldr	r3, [r3, #0]
20005aa0:	f103 030c 	add.w	r3, r3, #12
20005aa4:	4618      	mov	r0, r3
20005aa6:	f04f 0107 	mov.w	r1, #7
20005aaa:	f7ff fd51 	bl	20005550 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
20005aae:	687b      	ldr	r3, [r7, #4]
20005ab0:	681b      	ldr	r3, [r3, #0]
20005ab2:	68fa      	ldr	r2, [r7, #12]
20005ab4:	ea4f 2212 	mov.w	r2, r2, lsr #8
20005ab8:	b2d2      	uxtb	r2, r2
20005aba:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
20005abc:	687b      	ldr	r3, [r7, #4]
20005abe:	681b      	ldr	r3, [r3, #0]
20005ac0:	68fa      	ldr	r2, [r7, #12]
20005ac2:	b2d2      	uxtb	r2, r2
20005ac4:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
20005ac6:	687b      	ldr	r3, [r7, #4]
20005ac8:	681b      	ldr	r3, [r3, #0]
20005aca:	f103 030c 	add.w	r3, r3, #12
20005ace:	4618      	mov	r0, r3
20005ad0:	f04f 0107 	mov.w	r1, #7
20005ad4:	f7ff fd5c 	bl	20005590 <clear_bit_reg8>

                /* Disable Fractional baud rate */
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005ad8:	687b      	ldr	r3, [r7, #4]
20005ada:	681b      	ldr	r3, [r3, #0]
20005adc:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005ae0:	4618      	mov	r0, r3
20005ae2:	f04f 0107 	mov.w	r1, #7
20005ae6:	f7ff fd53 	bl	20005590 <clear_bit_reg8>
            }
        }
    }
}
20005aea:	f107 0720 	add.w	r7, r7, #32
20005aee:	46bd      	mov	sp, r7
20005af0:	bd80      	pop	{r7, pc}
20005af2:	bf00      	nop

20005af4 <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20005af4:	b580      	push	{r7, lr}
20005af6:	b084      	sub	sp, #16
20005af8:	af00      	add	r7, sp, #0
20005afa:	60f8      	str	r0, [r7, #12]
20005afc:	60b9      	str	r1, [r7, #8]
20005afe:	4613      	mov	r3, r2
20005b00:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005b02:	68fa      	ldr	r2, [r7, #12]
20005b04:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005b0c:	429a      	cmp	r2, r3
20005b0e:	d007      	beq.n	20005b20 <global_init+0x2c>
20005b10:	68fa      	ldr	r2, [r7, #12]
20005b12:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
20005b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005b1a:	429a      	cmp	r2, r3
20005b1c:	d000      	beq.n	20005b20 <global_init+0x2c>
20005b1e:	be00      	bkpt	0x0000

    if(this_uart == &g_mss_uart0)
20005b20:	68fa      	ldr	r2, [r7, #12]
20005b22:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005b2a:	429a      	cmp	r2, r3
20005b2c:	d124      	bne.n	20005b78 <global_init+0x84>
    {
        this_uart->hw_reg = UART0;
20005b2e:	68fb      	ldr	r3, [r7, #12]
20005b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20005b34:	601a      	str	r2, [r3, #0]
        this_uart->irqn = UART0_IRQn;
20005b36:	68fb      	ldr	r3, [r7, #12]
20005b38:	f04f 020a 	mov.w	r2, #10
20005b3c:	711a      	strb	r2, [r3, #4]
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
20005b3e:	f248 0300 	movw	r3, #32768	; 0x8000
20005b42:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005b46:	f248 0200 	movw	r2, #32768	; 0x8000
20005b4a:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005b4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20005b54:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
20005b56:	f04f 000a 	mov.w	r0, #10
20005b5a:	f7ff fcdb 	bl	20005514 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
20005b5e:	f248 0300 	movw	r3, #32768	; 0x8000
20005b62:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005b66:	f248 0200 	movw	r2, #32768	; 0x8000
20005b6a:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005b6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20005b74:	649a      	str	r2, [r3, #72]	; 0x48
20005b76:	e025      	b.n	20005bc4 <global_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
20005b78:	68fa      	ldr	r2, [r7, #12]
20005b7a:	f240 0300 	movw	r3, #0
20005b7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
20005b82:	6013      	str	r3, [r2, #0]
        this_uart->irqn = UART1_IRQn;
20005b84:	68fb      	ldr	r3, [r7, #12]
20005b86:	f04f 020b 	mov.w	r2, #11
20005b8a:	711a      	strb	r2, [r3, #4]
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
20005b8c:	f248 0300 	movw	r3, #32768	; 0x8000
20005b90:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005b94:	f248 0200 	movw	r2, #32768	; 0x8000
20005b98:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005b9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005b9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20005ba2:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
20005ba4:	f04f 000b 	mov.w	r0, #11
20005ba8:	f7ff fcb4 	bl	20005514 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
20005bac:	f248 0300 	movw	r3, #32768	; 0x8000
20005bb0:	f2c4 0303 	movt	r3, #16387	; 0x4003
20005bb4:	f248 0200 	movw	r2, #32768	; 0x8000
20005bb8:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005bbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005bbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20005bc2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
20005bc4:	68fb      	ldr	r3, [r7, #12]
20005bc6:	681b      	ldr	r3, [r3, #0]
20005bc8:	f04f 0200 	mov.w	r2, #0
20005bcc:	711a      	strb	r2, [r3, #4]

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
20005bce:	68fb      	ldr	r3, [r7, #12]
20005bd0:	681b      	ldr	r3, [r3, #0]
20005bd2:	f04f 0200 	mov.w	r2, #0
20005bd6:	721a      	strb	r2, [r3, #8]
    /* clear receiver FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
20005bd8:	68fb      	ldr	r3, [r7, #12]
20005bda:	681b      	ldr	r3, [r3, #0]
20005bdc:	f103 0308 	add.w	r3, r3, #8
20005be0:	4618      	mov	r0, r3
20005be2:	f04f 0101 	mov.w	r1, #1
20005be6:	f7ff fcb3 	bl	20005550 <set_bit_reg8>
    /* clear transmitter FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
20005bea:	68fb      	ldr	r3, [r7, #12]
20005bec:	681b      	ldr	r3, [r3, #0]
20005bee:	f103 0308 	add.w	r3, r3, #8
20005bf2:	4618      	mov	r0, r3
20005bf4:	f04f 0102 	mov.w	r1, #2
20005bf8:	f7ff fcaa 	bl	20005550 <set_bit_reg8>

    /* set default READY mode : Mode 0*/
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
20005bfc:	68fb      	ldr	r3, [r7, #12]
20005bfe:	681b      	ldr	r3, [r3, #0]
20005c00:	f103 0308 	add.w	r3, r3, #8
20005c04:	4618      	mov	r0, r3
20005c06:	f04f 0100 	mov.w	r1, #0
20005c0a:	f7ff fca1 	bl	20005550 <set_bit_reg8>

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
20005c0e:	68fb      	ldr	r3, [r7, #12]
20005c10:	681b      	ldr	r3, [r3, #0]
20005c12:	f103 0310 	add.w	r3, r3, #16
20005c16:	4618      	mov	r0, r3
20005c18:	f04f 0104 	mov.w	r1, #4
20005c1c:	f7ff fcb8 	bl	20005590 <clear_bit_reg8>
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
20005c20:	68fb      	ldr	r3, [r7, #12]
20005c22:	681b      	ldr	r3, [r3, #0]
20005c24:	f103 0310 	add.w	r3, r3, #16
20005c28:	4618      	mov	r0, r3
20005c2a:	f04f 0105 	mov.w	r1, #5
20005c2e:	f7ff fcaf 	bl	20005590 <clear_bit_reg8>

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
20005c32:	68fb      	ldr	r3, [r7, #12]
20005c34:	681b      	ldr	r3, [r3, #0]
20005c36:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005c3a:	4618      	mov	r0, r3
20005c3c:	f04f 0101 	mov.w	r1, #1
20005c40:	f7ff fca6 	bl	20005590 <clear_bit_reg8>
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
20005c44:	68fb      	ldr	r3, [r7, #12]
20005c46:	681b      	ldr	r3, [r3, #0]
20005c48:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005c4c:	4618      	mov	r0, r3
20005c4e:	f04f 0100 	mov.w	r1, #0
20005c52:	f7ff fc9d 	bl	20005590 <clear_bit_reg8>

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
20005c56:	68fb      	ldr	r3, [r7, #12]
20005c58:	681b      	ldr	r3, [r3, #0]
20005c5a:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005c5e:	4618      	mov	r0, r3
20005c60:	f04f 0101 	mov.w	r1, #1
20005c64:	f7ff fc94 	bl	20005590 <clear_bit_reg8>

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG);
20005c68:	68fb      	ldr	r3, [r7, #12]
20005c6a:	681b      	ldr	r3, [r3, #0]
20005c6c:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005c70:	4618      	mov	r0, r3
20005c72:	f04f 0105 	mov.w	r1, #5
20005c76:	f7ff fc8b 	bl	20005590 <clear_bit_reg8>

    /* set default RX timeout */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO);
20005c7a:	68fb      	ldr	r3, [r7, #12]
20005c7c:	681b      	ldr	r3, [r3, #0]
20005c7e:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005c82:	4618      	mov	r0, r3
20005c84:	f04f 0106 	mov.w	r1, #6
20005c88:	f7ff fc82 	bl	20005590 <clear_bit_reg8>

    /* disable fractional baud-rate */
    clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
20005c8c:	68fb      	ldr	r3, [r7, #12]
20005c8e:	681b      	ldr	r3, [r3, #0]
20005c90:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005c94:	4618      	mov	r0, r3
20005c96:	f04f 0107 	mov.w	r1, #7
20005c9a:	f7ff fc79 	bl	20005590 <clear_bit_reg8>

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
20005c9e:	68fb      	ldr	r3, [r7, #12]
20005ca0:	681b      	ldr	r3, [r3, #0]
20005ca2:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005ca6:	4618      	mov	r0, r3
20005ca8:	f04f 0103 	mov.w	r1, #3
20005cac:	f7ff fc70 	bl	20005590 <clear_bit_reg8>

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
20005cb0:	68fb      	ldr	r3, [r7, #12]
20005cb2:	681b      	ldr	r3, [r3, #0]
20005cb4:	f04f 0200 	mov.w	r2, #0
20005cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
20005cbc:	68fb      	ldr	r3, [r7, #12]
20005cbe:	681b      	ldr	r3, [r3, #0]
20005cc0:	f04f 0200 	mov.w	r2, #0
20005cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
20005cc8:	68fb      	ldr	r3, [r7, #12]
20005cca:	681b      	ldr	r3, [r3, #0]
20005ccc:	f04f 0200 	mov.w	r2, #0
20005cd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*
     * Configure baud rate divisors. This uses the frational baud rate divisor
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);
20005cd4:	68f8      	ldr	r0, [r7, #12]
20005cd6:	68b9      	ldr	r1, [r7, #8]
20005cd8:	f7ff fe40 	bl	2000595c <config_baud_divisors>

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20005cdc:	68fb      	ldr	r3, [r7, #12]
20005cde:	681b      	ldr	r3, [r3, #0]
20005ce0:	79fa      	ldrb	r2, [r7, #7]
20005ce2:	731a      	strb	r2, [r3, #12]

    /* Instance setup */
    this_uart->baudrate = baud_rate;
20005ce4:	68fb      	ldr	r3, [r7, #12]
20005ce6:	68ba      	ldr	r2, [r7, #8]
20005ce8:	609a      	str	r2, [r3, #8]
    this_uart->lineconfig = line_config;
20005cea:	68fb      	ldr	r3, [r7, #12]
20005cec:	79fa      	ldrb	r2, [r7, #7]
20005cee:	731a      	strb	r2, [r3, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
20005cf0:	68fb      	ldr	r3, [r7, #12]
20005cf2:	f04f 0200 	mov.w	r2, #0
20005cf6:	615a      	str	r2, [r3, #20]
    this_uart->tx_buffer = (const uint8_t *)0;
20005cf8:	68fb      	ldr	r3, [r7, #12]
20005cfa:	f04f 0200 	mov.w	r2, #0
20005cfe:	611a      	str	r2, [r3, #16]
    this_uart->tx_idx = 0u;
20005d00:	68fb      	ldr	r3, [r7, #12]
20005d02:	f04f 0200 	mov.w	r2, #0
20005d06:	619a      	str	r2, [r3, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20005d08:	68fb      	ldr	r3, [r7, #12]
20005d0a:	f04f 0200 	mov.w	r2, #0
20005d0e:	621a      	str	r2, [r3, #32]
    this_uart->tx_handler       = NULL_HANDLER;
20005d10:	68fb      	ldr	r3, [r7, #12]
20005d12:	f04f 0200 	mov.w	r2, #0
20005d16:	625a      	str	r2, [r3, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
20005d18:	68fb      	ldr	r3, [r7, #12]
20005d1a:	f04f 0200 	mov.w	r2, #0
20005d1e:	61da      	str	r2, [r3, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
20005d20:	68fb      	ldr	r3, [r7, #12]
20005d22:	f04f 0200 	mov.w	r2, #0
20005d26:	629a      	str	r2, [r3, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;
20005d28:	68fb      	ldr	r3, [r7, #12]
20005d2a:	f04f 0200 	mov.w	r2, #0
20005d2e:	62da      	str	r2, [r3, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;
20005d30:	68fb      	ldr	r3, [r7, #12]
20005d32:	f04f 0200 	mov.w	r2, #0
20005d36:	631a      	str	r2, [r3, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
20005d38:	68fb      	ldr	r3, [r7, #12]
20005d3a:	f04f 0200 	mov.w	r2, #0
20005d3e:	635a      	str	r2, [r3, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;
20005d40:	68fb      	ldr	r3, [r7, #12]
20005d42:	f04f 0200 	mov.w	r2, #0
20005d46:	639a      	str	r2, [r3, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;
20005d48:	68fb      	ldr	r3, [r7, #12]
20005d4a:	f04f 0200 	mov.w	r2, #0
20005d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
20005d50:	68fb      	ldr	r3, [r7, #12]
20005d52:	f04f 0200 	mov.w	r2, #0
20005d56:	735a      	strb	r2, [r3, #13]
}
20005d58:	f107 0710 	add.w	r7, r7, #16
20005d5c:	46bd      	mov	sp, r7
20005d5e:	bd80      	pop	{r7, pc}

20005d60 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20005d60:	b580      	push	{r7, lr}
20005d62:	b084      	sub	sp, #16
20005d64:	af00      	add	r7, sp, #0
20005d66:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005d68:	687a      	ldr	r2, [r7, #4]
20005d6a:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005d72:	429a      	cmp	r2, r3
20005d74:	d007      	beq.n	20005d86 <MSS_UART_isr+0x26>
20005d76:	687a      	ldr	r2, [r7, #4]
20005d78:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
20005d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005d80:	429a      	cmp	r2, r3
20005d82:	d000      	beq.n	20005d86 <MSS_UART_isr+0x26>
20005d84:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
20005d86:	687a      	ldr	r2, [r7, #4]
20005d88:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005d90:	429a      	cmp	r2, r3
20005d92:	d007      	beq.n	20005da4 <MSS_UART_isr+0x44>
20005d94:	687a      	ldr	r2, [r7, #4]
20005d96:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
20005d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005d9e:	429a      	cmp	r2, r3
20005da0:	f040 80ef 	bne.w	20005f82 <MSS_UART_isr+0x222>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20005da4:	687b      	ldr	r3, [r7, #4]
20005da6:	681b      	ldr	r3, [r3, #0]
20005da8:	7a1b      	ldrb	r3, [r3, #8]
20005daa:	b2db      	uxtb	r3, r3
20005dac:	f003 030f 	and.w	r3, r3, #15
20005db0:	73fb      	strb	r3, [r7, #15]

        switch (iirf)
20005db2:	7bfb      	ldrb	r3, [r7, #15]
20005db4:	2b0c      	cmp	r3, #12
20005db6:	f200 80d7 	bhi.w	20005f68 <MSS_UART_isr+0x208>
20005dba:	a201      	add	r2, pc, #4	; (adr r2, 20005dc0 <MSS_UART_isr+0x60>)
20005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005dc0:	20005df5 	.word	0x20005df5
20005dc4:	20005f69 	.word	0x20005f69
20005dc8:	20005e13 	.word	0x20005e13
20005dcc:	20005e6d 	.word	0x20005e6d
20005dd0:	20005e31 	.word	0x20005e31
20005dd4:	20005f69 	.word	0x20005f69
20005dd8:	20005e4f 	.word	0x20005e4f
20005ddc:	20005f69 	.word	0x20005f69
20005de0:	20005f69 	.word	0x20005f69
20005de4:	20005f69 	.word	0x20005f69
20005de8:	20005f69 	.word	0x20005f69
20005dec:	20005f69 	.word	0x20005f69
20005df0:	20005e31 	.word	0x20005e31
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
20005df4:	687b      	ldr	r3, [r7, #4]
20005df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005df8:	2b00      	cmp	r3, #0
20005dfa:	d100      	bne.n	20005dfe <MSS_UART_isr+0x9e>
20005dfc:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->modemsts_handler)
20005dfe:	687b      	ldr	r3, [r7, #4]
20005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005e02:	2b00      	cmp	r3, #0
20005e04:	f000 80b2 	beq.w	20005f6c <MSS_UART_isr+0x20c>
                {
                   (*(this_uart->modemsts_handler))(this_uart);
20005e08:	687b      	ldr	r3, [r7, #4]
20005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005e0c:	6878      	ldr	r0, [r7, #4]
20005e0e:	4798      	blx	r3
                }
            }
            break;
20005e10:	e0b7      	b.n	20005f82 <MSS_UART_isr+0x222>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
20005e12:	687b      	ldr	r3, [r7, #4]
20005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005e16:	2b00      	cmp	r3, #0
20005e18:	d100      	bne.n	20005e1c <MSS_UART_isr+0xbc>
20005e1a:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->tx_handler)
20005e1c:	687b      	ldr	r3, [r7, #4]
20005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005e20:	2b00      	cmp	r3, #0
20005e22:	f000 80a5 	beq.w	20005f70 <MSS_UART_isr+0x210>
                {
                    (*(this_uart->tx_handler))(this_uart);
20005e26:	687b      	ldr	r3, [r7, #4]
20005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005e2a:	6878      	ldr	r0, [r7, #4]
20005e2c:	4798      	blx	r3
                }
            }
            break;
20005e2e:	e0a8      	b.n	20005f82 <MSS_UART_isr+0x222>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
20005e30:	687b      	ldr	r3, [r7, #4]
20005e32:	6a1b      	ldr	r3, [r3, #32]
20005e34:	2b00      	cmp	r3, #0
20005e36:	d100      	bne.n	20005e3a <MSS_UART_isr+0xda>
20005e38:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->rx_handler)
20005e3a:	687b      	ldr	r3, [r7, #4]
20005e3c:	6a1b      	ldr	r3, [r3, #32]
20005e3e:	2b00      	cmp	r3, #0
20005e40:	f000 8098 	beq.w	20005f74 <MSS_UART_isr+0x214>
                {
                    (*(this_uart->rx_handler))(this_uart);
20005e44:	687b      	ldr	r3, [r7, #4]
20005e46:	6a1b      	ldr	r3, [r3, #32]
20005e48:	6878      	ldr	r0, [r7, #4]
20005e4a:	4798      	blx	r3
                }
            }
            break;
20005e4c:	e099      	b.n	20005f82 <MSS_UART_isr+0x222>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
20005e4e:	687b      	ldr	r3, [r7, #4]
20005e50:	69db      	ldr	r3, [r3, #28]
20005e52:	2b00      	cmp	r3, #0
20005e54:	d100      	bne.n	20005e58 <MSS_UART_isr+0xf8>
20005e56:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->linests_handler)
20005e58:	687b      	ldr	r3, [r7, #4]
20005e5a:	69db      	ldr	r3, [r3, #28]
20005e5c:	2b00      	cmp	r3, #0
20005e5e:	f000 808b 	beq.w	20005f78 <MSS_UART_isr+0x218>
                {
                   (*(this_uart->linests_handler))(this_uart);
20005e62:	687b      	ldr	r3, [r7, #4]
20005e64:	69db      	ldr	r3, [r3, #28]
20005e66:	6878      	ldr	r0, [r7, #4]
20005e68:	4798      	blx	r3
                }
            }
            break;
20005e6a:	e08a      	b.n	20005f82 <MSS_UART_isr+0x222>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
20005e6c:	687b      	ldr	r3, [r7, #4]
20005e6e:	681b      	ldr	r3, [r3, #0]
20005e70:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005e74:	4618      	mov	r0, r3
20005e76:	f04f 0100 	mov.w	r1, #0
20005e7a:	f7ff fba9 	bl	200055d0 <read_bit_reg8>
20005e7e:	4603      	mov	r3, r0
20005e80:	2b00      	cmp	r3, #0
20005e82:	d00c      	beq.n	20005e9e <MSS_UART_isr+0x13e>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
20005e84:	687b      	ldr	r3, [r7, #4]
20005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005e88:	2b00      	cmp	r3, #0
20005e8a:	d100      	bne.n	20005e8e <MSS_UART_isr+0x12e>
20005e8c:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->rto_handler)
20005e8e:	687b      	ldr	r3, [r7, #4]
20005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005e92:	2b00      	cmp	r3, #0
20005e94:	d003      	beq.n	20005e9e <MSS_UART_isr+0x13e>
                    {
                        (*(this_uart->rto_handler))(this_uart);
20005e96:	687b      	ldr	r3, [r7, #4]
20005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005e9a:	6878      	ldr	r0, [r7, #4]
20005e9c:	4798      	blx	r3
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
20005e9e:	687b      	ldr	r3, [r7, #4]
20005ea0:	681b      	ldr	r3, [r3, #0]
20005ea2:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005ea6:	4618      	mov	r0, r3
20005ea8:	f04f 0101 	mov.w	r1, #1
20005eac:	f7ff fb90 	bl	200055d0 <read_bit_reg8>
20005eb0:	4603      	mov	r3, r0
20005eb2:	2b00      	cmp	r3, #0
20005eb4:	d00c      	beq.n	20005ed0 <MSS_UART_isr+0x170>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
20005eb6:	687b      	ldr	r3, [r7, #4]
20005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005eba:	2b00      	cmp	r3, #0
20005ebc:	d100      	bne.n	20005ec0 <MSS_UART_isr+0x160>
20005ebe:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->nack_handler)
20005ec0:	687b      	ldr	r3, [r7, #4]
20005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005ec4:	2b00      	cmp	r3, #0
20005ec6:	d003      	beq.n	20005ed0 <MSS_UART_isr+0x170>
                    {
                        (*(this_uart->nack_handler))(this_uart);
20005ec8:	687b      	ldr	r3, [r7, #4]
20005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005ecc:	6878      	ldr	r0, [r7, #4]
20005ece:	4798      	blx	r3
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
20005ed0:	687b      	ldr	r3, [r7, #4]
20005ed2:	681b      	ldr	r3, [r3, #0]
20005ed4:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005ed8:	4618      	mov	r0, r3
20005eda:	f04f 0102 	mov.w	r1, #2
20005ede:	f7ff fb77 	bl	200055d0 <read_bit_reg8>
20005ee2:	4603      	mov	r3, r0
20005ee4:	2b00      	cmp	r3, #0
20005ee6:	d00c      	beq.n	20005f02 <MSS_UART_isr+0x1a2>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
20005ee8:	687b      	ldr	r3, [r7, #4]
20005eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005eec:	2b00      	cmp	r3, #0
20005eee:	d100      	bne.n	20005ef2 <MSS_UART_isr+0x192>
20005ef0:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
20005ef2:	687b      	ldr	r3, [r7, #4]
20005ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005ef6:	2b00      	cmp	r3, #0
20005ef8:	d003      	beq.n	20005f02 <MSS_UART_isr+0x1a2>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
20005efa:	687b      	ldr	r3, [r7, #4]
20005efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005efe:	6878      	ldr	r0, [r7, #4]
20005f00:	4798      	blx	r3
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
20005f02:	687b      	ldr	r3, [r7, #4]
20005f04:	681b      	ldr	r3, [r3, #0]
20005f06:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005f0a:	4618      	mov	r0, r3
20005f0c:	f04f 0103 	mov.w	r1, #3
20005f10:	f7ff fb5e 	bl	200055d0 <read_bit_reg8>
20005f14:	4603      	mov	r3, r0
20005f16:	2b00      	cmp	r3, #0
20005f18:	d00c      	beq.n	20005f34 <MSS_UART_isr+0x1d4>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
20005f1a:	687b      	ldr	r3, [r7, #4]
20005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005f1e:	2b00      	cmp	r3, #0
20005f20:	d100      	bne.n	20005f24 <MSS_UART_isr+0x1c4>
20005f22:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->break_handler)
20005f24:	687b      	ldr	r3, [r7, #4]
20005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005f28:	2b00      	cmp	r3, #0
20005f2a:	d003      	beq.n	20005f34 <MSS_UART_isr+0x1d4>
                    {
                        (*(this_uart->break_handler))(this_uart);
20005f2c:	687b      	ldr	r3, [r7, #4]
20005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005f30:	6878      	ldr	r0, [r7, #4]
20005f32:	4798      	blx	r3
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
20005f34:	687b      	ldr	r3, [r7, #4]
20005f36:	681b      	ldr	r3, [r3, #0]
20005f38:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005f3c:	4618      	mov	r0, r3
20005f3e:	f04f 0104 	mov.w	r1, #4
20005f42:	f7ff fb45 	bl	200055d0 <read_bit_reg8>
20005f46:	4603      	mov	r3, r0
20005f48:	2b00      	cmp	r3, #0
20005f4a:	d017      	beq.n	20005f7c <MSS_UART_isr+0x21c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
20005f4c:	687b      	ldr	r3, [r7, #4]
20005f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005f50:	2b00      	cmp	r3, #0
20005f52:	d100      	bne.n	20005f56 <MSS_UART_isr+0x1f6>
20005f54:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->sync_handler)
20005f56:	687b      	ldr	r3, [r7, #4]
20005f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005f5a:	2b00      	cmp	r3, #0
20005f5c:	d010      	beq.n	20005f80 <MSS_UART_isr+0x220>
                    {
                        (*(this_uart->sync_handler))(this_uart);
20005f5e:	687b      	ldr	r3, [r7, #4]
20005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005f62:	6878      	ldr	r0, [r7, #4]
20005f64:	4798      	blx	r3
                    }
                }
                break;
20005f66:	e00c      	b.n	20005f82 <MSS_UART_isr+0x222>
            }

            default:
            {
                ASSERT(INVALID_INTERRUPT);
20005f68:	be00      	bkpt	0x0000
20005f6a:	e00a      	b.n	20005f82 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->modemsts_handler)
                {
                   (*(this_uart->modemsts_handler))(this_uart);
                }
            }
            break;
20005f6c:	bf00      	nop
20005f6e:	e008      	b.n	20005f82 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->tx_handler)
                {
                    (*(this_uart->tx_handler))(this_uart);
                }
            }
            break;
20005f70:	bf00      	nop
20005f72:	e006      	b.n	20005f82 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->rx_handler)
                {
                    (*(this_uart->rx_handler))(this_uart);
                }
            }
            break;
20005f74:	bf00      	nop
20005f76:	e004      	b.n	20005f82 <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->linests_handler)
                {
                   (*(this_uart->linests_handler))(this_uart);
                }
            }
            break;
20005f78:	bf00      	nop
20005f7a:	e002      	b.n	20005f82 <MSS_UART_isr+0x222>
                    if(NULL_HANDLER != this_uart->sync_handler)
                    {
                        (*(this_uart->sync_handler))(this_uart);
                    }
                }
                break;
20005f7c:	bf00      	nop
20005f7e:	e000      	b.n	20005f82 <MSS_UART_isr+0x222>
20005f80:	bf00      	nop
                ASSERT(INVALID_INTERRUPT);
            }
            break;
        }
    }
}
20005f82:	f107 0710 	add.w	r7, r7, #16
20005f86:	46bd      	mov	sp, r7
20005f88:	bd80      	pop	{r7, pc}
20005f8a:	bf00      	nop

20005f8c <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20005f8c:	b580      	push	{r7, lr}
20005f8e:	b086      	sub	sp, #24
20005f90:	af00      	add	r7, sp, #0
20005f92:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
20005f94:	687a      	ldr	r2, [r7, #4]
20005f96:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005f9e:	429a      	cmp	r2, r3
20005fa0:	d007      	beq.n	20005fb2 <default_tx_handler+0x26>
20005fa2:	687a      	ldr	r2, [r7, #4]
20005fa4:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
20005fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005fac:	429a      	cmp	r2, r3
20005fae:	d000      	beq.n	20005fb2 <default_tx_handler+0x26>
20005fb0:	be00      	bkpt	0x0000
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
20005fb2:	687b      	ldr	r3, [r7, #4]
20005fb4:	691b      	ldr	r3, [r3, #16]
20005fb6:	2b00      	cmp	r3, #0
20005fb8:	d100      	bne.n	20005fbc <default_tx_handler+0x30>
20005fba:	be00      	bkpt	0x0000
    ASSERT(0u < this_uart->tx_buff_size);
20005fbc:	687b      	ldr	r3, [r7, #4]
20005fbe:	695b      	ldr	r3, [r3, #20]
20005fc0:	2b00      	cmp	r3, #0
20005fc2:	d100      	bne.n	20005fc6 <default_tx_handler+0x3a>
20005fc4:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005fc6:	687a      	ldr	r2, [r7, #4]
20005fc8:	f24e 33ec 	movw	r3, #58348	; 0xe3ec
20005fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005fd0:	429a      	cmp	r2, r3
20005fd2:	d006      	beq.n	20005fe2 <default_tx_handler+0x56>
20005fd4:	687a      	ldr	r2, [r7, #4]
20005fd6:	f24e 33ac 	movw	r3, #58284	; 0xe3ac
20005fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005fde:	429a      	cmp	r2, r3
20005fe0:	d155      	bne.n	2000608e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
20005fe2:	687b      	ldr	r3, [r7, #4]
20005fe4:	691b      	ldr	r3, [r3, #16]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005fe6:	2b00      	cmp	r3, #0
20005fe8:	d051      	beq.n	2000608e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
20005fea:	687b      	ldr	r3, [r7, #4]
20005fec:	695b      	ldr	r3, [r3, #20]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
20005fee:	2b00      	cmp	r3, #0
20005ff0:	d04d      	beq.n	2000608e <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20005ff2:	687b      	ldr	r3, [r7, #4]
20005ff4:	681b      	ldr	r3, [r3, #0]
20005ff6:	7d1b      	ldrb	r3, [r3, #20]
20005ff8:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
20005ffa:	687b      	ldr	r3, [r7, #4]
20005ffc:	7b5a      	ldrb	r2, [r3, #13]
20005ffe:	7afb      	ldrb	r3, [r7, #11]
20006000:	ea42 0303 	orr.w	r3, r2, r3
20006004:	b2da      	uxtb	r2, r3
20006006:	687b      	ldr	r3, [r7, #4]
20006008:	735a      	strb	r2, [r3, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
2000600a:	7afb      	ldrb	r3, [r7, #11]
2000600c:	f003 0320 	and.w	r3, r3, #32
20006010:	2b00      	cmp	r3, #0
20006012:	d029      	beq.n	20006068 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
20006014:	f04f 0310 	mov.w	r3, #16
20006018:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
2000601a:	687b      	ldr	r3, [r7, #4]
2000601c:	695a      	ldr	r2, [r3, #20]
2000601e:	687b      	ldr	r3, [r7, #4]
20006020:	699b      	ldr	r3, [r3, #24]
20006022:	ebc3 0302 	rsb	r3, r3, r2
20006026:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
20006028:	697b      	ldr	r3, [r7, #20]
2000602a:	2b0f      	cmp	r3, #15
2000602c:	d801      	bhi.n	20006032 <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
2000602e:	697b      	ldr	r3, [r7, #20]
20006030:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20006032:	f04f 0300 	mov.w	r3, #0
20006036:	60fb      	str	r3, [r7, #12]
20006038:	e012      	b.n	20006060 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
2000603a:	687b      	ldr	r3, [r7, #4]
2000603c:	681b      	ldr	r3, [r3, #0]
2000603e:	687a      	ldr	r2, [r7, #4]
20006040:	6911      	ldr	r1, [r2, #16]
20006042:	687a      	ldr	r2, [r7, #4]
20006044:	6992      	ldr	r2, [r2, #24]
20006046:	440a      	add	r2, r1
20006048:	7812      	ldrb	r2, [r2, #0]
2000604a:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
2000604c:	687b      	ldr	r3, [r7, #4]
2000604e:	699b      	ldr	r3, [r3, #24]
20006050:	f103 0201 	add.w	r2, r3, #1
20006054:	687b      	ldr	r3, [r7, #4]
20006056:	619a      	str	r2, [r3, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
20006058:	68fb      	ldr	r3, [r7, #12]
2000605a:	f103 0301 	add.w	r3, r3, #1
2000605e:	60fb      	str	r3, [r7, #12]
20006060:	68fa      	ldr	r2, [r7, #12]
20006062:	693b      	ldr	r3, [r7, #16]
20006064:	429a      	cmp	r2, r3
20006066:	d3e8      	bcc.n	2000603a <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
20006068:	687b      	ldr	r3, [r7, #4]
2000606a:	699a      	ldr	r2, [r3, #24]
2000606c:	687b      	ldr	r3, [r7, #4]
2000606e:	695b      	ldr	r3, [r3, #20]
20006070:	429a      	cmp	r2, r3
20006072:	d10c      	bne.n	2000608e <default_tx_handler+0x102>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20006074:	687b      	ldr	r3, [r7, #4]
20006076:	f04f 0200 	mov.w	r2, #0
2000607a:	615a      	str	r2, [r3, #20]
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
2000607c:	687b      	ldr	r3, [r7, #4]
2000607e:	681b      	ldr	r3, [r3, #0]
20006080:	f103 0304 	add.w	r3, r3, #4
20006084:	4618      	mov	r0, r3
20006086:	f04f 0101 	mov.w	r1, #1
2000608a:	f7ff fa81 	bl	20005590 <clear_bit_reg8>
        }
    }
}
2000608e:	f107 0718 	add.w	r7, r7, #24
20006092:	46bd      	mov	sp, r7
20006094:	bd80      	pop	{r7, pc}
20006096:	bf00      	nop

20006098 <I2C_init>:
    i2c_instance_t * this_i2c,
    addr_t base_address,
    uint8_t ser_address,
    i2c_clock_divider_t ser_clock_speed
)
{
20006098:	b580      	push	{r7, lr}
2000609a:	b086      	sub	sp, #24
2000609c:	af00      	add	r7, sp, #0
2000609e:	60f8      	str	r0, [r7, #12]
200060a0:	60b9      	str	r1, [r7, #8]
200060a2:	71fa      	strb	r2, [r7, #7]
200060a4:	71bb      	strb	r3, [r7, #6]
    psr_t saved_psr;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
200060a6:	79bb      	ldrb	r3, [r7, #6]
200060a8:	617b      	str	r3, [r7, #20]
    
    /*
     * We need to disable ints while doing this as there is no guarantee we
     * have not been called already and the ISR is active.
     */
    saved_psr = HAL_disable_interrupts();
200060aa:	f001 f9e9 	bl	20007480 <HAL_disable_interrupts>
200060ae:	4603      	mov	r3, r0
200060b0:	613b      	str	r3, [r7, #16]
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    memset(this_i2c, 0, sizeof(i2c_instance_t));
200060b2:	68f8      	ldr	r0, [r7, #12]
200060b4:	f04f 0100 	mov.w	r1, #0
200060b8:	f04f 026c 	mov.w	r2, #108	; 0x6c
200060bc:	f001 fb20 	bl	20007700 <memset>
    
    /*
     * Set base address of I2C hardware used by this instance.
     */
    this_i2c->base_address = base_address;
200060c0:	68fb      	ldr	r3, [r7, #12]
200060c2:	68ba      	ldr	r2, [r7, #8]
200060c4:	601a      	str	r2, [r3, #0]

    /*
     * Update Serial address of the device
     */
    this_i2c->ser_address = ((uint_fast8_t)ser_address << 1u);
200060c6:	79fb      	ldrb	r3, [r7, #7]
200060c8:	ea4f 0243 	mov.w	r2, r3, lsl #1
200060cc:	68fb      	ldr	r3, [r7, #12]
200060ce:	605a      	str	r2, [r3, #4]
    
    /*
     * Configure hardware.
     */
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x00); /* Reset I2C hardware. */
200060d0:	68fb      	ldr	r3, [r7, #12]
200060d2:	681b      	ldr	r3, [r3, #0]
200060d4:	4618      	mov	r0, r3
200060d6:	f04f 0106 	mov.w	r1, #6
200060da:	f04f 0240 	mov.w	r2, #64	; 0x40
200060de:	f04f 0300 	mov.w	r3, #0
200060e2:	f001 fa08 	bl	200074f6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x01); /* set enable bit */
200060e6:	68fb      	ldr	r3, [r7, #12]
200060e8:	681b      	ldr	r3, [r3, #0]
200060ea:	4618      	mov	r0, r3
200060ec:	f04f 0106 	mov.w	r1, #6
200060f0:	f04f 0240 	mov.w	r2, #64	; 0x40
200060f4:	f04f 0301 	mov.w	r3, #1
200060f8:	f001 f9fd 	bl	200074f6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR2, ( (clock_speed >> 2) & 0x01) );
200060fc:	68fb      	ldr	r3, [r7, #12]
200060fe:	681a      	ldr	r2, [r3, #0]
20006100:	697b      	ldr	r3, [r7, #20]
20006102:	ea4f 0393 	mov.w	r3, r3, lsr #2
20006106:	f003 0301 	and.w	r3, r3, #1
2000610a:	4610      	mov	r0, r2
2000610c:	f04f 0107 	mov.w	r1, #7
20006110:	f04f 0280 	mov.w	r2, #128	; 0x80
20006114:	f001 f9ef 	bl	200074f6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR1, ( (clock_speed >> 1) & 0x01) );
20006118:	68fb      	ldr	r3, [r7, #12]
2000611a:	681a      	ldr	r2, [r3, #0]
2000611c:	697b      	ldr	r3, [r7, #20]
2000611e:	ea4f 0353 	mov.w	r3, r3, lsr #1
20006122:	f003 0301 	and.w	r3, r3, #1
20006126:	4610      	mov	r0, r2
20006128:	f04f 0101 	mov.w	r1, #1
2000612c:	f04f 0202 	mov.w	r2, #2
20006130:	f001 f9e1 	bl	200074f6 <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR0, ( clock_speed & 0x01) );
20006134:	68fb      	ldr	r3, [r7, #12]
20006136:	681a      	ldr	r2, [r3, #0]
20006138:	697b      	ldr	r3, [r7, #20]
2000613a:	f003 0301 	and.w	r3, r3, #1
2000613e:	4610      	mov	r0, r2
20006140:	f04f 0100 	mov.w	r1, #0
20006144:	f04f 0201 	mov.w	r2, #1
20006148:	f001 f9d5 	bl	200074f6 <HW_set_8bit_reg_field>

    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS, this_i2c->ser_address);
2000614c:	68fb      	ldr	r3, [r7, #12]
2000614e:	681b      	ldr	r3, [r3, #0]
20006150:	f103 020c 	add.w	r2, r3, #12
20006154:	68fb      	ldr	r3, [r7, #12]
20006156:	685b      	ldr	r3, [r3, #4]
20006158:	4610      	mov	r0, r2
2000615a:	4619      	mov	r1, r3
2000615c:	f001 f9c7 	bl	200074ee <HW_set_8bit_reg>
    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS1, this_i2c->ser_address);
20006160:	68fb      	ldr	r3, [r7, #12]
20006162:	681b      	ldr	r3, [r3, #0]
20006164:	f103 021c 	add.w	r2, r3, #28
20006168:	68fb      	ldr	r3, [r7, #12]
2000616a:	685b      	ldr	r3, [r3, #4]
2000616c:	4610      	mov	r0, r2
2000616e:	4619      	mov	r1, r3
20006170:	f001 f9bd 	bl	200074ee <HW_set_8bit_reg>
    
    /*
     * Finally safe to enable interrupts.
     */
    HAL_restore_interrupts( saved_psr );
20006174:	6938      	ldr	r0, [r7, #16]
20006176:	f001 f987 	bl	20007488 <HAL_restore_interrupts>
}
2000617a:	f107 0718 	add.w	r7, r7, #24
2000617e:	46bd      	mov	sp, r7
20006180:	bd80      	pop	{r7, pc}
20006182:	bf00      	nop

20006184 <I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20006184:	b580      	push	{r7, lr}
20006186:	b086      	sub	sp, #24
20006188:	af00      	add	r7, sp, #0
2000618a:	60f8      	str	r0, [r7, #12]
2000618c:	607a      	str	r2, [r7, #4]
2000618e:	460a      	mov	r2, r1
20006190:	72fa      	strb	r2, [r7, #11]
20006192:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
20006194:	f001 f974 	bl	20007480 <HAL_disable_interrupts>
20006198:	4603      	mov	r3, r0
2000619a:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
2000619c:	68fb      	ldr	r3, [r7, #12]
2000619e:	7b1b      	ldrb	r3, [r3, #12]
200061a0:	2b00      	cmp	r3, #0
200061a2:	d103      	bne.n	200061ac <I2C_write+0x28>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
200061a4:	68fb      	ldr	r3, [r7, #12]
200061a6:	f04f 0201 	mov.w	r2, #1
200061aa:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
200061ac:	68fb      	ldr	r3, [r7, #12]
200061ae:	f04f 0201 	mov.w	r2, #1
200061b2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200061b6:	7afb      	ldrb	r3, [r7, #11]
200061b8:	ea4f 0243 	mov.w	r2, r3, lsl #1
200061bc:	68fb      	ldr	r3, [r7, #12]
200061be:	609a      	str	r2, [r3, #8]
    this_i2c->dir = WRITE_DIR;
200061c0:	68fb      	ldr	r3, [r7, #12]
200061c2:	f04f 0200 	mov.w	r2, #0
200061c6:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_buffer = write_buffer;
200061c8:	68fb      	ldr	r3, [r7, #12]
200061ca:	687a      	ldr	r2, [r7, #4]
200061cc:	619a      	str	r2, [r3, #24]
    this_i2c->master_tx_size = write_size;
200061ce:	887a      	ldrh	r2, [r7, #2]
200061d0:	68fb      	ldr	r3, [r7, #12]
200061d2:	61da      	str	r2, [r3, #28]
    this_i2c->master_tx_idx = 0u;
200061d4:	68fb      	ldr	r3, [r7, #12]
200061d6:	f04f 0200 	mov.w	r2, #0
200061da:	621a      	str	r2, [r3, #32]

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
200061dc:	68fb      	ldr	r3, [r7, #12]
200061de:	f04f 0201 	mov.w	r2, #1
200061e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    this_i2c->options = options;
200061e6:	68fb      	ldr	r3, [r7, #12]
200061e8:	f897 2020 	ldrb.w	r2, [r7, #32]
200061ec:	751a      	strb	r2, [r3, #20]

    if(I2C_IN_PROGRESS == this_i2c->slave_status)
200061ee:	68fb      	ldr	r3, [r7, #12]
200061f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200061f4:	b2db      	uxtb	r3, r3
200061f6:	2b01      	cmp	r3, #1
200061f8:	d105      	bne.n	20006206 <I2C_write+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
200061fa:	68fb      	ldr	r3, [r7, #12]
200061fc:	f04f 0201 	mov.w	r2, #1
20006200:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006204:	e00a      	b.n	2000621c <I2C_write+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006206:	68fb      	ldr	r3, [r7, #12]
20006208:	681b      	ldr	r3, [r3, #0]
2000620a:	4618      	mov	r0, r3
2000620c:	f04f 0105 	mov.w	r1, #5
20006210:	f04f 0220 	mov.w	r2, #32
20006214:	f04f 0301 	mov.w	r3, #1
20006218:	f001 f96d 	bl	200074f6 <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
2000621c:	68fb      	ldr	r3, [r7, #12]
2000621e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20006222:	2b01      	cmp	r3, #1
20006224:	d10a      	bne.n	2000623c <I2C_write+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006226:	68fb      	ldr	r3, [r7, #12]
20006228:	681b      	ldr	r3, [r3, #0]
2000622a:	4618      	mov	r0, r3
2000622c:	f04f 0103 	mov.w	r1, #3
20006230:	f04f 0208 	mov.w	r2, #8
20006234:	f04f 0300 	mov.w	r3, #0
20006238:	f001 f95d 	bl	200074f6 <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
2000623c:	68fb      	ldr	r3, [r7, #12]
2000623e:	681b      	ldr	r3, [r3, #0]
20006240:	f103 0304 	add.w	r3, r3, #4
20006244:	4618      	mov	r0, r3
20006246:	f001 f954 	bl	200074f2 <HW_get_8bit_reg>
2000624a:	4603      	mov	r3, r0
2000624c:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
2000624e:	7cfb      	ldrb	r3, [r7, #19]
20006250:	b2db      	uxtb	r3, r3
20006252:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
20006254:	68f8      	ldr	r0, [r7, #12]
20006256:	f000 fec9 	bl	20006fec <I2C_enable_irq>

    HAL_restore_interrupts( saved_psr );
2000625a:	6978      	ldr	r0, [r7, #20]
2000625c:	f001 f914 	bl	20007488 <HAL_restore_interrupts>
}
20006260:	f107 0718 	add.w	r7, r7, #24
20006264:	46bd      	mov	sp, r7
20006266:	bd80      	pop	{r7, pc}

20006268 <I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20006268:	b580      	push	{r7, lr}
2000626a:	b086      	sub	sp, #24
2000626c:	af00      	add	r7, sp, #0
2000626e:	60f8      	str	r0, [r7, #12]
20006270:	607a      	str	r2, [r7, #4]
20006272:	460a      	mov	r2, r1
20006274:	72fa      	strb	r2, [r7, #11]
20006276:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
20006278:	f001 f902 	bl	20007480 <HAL_disable_interrupts>
2000627c:	4603      	mov	r3, r0
2000627e:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20006280:	68fb      	ldr	r3, [r7, #12]
20006282:	7b1b      	ldrb	r3, [r3, #12]
20006284:	2b00      	cmp	r3, #0
20006286:	d103      	bne.n	20006290 <I2C_read+0x28>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20006288:	68fb      	ldr	r3, [r7, #12]
2000628a:	f04f 0202 	mov.w	r2, #2
2000628e:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20006290:	68fb      	ldr	r3, [r7, #12]
20006292:	f04f 0202 	mov.w	r2, #2
20006296:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
2000629a:	7afb      	ldrb	r3, [r7, #11]
2000629c:	ea4f 0243 	mov.w	r2, r3, lsl #1
200062a0:	68fb      	ldr	r3, [r7, #12]
200062a2:	609a      	str	r2, [r3, #8]

    this_i2c->dir = READ_DIR;
200062a4:	68fb      	ldr	r3, [r7, #12]
200062a6:	f04f 0201 	mov.w	r2, #1
200062aa:	625a      	str	r2, [r3, #36]	; 0x24

    this_i2c->master_rx_buffer = read_buffer;
200062ac:	68fb      	ldr	r3, [r7, #12]
200062ae:	687a      	ldr	r2, [r7, #4]
200062b0:	629a      	str	r2, [r3, #40]	; 0x28
    this_i2c->master_rx_size = read_size;
200062b2:	887a      	ldrh	r2, [r7, #2]
200062b4:	68fb      	ldr	r3, [r7, #12]
200062b6:	62da      	str	r2, [r3, #44]	; 0x2c
    this_i2c->master_rx_idx = 0u;
200062b8:	68fb      	ldr	r3, [r7, #12]
200062ba:	f04f 0200 	mov.w	r2, #0
200062be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
200062c0:	68fb      	ldr	r3, [r7, #12]
200062c2:	f04f 0201 	mov.w	r2, #1
200062c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    this_i2c->options = options;
200062ca:	68fb      	ldr	r3, [r7, #12]
200062cc:	f897 2020 	ldrb.w	r2, [r7, #32]
200062d0:	751a      	strb	r2, [r3, #20]
    
    if(I2C_IN_PROGRESS == this_i2c->slave_status)
200062d2:	68fb      	ldr	r3, [r7, #12]
200062d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
200062d8:	b2db      	uxtb	r3, r3
200062da:	2b01      	cmp	r3, #1
200062dc:	d105      	bne.n	200062ea <I2C_read+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
200062de:	68fb      	ldr	r3, [r7, #12]
200062e0:	f04f 0201 	mov.w	r2, #1
200062e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
200062e8:	e00a      	b.n	20006300 <I2C_read+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
200062ea:	68fb      	ldr	r3, [r7, #12]
200062ec:	681b      	ldr	r3, [r3, #0]
200062ee:	4618      	mov	r0, r3
200062f0:	f04f 0105 	mov.w	r1, #5
200062f4:	f04f 0220 	mov.w	r2, #32
200062f8:	f04f 0301 	mov.w	r3, #1
200062fc:	f001 f8fb 	bl	200074f6 <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
20006300:	68fb      	ldr	r3, [r7, #12]
20006302:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20006306:	2b01      	cmp	r3, #1
20006308:	d10a      	bne.n	20006320 <I2C_read+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
2000630a:	68fb      	ldr	r3, [r7, #12]
2000630c:	681b      	ldr	r3, [r3, #0]
2000630e:	4618      	mov	r0, r3
20006310:	f04f 0103 	mov.w	r1, #3
20006314:	f04f 0208 	mov.w	r2, #8
20006318:	f04f 0300 	mov.w	r3, #0
2000631c:	f001 f8eb 	bl	200074f6 <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20006320:	68fb      	ldr	r3, [r7, #12]
20006322:	681b      	ldr	r3, [r3, #0]
20006324:	f103 0304 	add.w	r3, r3, #4
20006328:	4618      	mov	r0, r3
2000632a:	f001 f8e2 	bl	200074f2 <HW_get_8bit_reg>
2000632e:	4603      	mov	r3, r0
20006330:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20006332:	7cfb      	ldrb	r3, [r7, #19]
20006334:	b2db      	uxtb	r3, r3
20006336:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
20006338:	68f8      	ldr	r0, [r7, #12]
2000633a:	f000 fe57 	bl	20006fec <I2C_enable_irq>
    HAL_restore_interrupts( saved_psr );
2000633e:	6978      	ldr	r0, [r7, #20]
20006340:	f001 f8a2 	bl	20007488 <HAL_restore_interrupts>
}
20006344:	f107 0718 	add.w	r7, r7, #24
20006348:	46bd      	mov	sp, r7
2000634a:	bd80      	pop	{r7, pc}

2000634c <I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
2000634c:	b580      	push	{r7, lr}
2000634e:	b086      	sub	sp, #24
20006350:	af00      	add	r7, sp, #0
20006352:	60f8      	str	r0, [r7, #12]
20006354:	607a      	str	r2, [r7, #4]
20006356:	460a      	mov	r2, r1
20006358:	72fa      	strb	r2, [r7, #11]
2000635a:	807b      	strh	r3, [r7, #2]
    HAL_ASSERT(offset_size > 0u);
2000635c:	887b      	ldrh	r3, [r7, #2]
2000635e:	2b00      	cmp	r3, #0
20006360:	d100      	bne.n	20006364 <I2C_write_read+0x18>
20006362:	be00      	bkpt	0x0000
    HAL_ASSERT(addr_offset != (uint8_t *)0);
20006364:	687b      	ldr	r3, [r7, #4]
20006366:	2b00      	cmp	r3, #0
20006368:	d100      	bne.n	2000636c <I2C_write_read+0x20>
2000636a:	be00      	bkpt	0x0000
    HAL_ASSERT(read_size > 0u);
2000636c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
2000636e:	2b00      	cmp	r3, #0
20006370:	d100      	bne.n	20006374 <I2C_write_read+0x28>
20006372:	be00      	bkpt	0x0000
    HAL_ASSERT(read_buffer != (uint8_t *)0);
20006374:	6a3b      	ldr	r3, [r7, #32]
20006376:	2b00      	cmp	r3, #0
20006378:	d100      	bne.n	2000637c <I2C_write_read+0x30>
2000637a:	be00      	bkpt	0x0000
    
    this_i2c->master_status = I2C_FAILED;
2000637c:	68fb      	ldr	r3, [r7, #12]
2000637e:	f04f 0202 	mov.w	r2, #2
20006382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if((read_size > 0u) && (offset_size > 0u))
20006386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20006388:	2b00      	cmp	r3, #0
2000638a:	d072      	beq.n	20006472 <I2C_write_read+0x126>
2000638c:	887b      	ldrh	r3, [r7, #2]
2000638e:	2b00      	cmp	r3, #0
20006390:	d06f      	beq.n	20006472 <I2C_write_read+0x126>
    {
        psr_t saved_psr;
        volatile uint8_t stat_ctrl;

        saved_psr = HAL_disable_interrupts();
20006392:	f001 f875 	bl	20007480 <HAL_disable_interrupts>
20006396:	4603      	mov	r3, r0
20006398:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
2000639a:	68fb      	ldr	r3, [r7, #12]
2000639c:	7b1b      	ldrb	r3, [r3, #12]
2000639e:	2b00      	cmp	r3, #0
200063a0:	d103      	bne.n	200063aa <I2C_write_read+0x5e>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
200063a2:	68fb      	ldr	r3, [r7, #12]
200063a4:	f04f 0203 	mov.w	r2, #3
200063a8:	731a      	strb	r2, [r3, #12]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
200063aa:	68fb      	ldr	r3, [r7, #12]
200063ac:	f04f 0203 	mov.w	r2, #3
200063b0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200063b4:	7afb      	ldrb	r3, [r7, #11]
200063b6:	ea4f 0243 	mov.w	r2, r3, lsl #1
200063ba:	68fb      	ldr	r3, [r7, #12]
200063bc:	609a      	str	r2, [r3, #8]

        this_i2c->dir = WRITE_DIR;
200063be:	68fb      	ldr	r3, [r7, #12]
200063c0:	f04f 0200 	mov.w	r2, #0
200063c4:	625a      	str	r2, [r3, #36]	; 0x24

        this_i2c->master_tx_buffer = addr_offset;
200063c6:	68fb      	ldr	r3, [r7, #12]
200063c8:	687a      	ldr	r2, [r7, #4]
200063ca:	619a      	str	r2, [r3, #24]
        this_i2c->master_tx_size = offset_size;
200063cc:	887a      	ldrh	r2, [r7, #2]
200063ce:	68fb      	ldr	r3, [r7, #12]
200063d0:	61da      	str	r2, [r3, #28]
        this_i2c->master_tx_idx = 0u;
200063d2:	68fb      	ldr	r3, [r7, #12]
200063d4:	f04f 0200 	mov.w	r2, #0
200063d8:	621a      	str	r2, [r3, #32]

        this_i2c->master_rx_buffer = read_buffer;
200063da:	68fb      	ldr	r3, [r7, #12]
200063dc:	6a3a      	ldr	r2, [r7, #32]
200063de:	629a      	str	r2, [r3, #40]	; 0x28
        this_i2c->master_rx_size = read_size;
200063e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
200063e2:	68fb      	ldr	r3, [r7, #12]
200063e4:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_rx_idx = 0u;
200063e6:	68fb      	ldr	r3, [r7, #12]
200063e8:	f04f 0200 	mov.w	r2, #0
200063ec:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Set I2C status in progress */
        this_i2c->master_status = I2C_IN_PROGRESS;
200063ee:	68fb      	ldr	r3, [r7, #12]
200063f0:	f04f 0201 	mov.w	r2, #1
200063f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        this_i2c->options = options;
200063f8:	68fb      	ldr	r3, [r7, #12]
200063fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
200063fe:	751a      	strb	r2, [r3, #20]
        
        if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006400:	68fb      	ldr	r3, [r7, #12]
20006402:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006406:	b2db      	uxtb	r3, r3
20006408:	2b01      	cmp	r3, #1
2000640a:	d105      	bne.n	20006418 <I2C_write_read+0xcc>
        {
            this_i2c->is_transaction_pending = 1u;
2000640c:	68fb      	ldr	r3, [r7, #12]
2000640e:	f04f 0201 	mov.w	r2, #1
20006412:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006416:	e00a      	b.n	2000642e <I2C_write_read+0xe2>
        }
        else
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006418:	68fb      	ldr	r3, [r7, #12]
2000641a:	681b      	ldr	r3, [r3, #0]
2000641c:	4618      	mov	r0, r3
2000641e:	f04f 0105 	mov.w	r1, #5
20006422:	f04f 0220 	mov.w	r2, #32
20006426:	f04f 0301 	mov.w	r3, #1
2000642a:	f001 f864 	bl	200074f6 <HW_set_8bit_reg_field>
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( I2C_HOLD_BUS == this_i2c->bus_status )
2000642e:	68fb      	ldr	r3, [r7, #12]
20006430:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20006434:	2b01      	cmp	r3, #1
20006436:	d10a      	bne.n	2000644e <I2C_write_read+0x102>
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006438:	68fb      	ldr	r3, [r7, #12]
2000643a:	681b      	ldr	r3, [r3, #0]
2000643c:	4618      	mov	r0, r3
2000643e:	f04f 0103 	mov.w	r1, #3
20006442:	f04f 0208 	mov.w	r2, #8
20006446:	f04f 0300 	mov.w	r3, #0
2000644a:	f001 f854 	bl	200074f6 <HW_set_8bit_reg_field>
        }

        stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
2000644e:	68fb      	ldr	r3, [r7, #12]
20006450:	681b      	ldr	r3, [r3, #0]
20006452:	f103 0304 	add.w	r3, r3, #4
20006456:	4618      	mov	r0, r3
20006458:	f001 f84b 	bl	200074f2 <HW_get_8bit_reg>
2000645c:	4603      	mov	r3, r0
2000645e:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
20006460:	7cfb      	ldrb	r3, [r7, #19]
20006462:	b2db      	uxtb	r3, r3
20006464:	74fb      	strb	r3, [r7, #19]
            
        /* Enable the interrupt. ( Re-enable) */
        I2C_enable_irq( this_i2c );
20006466:	68f8      	ldr	r0, [r7, #12]
20006468:	f000 fdc0 	bl	20006fec <I2C_enable_irq>

        HAL_restore_interrupts( saved_psr );
2000646c:	6978      	ldr	r0, [r7, #20]
2000646e:	f001 f80b 	bl	20007488 <HAL_restore_interrupts>
    }
}
20006472:	f107 0718 	add.w	r7, r7, #24
20006476:	46bd      	mov	sp, r7
20006478:	bd80      	pop	{r7, pc}
2000647a:	bf00      	nop

2000647c <I2C_wait_complete>:
i2c_status_t I2C_wait_complete
(
    i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
2000647c:	b580      	push	{r7, lr}
2000647e:	b084      	sub	sp, #16
20006480:	af00      	add	r7, sp, #0
20006482:	6078      	str	r0, [r7, #4]
20006484:	6039      	str	r1, [r7, #0]
     * Because we have no idea of what CPU we are supposed to be running on
     * we need to guard this write to the timeout value to avoid ISR/user code
     * interaction issues. Checking the status below should be fine as only a
     * single byte should change in that.
     */
    saved_psr = HAL_disable_interrupts();
20006486:	f000 fffb 	bl	20007480 <HAL_disable_interrupts>
2000648a:	4603      	mov	r3, r0
2000648c:	60fb      	str	r3, [r7, #12]
    this_i2c->master_timeout_ms = timeout_ms;
2000648e:	687b      	ldr	r3, [r7, #4]
20006490:	683a      	ldr	r2, [r7, #0]
20006492:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_restore_interrupts( saved_psr );
20006494:	68f8      	ldr	r0, [r7, #12]
20006496:	f000 fff7 	bl	20007488 <HAL_restore_interrupts>

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
2000649a:	687b      	ldr	r3, [r7, #4]
2000649c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200064a0:	72fb      	strb	r3, [r7, #11]
    } while(I2C_IN_PROGRESS == i2c_status);
200064a2:	7afb      	ldrb	r3, [r7, #11]
200064a4:	2b01      	cmp	r3, #1
200064a6:	d0f8      	beq.n	2000649a <I2C_wait_complete+0x1e>
    return i2c_status;
200064a8:	7afb      	ldrb	r3, [r7, #11]
}
200064aa:	4618      	mov	r0, r3
200064ac:	f107 0710 	add.w	r7, r7, #16
200064b0:	46bd      	mov	sp, r7
200064b2:	bd80      	pop	{r7, pc}

200064b4 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    i2c_instance_t * this_i2c
)
{
200064b4:	b580      	push	{r7, lr}
200064b6:	b082      	sub	sp, #8
200064b8:	af00      	add	r7, sp, #0
200064ba:	6078      	str	r0, [r7, #4]
    /*
     * This function is only called from within the ISR and so does not need
     * guarding on the register access.
     */
    if( 0 != this_i2c->is_slave_enabled )
200064bc:	687b      	ldr	r3, [r7, #4]
200064be:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
200064c2:	2b00      	cmp	r3, #0
200064c4:	d00a      	beq.n	200064dc <enable_slave_if_required+0x28>
    {
        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
200064c6:	687b      	ldr	r3, [r7, #4]
200064c8:	681b      	ldr	r3, [r3, #0]
200064ca:	4618      	mov	r0, r3
200064cc:	f04f 0102 	mov.w	r1, #2
200064d0:	f04f 0204 	mov.w	r2, #4
200064d4:	f04f 0301 	mov.w	r3, #1
200064d8:	f001 f80d 	bl	200074f6 <HW_set_8bit_reg_field>
    }
}
200064dc:	f107 0708 	add.w	r7, r7, #8
200064e0:	46bd      	mov	sp, r7
200064e2:	bd80      	pop	{r7, pc}

200064e4 <I2C_isr>:
 */
void I2C_isr
(
    i2c_instance_t * this_i2c
)
{
200064e4:	b5b0      	push	{r4, r5, r7, lr}
200064e6:	b084      	sub	sp, #16
200064e8:	af00      	add	r7, sp, #0
200064ea:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
200064ec:	f04f 0301 	mov.w	r3, #1
200064f0:	73bb      	strb	r3, [r7, #14]

    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
200064f2:	687b      	ldr	r3, [r7, #4]
200064f4:	681b      	ldr	r3, [r3, #0]
200064f6:	f103 0304 	add.w	r3, r3, #4
200064fa:	4618      	mov	r0, r3
200064fc:	f000 fff9 	bl	200074f2 <HW_get_8bit_reg>
20006500:	4603      	mov	r3, r0
20006502:	72fb      	strb	r3, [r7, #11]
    
    switch( status )
20006504:	7afb      	ldrb	r3, [r7, #11]
20006506:	b2db      	uxtb	r3, r3
20006508:	f1a3 0308 	sub.w	r3, r3, #8
2000650c:	2bd8      	cmp	r3, #216	; 0xd8
2000650e:	f200 84e3 	bhi.w	20006ed8 <I2C_isr+0x9f4>
20006512:	a201      	add	r2, pc, #4	; (adr r2, 20006518 <I2C_isr+0x34>)
20006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20006518:	2000687d 	.word	0x2000687d
2000651c:	20006ed9 	.word	0x20006ed9
20006520:	20006ed9 	.word	0x20006ed9
20006524:	20006ed9 	.word	0x20006ed9
20006528:	20006ed9 	.word	0x20006ed9
2000652c:	20006ed9 	.word	0x20006ed9
20006530:	20006ed9 	.word	0x20006ed9
20006534:	20006ed9 	.word	0x20006ed9
20006538:	2000687d 	.word	0x2000687d
2000653c:	20006ed9 	.word	0x20006ed9
20006540:	20006ed9 	.word	0x20006ed9
20006544:	20006ed9 	.word	0x20006ed9
20006548:	20006ed9 	.word	0x20006ed9
2000654c:	20006ed9 	.word	0x20006ed9
20006550:	20006ed9 	.word	0x20006ed9
20006554:	20006ed9 	.word	0x20006ed9
20006558:	20006953 	.word	0x20006953
2000655c:	20006ed9 	.word	0x20006ed9
20006560:	20006ed9 	.word	0x20006ed9
20006564:	20006ed9 	.word	0x20006ed9
20006568:	20006ed9 	.word	0x20006ed9
2000656c:	20006ed9 	.word	0x20006ed9
20006570:	20006ed9 	.word	0x20006ed9
20006574:	20006ed9 	.word	0x20006ed9
20006578:	20006923 	.word	0x20006923
2000657c:	20006ed9 	.word	0x20006ed9
20006580:	20006ed9 	.word	0x20006ed9
20006584:	20006ed9 	.word	0x20006ed9
20006588:	20006ed9 	.word	0x20006ed9
2000658c:	20006ed9 	.word	0x20006ed9
20006590:	20006ed9 	.word	0x20006ed9
20006594:	20006ed9 	.word	0x20006ed9
20006598:	20006953 	.word	0x20006953
2000659c:	20006ed9 	.word	0x20006ed9
200065a0:	20006ed9 	.word	0x20006ed9
200065a4:	20006ed9 	.word	0x20006ed9
200065a8:	20006ed9 	.word	0x20006ed9
200065ac:	20006ed9 	.word	0x20006ed9
200065b0:	20006ed9 	.word	0x20006ed9
200065b4:	20006ed9 	.word	0x20006ed9
200065b8:	20006a03 	.word	0x20006a03
200065bc:	20006ed9 	.word	0x20006ed9
200065c0:	20006ed9 	.word	0x20006ed9
200065c4:	20006ed9 	.word	0x20006ed9
200065c8:	20006ed9 	.word	0x20006ed9
200065cc:	20006ed9 	.word	0x20006ed9
200065d0:	20006ed9 	.word	0x20006ed9
200065d4:	20006ed9 	.word	0x20006ed9
200065d8:	2000690b 	.word	0x2000690b
200065dc:	20006ed9 	.word	0x20006ed9
200065e0:	20006ed9 	.word	0x20006ed9
200065e4:	20006ed9 	.word	0x20006ed9
200065e8:	20006ed9 	.word	0x20006ed9
200065ec:	20006ed9 	.word	0x20006ed9
200065f0:	20006ed9 	.word	0x20006ed9
200065f4:	20006ed9 	.word	0x20006ed9
200065f8:	20006a33 	.word	0x20006a33
200065fc:	20006ed9 	.word	0x20006ed9
20006600:	20006ed9 	.word	0x20006ed9
20006604:	20006ed9 	.word	0x20006ed9
20006608:	20006ed9 	.word	0x20006ed9
2000660c:	20006ed9 	.word	0x20006ed9
20006610:	20006ed9 	.word	0x20006ed9
20006614:	20006ed9 	.word	0x20006ed9
20006618:	20006ab3 	.word	0x20006ab3
2000661c:	20006ed9 	.word	0x20006ed9
20006620:	20006ed9 	.word	0x20006ed9
20006624:	20006ed9 	.word	0x20006ed9
20006628:	20006ed9 	.word	0x20006ed9
2000662c:	20006ed9 	.word	0x20006ed9
20006630:	20006ed9 	.word	0x20006ed9
20006634:	20006ed9 	.word	0x20006ed9
20006638:	20006ae3 	.word	0x20006ae3
2000663c:	20006ed9 	.word	0x20006ed9
20006640:	20006ed9 	.word	0x20006ed9
20006644:	20006ed9 	.word	0x20006ed9
20006648:	20006ed9 	.word	0x20006ed9
2000664c:	20006ed9 	.word	0x20006ed9
20006650:	20006ed9 	.word	0x20006ed9
20006654:	20006ed9 	.word	0x20006ed9
20006658:	20006b33 	.word	0x20006b33
2000665c:	20006ed9 	.word	0x20006ed9
20006660:	20006ed9 	.word	0x20006ed9
20006664:	20006ed9 	.word	0x20006ed9
20006668:	20006ed9 	.word	0x20006ed9
2000666c:	20006ed9 	.word	0x20006ed9
20006670:	20006ed9 	.word	0x20006ed9
20006674:	20006ed9 	.word	0x20006ed9
20006678:	20006bfd 	.word	0x20006bfd
2000667c:	20006ed9 	.word	0x20006ed9
20006680:	20006ed9 	.word	0x20006ed9
20006684:	20006ed9 	.word	0x20006ed9
20006688:	20006ed9 	.word	0x20006ed9
2000668c:	20006ed9 	.word	0x20006ed9
20006690:	20006ed9 	.word	0x20006ed9
20006694:	20006ed9 	.word	0x20006ed9
20006698:	20006bf3 	.word	0x20006bf3
2000669c:	20006ed9 	.word	0x20006ed9
200066a0:	20006ed9 	.word	0x20006ed9
200066a4:	20006ed9 	.word	0x20006ed9
200066a8:	20006ed9 	.word	0x20006ed9
200066ac:	20006ed9 	.word	0x20006ed9
200066b0:	20006ed9 	.word	0x20006ed9
200066b4:	20006ed9 	.word	0x20006ed9
200066b8:	20006bfd 	.word	0x20006bfd
200066bc:	20006ed9 	.word	0x20006ed9
200066c0:	20006ed9 	.word	0x20006ed9
200066c4:	20006ed9 	.word	0x20006ed9
200066c8:	20006ed9 	.word	0x20006ed9
200066cc:	20006ed9 	.word	0x20006ed9
200066d0:	20006ed9 	.word	0x20006ed9
200066d4:	20006ed9 	.word	0x20006ed9
200066d8:	20006bf3 	.word	0x20006bf3
200066dc:	20006ed9 	.word	0x20006ed9
200066e0:	20006ed9 	.word	0x20006ed9
200066e4:	20006ed9 	.word	0x20006ed9
200066e8:	20006ed9 	.word	0x20006ed9
200066ec:	20006ed9 	.word	0x20006ed9
200066f0:	20006ed9 	.word	0x20006ed9
200066f4:	20006ed9 	.word	0x20006ed9
200066f8:	20006c59 	.word	0x20006c59
200066fc:	20006ed9 	.word	0x20006ed9
20006700:	20006ed9 	.word	0x20006ed9
20006704:	20006ed9 	.word	0x20006ed9
20006708:	20006ed9 	.word	0x20006ed9
2000670c:	20006ed9 	.word	0x20006ed9
20006710:	20006ed9 	.word	0x20006ed9
20006714:	20006ed9 	.word	0x20006ed9
20006718:	20006ba7 	.word	0x20006ba7
2000671c:	20006ed9 	.word	0x20006ed9
20006720:	20006ed9 	.word	0x20006ed9
20006724:	20006ed9 	.word	0x20006ed9
20006728:	20006ed9 	.word	0x20006ed9
2000672c:	20006ed9 	.word	0x20006ed9
20006730:	20006ed9 	.word	0x20006ed9
20006734:	20006ed9 	.word	0x20006ed9
20006738:	20006c59 	.word	0x20006c59
2000673c:	20006ed9 	.word	0x20006ed9
20006740:	20006ed9 	.word	0x20006ed9
20006744:	20006ed9 	.word	0x20006ed9
20006748:	20006ed9 	.word	0x20006ed9
2000674c:	20006ed9 	.word	0x20006ed9
20006750:	20006ed9 	.word	0x20006ed9
20006754:	20006ed9 	.word	0x20006ed9
20006758:	20006ba7 	.word	0x20006ba7
2000675c:	20006ed9 	.word	0x20006ed9
20006760:	20006ed9 	.word	0x20006ed9
20006764:	20006ed9 	.word	0x20006ed9
20006768:	20006ed9 	.word	0x20006ed9
2000676c:	20006ed9 	.word	0x20006ed9
20006770:	20006ed9 	.word	0x20006ed9
20006774:	20006ed9 	.word	0x20006ed9
20006778:	20006ccb 	.word	0x20006ccb
2000677c:	20006ed9 	.word	0x20006ed9
20006780:	20006ed9 	.word	0x20006ed9
20006784:	20006ed9 	.word	0x20006ed9
20006788:	20006ed9 	.word	0x20006ed9
2000678c:	20006ed9 	.word	0x20006ed9
20006790:	20006ed9 	.word	0x20006ed9
20006794:	20006ed9 	.word	0x20006ed9
20006798:	20006dbd 	.word	0x20006dbd
2000679c:	20006ed9 	.word	0x20006ed9
200067a0:	20006ed9 	.word	0x20006ed9
200067a4:	20006ed9 	.word	0x20006ed9
200067a8:	20006ed9 	.word	0x20006ed9
200067ac:	20006ed9 	.word	0x20006ed9
200067b0:	20006ed9 	.word	0x20006ed9
200067b4:	20006ed9 	.word	0x20006ed9
200067b8:	20006dbd 	.word	0x20006dbd
200067bc:	20006ed9 	.word	0x20006ed9
200067c0:	20006ed9 	.word	0x20006ed9
200067c4:	20006ed9 	.word	0x20006ed9
200067c8:	20006ed9 	.word	0x20006ed9
200067cc:	20006ed9 	.word	0x20006ed9
200067d0:	20006ed9 	.word	0x20006ed9
200067d4:	20006ed9 	.word	0x20006ed9
200067d8:	20006dbd 	.word	0x20006dbd
200067dc:	20006ed9 	.word	0x20006ed9
200067e0:	20006ed9 	.word	0x20006ed9
200067e4:	20006ed9 	.word	0x20006ed9
200067e8:	20006ed9 	.word	0x20006ed9
200067ec:	20006ed9 	.word	0x20006ed9
200067f0:	20006ed9 	.word	0x20006ed9
200067f4:	20006ed9 	.word	0x20006ed9
200067f8:	20006e87 	.word	0x20006e87
200067fc:	20006ed9 	.word	0x20006ed9
20006800:	20006ed9 	.word	0x20006ed9
20006804:	20006ed9 	.word	0x20006ed9
20006808:	20006ed9 	.word	0x20006ed9
2000680c:	20006ed9 	.word	0x20006ed9
20006810:	20006ed9 	.word	0x20006ed9
20006814:	20006ed9 	.word	0x20006ed9
20006818:	20006e87 	.word	0x20006e87
2000681c:	20006ed9 	.word	0x20006ed9
20006820:	20006ed9 	.word	0x20006ed9
20006824:	20006ed9 	.word	0x20006ed9
20006828:	20006ed9 	.word	0x20006ed9
2000682c:	20006ed9 	.word	0x20006ed9
20006830:	20006ed9 	.word	0x20006ed9
20006834:	20006ed9 	.word	0x20006ed9
20006838:	20006ed9 	.word	0x20006ed9
2000683c:	20006ed9 	.word	0x20006ed9
20006840:	20006ed9 	.word	0x20006ed9
20006844:	20006ed9 	.word	0x20006ed9
20006848:	20006ed9 	.word	0x20006ed9
2000684c:	20006ed9 	.word	0x20006ed9
20006850:	20006ed9 	.word	0x20006ed9
20006854:	20006ed9 	.word	0x20006ed9
20006858:	20006d8f 	.word	0x20006d8f
2000685c:	20006ed9 	.word	0x20006ed9
20006860:	20006ed9 	.word	0x20006ed9
20006864:	20006ed9 	.word	0x20006ed9
20006868:	20006ed9 	.word	0x20006ed9
2000686c:	20006ed9 	.word	0x20006ed9
20006870:	20006ed9 	.word	0x20006ed9
20006874:	20006ed9 	.word	0x20006ed9
20006878:	20006f2d 	.word	0x20006f2d
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            HAL_set_8bit_reg_field( this_i2c->base_address, STA, 0x00u);
2000687c:	687b      	ldr	r3, [r7, #4]
2000687e:	681b      	ldr	r3, [r3, #0]
20006880:	4618      	mov	r0, r3
20006882:	f04f 0105 	mov.w	r1, #5
20006886:	f04f 0220 	mov.w	r2, #32
2000688a:	f04f 0300 	mov.w	r3, #0
2000688e:	f000 fe32 	bl	200074f6 <HW_set_8bit_reg_field>
            HAL_set_8bit_reg( this_i2c->base_address, DATA, this_i2c->target_addr); /* write call address */
20006892:	687b      	ldr	r3, [r7, #4]
20006894:	681b      	ldr	r3, [r3, #0]
20006896:	f103 0208 	add.w	r2, r3, #8
2000689a:	687b      	ldr	r3, [r7, #4]
2000689c:	689b      	ldr	r3, [r3, #8]
2000689e:	4610      	mov	r0, r2
200068a0:	4619      	mov	r1, r3
200068a2:	f000 fe24 	bl	200074ee <HW_set_8bit_reg>
            HAL_set_8bit_reg_field( this_i2c->base_address, DIR, this_i2c->dir); /* set direction bit */
200068a6:	687b      	ldr	r3, [r7, #4]
200068a8:	681b      	ldr	r3, [r3, #0]
200068aa:	f103 0208 	add.w	r2, r3, #8
200068ae:	687b      	ldr	r3, [r7, #4]
200068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200068b2:	4610      	mov	r0, r2
200068b4:	f04f 0100 	mov.w	r1, #0
200068b8:	f04f 0201 	mov.w	r2, #1
200068bc:	f000 fe1b 	bl	200074f6 <HW_set_8bit_reg_field>
            if(this_i2c->dir == WRITE_DIR)
200068c0:	687b      	ldr	r3, [r7, #4]
200068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200068c4:	2b00      	cmp	r3, #0
200068c6:	d104      	bne.n	200068d2 <I2C_isr+0x3ee>
            {
                 this_i2c->master_tx_idx = 0u;
200068c8:	687b      	ldr	r3, [r7, #4]
200068ca:	f04f 0200 	mov.w	r2, #0
200068ce:	621a      	str	r2, [r3, #32]
200068d0:	e003      	b.n	200068da <I2C_isr+0x3f6>
            }
            else
            {
                 this_i2c->master_rx_idx = 0u;
200068d2:	687b      	ldr	r3, [r7, #4]
200068d4:	f04f 0200 	mov.w	r2, #0
200068d8:	631a      	str	r2, [r3, #48]	; 0x30
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
200068da:	687b      	ldr	r3, [r7, #4]
200068dc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200068e0:	2b00      	cmp	r3, #0
200068e2:	d004      	beq.n	200068ee <I2C_isr+0x40a>
            {
                this_i2c->is_transaction_pending = 0u;
200068e4:	687b      	ldr	r3, [r7, #4]
200068e6:	f04f 0200 	mov.w	r2, #0
200068ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
200068ee:	687b      	ldr	r3, [r7, #4]
200068f0:	7b1a      	ldrb	r2, [r3, #12]
200068f2:	687b      	ldr	r3, [r7, #4]
200068f4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
200068f8:	429a      	cmp	r2, r3
200068fa:	f000 8319 	beq.w	20006f30 <I2C_isr+0xa4c>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
200068fe:	687b      	ldr	r3, [r7, #4]
20006900:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
20006904:	687b      	ldr	r3, [r7, #4]
20006906:	731a      	strb	r2, [r3, #12]
            }
            break;
20006908:	e31b      	b.n	20006f42 <I2C_isr+0xa5e>
            
        case ST_LOST_ARB:
              /* Set start bit.  Let's keep trying!  Don't give up! */
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
2000690a:	687b      	ldr	r3, [r7, #4]
2000690c:	681b      	ldr	r3, [r3, #0]
2000690e:	4618      	mov	r0, r3
20006910:	f04f 0105 	mov.w	r1, #5
20006914:	f04f 0220 	mov.w	r2, #32
20006918:	f04f 0301 	mov.w	r3, #1
2000691c:	f000 fdeb 	bl	200074f6 <HW_set_8bit_reg_field>
              break;
20006920:	e30f      	b.n	20006f42 <I2C_isr+0xa5e>
              break;

        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20006922:	687b      	ldr	r3, [r7, #4]
20006924:	681b      	ldr	r3, [r3, #0]
20006926:	4618      	mov	r0, r3
20006928:	f04f 0104 	mov.w	r1, #4
2000692c:	f04f 0210 	mov.w	r2, #16
20006930:	f04f 0301 	mov.w	r3, #1
20006934:	f000 fddf 	bl	200074f6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20006938:	687b      	ldr	r3, [r7, #4]
2000693a:	f04f 0202 	mov.w	r2, #2
2000693e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            this_i2c->transaction = NO_TRANSACTION;
20006942:	687b      	ldr	r3, [r7, #4]
20006944:	f04f 0200 	mov.w	r2, #0
20006948:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
2000694a:	6878      	ldr	r0, [r7, #4]
2000694c:	f7ff fdb2 	bl	200064b4 <enable_slave_if_required>
            break;
20006950:	e2f7      	b.n	20006f42 <I2C_isr+0xa5e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20006952:	687b      	ldr	r3, [r7, #4]
20006954:	6a1a      	ldr	r2, [r3, #32]
20006956:	687b      	ldr	r3, [r7, #4]
20006958:	69db      	ldr	r3, [r3, #28]
2000695a:	429a      	cmp	r2, r3
2000695c:	d212      	bcs.n	20006984 <I2C_isr+0x4a0>
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
2000695e:	687b      	ldr	r3, [r7, #4]
20006960:	681b      	ldr	r3, [r3, #0]
20006962:	f103 0108 	add.w	r1, r3, #8
20006966:	687b      	ldr	r3, [r7, #4]
20006968:	699a      	ldr	r2, [r3, #24]
2000696a:	687b      	ldr	r3, [r7, #4]
2000696c:	6a1b      	ldr	r3, [r3, #32]
2000696e:	441a      	add	r2, r3
20006970:	7812      	ldrb	r2, [r2, #0]
20006972:	f103 0001 	add.w	r0, r3, #1
20006976:	687b      	ldr	r3, [r7, #4]
20006978:	6218      	str	r0, [r3, #32]
2000697a:	4608      	mov	r0, r1
2000697c:	4611      	mov	r1, r2
2000697e:	f000 fdb6 	bl	200074ee <HW_set_8bit_reg>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
20006982:	e2de      	b.n	20006f42 <I2C_isr+0xa5e>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20006984:	687b      	ldr	r3, [r7, #4]
20006986:	7b1b      	ldrb	r3, [r3, #12]
20006988:	2b03      	cmp	r3, #3
2000698a:	d10f      	bne.n	200069ac <I2C_isr+0x4c8>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
2000698c:	687b      	ldr	r3, [r7, #4]
2000698e:	f04f 0201 	mov.w	r2, #1
20006992:	625a      	str	r2, [r3, #36]	; 0x24
                 HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006994:	687b      	ldr	r3, [r7, #4]
20006996:	681b      	ldr	r3, [r3, #0]
20006998:	4618      	mov	r0, r3
2000699a:	f04f 0105 	mov.w	r1, #5
2000699e:	f04f 0220 	mov.w	r2, #32
200069a2:	f04f 0301 	mov.w	r3, #1
200069a6:	f000 fda6 	bl	200074f6 <HW_set_8bit_reg_field>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
200069aa:	e2ca      	b.n	20006f42 <I2C_isr+0xa5e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
200069ac:	687b      	ldr	r3, [r7, #4]
200069ae:	f04f 0200 	mov.w	r2, #0
200069b2:	731a      	strb	r2, [r3, #12]
                hold_bus = this_i2c->options & I2C_HOLD_BUS;
200069b4:	687b      	ldr	r3, [r7, #4]
200069b6:	7d1b      	ldrb	r3, [r3, #20]
200069b8:	f003 0301 	and.w	r3, r3, #1
200069bc:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
200069be:	687b      	ldr	r3, [r7, #4]
200069c0:	7b7a      	ldrb	r2, [r7, #13]
200069c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                if ( hold_bus == 0u )
200069c6:	7b7b      	ldrb	r3, [r7, #13]
200069c8:	2b00      	cmp	r3, #0
200069ca:	d10e      	bne.n	200069ea <I2C_isr+0x506>
                { 
                    HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
200069cc:	687b      	ldr	r3, [r7, #4]
200069ce:	681b      	ldr	r3, [r3, #0]
200069d0:	4618      	mov	r0, r3
200069d2:	f04f 0104 	mov.w	r1, #4
200069d6:	f04f 0210 	mov.w	r2, #16
200069da:	f04f 0301 	mov.w	r3, #1
200069de:	f000 fd8a 	bl	200074f6 <HW_set_8bit_reg_field>
                    enable_slave_if_required(this_i2c);
200069e2:	6878      	ldr	r0, [r7, #4]
200069e4:	f7ff fd66 	bl	200064b4 <enable_slave_if_required>
200069e8:	e005      	b.n	200069f6 <I2C_isr+0x512>
                }
                else
                {
                    I2C_disable_irq( this_i2c );
200069ea:	6878      	ldr	r0, [r7, #4]
200069ec:	f000 fb48 	bl	20007080 <I2C_disable_irq>
                    clear_irq = 0u;
200069f0:	f04f 0300 	mov.w	r3, #0
200069f4:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = I2C_SUCCESS;
200069f6:	687b      	ldr	r3, [r7, #4]
200069f8:	f04f 0200 	mov.w	r2, #0
200069fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }
            break;
20006a00:	e29f      	b.n	20006f42 <I2C_isr+0xa5e>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);/* xmt stop condition */
20006a02:	687b      	ldr	r3, [r7, #4]
20006a04:	681b      	ldr	r3, [r3, #0]
20006a06:	4618      	mov	r0, r3
20006a08:	f04f 0104 	mov.w	r1, #4
20006a0c:	f04f 0210 	mov.w	r2, #16
20006a10:	f04f 0301 	mov.w	r3, #1
20006a14:	f000 fd6f 	bl	200074f6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20006a18:	687b      	ldr	r3, [r7, #4]
20006a1a:	f04f 0202 	mov.w	r2, #2
20006a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006a22:	687b      	ldr	r3, [r7, #4]
20006a24:	f04f 0200 	mov.w	r2, #0
20006a28:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
20006a2a:	6878      	ldr	r0, [r7, #4]
20006a2c:	f7ff fd42 	bl	200064b4 <enable_slave_if_required>
            break;
20006a30:	e287      	b.n	20006f42 <I2C_isr+0xa5e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20006a32:	687b      	ldr	r3, [r7, #4]
20006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006a36:	2b01      	cmp	r3, #1
20006a38:	d90b      	bls.n	20006a52 <I2C_isr+0x56e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20006a3a:	687b      	ldr	r3, [r7, #4]
20006a3c:	681b      	ldr	r3, [r3, #0]
20006a3e:	4618      	mov	r0, r3
20006a40:	f04f 0102 	mov.w	r1, #2
20006a44:	f04f 0204 	mov.w	r2, #4
20006a48:	f04f 0301 	mov.w	r3, #1
20006a4c:	f000 fd53 	bl	200074f6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20006a50:	e277      	b.n	20006f42 <I2C_isr+0xa5e>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
            }
            else if(1u == this_i2c->master_rx_size)
20006a52:	687b      	ldr	r3, [r7, #4]
20006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006a56:	2b01      	cmp	r3, #1
20006a58:	d10b      	bne.n	20006a72 <I2C_isr+0x58e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
20006a5a:	687b      	ldr	r3, [r7, #4]
20006a5c:	681b      	ldr	r3, [r3, #0]
20006a5e:	4618      	mov	r0, r3
20006a60:	f04f 0102 	mov.w	r1, #2
20006a64:	f04f 0204 	mov.w	r2, #4
20006a68:	f04f 0300 	mov.w	r3, #0
20006a6c:	f000 fd43 	bl	200074f6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20006a70:	e267      	b.n	20006f42 <I2C_isr+0xa5e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20006a72:	687b      	ldr	r3, [r7, #4]
20006a74:	681b      	ldr	r3, [r3, #0]
20006a76:	4618      	mov	r0, r3
20006a78:	f04f 0102 	mov.w	r1, #2
20006a7c:	f04f 0204 	mov.w	r2, #4
20006a80:	f04f 0301 	mov.w	r3, #1
20006a84:	f000 fd37 	bl	200074f6 <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20006a88:	687b      	ldr	r3, [r7, #4]
20006a8a:	681b      	ldr	r3, [r3, #0]
20006a8c:	4618      	mov	r0, r3
20006a8e:	f04f 0104 	mov.w	r1, #4
20006a92:	f04f 0210 	mov.w	r2, #16
20006a96:	f04f 0301 	mov.w	r3, #1
20006a9a:	f000 fd2c 	bl	200074f6 <HW_set_8bit_reg_field>
                this_i2c->master_status = I2C_SUCCESS;
20006a9e:	687b      	ldr	r3, [r7, #4]
20006aa0:	f04f 0200 	mov.w	r2, #0
20006aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                this_i2c->transaction = NO_TRANSACTION;
20006aa8:	687b      	ldr	r3, [r7, #4]
20006aaa:	f04f 0200 	mov.w	r2, #0
20006aae:	731a      	strb	r2, [r3, #12]
            }
            break;
20006ab0:	e247      	b.n	20006f42 <I2C_isr+0xa5e>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
20006ab2:	687b      	ldr	r3, [r7, #4]
20006ab4:	681b      	ldr	r3, [r3, #0]
20006ab6:	4618      	mov	r0, r3
20006ab8:	f04f 0104 	mov.w	r1, #4
20006abc:	f04f 0210 	mov.w	r2, #16
20006ac0:	f04f 0301 	mov.w	r3, #1
20006ac4:	f000 fd17 	bl	200074f6 <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
20006ac8:	687b      	ldr	r3, [r7, #4]
20006aca:	f04f 0202 	mov.w	r2, #2
20006ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006ad2:	687b      	ldr	r3, [r7, #4]
20006ad4:	f04f 0200 	mov.w	r2, #0
20006ad8:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
20006ada:	6878      	ldr	r0, [r7, #4]
20006adc:	f7ff fcea 	bl	200064b4 <enable_slave_if_required>
            break;
20006ae0:	e22f      	b.n	20006f42 <I2C_isr+0xa5e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20006ae2:	687b      	ldr	r3, [r7, #4]
20006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20006ae6:	687a      	ldr	r2, [r7, #4]
20006ae8:	6b14      	ldr	r4, [r2, #48]	; 0x30
20006aea:	eb03 0504 	add.w	r5, r3, r4
20006aee:	687b      	ldr	r3, [r7, #4]
20006af0:	681b      	ldr	r3, [r3, #0]
20006af2:	f103 0308 	add.w	r3, r3, #8
20006af6:	4618      	mov	r0, r3
20006af8:	f000 fcfb 	bl	200074f2 <HW_get_8bit_reg>
20006afc:	4603      	mov	r3, r0
20006afe:	702b      	strb	r3, [r5, #0]
20006b00:	f104 0201 	add.w	r2, r4, #1
20006b04:	687b      	ldr	r3, [r7, #4]
20006b06:	631a      	str	r2, [r3, #48]	; 0x30
            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20006b08:	687b      	ldr	r3, [r7, #4]
20006b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20006b0c:	687b      	ldr	r3, [r7, #4]
20006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006b10:	f103 33ff 	add.w	r3, r3, #4294967295
20006b14:	429a      	cmp	r2, r3
20006b16:	f0c0 820d 	bcc.w	20006f34 <I2C_isr+0xa50>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
20006b1a:	687b      	ldr	r3, [r7, #4]
20006b1c:	681b      	ldr	r3, [r3, #0]
20006b1e:	4618      	mov	r0, r3
20006b20:	f04f 0102 	mov.w	r1, #2
20006b24:	f04f 0204 	mov.w	r2, #4
20006b28:	f04f 0300 	mov.w	r3, #0
20006b2c:	f000 fce3 	bl	200074f6 <HW_set_8bit_reg_field>
            }
            break;
20006b30:	e207      	b.n	20006f42 <I2C_isr+0xa5e>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20006b32:	687b      	ldr	r3, [r7, #4]
20006b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20006b36:	687b      	ldr	r3, [r7, #4]
20006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006b3a:	eb02 0403 	add.w	r4, r2, r3
20006b3e:	687b      	ldr	r3, [r7, #4]
20006b40:	681b      	ldr	r3, [r3, #0]
20006b42:	f103 0308 	add.w	r3, r3, #8
20006b46:	4618      	mov	r0, r3
20006b48:	f000 fcd3 	bl	200074f2 <HW_get_8bit_reg>
20006b4c:	4603      	mov	r3, r0
20006b4e:	7023      	strb	r3, [r4, #0]
          
            hold_bus = this_i2c->options & I2C_HOLD_BUS; 
20006b50:	687b      	ldr	r3, [r7, #4]
20006b52:	7d1b      	ldrb	r3, [r3, #20]
20006b54:	f003 0301 	and.w	r3, r3, #1
20006b58:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20006b5a:	687b      	ldr	r3, [r7, #4]
20006b5c:	7b7a      	ldrb	r2, [r7, #13]
20006b5e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            if ( hold_bus == 0u )
20006b62:	7b7b      	ldrb	r3, [r7, #13]
20006b64:	2b00      	cmp	r3, #0
20006b66:	d10e      	bne.n	20006b86 <I2C_isr+0x6a2>
            { 
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
20006b68:	687b      	ldr	r3, [r7, #4]
20006b6a:	681b      	ldr	r3, [r3, #0]
20006b6c:	4618      	mov	r0, r3
20006b6e:	f04f 0104 	mov.w	r1, #4
20006b72:	f04f 0210 	mov.w	r2, #16
20006b76:	f04f 0301 	mov.w	r3, #1
20006b7a:	f000 fcbc 	bl	200074f6 <HW_set_8bit_reg_field>

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20006b7e:	6878      	ldr	r0, [r7, #4]
20006b80:	f7ff fc98 	bl	200064b4 <enable_slave_if_required>
20006b84:	e005      	b.n	20006b92 <I2C_isr+0x6ae>
            }
            else
            {
                I2C_disable_irq( this_i2c );
20006b86:	6878      	ldr	r0, [r7, #4]
20006b88:	f000 fa7a 	bl	20007080 <I2C_disable_irq>
                clear_irq = 0u;
20006b8c:	f04f 0300 	mov.w	r3, #0
20006b90:	73bb      	strb	r3, [r7, #14]
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006b92:	687b      	ldr	r3, [r7, #4]
20006b94:	f04f 0200 	mov.w	r2, #0
20006b98:	731a      	strb	r2, [r3, #12]
            this_i2c->master_status = I2C_SUCCESS;
20006b9a:	687b      	ldr	r3, [r7, #4]
20006b9c:	f04f 0200 	mov.w	r2, #0
20006ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            break;
20006ba4:	e1cd      	b.n	20006f42 <I2C_isr+0xa5e>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
20006ba6:	687b      	ldr	r3, [r7, #4]
20006ba8:	681b      	ldr	r3, [r3, #0]
20006baa:	4618      	mov	r0, r3
20006bac:	f04f 0102 	mov.w	r1, #2
20006bb0:	f04f 0204 	mov.w	r2, #4
20006bb4:	f04f 0301 	mov.w	r3, #1
20006bb8:	f000 fc9d 	bl	200074f6 <HW_set_8bit_reg_field>

            this_i2c->transaction = NO_TRANSACTION;
20006bbc:	687b      	ldr	r3, [r7, #4]
20006bbe:	f04f 0200 	mov.w	r2, #0
20006bc2:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_status = I2C_SUCCESS;
20006bc4:	687b      	ldr	r3, [r7, #4]
20006bc6:	f04f 0200 	mov.w	r2, #0
20006bca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006bce:	687b      	ldr	r3, [r7, #4]
20006bd0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006bd4:	2b00      	cmp	r3, #0
20006bd6:	f000 81af 	beq.w	20006f38 <I2C_isr+0xa54>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006bda:	687b      	ldr	r3, [r7, #4]
20006bdc:	681b      	ldr	r3, [r3, #0]
20006bde:	4618      	mov	r0, r3
20006be0:	f04f 0105 	mov.w	r1, #5
20006be4:	f04f 0220 	mov.w	r2, #32
20006be8:	f04f 0301 	mov.w	r3, #1
20006bec:	f000 fc83 	bl	200074f6 <HW_set_8bit_reg_field>
            }
            break;
20006bf0:	e1a7      	b.n	20006f42 <I2C_isr+0xa5e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20006bf2:	687b      	ldr	r3, [r7, #4]
20006bf4:	f04f 0201 	mov.w	r2, #1
20006bf8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20006bfc:	687b      	ldr	r3, [r7, #4]
20006bfe:	f04f 0204 	mov.w	r2, #4
20006c02:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_rx_idx = 0u;
20006c04:	687b      	ldr	r3, [r7, #4]
20006c06:	f04f 0200 	mov.w	r2, #0
20006c0a:	651a      	str	r2, [r3, #80]	; 0x50
            this_i2c->random_read_addr = 0u;
20006c0c:	687b      	ldr	r3, [r7, #4]
20006c0e:	f04f 0200 	mov.w	r2, #0
20006c12:	611a      	str	r2, [r3, #16]
            /*
             * If Start Bit is set clear it, but store that information since it is because of
             * pending transaction
             */
            if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20006c14:	687b      	ldr	r3, [r7, #4]
20006c16:	681b      	ldr	r3, [r3, #0]
20006c18:	4618      	mov	r0, r3
20006c1a:	f04f 0105 	mov.w	r1, #5
20006c1e:	f04f 0220 	mov.w	r2, #32
20006c22:	f000 fc76 	bl	20007512 <HW_get_8bit_reg_field>
20006c26:	4603      	mov	r3, r0
20006c28:	2b00      	cmp	r3, #0
20006c2a:	d00f      	beq.n	20006c4c <I2C_isr+0x768>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006c2c:	687b      	ldr	r3, [r7, #4]
20006c2e:	681b      	ldr	r3, [r3, #0]
20006c30:	4618      	mov	r0, r3
20006c32:	f04f 0105 	mov.w	r1, #5
20006c36:	f04f 0220 	mov.w	r2, #32
20006c3a:	f04f 0300 	mov.w	r3, #0
20006c3e:	f000 fc5a 	bl	200074f6 <HW_set_8bit_reg_field>
                this_i2c->is_transaction_pending = 1u;
20006c42:	687b      	ldr	r3, [r7, #4]
20006c44:	f04f 0201 	mov.w	r2, #1
20006c48:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }
            this_i2c->slave_status = I2C_IN_PROGRESS;
20006c4c:	687b      	ldr	r3, [r7, #4]
20006c4e:	f04f 0201 	mov.w	r2, #1
20006c52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20006c56:	e174      	b.n	20006f42 <I2C_isr+0xa5e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20006c58:	687b      	ldr	r3, [r7, #4]
20006c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20006c5c:	2b00      	cmp	r3, #0
20006c5e:	d021      	beq.n	20006ca4 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20006c60:	687b      	ldr	r3, [r7, #4]
20006c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006c64:	687b      	ldr	r3, [r7, #4]
20006c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20006c68:	429a      	cmp	r2, r3
20006c6a:	d21b      	bcs.n	20006ca4 <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = HAL_get_8bit_reg(this_i2c->base_address, DATA);
20006c6c:	687b      	ldr	r3, [r7, #4]
20006c6e:	681b      	ldr	r3, [r3, #0]
20006c70:	f103 0308 	add.w	r3, r3, #8
20006c74:	4618      	mov	r0, r3
20006c76:	f000 fc3c 	bl	200074f2 <HW_get_8bit_reg>
20006c7a:	4603      	mov	r3, r0
20006c7c:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20006c7e:	687b      	ldr	r3, [r7, #4]
20006c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
20006c82:	687b      	ldr	r3, [r7, #4]
20006c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20006c86:	441a      	add	r2, r3
20006c88:	7b39      	ldrb	r1, [r7, #12]
20006c8a:	7011      	strb	r1, [r2, #0]
20006c8c:	f103 0201 	add.w	r2, r3, #1
20006c90:	687b      	ldr	r3, [r7, #4]
20006c92:	651a      	str	r2, [r3, #80]	; 0x50
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20006c94:	687b      	ldr	r3, [r7, #4]
20006c96:	691b      	ldr	r3, [r3, #16]
20006c98:	ea4f 2203 	mov.w	r2, r3, lsl #8
20006c9c:	7b3b      	ldrb	r3, [r7, #12]
20006c9e:	441a      	add	r2, r3
20006ca0:	687b      	ldr	r3, [r7, #4]
20006ca2:	611a      	str	r2, [r3, #16]
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20006ca4:	687b      	ldr	r3, [r7, #4]
20006ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006ca8:	687b      	ldr	r3, [r7, #4]
20006caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20006cac:	429a      	cmp	r2, r3
20006cae:	f0c0 8145 	bcc.w	20006f3c <I2C_isr+0xa58>
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
20006cb2:	687b      	ldr	r3, [r7, #4]
20006cb4:	681b      	ldr	r3, [r3, #0]
20006cb6:	4618      	mov	r0, r3
20006cb8:	f04f 0102 	mov.w	r1, #2
20006cbc:	f04f 0204 	mov.w	r2, #4
20006cc0:	f04f 0300 	mov.w	r3, #0
20006cc4:	f000 fc17 	bl	200074f6 <HW_set_8bit_reg_field>
            }
            break;
20006cc8:	e13b      	b.n	20006f42 <I2C_isr+0xa5e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20006cca:	687b      	ldr	r3, [r7, #4]
20006ccc:	7b1b      	ldrb	r3, [r3, #12]
20006cce:	2b04      	cmp	r3, #4
20006cd0:	d13c      	bne.n	20006d4c <I2C_isr+0x868>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20006cd2:	687b      	ldr	r3, [r7, #4]
20006cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20006cd6:	687b      	ldr	r3, [r7, #4]
20006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20006cda:	429a      	cmp	r2, r3
20006cdc:	d103      	bne.n	20006ce6 <I2C_isr+0x802>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20006cde:	687b      	ldr	r3, [r7, #4]
20006ce0:	691a      	ldr	r2, [r3, #16]
20006ce2:	687b      	ldr	r3, [r7, #4]
20006ce4:	645a      	str	r2, [r3, #68]	; 0x44
                }
                /* Call the slave's write transaction handler if it exists. */
                if ( this_i2c->slave_write_handler != 0u )
20006ce6:	687b      	ldr	r3, [r7, #4]
20006ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006cea:	2b00      	cmp	r3, #0
20006cec:	d022      	beq.n	20006d34 <I2C_isr+0x850>
                {
                    i2c_slave_handler_ret_t h_ret;
                    h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20006cee:	687b      	ldr	r3, [r7, #4]
20006cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20006cf2:	687a      	ldr	r2, [r7, #4]
20006cf4:	6c91      	ldr	r1, [r2, #72]	; 0x48
20006cf6:	687a      	ldr	r2, [r7, #4]
20006cf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
20006cfa:	b292      	uxth	r2, r2
20006cfc:	6878      	ldr	r0, [r7, #4]
20006cfe:	4798      	blx	r3
20006d00:	4603      	mov	r3, r0
20006d02:	73fb      	strb	r3, [r7, #15]
                    if ( I2C_REENABLE_SLAVE_RX == h_ret )
20006d04:	7bfb      	ldrb	r3, [r7, #15]
20006d06:	2b00      	cmp	r3, #0
20006d08:	d103      	bne.n	20006d12 <I2C_isr+0x82e>
                    {
                        /* There is a small risk that the write handler could
                         * call I2C_disable_slave() but return
                         * I2C_REENABLE_SLAVE_RX in error so we only enable
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
20006d0a:	6878      	ldr	r0, [r7, #4]
20006d0c:	f7ff fbd2 	bl	200064b4 <enable_slave_if_required>
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006d10:	e023      	b.n	20006d5a <I2C_isr+0x876>
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
                    }
                    else
                    {
                        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x0u );
20006d12:	687b      	ldr	r3, [r7, #4]
20006d14:	681b      	ldr	r3, [r3, #0]
20006d16:	4618      	mov	r0, r3
20006d18:	f04f 0102 	mov.w	r1, #2
20006d1c:	f04f 0204 	mov.w	r2, #4
20006d20:	f04f 0300 	mov.w	r3, #0
20006d24:	f000 fbe7 	bl	200074f6 <HW_set_8bit_reg_field>
                        /* Clear slave mode flag as well otherwise in mixed
                         * master/slave applications, the AA bit will get set by
                         * subsequent master operations. */
                        this_i2c->is_slave_enabled = 0u;
20006d28:	687b      	ldr	r3, [r7, #4]
20006d2a:	f04f 0200 	mov.w	r2, #0
20006d2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
20006d32:	e012      	b.n	20006d5a <I2C_isr+0x876>
20006d34:	687b      	ldr	r3, [r7, #4]
20006d36:	681b      	ldr	r3, [r3, #0]
20006d38:	4618      	mov	r0, r3
20006d3a:	f04f 0102 	mov.w	r1, #2
20006d3e:	f04f 0204 	mov.w	r2, #4
20006d42:	f04f 0301 	mov.w	r3, #1
20006d46:	f000 fbd6 	bl	200074f6 <HW_set_8bit_reg_field>
20006d4a:	e006      	b.n	20006d5a <I2C_isr+0x876>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20006d4c:	687b      	ldr	r3, [r7, #4]
20006d4e:	f04f 0200 	mov.w	r2, #0
20006d52:	645a      	str	r2, [r3, #68]	; 0x44
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20006d54:	6878      	ldr	r0, [r7, #4]
20006d56:	f7ff fbad 	bl	200064b4 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = I2C_SUCCESS;
20006d5a:	687b      	ldr	r3, [r7, #4]
20006d5c:	f04f 0200 	mov.w	r2, #0
20006d60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006d64:	687b      	ldr	r3, [r7, #4]
20006d66:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006d6a:	2b00      	cmp	r3, #0
20006d6c:	d00a      	beq.n	20006d84 <I2C_isr+0x8a0>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006d6e:	687b      	ldr	r3, [r7, #4]
20006d70:	681b      	ldr	r3, [r3, #0]
20006d72:	4618      	mov	r0, r3
20006d74:	f04f 0105 	mov.w	r1, #5
20006d78:	f04f 0220 	mov.w	r2, #32
20006d7c:	f04f 0301 	mov.w	r3, #1
20006d80:	f000 fbb9 	bl	200074f6 <HW_set_8bit_reg_field>

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006d84:	687b      	ldr	r3, [r7, #4]
20006d86:	f04f 0200 	mov.w	r2, #0
20006d8a:	731a      	strb	r2, [r3, #12]

            break;
20006d8c:	e0d9      	b.n	20006f42 <I2C_isr+0xa5e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20006d8e:	687b      	ldr	r3, [r7, #4]
20006d90:	f04f 0200 	mov.w	r2, #0
20006d94:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20006d96:	687b      	ldr	r3, [r7, #4]
20006d98:	f04f 0200 	mov.w	r2, #0
20006d9c:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006d9e:	687b      	ldr	r3, [r7, #4]
20006da0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006da4:	b2db      	uxtb	r3, r3
20006da6:	2b01      	cmp	r3, #1
20006da8:	d104      	bne.n	20006db4 <I2C_isr+0x8d0>
            {
                this_i2c->slave_status = I2C_FAILED;
20006daa:	687b      	ldr	r3, [r7, #4]
20006dac:	f04f 0202 	mov.w	r2, #2
20006db0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20006db4:	6878      	ldr	r0, [r7, #4]
20006db6:	f7ff fb7d 	bl	200064b4 <enable_slave_if_required>

            break;
20006dba:	e0c2      	b.n	20006f42 <I2C_isr+0xa5e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:       /* Arbitration lost, and: */
        case ST_RACK:           /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20006dbc:	7afb      	ldrb	r3, [r7, #11]
20006dbe:	b2db      	uxtb	r3, r3
20006dc0:	2ba8      	cmp	r3, #168	; 0xa8
20006dc2:	d128      	bne.n	20006e16 <I2C_isr+0x932>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20006dc4:	687b      	ldr	r3, [r7, #4]
20006dc6:	f04f 0205 	mov.w	r2, #5
20006dca:	731a      	strb	r2, [r3, #12]
                this_i2c->random_read_addr = 0u;
20006dcc:	687b      	ldr	r3, [r7, #4]
20006dce:	f04f 0200 	mov.w	r2, #0
20006dd2:	611a      	str	r2, [r3, #16]
                this_i2c->slave_status = I2C_IN_PROGRESS;
20006dd4:	687b      	ldr	r3, [r7, #4]
20006dd6:	f04f 0201 	mov.w	r2, #1
20006dda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
                /* If Start Bit is set clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
20006dde:	687b      	ldr	r3, [r7, #4]
20006de0:	681b      	ldr	r3, [r3, #0]
20006de2:	4618      	mov	r0, r3
20006de4:	f04f 0105 	mov.w	r1, #5
20006de8:	f04f 0220 	mov.w	r2, #32
20006dec:	f000 fb91 	bl	20007512 <HW_get_8bit_reg_field>
20006df0:	4603      	mov	r3, r0
20006df2:	2b00      	cmp	r3, #0
20006df4:	d00f      	beq.n	20006e16 <I2C_isr+0x932>
                {
                    HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006df6:	687b      	ldr	r3, [r7, #4]
20006df8:	681b      	ldr	r3, [r3, #0]
20006dfa:	4618      	mov	r0, r3
20006dfc:	f04f 0105 	mov.w	r1, #5
20006e00:	f04f 0220 	mov.w	r2, #32
20006e04:	f04f 0300 	mov.w	r3, #0
20006e08:	f000 fb75 	bl	200074f6 <HW_set_8bit_reg_field>
                    this_i2c->is_transaction_pending = 1u;
20006e0c:	687b      	ldr	r3, [r7, #4]
20006e0e:	f04f 0201 	mov.w	r2, #1
20006e12:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                 }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20006e16:	687b      	ldr	r3, [r7, #4]
20006e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006e1a:	687b      	ldr	r3, [r7, #4]
20006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006e1e:	429a      	cmp	r2, r3
20006e20:	d309      	bcc.n	20006e36 <I2C_isr+0x952>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, 0xFFu);
20006e22:	687b      	ldr	r3, [r7, #4]
20006e24:	681b      	ldr	r3, [r3, #0]
20006e26:	f103 0308 	add.w	r3, r3, #8
20006e2a:	4618      	mov	r0, r3
20006e2c:	f04f 01ff 	mov.w	r1, #255	; 0xff
20006e30:	f000 fb5d 	bl	200074ee <HW_set_8bit_reg>
20006e34:	e011      	b.n	20006e5a <I2C_isr+0x976>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++]);
20006e36:	687b      	ldr	r3, [r7, #4]
20006e38:	681b      	ldr	r3, [r3, #0]
20006e3a:	f103 0108 	add.w	r1, r3, #8
20006e3e:	687b      	ldr	r3, [r7, #4]
20006e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
20006e42:	687b      	ldr	r3, [r7, #4]
20006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006e46:	441a      	add	r2, r3
20006e48:	7812      	ldrb	r2, [r2, #0]
20006e4a:	f103 0001 	add.w	r0, r3, #1
20006e4e:	687b      	ldr	r3, [r7, #4]
20006e50:	6458      	str	r0, [r3, #68]	; 0x44
20006e52:	4608      	mov	r0, r1
20006e54:	4611      	mov	r1, r2
20006e56:	f000 fb4a 	bl	200074ee <HW_set_8bit_reg>
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20006e5a:	687b      	ldr	r3, [r7, #4]
20006e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006e5e:	687b      	ldr	r3, [r7, #4]
20006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006e62:	429a      	cmp	r2, r3
20006e64:	d36c      	bcc.n	20006f40 <I2C_isr+0xa5c>
            {
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
20006e66:	687b      	ldr	r3, [r7, #4]
20006e68:	681b      	ldr	r3, [r3, #0]
20006e6a:	4618      	mov	r0, r3
20006e6c:	f04f 0102 	mov.w	r1, #2
20006e70:	f04f 0204 	mov.w	r2, #4
20006e74:	f04f 0300 	mov.w	r3, #0
20006e78:	f000 fb3d 	bl	200074f6 <HW_set_8bit_reg_field>
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20006e7c:	687b      	ldr	r3, [r7, #4]
20006e7e:	f04f 0200 	mov.w	r2, #0
20006e82:	645a      	str	r2, [r3, #68]	; 0x44
            }
            break;
20006e84:	e05d      	b.n	20006f42 <I2C_isr+0xa5e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20006e86:	687b      	ldr	r3, [r7, #4]
20006e88:	f04f 0200 	mov.w	r2, #0
20006e8c:	645a      	str	r2, [r3, #68]	; 0x44
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u); 
20006e8e:	687b      	ldr	r3, [r7, #4]
20006e90:	681b      	ldr	r3, [r3, #0]
20006e92:	4618      	mov	r0, r3
20006e94:	f04f 0102 	mov.w	r1, #2
20006e98:	f04f 0204 	mov.w	r2, #4
20006e9c:	f04f 0301 	mov.w	r3, #1
20006ea0:	f000 fb29 	bl	200074f6 <HW_set_8bit_reg_field>

            /*  Mark previous state as complete */
            this_i2c->slave_status = I2C_SUCCESS;
20006ea4:	687b      	ldr	r3, [r7, #4]
20006ea6:	f04f 0200 	mov.w	r2, #0
20006eaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20006eae:	687b      	ldr	r3, [r7, #4]
20006eb0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006eb4:	2b00      	cmp	r3, #0
20006eb6:	d00a      	beq.n	20006ece <I2C_isr+0x9ea>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
20006eb8:	687b      	ldr	r3, [r7, #4]
20006eba:	681b      	ldr	r3, [r3, #0]
20006ebc:	4618      	mov	r0, r3
20006ebe:	f04f 0105 	mov.w	r1, #5
20006ec2:	f04f 0220 	mov.w	r2, #32
20006ec6:	f04f 0301 	mov.w	r3, #1
20006eca:	f000 fb14 	bl	200074f6 <HW_set_8bit_reg_field>
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20006ece:	687b      	ldr	r3, [r7, #4]
20006ed0:	f04f 0200 	mov.w	r2, #0
20006ed4:	731a      	strb	r2, [r3, #12]

            break;
20006ed6:	e034      	b.n	20006f42 <I2C_isr+0xa5e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
20006ed8:	687b      	ldr	r3, [r7, #4]
20006eda:	681b      	ldr	r3, [r3, #0]
20006edc:	4618      	mov	r0, r3
20006ede:	f04f 0105 	mov.w	r1, #5
20006ee2:	f04f 0220 	mov.w	r2, #32
20006ee6:	f04f 0300 	mov.w	r3, #0
20006eea:	f000 fb04 	bl	200074f6 <HW_set_8bit_reg_field>
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20006eee:	687b      	ldr	r3, [r7, #4]
20006ef0:	f04f 0200 	mov.w	r2, #0
20006ef4:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20006ef6:	687b      	ldr	r3, [r7, #4]
20006ef8:	f04f 0200 	mov.w	r2, #0
20006efc:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->master_status)
20006efe:	687b      	ldr	r3, [r7, #4]
20006f00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006f04:	b2db      	uxtb	r3, r3
20006f06:	2b01      	cmp	r3, #1
20006f08:	d104      	bne.n	20006f14 <I2C_isr+0xa30>
            {
                this_i2c->master_status = I2C_FAILED;
20006f0a:	687b      	ldr	r3, [r7, #4]
20006f0c:	f04f 0202 	mov.w	r2, #2
20006f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }

            if(I2C_IN_PROGRESS == this_i2c->slave_status)
20006f14:	687b      	ldr	r3, [r7, #4]
20006f16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006f1a:	b2db      	uxtb	r3, r3
20006f1c:	2b01      	cmp	r3, #1
20006f1e:	d110      	bne.n	20006f42 <I2C_isr+0xa5e>
            {
                this_i2c->slave_status = I2C_FAILED;
20006f20:	687b      	ldr	r3, [r7, #4]
20006f22:	f04f 0202 	mov.w	r2, #2
20006f26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006f2a:	e00a      	b.n	20006f42 <I2C_isr+0xa5e>
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
              break;

        case ST_STOP_TRANSMIT:
             /* Stop has been transmitted. Do nothing */
              break;
20006f2c:	bf00      	nop
20006f2e:	e008      	b.n	20006f42 <I2C_isr+0xa5e>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20006f30:	bf00      	nop
20006f32:	e006      	b.n	20006f42 <I2C_isr+0xa5e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            break;
20006f34:	bf00      	nop
20006f36:	e004      	b.n	20006f42 <I2C_isr+0xa5e>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
            }
            break;
20006f38:	bf00      	nop
20006f3a:	e002      	b.n	20006f42 <I2C_isr+0xa5e>
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
            }
            break;
20006f3c:	bf00      	nop
20006f3e:	e000      	b.n	20006f42 <I2C_isr+0xa5e>
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20006f40:	bf00      	nop
            }

            break;
    }
    
    if ( clear_irq )
20006f42:	7bbb      	ldrb	r3, [r7, #14]
20006f44:	2b00      	cmp	r3, #0
20006f46:	d00a      	beq.n	20006f5e <I2C_isr+0xa7a>
    {
        /* clear interrupt. */
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
20006f48:	687b      	ldr	r3, [r7, #4]
20006f4a:	681b      	ldr	r3, [r3, #0]
20006f4c:	4618      	mov	r0, r3
20006f4e:	f04f 0103 	mov.w	r1, #3
20006f52:	f04f 0208 	mov.w	r2, #8
20006f56:	f04f 0300 	mov.w	r3, #0
20006f5a:	f000 facc 	bl	200074f6 <HW_set_8bit_reg_field>
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
20006f5e:	687b      	ldr	r3, [r7, #4]
20006f60:	681b      	ldr	r3, [r3, #0]
20006f62:	f103 0304 	add.w	r3, r3, #4
20006f66:	4618      	mov	r0, r3
20006f68:	f000 fac3 	bl	200074f2 <HW_get_8bit_reg>
20006f6c:	4603      	mov	r3, r0
20006f6e:	72fb      	strb	r3, [r7, #11]
}
20006f70:	f107 0710 	add.w	r7, r7, #16
20006f74:	46bd      	mov	sp, r7
20006f76:	bdb0      	pop	{r4, r5, r7, pc}

20006f78 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20006f78:	b480      	push	{r7}
20006f7a:	b083      	sub	sp, #12
20006f7c:	af00      	add	r7, sp, #0
20006f7e:	4603      	mov	r3, r0
20006f80:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20006f82:	f24e 1300 	movw	r3, #57600	; 0xe100
20006f86:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006f8a:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006f8e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006f92:	79f9      	ldrb	r1, [r7, #7]
20006f94:	f001 011f 	and.w	r1, r1, #31
20006f98:	f04f 0001 	mov.w	r0, #1
20006f9c:	fa00 f101 	lsl.w	r1, r0, r1
20006fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006fa4:	f107 070c 	add.w	r7, r7, #12
20006fa8:	46bd      	mov	sp, r7
20006faa:	bc80      	pop	{r7}
20006fac:	4770      	bx	lr
20006fae:	bf00      	nop

20006fb0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20006fb0:	b480      	push	{r7}
20006fb2:	b083      	sub	sp, #12
20006fb4:	af00      	add	r7, sp, #0
20006fb6:	4603      	mov	r3, r0
20006fb8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20006fba:	f24e 1300 	movw	r3, #57600	; 0xe100
20006fbe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006fc2:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006fc6:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006fca:	79f9      	ldrb	r1, [r7, #7]
20006fcc:	f001 011f 	and.w	r1, r1, #31
20006fd0:	f04f 0001 	mov.w	r0, #1
20006fd4:	fa00 f101 	lsl.w	r1, r0, r1
20006fd8:	f102 0220 	add.w	r2, r2, #32
20006fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006fe0:	f107 070c 	add.w	r7, r7, #12
20006fe4:	46bd      	mov	sp, r7
20006fe6:	bc80      	pop	{r7}
20006fe8:	4770      	bx	lr
20006fea:	bf00      	nop

20006fec <I2C_enable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to enable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_enable_irq( i2c_instance_t * this_i2c )
{
20006fec:	b580      	push	{r7, lr}
20006fee:	b082      	sub	sp, #8
20006ff0:	af00      	add	r7, sp, #0
20006ff2:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
20006ff4:	687a      	ldr	r2, [r7, #4]
20006ff6:	f24e 1324 	movw	r3, #57636	; 0xe124
20006ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ffe:	429a      	cmp	r2, r3
20007000:	d103      	bne.n	2000700a <I2C_enable_irq+0x1e>
	{
		NVIC_EnableIRQ( FabricIrq0_IRQn );
20007002:	f04f 0022 	mov.w	r0, #34	; 0x22
20007006:	f7ff ffb7 	bl	20006f78 <NVIC_EnableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
2000700a:	687a      	ldr	r2, [r7, #4]
2000700c:	f24e 1390 	movw	r3, #57744	; 0xe190
20007010:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007014:	429a      	cmp	r2, r3
20007016:	d103      	bne.n	20007020 <I2C_enable_irq+0x34>
	{
		NVIC_EnableIRQ( FabricIrq1_IRQn );
20007018:	f04f 0023 	mov.w	r0, #35	; 0x23
2000701c:	f7ff ffac 	bl	20006f78 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c2)
20007020:	687a      	ldr	r2, [r7, #4]
20007022:	f64d 4334 	movw	r3, #56372	; 0xdc34
20007026:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000702a:	429a      	cmp	r2, r3
2000702c:	d103      	bne.n	20007036 <I2C_enable_irq+0x4a>
	{
		NVIC_EnableIRQ( FabricIrq2_IRQn );
2000702e:	f04f 0024 	mov.w	r0, #36	; 0x24
20007032:	f7ff ffa1 	bl	20006f78 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c3)
20007036:	687a      	ldr	r2, [r7, #4]
20007038:	f24e 2368 	movw	r3, #57960	; 0xe268
2000703c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007040:	429a      	cmp	r2, r3
20007042:	d103      	bne.n	2000704c <I2C_enable_irq+0x60>
	{
		NVIC_EnableIRQ( FabricIrq3_IRQn );
20007044:	f04f 0025 	mov.w	r0, #37	; 0x25
20007048:	f7ff ff96 	bl	20006f78 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c4)
2000704c:	687a      	ldr	r2, [r7, #4]
2000704e:	f24e 23dc 	movw	r3, #58076	; 0xe2dc
20007052:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007056:	429a      	cmp	r2, r3
20007058:	d103      	bne.n	20007062 <I2C_enable_irq+0x76>
	{
		NVIC_EnableIRQ( FabricIrq4_IRQn );
2000705a:	f04f 0026 	mov.w	r0, #38	; 0x26
2000705e:	f7ff ff8b 	bl	20006f78 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c5)
20007062:	687a      	ldr	r2, [r7, #4]
20007064:	f24e 13fc 	movw	r3, #57852	; 0xe1fc
20007068:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000706c:	429a      	cmp	r2, r3
2000706e:	d103      	bne.n	20007078 <I2C_enable_irq+0x8c>
	{
		NVIC_EnableIRQ( FabricIrq5_IRQn );
20007070:	f04f 0027 	mov.w	r0, #39	; 0x27
20007074:	f7ff ff80 	bl	20006f78 <NVIC_EnableIRQ>
	}
}
20007078:	f107 0708 	add.w	r7, r7, #8
2000707c:	46bd      	mov	sp, r7
2000707e:	bd80      	pop	{r7, pc}

20007080 <I2C_disable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to disable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_disable_irq( i2c_instance_t * this_i2c )
{
20007080:	b580      	push	{r7, lr}
20007082:	b082      	sub	sp, #8
20007084:	af00      	add	r7, sp, #0
20007086:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
20007088:	687a      	ldr	r2, [r7, #4]
2000708a:	f24e 1324 	movw	r3, #57636	; 0xe124
2000708e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007092:	429a      	cmp	r2, r3
20007094:	d103      	bne.n	2000709e <I2C_disable_irq+0x1e>
	{
		NVIC_DisableIRQ( FabricIrq0_IRQn );
20007096:	f04f 0022 	mov.w	r0, #34	; 0x22
2000709a:	f7ff ff89 	bl	20006fb0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
2000709e:	687a      	ldr	r2, [r7, #4]
200070a0:	f24e 1390 	movw	r3, #57744	; 0xe190
200070a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070a8:	429a      	cmp	r2, r3
200070aa:	d103      	bne.n	200070b4 <I2C_disable_irq+0x34>
	{
		NVIC_DisableIRQ( FabricIrq1_IRQn );
200070ac:	f04f 0023 	mov.w	r0, #35	; 0x23
200070b0:	f7ff ff7e 	bl	20006fb0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c2)
200070b4:	687a      	ldr	r2, [r7, #4]
200070b6:	f64d 4334 	movw	r3, #56372	; 0xdc34
200070ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070be:	429a      	cmp	r2, r3
200070c0:	d103      	bne.n	200070ca <I2C_disable_irq+0x4a>
	{
		NVIC_DisableIRQ( FabricIrq2_IRQn );
200070c2:	f04f 0024 	mov.w	r0, #36	; 0x24
200070c6:	f7ff ff73 	bl	20006fb0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c3)
200070ca:	687a      	ldr	r2, [r7, #4]
200070cc:	f24e 2368 	movw	r3, #57960	; 0xe268
200070d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070d4:	429a      	cmp	r2, r3
200070d6:	d103      	bne.n	200070e0 <I2C_disable_irq+0x60>
	{
		NVIC_DisableIRQ( FabricIrq3_IRQn );
200070d8:	f04f 0025 	mov.w	r0, #37	; 0x25
200070dc:	f7ff ff68 	bl	20006fb0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c4)
200070e0:	687a      	ldr	r2, [r7, #4]
200070e2:	f24e 23dc 	movw	r3, #58076	; 0xe2dc
200070e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200070ea:	429a      	cmp	r2, r3
200070ec:	d103      	bne.n	200070f6 <I2C_disable_irq+0x76>
	{
		NVIC_DisableIRQ( FabricIrq4_IRQn );
200070ee:	f04f 0026 	mov.w	r0, #38	; 0x26
200070f2:	f7ff ff5d 	bl	20006fb0 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c5)
200070f6:	687a      	ldr	r2, [r7, #4]
200070f8:	f24e 13fc 	movw	r3, #57852	; 0xe1fc
200070fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007100:	429a      	cmp	r2, r3
20007102:	d103      	bne.n	2000710c <I2C_disable_irq+0x8c>
	{
		NVIC_DisableIRQ( FabricIrq5_IRQn );
20007104:	f04f 0027 	mov.w	r0, #39	; 0x27
20007108:	f7ff ff52 	bl	20006fb0 <NVIC_DisableIRQ>
	}
}
2000710c:	f107 0708 	add.w	r7, r7, #8
20007110:	46bd      	mov	sp, r7
20007112:	bd80      	pop	{r7, pc}

20007114 <SystemInit>:

/***************************************************************************//**
 * See system_m2sxxx.h for details.
 */
void SystemInit(void)
{
20007114:	b580      	push	{r7, lr}
20007116:	af00      	add	r7, sp, #0
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
    complete_clock_config();
20007118:	f000 f96a 	bl	200073f0 <complete_clock_config>
#endif

    silicon_workarounds();
2000711c:	f000 f936 	bl	2000738c <silicon_workarounds>
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
20007120:	f64e 5300 	movw	r3, #60672	; 0xed00
20007124:	f2ce 0300 	movt	r3, #57344	; 0xe000
20007128:	f64e 5200 	movw	r2, #60672	; 0xed00
2000712c:	f2ce 0200 	movt	r2, #57344	; 0xe000
20007130:	6952      	ldr	r2, [r2, #20]
20007132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20007136:	615a      	str	r2, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
20007138:	f7f9 f8b9 	bl	200002ae <mscc_post_hw_cfg_init>
    while(!CORE_SF2_CFG->INIT_DONE)
    {
        ;   /* Wait for INIT_DONE from CoreSF2Reset. */
    }
#endif
}
2000713c:	bd80      	pop	{r7, pc}
2000713e:	bf00      	nop

20007140 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
20007140:	b580      	push	{r7, lr}
20007142:	b088      	sub	sp, #32
20007144:	af00      	add	r7, sp, #0
#if 1
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
20007146:	f248 0300 	movw	r3, #32768	; 0x8000
2000714a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000714e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20007152:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20007156:	60fb      	str	r3, [r7, #12]
    
    if(0u == controller_pll_init)
20007158:	68fb      	ldr	r3, [r7, #12]
2000715a:	2b00      	cmp	r3, #0
2000715c:	f040 808b 	bne.w	20007276 <SystemCoreClockUpdate+0x136>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;
        
        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
20007160:	f248 0300 	movw	r3, #32768	; 0x8000
20007164:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2000716c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20007170:	617b      	str	r3, [r7, #20]
        if(0u == global_mux_sel)
20007172:	697b      	ldr	r3, [r7, #20]
20007174:	2b00      	cmp	r3, #0
20007176:	d13f      	bne.n	200071f8 <SystemCoreClockUpdate+0xb8>
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
20007178:	f647 03c4 	movw	r3, #30916	; 0x78c4
2000717c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007180:	f24e 1200 	movw	r2, #57600	; 0xe100
20007184:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20007188:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
2000718a:	f647 03c8 	movw	r3, #30920	; 0x78c8
2000718e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007192:	f24e 1200 	movw	r2, #57600	; 0xe100
20007196:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
2000719a:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
2000719c:	f647 03cc 	movw	r3, #30924	; 0x78cc
200071a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071a4:	f24e 1200 	movw	r2, #57600	; 0xe100
200071a8:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200071ac:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
200071ae:	f647 03d0 	movw	r3, #30928	; 0x78d0
200071b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071b6:	f24f 0280 	movw	r2, #61568	; 0xf080
200071ba:	f2c0 22fa 	movt	r2, #762	; 0x2fa
200071be:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
200071c0:	f647 03d4 	movw	r3, #30932	; 0x78d4
200071c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071c8:	f24e 1200 	movw	r2, #57600	; 0xe100
200071cc:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200071d0:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
200071d2:	f647 03d8 	movw	r3, #30936	; 0x78d8
200071d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071da:	f24e 1200 	movw	r2, #57600	; 0xe100
200071de:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200071e2:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
200071e4:	f647 03dc 	movw	r3, #30940	; 0x78dc
200071e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200071ec:	f24e 1200 	movw	r2, #57600	; 0xe100
200071f0:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
200071f4:	601a      	str	r2, [r3, #0]
                break;
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
200071f6:	e045      	b.n	20007284 <SystemCoreClockUpdate+0x144>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
200071f8:	f647 0358 	movw	r3, #30808	; 0x7858
200071fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007200:	f107 0204 	add.w	r2, r7, #4
20007204:	e893 0003 	ldmia.w	r3, {r0, r1}
20007208:	e882 0003 	stmia.w	r2, {r0, r1}
            
            uint32_t standby_sel;
            uint8_t clock_source;
            
            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
2000720c:	f248 0300 	movw	r3, #32768	; 0x8000
20007210:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
20007218:	ea4f 1393 	mov.w	r3, r3, lsr #6
2000721c:	f003 0307 	and.w	r3, r3, #7
20007220:	61bb      	str	r3, [r7, #24]
            clock_source = standby_clock_lut[standby_sel];
20007222:	69bb      	ldr	r3, [r7, #24]
20007224:	f107 0220 	add.w	r2, r7, #32
20007228:	4413      	add	r3, r2
2000722a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
2000722e:	77fb      	strb	r3, [r7, #31]
            switch(clock_source)
20007230:	7ffb      	ldrb	r3, [r7, #31]
20007232:	2b01      	cmp	r3, #1
20007234:	d00b      	beq.n	2000724e <SystemCoreClockUpdate+0x10e>
20007236:	2b02      	cmp	r3, #2
20007238:	d00e      	beq.n	20007258 <SystemCoreClockUpdate+0x118>
2000723a:	2b00      	cmp	r3, #0
2000723c:	d114      	bne.n	20007268 <SystemCoreClockUpdate+0x128>
            {
                case RCOSC_25_50MHZ_CLK_SRC:
                    clk_src = get_rcosc_25_50mhz_frequency();
2000723e:	f000 f825 	bl	2000728c <get_rcosc_25_50mhz_frequency>
20007242:	4603      	mov	r3, r0
20007244:	613b      	str	r3, [r7, #16]
                    set_clock_frequency_globals(clk_src);
20007246:	6938      	ldr	r0, [r7, #16]
20007248:	f000 f842 	bl	200072d0 <set_clock_frequency_globals>
                break;
2000724c:	e01a      	b.n	20007284 <SystemCoreClockUpdate+0x144>
                
                case CLK_XTAL_CLK_SRC:
                    set_clock_frequency_globals(FREQ_32KHZ);
2000724e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20007252:	f000 f83d 	bl	200072d0 <set_clock_frequency_globals>
                break;
20007256:	e015      	b.n	20007284 <SystemCoreClockUpdate+0x144>
                
                case RCOSC_1_MHZ_CLK_SRC:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007258:	f244 2040 	movw	r0, #16960	; 0x4240
2000725c:	f2c0 000f 	movt	r0, #15
20007260:	f000 f836 	bl	200072d0 <set_clock_frequency_globals>
                break;
20007264:	bf00      	nop
20007266:	e00d      	b.n	20007284 <SystemCoreClockUpdate+0x144>
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
20007268:	f244 2040 	movw	r0, #16960	; 0x4240
2000726c:	f2c0 000f 	movt	r0, #15
20007270:	f000 f82e 	bl	200072d0 <set_clock_frequency_globals>
20007274:	e006      	b.n	20007284 <SystemCoreClockUpdate+0x144>
        }
    }
    else
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
20007276:	f000 f809 	bl	2000728c <get_rcosc_25_50mhz_frequency>
2000727a:	4603      	mov	r3, r0
2000727c:	613b      	str	r3, [r7, #16]
        set_clock_frequency_globals(clk_src);
2000727e:	6938      	ldr	r0, [r7, #16]
20007280:	f000 f826 	bl	200072d0 <set_clock_frequency_globals>
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
#endif
}
20007284:	f107 0720 	add.w	r7, r7, #32
20007288:	46bd      	mov	sp, r7
2000728a:	bd80      	pop	{r7, pc}

2000728c <get_rcosc_25_50mhz_frequency>:

/***************************************************************************//**
 * Find out frequency generated by the 25_50mhz RC osciallator.
 */
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
2000728c:	b480      	push	{r7}
2000728e:	b083      	sub	sp, #12
20007290:	af00      	add	r7, sp, #0
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;
    
    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
20007292:	f248 0300 	movw	r3, #32768	; 0x8000
20007296:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000729a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2000729e:	f003 0304 	and.w	r3, r3, #4
200072a2:	603b      	str	r3, [r7, #0]
    if(0u == rcosc_div2)
200072a4:	683b      	ldr	r3, [r7, #0]
200072a6:	2b00      	cmp	r3, #0
200072a8:	d105      	bne.n	200072b6 <get_rcosc_25_50mhz_frequency+0x2a>
    {
        /* 25_50mhz oscillator is configured for 25 MHz operations. */
        rcosc_frequency = FREQ_25MHZ;
200072aa:	f647 0340 	movw	r3, #30784	; 0x7840
200072ae:	f2c0 137d 	movt	r3, #381	; 0x17d
200072b2:	607b      	str	r3, [r7, #4]
200072b4:	e004      	b.n	200072c0 <get_rcosc_25_50mhz_frequency+0x34>
    }
    else
    {
        /* 25_50mhz oscillator is configured for 50 MHz operations. */
        rcosc_frequency = FREQ_50MHZ;
200072b6:	f24f 0380 	movw	r3, #61568	; 0xf080
200072ba:	f2c0 23fa 	movt	r3, #762	; 0x2fa
200072be:	607b      	str	r3, [r7, #4]
    }
    
    return rcosc_frequency;
200072c0:	687b      	ldr	r3, [r7, #4]
}
200072c2:	4618      	mov	r0, r3
200072c4:	f107 070c 	add.w	r7, r7, #12
200072c8:	46bd      	mov	sp, r7
200072ca:	bc80      	pop	{r7}
200072cc:	4770      	bx	lr
200072ce:	bf00      	nop

200072d0 <set_clock_frequency_globals>:
        - g_FrequencyFIC0
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
200072d0:	b480      	push	{r7}
200072d2:	b083      	sub	sp, #12
200072d4:	af00      	add	r7, sp, #0
200072d6:	6078      	str	r0, [r7, #4]
    SystemCoreClock = standby_clk;
200072d8:	f647 03c4 	movw	r3, #30916	; 0x78c4
200072dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200072e0:	687a      	ldr	r2, [r7, #4]
200072e2:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = standby_clk;
200072e4:	f647 03c8 	movw	r3, #30920	; 0x78c8
200072e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200072ec:	687a      	ldr	r2, [r7, #4]
200072ee:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = standby_clk;
200072f0:	f647 03cc 	movw	r3, #30924	; 0x78cc
200072f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200072f8:	687a      	ldr	r2, [r7, #4]
200072fa:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
200072fc:	f647 03d0 	movw	r3, #30928	; 0x78d0
20007300:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007304:	f24f 0280 	movw	r2, #61568	; 0xf080
20007308:	f2c0 22fa 	movt	r2, #762	; 0x2fa
2000730c:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC0 = standby_clk;
2000730e:	f647 03d4 	movw	r3, #30932	; 0x78d4
20007312:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007316:	687a      	ldr	r2, [r7, #4]
20007318:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC1 = standby_clk;
2000731a:	f647 03d8 	movw	r3, #30936	; 0x78d8
2000731e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007322:	687a      	ldr	r2, [r7, #4]
20007324:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC64 = standby_clk;
20007326:	f647 03dc 	movw	r3, #30940	; 0x78dc
2000732a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000732e:	687a      	ldr	r2, [r7, #4]
20007330:	601a      	str	r2, [r3, #0]
}
20007332:	f107 070c 	add.w	r7, r7, #12
20007336:	46bd      	mov	sp, r7
20007338:	bc80      	pop	{r7}
2000733a:	4770      	bx	lr

2000733c <get_silicon_revision>:

/*------------------------------------------------------------------------------
  Retrieve silicon revision from system registers.
 */
static uint32_t get_silicon_revision(void)
{
2000733c:	b480      	push	{r7}
2000733e:	b083      	sub	sp, #12
20007340:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    uint32_t device_version;
    
    device_version = SYSREG->DEVICE_VERSION;
20007342:	f248 0300 	movw	r3, #32768	; 0x8000
20007346:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000734a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
2000734e:	607b      	str	r3, [r7, #4]
    switch(device_version)
20007350:	687a      	ldr	r2, [r7, #4]
20007352:	f64f 0302 	movw	r3, #63490	; 0xf802
20007356:	429a      	cmp	r2, r3
20007358:	d006      	beq.n	20007368 <get_silicon_revision+0x2c>
2000735a:	f64f 0302 	movw	r3, #63490	; 0xf802
2000735e:	f2c0 0301 	movt	r3, #1
20007362:	429a      	cmp	r2, r3
20007364:	d004      	beq.n	20007370 <get_silicon_revision+0x34>
20007366:	e007      	b.n	20007378 <get_silicon_revision+0x3c>
    {
        case 0x0000F802:
            silicon_revision = M2S050_REV_A_SILICON;
20007368:	f04f 0301 	mov.w	r3, #1
2000736c:	603b      	str	r3, [r7, #0]
            break;
2000736e:	e006      	b.n	2000737e <get_silicon_revision+0x42>
            
        case 0x0001F802:
            silicon_revision = M2S050_REV_B_SILICON;
20007370:	f04f 0302 	mov.w	r3, #2
20007374:	603b      	str	r3, [r7, #0]
            break;
20007376:	e002      	b.n	2000737e <get_silicon_revision+0x42>
            
        default:
            silicon_revision = UNKNOWN_SILICON_REV;
20007378:	f04f 0300 	mov.w	r3, #0
2000737c:	603b      	str	r3, [r7, #0]
            break;
    }
    
    return silicon_revision;
2000737e:	683b      	ldr	r3, [r7, #0]
}
20007380:	4618      	mov	r0, r3
20007382:	f107 070c 	add.w	r7, r7, #12
20007386:	46bd      	mov	sp, r7
20007388:	bc80      	pop	{r7}
2000738a:	4770      	bx	lr

2000738c <silicon_workarounds>:

/*------------------------------------------------------------------------------
  Workarounds for various silicon versions.
 */
static void silicon_workarounds(void)
{
2000738c:	b580      	push	{r7, lr}
2000738e:	b082      	sub	sp, #8
20007390:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    
    silicon_revision = get_silicon_revision();
20007392:	f7ff ffd3 	bl	2000733c <get_silicon_revision>
20007396:	4603      	mov	r3, r0
20007398:	607b      	str	r3, [r7, #4]
    
    switch(silicon_revision)
2000739a:	687b      	ldr	r3, [r7, #4]
2000739c:	2b01      	cmp	r3, #1
2000739e:	d101      	bne.n	200073a4 <silicon_workarounds+0x18>
    {
        case M2S050_REV_A_SILICON:
            m2s050_rev_a_workarounds();
200073a0:	f000 f804 	bl	200073ac <m2s050_rev_a_workarounds>
        case UNKNOWN_SILICON_REV:
            /* Fall through. */
        default:
            break;
    }
}
200073a4:	f107 0708 	add.w	r7, r7, #8
200073a8:	46bd      	mov	sp, r7
200073aa:	bd80      	pop	{r7, pc}

200073ac <m2s050_rev_a_workarounds>:

/*------------------------------------------------------------------------------
  Silicon workarounds for M2S050 rev A.
 */
static void m2s050_rev_a_workarounds(void)
{
200073ac:	b480      	push	{r7}
200073ae:	af00      	add	r7, sp, #0
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
200073b0:	f248 0300 	movw	r3, #32768	; 0x8000
200073b4:	f2c4 0303 	movt	r3, #16387	; 0x4003
200073b8:	f248 0200 	movw	r2, #32768	; 0x8000
200073bc:	f2c4 0203 	movt	r2, #16387	; 0x4003
200073c0:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
200073c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200073c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
200073cc:	f248 0300 	movw	r3, #32768	; 0x8000
200073d0:	f2c4 0303 	movt	r3, #16387	; 0x4003
200073d4:	f248 0200 	movw	r2, #32768	; 0x8000
200073d8:	f2c4 0203 	movt	r2, #16387	; 0x4003
200073dc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
200073e0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
200073e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
200073e8:	46bd      	mov	sp, r7
200073ea:	bc80      	pop	{r7}
200073ec:	4770      	bx	lr
200073ee:	bf00      	nop

200073f0 <complete_clock_config>:
/*------------------------------------------------------------------------------
  Complete clock configuration if requested by Libero.
 */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
static void complete_clock_config(void)
{
200073f0:	b480      	push	{r7}
200073f2:	b083      	sub	sp, #12
200073f4:	af00      	add	r7, sp, #0
    uint32_t pll_locked;
    
    /* Wait for fabric PLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & FAB_PLL_LOCK_MASK;
200073f6:	f248 0300 	movw	r3, #32768	; 0x8000
200073fa:	f2c4 0303 	movt	r3, #16387	; 0x4003
200073fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20007402:	f003 0301 	and.w	r3, r3, #1
20007406:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
20007408:	687b      	ldr	r3, [r7, #4]
2000740a:	2b00      	cmp	r3, #0
2000740c:	d0f3      	beq.n	200073f6 <complete_clock_config+0x6>
    
    /* Negate MPLL bypass. */
    SYSREG->MSSDDR_PLL_STATUS_HIGH_CR &= ~FACC_PLL_BYPASS_MASK;
2000740e:	f248 0300 	movw	r3, #32768	; 0x8000
20007412:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007416:	f248 0200 	movw	r2, #32768	; 0x8000
2000741a:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000741e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
20007422:	f022 0201 	bic.w	r2, r2, #1
20007426:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    
    /* Wait for MPLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & MPLL_LOCK_MASK;
2000742a:	f248 0300 	movw	r3, #32768	; 0x8000
2000742e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007432:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20007436:	f003 0302 	and.w	r3, r3, #2
2000743a:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
2000743c:	687b      	ldr	r3, [r7, #4]
2000743e:	2b00      	cmp	r3, #0
20007440:	d0f3      	beq.n	2000742a <complete_clock_config+0x3a>
    
    /* Switch FACC from standby to run mode. */
    SYSREG->MSSDDR_FACC1_CR &= ~FACC_GLMUX_SEL_MASK;
20007442:	f248 0300 	movw	r3, #32768	; 0x8000
20007446:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000744a:	f248 0200 	movw	r2, #32768	; 0x8000
2000744e:	f2c4 0203 	movt	r2, #16387	; 0x4003
20007452:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
20007456:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2000745a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* Negate FPGA_SOFTRESET to de-assert MSS_RESET_N_M2F in the fabric */
    SYSREG->SOFT_RST_CR &= ~SYSREG_FPGA_SOFTRESET_MASK;
2000745e:	f248 0300 	movw	r3, #32768	; 0x8000
20007462:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007466:	f248 0200 	movw	r2, #32768	; 0x8000
2000746a:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000746e:	6c92      	ldr	r2, [r2, #72]	; 0x48
20007470:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20007474:	649a      	str	r2, [r3, #72]	; 0x48
}
20007476:	f107 070c 	add.w	r7, r7, #12
2000747a:	46bd      	mov	sp, r7
2000747c:	bc80      	pop	{r7}
2000747e:	4770      	bx	lr

20007480 <HAL_disable_interrupts>:
20007480:	f3ef 8010 	mrs	r0, PRIMASK
20007484:	b672      	cpsid	i
20007486:	4770      	bx	lr

20007488 <HAL_restore_interrupts>:
20007488:	f380 8810 	msr	PRIMASK, r0
2000748c:	4770      	bx	lr

2000748e <HW_set_32bit_reg>:
2000748e:	6001      	str	r1, [r0, #0]
20007490:	4770      	bx	lr

20007492 <HW_get_32bit_reg>:
20007492:	6800      	ldr	r0, [r0, #0]
20007494:	4770      	bx	lr

20007496 <HW_set_32bit_reg_field>:
20007496:	b50e      	push	{r1, r2, r3, lr}
20007498:	fa03 f301 	lsl.w	r3, r3, r1
2000749c:	ea03 0302 	and.w	r3, r3, r2
200074a0:	6801      	ldr	r1, [r0, #0]
200074a2:	ea6f 0202 	mvn.w	r2, r2
200074a6:	ea01 0102 	and.w	r1, r1, r2
200074aa:	ea41 0103 	orr.w	r1, r1, r3
200074ae:	6001      	str	r1, [r0, #0]
200074b0:	bd0e      	pop	{r1, r2, r3, pc}

200074b2 <HW_get_32bit_reg_field>:
200074b2:	6800      	ldr	r0, [r0, #0]
200074b4:	ea00 0002 	and.w	r0, r0, r2
200074b8:	fa20 f001 	lsr.w	r0, r0, r1
200074bc:	4770      	bx	lr

200074be <HW_set_16bit_reg>:
200074be:	8001      	strh	r1, [r0, #0]
200074c0:	4770      	bx	lr

200074c2 <HW_get_16bit_reg>:
200074c2:	8800      	ldrh	r0, [r0, #0]
200074c4:	4770      	bx	lr

200074c6 <HW_set_16bit_reg_field>:
200074c6:	b50e      	push	{r1, r2, r3, lr}
200074c8:	fa03 f301 	lsl.w	r3, r3, r1
200074cc:	ea03 0302 	and.w	r3, r3, r2
200074d0:	8801      	ldrh	r1, [r0, #0]
200074d2:	ea6f 0202 	mvn.w	r2, r2
200074d6:	ea01 0102 	and.w	r1, r1, r2
200074da:	ea41 0103 	orr.w	r1, r1, r3
200074de:	8001      	strh	r1, [r0, #0]
200074e0:	bd0e      	pop	{r1, r2, r3, pc}

200074e2 <HW_get_16bit_reg_field>:
200074e2:	8800      	ldrh	r0, [r0, #0]
200074e4:	ea00 0002 	and.w	r0, r0, r2
200074e8:	fa20 f001 	lsr.w	r0, r0, r1
200074ec:	4770      	bx	lr

200074ee <HW_set_8bit_reg>:
200074ee:	7001      	strb	r1, [r0, #0]
200074f0:	4770      	bx	lr

200074f2 <HW_get_8bit_reg>:
200074f2:	7800      	ldrb	r0, [r0, #0]
200074f4:	4770      	bx	lr

200074f6 <HW_set_8bit_reg_field>:
200074f6:	b50e      	push	{r1, r2, r3, lr}
200074f8:	fa03 f301 	lsl.w	r3, r3, r1
200074fc:	ea03 0302 	and.w	r3, r3, r2
20007500:	7801      	ldrb	r1, [r0, #0]
20007502:	ea6f 0202 	mvn.w	r2, r2
20007506:	ea01 0102 	and.w	r1, r1, r2
2000750a:	ea41 0103 	orr.w	r1, r1, r3
2000750e:	7001      	strb	r1, [r0, #0]
20007510:	bd0e      	pop	{r1, r2, r3, pc}

20007512 <HW_get_8bit_reg_field>:
20007512:	7800      	ldrb	r0, [r0, #0]
20007514:	ea00 0002 	and.w	r0, r0, r2
20007518:	fa20 f001 	lsr.w	r0, r0, r1
2000751c:	4770      	bx	lr
	...

20007520 <__libc_init_array>:
20007520:	b570      	push	{r4, r5, r6, lr}
20007522:	f647 0678 	movw	r6, #30840	; 0x7878
20007526:	f647 0578 	movw	r5, #30840	; 0x7878
2000752a:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000752e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20007532:	1b76      	subs	r6, r6, r5
20007534:	10b6      	asrs	r6, r6, #2
20007536:	d006      	beq.n	20007546 <__libc_init_array+0x26>
20007538:	2400      	movs	r4, #0
2000753a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000753e:	3401      	adds	r4, #1
20007540:	4798      	blx	r3
20007542:	42a6      	cmp	r6, r4
20007544:	d8f9      	bhi.n	2000753a <__libc_init_array+0x1a>
20007546:	f647 0578 	movw	r5, #30840	; 0x7878
2000754a:	f647 067c 	movw	r6, #30844	; 0x787c
2000754e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20007552:	f2c2 0600 	movt	r6, #8192	; 0x2000
20007556:	1b76      	subs	r6, r6, r5
20007558:	f000 f982 	bl	20007860 <_init>
2000755c:	10b6      	asrs	r6, r6, #2
2000755e:	d006      	beq.n	2000756e <__libc_init_array+0x4e>
20007560:	2400      	movs	r4, #0
20007562:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20007566:	3401      	adds	r4, #1
20007568:	4798      	blx	r3
2000756a:	42a6      	cmp	r6, r4
2000756c:	d8f9      	bhi.n	20007562 <__libc_init_array+0x42>
2000756e:	bd70      	pop	{r4, r5, r6, pc}

20007570 <memcpy>:
20007570:	2a03      	cmp	r2, #3
20007572:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
20007576:	d80b      	bhi.n	20007590 <memcpy+0x20>
20007578:	b13a      	cbz	r2, 2000758a <memcpy+0x1a>
2000757a:	2300      	movs	r3, #0
2000757c:	f811 c003 	ldrb.w	ip, [r1, r3]
20007580:	f800 c003 	strb.w	ip, [r0, r3]
20007584:	3301      	adds	r3, #1
20007586:	4293      	cmp	r3, r2
20007588:	d1f8      	bne.n	2000757c <memcpy+0xc>
2000758a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
2000758e:	4770      	bx	lr
20007590:	1882      	adds	r2, r0, r2
20007592:	460c      	mov	r4, r1
20007594:	4603      	mov	r3, r0
20007596:	e003      	b.n	200075a0 <memcpy+0x30>
20007598:	f814 1c01 	ldrb.w	r1, [r4, #-1]
2000759c:	f803 1c01 	strb.w	r1, [r3, #-1]
200075a0:	f003 0603 	and.w	r6, r3, #3
200075a4:	4619      	mov	r1, r3
200075a6:	46a4      	mov	ip, r4
200075a8:	3301      	adds	r3, #1
200075aa:	3401      	adds	r4, #1
200075ac:	2e00      	cmp	r6, #0
200075ae:	d1f3      	bne.n	20007598 <memcpy+0x28>
200075b0:	f01c 0403 	ands.w	r4, ip, #3
200075b4:	4663      	mov	r3, ip
200075b6:	bf08      	it	eq
200075b8:	ebc1 0c02 	rsbeq	ip, r1, r2
200075bc:	d068      	beq.n	20007690 <memcpy+0x120>
200075be:	4265      	negs	r5, r4
200075c0:	f1c4 0a04 	rsb	sl, r4, #4
200075c4:	eb0c 0705 	add.w	r7, ip, r5
200075c8:	4633      	mov	r3, r6
200075ca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
200075ce:	f85c 6005 	ldr.w	r6, [ip, r5]
200075d2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
200075d6:	1a55      	subs	r5, r2, r1
200075d8:	e008      	b.n	200075ec <memcpy+0x7c>
200075da:	f857 4f04 	ldr.w	r4, [r7, #4]!
200075de:	4626      	mov	r6, r4
200075e0:	fa04 f40a 	lsl.w	r4, r4, sl
200075e4:	ea49 0404 	orr.w	r4, r9, r4
200075e8:	50cc      	str	r4, [r1, r3]
200075ea:	3304      	adds	r3, #4
200075ec:	185c      	adds	r4, r3, r1
200075ee:	2d03      	cmp	r5, #3
200075f0:	fa26 f908 	lsr.w	r9, r6, r8
200075f4:	f1a5 0504 	sub.w	r5, r5, #4
200075f8:	eb0c 0603 	add.w	r6, ip, r3
200075fc:	dced      	bgt.n	200075da <memcpy+0x6a>
200075fe:	2300      	movs	r3, #0
20007600:	e002      	b.n	20007608 <memcpy+0x98>
20007602:	5cf1      	ldrb	r1, [r6, r3]
20007604:	54e1      	strb	r1, [r4, r3]
20007606:	3301      	adds	r3, #1
20007608:	1919      	adds	r1, r3, r4
2000760a:	4291      	cmp	r1, r2
2000760c:	d3f9      	bcc.n	20007602 <memcpy+0x92>
2000760e:	e7bc      	b.n	2000758a <memcpy+0x1a>
20007610:	f853 4c40 	ldr.w	r4, [r3, #-64]
20007614:	f841 4c40 	str.w	r4, [r1, #-64]
20007618:	f853 4c3c 	ldr.w	r4, [r3, #-60]
2000761c:	f841 4c3c 	str.w	r4, [r1, #-60]
20007620:	f853 4c38 	ldr.w	r4, [r3, #-56]
20007624:	f841 4c38 	str.w	r4, [r1, #-56]
20007628:	f853 4c34 	ldr.w	r4, [r3, #-52]
2000762c:	f841 4c34 	str.w	r4, [r1, #-52]
20007630:	f853 4c30 	ldr.w	r4, [r3, #-48]
20007634:	f841 4c30 	str.w	r4, [r1, #-48]
20007638:	f853 4c2c 	ldr.w	r4, [r3, #-44]
2000763c:	f841 4c2c 	str.w	r4, [r1, #-44]
20007640:	f853 4c28 	ldr.w	r4, [r3, #-40]
20007644:	f841 4c28 	str.w	r4, [r1, #-40]
20007648:	f853 4c24 	ldr.w	r4, [r3, #-36]
2000764c:	f841 4c24 	str.w	r4, [r1, #-36]
20007650:	f853 4c20 	ldr.w	r4, [r3, #-32]
20007654:	f841 4c20 	str.w	r4, [r1, #-32]
20007658:	f853 4c1c 	ldr.w	r4, [r3, #-28]
2000765c:	f841 4c1c 	str.w	r4, [r1, #-28]
20007660:	f853 4c18 	ldr.w	r4, [r3, #-24]
20007664:	f841 4c18 	str.w	r4, [r1, #-24]
20007668:	f853 4c14 	ldr.w	r4, [r3, #-20]
2000766c:	f841 4c14 	str.w	r4, [r1, #-20]
20007670:	f853 4c10 	ldr.w	r4, [r3, #-16]
20007674:	f841 4c10 	str.w	r4, [r1, #-16]
20007678:	f853 4c0c 	ldr.w	r4, [r3, #-12]
2000767c:	f841 4c0c 	str.w	r4, [r1, #-12]
20007680:	f853 4c08 	ldr.w	r4, [r3, #-8]
20007684:	f841 4c08 	str.w	r4, [r1, #-8]
20007688:	f853 4c04 	ldr.w	r4, [r3, #-4]
2000768c:	f841 4c04 	str.w	r4, [r1, #-4]
20007690:	461c      	mov	r4, r3
20007692:	460d      	mov	r5, r1
20007694:	3340      	adds	r3, #64	; 0x40
20007696:	3140      	adds	r1, #64	; 0x40
20007698:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2000769c:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
200076a0:	dcb6      	bgt.n	20007610 <memcpy+0xa0>
200076a2:	4621      	mov	r1, r4
200076a4:	462b      	mov	r3, r5
200076a6:	1b54      	subs	r4, r2, r5
200076a8:	e00f      	b.n	200076ca <memcpy+0x15a>
200076aa:	f851 5c10 	ldr.w	r5, [r1, #-16]
200076ae:	f843 5c10 	str.w	r5, [r3, #-16]
200076b2:	f851 5c0c 	ldr.w	r5, [r1, #-12]
200076b6:	f843 5c0c 	str.w	r5, [r3, #-12]
200076ba:	f851 5c08 	ldr.w	r5, [r1, #-8]
200076be:	f843 5c08 	str.w	r5, [r3, #-8]
200076c2:	f851 5c04 	ldr.w	r5, [r1, #-4]
200076c6:	f843 5c04 	str.w	r5, [r3, #-4]
200076ca:	2c0f      	cmp	r4, #15
200076cc:	460d      	mov	r5, r1
200076ce:	469c      	mov	ip, r3
200076d0:	f101 0110 	add.w	r1, r1, #16
200076d4:	f103 0310 	add.w	r3, r3, #16
200076d8:	f1a4 0410 	sub.w	r4, r4, #16
200076dc:	dce5      	bgt.n	200076aa <memcpy+0x13a>
200076de:	ebcc 0102 	rsb	r1, ip, r2
200076e2:	2300      	movs	r3, #0
200076e4:	e003      	b.n	200076ee <memcpy+0x17e>
200076e6:	58ec      	ldr	r4, [r5, r3]
200076e8:	f84c 4003 	str.w	r4, [ip, r3]
200076ec:	3304      	adds	r3, #4
200076ee:	195e      	adds	r6, r3, r5
200076f0:	2903      	cmp	r1, #3
200076f2:	eb03 040c 	add.w	r4, r3, ip
200076f6:	f1a1 0104 	sub.w	r1, r1, #4
200076fa:	dcf4      	bgt.n	200076e6 <memcpy+0x176>
200076fc:	e77f      	b.n	200075fe <memcpy+0x8e>
200076fe:	bf00      	nop

20007700 <memset>:
20007700:	2a03      	cmp	r2, #3
20007702:	b2c9      	uxtb	r1, r1
20007704:	b430      	push	{r4, r5}
20007706:	d807      	bhi.n	20007718 <memset+0x18>
20007708:	b122      	cbz	r2, 20007714 <memset+0x14>
2000770a:	2300      	movs	r3, #0
2000770c:	54c1      	strb	r1, [r0, r3]
2000770e:	3301      	adds	r3, #1
20007710:	4293      	cmp	r3, r2
20007712:	d1fb      	bne.n	2000770c <memset+0xc>
20007714:	bc30      	pop	{r4, r5}
20007716:	4770      	bx	lr
20007718:	eb00 0c02 	add.w	ip, r0, r2
2000771c:	4603      	mov	r3, r0
2000771e:	e001      	b.n	20007724 <memset+0x24>
20007720:	f803 1c01 	strb.w	r1, [r3, #-1]
20007724:	f003 0403 	and.w	r4, r3, #3
20007728:	461a      	mov	r2, r3
2000772a:	3301      	adds	r3, #1
2000772c:	2c00      	cmp	r4, #0
2000772e:	d1f7      	bne.n	20007720 <memset+0x20>
20007730:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20007734:	ebc2 040c 	rsb	r4, r2, ip
20007738:	fb03 f301 	mul.w	r3, r3, r1
2000773c:	e01f      	b.n	2000777e <memset+0x7e>
2000773e:	f842 3c40 	str.w	r3, [r2, #-64]
20007742:	f842 3c3c 	str.w	r3, [r2, #-60]
20007746:	f842 3c38 	str.w	r3, [r2, #-56]
2000774a:	f842 3c34 	str.w	r3, [r2, #-52]
2000774e:	f842 3c30 	str.w	r3, [r2, #-48]
20007752:	f842 3c2c 	str.w	r3, [r2, #-44]
20007756:	f842 3c28 	str.w	r3, [r2, #-40]
2000775a:	f842 3c24 	str.w	r3, [r2, #-36]
2000775e:	f842 3c20 	str.w	r3, [r2, #-32]
20007762:	f842 3c1c 	str.w	r3, [r2, #-28]
20007766:	f842 3c18 	str.w	r3, [r2, #-24]
2000776a:	f842 3c14 	str.w	r3, [r2, #-20]
2000776e:	f842 3c10 	str.w	r3, [r2, #-16]
20007772:	f842 3c0c 	str.w	r3, [r2, #-12]
20007776:	f842 3c08 	str.w	r3, [r2, #-8]
2000777a:	f842 3c04 	str.w	r3, [r2, #-4]
2000777e:	4615      	mov	r5, r2
20007780:	3240      	adds	r2, #64	; 0x40
20007782:	2c3f      	cmp	r4, #63	; 0x3f
20007784:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20007788:	dcd9      	bgt.n	2000773e <memset+0x3e>
2000778a:	462a      	mov	r2, r5
2000778c:	ebc5 040c 	rsb	r4, r5, ip
20007790:	e007      	b.n	200077a2 <memset+0xa2>
20007792:	f842 3c10 	str.w	r3, [r2, #-16]
20007796:	f842 3c0c 	str.w	r3, [r2, #-12]
2000779a:	f842 3c08 	str.w	r3, [r2, #-8]
2000779e:	f842 3c04 	str.w	r3, [r2, #-4]
200077a2:	4615      	mov	r5, r2
200077a4:	3210      	adds	r2, #16
200077a6:	2c0f      	cmp	r4, #15
200077a8:	f1a4 0410 	sub.w	r4, r4, #16
200077ac:	dcf1      	bgt.n	20007792 <memset+0x92>
200077ae:	462a      	mov	r2, r5
200077b0:	ebc5 050c 	rsb	r5, r5, ip
200077b4:	e001      	b.n	200077ba <memset+0xba>
200077b6:	f842 3c04 	str.w	r3, [r2, #-4]
200077ba:	4614      	mov	r4, r2
200077bc:	3204      	adds	r2, #4
200077be:	2d03      	cmp	r5, #3
200077c0:	f1a5 0504 	sub.w	r5, r5, #4
200077c4:	dcf7      	bgt.n	200077b6 <memset+0xb6>
200077c6:	e001      	b.n	200077cc <memset+0xcc>
200077c8:	f804 1b01 	strb.w	r1, [r4], #1
200077cc:	4564      	cmp	r4, ip
200077ce:	d3fb      	bcc.n	200077c8 <memset+0xc8>
200077d0:	e7a0      	b.n	20007714 <memset+0x14>
200077d2:	bf00      	nop

200077d4 <C.48.4660>:
200077d4:	6a10 0000                                   .j..

200077d8 <C.40.4595>:
200077d8:	6020 0000 6d63 5f64 6974 656d 0072 0000      `..cmd_timer...
200077e8:	4449 454c 0000 0000 2509 0963 7525 2509     IDLE.....%c.%u.%
200077f8:	0975 7525 0a0d 0000 2509 0975 2509 2575     u.%u.....%u..%u%
20007808:	0d25 000a 2509 0975 3c09 2531 0d25 000a     %....%u..<1%%...
20007818:	6d54 2072 7653 0063                         Tmr Svc.

20007820 <xHeapStructSize>:
20007820:	0008 0000                                   ....

20007824 <pcInterruptPriorityRegisters>:
20007824:	e3f0 e000 4b48 0000 6150 6c79 616f 0064     ....HK..Payload.
20007834:	6175 7472 695f 7172 0000 0000 4b50 5f54     uart_irq....PKT_
20007844:	6954 656d 0072 0000                         Timer...

2000784c <C.138.6388>:
2000784c:	0020 000f                                    ...

20007850 <C.139.6389>:
20007850:	0030 0001                                   0...

20007854 <C.140.6390>:
20007854:	0028 0001                                   (...

20007858 <C.18.3459>:
20007858:	0100 0100 0202 0303                         ........

20007860 <_init>:
20007860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20007862:	bf00      	nop
20007864:	bcf8      	pop	{r3, r4, r5, r6, r7}
20007866:	bc08      	pop	{r3}
20007868:	469e      	mov	lr, r3
2000786a:	4770      	bx	lr

2000786c <_fini>:
2000786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000786e:	bf00      	nop
20007870:	bcf8      	pop	{r3, r4, r5, r6, r7}
20007872:	bc08      	pop	{r3}
20007874:	469e      	mov	lr, r3
20007876:	4770      	bx	lr

20007878 <__frame_dummy_init_array_entry>:
20007878:	0305 2000                                   ... 

2000787c <__do_global_dtors_aux_fini_array_entry>:
2000787c:	02f1 2000                                   ... 
