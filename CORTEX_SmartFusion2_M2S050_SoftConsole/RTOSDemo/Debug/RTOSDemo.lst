
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000759c  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  2000759c  2000759c  0000f59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00006b1c  200075fc  200075fc  0000f5fc  2**2
                  ALLOC
  3 .stack        00000400  2000e118  2000e118  0000f5fc  2**0
                  ALLOC
  4 .comment      00000433  00000000  00000000  0000f5fc  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000bb8  00000000  00000000  0000fa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001d4b  00000000  00000000  000105e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e2b6  00000000  00000000  00012332  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000234b  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000107ca  00000000  00000000  00022933  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002700  00000000  00000000  00033100  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004b3c  00000000  00000000  00035800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000040b2  00000000  00000000  0003a33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 000c02f1  00000000  00000000  0003e3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  000fe6df  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000b50  00000000  00000000  000fe704  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	20004241 	.word	0x20004241
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	20004471 	.word	0x20004471
2000003c:	200044c1 	.word	0x200044c1
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20000213 	.word	0x20000213
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20000219 	.word	0x20000219
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	2000561d 	.word	0x2000561d
2000006c:	20005641 	.word	0x20005641
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	2000516d 	.word	0x2000516d
200000cc:	20005181 	.word	0x20005181
200000d0:	20005195 	.word	0x20005195
200000d4:	200051a9 	.word	0x200051a9
200000d8:	200051bd 	.word	0x200051bd
200000dc:	200051d1 	.word	0x200051d1
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>

20000212 <I2C0_IRQHandler>:
20000212:	e7fe      	b.n	20000212 <I2C0_IRQHandler>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>

20000218 <I2C1_IRQHandler>:
20000218:	e7fe      	b.n	20000218 <I2C1_IRQHandler>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	20006e1d 	.word	0x20006e1d
200002b4:	00000000 	.word	0x00000000
200002b8:	20000000 	.word	0x20000000
200002bc:	20000000 	.word	0x20000000
200002c0:	2000759c 	.word	0x2000759c
200002c4:	2000759c 	.word	0x2000759c
200002c8:	2000759c 	.word	0x2000759c
200002cc:	200075fc 	.word	0x200075fc
200002d0:	00000000 	.word	0x00000000
200002d4:	200075fc 	.word	0x200075fc
200002d8:	2000e118 	.word	0x2000e118
200002dc:	20007229 	.word	0x20007229
200002e0:	2000040d 	.word	0x2000040d
	...

200002f0 <__do_global_dtors_aux>:
200002f0:	f247 53fc 	movw	r3, #30204	; 0x75fc
200002f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200002f8:	781a      	ldrb	r2, [r3, #0]
200002fa:	b90a      	cbnz	r2, 20000300 <__do_global_dtors_aux+0x10>
200002fc:	2001      	movs	r0, #1
200002fe:	7018      	strb	r0, [r3, #0]
20000300:	4770      	bx	lr
20000302:	bf00      	nop

20000304 <frame_dummy>:
20000304:	f247 509c 	movw	r0, #30108	; 0x759c
20000308:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000030c:	b508      	push	{r3, lr}
2000030e:	6803      	ldr	r3, [r0, #0]
20000310:	b12b      	cbz	r3, 2000031e <frame_dummy+0x1a>
20000312:	f240 0300 	movw	r3, #0
20000316:	f2c0 0300 	movt	r3, #0
2000031a:	b103      	cbz	r3, 2000031e <frame_dummy+0x1a>
2000031c:	4798      	blx	r3
2000031e:	bd08      	pop	{r3, pc}

20000320 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
20000320:	b480      	push	{r7}
20000322:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
20000324:	f64e 53fc 	movw	r3, #60924	; 0xedfc
20000328:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000032c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
20000330:	f2ce 0200 	movt	r2, #57344	; 0xe000
20000334:	6812      	ldr	r2, [r2, #0]
20000336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2000033a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
2000033c:	f241 0304 	movw	r3, #4100	; 0x1004
20000340:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000344:	f04f 0200 	mov.w	r2, #0
20000348:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
2000034a:	f241 0300 	movw	r3, #4096	; 0x1000
2000034e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000352:	f241 0200 	movw	r2, #4096	; 0x1000
20000356:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000035a:	6812      	ldr	r2, [r2, #0]
2000035c:	f042 0201 	orr.w	r2, r2, #1
20000360:	601a      	str	r2, [r3, #0]
}
20000362:	46bd      	mov	sp, r7
20000364:	bc80      	pop	{r7}
20000366:	4770      	bx	lr

20000368 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
20000368:	b480      	push	{r7}
2000036a:	b083      	sub	sp, #12
2000036c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
2000036e:	f241 0304 	movw	r3, #4100	; 0x1004
20000372:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
2000037a:	f247 6300 	movw	r3, #30208	; 0x7600
2000037e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000382:	681b      	ldr	r3, [r3, #0]
20000384:	687a      	ldr	r2, [r7, #4]
20000386:	429a      	cmp	r2, r3
20000388:	d20b      	bcs.n	200003a2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
2000038a:	f247 6304 	movw	r3, #30212	; 0x7604
2000038e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	f103 0201 	add.w	r2, r3, #1
20000398:	f247 6304 	movw	r3, #30212	; 0x7604
2000039c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003a0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
200003a2:	f247 6300 	movw	r3, #30208	; 0x7600
200003a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003aa:	687a      	ldr	r2, [r7, #4]
200003ac:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
200003ae:	f247 53e0 	movw	r3, #30176	; 0x75e0
200003b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003b6:	681a      	ldr	r2, [r3, #0]
200003b8:	f641 537f 	movw	r3, #7551	; 0x1d7f
200003bc:	f2c0 432c 	movt	r3, #1068	; 0x42c
200003c0:	429a      	cmp	r2, r3
200003c2:	d80e      	bhi.n	200003e2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
200003c4:	687b      	ldr	r3, [r7, #4]
200003c6:	ea4f 3353 	mov.w	r3, r3, lsr #13
200003ca:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
200003cc:	f247 6304 	movw	r3, #30212	; 0x7604
200003d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003d4:	681b      	ldr	r3, [r3, #0]
200003d6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
200003da:	687a      	ldr	r2, [r7, #4]
200003dc:	4413      	add	r3, r2
200003de:	607b      	str	r3, [r7, #4]
200003e0:	e00d      	b.n	200003fe <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
200003e2:	687b      	ldr	r3, [r7, #4]
200003e4:	ea4f 3393 	mov.w	r3, r3, lsr #14
200003e8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
200003ea:	f247 6304 	movw	r3, #30212	; 0x7604
200003ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200003f2:	681b      	ldr	r3, [r3, #0]
200003f4:	ea4f 4383 	mov.w	r3, r3, lsl #18
200003f8:	687a      	ldr	r2, [r7, #4]
200003fa:	4413      	add	r3, r2
200003fc:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
200003fe:	687b      	ldr	r3, [r7, #4]
}
20000400:	4618      	mov	r0, r3
20000402:	f107 070c 	add.w	r7, r7, #12
20000406:	46bd      	mov	sp, r7
20000408:	bc80      	pop	{r7}
2000040a:	4770      	bx	lr

2000040c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
2000040c:	b580      	push	{r7, lr}
2000040e:	af00      	add	r7, sp, #0
		//main_blinky();


//		demo();

		demo_tasks();
20000410:	f004 fd48 	bl	20004ea4 <demo_tasks>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
20000414:	f04f 0300 	mov.w	r3, #0
}
20000418:	4618      	mov	r0, r3
2000041a:	bd80      	pop	{r7, pc}

2000041c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
2000041c:	b480      	push	{r7}
2000041e:	b083      	sub	sp, #12
20000420:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000426:	f383 8811 	msr	BASEPRI, r3
2000042a:	f3bf 8f6f 	isb	sy
2000042e:	f3bf 8f4f 	dsb	sy
20000432:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000434:	e7fe      	b.n	20000434 <vApplicationMallocFailedHook+0x18>
20000436:	bf00      	nop

20000438 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
20000438:	b480      	push	{r7}
2000043a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
2000043c:	46bd      	mov	sp, r7
2000043e:	bc80      	pop	{r7}
20000440:	4770      	bx	lr
20000442:	bf00      	nop

20000444 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
20000444:	b480      	push	{r7}
20000446:	b085      	sub	sp, #20
20000448:	af00      	add	r7, sp, #0
2000044a:	6078      	str	r0, [r7, #4]
2000044c:	6039      	str	r1, [r7, #0]
2000044e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20000452:	f383 8811 	msr	BASEPRI, r3
20000456:	f3bf 8f6f 	isb	sy
2000045a:	f3bf 8f4f 	dsb	sy
2000045e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
20000460:	e7fe      	b.n	20000460 <vApplicationStackOverflowHook+0x1c>
20000462:	bf00      	nop

20000464 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
20000464:	b580      	push	{r7, lr}
20000466:	b092      	sub	sp, #72	; 0x48
20000468:	af04      	add	r7, sp, #16
2000046a:	60f8      	str	r0, [r7, #12]
2000046c:	60b9      	str	r1, [r7, #8]
2000046e:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
20000470:	f247 43e0 	movw	r3, #29920	; 0x74e0
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	881b      	ldrh	r3, [r3, #0]
2000047a:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
2000047c:	f04f 0328 	mov.w	r3, #40	; 0x28
20000480:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
20000484:	f04f 032a 	mov.w	r3, #42	; 0x2a
20000488:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
2000048c:	f04f 032c 	mov.w	r3, #44	; 0x2c
20000490:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
20000494:	f04f 0329 	mov.w	r3, #41	; 0x29
20000498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
2000049c:	f04f 032b 	mov.w	r3, #43	; 0x2b
200004a0:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
200004a4:	f04f 032d 	mov.w	r3, #45	; 0x2d
200004a8:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
200004aa:	f04f 0300 	mov.w	r3, #0
200004ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
200004b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
200004b6:	f04f 0200 	mov.w	r2, #0
200004ba:	9200      	str	r2, [sp, #0]
200004bc:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200004c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004c4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200004c8:	461a      	mov	r2, r3
200004ca:	f04f 0302 	mov.w	r3, #2
200004ce:	f005 fcdd 	bl	20005e8c <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
200004d2:	f107 0318 	add.w	r3, r7, #24
200004d6:	f04f 0200 	mov.w	r2, #0
200004da:	9200      	str	r2, [sp, #0]
200004dc:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200004e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004e4:	f04f 016a 	mov.w	r1, #106	; 0x6a
200004e8:	461a      	mov	r2, r3
200004ea:	f04f 0301 	mov.w	r3, #1
200004ee:	f005 fd3f 	bl	20005f70 <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200004f2:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200004f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004fa:	f04f 0100 	mov.w	r1, #0
200004fe:	f005 fe41 	bl	20006184 <I2C_wait_complete>
20000502:	4603      	mov	r3, r0
20000504:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000508:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000050c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000510:	4413      	add	r3, r2
20000512:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
20000516:	f107 0328 	add.w	r3, r7, #40	; 0x28
2000051a:	f107 0218 	add.w	r2, r7, #24
2000051e:	9200      	str	r2, [sp, #0]
20000520:	f04f 0201 	mov.w	r2, #1
20000524:	9201      	str	r2, [sp, #4]
20000526:	f04f 0200 	mov.w	r2, #0
2000052a:	9202      	str	r2, [sp, #8]
2000052c:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000530:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000534:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000538:	461a      	mov	r2, r3
2000053a:	f04f 0301 	mov.w	r3, #1
2000053e:	f005 fd89 	bl	20006054 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000542:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000546:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054a:	f04f 0100 	mov.w	r1, #0
2000054e:	f005 fe19 	bl	20006184 <I2C_wait_complete>
20000552:	4603      	mov	r3, r0
20000554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000558:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000055c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000560:	4413      	add	r3, r2
20000562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
20000566:	f107 031c 	add.w	r3, r7, #28
2000056a:	f107 0214 	add.w	r2, r7, #20
2000056e:	9200      	str	r2, [sp, #0]
20000570:	f04f 0201 	mov.w	r2, #1
20000574:	9201      	str	r2, [sp, #4]
20000576:	f04f 0200 	mov.w	r2, #0
2000057a:	9202      	str	r2, [sp, #8]
2000057c:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000580:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000584:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000588:	461a      	mov	r2, r3
2000058a:	f04f 0301 	mov.w	r3, #1
2000058e:	f005 fd61 	bl	20006054 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000592:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000596:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059a:	f04f 0100 	mov.w	r1, #0
2000059e:	f005 fdf1 	bl	20006184 <I2C_wait_complete>
200005a2:	4603      	mov	r3, r0
200005a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200005a8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200005ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200005b0:	4413      	add	r3, r2
200005b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200005b6:	7d3b      	ldrb	r3, [r7, #20]
200005b8:	ea4f 2303 	mov.w	r3, r3, lsl #8
200005bc:	b29a      	uxth	r2, r3
200005be:	7e3b      	ldrb	r3, [r7, #24]
200005c0:	ea42 0303 	orr.w	r3, r2, r3
200005c4:	b29b      	uxth	r3, r3
200005c6:	b29a      	uxth	r2, r3
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	881b      	ldrh	r3, [r3, #0]
200005d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200005d4:	d906      	bls.n	200005e4 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
200005d6:	687b      	ldr	r3, [r7, #4]
200005d8:	881b      	ldrh	r3, [r3, #0]
200005da:	ea6f 0303 	mvn.w	r3, r3
200005de:	b29a      	uxth	r2, r3
200005e0:	687b      	ldr	r3, [r7, #4]
200005e2:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
200005e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200005e8:	f107 0218 	add.w	r2, r7, #24
200005ec:	9200      	str	r2, [sp, #0]
200005ee:	f04f 0201 	mov.w	r2, #1
200005f2:	9201      	str	r2, [sp, #4]
200005f4:	f04f 0200 	mov.w	r2, #0
200005f8:	9202      	str	r2, [sp, #8]
200005fa:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200005fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000602:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000606:	461a      	mov	r2, r3
20000608:	f04f 0301 	mov.w	r3, #1
2000060c:	f005 fd22 	bl	20006054 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000610:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000614:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000618:	f04f 0100 	mov.w	r1, #0
2000061c:	f005 fdb2 	bl	20006184 <I2C_wait_complete>
20000620:	4603      	mov	r3, r0
20000622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000626:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000062a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000062e:	4413      	add	r3, r2
20000630:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
20000634:	f107 0320 	add.w	r3, r7, #32
20000638:	f107 0214 	add.w	r2, r7, #20
2000063c:	9200      	str	r2, [sp, #0]
2000063e:	f04f 0201 	mov.w	r2, #1
20000642:	9201      	str	r2, [sp, #4]
20000644:	f04f 0200 	mov.w	r2, #0
20000648:	9202      	str	r2, [sp, #8]
2000064a:	f64d 60e4 	movw	r0, #57060	; 0xdee4
2000064e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000652:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000656:	461a      	mov	r2, r3
20000658:	f04f 0301 	mov.w	r3, #1
2000065c:	f005 fcfa 	bl	20006054 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000660:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000664:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000668:	f04f 0100 	mov.w	r1, #0
2000066c:	f005 fd8a 	bl	20006184 <I2C_wait_complete>
20000670:	4603      	mov	r3, r0
20000672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000676:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000067a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000067e:	4413      	add	r3, r2
20000680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000684:	7d3b      	ldrb	r3, [r7, #20]
20000686:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000068a:	b29a      	uxth	r2, r3
2000068c:	7e3b      	ldrb	r3, [r7, #24]
2000068e:	ea42 0303 	orr.w	r3, r2, r3
20000692:	b29b      	uxth	r3, r3
20000694:	b29a      	uxth	r2, r3
20000696:	68bb      	ldr	r3, [r7, #8]
20000698:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
2000069a:	68bb      	ldr	r3, [r7, #8]
2000069c:	881b      	ldrh	r3, [r3, #0]
2000069e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200006a2:	d906      	bls.n	200006b2 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
200006a4:	68bb      	ldr	r3, [r7, #8]
200006a6:	881b      	ldrh	r3, [r3, #0]
200006a8:	ea6f 0303 	mvn.w	r3, r3
200006ac:	b29a      	uxth	r2, r3
200006ae:	68bb      	ldr	r3, [r7, #8]
200006b0:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
200006b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
200006b6:	f107 0218 	add.w	r2, r7, #24
200006ba:	9200      	str	r2, [sp, #0]
200006bc:	f04f 0201 	mov.w	r2, #1
200006c0:	9201      	str	r2, [sp, #4]
200006c2:	f04f 0200 	mov.w	r2, #0
200006c6:	9202      	str	r2, [sp, #8]
200006c8:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200006cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006d0:	f04f 016a 	mov.w	r1, #106	; 0x6a
200006d4:	461a      	mov	r2, r3
200006d6:	f04f 0301 	mov.w	r3, #1
200006da:	f005 fcbb 	bl	20006054 <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200006de:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200006e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006e6:	f04f 0100 	mov.w	r1, #0
200006ea:	f005 fd4b 	bl	20006184 <I2C_wait_complete>
200006ee:	4603      	mov	r3, r0
200006f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
200006f4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200006f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200006fc:	4413      	add	r3, r2
200006fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
20000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
20000706:	f107 0214 	add.w	r2, r7, #20
2000070a:	9200      	str	r2, [sp, #0]
2000070c:	f04f 0201 	mov.w	r2, #1
20000710:	9201      	str	r2, [sp, #4]
20000712:	f04f 0200 	mov.w	r2, #0
20000716:	9202      	str	r2, [sp, #8]
20000718:	f64d 60e4 	movw	r0, #57060	; 0xdee4
2000071c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000720:	f04f 016a 	mov.w	r1, #106	; 0x6a
20000724:	461a      	mov	r2, r3
20000726:	f04f 0301 	mov.w	r3, #1
2000072a:	f005 fc93 	bl	20006054 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000072e:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000732:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000736:	f04f 0100 	mov.w	r1, #0
2000073a:	f005 fd23 	bl	20006184 <I2C_wait_complete>
2000073e:	4603      	mov	r3, r0
20000740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
20000744:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000074c:	4413      	add	r3, r2
2000074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000752:	7d3b      	ldrb	r3, [r7, #20]
20000754:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000758:	b29a      	uxth	r2, r3
2000075a:	7e3b      	ldrb	r3, [r7, #24]
2000075c:	ea42 0303 	orr.w	r3, r2, r3
20000760:	b29b      	uxth	r3, r3
20000762:	b29a      	uxth	r2, r3
20000764:	68fb      	ldr	r3, [r7, #12]
20000766:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
20000768:	68fb      	ldr	r3, [r7, #12]
2000076a:	881b      	ldrh	r3, [r3, #0]
2000076c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000770:	d906      	bls.n	20000780 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
20000772:	68fb      	ldr	r3, [r7, #12]
20000774:	881b      	ldrh	r3, [r3, #0]
20000776:	ea6f 0303 	mvn.w	r3, r3
2000077a:	b29a      	uxth	r2, r3
2000077c:	68fb      	ldr	r3, [r7, #12]
2000077e:	801a      	strh	r2, [r3, #0]
	}

	return status;
20000780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
20000784:	4618      	mov	r0, r3
20000786:	f107 0738 	add.w	r7, r7, #56	; 0x38
2000078a:	46bd      	mov	sp, r7
2000078c:	bd80      	pop	{r7, pc}
2000078e:	bf00      	nop

20000790 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
20000790:	b580      	push	{r7, lr}
20000792:	b092      	sub	sp, #72	; 0x48
20000794:	af04      	add	r7, sp, #16
20000796:	60f8      	str	r0, [r7, #12]
20000798:	60b9      	str	r1, [r7, #8]
2000079a:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
2000079c:	f247 43dc 	movw	r3, #29916	; 0x74dc
200007a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200007a4:	881b      	ldrh	r3, [r3, #0]
200007a6:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
200007a8:	f04f 0318 	mov.w	r3, #24
200007ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
200007b0:	f04f 031a 	mov.w	r3, #26
200007b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
200007b8:	f04f 031c 	mov.w	r3, #28
200007bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
200007c0:	f04f 0319 	mov.w	r3, #25
200007c4:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
200007c8:	f04f 031b 	mov.w	r3, #27
200007cc:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
200007ce:	f04f 031d 	mov.w	r3, #29
200007d2:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
200007d4:	f04f 036a 	mov.w	r3, #106	; 0x6a
200007d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
200007dc:	f04f 0300 	mov.w	r3, #0
200007e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
200007e4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200007e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
200007ec:	f107 0114 	add.w	r1, r7, #20
200007f0:	9100      	str	r1, [sp, #0]
200007f2:	f04f 0101 	mov.w	r1, #1
200007f6:	9101      	str	r1, [sp, #4]
200007f8:	f04f 0100 	mov.w	r1, #0
200007fc:	9102      	str	r1, [sp, #8]
200007fe:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000802:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000806:	4611      	mov	r1, r2
20000808:	461a      	mov	r2, r3
2000080a:	f04f 0302 	mov.w	r3, #2
2000080e:	f005 fc21 	bl	20006054 <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000812:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000816:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000081a:	f04f 0100 	mov.w	r1, #0
2000081e:	f005 fcb1 	bl	20006184 <I2C_wait_complete>
20000822:	4603      	mov	r3, r0
20000824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000828:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000082c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000830:	4413      	add	r3, r2
20000832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
20000836:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000083e:	f107 0114 	add.w	r1, r7, #20
20000842:	9100      	str	r1, [sp, #0]
20000844:	f04f 0101 	mov.w	r1, #1
20000848:	9101      	str	r1, [sp, #4]
2000084a:	f04f 0100 	mov.w	r1, #0
2000084e:	9102      	str	r1, [sp, #8]
20000850:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000854:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000858:	4611      	mov	r1, r2
2000085a:	461a      	mov	r2, r3
2000085c:	f04f 0301 	mov.w	r3, #1
20000860:	f005 fbf8 	bl	20006054 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000864:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000868:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000086c:	f04f 0100 	mov.w	r1, #0
20000870:	f005 fc88 	bl	20006184 <I2C_wait_complete>
20000874:	4603      	mov	r3, r0
20000876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
2000087a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000087e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000882:	4413      	add	r3, r2
20000884:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
20000888:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
2000088c:	f107 0318 	add.w	r3, r7, #24
20000890:	f107 0110 	add.w	r1, r7, #16
20000894:	9100      	str	r1, [sp, #0]
20000896:	f04f 0101 	mov.w	r1, #1
2000089a:	9101      	str	r1, [sp, #4]
2000089c:	f04f 0100 	mov.w	r1, #0
200008a0:	9102      	str	r1, [sp, #8]
200008a2:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200008a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008aa:	4611      	mov	r1, r2
200008ac:	461a      	mov	r2, r3
200008ae:	f04f 0301 	mov.w	r3, #1
200008b2:	f005 fbcf 	bl	20006054 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200008b6:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200008ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008be:	f04f 0100 	mov.w	r1, #0
200008c2:	f005 fc5f 	bl	20006184 <I2C_wait_complete>
200008c6:	4603      	mov	r3, r0
200008c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200008cc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200008d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200008d4:	4413      	add	r3, r2
200008d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
200008da:	7c3b      	ldrb	r3, [r7, #16]
200008dc:	ea4f 2303 	mov.w	r3, r3, lsl #8
200008e0:	b29a      	uxth	r2, r3
200008e2:	7d3b      	ldrb	r3, [r7, #20]
200008e4:	ea42 0303 	orr.w	r3, r2, r3
200008e8:	b29b      	uxth	r3, r3
200008ea:	b29a      	uxth	r2, r3
200008ec:	68fb      	ldr	r3, [r7, #12]
200008ee:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
200008f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200008f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
200008f8:	f107 0114 	add.w	r1, r7, #20
200008fc:	9100      	str	r1, [sp, #0]
200008fe:	f04f 0101 	mov.w	r1, #1
20000902:	9101      	str	r1, [sp, #4]
20000904:	f04f 0100 	mov.w	r1, #0
20000908:	9102      	str	r1, [sp, #8]
2000090a:	f64d 60e4 	movw	r0, #57060	; 0xdee4
2000090e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000912:	4611      	mov	r1, r2
20000914:	461a      	mov	r2, r3
20000916:	f04f 0301 	mov.w	r3, #1
2000091a:	f005 fb9b 	bl	20006054 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
2000091e:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000922:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000926:	f04f 0100 	mov.w	r1, #0
2000092a:	f005 fc2b 	bl	20006184 <I2C_wait_complete>
2000092e:	4603      	mov	r3, r0
20000930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000934:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000093c:	4413      	add	r3, r2
2000093e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
20000942:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000946:	f107 031c 	add.w	r3, r7, #28
2000094a:	f107 0110 	add.w	r1, r7, #16
2000094e:	9100      	str	r1, [sp, #0]
20000950:	f04f 0101 	mov.w	r1, #1
20000954:	9101      	str	r1, [sp, #4]
20000956:	f04f 0100 	mov.w	r1, #0
2000095a:	9102      	str	r1, [sp, #8]
2000095c:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000960:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000964:	4611      	mov	r1, r2
20000966:	461a      	mov	r2, r3
20000968:	f04f 0301 	mov.w	r3, #1
2000096c:	f005 fb72 	bl	20006054 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000970:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000974:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000978:	f04f 0100 	mov.w	r1, #0
2000097c:	f005 fc02 	bl	20006184 <I2C_wait_complete>
20000980:	4603      	mov	r3, r0
20000982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000986:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
2000098a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
2000098e:	4413      	add	r3, r2
20000990:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000994:	7c3b      	ldrb	r3, [r7, #16]
20000996:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000099a:	b29a      	uxth	r2, r3
2000099c:	7d3b      	ldrb	r3, [r7, #20]
2000099e:	ea42 0303 	orr.w	r3, r2, r3
200009a2:	b29b      	uxth	r3, r3
200009a4:	b29a      	uxth	r2, r3
200009a6:	68bb      	ldr	r3, [r7, #8]
200009a8:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
200009aa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
200009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
200009b2:	f107 0114 	add.w	r1, r7, #20
200009b6:	9100      	str	r1, [sp, #0]
200009b8:	f04f 0101 	mov.w	r1, #1
200009bc:	9101      	str	r1, [sp, #4]
200009be:	f04f 0100 	mov.w	r1, #0
200009c2:	9102      	str	r1, [sp, #8]
200009c4:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200009c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009cc:	4611      	mov	r1, r2
200009ce:	461a      	mov	r2, r3
200009d0:	f04f 0301 	mov.w	r3, #1
200009d4:	f005 fb3e 	bl	20006054 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
200009d8:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200009dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009e0:	f04f 0100 	mov.w	r1, #0
200009e4:	f005 fbce 	bl	20006184 <I2C_wait_complete>
200009e8:	4603      	mov	r3, r0
200009ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
200009ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
200009f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
200009f6:	4413      	add	r3, r2
200009f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
200009fc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
20000a00:	f107 0320 	add.w	r3, r7, #32
20000a04:	f107 0110 	add.w	r1, r7, #16
20000a08:	9100      	str	r1, [sp, #0]
20000a0a:	f04f 0101 	mov.w	r1, #1
20000a0e:	9101      	str	r1, [sp, #4]
20000a10:	f04f 0100 	mov.w	r1, #0
20000a14:	9102      	str	r1, [sp, #8]
20000a16:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a1e:	4611      	mov	r1, r2
20000a20:	461a      	mov	r2, r3
20000a22:	f04f 0301 	mov.w	r3, #1
20000a26:	f005 fb15 	bl	20006054 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000a2a:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000a2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a32:	f04f 0100 	mov.w	r1, #0
20000a36:	f005 fba5 	bl	20006184 <I2C_wait_complete>
20000a3a:	4603      	mov	r3, r0
20000a3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
20000a40:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
20000a44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000a48:	4413      	add	r3, r2
20000a4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
20000a4e:	7c3b      	ldrb	r3, [r7, #16]
20000a50:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000a54:	b29a      	uxth	r2, r3
20000a56:	7d3b      	ldrb	r3, [r7, #20]
20000a58:	ea42 0303 	orr.w	r3, r2, r3
20000a5c:	b29b      	uxth	r3, r3
20000a5e:	b29a      	uxth	r2, r3
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	801a      	strh	r2, [r3, #0]

		return status;
20000a64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
20000a68:	4618      	mov	r0, r3
20000a6a:	f107 0738 	add.w	r7, r7, #56	; 0x38
20000a6e:	46bd      	mov	sp, r7
20000a70:	bd80      	pop	{r7, pc}
20000a72:	bf00      	nop

20000a74 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
20000a74:	b580      	push	{r7, lr}
20000a76:	b08a      	sub	sp, #40	; 0x28
20000a78:	af04      	add	r7, sp, #16
20000a7a:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
20000a7c:	f04f 0315 	mov.w	r3, #21
20000a80:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
20000a82:	f04f 0316 	mov.w	r3, #22
20000a86:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
20000a88:	f04f 036a 	mov.w	r3, #106	; 0x6a
20000a8c:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
20000a8e:	7dba      	ldrb	r2, [r7, #22]
20000a90:	f107 0314 	add.w	r3, r7, #20
20000a94:	f107 010c 	add.w	r1, r7, #12
20000a98:	9100      	str	r1, [sp, #0]
20000a9a:	f04f 0101 	mov.w	r1, #1
20000a9e:	9101      	str	r1, [sp, #4]
20000aa0:	f04f 0100 	mov.w	r1, #0
20000aa4:	9102      	str	r1, [sp, #8]
20000aa6:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000aaa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aae:	4611      	mov	r1, r2
20000ab0:	461a      	mov	r2, r3
20000ab2:	f04f 0301 	mov.w	r3, #1
20000ab6:	f005 facd 	bl	20006054 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000aba:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ac2:	f04f 0100 	mov.w	r1, #0
20000ac6:	f005 fb5d 	bl	20006184 <I2C_wait_complete>
20000aca:	4603      	mov	r3, r0
20000acc:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
20000ace:	7dba      	ldrb	r2, [r7, #22]
20000ad0:	f107 0310 	add.w	r3, r7, #16
20000ad4:	f107 0108 	add.w	r1, r7, #8
20000ad8:	9100      	str	r1, [sp, #0]
20000ada:	f04f 0101 	mov.w	r1, #1
20000ade:	9101      	str	r1, [sp, #4]
20000ae0:	f04f 0100 	mov.w	r1, #0
20000ae4:	9102      	str	r1, [sp, #8]
20000ae6:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000aea:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aee:	4611      	mov	r1, r2
20000af0:	461a      	mov	r2, r3
20000af2:	f04f 0301 	mov.w	r3, #1
20000af6:	f005 faad 	bl	20006054 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
20000afa:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000afe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b02:	f04f 0100 	mov.w	r1, #0
20000b06:	f005 fb3d 	bl	20006184 <I2C_wait_complete>
20000b0a:	4603      	mov	r3, r0
20000b0c:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
20000b0e:	7b3b      	ldrb	r3, [r7, #12]
20000b10:	461a      	mov	r2, r3
20000b12:	7a3b      	ldrb	r3, [r7, #8]
20000b14:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b18:	b29b      	uxth	r3, r3
20000b1a:	ea42 0303 	orr.w	r3, r2, r3
20000b1e:	b29b      	uxth	r3, r3
20000b20:	b29a      	uxth	r2, r3
20000b22:	687b      	ldr	r3, [r7, #4]
20000b24:	801a      	strh	r2, [r3, #0]

		return 0;
20000b26:	f04f 0300 	mov.w	r3, #0

}
20000b2a:	4618      	mov	r0, r3
20000b2c:	f107 0718 	add.w	r7, r7, #24
20000b30:	46bd      	mov	sp, r7
20000b32:	bd80      	pop	{r7, pc}

20000b34 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
20000b34:	b580      	push	{r7, lr}
20000b36:	b086      	sub	sp, #24
20000b38:	af02      	add	r7, sp, #8
20000b3a:	60b9      	str	r1, [r7, #8]
20000b3c:	4613      	mov	r3, r2
20000b3e:	4602      	mov	r2, r0
20000b40:	73fa      	strb	r2, [r7, #15]
20000b42:	71fb      	strb	r3, [r7, #7]
     count = 0;
20000b44:	f64d 6308 	movw	r3, #56840	; 0xde08
20000b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b4c:	f04f 0200 	mov.w	r2, #0
20000b50:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000b52:	e032      	b.n	20000bba <vc_write+0x86>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
20000b54:	79fb      	ldrb	r3, [r7, #7]
20000b56:	7bfa      	ldrb	r2, [r7, #15]
20000b58:	f04f 0100 	mov.w	r1, #0
20000b5c:	9100      	str	r1, [sp, #0]
20000b5e:	f64d 1050 	movw	r0, #55632	; 0xd950
20000b62:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b66:	4611      	mov	r1, r2
20000b68:	68ba      	ldr	r2, [r7, #8]
20000b6a:	f005 f98f 	bl	20005e8c <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000b6e:	f64d 1050 	movw	r0, #55632	; 0xd950
20000b72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b76:	f04f 0100 	mov.w	r1, #0
20000b7a:	f005 fb03 	bl	20006184 <I2C_wait_complete>
20000b7e:	4603      	mov	r3, r0
20000b80:	461a      	mov	r2, r3
20000b82:	f64d 630a 	movw	r3, #56842	; 0xde0a
20000b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b8a:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000b8c:	f64d 630a 	movw	r3, #56842	; 0xde0a
20000b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b94:	781b      	ldrb	r3, [r3, #0]
20000b96:	2b00      	cmp	r3, #0
20000b98:	d102      	bne.n	20000ba0 <vc_write+0x6c>
            return 0;
20000b9a:	f04f 0300 	mov.w	r3, #0
20000b9e:	e018      	b.n	20000bd2 <vc_write+0x9e>
        }
        count++;
20000ba0:	f64d 6308 	movw	r3, #56840	; 0xde08
20000ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba8:	781b      	ldrb	r3, [r3, #0]
20000baa:	f103 0301 	add.w	r3, r3, #1
20000bae:	b2da      	uxtb	r2, r3
20000bb0:	f64d 6308 	movw	r3, #56840	; 0xde08
20000bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bb8:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
20000bba:	f64d 6308 	movw	r3, #56840	; 0xde08
20000bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bc2:	781b      	ldrb	r3, [r3, #0]
20000bc4:	2b09      	cmp	r3, #9
20000bc6:	d9c5      	bls.n	20000b54 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000bc8:	f64d 6308 	movw	r3, #56840	; 0xde08
20000bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bd0:	781b      	ldrb	r3, [r3, #0]

}
20000bd2:	4618      	mov	r0, r3
20000bd4:	f107 0710 	add.w	r7, r7, #16
20000bd8:	46bd      	mov	sp, r7
20000bda:	bd80      	pop	{r7, pc}

20000bdc <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
20000bdc:	b580      	push	{r7, lr}
20000bde:	b086      	sub	sp, #24
20000be0:	af02      	add	r7, sp, #8
20000be2:	60b9      	str	r1, [r7, #8]
20000be4:	4613      	mov	r3, r2
20000be6:	4602      	mov	r2, r0
20000be8:	73fa      	strb	r2, [r7, #15]
20000bea:	71fb      	strb	r3, [r7, #7]
    count = 0;
20000bec:	f64d 6308 	movw	r3, #56840	; 0xde08
20000bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bf4:	f04f 0200 	mov.w	r2, #0
20000bf8:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
20000bfa:	e032      	b.n	20000c62 <vc_read+0x86>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
20000bfc:	79fb      	ldrb	r3, [r7, #7]
20000bfe:	7bfa      	ldrb	r2, [r7, #15]
20000c00:	f04f 0100 	mov.w	r1, #0
20000c04:	9100      	str	r1, [sp, #0]
20000c06:	f64d 1050 	movw	r0, #55632	; 0xd950
20000c0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c0e:	4611      	mov	r1, r2
20000c10:	68ba      	ldr	r2, [r7, #8]
20000c12:	f005 f9ad 	bl	20005f70 <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
20000c16:	f64d 1050 	movw	r0, #55632	; 0xd950
20000c1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000c1e:	f04f 0100 	mov.w	r1, #0
20000c22:	f005 faaf 	bl	20006184 <I2C_wait_complete>
20000c26:	4603      	mov	r3, r0
20000c28:	461a      	mov	r2, r3
20000c2a:	f64d 630a 	movw	r3, #56842	; 0xde0a
20000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c32:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
20000c34:	f64d 630a 	movw	r3, #56842	; 0xde0a
20000c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c3c:	781b      	ldrb	r3, [r3, #0]
20000c3e:	2b00      	cmp	r3, #0
20000c40:	d102      	bne.n	20000c48 <vc_read+0x6c>
            return 0;
20000c42:	f04f 0300 	mov.w	r3, #0
20000c46:	e018      	b.n	20000c7a <vc_read+0x9e>
        }
        count++;
20000c48:	f64d 6308 	movw	r3, #56840	; 0xde08
20000c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c50:	781b      	ldrb	r3, [r3, #0]
20000c52:	f103 0301 	add.w	r3, r3, #1
20000c56:	b2da      	uxtb	r2, r3
20000c58:	f64d 6308 	movw	r3, #56840	; 0xde08
20000c5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c60:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
20000c62:	f64d 6308 	movw	r3, #56840	; 0xde08
20000c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c6a:	781b      	ldrb	r3, [r3, #0]
20000c6c:	2b09      	cmp	r3, #9
20000c6e:	d9c5      	bls.n	20000bfc <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
20000c70:	f64d 6308 	movw	r3, #56840	; 0xde08
20000c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c78:	781b      	ldrb	r3, [r3, #0]

}
20000c7a:	4618      	mov	r0, r3
20000c7c:	f107 0710 	add.w	r7, r7, #16
20000c80:	46bd      	mov	sp, r7
20000c82:	bd80      	pop	{r7, pc}

20000c84 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
20000c84:	b580      	push	{r7, lr}
20000c86:	b082      	sub	sp, #8
20000c88:	af00      	add	r7, sp, #0
20000c8a:	460b      	mov	r3, r1
20000c8c:	603a      	str	r2, [r7, #0]
20000c8e:	4602      	mov	r2, r0
20000c90:	71fa      	strb	r2, [r7, #7]
20000c92:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
20000c94:	79fa      	ldrb	r2, [r7, #7]
20000c96:	f107 0306 	add.w	r3, r7, #6
20000c9a:	4610      	mov	r0, r2
20000c9c:	4619      	mov	r1, r3
20000c9e:	f04f 0201 	mov.w	r2, #1
20000ca2:	f7ff ff47 	bl	20000b34 <vc_write>
20000ca6:	4603      	mov	r3, r0
20000ca8:	2b09      	cmp	r3, #9
20000caa:	d902      	bls.n	20000cb2 <vc_read_reg+0x2e>
        return 1;
20000cac:	f04f 0301 	mov.w	r3, #1
20000cb0:	e00e      	b.n	20000cd0 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
20000cb2:	79fb      	ldrb	r3, [r7, #7]
20000cb4:	4618      	mov	r0, r3
20000cb6:	6839      	ldr	r1, [r7, #0]
20000cb8:	f04f 0202 	mov.w	r2, #2
20000cbc:	f7ff ff8e 	bl	20000bdc <vc_read>
20000cc0:	4603      	mov	r3, r0
20000cc2:	2b09      	cmp	r3, #9
20000cc4:	d902      	bls.n	20000ccc <vc_read_reg+0x48>
        return 1;
20000cc6:	f04f 0301 	mov.w	r3, #1
20000cca:	e001      	b.n	20000cd0 <vc_read_reg+0x4c>
    }

    return 0;
20000ccc:	f04f 0300 	mov.w	r3, #0
}
20000cd0:	4618      	mov	r0, r3
20000cd2:	f107 0708 	add.w	r7, r7, #8
20000cd6:	46bd      	mov	sp, r7
20000cd8:	bd80      	pop	{r7, pc}
20000cda:	bf00      	nop

20000cdc <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000cdc:	b580      	push	{r7, lr}
20000cde:	b082      	sub	sp, #8
20000ce0:	af00      	add	r7, sp, #0
20000ce2:	460b      	mov	r3, r1
20000ce4:	603a      	str	r2, [r7, #0]
20000ce6:	4602      	mov	r2, r0
20000ce8:	71fa      	strb	r2, [r7, #7]
20000cea:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000cec:	f64d 6304 	movw	r3, #56836	; 0xde04
20000cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cf4:	f04f 0200 	mov.w	r2, #0
20000cf8:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000cfa:	f64d 6304 	movw	r3, #56836	; 0xde04
20000cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d02:	f04f 0200 	mov.w	r2, #0
20000d06:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000d08:	f64d 6306 	movw	r3, #56838	; 0xde06
20000d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d10:	f04f 0200 	mov.w	r2, #0
20000d14:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
20000d16:	79bb      	ldrb	r3, [r7, #6]
20000d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d1c:	b2db      	uxtb	r3, r3
20000d1e:	79fa      	ldrb	r2, [r7, #7]
20000d20:	4610      	mov	r0, r2
20000d22:	4619      	mov	r1, r3
20000d24:	f64d 6204 	movw	r2, #56836	; 0xde04
20000d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000d2c:	f7ff ffaa 	bl	20000c84 <vc_read_reg>
20000d30:	4603      	mov	r3, r0
20000d32:	2b00      	cmp	r3, #0
20000d34:	d11a      	bne.n	20000d6c <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
20000d36:	f64d 6304 	movw	r3, #56836	; 0xde04
20000d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d3e:	781b      	ldrb	r3, [r3, #0]
20000d40:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000d44:	b29a      	uxth	r2, r3
20000d46:	f64d 6304 	movw	r3, #56836	; 0xde04
20000d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d4e:	785b      	ldrb	r3, [r3, #1]
20000d50:	ea42 0303 	orr.w	r3, r2, r3
20000d54:	b29b      	uxth	r3, r3
20000d56:	b29a      	uxth	r2, r3
20000d58:	f64d 6306 	movw	r3, #56838	; 0xde06
20000d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d60:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000d62:	683b      	ldr	r3, [r7, #0]
20000d64:	f04f 0200 	mov.w	r2, #0
20000d68:	701a      	strb	r2, [r3, #0]
20000d6a:	e00a      	b.n	20000d82 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
20000d6c:	683b      	ldr	r3, [r7, #0]
20000d6e:	f04f 0201 	mov.w	r2, #1
20000d72:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000d74:	f64d 6306 	movw	r3, #56838	; 0xde06
20000d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d7c:	f04f 0200 	mov.w	r2, #0
20000d80:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000d82:	f64d 6306 	movw	r3, #56838	; 0xde06
20000d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d8a:	881b      	ldrh	r3, [r3, #0]
}
20000d8c:	4618      	mov	r0, r3
20000d8e:	f107 0708 	add.w	r7, r7, #8
20000d92:	46bd      	mov	sp, r7
20000d94:	bd80      	pop	{r7, pc}
20000d96:	bf00      	nop

20000d98 <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
20000d98:	b580      	push	{r7, lr}
20000d9a:	b082      	sub	sp, #8
20000d9c:	af00      	add	r7, sp, #0
20000d9e:	460b      	mov	r3, r1
20000da0:	603a      	str	r2, [r7, #0]
20000da2:	4602      	mov	r2, r0
20000da4:	71fa      	strb	r2, [r7, #7]
20000da6:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
20000da8:	f64d 6304 	movw	r3, #56836	; 0xde04
20000dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db0:	f04f 0200 	mov.w	r2, #0
20000db4:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
20000db6:	f64d 6304 	movw	r3, #56836	; 0xde04
20000dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dbe:	f04f 0200 	mov.w	r2, #0
20000dc2:	705a      	strb	r2, [r3, #1]
	bvol = 0;
20000dc4:	f64d 6306 	movw	r3, #56838	; 0xde06
20000dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dcc:	f04f 0200 	mov.w	r2, #0
20000dd0:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
20000dd2:	79bb      	ldrb	r3, [r7, #6]
20000dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000dd8:	b2db      	uxtb	r3, r3
20000dda:	f103 33ff 	add.w	r3, r3, #4294967295
20000dde:	b2db      	uxtb	r3, r3
20000de0:	79fa      	ldrb	r2, [r7, #7]
20000de2:	4610      	mov	r0, r2
20000de4:	4619      	mov	r1, r3
20000de6:	f64d 6204 	movw	r2, #56836	; 0xde04
20000dea:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000dee:	f7ff ff49 	bl	20000c84 <vc_read_reg>
20000df2:	4603      	mov	r3, r0
20000df4:	2b00      	cmp	r3, #0
20000df6:	d11a      	bne.n	20000e2e <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
20000df8:	f64d 6304 	movw	r3, #56836	; 0xde04
20000dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e00:	781b      	ldrb	r3, [r3, #0]
20000e02:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e06:	b29a      	uxth	r2, r3
20000e08:	f64d 6304 	movw	r3, #56836	; 0xde04
20000e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e10:	785b      	ldrb	r3, [r3, #1]
20000e12:	ea42 0303 	orr.w	r3, r2, r3
20000e16:	b29b      	uxth	r3, r3
20000e18:	b29a      	uxth	r2, r3
20000e1a:	f64d 6306 	movw	r3, #56838	; 0xde06
20000e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e22:	801a      	strh	r2, [r3, #0]
		*flag = 0;
20000e24:	683b      	ldr	r3, [r7, #0]
20000e26:	f04f 0200 	mov.w	r2, #0
20000e2a:	701a      	strb	r2, [r3, #0]
20000e2c:	e00a      	b.n	20000e44 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
20000e2e:	683b      	ldr	r3, [r7, #0]
20000e30:	f04f 0201 	mov.w	r2, #1
20000e34:	701a      	strb	r2, [r3, #0]
		bvol = 0;
20000e36:	f64d 6306 	movw	r3, #56838	; 0xde06
20000e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e3e:	f04f 0200 	mov.w	r2, #0
20000e42:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
20000e44:	f64d 6306 	movw	r3, #56838	; 0xde06
20000e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e4c:	881b      	ldrh	r3, [r3, #0]
}
20000e4e:	4618      	mov	r0, r3
20000e50:	f107 0708 	add.w	r7, r7, #8
20000e54:	46bd      	mov	sp, r7
20000e56:	bd80      	pop	{r7, pc}

20000e58 <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
20000e58:	b580      	push	{r7, lr}
20000e5a:	b08c      	sub	sp, #48	; 0x30
20000e5c:	af04      	add	r7, sp, #16
20000e5e:	60f8      	str	r0, [r7, #12]
20000e60:	607b      	str	r3, [r7, #4]
20000e62:	460b      	mov	r3, r1
20000e64:	72fb      	strb	r3, [r7, #11]
20000e66:	4613      	mov	r3, r2
20000e68:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
20000e6a:	7abb      	ldrb	r3, [r7, #10]
20000e6c:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
20000e6e:	7d3b      	ldrb	r3, [r7, #20]
20000e70:	f043 0308 	orr.w	r3, r3, #8
20000e74:	b2db      	uxtb	r3, r3
20000e76:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
20000e78:	7d3b      	ldrb	r3, [r7, #20]
20000e7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000e7e:	b2db      	uxtb	r3, r3
20000e80:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
20000e82:	7afa      	ldrb	r2, [r7, #11]
20000e84:	f107 0314 	add.w	r3, r7, #20
20000e88:	f107 0118 	add.w	r1, r7, #24
20000e8c:	9100      	str	r1, [sp, #0]
20000e8e:	f04f 0102 	mov.w	r1, #2
20000e92:	9101      	str	r1, [sp, #4]
20000e94:	f04f 0100 	mov.w	r1, #0
20000e98:	9102      	str	r1, [sp, #8]
20000e9a:	68f8      	ldr	r0, [r7, #12]
20000e9c:	4611      	mov	r1, r2
20000e9e:	461a      	mov	r2, r3
20000ea0:	f04f 0301 	mov.w	r3, #1
20000ea4:	f005 f8d6 	bl	20006054 <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
20000ea8:	68f8      	ldr	r0, [r7, #12]
20000eaa:	f04f 0100 	mov.w	r1, #0
20000eae:	f005 f969 	bl	20006184 <I2C_wait_complete>
20000eb2:	4603      	mov	r3, r0
20000eb4:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
20000eb6:	7f7b      	ldrb	r3, [r7, #29]
20000eb8:	2b00      	cmp	r3, #0
20000eba:	d004      	beq.n	20000ec6 <get_ADC_value+0x6e>
		*flag = 1;
20000ebc:	687b      	ldr	r3, [r7, #4]
20000ebe:	f04f 0201 	mov.w	r2, #1
20000ec2:	701a      	strb	r2, [r3, #0]
20000ec4:	e012      	b.n	20000eec <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
20000ec6:	7e3b      	ldrb	r3, [r7, #24]
20000ec8:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000ecc:	b29a      	uxth	r2, r3
20000ece:	7e7b      	ldrb	r3, [r7, #25]
20000ed0:	ea42 0303 	orr.w	r3, r2, r3
20000ed4:	b29b      	uxth	r3, r3
20000ed6:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
20000ed8:	8bfb      	ldrh	r3, [r7, #30]
20000eda:	ea4f 5303 	mov.w	r3, r3, lsl #20
20000ede:	ea4f 5313 	mov.w	r3, r3, lsr #20
20000ee2:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
20000ee4:	687b      	ldr	r3, [r7, #4]
20000ee6:	f04f 0200 	mov.w	r2, #0
20000eea:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
20000eec:	8bfb      	ldrh	r3, [r7, #30]
}
20000eee:	4618      	mov	r0, r3
20000ef0:	f107 0720 	add.w	r7, r7, #32
20000ef4:	46bd      	mov	sp, r7
20000ef6:	bd80      	pop	{r7, pc}

20000ef8 <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
20000ef8:	b580      	push	{r7, lr}
20000efa:	b084      	sub	sp, #16
20000efc:	af00      	add	r7, sp, #0
20000efe:	4603      	mov	r3, r0
20000f00:	6039      	str	r1, [r7, #0]
20000f02:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
20000f04:	79fb      	ldrb	r3, [r7, #7]
20000f06:	2b00      	cmp	r3, #0
20000f08:	d10e      	bne.n	20000f28 <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
20000f0a:	683b      	ldr	r3, [r7, #0]
20000f0c:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
20000f0e:	68bb      	ldr	r3, [r7, #8]
20000f10:	6859      	ldr	r1, [r3, #4]
20000f12:	68bb      	ldr	r3, [r7, #8]
20000f14:	689a      	ldr	r2, [r3, #8]
20000f16:	68bb      	ldr	r3, [r7, #8]
20000f18:	7b1b      	ldrb	r3, [r3, #12]
20000f1a:	4608      	mov	r0, r1
20000f1c:	4611      	mov	r1, r2
20000f1e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f22:	f004 ff3d 	bl	20005da0 <I2C_init>
20000f26:	e030      	b.n	20000f8a <init+0x92>
	}
	else if(d == vc_sensor){
20000f28:	79fb      	ldrb	r3, [r7, #7]
20000f2a:	2b0a      	cmp	r3, #10
20000f2c:	d10e      	bne.n	20000f4c <init+0x54>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
20000f2e:	683b      	ldr	r3, [r7, #0]
20000f30:	60fb      	str	r3, [r7, #12]
		I2C_init(vc_pkt->g_core_i2c2, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
20000f32:	68fb      	ldr	r3, [r7, #12]
20000f34:	6859      	ldr	r1, [r3, #4]
20000f36:	68fb      	ldr	r3, [r7, #12]
20000f38:	689a      	ldr	r2, [r3, #8]
20000f3a:	68fb      	ldr	r3, [r7, #12]
20000f3c:	7b1b      	ldrb	r3, [r3, #12]
20000f3e:	4608      	mov	r0, r1
20000f40:	4611      	mov	r1, r2
20000f42:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f46:	f004 ff2b 	bl	20005da0 <I2C_init>
20000f4a:	e01e      	b.n	20000f8a <init+0x92>
	}
	else if(d == all){
20000f4c:	79fb      	ldrb	r3, [r7, #7]
20000f4e:	2b0b      	cmp	r3, #11
20000f50:	d11b      	bne.n	20000f8a <init+0x92>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f52:	f64d 60e4 	movw	r0, #57060	; 0xdee4
20000f56:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f5a:	f245 0100 	movw	r1, #20480	; 0x5000
20000f5e:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000f62:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f66:	f04f 0300 	mov.w	r3, #0
20000f6a:	f004 ff19 	bl	20005da0 <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
20000f6e:	f64d 1050 	movw	r0, #55632	; 0xd950
20000f72:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f76:	f242 0100 	movw	r1, #8192	; 0x2000
20000f7a:	f2c5 0100 	movt	r1, #20480	; 0x5000
20000f7e:	f04f 0288 	mov.w	r2, #136	; 0x88
20000f82:	f04f 0300 	mov.w	r3, #0
20000f86:	f004 ff0b 	bl	20005da0 <I2C_init>
	}
	else{

	}

}
20000f8a:	f107 0710 	add.w	r7, r7, #16
20000f8e:	46bd      	mov	sp, r7
20000f90:	bd80      	pop	{r7, pc}
20000f92:	bf00      	nop

20000f94 <cmd_valid>:
// Function checking the CheckSUM
//void chk_sum();

cmd_t cmd_list[NUM_CMDS];

uint8_t cmd_valid(rx_cmd_t* rx_cmd){
20000f94:	b480      	push	{r7}
20000f96:	b083      	sub	sp, #12
20000f98:	af00      	add	r7, sp, #0
20000f9a:	6078      	str	r0, [r7, #4]
	return 1;  //Will be checking the validated of the checksum.
20000f9c:	f04f 0301 	mov.w	r3, #1
}
20000fa0:	4618      	mov	r0, r3
20000fa2:	f107 070c 	add.w	r7, r7, #12
20000fa6:	46bd      	mov	sp, r7
20000fa8:	bc80      	pop	{r7}
20000faa:	4770      	bx	lr

20000fac <chk_s_cmd>:

uint8_t chk_s_cmd(rx_cmd_t* rx_cmd){
20000fac:	b480      	push	{r7}
20000fae:	b085      	sub	sp, #20
20000fb0:	af00      	add	r7, sp, #0
20000fb2:	6078      	str	r0, [r7, #4]
	uint16_t p;

	p = PILOT_REVERSE_BYTE_ORDER(rx_cmd->ccsds_cmd_p1);
20000fb4:	687b      	ldr	r3, [r7, #4]
20000fb6:	781a      	ldrb	r2, [r3, #0]
20000fb8:	785b      	ldrb	r3, [r3, #1]
20000fba:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000fbe:	ea43 0302 	orr.w	r3, r3, r2
20000fc2:	b29b      	uxth	r3, r3
20000fc4:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000fc8:	b29a      	uxth	r2, r3
20000fca:	687b      	ldr	r3, [r7, #4]
20000fcc:	7819      	ldrb	r1, [r3, #0]
20000fce:	785b      	ldrb	r3, [r3, #1]
20000fd0:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000fd4:	ea43 0301 	orr.w	r3, r3, r1
20000fd8:	b29b      	uxth	r3, r3
20000fda:	ea4f 2313 	mov.w	r3, r3, lsr #8
20000fde:	b29b      	uxth	r3, r3
20000fe0:	ea42 0303 	orr.w	r3, r2, r3
20000fe4:	b29b      	uxth	r3, r3
20000fe6:	81fb      	strh	r3, [r7, #14]

	cmd->length = p & 0x07FF;
20000fe8:	f24e 0344 	movw	r3, #57412	; 0xe044
20000fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ff0:	681a      	ldr	r2, [r3, #0]
20000ff2:	89fb      	ldrh	r3, [r7, #14]
20000ff4:	ea4f 5343 	mov.w	r3, r3, lsl #21
20000ff8:	ea4f 5353 	mov.w	r3, r3, lsr #21
20000ffc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20001000:	f04f 0000 	mov.w	r0, #0
20001004:	ea40 0101 	orr.w	r1, r0, r1
20001008:	7051      	strb	r1, [r2, #1]
2000100a:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000100e:	b29b      	uxth	r3, r3
20001010:	f04f 0100 	mov.w	r1, #0
20001014:	ea41 0303 	orr.w	r3, r1, r3
20001018:	7093      	strb	r3, [r2, #2]

	if( (p >> 11) & 0x01){
2000101a:	89fb      	ldrh	r3, [r7, #14]
2000101c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
20001020:	b29b      	uxth	r3, r3
20001022:	f003 0301 	and.w	r3, r3, #1
20001026:	b2db      	uxtb	r3, r3
20001028:	2b00      	cmp	r3, #0
2000102a:	d002      	beq.n	20001032 <chk_s_cmd+0x86>
		return 1;
2000102c:	f04f 0301 	mov.w	r3, #1
20001030:	e001      	b.n	20001036 <chk_s_cmd+0x8a>
	}
	else{
		return 0;
20001032:	f04f 0300 	mov.w	r3, #0
	}
}
20001036:	4618      	mov	r0, r3
20001038:	f107 0714 	add.w	r7, r7, #20
2000103c:	46bd      	mov	sp, r7
2000103e:	bc80      	pop	{r7}
20001040:	4770      	bx	lr
20001042:	bf00      	nop

20001044 <add_cmd>:


void add_cmd(uint8_t id, uint16_t length, void (*ex_func)(uint8_t id, uint8_t opcode, uint16_t length)){
20001044:	b480      	push	{r7}
20001046:	b083      	sub	sp, #12
20001048:	af00      	add	r7, sp, #0
2000104a:	460b      	mov	r3, r1
2000104c:	603a      	str	r2, [r7, #0]
2000104e:	4602      	mov	r2, r0
20001050:	71fa      	strb	r2, [r7, #7]
20001052:	80bb      	strh	r3, [r7, #4]

	cmd_list[id].id = id;
20001054:	79f9      	ldrb	r1, [r7, #7]
20001056:	f24e 0234 	movw	r2, #57396	; 0xe034
2000105a:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000105e:	460b      	mov	r3, r1
20001060:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20001064:	ebc1 0303 	rsb	r3, r1, r3
20001068:	4413      	add	r3, r2
2000106a:	79fa      	ldrb	r2, [r7, #7]
2000106c:	701a      	strb	r2, [r3, #0]
	cmd_list[id].length = length;
2000106e:	79f9      	ldrb	r1, [r7, #7]
20001070:	f24e 0234 	movw	r2, #57396	; 0xe034
20001074:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001078:	460b      	mov	r3, r1
2000107a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000107e:	ebc1 0303 	rsb	r3, r1, r3
20001082:	4413      	add	r3, r2
20001084:	793a      	ldrb	r2, [r7, #4]
20001086:	f04f 0100 	mov.w	r1, #0
2000108a:	ea41 0202 	orr.w	r2, r1, r2
2000108e:	705a      	strb	r2, [r3, #1]
20001090:	797a      	ldrb	r2, [r7, #5]
20001092:	f04f 0100 	mov.w	r1, #0
20001096:	ea41 0202 	orr.w	r2, r1, r2
2000109a:	709a      	strb	r2, [r3, #2]
	cmd_list[id].ex_func = ex_func;
2000109c:	79f9      	ldrb	r1, [r7, #7]
2000109e:	f24e 0234 	movw	r2, #57396	; 0xe034
200010a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
200010a6:	460b      	mov	r3, r1
200010a8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200010ac:	ebc1 0303 	rsb	r3, r1, r3
200010b0:	4413      	add	r3, r2
200010b2:	783a      	ldrb	r2, [r7, #0]
200010b4:	f04f 0100 	mov.w	r1, #0
200010b8:	ea41 0202 	orr.w	r2, r1, r2
200010bc:	70da      	strb	r2, [r3, #3]
200010be:	787a      	ldrb	r2, [r7, #1]
200010c0:	f04f 0100 	mov.w	r1, #0
200010c4:	ea41 0202 	orr.w	r2, r1, r2
200010c8:	711a      	strb	r2, [r3, #4]
200010ca:	78ba      	ldrb	r2, [r7, #2]
200010cc:	f04f 0100 	mov.w	r1, #0
200010d0:	ea41 0202 	orr.w	r2, r1, r2
200010d4:	715a      	strb	r2, [r3, #5]
200010d6:	78fa      	ldrb	r2, [r7, #3]
200010d8:	f04f 0100 	mov.w	r1, #0
200010dc:	ea41 0202 	orr.w	r2, r1, r2
200010e0:	719a      	strb	r2, [r3, #6]

}
200010e2:	f107 070c 	add.w	r7, r7, #12
200010e6:	46bd      	mov	sp, r7
200010e8:	bc80      	pop	{r7}
200010ea:	4770      	bx	lr

200010ec <vcmd_callback>:

void vcmd_callback(){
200010ec:	b480      	push	{r7}
200010ee:	af00      	add	r7, sp, #0
	//Execution for the timer based command
}
200010f0:	46bd      	mov	sp, r7
200010f2:	bc80      	pop	{r7}
200010f4:	4770      	bx	lr
200010f6:	bf00      	nop

200010f8 <cmd_engine>:

void cmd_engine(rx_cmd_t* rx_cmd){
200010f8:	b590      	push	{r4, r7, lr}
200010fa:	b085      	sub	sp, #20
200010fc:	af02      	add	r7, sp, #8
200010fe:	6078      	str	r0, [r7, #4]

	add_cmd(1, 2, cmd_noop);
20001100:	f04f 0001 	mov.w	r0, #1
20001104:	f04f 0102 	mov.w	r1, #2
20001108:	f241 221d 	movw	r2, #4637	; 0x121d
2000110c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001110:	f7ff ff98 	bl	20001044 <add_cmd>

	if(chk_s_cmd(rx_cmd)){
20001114:	6878      	ldr	r0, [r7, #4]
20001116:	f7ff ff49 	bl	20000fac <chk_s_cmd>
2000111a:	4603      	mov	r3, r0
2000111c:	2b00      	cmp	r3, #0
2000111e:	d037      	beq.n	20001190 <cmd_engine+0x98>
		cmd_timer[0] = xTimerCreate("cmd_timer", pdMS_TO_TICKS(rx_cmd->ccsds_time), pdFALSE, (void*)0, vcmd_callback);
20001120:	687b      	ldr	r3, [r7, #4]
20001122:	791b      	ldrb	r3, [r3, #4]
20001124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20001128:	fb02 f203 	mul.w	r2, r2, r3
2000112c:	f644 53d3 	movw	r3, #19923	; 0x4dd3
20001130:	f2c1 0362 	movt	r3, #4194	; 0x1062
20001134:	fba3 1302 	umull	r1, r3, r3, r2
20001138:	ea4f 1293 	mov.w	r2, r3, lsr #6
2000113c:	f241 03ed 	movw	r3, #4333	; 0x10ed
20001140:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001144:	9300      	str	r3, [sp, #0]
20001146:	f247 40e4 	movw	r0, #29924	; 0x74e4
2000114a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000114e:	4611      	mov	r1, r2
20001150:	f04f 0200 	mov.w	r2, #0
20001154:	f04f 0300 	mov.w	r3, #0
20001158:	f002 fa5a 	bl	20003610 <xTimerCreate>
2000115c:	4602      	mov	r2, r0
2000115e:	f24e 0330 	movw	r3, #57392	; 0xe030
20001162:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001166:	601a      	str	r2, [r3, #0]
		xTimerStart(cmd_timer[0], 0);
20001168:	f24e 0330 	movw	r3, #57392	; 0xe030
2000116c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001170:	681c      	ldr	r4, [r3, #0]
20001172:	f001 fa3b 	bl	200025ec <xTaskGetTickCount>
20001176:	4603      	mov	r3, r0
20001178:	f04f 0200 	mov.w	r2, #0
2000117c:	9200      	str	r2, [sp, #0]
2000117e:	4620      	mov	r0, r4
20001180:	f04f 0101 	mov.w	r1, #1
20001184:	461a      	mov	r2, r3
20001186:	f04f 0300 	mov.w	r3, #0
2000118a:	f002 fa93 	bl	200036b4 <xTimerGenericCommand>
2000118e:	e040      	b.n	20001212 <cmd_engine+0x11a>
	}
	else{
		 //Commands needs to be executed right now.
//		add_cmd(rx_cmd->ccsds_APID, cmd->length, cmd_list[rx_cmd->ccsds_APID].ex_func(rx_cmd->ccsds_APID, rx_cmd->parameters, cmd->length));
		cmd_list[rx_cmd->ccsds_APID].ex_func(rx_cmd->ccsds_APID, rx_cmd->parameters, cmd->length);
20001190:	687b      	ldr	r3, [r7, #4]
20001192:	789a      	ldrb	r2, [r3, #2]
20001194:	78db      	ldrb	r3, [r3, #3]
20001196:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000119a:	ea43 0302 	orr.w	r3, r3, r2
2000119e:	b29b      	uxth	r3, r3
200011a0:	4619      	mov	r1, r3
200011a2:	f24e 0234 	movw	r2, #57396	; 0xe034
200011a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
200011aa:	460b      	mov	r3, r1
200011ac:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200011b0:	ebc1 0303 	rsb	r3, r1, r3
200011b4:	4413      	add	r3, r2
200011b6:	78da      	ldrb	r2, [r3, #3]
200011b8:	7919      	ldrb	r1, [r3, #4]
200011ba:	ea4f 2101 	mov.w	r1, r1, lsl #8
200011be:	ea41 0202 	orr.w	r2, r1, r2
200011c2:	7959      	ldrb	r1, [r3, #5]
200011c4:	ea4f 4101 	mov.w	r1, r1, lsl #16
200011c8:	ea41 0202 	orr.w	r2, r1, r2
200011cc:	799b      	ldrb	r3, [r3, #6]
200011ce:	ea4f 6303 	mov.w	r3, r3, lsl #24
200011d2:	ea43 0302 	orr.w	r3, r3, r2
200011d6:	469c      	mov	ip, r3
200011d8:	687b      	ldr	r3, [r7, #4]
200011da:	789a      	ldrb	r2, [r3, #2]
200011dc:	78db      	ldrb	r3, [r3, #3]
200011de:	ea4f 2303 	mov.w	r3, r3, lsl #8
200011e2:	ea43 0302 	orr.w	r3, r3, r2
200011e6:	b29b      	uxth	r3, r3
200011e8:	b2d9      	uxtb	r1, r3
200011ea:	687b      	ldr	r3, [r7, #4]
200011ec:	f103 0306 	add.w	r3, r3, #6
200011f0:	b2da      	uxtb	r2, r3
200011f2:	f24e 0344 	movw	r3, #57412	; 0xe044
200011f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011fa:	681b      	ldr	r3, [r3, #0]
200011fc:	7858      	ldrb	r0, [r3, #1]
200011fe:	789b      	ldrb	r3, [r3, #2]
20001200:	ea4f 2303 	mov.w	r3, r3, lsl #8
20001204:	ea43 0300 	orr.w	r3, r3, r0
20001208:	b29b      	uxth	r3, r3
2000120a:	4608      	mov	r0, r1
2000120c:	4611      	mov	r1, r2
2000120e:	461a      	mov	r2, r3
20001210:	47e0      	blx	ip
	}

}
20001212:	f107 070c 	add.w	r7, r7, #12
20001216:	46bd      	mov	sp, r7
20001218:	bd90      	pop	{r4, r7, pc}
2000121a:	bf00      	nop

2000121c <cmd_noop>:

// Commands Definition

void cmd_noop(uint8_t id, uint8_t opcode, uint16_t length){
2000121c:	b480      	push	{r7}
2000121e:	b085      	sub	sp, #20
20001220:	af00      	add	r7, sp, #0
20001222:	4613      	mov	r3, r2
20001224:	4602      	mov	r2, r0
20001226:	71fa      	strb	r2, [r7, #7]
20001228:	460a      	mov	r2, r1
2000122a:	71ba      	strb	r2, [r7, #6]
2000122c:	80bb      	strh	r3, [r7, #4]

	uint8_t a;

}
2000122e:	f107 0714 	add.w	r7, r7, #20
20001232:	46bd      	mov	sp, r7
20001234:	bc80      	pop	{r7}
20001236:	4770      	bx	lr

20001238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20001238:	b480      	push	{r7}
2000123a:	b083      	sub	sp, #12
2000123c:	af00      	add	r7, sp, #0
2000123e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001240:	687b      	ldr	r3, [r7, #4]
20001242:	f103 0308 	add.w	r3, r3, #8
20001246:	461a      	mov	r2, r3
20001248:	687b      	ldr	r3, [r7, #4]
2000124a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
2000124c:	687b      	ldr	r3, [r7, #4]
2000124e:	f04f 32ff 	mov.w	r2, #4294967295
20001252:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001254:	687b      	ldr	r3, [r7, #4]
20001256:	f103 0308 	add.w	r3, r3, #8
2000125a:	461a      	mov	r2, r3
2000125c:	687b      	ldr	r3, [r7, #4]
2000125e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001260:	687b      	ldr	r3, [r7, #4]
20001262:	f103 0308 	add.w	r3, r3, #8
20001266:	461a      	mov	r2, r3
20001268:	687b      	ldr	r3, [r7, #4]
2000126a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
2000126c:	687b      	ldr	r3, [r7, #4]
2000126e:	f04f 0200 	mov.w	r2, #0
20001272:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20001274:	f107 070c 	add.w	r7, r7, #12
20001278:	46bd      	mov	sp, r7
2000127a:	bc80      	pop	{r7}
2000127c:	4770      	bx	lr
2000127e:	bf00      	nop

20001280 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20001280:	b480      	push	{r7}
20001282:	b083      	sub	sp, #12
20001284:	af00      	add	r7, sp, #0
20001286:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
20001288:	687b      	ldr	r3, [r7, #4]
2000128a:	f04f 0200 	mov.w	r2, #0
2000128e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20001290:	f107 070c 	add.w	r7, r7, #12
20001294:	46bd      	mov	sp, r7
20001296:	bc80      	pop	{r7}
20001298:	4770      	bx	lr
2000129a:	bf00      	nop

2000129c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
2000129c:	b480      	push	{r7}
2000129e:	b085      	sub	sp, #20
200012a0:	af00      	add	r7, sp, #0
200012a2:	6078      	str	r0, [r7, #4]
200012a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
200012a6:	687b      	ldr	r3, [r7, #4]
200012a8:	685b      	ldr	r3, [r3, #4]
200012aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
200012ac:	683b      	ldr	r3, [r7, #0]
200012ae:	68fa      	ldr	r2, [r7, #12]
200012b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
200012b2:	68fb      	ldr	r3, [r7, #12]
200012b4:	689a      	ldr	r2, [r3, #8]
200012b6:	683b      	ldr	r3, [r7, #0]
200012b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
200012ba:	68fb      	ldr	r3, [r7, #12]
200012bc:	689b      	ldr	r3, [r3, #8]
200012be:	683a      	ldr	r2, [r7, #0]
200012c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
200012c2:	68fb      	ldr	r3, [r7, #12]
200012c4:	683a      	ldr	r2, [r7, #0]
200012c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
200012c8:	683b      	ldr	r3, [r7, #0]
200012ca:	687a      	ldr	r2, [r7, #4]
200012cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
200012ce:	687b      	ldr	r3, [r7, #4]
200012d0:	681b      	ldr	r3, [r3, #0]
200012d2:	f103 0201 	add.w	r2, r3, #1
200012d6:	687b      	ldr	r3, [r7, #4]
200012d8:	601a      	str	r2, [r3, #0]
}
200012da:	f107 0714 	add.w	r7, r7, #20
200012de:	46bd      	mov	sp, r7
200012e0:	bc80      	pop	{r7}
200012e2:	4770      	bx	lr

200012e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
200012e4:	b480      	push	{r7}
200012e6:	b085      	sub	sp, #20
200012e8:	af00      	add	r7, sp, #0
200012ea:	6078      	str	r0, [r7, #4]
200012ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
200012ee:	683b      	ldr	r3, [r7, #0]
200012f0:	681b      	ldr	r3, [r3, #0]
200012f2:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
200012f4:	68fb      	ldr	r3, [r7, #12]
200012f6:	f1b3 3fff 	cmp.w	r3, #4294967295
200012fa:	d103      	bne.n	20001304 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
200012fc:	687b      	ldr	r3, [r7, #4]
200012fe:	691b      	ldr	r3, [r3, #16]
20001300:	60bb      	str	r3, [r7, #8]
20001302:	e00d      	b.n	20001320 <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001304:	687b      	ldr	r3, [r7, #4]
20001306:	f103 0308 	add.w	r3, r3, #8
2000130a:	60bb      	str	r3, [r7, #8]
2000130c:	e002      	b.n	20001314 <vListInsert+0x30>
2000130e:	68bb      	ldr	r3, [r7, #8]
20001310:	685b      	ldr	r3, [r3, #4]
20001312:	60bb      	str	r3, [r7, #8]
20001314:	68bb      	ldr	r3, [r7, #8]
20001316:	685b      	ldr	r3, [r3, #4]
20001318:	681a      	ldr	r2, [r3, #0]
2000131a:	68fb      	ldr	r3, [r7, #12]
2000131c:	429a      	cmp	r2, r3
2000131e:	d9f6      	bls.n	2000130e <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
20001320:	68bb      	ldr	r3, [r7, #8]
20001322:	685a      	ldr	r2, [r3, #4]
20001324:	683b      	ldr	r3, [r7, #0]
20001326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20001328:	683b      	ldr	r3, [r7, #0]
2000132a:	685b      	ldr	r3, [r3, #4]
2000132c:	683a      	ldr	r2, [r7, #0]
2000132e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
20001330:	683b      	ldr	r3, [r7, #0]
20001332:	68ba      	ldr	r2, [r7, #8]
20001334:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20001336:	68bb      	ldr	r3, [r7, #8]
20001338:	683a      	ldr	r2, [r7, #0]
2000133a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
2000133c:	683b      	ldr	r3, [r7, #0]
2000133e:	687a      	ldr	r2, [r7, #4]
20001340:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20001342:	687b      	ldr	r3, [r7, #4]
20001344:	681b      	ldr	r3, [r3, #0]
20001346:	f103 0201 	add.w	r2, r3, #1
2000134a:	687b      	ldr	r3, [r7, #4]
2000134c:	601a      	str	r2, [r3, #0]
}
2000134e:	f107 0714 	add.w	r7, r7, #20
20001352:	46bd      	mov	sp, r7
20001354:	bc80      	pop	{r7}
20001356:	4770      	bx	lr

20001358 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
20001358:	b480      	push	{r7}
2000135a:	b085      	sub	sp, #20
2000135c:	af00      	add	r7, sp, #0
2000135e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
20001360:	687b      	ldr	r3, [r7, #4]
20001362:	691b      	ldr	r3, [r3, #16]
20001364:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
20001366:	687b      	ldr	r3, [r7, #4]
20001368:	685b      	ldr	r3, [r3, #4]
2000136a:	687a      	ldr	r2, [r7, #4]
2000136c:	6892      	ldr	r2, [r2, #8]
2000136e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
20001370:	687b      	ldr	r3, [r7, #4]
20001372:	689b      	ldr	r3, [r3, #8]
20001374:	687a      	ldr	r2, [r7, #4]
20001376:	6852      	ldr	r2, [r2, #4]
20001378:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
2000137a:	68fb      	ldr	r3, [r7, #12]
2000137c:	685a      	ldr	r2, [r3, #4]
2000137e:	687b      	ldr	r3, [r7, #4]
20001380:	429a      	cmp	r2, r3
20001382:	d103      	bne.n	2000138c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
20001384:	687b      	ldr	r3, [r7, #4]
20001386:	689a      	ldr	r2, [r3, #8]
20001388:	68fb      	ldr	r3, [r7, #12]
2000138a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
2000138c:	687b      	ldr	r3, [r7, #4]
2000138e:	f04f 0200 	mov.w	r2, #0
20001392:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
20001394:	68fb      	ldr	r3, [r7, #12]
20001396:	681b      	ldr	r3, [r3, #0]
20001398:	f103 32ff 	add.w	r2, r3, #4294967295
2000139c:	68fb      	ldr	r3, [r7, #12]
2000139e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
200013a0:	68fb      	ldr	r3, [r7, #12]
200013a2:	681b      	ldr	r3, [r3, #0]
}
200013a4:	4618      	mov	r0, r3
200013a6:	f107 0714 	add.w	r7, r7, #20
200013aa:	46bd      	mov	sp, r7
200013ac:	bc80      	pop	{r7}
200013ae:	4770      	bx	lr

200013b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
200013b0:	b580      	push	{r7, lr}
200013b2:	b084      	sub	sp, #16
200013b4:	af00      	add	r7, sp, #0
200013b6:	6078      	str	r0, [r7, #4]
200013b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200013ba:	687b      	ldr	r3, [r7, #4]
200013bc:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
200013be:	68bb      	ldr	r3, [r7, #8]
200013c0:	2b00      	cmp	r3, #0
200013c2:	d109      	bne.n	200013d8 <xQueueGenericReset+0x28>
200013c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200013c8:	f383 8811 	msr	BASEPRI, r3
200013cc:	f3bf 8f6f 	isb	sy
200013d0:	f3bf 8f4f 	dsb	sy
200013d4:	60fb      	str	r3, [r7, #12]
200013d6:	e7fe      	b.n	200013d6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
200013d8:	f002 ffe0 	bl	2000439c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
200013dc:	68bb      	ldr	r3, [r7, #8]
200013de:	681a      	ldr	r2, [r3, #0]
200013e0:	68bb      	ldr	r3, [r7, #8]
200013e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200013e4:	68b9      	ldr	r1, [r7, #8]
200013e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
200013e8:	fb01 f303 	mul.w	r3, r1, r3
200013ec:	441a      	add	r2, r3
200013ee:	68bb      	ldr	r3, [r7, #8]
200013f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
200013f2:	68bb      	ldr	r3, [r7, #8]
200013f4:	f04f 0200 	mov.w	r2, #0
200013f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
200013fa:	68bb      	ldr	r3, [r7, #8]
200013fc:	681a      	ldr	r2, [r3, #0]
200013fe:	68bb      	ldr	r3, [r7, #8]
20001400:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
20001402:	68bb      	ldr	r3, [r7, #8]
20001404:	681a      	ldr	r2, [r3, #0]
20001406:	68bb      	ldr	r3, [r7, #8]
20001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000140a:	f103 33ff 	add.w	r3, r3, #4294967295
2000140e:	68b9      	ldr	r1, [r7, #8]
20001410:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001412:	fb01 f303 	mul.w	r3, r1, r3
20001416:	441a      	add	r2, r3
20001418:	68bb      	ldr	r3, [r7, #8]
2000141a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
2000141c:	68bb      	ldr	r3, [r7, #8]
2000141e:	f04f 32ff 	mov.w	r2, #4294967295
20001422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
20001426:	68bb      	ldr	r3, [r7, #8]
20001428:	f04f 32ff 	mov.w	r2, #4294967295
2000142c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
20001430:	683b      	ldr	r3, [r7, #0]
20001432:	2b00      	cmp	r3, #0
20001434:	d118      	bne.n	20001468 <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001436:	68bb      	ldr	r3, [r7, #8]
20001438:	691b      	ldr	r3, [r3, #16]
2000143a:	2b00      	cmp	r3, #0
2000143c:	d021      	beq.n	20001482 <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000143e:	68bb      	ldr	r3, [r7, #8]
20001440:	f103 0310 	add.w	r3, r3, #16
20001444:	4618      	mov	r0, r3
20001446:	f001 fb0f 	bl	20002a68 <xTaskRemoveFromEventList>
2000144a:	4603      	mov	r3, r0
2000144c:	2b00      	cmp	r3, #0
2000144e:	d01a      	beq.n	20001486 <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
20001450:	f64e 5304 	movw	r3, #60676	; 0xed04
20001454:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000145c:	601a      	str	r2, [r3, #0]
2000145e:	f3bf 8f4f 	dsb	sy
20001462:	f3bf 8f6f 	isb	sy
20001466:	e00f      	b.n	20001488 <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
20001468:	68bb      	ldr	r3, [r7, #8]
2000146a:	f103 0310 	add.w	r3, r3, #16
2000146e:	4618      	mov	r0, r3
20001470:	f7ff fee2 	bl	20001238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
20001474:	68bb      	ldr	r3, [r7, #8]
20001476:	f103 0324 	add.w	r3, r3, #36	; 0x24
2000147a:	4618      	mov	r0, r3
2000147c:	f7ff fedc 	bl	20001238 <vListInitialise>
20001480:	e002      	b.n	20001488 <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
20001482:	bf00      	nop
20001484:	e000      	b.n	20001488 <xQueueGenericReset+0xd8>
20001486:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
20001488:	f002 ffc0 	bl	2000440c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
2000148c:	f04f 0301 	mov.w	r3, #1
}
20001490:	4618      	mov	r0, r3
20001492:	f107 0710 	add.w	r7, r7, #16
20001496:	46bd      	mov	sp, r7
20001498:	bd80      	pop	{r7, pc}
2000149a:	bf00      	nop

2000149c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
2000149c:	b580      	push	{r7, lr}
2000149e:	b08a      	sub	sp, #40	; 0x28
200014a0:	af02      	add	r7, sp, #8
200014a2:	60f8      	str	r0, [r7, #12]
200014a4:	60b9      	str	r1, [r7, #8]
200014a6:	4613      	mov	r3, r2
200014a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200014aa:	68fb      	ldr	r3, [r7, #12]
200014ac:	2b00      	cmp	r3, #0
200014ae:	d109      	bne.n	200014c4 <xQueueGenericCreate+0x28>
200014b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200014b4:	f383 8811 	msr	BASEPRI, r3
200014b8:	f3bf 8f6f 	isb	sy
200014bc:	f3bf 8f4f 	dsb	sy
200014c0:	61fb      	str	r3, [r7, #28]
200014c2:	e7fe      	b.n	200014c2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
200014c4:	68bb      	ldr	r3, [r7, #8]
200014c6:	2b00      	cmp	r3, #0
200014c8:	d103      	bne.n	200014d2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
200014ca:	f04f 0300 	mov.w	r3, #0
200014ce:	617b      	str	r3, [r7, #20]
200014d0:	e004      	b.n	200014dc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200014d2:	68fb      	ldr	r3, [r7, #12]
200014d4:	68ba      	ldr	r2, [r7, #8]
200014d6:	fb02 f303 	mul.w	r3, r2, r3
200014da:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
200014dc:	697b      	ldr	r3, [r7, #20]
200014de:	f103 0350 	add.w	r3, r3, #80	; 0x50
200014e2:	4618      	mov	r0, r3
200014e4:	f002 fc0e 	bl	20003d04 <pvPortMalloc>
200014e8:	4603      	mov	r3, r0
200014ea:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
200014ec:	693b      	ldr	r3, [r7, #16]
200014ee:	2b00      	cmp	r3, #0
200014f0:	d00b      	beq.n	2000150a <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
200014f2:	693b      	ldr	r3, [r7, #16]
200014f4:	f103 0350 	add.w	r3, r3, #80	; 0x50
200014f8:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
200014fa:	79fb      	ldrb	r3, [r7, #7]
200014fc:	693a      	ldr	r2, [r7, #16]
200014fe:	9200      	str	r2, [sp, #0]
20001500:	68f8      	ldr	r0, [r7, #12]
20001502:	68b9      	ldr	r1, [r7, #8]
20001504:	69ba      	ldr	r2, [r7, #24]
20001506:	f000 f807 	bl	20001518 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
2000150a:	693b      	ldr	r3, [r7, #16]
	}
2000150c:	4618      	mov	r0, r3
2000150e:	f107 0720 	add.w	r7, r7, #32
20001512:	46bd      	mov	sp, r7
20001514:	bd80      	pop	{r7, pc}
20001516:	bf00      	nop

20001518 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
20001518:	b580      	push	{r7, lr}
2000151a:	b084      	sub	sp, #16
2000151c:	af00      	add	r7, sp, #0
2000151e:	60f8      	str	r0, [r7, #12]
20001520:	60b9      	str	r1, [r7, #8]
20001522:	607a      	str	r2, [r7, #4]
20001524:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
20001526:	68bb      	ldr	r3, [r7, #8]
20001528:	2b00      	cmp	r3, #0
2000152a:	d103      	bne.n	20001534 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
2000152c:	69ba      	ldr	r2, [r7, #24]
2000152e:	69bb      	ldr	r3, [r7, #24]
20001530:	601a      	str	r2, [r3, #0]
20001532:	e002      	b.n	2000153a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001534:	687a      	ldr	r2, [r7, #4]
20001536:	69bb      	ldr	r3, [r7, #24]
20001538:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
2000153a:	69bb      	ldr	r3, [r7, #24]
2000153c:	68fa      	ldr	r2, [r7, #12]
2000153e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
20001540:	69bb      	ldr	r3, [r7, #24]
20001542:	68ba      	ldr	r2, [r7, #8]
20001544:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
20001546:	69b8      	ldr	r0, [r7, #24]
20001548:	f04f 0101 	mov.w	r1, #1
2000154c:	f7ff ff30 	bl	200013b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
20001550:	69bb      	ldr	r3, [r7, #24]
20001552:	78fa      	ldrb	r2, [r7, #3]
20001554:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
20001558:	f107 0710 	add.w	r7, r7, #16
2000155c:	46bd      	mov	sp, r7
2000155e:	bd80      	pop	{r7, pc}

20001560 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
20001560:	b580      	push	{r7, lr}
20001562:	b082      	sub	sp, #8
20001564:	af00      	add	r7, sp, #0
20001566:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
20001568:	687b      	ldr	r3, [r7, #4]
2000156a:	2b00      	cmp	r3, #0
2000156c:	d014      	beq.n	20001598 <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
2000156e:	687b      	ldr	r3, [r7, #4]
20001570:	f04f 0200 	mov.w	r2, #0
20001574:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
20001576:	687b      	ldr	r3, [r7, #4]
20001578:	f04f 0200 	mov.w	r2, #0
2000157c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
2000157e:	687b      	ldr	r3, [r7, #4]
20001580:	f04f 0200 	mov.w	r2, #0
20001584:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
20001586:	6878      	ldr	r0, [r7, #4]
20001588:	f04f 0100 	mov.w	r1, #0
2000158c:	f04f 0200 	mov.w	r2, #0
20001590:	f04f 0300 	mov.w	r3, #0
20001594:	f000 f820 	bl	200015d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
20001598:	f107 0708 	add.w	r7, r7, #8
2000159c:	46bd      	mov	sp, r7
2000159e:	bd80      	pop	{r7, pc}

200015a0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
200015a0:	b580      	push	{r7, lr}
200015a2:	b086      	sub	sp, #24
200015a4:	af00      	add	r7, sp, #0
200015a6:	4603      	mov	r3, r0
200015a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
200015aa:	f04f 0301 	mov.w	r3, #1
200015ae:	613b      	str	r3, [r7, #16]
200015b0:	f04f 0300 	mov.w	r3, #0
200015b4:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
200015b6:	79fb      	ldrb	r3, [r7, #7]
200015b8:	6938      	ldr	r0, [r7, #16]
200015ba:	6979      	ldr	r1, [r7, #20]
200015bc:	461a      	mov	r2, r3
200015be:	f7ff ff6d 	bl	2000149c <xQueueGenericCreate>
200015c2:	4603      	mov	r3, r0
200015c4:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
200015c6:	68f8      	ldr	r0, [r7, #12]
200015c8:	f7ff ffca 	bl	20001560 <prvInitialiseMutex>

		return pxNewQueue;
200015cc:	68fb      	ldr	r3, [r7, #12]
	}
200015ce:	4618      	mov	r0, r3
200015d0:	f107 0718 	add.w	r7, r7, #24
200015d4:	46bd      	mov	sp, r7
200015d6:	bd80      	pop	{r7, pc}

200015d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
200015d8:	b580      	push	{r7, lr}
200015da:	b08e      	sub	sp, #56	; 0x38
200015dc:	af00      	add	r7, sp, #0
200015de:	60f8      	str	r0, [r7, #12]
200015e0:	60b9      	str	r1, [r7, #8]
200015e2:	607a      	str	r2, [r7, #4]
200015e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
200015e6:	f04f 0300 	mov.w	r3, #0
200015ea:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
200015ec:	68fb      	ldr	r3, [r7, #12]
200015ee:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
200015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200015f2:	2b00      	cmp	r3, #0
200015f4:	d109      	bne.n	2000160a <xQueueGenericSend+0x32>
200015f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200015fa:	f383 8811 	msr	BASEPRI, r3
200015fe:	f3bf 8f6f 	isb	sy
20001602:	f3bf 8f4f 	dsb	sy
20001606:	62bb      	str	r3, [r7, #40]	; 0x28
20001608:	e7fe      	b.n	20001608 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000160a:	68bb      	ldr	r3, [r7, #8]
2000160c:	2b00      	cmp	r3, #0
2000160e:	d103      	bne.n	20001618 <xQueueGenericSend+0x40>
20001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001614:	2b00      	cmp	r3, #0
20001616:	d102      	bne.n	2000161e <xQueueGenericSend+0x46>
20001618:	f04f 0301 	mov.w	r3, #1
2000161c:	e001      	b.n	20001622 <xQueueGenericSend+0x4a>
2000161e:	f04f 0300 	mov.w	r3, #0
20001622:	2b00      	cmp	r3, #0
20001624:	d109      	bne.n	2000163a <xQueueGenericSend+0x62>
20001626:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000162a:	f383 8811 	msr	BASEPRI, r3
2000162e:	f3bf 8f6f 	isb	sy
20001632:	f3bf 8f4f 	dsb	sy
20001636:	62fb      	str	r3, [r7, #44]	; 0x2c
20001638:	e7fe      	b.n	20001638 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
2000163a:	683b      	ldr	r3, [r7, #0]
2000163c:	2b02      	cmp	r3, #2
2000163e:	d103      	bne.n	20001648 <xQueueGenericSend+0x70>
20001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001644:	2b01      	cmp	r3, #1
20001646:	d102      	bne.n	2000164e <xQueueGenericSend+0x76>
20001648:	f04f 0301 	mov.w	r3, #1
2000164c:	e001      	b.n	20001652 <xQueueGenericSend+0x7a>
2000164e:	f04f 0300 	mov.w	r3, #0
20001652:	2b00      	cmp	r3, #0
20001654:	d109      	bne.n	2000166a <xQueueGenericSend+0x92>
20001656:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000165a:	f383 8811 	msr	BASEPRI, r3
2000165e:	f3bf 8f6f 	isb	sy
20001662:	f3bf 8f4f 	dsb	sy
20001666:	633b      	str	r3, [r7, #48]	; 0x30
20001668:	e7fe      	b.n	20001668 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
2000166a:	f001 fc05 	bl	20002e78 <xTaskGetSchedulerState>
2000166e:	4603      	mov	r3, r0
20001670:	2b00      	cmp	r3, #0
20001672:	d102      	bne.n	2000167a <xQueueGenericSend+0xa2>
20001674:	687b      	ldr	r3, [r7, #4]
20001676:	2b00      	cmp	r3, #0
20001678:	d102      	bne.n	20001680 <xQueueGenericSend+0xa8>
2000167a:	f04f 0301 	mov.w	r3, #1
2000167e:	e001      	b.n	20001684 <xQueueGenericSend+0xac>
20001680:	f04f 0300 	mov.w	r3, #0
20001684:	2b00      	cmp	r3, #0
20001686:	d10a      	bne.n	2000169e <xQueueGenericSend+0xc6>
20001688:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000168c:	f383 8811 	msr	BASEPRI, r3
20001690:	f3bf 8f6f 	isb	sy
20001694:	f3bf 8f4f 	dsb	sy
20001698:	637b      	str	r3, [r7, #52]	; 0x34
2000169a:	e7fe      	b.n	2000169a <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
2000169c:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
2000169e:	f002 fe7d 	bl	2000439c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200016aa:	429a      	cmp	r2, r3
200016ac:	d302      	bcc.n	200016b4 <xQueueGenericSend+0xdc>
200016ae:	683b      	ldr	r3, [r7, #0]
200016b0:	2b02      	cmp	r3, #2
200016b2:	d134      	bne.n	2000171e <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
200016b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200016b6:	68b9      	ldr	r1, [r7, #8]
200016b8:	683a      	ldr	r2, [r7, #0]
200016ba:	f000 fa7b 	bl	20001bb4 <prvCopyDataToQueue>
200016be:	4603      	mov	r3, r0
200016c0:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
200016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200016c6:	2b00      	cmp	r3, #0
200016c8:	d014      	beq.n	200016f4 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
200016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016cc:	f103 0324 	add.w	r3, r3, #36	; 0x24
200016d0:	4618      	mov	r0, r3
200016d2:	f001 f9c9 	bl	20002a68 <xTaskRemoveFromEventList>
200016d6:	4603      	mov	r3, r0
200016d8:	2b00      	cmp	r3, #0
200016da:	d01a      	beq.n	20001712 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
200016dc:	f64e 5304 	movw	r3, #60676	; 0xed04
200016e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200016e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200016e8:	601a      	str	r2, [r3, #0]
200016ea:	f3bf 8f4f 	dsb	sy
200016ee:	f3bf 8f6f 	isb	sy
200016f2:	e00f      	b.n	20001714 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
200016f4:	6a3b      	ldr	r3, [r7, #32]
200016f6:	2b00      	cmp	r3, #0
200016f8:	d00c      	beq.n	20001714 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
200016fa:	f64e 5304 	movw	r3, #60676	; 0xed04
200016fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001706:	601a      	str	r2, [r3, #0]
20001708:	f3bf 8f4f 	dsb	sy
2000170c:	f3bf 8f6f 	isb	sy
20001710:	e000      	b.n	20001714 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001712:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
20001714:	f002 fe7a 	bl	2000440c <vPortExitCritical>
				return pdPASS;
20001718:	f04f 0301 	mov.w	r3, #1
2000171c:	e06f      	b.n	200017fe <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
2000171e:	687b      	ldr	r3, [r7, #4]
20001720:	2b00      	cmp	r3, #0
20001722:	d104      	bne.n	2000172e <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001724:	f002 fe72 	bl	2000440c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
20001728:	f04f 0300 	mov.w	r3, #0
2000172c:	e067      	b.n	200017fe <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
2000172e:	69fb      	ldr	r3, [r7, #28]
20001730:	2b00      	cmp	r3, #0
20001732:	d107      	bne.n	20001744 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001734:	f107 0314 	add.w	r3, r7, #20
20001738:	4618      	mov	r0, r3
2000173a:	f001 fa0d 	bl	20002b58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000173e:	f04f 0301 	mov.w	r3, #1
20001742:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001744:	f002 fe62 	bl	2000440c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001748:	f000 fe6e 	bl	20002428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
2000174c:	f002 fe26 	bl	2000439c <vPortEnterCritical>
20001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001756:	b2db      	uxtb	r3, r3
20001758:	b25b      	sxtb	r3, r3
2000175a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000175e:	d104      	bne.n	2000176a <xQueueGenericSend+0x192>
20001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001762:	f04f 0200 	mov.w	r2, #0
20001766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2000176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000176c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001770:	b2db      	uxtb	r3, r3
20001772:	b25b      	sxtb	r3, r3
20001774:	f1b3 3fff 	cmp.w	r3, #4294967295
20001778:	d104      	bne.n	20001784 <xQueueGenericSend+0x1ac>
2000177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000177c:	f04f 0200 	mov.w	r2, #0
20001780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001784:	f002 fe42 	bl	2000440c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001788:	f107 0214 	add.w	r2, r7, #20
2000178c:	f107 0304 	add.w	r3, r7, #4
20001790:	4610      	mov	r0, r2
20001792:	4619      	mov	r1, r3
20001794:	f001 fa04 	bl	20002ba0 <xTaskCheckForTimeOut>
20001798:	4603      	mov	r3, r0
2000179a:	2b00      	cmp	r3, #0
2000179c:	d128      	bne.n	200017f0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2000179e:	6a78      	ldr	r0, [r7, #36]	; 0x24
200017a0:	f000 fb18 	bl	20001dd4 <prvIsQueueFull>
200017a4:	4603      	mov	r3, r0
200017a6:	2b00      	cmp	r3, #0
200017a8:	d01c      	beq.n	200017e4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
200017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200017ac:	f103 0210 	add.w	r2, r3, #16
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	4610      	mov	r0, r2
200017b4:	4619      	mov	r1, r3
200017b6:	f001 f905 	bl	200029c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
200017ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
200017bc:	f000 fa9a 	bl	20001cf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
200017c0:	f000 fe44 	bl	2000244c <xTaskResumeAll>
200017c4:	4603      	mov	r3, r0
200017c6:	2b00      	cmp	r3, #0
200017c8:	f47f af68 	bne.w	2000169c <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
200017cc:	f64e 5304 	movw	r3, #60676	; 0xed04
200017d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017d8:	601a      	str	r2, [r3, #0]
200017da:	f3bf 8f4f 	dsb	sy
200017de:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200017e2:	e75c      	b.n	2000169e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
200017e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200017e6:	f000 fa85 	bl	20001cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
200017ea:	f000 fe2f 	bl	2000244c <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
200017ee:	e756      	b.n	2000169e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
200017f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
200017f2:	f000 fa7f 	bl	20001cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
200017f6:	f000 fe29 	bl	2000244c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
200017fa:	f04f 0300 	mov.w	r3, #0
		}
	}
}
200017fe:	4618      	mov	r0, r3
20001800:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001804:	46bd      	mov	sp, r7
20001806:	bd80      	pop	{r7, pc}

20001808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001808:	b580      	push	{r7, lr}
2000180a:	b08e      	sub	sp, #56	; 0x38
2000180c:	af00      	add	r7, sp, #0
2000180e:	60f8      	str	r0, [r7, #12]
20001810:	60b9      	str	r1, [r7, #8]
20001812:	607a      	str	r2, [r7, #4]
20001814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001816:	68fb      	ldr	r3, [r7, #12]
20001818:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
2000181a:	69bb      	ldr	r3, [r7, #24]
2000181c:	2b00      	cmp	r3, #0
2000181e:	d109      	bne.n	20001834 <xQueueGenericSendFromISR+0x2c>
20001820:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001824:	f383 8811 	msr	BASEPRI, r3
20001828:	f3bf 8f6f 	isb	sy
2000182c:	f3bf 8f4f 	dsb	sy
20001830:	623b      	str	r3, [r7, #32]
20001832:	e7fe      	b.n	20001832 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001834:	68bb      	ldr	r3, [r7, #8]
20001836:	2b00      	cmp	r3, #0
20001838:	d103      	bne.n	20001842 <xQueueGenericSendFromISR+0x3a>
2000183a:	69bb      	ldr	r3, [r7, #24]
2000183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000183e:	2b00      	cmp	r3, #0
20001840:	d102      	bne.n	20001848 <xQueueGenericSendFromISR+0x40>
20001842:	f04f 0301 	mov.w	r3, #1
20001846:	e001      	b.n	2000184c <xQueueGenericSendFromISR+0x44>
20001848:	f04f 0300 	mov.w	r3, #0
2000184c:	2b00      	cmp	r3, #0
2000184e:	d109      	bne.n	20001864 <xQueueGenericSendFromISR+0x5c>
20001850:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001854:	f383 8811 	msr	BASEPRI, r3
20001858:	f3bf 8f6f 	isb	sy
2000185c:	f3bf 8f4f 	dsb	sy
20001860:	627b      	str	r3, [r7, #36]	; 0x24
20001862:	e7fe      	b.n	20001862 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001864:	683b      	ldr	r3, [r7, #0]
20001866:	2b02      	cmp	r3, #2
20001868:	d103      	bne.n	20001872 <xQueueGenericSendFromISR+0x6a>
2000186a:	69bb      	ldr	r3, [r7, #24]
2000186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000186e:	2b01      	cmp	r3, #1
20001870:	d102      	bne.n	20001878 <xQueueGenericSendFromISR+0x70>
20001872:	f04f 0301 	mov.w	r3, #1
20001876:	e001      	b.n	2000187c <xQueueGenericSendFromISR+0x74>
20001878:	f04f 0300 	mov.w	r3, #0
2000187c:	2b00      	cmp	r3, #0
2000187e:	d109      	bne.n	20001894 <xQueueGenericSendFromISR+0x8c>
20001880:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001884:	f383 8811 	msr	BASEPRI, r3
20001888:	f3bf 8f6f 	isb	sy
2000188c:	f3bf 8f4f 	dsb	sy
20001890:	62bb      	str	r3, [r7, #40]	; 0x28
20001892:	e7fe      	b.n	20001892 <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001894:	f002 fe56 	bl	20004544 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20001898:	f3ef 8211 	mrs	r2, BASEPRI
2000189c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200018a0:	f383 8811 	msr	BASEPRI, r3
200018a4:	f3bf 8f6f 	isb	sy
200018a8:	f3bf 8f4f 	dsb	sy
200018ac:	633a      	str	r2, [r7, #48]	; 0x30
200018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
200018b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200018b2:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200018b4:	69bb      	ldr	r3, [r7, #24]
200018b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200018b8:	69bb      	ldr	r3, [r7, #24]
200018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200018bc:	429a      	cmp	r2, r3
200018be:	d302      	bcc.n	200018c6 <xQueueGenericSendFromISR+0xbe>
200018c0:	683b      	ldr	r3, [r7, #0]
200018c2:	2b02      	cmp	r3, #2
200018c4:	d134      	bne.n	20001930 <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
200018c6:	69bb      	ldr	r3, [r7, #24]
200018c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200018cc:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
200018ce:	69b8      	ldr	r0, [r7, #24]
200018d0:	68b9      	ldr	r1, [r7, #8]
200018d2:	683a      	ldr	r2, [r7, #0]
200018d4:	f000 f96e 	bl	20001bb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
200018d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
200018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
200018e0:	d114      	bne.n	2000190c <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
200018e2:	69bb      	ldr	r3, [r7, #24]
200018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200018e6:	2b00      	cmp	r3, #0
200018e8:	d019      	beq.n	2000191e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
200018ea:	69bb      	ldr	r3, [r7, #24]
200018ec:	f103 0324 	add.w	r3, r3, #36	; 0x24
200018f0:	4618      	mov	r0, r3
200018f2:	f001 f8b9 	bl	20002a68 <xTaskRemoveFromEventList>
200018f6:	4603      	mov	r3, r0
200018f8:	2b00      	cmp	r3, #0
200018fa:	d012      	beq.n	20001922 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
200018fc:	687b      	ldr	r3, [r7, #4]
200018fe:	2b00      	cmp	r3, #0
20001900:	d011      	beq.n	20001926 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001902:	687b      	ldr	r3, [r7, #4]
20001904:	f04f 0201 	mov.w	r2, #1
20001908:	601a      	str	r2, [r3, #0]
2000190a:	e00d      	b.n	20001928 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
2000190c:	7ffb      	ldrb	r3, [r7, #31]
2000190e:	f103 0301 	add.w	r3, r3, #1
20001912:	b2db      	uxtb	r3, r3
20001914:	461a      	mov	r2, r3
20001916:	69bb      	ldr	r3, [r7, #24]
20001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
2000191c:	e004      	b.n	20001928 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
2000191e:	bf00      	nop
20001920:	e002      	b.n	20001928 <xQueueGenericSendFromISR+0x120>
20001922:	bf00      	nop
20001924:	e000      	b.n	20001928 <xQueueGenericSendFromISR+0x120>
20001926:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
20001928:	f04f 0301 	mov.w	r3, #1
2000192c:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
2000192e:	e002      	b.n	20001936 <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001930:	f04f 0300 	mov.w	r3, #0
20001934:	613b      	str	r3, [r7, #16]
20001936:	697b      	ldr	r3, [r7, #20]
20001938:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
2000193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000193c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001940:	693b      	ldr	r3, [r7, #16]
}
20001942:	4618      	mov	r0, r3
20001944:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001948:	46bd      	mov	sp, r7
2000194a:	bd80      	pop	{r7, pc}

2000194c <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
2000194c:	b580      	push	{r7, lr}
2000194e:	b08e      	sub	sp, #56	; 0x38
20001950:	af00      	add	r7, sp, #0
20001952:	60f8      	str	r0, [r7, #12]
20001954:	60b9      	str	r1, [r7, #8]
20001956:	607a      	str	r2, [r7, #4]
20001958:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
2000195a:	f04f 0300 	mov.w	r3, #0
2000195e:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001960:	68fb      	ldr	r3, [r7, #12]
20001962:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
20001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001966:	2b00      	cmp	r3, #0
20001968:	d109      	bne.n	2000197e <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
2000196a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000196e:	f383 8811 	msr	BASEPRI, r3
20001972:	f3bf 8f6f 	isb	sy
20001976:	f3bf 8f4f 	dsb	sy
2000197a:	62fb      	str	r3, [r7, #44]	; 0x2c
2000197c:	e7fe      	b.n	2000197c <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000197e:	68bb      	ldr	r3, [r7, #8]
20001980:	2b00      	cmp	r3, #0
20001982:	d103      	bne.n	2000198c <xQueueGenericReceive+0x40>
20001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001988:	2b00      	cmp	r3, #0
2000198a:	d102      	bne.n	20001992 <xQueueGenericReceive+0x46>
2000198c:	f04f 0301 	mov.w	r3, #1
20001990:	e001      	b.n	20001996 <xQueueGenericReceive+0x4a>
20001992:	f04f 0300 	mov.w	r3, #0
20001996:	2b00      	cmp	r3, #0
20001998:	d109      	bne.n	200019ae <xQueueGenericReceive+0x62>
2000199a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000199e:	f383 8811 	msr	BASEPRI, r3
200019a2:	f3bf 8f6f 	isb	sy
200019a6:	f3bf 8f4f 	dsb	sy
200019aa:	633b      	str	r3, [r7, #48]	; 0x30
200019ac:	e7fe      	b.n	200019ac <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200019ae:	f001 fa63 	bl	20002e78 <xTaskGetSchedulerState>
200019b2:	4603      	mov	r3, r0
200019b4:	2b00      	cmp	r3, #0
200019b6:	d102      	bne.n	200019be <xQueueGenericReceive+0x72>
200019b8:	687b      	ldr	r3, [r7, #4]
200019ba:	2b00      	cmp	r3, #0
200019bc:	d102      	bne.n	200019c4 <xQueueGenericReceive+0x78>
200019be:	f04f 0301 	mov.w	r3, #1
200019c2:	e001      	b.n	200019c8 <xQueueGenericReceive+0x7c>
200019c4:	f04f 0300 	mov.w	r3, #0
200019c8:	2b00      	cmp	r3, #0
200019ca:	d10c      	bne.n	200019e6 <xQueueGenericReceive+0x9a>
200019cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200019d0:	f383 8811 	msr	BASEPRI, r3
200019d4:	f3bf 8f6f 	isb	sy
200019d8:	f3bf 8f4f 	dsb	sy
200019dc:	637b      	str	r3, [r7, #52]	; 0x34
200019de:	e7fe      	b.n	200019de <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
200019e0:	bf00      	nop
200019e2:	e000      	b.n	200019e6 <xQueueGenericReceive+0x9a>
200019e4:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
200019e6:	f002 fcd9 	bl	2000439c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
200019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200019ee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
200019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200019f2:	2b00      	cmp	r3, #0
200019f4:	d055      	beq.n	20001aa2 <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
200019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200019f8:	68db      	ldr	r3, [r3, #12]
200019fa:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
200019fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
200019fe:	68b9      	ldr	r1, [r7, #8]
20001a00:	f000 f950 	bl	20001ca4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
20001a04:	683b      	ldr	r3, [r7, #0]
20001a06:	2b00      	cmp	r3, #0
20001a08:	d127      	bne.n	20001a5a <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
20001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001a0c:	f103 32ff 	add.w	r2, r3, #4294967295
20001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a12:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a16:	681b      	ldr	r3, [r3, #0]
20001a18:	2b00      	cmp	r3, #0
20001a1a:	d105      	bne.n	20001a28 <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
20001a1c:	f001 fb9c 	bl	20003158 <pvTaskIncrementMutexHeldCount>
20001a20:	4603      	mov	r3, r0
20001a22:	461a      	mov	r2, r3
20001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a26:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a2a:	691b      	ldr	r3, [r3, #16]
20001a2c:	2b00      	cmp	r3, #0
20001a2e:	d030      	beq.n	20001a92 <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a32:	f103 0310 	add.w	r3, r3, #16
20001a36:	4618      	mov	r0, r3
20001a38:	f001 f816 	bl	20002a68 <xTaskRemoveFromEventList>
20001a3c:	4603      	mov	r3, r0
20001a3e:	2b00      	cmp	r3, #0
20001a40:	d029      	beq.n	20001a96 <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
20001a42:	f64e 5304 	movw	r3, #60676	; 0xed04
20001a46:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001a4e:	601a      	str	r2, [r3, #0]
20001a50:	f3bf 8f4f 	dsb	sy
20001a54:	f3bf 8f6f 	isb	sy
20001a58:	e01e      	b.n	20001a98 <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
20001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a5c:	6a3a      	ldr	r2, [r7, #32]
20001a5e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001a64:	2b00      	cmp	r3, #0
20001a66:	d017      	beq.n	20001a98 <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001a6a:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001a6e:	4618      	mov	r0, r3
20001a70:	f000 fffa 	bl	20002a68 <xTaskRemoveFromEventList>
20001a74:	4603      	mov	r3, r0
20001a76:	2b00      	cmp	r3, #0
20001a78:	d00e      	beq.n	20001a98 <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
20001a7a:	f64e 5304 	movw	r3, #60676	; 0xed04
20001a7e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001a86:	601a      	str	r2, [r3, #0]
20001a88:	f3bf 8f4f 	dsb	sy
20001a8c:	f3bf 8f6f 	isb	sy
20001a90:	e002      	b.n	20001a98 <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
20001a92:	bf00      	nop
20001a94:	e000      	b.n	20001a98 <xQueueGenericReceive+0x14c>
20001a96:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
20001a98:	f002 fcb8 	bl	2000440c <vPortExitCritical>
				return pdPASS;
20001a9c:	f04f 0301 	mov.w	r3, #1
20001aa0:	e083      	b.n	20001baa <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001aa2:	687b      	ldr	r3, [r7, #4]
20001aa4:	2b00      	cmp	r3, #0
20001aa6:	d104      	bne.n	20001ab2 <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001aa8:	f002 fcb0 	bl	2000440c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001aac:	f04f 0300 	mov.w	r3, #0
20001ab0:	e07b      	b.n	20001baa <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
20001ab2:	69fb      	ldr	r3, [r7, #28]
20001ab4:	2b00      	cmp	r3, #0
20001ab6:	d107      	bne.n	20001ac8 <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
20001ab8:	f107 0314 	add.w	r3, r7, #20
20001abc:	4618      	mov	r0, r3
20001abe:	f001 f84b 	bl	20002b58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001ac2:	f04f 0301 	mov.w	r3, #1
20001ac6:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001ac8:	f002 fca0 	bl	2000440c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001acc:	f000 fcac 	bl	20002428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001ad0:	f002 fc64 	bl	2000439c <vPortEnterCritical>
20001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001ada:	b2db      	uxtb	r3, r3
20001adc:	b25b      	sxtb	r3, r3
20001ade:	f1b3 3fff 	cmp.w	r3, #4294967295
20001ae2:	d104      	bne.n	20001aee <xQueueGenericReceive+0x1a2>
20001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ae6:	f04f 0200 	mov.w	r2, #0
20001aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001af4:	b2db      	uxtb	r3, r3
20001af6:	b25b      	sxtb	r3, r3
20001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
20001afc:	d104      	bne.n	20001b08 <xQueueGenericReceive+0x1bc>
20001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b00:	f04f 0200 	mov.w	r2, #0
20001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001b08:	f002 fc80 	bl	2000440c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001b0c:	f107 0214 	add.w	r2, r7, #20
20001b10:	f107 0304 	add.w	r3, r7, #4
20001b14:	4610      	mov	r0, r2
20001b16:	4619      	mov	r1, r3
20001b18:	f001 f842 	bl	20002ba0 <xTaskCheckForTimeOut>
20001b1c:	4603      	mov	r3, r0
20001b1e:	2b00      	cmp	r3, #0
20001b20:	d135      	bne.n	20001b8e <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001b24:	f000 f93c 	bl	20001da0 <prvIsQueueEmpty>
20001b28:	4603      	mov	r3, r0
20001b2a:	2b00      	cmp	r3, #0
20001b2c:	d029      	beq.n	20001b82 <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b30:	681b      	ldr	r3, [r3, #0]
20001b32:	2b00      	cmp	r3, #0
20001b34:	d108      	bne.n	20001b48 <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
20001b36:	f002 fc31 	bl	2000439c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
20001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b3c:	685b      	ldr	r3, [r3, #4]
20001b3e:	4618      	mov	r0, r3
20001b40:	f001 f9be 	bl	20002ec0 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
20001b44:	f002 fc62 	bl	2000440c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001b4a:	f103 0224 	add.w	r2, r3, #36	; 0x24
20001b4e:	687b      	ldr	r3, [r7, #4]
20001b50:	4610      	mov	r0, r2
20001b52:	4619      	mov	r1, r3
20001b54:	f000 ff36 	bl	200029c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001b5a:	f000 f8cb 	bl	20001cf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001b5e:	f000 fc75 	bl	2000244c <xTaskResumeAll>
20001b62:	4603      	mov	r3, r0
20001b64:	2b00      	cmp	r3, #0
20001b66:	f47f af3b 	bne.w	200019e0 <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
20001b6a:	f64e 5304 	movw	r3, #60676	; 0xed04
20001b6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001b76:	601a      	str	r2, [r3, #0]
20001b78:	f3bf 8f4f 	dsb	sy
20001b7c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001b80:	e731      	b.n	200019e6 <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001b84:	f000 f8b6 	bl	20001cf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001b88:	f000 fc60 	bl	2000244c <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001b8c:	e72b      	b.n	200019e6 <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
20001b8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001b90:	f000 f8b0 	bl	20001cf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001b94:	f000 fc5a 	bl	2000244c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001b9a:	f000 f901 	bl	20001da0 <prvIsQueueEmpty>
20001b9e:	4603      	mov	r3, r0
20001ba0:	2b00      	cmp	r3, #0
20001ba2:	f43f af1f 	beq.w	200019e4 <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001ba6:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
20001baa:	4618      	mov	r0, r3
20001bac:	f107 0738 	add.w	r7, r7, #56	; 0x38
20001bb0:	46bd      	mov	sp, r7
20001bb2:	bd80      	pop	{r7, pc}

20001bb4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001bb4:	b580      	push	{r7, lr}
20001bb6:	b086      	sub	sp, #24
20001bb8:	af00      	add	r7, sp, #0
20001bba:	60f8      	str	r0, [r7, #12]
20001bbc:	60b9      	str	r1, [r7, #8]
20001bbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
20001bc0:	f04f 0300 	mov.w	r3, #0
20001bc4:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001bc6:	68fb      	ldr	r3, [r7, #12]
20001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001bca:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001bcc:	68fb      	ldr	r3, [r7, #12]
20001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001bd0:	2b00      	cmp	r3, #0
20001bd2:	d10f      	bne.n	20001bf4 <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001bd4:	68fb      	ldr	r3, [r7, #12]
20001bd6:	681b      	ldr	r3, [r3, #0]
20001bd8:	2b00      	cmp	r3, #0
20001bda:	d155      	bne.n	20001c88 <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
20001bdc:	68fb      	ldr	r3, [r7, #12]
20001bde:	685b      	ldr	r3, [r3, #4]
20001be0:	4618      	mov	r0, r3
20001be2:	f001 fa13 	bl	2000300c <xTaskPriorityDisinherit>
20001be6:	4603      	mov	r3, r0
20001be8:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
20001bea:	68fb      	ldr	r3, [r7, #12]
20001bec:	f04f 0200 	mov.w	r2, #0
20001bf0:	605a      	str	r2, [r3, #4]
20001bf2:	e04c      	b.n	20001c8e <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001bf4:	687b      	ldr	r3, [r7, #4]
20001bf6:	2b00      	cmp	r3, #0
20001bf8:	d11a      	bne.n	20001c30 <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
20001bfa:	68fb      	ldr	r3, [r7, #12]
20001bfc:	689a      	ldr	r2, [r3, #8]
20001bfe:	68fb      	ldr	r3, [r7, #12]
20001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c02:	4610      	mov	r0, r2
20001c04:	68b9      	ldr	r1, [r7, #8]
20001c06:	461a      	mov	r2, r3
20001c08:	f005 fb36 	bl	20007278 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
20001c0c:	68fb      	ldr	r3, [r7, #12]
20001c0e:	689a      	ldr	r2, [r3, #8]
20001c10:	68fb      	ldr	r3, [r7, #12]
20001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c14:	441a      	add	r2, r3
20001c16:	68fb      	ldr	r3, [r7, #12]
20001c18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001c1a:	68fb      	ldr	r3, [r7, #12]
20001c1c:	689a      	ldr	r2, [r3, #8]
20001c1e:	68fb      	ldr	r3, [r7, #12]
20001c20:	685b      	ldr	r3, [r3, #4]
20001c22:	429a      	cmp	r2, r3
20001c24:	d332      	bcc.n	20001c8c <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001c26:	68fb      	ldr	r3, [r7, #12]
20001c28:	681a      	ldr	r2, [r3, #0]
20001c2a:	68fb      	ldr	r3, [r7, #12]
20001c2c:	609a      	str	r2, [r3, #8]
20001c2e:	e02e      	b.n	20001c8e <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001c30:	68fb      	ldr	r3, [r7, #12]
20001c32:	68da      	ldr	r2, [r3, #12]
20001c34:	68fb      	ldr	r3, [r7, #12]
20001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c38:	4610      	mov	r0, r2
20001c3a:	68b9      	ldr	r1, [r7, #8]
20001c3c:	461a      	mov	r2, r3
20001c3e:	f005 fb1b 	bl	20007278 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
20001c42:	68fb      	ldr	r3, [r7, #12]
20001c44:	68da      	ldr	r2, [r3, #12]
20001c46:	68fb      	ldr	r3, [r7, #12]
20001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c4a:	f1c3 0300 	rsb	r3, r3, #0
20001c4e:	441a      	add	r2, r3
20001c50:	68fb      	ldr	r3, [r7, #12]
20001c52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001c54:	68fb      	ldr	r3, [r7, #12]
20001c56:	68da      	ldr	r2, [r3, #12]
20001c58:	68fb      	ldr	r3, [r7, #12]
20001c5a:	681b      	ldr	r3, [r3, #0]
20001c5c:	429a      	cmp	r2, r3
20001c5e:	d208      	bcs.n	20001c72 <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
20001c60:	68fb      	ldr	r3, [r7, #12]
20001c62:	685a      	ldr	r2, [r3, #4]
20001c64:	68fb      	ldr	r3, [r7, #12]
20001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001c68:	f1c3 0300 	rsb	r3, r3, #0
20001c6c:	441a      	add	r2, r3
20001c6e:	68fb      	ldr	r3, [r7, #12]
20001c70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20001c72:	687b      	ldr	r3, [r7, #4]
20001c74:	2b02      	cmp	r3, #2
20001c76:	d10a      	bne.n	20001c8e <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001c78:	697b      	ldr	r3, [r7, #20]
20001c7a:	2b00      	cmp	r3, #0
20001c7c:	d007      	beq.n	20001c8e <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
20001c7e:	697b      	ldr	r3, [r7, #20]
20001c80:	f103 33ff 	add.w	r3, r3, #4294967295
20001c84:	617b      	str	r3, [r7, #20]
20001c86:	e002      	b.n	20001c8e <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
20001c88:	bf00      	nop
20001c8a:	e000      	b.n	20001c8e <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001c8c:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
20001c8e:	697b      	ldr	r3, [r7, #20]
20001c90:	f103 0201 	add.w	r2, r3, #1
20001c94:	68fb      	ldr	r3, [r7, #12]
20001c96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
20001c98:	693b      	ldr	r3, [r7, #16]
}
20001c9a:	4618      	mov	r0, r3
20001c9c:	f107 0718 	add.w	r7, r7, #24
20001ca0:	46bd      	mov	sp, r7
20001ca2:	bd80      	pop	{r7, pc}

20001ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001ca4:	b580      	push	{r7, lr}
20001ca6:	b082      	sub	sp, #8
20001ca8:	af00      	add	r7, sp, #0
20001caa:	6078      	str	r0, [r7, #4]
20001cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001cae:	687b      	ldr	r3, [r7, #4]
20001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001cb2:	2b00      	cmp	r3, #0
20001cb4:	d019      	beq.n	20001cea <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
20001cb6:	687b      	ldr	r3, [r7, #4]
20001cb8:	68da      	ldr	r2, [r3, #12]
20001cba:	687b      	ldr	r3, [r7, #4]
20001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001cbe:	441a      	add	r2, r3
20001cc0:	687b      	ldr	r3, [r7, #4]
20001cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001cc4:	687b      	ldr	r3, [r7, #4]
20001cc6:	68da      	ldr	r2, [r3, #12]
20001cc8:	687b      	ldr	r3, [r7, #4]
20001cca:	685b      	ldr	r3, [r3, #4]
20001ccc:	429a      	cmp	r2, r3
20001cce:	d303      	bcc.n	20001cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
20001cd0:	687b      	ldr	r3, [r7, #4]
20001cd2:	681a      	ldr	r2, [r3, #0]
20001cd4:	687b      	ldr	r3, [r7, #4]
20001cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
20001cd8:	687b      	ldr	r3, [r7, #4]
20001cda:	68da      	ldr	r2, [r3, #12]
20001cdc:	687b      	ldr	r3, [r7, #4]
20001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ce0:	6838      	ldr	r0, [r7, #0]
20001ce2:	4611      	mov	r1, r2
20001ce4:	461a      	mov	r2, r3
20001ce6:	f005 fac7 	bl	20007278 <memcpy>
	}
}
20001cea:	f107 0708 	add.w	r7, r7, #8
20001cee:	46bd      	mov	sp, r7
20001cf0:	bd80      	pop	{r7, pc}
20001cf2:	bf00      	nop

20001cf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001cf4:	b580      	push	{r7, lr}
20001cf6:	b084      	sub	sp, #16
20001cf8:	af00      	add	r7, sp, #0
20001cfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001cfc:	f002 fb4e 	bl	2000439c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001d00:	687b      	ldr	r3, [r7, #4]
20001d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001d06:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001d08:	e012      	b.n	20001d30 <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001d0a:	687b      	ldr	r3, [r7, #4]
20001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001d0e:	2b00      	cmp	r3, #0
20001d10:	d013      	beq.n	20001d3a <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001d12:	687b      	ldr	r3, [r7, #4]
20001d14:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001d18:	4618      	mov	r0, r3
20001d1a:	f000 fea5 	bl	20002a68 <xTaskRemoveFromEventList>
20001d1e:	4603      	mov	r3, r0
20001d20:	2b00      	cmp	r3, #0
20001d22:	d001      	beq.n	20001d28 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001d24:	f000 ffa4 	bl	20002c70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001d28:	7bbb      	ldrb	r3, [r7, #14]
20001d2a:	f103 33ff 	add.w	r3, r3, #4294967295
20001d2e:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001d34:	2b00      	cmp	r3, #0
20001d36:	dce8      	bgt.n	20001d0a <prvUnlockQueue+0x16>
20001d38:	e000      	b.n	20001d3c <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
20001d3a:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001d3c:	687b      	ldr	r3, [r7, #4]
20001d3e:	f04f 32ff 	mov.w	r2, #4294967295
20001d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001d46:	f002 fb61 	bl	2000440c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001d4a:	f002 fb27 	bl	2000439c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001d4e:	687b      	ldr	r3, [r7, #4]
20001d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001d54:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001d56:	e012      	b.n	20001d7e <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001d58:	687b      	ldr	r3, [r7, #4]
20001d5a:	691b      	ldr	r3, [r3, #16]
20001d5c:	2b00      	cmp	r3, #0
20001d5e:	d013      	beq.n	20001d88 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001d60:	687b      	ldr	r3, [r7, #4]
20001d62:	f103 0310 	add.w	r3, r3, #16
20001d66:	4618      	mov	r0, r3
20001d68:	f000 fe7e 	bl	20002a68 <xTaskRemoveFromEventList>
20001d6c:	4603      	mov	r3, r0
20001d6e:	2b00      	cmp	r3, #0
20001d70:	d001      	beq.n	20001d76 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
20001d72:	f000 ff7d 	bl	20002c70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001d76:	7bfb      	ldrb	r3, [r7, #15]
20001d78:	f103 33ff 	add.w	r3, r3, #4294967295
20001d7c:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001d82:	2b00      	cmp	r3, #0
20001d84:	dce8      	bgt.n	20001d58 <prvUnlockQueue+0x64>
20001d86:	e000      	b.n	20001d8a <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
20001d88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001d8a:	687b      	ldr	r3, [r7, #4]
20001d8c:	f04f 32ff 	mov.w	r2, #4294967295
20001d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001d94:	f002 fb3a 	bl	2000440c <vPortExitCritical>
}
20001d98:	f107 0710 	add.w	r7, r7, #16
20001d9c:	46bd      	mov	sp, r7
20001d9e:	bd80      	pop	{r7, pc}

20001da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001da0:	b580      	push	{r7, lr}
20001da2:	b084      	sub	sp, #16
20001da4:	af00      	add	r7, sp, #0
20001da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001da8:	f002 faf8 	bl	2000439c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001dac:	687b      	ldr	r3, [r7, #4]
20001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001db0:	2b00      	cmp	r3, #0
20001db2:	d103      	bne.n	20001dbc <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
20001db4:	f04f 0301 	mov.w	r3, #1
20001db8:	60fb      	str	r3, [r7, #12]
20001dba:	e002      	b.n	20001dc2 <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001dbc:	f04f 0300 	mov.w	r3, #0
20001dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001dc2:	f002 fb23 	bl	2000440c <vPortExitCritical>

	return xReturn;
20001dc6:	68fb      	ldr	r3, [r7, #12]
}
20001dc8:	4618      	mov	r0, r3
20001dca:	f107 0710 	add.w	r7, r7, #16
20001dce:	46bd      	mov	sp, r7
20001dd0:	bd80      	pop	{r7, pc}
20001dd2:	bf00      	nop

20001dd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001dd4:	b580      	push	{r7, lr}
20001dd6:	b084      	sub	sp, #16
20001dd8:	af00      	add	r7, sp, #0
20001dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001ddc:	f002 fade 	bl	2000439c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001de0:	687b      	ldr	r3, [r7, #4]
20001de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001de4:	687b      	ldr	r3, [r7, #4]
20001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001de8:	429a      	cmp	r2, r3
20001dea:	d103      	bne.n	20001df4 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
20001dec:	f04f 0301 	mov.w	r3, #1
20001df0:	60fb      	str	r3, [r7, #12]
20001df2:	e002      	b.n	20001dfa <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
20001df4:	f04f 0300 	mov.w	r3, #0
20001df8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001dfa:	f002 fb07 	bl	2000440c <vPortExitCritical>

	return xReturn;
20001dfe:	68fb      	ldr	r3, [r7, #12]
}
20001e00:	4618      	mov	r0, r3
20001e02:	f107 0710 	add.w	r7, r7, #16
20001e06:	46bd      	mov	sp, r7
20001e08:	bd80      	pop	{r7, pc}
20001e0a:	bf00      	nop

20001e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001e0c:	b580      	push	{r7, lr}
20001e0e:	b086      	sub	sp, #24
20001e10:	af00      	add	r7, sp, #0
20001e12:	60f8      	str	r0, [r7, #12]
20001e14:	60b9      	str	r1, [r7, #8]
20001e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
20001e18:	68fb      	ldr	r3, [r7, #12]
20001e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001e1c:	f002 fabe 	bl	2000439c <vPortEnterCritical>
20001e20:	697b      	ldr	r3, [r7, #20]
20001e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001e26:	b2db      	uxtb	r3, r3
20001e28:	b25b      	sxtb	r3, r3
20001e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
20001e2e:	d104      	bne.n	20001e3a <vQueueWaitForMessageRestricted+0x2e>
20001e30:	697b      	ldr	r3, [r7, #20]
20001e32:	f04f 0200 	mov.w	r2, #0
20001e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001e3a:	697b      	ldr	r3, [r7, #20]
20001e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001e40:	b2db      	uxtb	r3, r3
20001e42:	b25b      	sxtb	r3, r3
20001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
20001e48:	d104      	bne.n	20001e54 <vQueueWaitForMessageRestricted+0x48>
20001e4a:	697b      	ldr	r3, [r7, #20]
20001e4c:	f04f 0200 	mov.w	r2, #0
20001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001e54:	f002 fada 	bl	2000440c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20001e58:	697b      	ldr	r3, [r7, #20]
20001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001e5c:	2b00      	cmp	r3, #0
20001e5e:	d107      	bne.n	20001e70 <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20001e60:	697b      	ldr	r3, [r7, #20]
20001e62:	f103 0324 	add.w	r3, r3, #36	; 0x24
20001e66:	4618      	mov	r0, r3
20001e68:	68b9      	ldr	r1, [r7, #8]
20001e6a:	687a      	ldr	r2, [r7, #4]
20001e6c:	f000 fdd0 	bl	20002a10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20001e70:	6978      	ldr	r0, [r7, #20]
20001e72:	f7ff ff3f 	bl	20001cf4 <prvUnlockQueue>
	}
20001e76:	f107 0718 	add.w	r7, r7, #24
20001e7a:	46bd      	mov	sp, r7
20001e7c:	bd80      	pop	{r7, pc}
20001e7e:	bf00      	nop

20001e80 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20001e80:	b580      	push	{r7, lr}
20001e82:	b08c      	sub	sp, #48	; 0x30
20001e84:	af04      	add	r7, sp, #16
20001e86:	60f8      	str	r0, [r7, #12]
20001e88:	60b9      	str	r1, [r7, #8]
20001e8a:	603b      	str	r3, [r7, #0]
20001e8c:	4613      	mov	r3, r2
20001e8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001e90:	88fb      	ldrh	r3, [r7, #6]
20001e92:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001e96:	4618      	mov	r0, r3
20001e98:	f001 ff34 	bl	20003d04 <pvPortMalloc>
20001e9c:	4603      	mov	r3, r0
20001e9e:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
20001ea0:	69fb      	ldr	r3, [r7, #28]
20001ea2:	2b00      	cmp	r3, #0
20001ea4:	d010      	beq.n	20001ec8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
20001ea6:	f04f 005c 	mov.w	r0, #92	; 0x5c
20001eaa:	f001 ff2b 	bl	20003d04 <pvPortMalloc>
20001eae:	4603      	mov	r3, r0
20001eb0:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
20001eb2:	697b      	ldr	r3, [r7, #20]
20001eb4:	2b00      	cmp	r3, #0
20001eb6:	d003      	beq.n	20001ec0 <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20001eb8:	697b      	ldr	r3, [r7, #20]
20001eba:	69fa      	ldr	r2, [r7, #28]
20001ebc:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20001ebe:	e006      	b.n	20001ece <xTaskCreate+0x4e>
20001ec0:	69f8      	ldr	r0, [r7, #28]
20001ec2:	f002 f81b 	bl	20003efc <vPortFree>
20001ec6:	e002      	b.n	20001ece <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
20001ec8:	f04f 0300 	mov.w	r3, #0
20001ecc:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20001ece:	697b      	ldr	r3, [r7, #20]
20001ed0:	2b00      	cmp	r3, #0
20001ed2:	d016      	beq.n	20001f02 <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
20001ed4:	88fb      	ldrh	r3, [r7, #6]
20001ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001ed8:	9200      	str	r2, [sp, #0]
20001eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20001edc:	9201      	str	r2, [sp, #4]
20001ede:	697a      	ldr	r2, [r7, #20]
20001ee0:	9202      	str	r2, [sp, #8]
20001ee2:	f04f 0200 	mov.w	r2, #0
20001ee6:	9203      	str	r2, [sp, #12]
20001ee8:	68f8      	ldr	r0, [r7, #12]
20001eea:	68b9      	ldr	r1, [r7, #8]
20001eec:	461a      	mov	r2, r3
20001eee:	683b      	ldr	r3, [r7, #0]
20001ef0:	f000 f810 	bl	20001f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001ef4:	6978      	ldr	r0, [r7, #20]
20001ef6:	f000 f8a3 	bl	20002040 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20001efa:	f04f 0301 	mov.w	r3, #1
20001efe:	61bb      	str	r3, [r7, #24]
20001f00:	e002      	b.n	20001f08 <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
20001f02:	f04f 33ff 	mov.w	r3, #4294967295
20001f06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
20001f08:	69bb      	ldr	r3, [r7, #24]
	}
20001f0a:	4618      	mov	r0, r3
20001f0c:	f107 0720 	add.w	r7, r7, #32
20001f10:	46bd      	mov	sp, r7
20001f12:	bd80      	pop	{r7, pc}

20001f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
20001f14:	b580      	push	{r7, lr}
20001f16:	b088      	sub	sp, #32
20001f18:	af00      	add	r7, sp, #0
20001f1a:	60f8      	str	r0, [r7, #12]
20001f1c:	60b9      	str	r1, [r7, #8]
20001f1e:	607a      	str	r2, [r7, #4]
20001f20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
20001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001f26:	687b      	ldr	r3, [r7, #4]
20001f28:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001f2c:	4610      	mov	r0, r2
20001f2e:	f04f 01a5 	mov.w	r1, #165	; 0xa5
20001f32:	461a      	mov	r2, r3
20001f34:	f005 fa68 	bl	20007408 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
20001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001f3c:	687b      	ldr	r3, [r7, #4]
20001f3e:	f103 33ff 	add.w	r3, r3, #4294967295
20001f42:	ea4f 0383 	mov.w	r3, r3, lsl #2
20001f46:	4413      	add	r3, r2
20001f48:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
20001f4a:	697b      	ldr	r3, [r7, #20]
20001f4c:	f023 0307 	bic.w	r3, r3, #7
20001f50:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20001f52:	697b      	ldr	r3, [r7, #20]
20001f54:	f003 0307 	and.w	r3, r3, #7
20001f58:	2b00      	cmp	r3, #0
20001f5a:	d009      	beq.n	20001f70 <prvInitialiseNewTask+0x5c>
20001f5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20001f60:	f383 8811 	msr	BASEPRI, r3
20001f64:	f3bf 8f6f 	isb	sy
20001f68:	f3bf 8f4f 	dsb	sy
20001f6c:	61fb      	str	r3, [r7, #28]
20001f6e:	e7fe      	b.n	20001f6e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001f70:	f04f 0300 	mov.w	r3, #0
20001f74:	61bb      	str	r3, [r7, #24]
20001f76:	e012      	b.n	20001f9e <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20001f78:	69b9      	ldr	r1, [r7, #24]
20001f7a:	68ba      	ldr	r2, [r7, #8]
20001f7c:	69bb      	ldr	r3, [r7, #24]
20001f7e:	4413      	add	r3, r2
20001f80:	781a      	ldrb	r2, [r3, #0]
20001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f84:	440b      	add	r3, r1
20001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
20001f8a:	68ba      	ldr	r2, [r7, #8]
20001f8c:	69bb      	ldr	r3, [r7, #24]
20001f8e:	4413      	add	r3, r2
20001f90:	781b      	ldrb	r3, [r3, #0]
20001f92:	2b00      	cmp	r3, #0
20001f94:	d007      	beq.n	20001fa6 <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001f96:	69bb      	ldr	r3, [r7, #24]
20001f98:	f103 0301 	add.w	r3, r3, #1
20001f9c:	61bb      	str	r3, [r7, #24]
20001f9e:	69bb      	ldr	r3, [r7, #24]
20001fa0:	2b09      	cmp	r3, #9
20001fa2:	d9e9      	bls.n	20001f78 <prvInitialiseNewTask+0x64>
20001fa4:	e000      	b.n	20001fa8 <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
20001fa6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20001fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001faa:	f04f 0200 	mov.w	r2, #0
20001fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001fb4:	2b04      	cmp	r3, #4
20001fb6:	d902      	bls.n	20001fbe <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20001fb8:	f04f 0304 	mov.w	r3, #4
20001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001fc8:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
20001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001fcc:	f04f 0200 	mov.w	r2, #0
20001fd0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
20001fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001fd4:	f103 0304 	add.w	r3, r3, #4
20001fd8:	4618      	mov	r0, r3
20001fda:	f7ff f951 	bl	20001280 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001fe0:	f103 0318 	add.w	r3, r3, #24
20001fe4:	4618      	mov	r0, r3
20001fe6:	f7ff f94b 	bl	20001280 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
20001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001fee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001ff2:	f1c3 0205 	rsb	r2, r3, #5
20001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ff8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
20001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001ffe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
20002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002002:	f04f 0200 	mov.w	r2, #0
20002006:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
20002008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000200a:	f04f 0200 	mov.w	r2, #0
2000200e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20002010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002012:	f04f 0200 	mov.w	r2, #0
20002016:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
2000201a:	6978      	ldr	r0, [r7, #20]
2000201c:	68f9      	ldr	r1, [r7, #12]
2000201e:	683a      	ldr	r2, [r7, #0]
20002020:	f002 f8b8 	bl	20004194 <pxPortInitialiseStack>
20002024:	4603      	mov	r3, r0
20002026:	461a      	mov	r2, r3
20002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000202a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
2000202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000202e:	2b00      	cmp	r3, #0
20002030:	d002      	beq.n	20002038 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
20002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002036:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002038:	f107 0720 	add.w	r7, r7, #32
2000203c:	46bd      	mov	sp, r7
2000203e:	bd80      	pop	{r7, pc}

20002040 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20002040:	b580      	push	{r7, lr}
20002042:	b082      	sub	sp, #8
20002044:	af00      	add	r7, sp, #0
20002046:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
20002048:	f002 f9a8 	bl	2000439c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
2000204c:	f247 63e0 	movw	r3, #30432	; 0x76e0
20002050:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002054:	681b      	ldr	r3, [r3, #0]
20002056:	f103 0201 	add.w	r2, r3, #1
2000205a:	f247 63e0 	movw	r3, #30432	; 0x76e0
2000205e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002062:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
20002064:	f247 6308 	movw	r3, #30216	; 0x7608
20002068:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000206c:	681b      	ldr	r3, [r3, #0]
2000206e:	2b00      	cmp	r3, #0
20002070:	d10f      	bne.n	20002092 <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
20002072:	f247 6308 	movw	r3, #30216	; 0x7608
20002076:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000207a:	687a      	ldr	r2, [r7, #4]
2000207c:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
2000207e:	f247 63e0 	movw	r3, #30432	; 0x76e0
20002082:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002086:	681b      	ldr	r3, [r3, #0]
20002088:	2b01      	cmp	r3, #1
2000208a:	d11a      	bne.n	200020c2 <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
2000208c:	f000 fe18 	bl	20002cc0 <prvInitialiseTaskLists>
20002090:	e018      	b.n	200020c4 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
20002092:	f247 63ec 	movw	r3, #30444	; 0x76ec
20002096:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000209a:	681b      	ldr	r3, [r3, #0]
2000209c:	2b00      	cmp	r3, #0
2000209e:	d111      	bne.n	200020c4 <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
200020a0:	f247 6308 	movw	r3, #30216	; 0x7608
200020a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020a8:	681b      	ldr	r3, [r3, #0]
200020aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200020ac:	687b      	ldr	r3, [r7, #4]
200020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200020b0:	429a      	cmp	r2, r3
200020b2:	d807      	bhi.n	200020c4 <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
200020b4:	f247 6308 	movw	r3, #30216	; 0x7608
200020b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020bc:	687a      	ldr	r2, [r7, #4]
200020be:	601a      	str	r2, [r3, #0]
200020c0:	e000      	b.n	200020c4 <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
200020c2:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
200020c4:	f247 63fc 	movw	r3, #30460	; 0x76fc
200020c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020cc:	681b      	ldr	r3, [r3, #0]
200020ce:	f103 0201 	add.w	r2, r3, #1
200020d2:	f247 63fc 	movw	r3, #30460	; 0x76fc
200020d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020da:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
200020dc:	f247 63fc 	movw	r3, #30460	; 0x76fc
200020e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020e4:	681a      	ldr	r2, [r3, #0]
200020e6:	687b      	ldr	r3, [r7, #4]
200020e8:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
200020ea:	687b      	ldr	r3, [r7, #4]
200020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200020ee:	f04f 0201 	mov.w	r2, #1
200020f2:	fa02 f203 	lsl.w	r2, r2, r3
200020f6:	f247 63e8 	movw	r3, #30440	; 0x76e8
200020fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020fe:	681b      	ldr	r3, [r3, #0]
20002100:	ea42 0203 	orr.w	r2, r2, r3
20002104:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002108:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000210c:	601a      	str	r2, [r3, #0]
2000210e:	687b      	ldr	r3, [r7, #4]
20002110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002112:	4613      	mov	r3, r2
20002114:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002118:	4413      	add	r3, r2
2000211a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000211e:	461a      	mov	r2, r3
20002120:	f247 630c 	movw	r3, #30220	; 0x760c
20002124:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002128:	441a      	add	r2, r3
2000212a:	687b      	ldr	r3, [r7, #4]
2000212c:	f103 0304 	add.w	r3, r3, #4
20002130:	4610      	mov	r0, r2
20002132:	4619      	mov	r1, r3
20002134:	f7ff f8b2 	bl	2000129c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20002138:	f002 f968 	bl	2000440c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
2000213c:	f247 63ec 	movw	r3, #30444	; 0x76ec
20002140:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002144:	681b      	ldr	r3, [r3, #0]
20002146:	2b00      	cmp	r3, #0
20002148:	d014      	beq.n	20002174 <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
2000214a:	f247 6308 	movw	r3, #30216	; 0x7608
2000214e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002152:	681b      	ldr	r3, [r3, #0]
20002154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002156:	687b      	ldr	r3, [r7, #4]
20002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000215a:	429a      	cmp	r2, r3
2000215c:	d20a      	bcs.n	20002174 <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
2000215e:	f64e 5304 	movw	r3, #60676	; 0xed04
20002162:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000216a:	601a      	str	r2, [r3, #0]
2000216c:	f3bf 8f4f 	dsb	sy
20002170:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002174:	f107 0708 	add.w	r7, r7, #8
20002178:	46bd      	mov	sp, r7
2000217a:	bd80      	pop	{r7, pc}

2000217c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
2000217c:	b580      	push	{r7, lr}
2000217e:	b084      	sub	sp, #16
20002180:	af00      	add	r7, sp, #0
20002182:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
20002184:	f002 f90a 	bl	2000439c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
20002188:	687b      	ldr	r3, [r7, #4]
2000218a:	2b00      	cmp	r3, #0
2000218c:	d105      	bne.n	2000219a <uxTaskPriorityGet+0x1e>
2000218e:	f247 6308 	movw	r3, #30216	; 0x7608
20002192:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002196:	681b      	ldr	r3, [r3, #0]
20002198:	e000      	b.n	2000219c <uxTaskPriorityGet+0x20>
2000219a:	687b      	ldr	r3, [r7, #4]
2000219c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxPriority;
2000219e:	68bb      	ldr	r3, [r7, #8]
200021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200021a2:	60fb      	str	r3, [r7, #12]
		}
		taskEXIT_CRITICAL();
200021a4:	f002 f932 	bl	2000440c <vPortExitCritical>

		return uxReturn;
200021a8:	68fb      	ldr	r3, [r7, #12]
	}
200021aa:	4618      	mov	r0, r3
200021ac:	f107 0710 	add.w	r7, r7, #16
200021b0:	46bd      	mov	sp, r7
200021b2:	bd80      	pop	{r7, pc}

200021b4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
200021b4:	b580      	push	{r7, lr}
200021b6:	b088      	sub	sp, #32
200021b8:	af00      	add	r7, sp, #0
200021ba:	6078      	str	r0, [r7, #4]
200021bc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
200021be:	f04f 0300 	mov.w	r3, #0
200021c2:	61bb      	str	r3, [r7, #24]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
200021c4:	683b      	ldr	r3, [r7, #0]
200021c6:	2b04      	cmp	r3, #4
200021c8:	d909      	bls.n	200021de <vTaskPrioritySet+0x2a>
200021ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200021ce:	f383 8811 	msr	BASEPRI, r3
200021d2:	f3bf 8f6f 	isb	sy
200021d6:	f3bf 8f4f 	dsb	sy
200021da:	61fb      	str	r3, [r7, #28]
200021dc:	e7fe      	b.n	200021dc <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
200021de:	683b      	ldr	r3, [r7, #0]
200021e0:	2b04      	cmp	r3, #4
200021e2:	d902      	bls.n	200021ea <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
200021e4:	f04f 0304 	mov.w	r3, #4
200021e8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
200021ea:	f002 f8d7 	bl	2000439c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
200021ee:	687b      	ldr	r3, [r7, #4]
200021f0:	2b00      	cmp	r3, #0
200021f2:	d105      	bne.n	20002200 <vTaskPrioritySet+0x4c>
200021f4:	f247 6308 	movw	r3, #30216	; 0x7608
200021f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021fc:	681b      	ldr	r3, [r3, #0]
200021fe:	e000      	b.n	20002202 <vTaskPrioritySet+0x4e>
20002200:	687b      	ldr	r3, [r7, #4]
20002202:	60fb      	str	r3, [r7, #12]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
20002204:	68fb      	ldr	r3, [r7, #12]
20002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002208:	613b      	str	r3, [r7, #16]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
2000220a:	693a      	ldr	r2, [r7, #16]
2000220c:	683b      	ldr	r3, [r7, #0]
2000220e:	429a      	cmp	r2, r3
20002210:	f000 80a9 	beq.w	20002366 <vTaskPrioritySet+0x1b2>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
20002214:	683a      	ldr	r2, [r7, #0]
20002216:	693b      	ldr	r3, [r7, #16]
20002218:	429a      	cmp	r2, r3
2000221a:	d914      	bls.n	20002246 <vTaskPrioritySet+0x92>
				{
					if( pxTCB != pxCurrentTCB )
2000221c:	f247 6308 	movw	r3, #30216	; 0x7608
20002220:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002224:	681b      	ldr	r3, [r3, #0]
20002226:	68fa      	ldr	r2, [r7, #12]
20002228:	429a      	cmp	r2, r3
2000222a:	d018      	beq.n	2000225e <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
2000222c:	f247 6308 	movw	r3, #30216	; 0x7608
20002230:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002234:	681b      	ldr	r3, [r3, #0]
20002236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002238:	683b      	ldr	r3, [r7, #0]
2000223a:	429a      	cmp	r2, r3
2000223c:	d811      	bhi.n	20002262 <vTaskPrioritySet+0xae>
						{
							xYieldRequired = pdTRUE;
2000223e:	f04f 0301 	mov.w	r3, #1
20002242:	61bb      	str	r3, [r7, #24]
20002244:	e00e      	b.n	20002264 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
20002246:	f247 6308 	movw	r3, #30216	; 0x7608
2000224a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000224e:	681b      	ldr	r3, [r3, #0]
20002250:	68fa      	ldr	r2, [r7, #12]
20002252:	429a      	cmp	r2, r3
20002254:	d106      	bne.n	20002264 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
20002256:	f04f 0301 	mov.w	r3, #1
2000225a:	61bb      	str	r3, [r7, #24]
2000225c:	e002      	b.n	20002264 <vTaskPrioritySet+0xb0>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
2000225e:	bf00      	nop
20002260:	e000      	b.n	20002264 <vTaskPrioritySet+0xb0>
20002262:	bf00      	nop
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
20002264:	68fb      	ldr	r3, [r7, #12]
20002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002268:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
2000226a:	68fb      	ldr	r3, [r7, #12]
2000226c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000226e:	68fb      	ldr	r3, [r7, #12]
20002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002272:	429a      	cmp	r2, r3
20002274:	d102      	bne.n	2000227c <vTaskPrioritySet+0xc8>
					{
						pxTCB->uxPriority = uxNewPriority;
20002276:	68fb      	ldr	r3, [r7, #12]
20002278:	683a      	ldr	r2, [r7, #0]
2000227a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
2000227c:	68fb      	ldr	r3, [r7, #12]
2000227e:	683a      	ldr	r2, [r7, #0]
20002280:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20002282:	68fb      	ldr	r3, [r7, #12]
20002284:	699b      	ldr	r3, [r3, #24]
20002286:	2b00      	cmp	r3, #0
20002288:	db04      	blt.n	20002294 <vTaskPrioritySet+0xe0>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000228a:	683b      	ldr	r3, [r7, #0]
2000228c:	f1c3 0205 	rsb	r2, r3, #5
20002290:	68fb      	ldr	r3, [r7, #12]
20002292:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20002294:	68fb      	ldr	r3, [r7, #12]
20002296:	6959      	ldr	r1, [r3, #20]
20002298:	697a      	ldr	r2, [r7, #20]
2000229a:	4613      	mov	r3, r2
2000229c:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022a0:	4413      	add	r3, r2
200022a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200022a6:	461a      	mov	r2, r3
200022a8:	f247 630c 	movw	r3, #30220	; 0x760c
200022ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022b0:	4413      	add	r3, r2
200022b2:	4299      	cmp	r1, r3
200022b4:	d102      	bne.n	200022bc <vTaskPrioritySet+0x108>
200022b6:	f04f 0301 	mov.w	r3, #1
200022ba:	e001      	b.n	200022c0 <vTaskPrioritySet+0x10c>
200022bc:	f04f 0300 	mov.w	r3, #0
200022c0:	2b00      	cmp	r3, #0
200022c2:	d042      	beq.n	2000234a <vTaskPrioritySet+0x196>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200022c4:	68fb      	ldr	r3, [r7, #12]
200022c6:	f103 0304 	add.w	r3, r3, #4
200022ca:	4618      	mov	r0, r3
200022cc:	f7ff f844 	bl	20001358 <uxListRemove>
200022d0:	4603      	mov	r3, r0
200022d2:	2b00      	cmp	r3, #0
200022d4:	d112      	bne.n	200022fc <vTaskPrioritySet+0x148>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
200022d6:	697b      	ldr	r3, [r7, #20]
200022d8:	f04f 0201 	mov.w	r2, #1
200022dc:	fa02 f303 	lsl.w	r3, r2, r3
200022e0:	ea6f 0203 	mvn.w	r2, r3
200022e4:	f247 63e8 	movw	r3, #30440	; 0x76e8
200022e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022ec:	681b      	ldr	r3, [r3, #0]
200022ee:	ea02 0203 	and.w	r2, r2, r3
200022f2:	f247 63e8 	movw	r3, #30440	; 0x76e8
200022f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022fa:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
200022fc:	68fb      	ldr	r3, [r7, #12]
200022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002300:	f04f 0201 	mov.w	r2, #1
20002304:	fa02 f203 	lsl.w	r2, r2, r3
20002308:	f247 63e8 	movw	r3, #30440	; 0x76e8
2000230c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002310:	681b      	ldr	r3, [r3, #0]
20002312:	ea42 0203 	orr.w	r2, r2, r3
20002316:	f247 63e8 	movw	r3, #30440	; 0x76e8
2000231a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000231e:	601a      	str	r2, [r3, #0]
20002320:	68fb      	ldr	r3, [r7, #12]
20002322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002324:	4613      	mov	r3, r2
20002326:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000232a:	4413      	add	r3, r2
2000232c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002330:	461a      	mov	r2, r3
20002332:	f247 630c 	movw	r3, #30220	; 0x760c
20002336:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000233a:	441a      	add	r2, r3
2000233c:	68fb      	ldr	r3, [r7, #12]
2000233e:	f103 0304 	add.w	r3, r3, #4
20002342:	4610      	mov	r0, r2
20002344:	4619      	mov	r1, r3
20002346:	f7fe ffa9 	bl	2000129c <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
2000234a:	69bb      	ldr	r3, [r7, #24]
2000234c:	2b00      	cmp	r3, #0
2000234e:	d00a      	beq.n	20002366 <vTaskPrioritySet+0x1b2>
				{
					taskYIELD_IF_USING_PREEMPTION();
20002350:	f64e 5304 	movw	r3, #60676	; 0xed04
20002354:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000235c:	601a      	str	r2, [r3, #0]
2000235e:	f3bf 8f4f 	dsb	sy
20002362:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
20002366:	f002 f851 	bl	2000440c <vPortExitCritical>
	}
2000236a:	f107 0720 	add.w	r7, r7, #32
2000236e:	46bd      	mov	sp, r7
20002370:	bd80      	pop	{r7, pc}
20002372:	bf00      	nop

20002374 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
20002374:	b580      	push	{r7, lr}
20002376:	b086      	sub	sp, #24
20002378:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
2000237a:	f04f 0300 	mov.w	r3, #0
2000237e:	9300      	str	r3, [sp, #0]
20002380:	f247 7304 	movw	r3, #30468	; 0x7704
20002384:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002388:	9301      	str	r3, [sp, #4]
2000238a:	f642 4089 	movw	r0, #11401	; 0x2c89
2000238e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002392:	f247 41f0 	movw	r1, #29936	; 0x74f0
20002396:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000239a:	f04f 0250 	mov.w	r2, #80	; 0x50
2000239e:	f04f 0300 	mov.w	r3, #0
200023a2:	f7ff fd6d 	bl	20001e80 <xTaskCreate>
200023a6:	4603      	mov	r3, r0
200023a8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
200023aa:	687b      	ldr	r3, [r7, #4]
200023ac:	2b01      	cmp	r3, #1
200023ae:	d103      	bne.n	200023b8 <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
200023b0:	f001 f8f4 	bl	2000359c <xTimerCreateTimerTask>
200023b4:	4603      	mov	r3, r0
200023b6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
200023b8:	687b      	ldr	r3, [r7, #4]
200023ba:	2b01      	cmp	r3, #1
200023bc:	d122      	bne.n	20002404 <vTaskStartScheduler+0x90>
200023be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200023c2:	f383 8811 	msr	BASEPRI, r3
200023c6:	f3bf 8f6f 	isb	sy
200023ca:	f3bf 8f4f 	dsb	sy
200023ce:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
200023d0:	f247 7300 	movw	r3, #30464	; 0x7700
200023d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023d8:	f04f 32ff 	mov.w	r2, #4294967295
200023dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
200023de:	f247 63ec 	movw	r3, #30444	; 0x76ec
200023e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023e6:	f04f 0201 	mov.w	r2, #1
200023ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
200023ec:	f247 63e4 	movw	r3, #30436	; 0x76e4
200023f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023f4:	f04f 0200 	mov.w	r2, #0
200023f8:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
200023fa:	f7fd ff91 	bl	20000320 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
200023fe:	f001 ff47 	bl	20004290 <xPortStartScheduler>
20002402:	e00d      	b.n	20002420 <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002404:	687b      	ldr	r3, [r7, #4]
20002406:	f1b3 3fff 	cmp.w	r3, #4294967295
2000240a:	d109      	bne.n	20002420 <vTaskStartScheduler+0xac>
2000240c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002410:	f383 8811 	msr	BASEPRI, r3
20002414:	f3bf 8f6f 	isb	sy
20002418:	f3bf 8f4f 	dsb	sy
2000241c:	60fb      	str	r3, [r7, #12]
2000241e:	e7fe      	b.n	2000241e <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
20002420:	f107 0710 	add.w	r7, r7, #16
20002424:	46bd      	mov	sp, r7
20002426:	bd80      	pop	{r7, pc}

20002428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
20002428:	b480      	push	{r7}
2000242a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
2000242c:	f247 7308 	movw	r3, #30472	; 0x7708
20002430:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002434:	681b      	ldr	r3, [r3, #0]
20002436:	f103 0201 	add.w	r2, r3, #1
2000243a:	f247 7308 	movw	r3, #30472	; 0x7708
2000243e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002442:	601a      	str	r2, [r3, #0]
}
20002444:	46bd      	mov	sp, r7
20002446:	bc80      	pop	{r7}
20002448:	4770      	bx	lr
2000244a:	bf00      	nop

2000244c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
2000244c:	b580      	push	{r7, lr}
2000244e:	b084      	sub	sp, #16
20002450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
20002452:	f04f 0300 	mov.w	r3, #0
20002456:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
20002458:	f04f 0300 	mov.w	r3, #0
2000245c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
2000245e:	f247 7308 	movw	r3, #30472	; 0x7708
20002462:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002466:	681b      	ldr	r3, [r3, #0]
20002468:	2b00      	cmp	r3, #0
2000246a:	d109      	bne.n	20002480 <xTaskResumeAll+0x34>
2000246c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002470:	f383 8811 	msr	BASEPRI, r3
20002474:	f3bf 8f6f 	isb	sy
20002478:	f3bf 8f4f 	dsb	sy
2000247c:	60fb      	str	r3, [r7, #12]
2000247e:	e7fe      	b.n	2000247e <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20002480:	f001 ff8c 	bl	2000439c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
20002484:	f247 7308 	movw	r3, #30472	; 0x7708
20002488:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000248c:	681b      	ldr	r3, [r3, #0]
2000248e:	f103 32ff 	add.w	r2, r3, #4294967295
20002492:	f247 7308 	movw	r3, #30472	; 0x7708
20002496:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000249a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000249c:	f247 7308 	movw	r3, #30472	; 0x7708
200024a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024a4:	681b      	ldr	r3, [r3, #0]
200024a6:	2b00      	cmp	r3, #0
200024a8:	f040 8098 	bne.w	200025dc <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
200024ac:	f247 63e0 	movw	r3, #30432	; 0x76e0
200024b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024b4:	681b      	ldr	r3, [r3, #0]
200024b6:	2b00      	cmp	r3, #0
200024b8:	f000 8090 	beq.w	200025dc <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200024bc:	e04a      	b.n	20002554 <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
200024be:	f247 63a0 	movw	r3, #30368	; 0x76a0
200024c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024c6:	68db      	ldr	r3, [r3, #12]
200024c8:	68db      	ldr	r3, [r3, #12]
200024ca:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
200024cc:	683b      	ldr	r3, [r7, #0]
200024ce:	f103 0318 	add.w	r3, r3, #24
200024d2:	4618      	mov	r0, r3
200024d4:	f7fe ff40 	bl	20001358 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200024d8:	683b      	ldr	r3, [r7, #0]
200024da:	f103 0304 	add.w	r3, r3, #4
200024de:	4618      	mov	r0, r3
200024e0:	f7fe ff3a 	bl	20001358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
200024e4:	683b      	ldr	r3, [r7, #0]
200024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200024e8:	f04f 0201 	mov.w	r2, #1
200024ec:	fa02 f203 	lsl.w	r2, r2, r3
200024f0:	f247 63e8 	movw	r3, #30440	; 0x76e8
200024f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200024f8:	681b      	ldr	r3, [r3, #0]
200024fa:	ea42 0203 	orr.w	r2, r2, r3
200024fe:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002502:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002506:	601a      	str	r2, [r3, #0]
20002508:	683b      	ldr	r3, [r7, #0]
2000250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000250c:	4613      	mov	r3, r2
2000250e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002512:	4413      	add	r3, r2
20002514:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002518:	461a      	mov	r2, r3
2000251a:	f247 630c 	movw	r3, #30220	; 0x760c
2000251e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002522:	441a      	add	r2, r3
20002524:	683b      	ldr	r3, [r7, #0]
20002526:	f103 0304 	add.w	r3, r3, #4
2000252a:	4610      	mov	r0, r2
2000252c:	4619      	mov	r1, r3
2000252e:	f7fe feb5 	bl	2000129c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002532:	683b      	ldr	r3, [r7, #0]
20002534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002536:	f247 6308 	movw	r3, #30216	; 0x7608
2000253a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000253e:	681b      	ldr	r3, [r3, #0]
20002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002542:	429a      	cmp	r2, r3
20002544:	d306      	bcc.n	20002554 <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
20002546:	f247 63f4 	movw	r3, #30452	; 0x76f4
2000254a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000254e:	f04f 0201 	mov.w	r2, #1
20002552:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002554:	f247 63a0 	movw	r3, #30368	; 0x76a0
20002558:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000255c:	681b      	ldr	r3, [r3, #0]
2000255e:	2b00      	cmp	r3, #0
20002560:	d1ad      	bne.n	200024be <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
20002562:	683b      	ldr	r3, [r7, #0]
20002564:	2b00      	cmp	r3, #0
20002566:	d001      	beq.n	2000256c <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
20002568:	f000 fc58 	bl	20002e1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2000256c:	f247 63f0 	movw	r3, #30448	; 0x76f0
20002570:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002574:	681b      	ldr	r3, [r3, #0]
20002576:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
20002578:	68bb      	ldr	r3, [r7, #8]
2000257a:	2b00      	cmp	r3, #0
2000257c:	d019      	beq.n	200025b2 <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
2000257e:	f000 f845 	bl	2000260c <xTaskIncrementTick>
20002582:	4603      	mov	r3, r0
20002584:	2b00      	cmp	r3, #0
20002586:	d006      	beq.n	20002596 <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
20002588:	f247 63f4 	movw	r3, #30452	; 0x76f4
2000258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002590:	f04f 0201 	mov.w	r2, #1
20002594:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
20002596:	68bb      	ldr	r3, [r7, #8]
20002598:	f103 33ff 	add.w	r3, r3, #4294967295
2000259c:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2000259e:	68bb      	ldr	r3, [r7, #8]
200025a0:	2b00      	cmp	r3, #0
200025a2:	d1ec      	bne.n	2000257e <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
200025a4:	f247 63f0 	movw	r3, #30448	; 0x76f0
200025a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025ac:	f04f 0200 	mov.w	r2, #0
200025b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
200025b2:	f247 63f4 	movw	r3, #30452	; 0x76f4
200025b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025ba:	681b      	ldr	r3, [r3, #0]
200025bc:	2b00      	cmp	r3, #0
200025be:	d00d      	beq.n	200025dc <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
200025c0:	f04f 0301 	mov.w	r3, #1
200025c4:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
200025c6:	f64e 5304 	movw	r3, #60676	; 0xed04
200025ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
200025ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200025d2:	601a      	str	r2, [r3, #0]
200025d4:	f3bf 8f4f 	dsb	sy
200025d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
200025dc:	f001 ff16 	bl	2000440c <vPortExitCritical>

	return xAlreadyYielded;
200025e0:	687b      	ldr	r3, [r7, #4]
}
200025e2:	4618      	mov	r0, r3
200025e4:	f107 0710 	add.w	r7, r7, #16
200025e8:	46bd      	mov	sp, r7
200025ea:	bd80      	pop	{r7, pc}

200025ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
200025ec:	b480      	push	{r7}
200025ee:	b083      	sub	sp, #12
200025f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
200025f2:	f247 63e4 	movw	r3, #30436	; 0x76e4
200025f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025fa:	681b      	ldr	r3, [r3, #0]
200025fc:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
200025fe:	687b      	ldr	r3, [r7, #4]
}
20002600:	4618      	mov	r0, r3
20002602:	f107 070c 	add.w	r7, r7, #12
20002606:	46bd      	mov	sp, r7
20002608:	bc80      	pop	{r7}
2000260a:	4770      	bx	lr

2000260c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
2000260c:	b580      	push	{r7, lr}
2000260e:	b086      	sub	sp, #24
20002610:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
20002612:	f04f 0300 	mov.w	r3, #0
20002616:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002618:	f247 7308 	movw	r3, #30472	; 0x7708
2000261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002620:	681b      	ldr	r3, [r3, #0]
20002622:	2b00      	cmp	r3, #0
20002624:	f040 80dc 	bne.w	200027e0 <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
20002628:	f247 63e4 	movw	r3, #30436	; 0x76e4
2000262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002630:	681b      	ldr	r3, [r3, #0]
20002632:	f103 0301 	add.w	r3, r3, #1
20002636:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
20002638:	f247 63e4 	movw	r3, #30436	; 0x76e4
2000263c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002640:	68fa      	ldr	r2, [r7, #12]
20002642:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
20002644:	68fb      	ldr	r3, [r7, #12]
20002646:	2b00      	cmp	r3, #0
20002648:	d135      	bne.n	200026b6 <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
2000264a:	f247 6398 	movw	r3, #30360	; 0x7698
2000264e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002652:	681b      	ldr	r3, [r3, #0]
20002654:	681b      	ldr	r3, [r3, #0]
20002656:	2b00      	cmp	r3, #0
20002658:	d009      	beq.n	2000266e <xTaskIncrementTick+0x62>
2000265a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000265e:	f383 8811 	msr	BASEPRI, r3
20002662:	f3bf 8f6f 	isb	sy
20002666:	f3bf 8f4f 	dsb	sy
2000266a:	617b      	str	r3, [r7, #20]
2000266c:	e7fe      	b.n	2000266c <xTaskIncrementTick+0x60>
2000266e:	f247 6398 	movw	r3, #30360	; 0x7698
20002672:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002676:	681b      	ldr	r3, [r3, #0]
20002678:	613b      	str	r3, [r7, #16]
2000267a:	f247 639c 	movw	r3, #30364	; 0x769c
2000267e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002682:	681a      	ldr	r2, [r3, #0]
20002684:	f247 6398 	movw	r3, #30360	; 0x7698
20002688:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000268c:	601a      	str	r2, [r3, #0]
2000268e:	f247 639c 	movw	r3, #30364	; 0x769c
20002692:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002696:	693a      	ldr	r2, [r7, #16]
20002698:	601a      	str	r2, [r3, #0]
2000269a:	f247 63f8 	movw	r3, #30456	; 0x76f8
2000269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026a2:	681b      	ldr	r3, [r3, #0]
200026a4:	f103 0201 	add.w	r2, r3, #1
200026a8:	f247 63f8 	movw	r3, #30456	; 0x76f8
200026ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026b0:	601a      	str	r2, [r3, #0]
200026b2:	f000 fbb3 	bl	20002e1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
200026b6:	f247 7300 	movw	r3, #30464	; 0x7700
200026ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026be:	681b      	ldr	r3, [r3, #0]
200026c0:	68fa      	ldr	r2, [r7, #12]
200026c2:	429a      	cmp	r2, r3
200026c4:	d373      	bcc.n	200027ae <xTaskIncrementTick+0x1a2>
200026c6:	e000      	b.n	200026ca <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
200026c8:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
200026ca:	f247 6398 	movw	r3, #30360	; 0x7698
200026ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026d2:	681b      	ldr	r3, [r3, #0]
200026d4:	681b      	ldr	r3, [r3, #0]
200026d6:	2b00      	cmp	r3, #0
200026d8:	d102      	bne.n	200026e0 <xTaskIncrementTick+0xd4>
200026da:	f04f 0301 	mov.w	r3, #1
200026de:	e001      	b.n	200026e4 <xTaskIncrementTick+0xd8>
200026e0:	f04f 0300 	mov.w	r3, #0
200026e4:	2b00      	cmp	r3, #0
200026e6:	d007      	beq.n	200026f8 <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200026e8:	f247 7300 	movw	r3, #30464	; 0x7700
200026ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026f0:	f04f 32ff 	mov.w	r2, #4294967295
200026f4:	601a      	str	r2, [r3, #0]
					break;
200026f6:	e05a      	b.n	200027ae <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
200026f8:	f247 6398 	movw	r3, #30360	; 0x7698
200026fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002700:	681b      	ldr	r3, [r3, #0]
20002702:	68db      	ldr	r3, [r3, #12]
20002704:	68db      	ldr	r3, [r3, #12]
20002706:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
20002708:	683b      	ldr	r3, [r7, #0]
2000270a:	685b      	ldr	r3, [r3, #4]
2000270c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
2000270e:	68fa      	ldr	r2, [r7, #12]
20002710:	687b      	ldr	r3, [r7, #4]
20002712:	429a      	cmp	r2, r3
20002714:	d206      	bcs.n	20002724 <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
20002716:	f247 7300 	movw	r3, #30464	; 0x7700
2000271a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000271e:	687a      	ldr	r2, [r7, #4]
20002720:	601a      	str	r2, [r3, #0]
						break;
20002722:	e044      	b.n	200027ae <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002724:	683b      	ldr	r3, [r7, #0]
20002726:	f103 0304 	add.w	r3, r3, #4
2000272a:	4618      	mov	r0, r3
2000272c:	f7fe fe14 	bl	20001358 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20002730:	683b      	ldr	r3, [r7, #0]
20002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002734:	2b00      	cmp	r3, #0
20002736:	d005      	beq.n	20002744 <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002738:	683b      	ldr	r3, [r7, #0]
2000273a:	f103 0318 	add.w	r3, r3, #24
2000273e:	4618      	mov	r0, r3
20002740:	f7fe fe0a 	bl	20001358 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
20002744:	683b      	ldr	r3, [r7, #0]
20002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002748:	f04f 0201 	mov.w	r2, #1
2000274c:	fa02 f203 	lsl.w	r2, r2, r3
20002750:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002754:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002758:	681b      	ldr	r3, [r3, #0]
2000275a:	ea42 0203 	orr.w	r2, r2, r3
2000275e:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002762:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002766:	601a      	str	r2, [r3, #0]
20002768:	683b      	ldr	r3, [r7, #0]
2000276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000276c:	4613      	mov	r3, r2
2000276e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002772:	4413      	add	r3, r2
20002774:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002778:	461a      	mov	r2, r3
2000277a:	f247 630c 	movw	r3, #30220	; 0x760c
2000277e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002782:	441a      	add	r2, r3
20002784:	683b      	ldr	r3, [r7, #0]
20002786:	f103 0304 	add.w	r3, r3, #4
2000278a:	4610      	mov	r0, r2
2000278c:	4619      	mov	r1, r3
2000278e:	f7fe fd85 	bl	2000129c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002792:	683b      	ldr	r3, [r7, #0]
20002794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002796:	f247 6308 	movw	r3, #30216	; 0x7608
2000279a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000279e:	681b      	ldr	r3, [r3, #0]
200027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200027a2:	429a      	cmp	r2, r3
200027a4:	d390      	bcc.n	200026c8 <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
200027a6:	f04f 0301 	mov.w	r3, #1
200027aa:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
200027ac:	e78d      	b.n	200026ca <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
200027ae:	f247 6308 	movw	r3, #30216	; 0x7608
200027b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027b6:	681b      	ldr	r3, [r3, #0]
200027b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200027ba:	4613      	mov	r3, r2
200027bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
200027c0:	4413      	add	r3, r2
200027c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
200027c6:	461a      	mov	r2, r3
200027c8:	f247 630c 	movw	r3, #30220	; 0x760c
200027cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027d0:	4413      	add	r3, r2
200027d2:	681b      	ldr	r3, [r3, #0]
200027d4:	2b01      	cmp	r3, #1
200027d6:	d910      	bls.n	200027fa <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
200027d8:	f04f 0301 	mov.w	r3, #1
200027dc:	60bb      	str	r3, [r7, #8]
200027de:	e00d      	b.n	200027fc <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
200027e0:	f247 63f0 	movw	r3, #30448	; 0x76f0
200027e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027e8:	681b      	ldr	r3, [r3, #0]
200027ea:	f103 0201 	add.w	r2, r3, #1
200027ee:	f247 63f0 	movw	r3, #30448	; 0x76f0
200027f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200027f6:	601a      	str	r2, [r3, #0]
200027f8:	e000      	b.n	200027fc <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
200027fa:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
200027fc:	f247 63f4 	movw	r3, #30452	; 0x76f4
20002800:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002804:	681b      	ldr	r3, [r3, #0]
20002806:	2b00      	cmp	r3, #0
20002808:	d002      	beq.n	20002810 <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
2000280a:	f04f 0301 	mov.w	r3, #1
2000280e:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
20002810:	68bb      	ldr	r3, [r7, #8]
}
20002812:	4618      	mov	r0, r3
20002814:	f107 0718 	add.w	r7, r7, #24
20002818:	46bd      	mov	sp, r7
2000281a:	bd80      	pop	{r7, pc}

2000281c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
2000281c:	b580      	push	{r7, lr}
2000281e:	b088      	sub	sp, #32
20002820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
20002822:	f247 7308 	movw	r3, #30472	; 0x7708
20002826:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000282a:	681b      	ldr	r3, [r3, #0]
2000282c:	2b00      	cmp	r3, #0
2000282e:	d007      	beq.n	20002840 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
20002830:	f247 63f4 	movw	r3, #30452	; 0x76f4
20002834:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002838:	f04f 0201 	mov.w	r2, #1
2000283c:	601a      	str	r2, [r3, #0]
2000283e:	e0bc      	b.n	200029ba <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
20002840:	f247 63f4 	movw	r3, #30452	; 0x76f4
20002844:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002848:	f04f 0200 	mov.w	r2, #0
2000284c:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2000284e:	f7fd fd8b 	bl	20000368 <ulGetRunTimeCounterValue>
20002852:	4602      	mov	r2, r0
20002854:	f247 7310 	movw	r3, #30480	; 0x7710
20002858:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000285c:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
2000285e:	f247 7310 	movw	r3, #30480	; 0x7710
20002862:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002866:	681a      	ldr	r2, [r3, #0]
20002868:	f247 730c 	movw	r3, #30476	; 0x770c
2000286c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002870:	681b      	ldr	r3, [r3, #0]
20002872:	429a      	cmp	r2, r3
20002874:	d913      	bls.n	2000289e <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
20002876:	f247 6308 	movw	r3, #30216	; 0x7608
2000287a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000287e:	681a      	ldr	r2, [r3, #0]
20002880:	6d11      	ldr	r1, [r2, #80]	; 0x50
20002882:	f247 7310 	movw	r3, #30480	; 0x7710
20002886:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000288a:	6818      	ldr	r0, [r3, #0]
2000288c:	f247 730c 	movw	r3, #30476	; 0x770c
20002890:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002894:	681b      	ldr	r3, [r3, #0]
20002896:	ebc3 0300 	rsb	r3, r3, r0
2000289a:	440b      	add	r3, r1
2000289c:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
2000289e:	f247 7310 	movw	r3, #30480	; 0x7710
200028a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028a6:	681a      	ldr	r2, [r3, #0]
200028a8:	f247 730c 	movw	r3, #30476	; 0x770c
200028ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
200028b2:	f247 6308 	movw	r3, #30216	; 0x7608
200028b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200028ba:	681b      	ldr	r3, [r3, #0]
200028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200028be:	607b      	str	r3, [r7, #4]
200028c0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
200028c4:	60bb      	str	r3, [r7, #8]
200028c6:	687b      	ldr	r3, [r7, #4]
200028c8:	681a      	ldr	r2, [r3, #0]
200028ca:	68bb      	ldr	r3, [r7, #8]
200028cc:	429a      	cmp	r2, r3
200028ce:	d114      	bne.n	200028fa <vTaskSwitchContext+0xde>
200028d0:	687b      	ldr	r3, [r7, #4]
200028d2:	f103 0304 	add.w	r3, r3, #4
200028d6:	681a      	ldr	r2, [r3, #0]
200028d8:	68bb      	ldr	r3, [r7, #8]
200028da:	429a      	cmp	r2, r3
200028dc:	d10d      	bne.n	200028fa <vTaskSwitchContext+0xde>
200028de:	687b      	ldr	r3, [r7, #4]
200028e0:	f103 0308 	add.w	r3, r3, #8
200028e4:	681a      	ldr	r2, [r3, #0]
200028e6:	68bb      	ldr	r3, [r7, #8]
200028e8:	429a      	cmp	r2, r3
200028ea:	d106      	bne.n	200028fa <vTaskSwitchContext+0xde>
200028ec:	687b      	ldr	r3, [r7, #4]
200028ee:	f103 030c 	add.w	r3, r3, #12
200028f2:	681a      	ldr	r2, [r3, #0]
200028f4:	68bb      	ldr	r3, [r7, #8]
200028f6:	429a      	cmp	r2, r3
200028f8:	d00f      	beq.n	2000291a <vTaskSwitchContext+0xfe>
200028fa:	f247 6308 	movw	r3, #30216	; 0x7608
200028fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002902:	681a      	ldr	r2, [r3, #0]
20002904:	f247 6308 	movw	r3, #30216	; 0x7608
20002908:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000290c:	681b      	ldr	r3, [r3, #0]
2000290e:	f103 0334 	add.w	r3, r3, #52	; 0x34
20002912:	4610      	mov	r0, r2
20002914:	4619      	mov	r1, r3
20002916:	f7fd fd95 	bl	20000444 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
2000291a:	f247 63e8 	movw	r3, #30440	; 0x76e8
2000291e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002922:	681b      	ldr	r3, [r3, #0]
20002924:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
20002926:	697b      	ldr	r3, [r7, #20]
20002928:	fab3 f383 	clz	r3, r3
2000292c:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
2000292e:	7efb      	ldrb	r3, [r7, #27]
20002930:	f1c3 031f 	rsb	r3, r3, #31
20002934:	60fb      	str	r3, [r7, #12]
20002936:	68fa      	ldr	r2, [r7, #12]
20002938:	4613      	mov	r3, r2
2000293a:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000293e:	4413      	add	r3, r2
20002940:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002944:	461a      	mov	r2, r3
20002946:	f247 630c 	movw	r3, #30220	; 0x760c
2000294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000294e:	4413      	add	r3, r2
20002950:	681b      	ldr	r3, [r3, #0]
20002952:	2b00      	cmp	r3, #0
20002954:	d109      	bne.n	2000296a <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20002956:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000295a:	f383 8811 	msr	BASEPRI, r3
2000295e:	f3bf 8f6f 	isb	sy
20002962:	f3bf 8f4f 	dsb	sy
20002966:	61fb      	str	r3, [r7, #28]
20002968:	e7fe      	b.n	20002968 <vTaskSwitchContext+0x14c>
2000296a:	68fa      	ldr	r2, [r7, #12]
2000296c:	4613      	mov	r3, r2
2000296e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002972:	4413      	add	r3, r2
20002974:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002978:	461a      	mov	r2, r3
2000297a:	f247 630c 	movw	r3, #30220	; 0x760c
2000297e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002982:	4413      	add	r3, r2
20002984:	613b      	str	r3, [r7, #16]
20002986:	693b      	ldr	r3, [r7, #16]
20002988:	685b      	ldr	r3, [r3, #4]
2000298a:	685a      	ldr	r2, [r3, #4]
2000298c:	693b      	ldr	r3, [r7, #16]
2000298e:	605a      	str	r2, [r3, #4]
20002990:	693b      	ldr	r3, [r7, #16]
20002992:	685a      	ldr	r2, [r3, #4]
20002994:	693b      	ldr	r3, [r7, #16]
20002996:	f103 0308 	add.w	r3, r3, #8
2000299a:	429a      	cmp	r2, r3
2000299c:	d104      	bne.n	200029a8 <vTaskSwitchContext+0x18c>
2000299e:	693b      	ldr	r3, [r7, #16]
200029a0:	685b      	ldr	r3, [r3, #4]
200029a2:	685a      	ldr	r2, [r3, #4]
200029a4:	693b      	ldr	r3, [r7, #16]
200029a6:	605a      	str	r2, [r3, #4]
200029a8:	693b      	ldr	r3, [r7, #16]
200029aa:	685b      	ldr	r3, [r3, #4]
200029ac:	68db      	ldr	r3, [r3, #12]
200029ae:	461a      	mov	r2, r3
200029b0:	f247 6308 	movw	r3, #30216	; 0x7608
200029b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029b8:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
200029ba:	f107 0720 	add.w	r7, r7, #32
200029be:	46bd      	mov	sp, r7
200029c0:	bd80      	pop	{r7, pc}
200029c2:	bf00      	nop

200029c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
200029c4:	b580      	push	{r7, lr}
200029c6:	b084      	sub	sp, #16
200029c8:	af00      	add	r7, sp, #0
200029ca:	6078      	str	r0, [r7, #4]
200029cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
200029ce:	687b      	ldr	r3, [r7, #4]
200029d0:	2b00      	cmp	r3, #0
200029d2:	d109      	bne.n	200029e8 <vTaskPlaceOnEventList+0x24>
200029d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200029d8:	f383 8811 	msr	BASEPRI, r3
200029dc:	f3bf 8f6f 	isb	sy
200029e0:	f3bf 8f4f 	dsb	sy
200029e4:	60fb      	str	r3, [r7, #12]
200029e6:	e7fe      	b.n	200029e6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
200029e8:	f247 6308 	movw	r3, #30216	; 0x7608
200029ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200029f0:	681b      	ldr	r3, [r3, #0]
200029f2:	f103 0318 	add.w	r3, r3, #24
200029f6:	6878      	ldr	r0, [r7, #4]
200029f8:	4619      	mov	r1, r3
200029fa:	f7fe fc73 	bl	200012e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
200029fe:	6838      	ldr	r0, [r7, #0]
20002a00:	f04f 0101 	mov.w	r1, #1
20002a04:	f000 fd42 	bl	2000348c <prvAddCurrentTaskToDelayedList>
}
20002a08:	f107 0710 	add.w	r7, r7, #16
20002a0c:	46bd      	mov	sp, r7
20002a0e:	bd80      	pop	{r7, pc}

20002a10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002a10:	b580      	push	{r7, lr}
20002a12:	b086      	sub	sp, #24
20002a14:	af00      	add	r7, sp, #0
20002a16:	60f8      	str	r0, [r7, #12]
20002a18:	60b9      	str	r1, [r7, #8]
20002a1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002a1c:	68fb      	ldr	r3, [r7, #12]
20002a1e:	2b00      	cmp	r3, #0
20002a20:	d109      	bne.n	20002a36 <vTaskPlaceOnEventListRestricted+0x26>
20002a22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002a26:	f383 8811 	msr	BASEPRI, r3
20002a2a:	f3bf 8f6f 	isb	sy
20002a2e:	f3bf 8f4f 	dsb	sy
20002a32:	617b      	str	r3, [r7, #20]
20002a34:	e7fe      	b.n	20002a34 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002a36:	f247 6308 	movw	r3, #30216	; 0x7608
20002a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002a3e:	681b      	ldr	r3, [r3, #0]
20002a40:	f103 0318 	add.w	r3, r3, #24
20002a44:	68f8      	ldr	r0, [r7, #12]
20002a46:	4619      	mov	r1, r3
20002a48:	f7fe fc28 	bl	2000129c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
20002a4c:	687b      	ldr	r3, [r7, #4]
20002a4e:	2b00      	cmp	r3, #0
20002a50:	d002      	beq.n	20002a58 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
20002a52:	f04f 33ff 	mov.w	r3, #4294967295
20002a56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
20002a58:	68b8      	ldr	r0, [r7, #8]
20002a5a:	6879      	ldr	r1, [r7, #4]
20002a5c:	f000 fd16 	bl	2000348c <prvAddCurrentTaskToDelayedList>
	}
20002a60:	f107 0718 	add.w	r7, r7, #24
20002a64:	46bd      	mov	sp, r7
20002a66:	bd80      	pop	{r7, pc}

20002a68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002a68:	b580      	push	{r7, lr}
20002a6a:	b086      	sub	sp, #24
20002a6c:	af00      	add	r7, sp, #0
20002a6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
20002a70:	687b      	ldr	r3, [r7, #4]
20002a72:	68db      	ldr	r3, [r3, #12]
20002a74:	68db      	ldr	r3, [r3, #12]
20002a76:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
20002a78:	68fb      	ldr	r3, [r7, #12]
20002a7a:	2b00      	cmp	r3, #0
20002a7c:	d109      	bne.n	20002a92 <xTaskRemoveFromEventList+0x2a>
20002a7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002a82:	f383 8811 	msr	BASEPRI, r3
20002a86:	f3bf 8f6f 	isb	sy
20002a8a:	f3bf 8f4f 	dsb	sy
20002a8e:	617b      	str	r3, [r7, #20]
20002a90:	e7fe      	b.n	20002a90 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002a92:	68fb      	ldr	r3, [r7, #12]
20002a94:	f103 0318 	add.w	r3, r3, #24
20002a98:	4618      	mov	r0, r3
20002a9a:	f7fe fc5d 	bl	20001358 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002a9e:	f247 7308 	movw	r3, #30472	; 0x7708
20002aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002aa6:	681b      	ldr	r3, [r3, #0]
20002aa8:	2b00      	cmp	r3, #0
20002aaa:	d12d      	bne.n	20002b08 <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002aac:	68fb      	ldr	r3, [r7, #12]
20002aae:	f103 0304 	add.w	r3, r3, #4
20002ab2:	4618      	mov	r0, r3
20002ab4:	f7fe fc50 	bl	20001358 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002ab8:	68fb      	ldr	r3, [r7, #12]
20002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002abc:	f04f 0201 	mov.w	r2, #1
20002ac0:	fa02 f203 	lsl.w	r2, r2, r3
20002ac4:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002acc:	681b      	ldr	r3, [r3, #0]
20002ace:	ea42 0203 	orr.w	r2, r2, r3
20002ad2:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ada:	601a      	str	r2, [r3, #0]
20002adc:	68fb      	ldr	r3, [r7, #12]
20002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002ae0:	4613      	mov	r3, r2
20002ae2:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002ae6:	4413      	add	r3, r2
20002ae8:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002aec:	461a      	mov	r2, r3
20002aee:	f247 630c 	movw	r3, #30220	; 0x760c
20002af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002af6:	441a      	add	r2, r3
20002af8:	68fb      	ldr	r3, [r7, #12]
20002afa:	f103 0304 	add.w	r3, r3, #4
20002afe:	4610      	mov	r0, r2
20002b00:	4619      	mov	r1, r3
20002b02:	f7fe fbcb 	bl	2000129c <vListInsertEnd>
20002b06:	e009      	b.n	20002b1c <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002b08:	68fb      	ldr	r3, [r7, #12]
20002b0a:	f103 0318 	add.w	r3, r3, #24
20002b0e:	f247 60a0 	movw	r0, #30368	; 0x76a0
20002b12:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002b16:	4619      	mov	r1, r3
20002b18:	f7fe fbc0 	bl	2000129c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002b1c:	68fb      	ldr	r3, [r7, #12]
20002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b20:	f247 6308 	movw	r3, #30216	; 0x7608
20002b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b28:	681b      	ldr	r3, [r3, #0]
20002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002b2c:	429a      	cmp	r2, r3
20002b2e:	d90a      	bls.n	20002b46 <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002b30:	f04f 0301 	mov.w	r3, #1
20002b34:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002b36:	f247 63f4 	movw	r3, #30452	; 0x76f4
20002b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b3e:	f04f 0201 	mov.w	r2, #1
20002b42:	601a      	str	r2, [r3, #0]
20002b44:	e002      	b.n	20002b4c <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
20002b46:	f04f 0300 	mov.w	r3, #0
20002b4a:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
20002b4c:	693b      	ldr	r3, [r7, #16]
}
20002b4e:	4618      	mov	r0, r3
20002b50:	f107 0718 	add.w	r7, r7, #24
20002b54:	46bd      	mov	sp, r7
20002b56:	bd80      	pop	{r7, pc}

20002b58 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002b58:	b480      	push	{r7}
20002b5a:	b085      	sub	sp, #20
20002b5c:	af00      	add	r7, sp, #0
20002b5e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
20002b60:	687b      	ldr	r3, [r7, #4]
20002b62:	2b00      	cmp	r3, #0
20002b64:	d109      	bne.n	20002b7a <vTaskSetTimeOutState+0x22>
20002b66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002b6a:	f383 8811 	msr	BASEPRI, r3
20002b6e:	f3bf 8f6f 	isb	sy
20002b72:	f3bf 8f4f 	dsb	sy
20002b76:	60fb      	str	r3, [r7, #12]
20002b78:	e7fe      	b.n	20002b78 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002b7a:	f247 63f8 	movw	r3, #30456	; 0x76f8
20002b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b82:	681a      	ldr	r2, [r3, #0]
20002b84:	687b      	ldr	r3, [r7, #4]
20002b86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002b88:	f247 63e4 	movw	r3, #30436	; 0x76e4
20002b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002b90:	681a      	ldr	r2, [r3, #0]
20002b92:	687b      	ldr	r3, [r7, #4]
20002b94:	605a      	str	r2, [r3, #4]
}
20002b96:	f107 0714 	add.w	r7, r7, #20
20002b9a:	46bd      	mov	sp, r7
20002b9c:	bc80      	pop	{r7}
20002b9e:	4770      	bx	lr

20002ba0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002ba0:	b580      	push	{r7, lr}
20002ba2:	b086      	sub	sp, #24
20002ba4:	af00      	add	r7, sp, #0
20002ba6:	6078      	str	r0, [r7, #4]
20002ba8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002baa:	687b      	ldr	r3, [r7, #4]
20002bac:	2b00      	cmp	r3, #0
20002bae:	d109      	bne.n	20002bc4 <xTaskCheckForTimeOut+0x24>
20002bb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002bb4:	f383 8811 	msr	BASEPRI, r3
20002bb8:	f3bf 8f6f 	isb	sy
20002bbc:	f3bf 8f4f 	dsb	sy
20002bc0:	613b      	str	r3, [r7, #16]
20002bc2:	e7fe      	b.n	20002bc2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
20002bc4:	683b      	ldr	r3, [r7, #0]
20002bc6:	2b00      	cmp	r3, #0
20002bc8:	d109      	bne.n	20002bde <xTaskCheckForTimeOut+0x3e>
20002bca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20002bce:	f383 8811 	msr	BASEPRI, r3
20002bd2:	f3bf 8f6f 	isb	sy
20002bd6:	f3bf 8f4f 	dsb	sy
20002bda:	617b      	str	r3, [r7, #20]
20002bdc:	e7fe      	b.n	20002bdc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
20002bde:	f001 fbdd 	bl	2000439c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002be2:	f247 63e4 	movw	r3, #30436	; 0x76e4
20002be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002bea:	681b      	ldr	r3, [r3, #0]
20002bec:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002bee:	683b      	ldr	r3, [r7, #0]
20002bf0:	681b      	ldr	r3, [r3, #0]
20002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
20002bf6:	d103      	bne.n	20002c00 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002bf8:	f04f 0300 	mov.w	r3, #0
20002bfc:	60bb      	str	r3, [r7, #8]
20002bfe:	e02e      	b.n	20002c5e <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002c00:	687b      	ldr	r3, [r7, #4]
20002c02:	681a      	ldr	r2, [r3, #0]
20002c04:	f247 63f8 	movw	r3, #30456	; 0x76f8
20002c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c0c:	681b      	ldr	r3, [r3, #0]
20002c0e:	429a      	cmp	r2, r3
20002c10:	d008      	beq.n	20002c24 <xTaskCheckForTimeOut+0x84>
20002c12:	687b      	ldr	r3, [r7, #4]
20002c14:	685a      	ldr	r2, [r3, #4]
20002c16:	68fb      	ldr	r3, [r7, #12]
20002c18:	429a      	cmp	r2, r3
20002c1a:	d803      	bhi.n	20002c24 <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002c1c:	f04f 0301 	mov.w	r3, #1
20002c20:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002c22:	e01c      	b.n	20002c5e <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002c24:	687b      	ldr	r3, [r7, #4]
20002c26:	685b      	ldr	r3, [r3, #4]
20002c28:	68fa      	ldr	r2, [r7, #12]
20002c2a:	ebc3 0202 	rsb	r2, r3, r2
20002c2e:	683b      	ldr	r3, [r7, #0]
20002c30:	681b      	ldr	r3, [r3, #0]
20002c32:	429a      	cmp	r2, r3
20002c34:	d210      	bcs.n	20002c58 <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
20002c36:	683b      	ldr	r3, [r7, #0]
20002c38:	681a      	ldr	r2, [r3, #0]
20002c3a:	687b      	ldr	r3, [r7, #4]
20002c3c:	6859      	ldr	r1, [r3, #4]
20002c3e:	68fb      	ldr	r3, [r7, #12]
20002c40:	ebc3 0301 	rsb	r3, r3, r1
20002c44:	441a      	add	r2, r3
20002c46:	683b      	ldr	r3, [r7, #0]
20002c48:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
20002c4a:	6878      	ldr	r0, [r7, #4]
20002c4c:	f7ff ff84 	bl	20002b58 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
20002c50:	f04f 0300 	mov.w	r3, #0
20002c54:	60bb      	str	r3, [r7, #8]
20002c56:	e002      	b.n	20002c5e <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
20002c58:	f04f 0301 	mov.w	r3, #1
20002c5c:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
20002c5e:	f001 fbd5 	bl	2000440c <vPortExitCritical>

	return xReturn;
20002c62:	68bb      	ldr	r3, [r7, #8]
}
20002c64:	4618      	mov	r0, r3
20002c66:	f107 0718 	add.w	r7, r7, #24
20002c6a:	46bd      	mov	sp, r7
20002c6c:	bd80      	pop	{r7, pc}
20002c6e:	bf00      	nop

20002c70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002c70:	b480      	push	{r7}
20002c72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
20002c74:	f247 63f4 	movw	r3, #30452	; 0x76f4
20002c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c7c:	f04f 0201 	mov.w	r2, #1
20002c80:	601a      	str	r2, [r3, #0]
}
20002c82:	46bd      	mov	sp, r7
20002c84:	bc80      	pop	{r7}
20002c86:	4770      	bx	lr

20002c88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002c88:	b580      	push	{r7, lr}
20002c8a:	b082      	sub	sp, #8
20002c8c:	af00      	add	r7, sp, #0
20002c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002c90:	f000 f868 	bl	20002d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
20002c94:	f247 630c 	movw	r3, #30220	; 0x760c
20002c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002c9c:	681b      	ldr	r3, [r3, #0]
20002c9e:	2b01      	cmp	r3, #1
20002ca0:	d90a      	bls.n	20002cb8 <prvIdleTask+0x30>
			{
				taskYIELD();
20002ca2:	f64e 5304 	movw	r3, #60676	; 0xed04
20002ca6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002cae:	601a      	str	r2, [r3, #0]
20002cb0:	f3bf 8f4f 	dsb	sy
20002cb4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
20002cb8:	f7fd fbbe 	bl	20000438 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
20002cbc:	e7e8      	b.n	20002c90 <prvIdleTask+0x8>
20002cbe:	bf00      	nop

20002cc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002cc0:	b580      	push	{r7, lr}
20002cc2:	b082      	sub	sp, #8
20002cc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002cc6:	f04f 0300 	mov.w	r3, #0
20002cca:	607b      	str	r3, [r7, #4]
20002ccc:	e013      	b.n	20002cf6 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002cce:	687a      	ldr	r2, [r7, #4]
20002cd0:	4613      	mov	r3, r2
20002cd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002cd6:	4413      	add	r3, r2
20002cd8:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002cdc:	461a      	mov	r2, r3
20002cde:	f247 630c 	movw	r3, #30220	; 0x760c
20002ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ce6:	4413      	add	r3, r2
20002ce8:	4618      	mov	r0, r3
20002cea:	f7fe faa5 	bl	20001238 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002cee:	687b      	ldr	r3, [r7, #4]
20002cf0:	f103 0301 	add.w	r3, r3, #1
20002cf4:	607b      	str	r3, [r7, #4]
20002cf6:	687b      	ldr	r3, [r7, #4]
20002cf8:	2b04      	cmp	r3, #4
20002cfa:	d9e8      	bls.n	20002cce <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
20002cfc:	f247 6070 	movw	r0, #30320	; 0x7670
20002d00:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d04:	f7fe fa98 	bl	20001238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002d08:	f247 6084 	movw	r0, #30340	; 0x7684
20002d0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d10:	f7fe fa92 	bl	20001238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002d14:	f247 60a0 	movw	r0, #30368	; 0x76a0
20002d18:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d1c:	f7fe fa8c 	bl	20001238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002d20:	f247 60b4 	movw	r0, #30388	; 0x76b4
20002d24:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d28:	f7fe fa86 	bl	20001238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002d2c:	f247 60cc 	movw	r0, #30412	; 0x76cc
20002d30:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002d34:	f7fe fa80 	bl	20001238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
20002d38:	f247 6398 	movw	r3, #30360	; 0x7698
20002d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d40:	f247 6270 	movw	r2, #30320	; 0x7670
20002d44:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002d48:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002d4a:	f247 639c 	movw	r3, #30364	; 0x769c
20002d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d52:	f247 6284 	movw	r2, #30340	; 0x7684
20002d56:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002d5a:	601a      	str	r2, [r3, #0]
}
20002d5c:	f107 0708 	add.w	r7, r7, #8
20002d60:	46bd      	mov	sp, r7
20002d62:	bd80      	pop	{r7, pc}

20002d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002d64:	b580      	push	{r7, lr}
20002d66:	b082      	sub	sp, #8
20002d68:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002d6a:	e03c      	b.n	20002de6 <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
20002d6c:	f7ff fb5c 	bl	20002428 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
20002d70:	f247 63b4 	movw	r3, #30388	; 0x76b4
20002d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d78:	681b      	ldr	r3, [r3, #0]
20002d7a:	2b00      	cmp	r3, #0
20002d7c:	bf14      	ite	ne
20002d7e:	2300      	movne	r3, #0
20002d80:	2301      	moveq	r3, #1
20002d82:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
20002d84:	f7ff fb62 	bl	2000244c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
20002d88:	683b      	ldr	r3, [r7, #0]
20002d8a:	2b00      	cmp	r3, #0
20002d8c:	d12b      	bne.n	20002de6 <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
20002d8e:	f001 fb05 	bl	2000439c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
20002d92:	f247 63b4 	movw	r3, #30388	; 0x76b4
20002d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002d9a:	68db      	ldr	r3, [r3, #12]
20002d9c:	68db      	ldr	r3, [r3, #12]
20002d9e:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002da0:	687b      	ldr	r3, [r7, #4]
20002da2:	f103 0304 	add.w	r3, r3, #4
20002da6:	4618      	mov	r0, r3
20002da8:	f7fe fad6 	bl	20001358 <uxListRemove>
					--uxCurrentNumberOfTasks;
20002dac:	f247 63e0 	movw	r3, #30432	; 0x76e0
20002db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002db4:	681b      	ldr	r3, [r3, #0]
20002db6:	f103 32ff 	add.w	r2, r3, #4294967295
20002dba:	f247 63e0 	movw	r3, #30432	; 0x76e0
20002dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dc2:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
20002dc4:	f247 63c8 	movw	r3, #30408	; 0x76c8
20002dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dcc:	681b      	ldr	r3, [r3, #0]
20002dce:	f103 32ff 	add.w	r2, r3, #4294967295
20002dd2:	f247 63c8 	movw	r3, #30408	; 0x76c8
20002dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dda:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
20002ddc:	f001 fb16 	bl	2000440c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
20002de0:	6878      	ldr	r0, [r7, #4]
20002de2:	f000 f80b 	bl	20002dfc <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002de6:	f247 63c8 	movw	r3, #30408	; 0x76c8
20002dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002dee:	681b      	ldr	r3, [r3, #0]
20002df0:	2b00      	cmp	r3, #0
20002df2:	d1bb      	bne.n	20002d6c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002df4:	f107 0708 	add.w	r7, r7, #8
20002df8:	46bd      	mov	sp, r7
20002dfa:	bd80      	pop	{r7, pc}

20002dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20002dfc:	b580      	push	{r7, lr}
20002dfe:	b082      	sub	sp, #8
20002e00:	af00      	add	r7, sp, #0
20002e02:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
20002e04:	687b      	ldr	r3, [r7, #4]
20002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002e08:	4618      	mov	r0, r3
20002e0a:	f001 f877 	bl	20003efc <vPortFree>
			vPortFree( pxTCB );
20002e0e:	6878      	ldr	r0, [r7, #4]
20002e10:	f001 f874 	bl	20003efc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20002e14:	f107 0708 	add.w	r7, r7, #8
20002e18:	46bd      	mov	sp, r7
20002e1a:	bd80      	pop	{r7, pc}

20002e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002e1c:	b480      	push	{r7}
20002e1e:	b083      	sub	sp, #12
20002e20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002e22:	f247 6398 	movw	r3, #30360	; 0x7698
20002e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e2a:	681b      	ldr	r3, [r3, #0]
20002e2c:	681b      	ldr	r3, [r3, #0]
20002e2e:	2b00      	cmp	r3, #0
20002e30:	d102      	bne.n	20002e38 <prvResetNextTaskUnblockTime+0x1c>
20002e32:	f04f 0301 	mov.w	r3, #1
20002e36:	e001      	b.n	20002e3c <prvResetNextTaskUnblockTime+0x20>
20002e38:	f04f 0300 	mov.w	r3, #0
20002e3c:	2b00      	cmp	r3, #0
20002e3e:	d007      	beq.n	20002e50 <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20002e40:	f247 7300 	movw	r3, #30464	; 0x7700
20002e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e48:	f04f 32ff 	mov.w	r2, #4294967295
20002e4c:	601a      	str	r2, [r3, #0]
20002e4e:	e00e      	b.n	20002e6e <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
20002e50:	f247 6398 	movw	r3, #30360	; 0x7698
20002e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e58:	681b      	ldr	r3, [r3, #0]
20002e5a:	68db      	ldr	r3, [r3, #12]
20002e5c:	68db      	ldr	r3, [r3, #12]
20002e5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
20002e60:	687b      	ldr	r3, [r7, #4]
20002e62:	685a      	ldr	r2, [r3, #4]
20002e64:	f247 7300 	movw	r3, #30464	; 0x7700
20002e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e6c:	601a      	str	r2, [r3, #0]
	}
}
20002e6e:	f107 070c 	add.w	r7, r7, #12
20002e72:	46bd      	mov	sp, r7
20002e74:	bc80      	pop	{r7}
20002e76:	4770      	bx	lr

20002e78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20002e78:	b480      	push	{r7}
20002e7a:	b083      	sub	sp, #12
20002e7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
20002e7e:	f247 63ec 	movw	r3, #30444	; 0x76ec
20002e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e86:	681b      	ldr	r3, [r3, #0]
20002e88:	2b00      	cmp	r3, #0
20002e8a:	d103      	bne.n	20002e94 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
20002e8c:	f04f 0301 	mov.w	r3, #1
20002e90:	607b      	str	r3, [r7, #4]
20002e92:	e00d      	b.n	20002eb0 <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002e94:	f247 7308 	movw	r3, #30472	; 0x7708
20002e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002e9c:	681b      	ldr	r3, [r3, #0]
20002e9e:	2b00      	cmp	r3, #0
20002ea0:	d103      	bne.n	20002eaa <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
20002ea2:	f04f 0302 	mov.w	r3, #2
20002ea6:	607b      	str	r3, [r7, #4]
20002ea8:	e002      	b.n	20002eb0 <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20002eaa:	f04f 0300 	mov.w	r3, #0
20002eae:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
20002eb0:	687b      	ldr	r3, [r7, #4]
	}
20002eb2:	4618      	mov	r0, r3
20002eb4:	f107 070c 	add.w	r7, r7, #12
20002eb8:	46bd      	mov	sp, r7
20002eba:	bc80      	pop	{r7}
20002ebc:	4770      	bx	lr
20002ebe:	bf00      	nop

20002ec0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
20002ec0:	b580      	push	{r7, lr}
20002ec2:	b084      	sub	sp, #16
20002ec4:	af00      	add	r7, sp, #0
20002ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20002ec8:	687b      	ldr	r3, [r7, #4]
20002eca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
20002ecc:	687b      	ldr	r3, [r7, #4]
20002ece:	2b00      	cmp	r3, #0
20002ed0:	f000 8098 	beq.w	20003004 <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
20002ed4:	68fb      	ldr	r3, [r7, #12]
20002ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002ed8:	f247 6308 	movw	r3, #30216	; 0x7608
20002edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ee0:	681b      	ldr	r3, [r3, #0]
20002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002ee4:	429a      	cmp	r2, r3
20002ee6:	f080 808d 	bcs.w	20003004 <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20002eea:	68fb      	ldr	r3, [r7, #12]
20002eec:	699b      	ldr	r3, [r3, #24]
20002eee:	2b00      	cmp	r3, #0
20002ef0:	db09      	blt.n	20002f06 <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002ef2:	f247 6308 	movw	r3, #30216	; 0x7608
20002ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002efa:	681b      	ldr	r3, [r3, #0]
20002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002efe:	f1c3 0205 	rsb	r2, r3, #5
20002f02:	68fb      	ldr	r3, [r7, #12]
20002f04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20002f06:	68fb      	ldr	r3, [r7, #12]
20002f08:	6959      	ldr	r1, [r3, #20]
20002f0a:	68fb      	ldr	r3, [r7, #12]
20002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002f0e:	4613      	mov	r3, r2
20002f10:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f14:	4413      	add	r3, r2
20002f16:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f1a:	461a      	mov	r2, r3
20002f1c:	f247 630c 	movw	r3, #30220	; 0x760c
20002f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f24:	4413      	add	r3, r2
20002f26:	4299      	cmp	r1, r3
20002f28:	d102      	bne.n	20002f30 <vTaskPriorityInherit+0x70>
20002f2a:	f04f 0301 	mov.w	r3, #1
20002f2e:	e001      	b.n	20002f34 <vTaskPriorityInherit+0x74>
20002f30:	f04f 0300 	mov.w	r3, #0
20002f34:	2b00      	cmp	r3, #0
20002f36:	d05d      	beq.n	20002ff4 <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002f38:	68fb      	ldr	r3, [r7, #12]
20002f3a:	f103 0304 	add.w	r3, r3, #4
20002f3e:	4618      	mov	r0, r3
20002f40:	f7fe fa0a 	bl	20001358 <uxListRemove>
20002f44:	4603      	mov	r3, r0
20002f46:	2b00      	cmp	r3, #0
20002f48:	d124      	bne.n	20002f94 <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20002f4a:	68fb      	ldr	r3, [r7, #12]
20002f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002f4e:	4613      	mov	r3, r2
20002f50:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f54:	4413      	add	r3, r2
20002f56:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002f5a:	461a      	mov	r2, r3
20002f5c:	f247 630c 	movw	r3, #30220	; 0x760c
20002f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f64:	4413      	add	r3, r2
20002f66:	681b      	ldr	r3, [r3, #0]
20002f68:	2b00      	cmp	r3, #0
20002f6a:	d113      	bne.n	20002f94 <vTaskPriorityInherit+0xd4>
20002f6c:	68fb      	ldr	r3, [r7, #12]
20002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002f70:	f04f 0201 	mov.w	r2, #1
20002f74:	fa02 f303 	lsl.w	r3, r2, r3
20002f78:	ea6f 0203 	mvn.w	r2, r3
20002f7c:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f84:	681b      	ldr	r3, [r3, #0]
20002f86:	ea02 0203 	and.w	r2, r2, r3
20002f8a:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20002f94:	f247 6308 	movw	r3, #30216	; 0x7608
20002f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002f9c:	681b      	ldr	r3, [r3, #0]
20002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002fa0:	68fb      	ldr	r3, [r7, #12]
20002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
20002fa4:	68fb      	ldr	r3, [r7, #12]
20002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002fa8:	f04f 0201 	mov.w	r2, #1
20002fac:	fa02 f203 	lsl.w	r2, r2, r3
20002fb0:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fb8:	681b      	ldr	r3, [r3, #0]
20002fba:	ea42 0203 	orr.w	r2, r2, r3
20002fbe:	f247 63e8 	movw	r3, #30440	; 0x76e8
20002fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fc6:	601a      	str	r2, [r3, #0]
20002fc8:	68fb      	ldr	r3, [r7, #12]
20002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002fcc:	4613      	mov	r3, r2
20002fce:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002fd2:	4413      	add	r3, r2
20002fd4:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002fd8:	461a      	mov	r2, r3
20002fda:	f247 630c 	movw	r3, #30220	; 0x760c
20002fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002fe2:	441a      	add	r2, r3
20002fe4:	68fb      	ldr	r3, [r7, #12]
20002fe6:	f103 0304 	add.w	r3, r3, #4
20002fea:	4610      	mov	r0, r2
20002fec:	4619      	mov	r1, r3
20002fee:	f7fe f955 	bl	2000129c <vListInsertEnd>
20002ff2:	e007      	b.n	20003004 <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
20002ff4:	f247 6308 	movw	r3, #30216	; 0x7608
20002ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002ffc:	681b      	ldr	r3, [r3, #0]
20002ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003000:	68fb      	ldr	r3, [r7, #12]
20003002:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20003004:	f107 0710 	add.w	r7, r7, #16
20003008:	46bd      	mov	sp, r7
2000300a:	bd80      	pop	{r7, pc}

2000300c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
2000300c:	b580      	push	{r7, lr}
2000300e:	b086      	sub	sp, #24
20003010:	af00      	add	r7, sp, #0
20003012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
20003014:	687b      	ldr	r3, [r7, #4]
20003016:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
20003018:	f04f 0300 	mov.w	r3, #0
2000301c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
2000301e:	687b      	ldr	r3, [r7, #4]
20003020:	2b00      	cmp	r3, #0
20003022:	f000 8092 	beq.w	2000314a <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20003026:	f247 6308 	movw	r3, #30216	; 0x7608
2000302a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000302e:	681b      	ldr	r3, [r3, #0]
20003030:	68ba      	ldr	r2, [r7, #8]
20003032:	429a      	cmp	r2, r3
20003034:	d009      	beq.n	2000304a <xTaskPriorityDisinherit+0x3e>
20003036:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000303a:	f383 8811 	msr	BASEPRI, r3
2000303e:	f3bf 8f6f 	isb	sy
20003042:	f3bf 8f4f 	dsb	sy
20003046:	613b      	str	r3, [r7, #16]
20003048:	e7fe      	b.n	20003048 <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
2000304a:	68bb      	ldr	r3, [r7, #8]
2000304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000304e:	2b00      	cmp	r3, #0
20003050:	d109      	bne.n	20003066 <xTaskPriorityDisinherit+0x5a>
20003052:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003056:	f383 8811 	msr	BASEPRI, r3
2000305a:	f3bf 8f6f 	isb	sy
2000305e:	f3bf 8f4f 	dsb	sy
20003062:	617b      	str	r3, [r7, #20]
20003064:	e7fe      	b.n	20003064 <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
20003066:	68bb      	ldr	r3, [r7, #8]
20003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000306a:	f103 32ff 	add.w	r2, r3, #4294967295
2000306e:	68bb      	ldr	r3, [r7, #8]
20003070:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
20003072:	68bb      	ldr	r3, [r7, #8]
20003074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003076:	68bb      	ldr	r3, [r7, #8]
20003078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000307a:	429a      	cmp	r2, r3
2000307c:	d065      	beq.n	2000314a <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
2000307e:	68bb      	ldr	r3, [r7, #8]
20003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20003082:	2b00      	cmp	r3, #0
20003084:	d161      	bne.n	2000314a <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20003086:	68bb      	ldr	r3, [r7, #8]
20003088:	f103 0304 	add.w	r3, r3, #4
2000308c:	4618      	mov	r0, r3
2000308e:	f7fe f963 	bl	20001358 <uxListRemove>
20003092:	4603      	mov	r3, r0
20003094:	2b00      	cmp	r3, #0
20003096:	d124      	bne.n	200030e2 <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
20003098:	68bb      	ldr	r3, [r7, #8]
2000309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000309c:	4613      	mov	r3, r2
2000309e:	ea4f 0383 	mov.w	r3, r3, lsl #2
200030a2:	4413      	add	r3, r2
200030a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200030a8:	461a      	mov	r2, r3
200030aa:	f247 630c 	movw	r3, #30220	; 0x760c
200030ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030b2:	4413      	add	r3, r2
200030b4:	681b      	ldr	r3, [r3, #0]
200030b6:	2b00      	cmp	r3, #0
200030b8:	d113      	bne.n	200030e2 <xTaskPriorityDisinherit+0xd6>
200030ba:	68bb      	ldr	r3, [r7, #8]
200030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200030be:	f04f 0201 	mov.w	r2, #1
200030c2:	fa02 f303 	lsl.w	r3, r2, r3
200030c6:	ea6f 0203 	mvn.w	r2, r3
200030ca:	f247 63e8 	movw	r3, #30440	; 0x76e8
200030ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030d2:	681b      	ldr	r3, [r3, #0]
200030d4:	ea02 0203 	and.w	r2, r2, r3
200030d8:	f247 63e8 	movw	r3, #30440	; 0x76e8
200030dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200030e0:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
200030e2:	68bb      	ldr	r3, [r7, #8]
200030e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
200030e6:	68bb      	ldr	r3, [r7, #8]
200030e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200030ea:	68bb      	ldr	r3, [r7, #8]
200030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200030ee:	f1c3 0205 	rsb	r2, r3, #5
200030f2:	68bb      	ldr	r3, [r7, #8]
200030f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
200030f6:	68bb      	ldr	r3, [r7, #8]
200030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200030fa:	f04f 0201 	mov.w	r2, #1
200030fe:	fa02 f203 	lsl.w	r2, r2, r3
20003102:	f247 63e8 	movw	r3, #30440	; 0x76e8
20003106:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000310a:	681b      	ldr	r3, [r3, #0]
2000310c:	ea42 0203 	orr.w	r2, r2, r3
20003110:	f247 63e8 	movw	r3, #30440	; 0x76e8
20003114:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003118:	601a      	str	r2, [r3, #0]
2000311a:	68bb      	ldr	r3, [r7, #8]
2000311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000311e:	4613      	mov	r3, r2
20003120:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003124:	4413      	add	r3, r2
20003126:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000312a:	461a      	mov	r2, r3
2000312c:	f247 630c 	movw	r3, #30220	; 0x760c
20003130:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003134:	441a      	add	r2, r3
20003136:	68bb      	ldr	r3, [r7, #8]
20003138:	f103 0304 	add.w	r3, r3, #4
2000313c:	4610      	mov	r0, r2
2000313e:	4619      	mov	r1, r3
20003140:	f7fe f8ac 	bl	2000129c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20003144:	f04f 0301 	mov.w	r3, #1
20003148:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
2000314a:	68fb      	ldr	r3, [r7, #12]
	}
2000314c:	4618      	mov	r0, r3
2000314e:	f107 0718 	add.w	r7, r7, #24
20003152:	46bd      	mov	sp, r7
20003154:	bd80      	pop	{r7, pc}
20003156:	bf00      	nop

20003158 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
20003158:	b480      	push	{r7}
2000315a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
2000315c:	f247 6308 	movw	r3, #30216	; 0x7608
20003160:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003164:	681b      	ldr	r3, [r3, #0]
20003166:	2b00      	cmp	r3, #0
20003168:	d008      	beq.n	2000317c <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
2000316a:	f247 6308 	movw	r3, #30216	; 0x7608
2000316e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003172:	681b      	ldr	r3, [r3, #0]
20003174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20003176:	f102 0201 	add.w	r2, r2, #1
2000317a:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
2000317c:	f247 6308 	movw	r3, #30216	; 0x7608
20003180:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003184:	681b      	ldr	r3, [r3, #0]
	}
20003186:	4618      	mov	r0, r3
20003188:	46bd      	mov	sp, r7
2000318a:	bc80      	pop	{r7}
2000318c:	4770      	bx	lr
2000318e:	bf00      	nop

20003190 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
20003190:	b580      	push	{r7, lr}
20003192:	b084      	sub	sp, #16
20003194:	af00      	add	r7, sp, #0
20003196:	6078      	str	r0, [r7, #4]
20003198:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
2000319a:	f001 f8ff 	bl	2000439c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
2000319e:	f247 6308 	movw	r3, #30216	; 0x7608
200031a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031a6:	681b      	ldr	r3, [r3, #0]
200031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200031aa:	2b00      	cmp	r3, #0
200031ac:	d11b      	bne.n	200031e6 <ulTaskNotifyTake+0x56>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
200031ae:	f247 6308 	movw	r3, #30216	; 0x7608
200031b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031b6:	681b      	ldr	r3, [r3, #0]
200031b8:	f04f 0201 	mov.w	r2, #1
200031bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
200031c0:	683b      	ldr	r3, [r7, #0]
200031c2:	2b00      	cmp	r3, #0
200031c4:	d00f      	beq.n	200031e6 <ulTaskNotifyTake+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
200031c6:	6838      	ldr	r0, [r7, #0]
200031c8:	f04f 0101 	mov.w	r1, #1
200031cc:	f000 f95e 	bl	2000348c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
200031d0:	f64e 5304 	movw	r3, #60676	; 0xed04
200031d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
200031d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200031dc:	601a      	str	r2, [r3, #0]
200031de:	f3bf 8f4f 	dsb	sy
200031e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
200031e6:	f001 f911 	bl	2000440c <vPortExitCritical>

		taskENTER_CRITICAL();
200031ea:	f001 f8d7 	bl	2000439c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
200031ee:	f247 6308 	movw	r3, #30216	; 0x7608
200031f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200031f6:	681b      	ldr	r3, [r3, #0]
200031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200031fa:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
200031fc:	68fb      	ldr	r3, [r7, #12]
200031fe:	2b00      	cmp	r3, #0
20003200:	d014      	beq.n	2000322c <ulTaskNotifyTake+0x9c>
			{
				if( xClearCountOnExit != pdFALSE )
20003202:	687b      	ldr	r3, [r7, #4]
20003204:	2b00      	cmp	r3, #0
20003206:	d008      	beq.n	2000321a <ulTaskNotifyTake+0x8a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
20003208:	f247 6308 	movw	r3, #30216	; 0x7608
2000320c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003210:	681b      	ldr	r3, [r3, #0]
20003212:	f04f 0200 	mov.w	r2, #0
20003216:	655a      	str	r2, [r3, #84]	; 0x54
20003218:	e008      	b.n	2000322c <ulTaskNotifyTake+0x9c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
2000321a:	f247 6308 	movw	r3, #30216	; 0x7608
2000321e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003222:	681b      	ldr	r3, [r3, #0]
20003224:	68fa      	ldr	r2, [r7, #12]
20003226:	f102 32ff 	add.w	r2, r2, #4294967295
2000322a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
2000322c:	f247 6308 	movw	r3, #30216	; 0x7608
20003230:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003234:	681b      	ldr	r3, [r3, #0]
20003236:	f04f 0200 	mov.w	r2, #0
2000323a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
2000323e:	f001 f8e5 	bl	2000440c <vPortExitCritical>

		return ulReturn;
20003242:	68fb      	ldr	r3, [r7, #12]
	}
20003244:	4618      	mov	r0, r3
20003246:	f107 0710 	add.w	r7, r7, #16
2000324a:	46bd      	mov	sp, r7
2000324c:	bd80      	pop	{r7, pc}
2000324e:	bf00      	nop

20003250 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
20003250:	b580      	push	{r7, lr}
20003252:	b086      	sub	sp, #24
20003254:	af00      	add	r7, sp, #0
20003256:	60f8      	str	r0, [r7, #12]
20003258:	60b9      	str	r1, [r7, #8]
2000325a:	607a      	str	r2, [r7, #4]
2000325c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
2000325e:	f001 f89d 	bl	2000439c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
20003262:	f247 6308 	movw	r3, #30216	; 0x7608
20003266:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000326a:	681b      	ldr	r3, [r3, #0]
2000326c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
20003270:	b2db      	uxtb	r3, r3
20003272:	2b02      	cmp	r3, #2
20003274:	d027      	beq.n	200032c6 <xTaskNotifyWait+0x76>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
20003276:	f247 6308 	movw	r3, #30216	; 0x7608
2000327a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000327e:	681b      	ldr	r3, [r3, #0]
20003280:	6d59      	ldr	r1, [r3, #84]	; 0x54
20003282:	68fa      	ldr	r2, [r7, #12]
20003284:	ea6f 0202 	mvn.w	r2, r2
20003288:	ea01 0202 	and.w	r2, r1, r2
2000328c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
2000328e:	f247 6308 	movw	r3, #30216	; 0x7608
20003292:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003296:	681b      	ldr	r3, [r3, #0]
20003298:	f04f 0201 	mov.w	r2, #1
2000329c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
200032a0:	683b      	ldr	r3, [r7, #0]
200032a2:	2b00      	cmp	r3, #0
200032a4:	d00f      	beq.n	200032c6 <xTaskNotifyWait+0x76>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
200032a6:	6838      	ldr	r0, [r7, #0]
200032a8:	f04f 0101 	mov.w	r1, #1
200032ac:	f000 f8ee 	bl	2000348c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
200032b0:	f64e 5304 	movw	r3, #60676	; 0xed04
200032b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
200032b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200032bc:	601a      	str	r2, [r3, #0]
200032be:	f3bf 8f4f 	dsb	sy
200032c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
200032c6:	f001 f8a1 	bl	2000440c <vPortExitCritical>

		taskENTER_CRITICAL();
200032ca:	f001 f867 	bl	2000439c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
200032ce:	687b      	ldr	r3, [r7, #4]
200032d0:	2b00      	cmp	r3, #0
200032d2:	d007      	beq.n	200032e4 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
200032d4:	f247 6308 	movw	r3, #30216	; 0x7608
200032d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032dc:	681b      	ldr	r3, [r3, #0]
200032de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
200032e0:	687b      	ldr	r3, [r7, #4]
200032e2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
200032e4:	f247 6308 	movw	r3, #30216	; 0x7608
200032e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200032ec:	681b      	ldr	r3, [r3, #0]
200032ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
200032f2:	b2db      	uxtb	r3, r3
200032f4:	2b01      	cmp	r3, #1
200032f6:	d103      	bne.n	20003300 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
200032f8:	f04f 0300 	mov.w	r3, #0
200032fc:	617b      	str	r3, [r7, #20]
200032fe:	e00e      	b.n	2000331e <xTaskNotifyWait+0xce>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
20003300:	f247 6308 	movw	r3, #30216	; 0x7608
20003304:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003308:	681b      	ldr	r3, [r3, #0]
2000330a:	6d59      	ldr	r1, [r3, #84]	; 0x54
2000330c:	68ba      	ldr	r2, [r7, #8]
2000330e:	ea6f 0202 	mvn.w	r2, r2
20003312:	ea01 0202 	and.w	r2, r1, r2
20003316:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
20003318:	f04f 0301 	mov.w	r3, #1
2000331c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
2000331e:	f247 6308 	movw	r3, #30216	; 0x7608
20003322:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003326:	681b      	ldr	r3, [r3, #0]
20003328:	f04f 0200 	mov.w	r2, #0
2000332c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
20003330:	f001 f86c 	bl	2000440c <vPortExitCritical>

		return xReturn;
20003334:	697b      	ldr	r3, [r7, #20]
	}
20003336:	4618      	mov	r0, r3
20003338:	f107 0718 	add.w	r7, r7, #24
2000333c:	46bd      	mov	sp, r7
2000333e:	bd80      	pop	{r7, pc}

20003340 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
20003340:	b580      	push	{r7, lr}
20003342:	b08a      	sub	sp, #40	; 0x28
20003344:	af00      	add	r7, sp, #0
20003346:	6078      	str	r0, [r7, #4]
20003348:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
2000334a:	687b      	ldr	r3, [r7, #4]
2000334c:	2b00      	cmp	r3, #0
2000334e:	d109      	bne.n	20003364 <vTaskNotifyGiveFromISR+0x24>
20003350:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003354:	f383 8811 	msr	BASEPRI, r3
20003358:	f3bf 8f6f 	isb	sy
2000335c:	f3bf 8f4f 	dsb	sy
20003360:	617b      	str	r3, [r7, #20]
20003362:	e7fe      	b.n	20003362 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20003364:	f001 f8ee 	bl	20004544 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
20003368:	687b      	ldr	r3, [r7, #4]
2000336a:	60bb      	str	r3, [r7, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
2000336c:	f3ef 8211 	mrs	r2, BASEPRI
20003370:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003374:	f383 8811 	msr	BASEPRI, r3
20003378:	f3bf 8f6f 	isb	sy
2000337c:	f3bf 8f4f 	dsb	sy
20003380:	61fa      	str	r2, [r7, #28]
20003382:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
20003384:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20003386:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
20003388:	68bb      	ldr	r3, [r7, #8]
2000338a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
2000338e:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
20003390:	68bb      	ldr	r3, [r7, #8]
20003392:	f04f 0202 	mov.w	r2, #2
20003396:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
2000339a:	68bb      	ldr	r3, [r7, #8]
2000339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000339e:	f103 0201 	add.w	r2, r3, #1
200033a2:	68bb      	ldr	r3, [r7, #8]
200033a4:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
200033a6:	7bfb      	ldrb	r3, [r7, #15]
200033a8:	2b01      	cmp	r3, #1
200033aa:	d165      	bne.n	20003478 <vTaskNotifyGiveFromISR+0x138>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
200033ac:	68bb      	ldr	r3, [r7, #8]
200033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200033b0:	2b00      	cmp	r3, #0
200033b2:	d009      	beq.n	200033c8 <vTaskNotifyGiveFromISR+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200033b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200033b8:	f383 8811 	msr	BASEPRI, r3
200033bc:	f3bf 8f6f 	isb	sy
200033c0:	f3bf 8f4f 	dsb	sy
200033c4:	623b      	str	r3, [r7, #32]
200033c6:	e7fe      	b.n	200033c6 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200033c8:	f247 7308 	movw	r3, #30472	; 0x7708
200033cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033d0:	681b      	ldr	r3, [r3, #0]
200033d2:	2b00      	cmp	r3, #0
200033d4:	d12d      	bne.n	20003432 <vTaskNotifyGiveFromISR+0xf2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200033d6:	68bb      	ldr	r3, [r7, #8]
200033d8:	f103 0304 	add.w	r3, r3, #4
200033dc:	4618      	mov	r0, r3
200033de:	f7fd ffbb 	bl	20001358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
200033e2:	68bb      	ldr	r3, [r7, #8]
200033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200033e6:	f04f 0201 	mov.w	r2, #1
200033ea:	fa02 f203 	lsl.w	r2, r2, r3
200033ee:	f247 63e8 	movw	r3, #30440	; 0x76e8
200033f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200033f6:	681b      	ldr	r3, [r3, #0]
200033f8:	ea42 0203 	orr.w	r2, r2, r3
200033fc:	f247 63e8 	movw	r3, #30440	; 0x76e8
20003400:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003404:	601a      	str	r2, [r3, #0]
20003406:	68bb      	ldr	r3, [r7, #8]
20003408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000340a:	4613      	mov	r3, r2
2000340c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003410:	4413      	add	r3, r2
20003412:	ea4f 0383 	mov.w	r3, r3, lsl #2
20003416:	461a      	mov	r2, r3
20003418:	f247 630c 	movw	r3, #30220	; 0x760c
2000341c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003420:	441a      	add	r2, r3
20003422:	68bb      	ldr	r3, [r7, #8]
20003424:	f103 0304 	add.w	r3, r3, #4
20003428:	4610      	mov	r0, r2
2000342a:	4619      	mov	r1, r3
2000342c:	f7fd ff36 	bl	2000129c <vListInsertEnd>
20003430:	e009      	b.n	20003446 <vTaskNotifyGiveFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
20003432:	68bb      	ldr	r3, [r7, #8]
20003434:	f103 0318 	add.w	r3, r3, #24
20003438:	f247 60a0 	movw	r0, #30368	; 0x76a0
2000343c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003440:	4619      	mov	r1, r3
20003442:	f7fd ff2b 	bl	2000129c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
20003446:	68bb      	ldr	r3, [r7, #8]
20003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000344a:	f247 6308 	movw	r3, #30216	; 0x7608
2000344e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003452:	681b      	ldr	r3, [r3, #0]
20003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003456:	429a      	cmp	r2, r3
20003458:	d90e      	bls.n	20003478 <vTaskNotifyGiveFromISR+0x138>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
2000345a:	683b      	ldr	r3, [r7, #0]
2000345c:	2b00      	cmp	r3, #0
2000345e:	d004      	beq.n	2000346a <vTaskNotifyGiveFromISR+0x12a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
20003460:	683b      	ldr	r3, [r7, #0]
20003462:	f04f 0201 	mov.w	r2, #1
20003466:	601a      	str	r2, [r3, #0]
20003468:	e006      	b.n	20003478 <vTaskNotifyGiveFromISR+0x138>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
2000346a:	f247 63f4 	movw	r3, #30452	; 0x76f4
2000346e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003472:	f04f 0201 	mov.w	r2, #1
20003476:	601a      	str	r2, [r3, #0]
20003478:	693b      	ldr	r3, [r7, #16]
2000347a:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
2000347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000347e:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
20003482:	f107 0728 	add.w	r7, r7, #40	; 0x28
20003486:	46bd      	mov	sp, r7
20003488:	bd80      	pop	{r7, pc}
2000348a:	bf00      	nop

2000348c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
2000348c:	b580      	push	{r7, lr}
2000348e:	b084      	sub	sp, #16
20003490:	af00      	add	r7, sp, #0
20003492:	6078      	str	r0, [r7, #4]
20003494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
20003496:	f247 63e4 	movw	r3, #30436	; 0x76e4
2000349a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000349e:	681b      	ldr	r3, [r3, #0]
200034a0:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200034a2:	f247 6308 	movw	r3, #30216	; 0x7608
200034a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034aa:	681b      	ldr	r3, [r3, #0]
200034ac:	f103 0304 	add.w	r3, r3, #4
200034b0:	4618      	mov	r0, r3
200034b2:	f7fd ff51 	bl	20001358 <uxListRemove>
200034b6:	4603      	mov	r3, r0
200034b8:	2b00      	cmp	r3, #0
200034ba:	d117      	bne.n	200034ec <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
200034bc:	f247 6308 	movw	r3, #30216	; 0x7608
200034c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034c4:	681b      	ldr	r3, [r3, #0]
200034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200034c8:	f04f 0201 	mov.w	r2, #1
200034cc:	fa02 f303 	lsl.w	r3, r2, r3
200034d0:	ea6f 0203 	mvn.w	r2, r3
200034d4:	f247 63e8 	movw	r3, #30440	; 0x76e8
200034d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034dc:	681b      	ldr	r3, [r3, #0]
200034de:	ea02 0203 	and.w	r2, r2, r3
200034e2:	f247 63e8 	movw	r3, #30440	; 0x76e8
200034e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034ea:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
200034ec:	687b      	ldr	r3, [r7, #4]
200034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
200034f2:	d111      	bne.n	20003518 <prvAddCurrentTaskToDelayedList+0x8c>
200034f4:	683b      	ldr	r3, [r7, #0]
200034f6:	2b00      	cmp	r3, #0
200034f8:	d00e      	beq.n	20003518 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
200034fa:	f247 6308 	movw	r3, #30216	; 0x7608
200034fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003502:	681b      	ldr	r3, [r3, #0]
20003504:	f103 0304 	add.w	r3, r3, #4
20003508:	f247 60cc 	movw	r0, #30412	; 0x76cc
2000350c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003510:	4619      	mov	r1, r3
20003512:	f7fd fec3 	bl	2000129c <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003516:	e03d      	b.n	20003594 <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
20003518:	68fa      	ldr	r2, [r7, #12]
2000351a:	687b      	ldr	r3, [r7, #4]
2000351c:	4413      	add	r3, r2
2000351e:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
20003520:	f247 6308 	movw	r3, #30216	; 0x7608
20003524:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003528:	681b      	ldr	r3, [r3, #0]
2000352a:	68ba      	ldr	r2, [r7, #8]
2000352c:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
2000352e:	68ba      	ldr	r2, [r7, #8]
20003530:	68fb      	ldr	r3, [r7, #12]
20003532:	429a      	cmp	r2, r3
20003534:	d210      	bcs.n	20003558 <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003536:	f247 639c 	movw	r3, #30364	; 0x769c
2000353a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000353e:	681a      	ldr	r2, [r3, #0]
20003540:	f247 6308 	movw	r3, #30216	; 0x7608
20003544:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003548:	681b      	ldr	r3, [r3, #0]
2000354a:	f103 0304 	add.w	r3, r3, #4
2000354e:	4610      	mov	r0, r2
20003550:	4619      	mov	r1, r3
20003552:	f7fd fec7 	bl	200012e4 <vListInsert>
20003556:	e01d      	b.n	20003594 <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003558:	f247 6398 	movw	r3, #30360	; 0x7698
2000355c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003560:	681a      	ldr	r2, [r3, #0]
20003562:	f247 6308 	movw	r3, #30216	; 0x7608
20003566:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000356a:	681b      	ldr	r3, [r3, #0]
2000356c:	f103 0304 	add.w	r3, r3, #4
20003570:	4610      	mov	r0, r2
20003572:	4619      	mov	r1, r3
20003574:	f7fd feb6 	bl	200012e4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
20003578:	f247 7300 	movw	r3, #30464	; 0x7700
2000357c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003580:	681b      	ldr	r3, [r3, #0]
20003582:	68ba      	ldr	r2, [r7, #8]
20003584:	429a      	cmp	r2, r3
20003586:	d205      	bcs.n	20003594 <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
20003588:	f247 7300 	movw	r3, #30464	; 0x7700
2000358c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003590:	68ba      	ldr	r2, [r7, #8]
20003592:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
20003594:	f107 0710 	add.w	r7, r7, #16
20003598:	46bd      	mov	sp, r7
2000359a:	bd80      	pop	{r7, pc}

2000359c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
2000359c:	b580      	push	{r7, lr}
2000359e:	b084      	sub	sp, #16
200035a0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
200035a2:	f04f 0300 	mov.w	r3, #0
200035a6:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
200035a8:	f000 fb72 	bl	20003c90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
200035ac:	f247 7344 	movw	r3, #30532	; 0x7744
200035b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035b4:	681b      	ldr	r3, [r3, #0]
200035b6:	2b00      	cmp	r3, #0
200035b8:	d017      	beq.n	200035ea <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
200035ba:	f04f 0302 	mov.w	r3, #2
200035be:	9300      	str	r3, [sp, #0]
200035c0:	f247 7348 	movw	r3, #30536	; 0x7748
200035c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200035c8:	9301      	str	r3, [sp, #4]
200035ca:	f643 000d 	movw	r0, #14349	; 0x380d
200035ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
200035d2:	f247 5120 	movw	r1, #29984	; 0x7520
200035d6:	f2c2 0100 	movt	r1, #8192	; 0x2000
200035da:	f04f 02a0 	mov.w	r2, #160	; 0xa0
200035de:	f04f 0300 	mov.w	r3, #0
200035e2:	f7fe fc4d 	bl	20001e80 <xTaskCreate>
200035e6:	4603      	mov	r3, r0
200035e8:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
200035ea:	683b      	ldr	r3, [r7, #0]
200035ec:	2b00      	cmp	r3, #0
200035ee:	d109      	bne.n	20003604 <xTimerCreateTimerTask+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200035f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200035f4:	f383 8811 	msr	BASEPRI, r3
200035f8:	f3bf 8f6f 	isb	sy
200035fc:	f3bf 8f4f 	dsb	sy
20003600:	607b      	str	r3, [r7, #4]
20003602:	e7fe      	b.n	20003602 <xTimerCreateTimerTask+0x66>
	return xReturn;
20003604:	683b      	ldr	r3, [r7, #0]
}
20003606:	4618      	mov	r0, r3
20003608:	f107 0708 	add.w	r7, r7, #8
2000360c:	46bd      	mov	sp, r7
2000360e:	bd80      	pop	{r7, pc}

20003610 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20003610:	b580      	push	{r7, lr}
20003612:	b088      	sub	sp, #32
20003614:	af02      	add	r7, sp, #8
20003616:	60f8      	str	r0, [r7, #12]
20003618:	60b9      	str	r1, [r7, #8]
2000361a:	607a      	str	r2, [r7, #4]
2000361c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
2000361e:	f04f 002c 	mov.w	r0, #44	; 0x2c
20003622:	f000 fb6f 	bl	20003d04 <pvPortMalloc>
20003626:	4603      	mov	r3, r0
20003628:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
2000362a:	697b      	ldr	r3, [r7, #20]
2000362c:	2b00      	cmp	r3, #0
2000362e:	d009      	beq.n	20003644 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
20003630:	6a3b      	ldr	r3, [r7, #32]
20003632:	9300      	str	r3, [sp, #0]
20003634:	697b      	ldr	r3, [r7, #20]
20003636:	9301      	str	r3, [sp, #4]
20003638:	68f8      	ldr	r0, [r7, #12]
2000363a:	68b9      	ldr	r1, [r7, #8]
2000363c:	687a      	ldr	r2, [r7, #4]
2000363e:	683b      	ldr	r3, [r7, #0]
20003640:	f000 f806 	bl	20003650 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
20003644:	697b      	ldr	r3, [r7, #20]
	}
20003646:	4618      	mov	r0, r3
20003648:	f107 0718 	add.w	r7, r7, #24
2000364c:	46bd      	mov	sp, r7
2000364e:	bd80      	pop	{r7, pc}

20003650 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
20003650:	b580      	push	{r7, lr}
20003652:	b086      	sub	sp, #24
20003654:	af00      	add	r7, sp, #0
20003656:	60f8      	str	r0, [r7, #12]
20003658:	60b9      	str	r1, [r7, #8]
2000365a:	607a      	str	r2, [r7, #4]
2000365c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
2000365e:	68bb      	ldr	r3, [r7, #8]
20003660:	2b00      	cmp	r3, #0
20003662:	d109      	bne.n	20003678 <prvInitialiseNewTimer+0x28>
20003664:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003668:	f383 8811 	msr	BASEPRI, r3
2000366c:	f3bf 8f6f 	isb	sy
20003670:	f3bf 8f4f 	dsb	sy
20003674:	617b      	str	r3, [r7, #20]
20003676:	e7fe      	b.n	20003676 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
20003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000367a:	2b00      	cmp	r3, #0
2000367c:	d016      	beq.n	200036ac <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
2000367e:	f000 fb07 	bl	20003c90 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
20003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003684:	68fa      	ldr	r2, [r7, #12]
20003686:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
20003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000368a:	68ba      	ldr	r2, [r7, #8]
2000368c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
2000368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003690:	687a      	ldr	r2, [r7, #4]
20003692:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
20003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003696:	683a      	ldr	r2, [r7, #0]
20003698:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
2000369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000369c:	6a3a      	ldr	r2, [r7, #32]
2000369e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
200036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200036a2:	f103 0304 	add.w	r3, r3, #4
200036a6:	4618      	mov	r0, r3
200036a8:	f7fd fdea 	bl	20001280 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
200036ac:	f107 0718 	add.w	r7, r7, #24
200036b0:	46bd      	mov	sp, r7
200036b2:	bd80      	pop	{r7, pc}

200036b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
200036b4:	b580      	push	{r7, lr}
200036b6:	b08a      	sub	sp, #40	; 0x28
200036b8:	af00      	add	r7, sp, #0
200036ba:	60f8      	str	r0, [r7, #12]
200036bc:	60b9      	str	r1, [r7, #8]
200036be:	607a      	str	r2, [r7, #4]
200036c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
200036c2:	f04f 0300 	mov.w	r3, #0
200036c6:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
200036c8:	68fb      	ldr	r3, [r7, #12]
200036ca:	2b00      	cmp	r3, #0
200036cc:	d109      	bne.n	200036e2 <xTimerGenericCommand+0x2e>
200036ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200036d2:	f383 8811 	msr	BASEPRI, r3
200036d6:	f3bf 8f6f 	isb	sy
200036da:	f3bf 8f4f 	dsb	sy
200036de:	627b      	str	r3, [r7, #36]	; 0x24
200036e0:	e7fe      	b.n	200036e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
200036e2:	f247 7344 	movw	r3, #30532	; 0x7744
200036e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036ea:	681b      	ldr	r3, [r3, #0]
200036ec:	2b00      	cmp	r3, #0
200036ee:	d040      	beq.n	20003772 <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
200036f0:	68bb      	ldr	r3, [r7, #8]
200036f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
200036f4:	687b      	ldr	r3, [r7, #4]
200036f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
200036f8:	68fb      	ldr	r3, [r7, #12]
200036fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
200036fc:	68bb      	ldr	r3, [r7, #8]
200036fe:	2b05      	cmp	r3, #5
20003700:	dc27      	bgt.n	20003752 <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
20003702:	f7ff fbb9 	bl	20002e78 <xTaskGetSchedulerState>
20003706:	4603      	mov	r3, r0
20003708:	2b02      	cmp	r3, #2
2000370a:	d110      	bne.n	2000372e <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
2000370c:	f247 7344 	movw	r3, #30532	; 0x7744
20003710:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003714:	681a      	ldr	r2, [r3, #0]
20003716:	f107 0310 	add.w	r3, r7, #16
2000371a:	4610      	mov	r0, r2
2000371c:	4619      	mov	r1, r3
2000371e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20003720:	f04f 0300 	mov.w	r3, #0
20003724:	f7fd ff58 	bl	200015d8 <xQueueGenericSend>
20003728:	4603      	mov	r3, r0
2000372a:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
2000372c:	e021      	b.n	20003772 <xTimerGenericCommand+0xbe>
2000372e:	f247 7344 	movw	r3, #30532	; 0x7744
20003732:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003736:	681a      	ldr	r2, [r3, #0]
20003738:	f107 0310 	add.w	r3, r7, #16
2000373c:	4610      	mov	r0, r2
2000373e:	4619      	mov	r1, r3
20003740:	f04f 0200 	mov.w	r2, #0
20003744:	f04f 0300 	mov.w	r3, #0
20003748:	f7fd ff46 	bl	200015d8 <xQueueGenericSend>
2000374c:	4603      	mov	r3, r0
2000374e:	623b      	str	r3, [r7, #32]
20003750:	e00f      	b.n	20003772 <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
20003752:	f247 7344 	movw	r3, #30532	; 0x7744
20003756:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000375a:	681a      	ldr	r2, [r3, #0]
2000375c:	f107 0310 	add.w	r3, r7, #16
20003760:	4610      	mov	r0, r2
20003762:	4619      	mov	r1, r3
20003764:	683a      	ldr	r2, [r7, #0]
20003766:	f04f 0300 	mov.w	r3, #0
2000376a:	f7fe f84d 	bl	20001808 <xQueueGenericSendFromISR>
2000376e:	4603      	mov	r3, r0
20003770:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
20003772:	6a3b      	ldr	r3, [r7, #32]
}
20003774:	4618      	mov	r0, r3
20003776:	f107 0728 	add.w	r7, r7, #40	; 0x28
2000377a:	46bd      	mov	sp, r7
2000377c:	bd80      	pop	{r7, pc}
2000377e:	bf00      	nop

20003780 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
20003780:	b580      	push	{r7, lr}
20003782:	b088      	sub	sp, #32
20003784:	af02      	add	r7, sp, #8
20003786:	6078      	str	r0, [r7, #4]
20003788:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
2000378a:	f247 733c 	movw	r3, #30524	; 0x773c
2000378e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003792:	681b      	ldr	r3, [r3, #0]
20003794:	68db      	ldr	r3, [r3, #12]
20003796:	68db      	ldr	r3, [r3, #12]
20003798:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
2000379a:	693b      	ldr	r3, [r7, #16]
2000379c:	f103 0304 	add.w	r3, r3, #4
200037a0:	4618      	mov	r0, r3
200037a2:	f7fd fdd9 	bl	20001358 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
200037a6:	693b      	ldr	r3, [r7, #16]
200037a8:	69db      	ldr	r3, [r3, #28]
200037aa:	2b01      	cmp	r3, #1
200037ac:	d126      	bne.n	200037fc <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
200037ae:	693b      	ldr	r3, [r7, #16]
200037b0:	699a      	ldr	r2, [r3, #24]
200037b2:	687b      	ldr	r3, [r7, #4]
200037b4:	4413      	add	r3, r2
200037b6:	6938      	ldr	r0, [r7, #16]
200037b8:	4619      	mov	r1, r3
200037ba:	683a      	ldr	r2, [r7, #0]
200037bc:	687b      	ldr	r3, [r7, #4]
200037be:	f000 f8df 	bl	20003980 <prvInsertTimerInActiveList>
200037c2:	4603      	mov	r3, r0
200037c4:	2b00      	cmp	r3, #0
200037c6:	d019      	beq.n	200037fc <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
200037c8:	f04f 0300 	mov.w	r3, #0
200037cc:	9300      	str	r3, [sp, #0]
200037ce:	6938      	ldr	r0, [r7, #16]
200037d0:	f04f 0100 	mov.w	r1, #0
200037d4:	687a      	ldr	r2, [r7, #4]
200037d6:	f04f 0300 	mov.w	r3, #0
200037da:	f7ff ff6b 	bl	200036b4 <xTimerGenericCommand>
200037de:	4603      	mov	r3, r0
200037e0:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
200037e2:	68fb      	ldr	r3, [r7, #12]
200037e4:	2b00      	cmp	r3, #0
200037e6:	d109      	bne.n	200037fc <prvProcessExpiredTimer+0x7c>
200037e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200037ec:	f383 8811 	msr	BASEPRI, r3
200037f0:	f3bf 8f6f 	isb	sy
200037f4:	f3bf 8f4f 	dsb	sy
200037f8:	617b      	str	r3, [r7, #20]
200037fa:	e7fe      	b.n	200037fa <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
200037fc:	693b      	ldr	r3, [r7, #16]
200037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003800:	6938      	ldr	r0, [r7, #16]
20003802:	4798      	blx	r3
}
20003804:	f107 0718 	add.w	r7, r7, #24
20003808:	46bd      	mov	sp, r7
2000380a:	bd80      	pop	{r7, pc}

2000380c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
2000380c:	b580      	push	{r7, lr}
2000380e:	b084      	sub	sp, #16
20003810:	af00      	add	r7, sp, #0
20003812:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20003814:	f107 0308 	add.w	r3, r7, #8
20003818:	4618      	mov	r0, r3
2000381a:	f000 f861 	bl	200038e0 <prvGetNextExpireTime>
2000381e:	4603      	mov	r3, r0
20003820:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
20003822:	68bb      	ldr	r3, [r7, #8]
20003824:	68f8      	ldr	r0, [r7, #12]
20003826:	4619      	mov	r1, r3
20003828:	f000 f804 	bl	20003834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
2000382c:	f000 f8f4 	bl	20003a18 <prvProcessReceivedCommands>
	}
20003830:	e7f0      	b.n	20003814 <prvTimerTask+0x8>
20003832:	bf00      	nop

20003834 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20003834:	b580      	push	{r7, lr}
20003836:	b084      	sub	sp, #16
20003838:	af00      	add	r7, sp, #0
2000383a:	6078      	str	r0, [r7, #4]
2000383c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
2000383e:	f7fe fdf3 	bl	20002428 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003842:	f107 0308 	add.w	r3, r7, #8
20003846:	4618      	mov	r0, r3
20003848:	f000 f872 	bl	20003930 <prvSampleTimeNow>
2000384c:	4603      	mov	r3, r0
2000384e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
20003850:	68bb      	ldr	r3, [r7, #8]
20003852:	2b00      	cmp	r3, #0
20003854:	d13b      	bne.n	200038ce <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003856:	683b      	ldr	r3, [r7, #0]
20003858:	2b00      	cmp	r3, #0
2000385a:	d10b      	bne.n	20003874 <prvProcessTimerOrBlockTask+0x40>
2000385c:	687a      	ldr	r2, [r7, #4]
2000385e:	68fb      	ldr	r3, [r7, #12]
20003860:	429a      	cmp	r2, r3
20003862:	d807      	bhi.n	20003874 <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
20003864:	f7fe fdf2 	bl	2000244c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
20003868:	6878      	ldr	r0, [r7, #4]
2000386a:	68f9      	ldr	r1, [r7, #12]
2000386c:	f7ff ff88 	bl	20003780 <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003870:	bf00      	nop
20003872:	e030      	b.n	200038d6 <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
20003874:	683b      	ldr	r3, [r7, #0]
20003876:	2b00      	cmp	r3, #0
20003878:	d00a      	beq.n	20003890 <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
2000387a:	f247 7340 	movw	r3, #30528	; 0x7740
2000387e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003882:	681b      	ldr	r3, [r3, #0]
20003884:	681b      	ldr	r3, [r3, #0]
20003886:	2b00      	cmp	r3, #0
20003888:	bf14      	ite	ne
2000388a:	2300      	movne	r3, #0
2000388c:	2301      	moveq	r3, #1
2000388e:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
20003890:	f247 7344 	movw	r3, #30532	; 0x7744
20003894:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003898:	681a      	ldr	r2, [r3, #0]
2000389a:	6879      	ldr	r1, [r7, #4]
2000389c:	68fb      	ldr	r3, [r7, #12]
2000389e:	ebc3 0301 	rsb	r3, r3, r1
200038a2:	4610      	mov	r0, r2
200038a4:	4619      	mov	r1, r3
200038a6:	683a      	ldr	r2, [r7, #0]
200038a8:	f7fe fab0 	bl	20001e0c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
200038ac:	f7fe fdce 	bl	2000244c <xTaskResumeAll>
200038b0:	4603      	mov	r3, r0
200038b2:	2b00      	cmp	r3, #0
200038b4:	d10e      	bne.n	200038d4 <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
200038b6:	f64e 5304 	movw	r3, #60676	; 0xed04
200038ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
200038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200038c2:	601a      	str	r2, [r3, #0]
200038c4:	f3bf 8f4f 	dsb	sy
200038c8:	f3bf 8f6f 	isb	sy
200038cc:	e003      	b.n	200038d6 <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
200038ce:	f7fe fdbd 	bl	2000244c <xTaskResumeAll>
200038d2:	e000      	b.n	200038d6 <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
200038d4:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
200038d6:	f107 0710 	add.w	r7, r7, #16
200038da:	46bd      	mov	sp, r7
200038dc:	bd80      	pop	{r7, pc}
200038de:	bf00      	nop

200038e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
200038e0:	b480      	push	{r7}
200038e2:	b085      	sub	sp, #20
200038e4:	af00      	add	r7, sp, #0
200038e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
200038e8:	f247 733c 	movw	r3, #30524	; 0x773c
200038ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038f0:	681b      	ldr	r3, [r3, #0]
200038f2:	681b      	ldr	r3, [r3, #0]
200038f4:	2b00      	cmp	r3, #0
200038f6:	bf14      	ite	ne
200038f8:	2200      	movne	r2, #0
200038fa:	2201      	moveq	r2, #1
200038fc:	687b      	ldr	r3, [r7, #4]
200038fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20003900:	687b      	ldr	r3, [r7, #4]
20003902:	681b      	ldr	r3, [r3, #0]
20003904:	2b00      	cmp	r3, #0
20003906:	d108      	bne.n	2000391a <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003908:	f247 733c 	movw	r3, #30524	; 0x773c
2000390c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003910:	681b      	ldr	r3, [r3, #0]
20003912:	68db      	ldr	r3, [r3, #12]
20003914:	681b      	ldr	r3, [r3, #0]
20003916:	60fb      	str	r3, [r7, #12]
20003918:	e002      	b.n	20003920 <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
2000391a:	f04f 0300 	mov.w	r3, #0
2000391e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
20003920:	68fb      	ldr	r3, [r7, #12]
}
20003922:	4618      	mov	r0, r3
20003924:	f107 0714 	add.w	r7, r7, #20
20003928:	46bd      	mov	sp, r7
2000392a:	bc80      	pop	{r7}
2000392c:	4770      	bx	lr
2000392e:	bf00      	nop

20003930 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003930:	b580      	push	{r7, lr}
20003932:	b084      	sub	sp, #16
20003934:	af00      	add	r7, sp, #0
20003936:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003938:	f7fe fe58 	bl	200025ec <xTaskGetTickCount>
2000393c:	4603      	mov	r3, r0
2000393e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
20003940:	f247 734c 	movw	r3, #30540	; 0x774c
20003944:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003948:	681b      	ldr	r3, [r3, #0]
2000394a:	68fa      	ldr	r2, [r7, #12]
2000394c:	429a      	cmp	r2, r3
2000394e:	d206      	bcs.n	2000395e <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
20003950:	f000 f924 	bl	20003b9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
20003954:	687b      	ldr	r3, [r7, #4]
20003956:	f04f 0201 	mov.w	r2, #1
2000395a:	601a      	str	r2, [r3, #0]
2000395c:	e003      	b.n	20003966 <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
2000395e:	687b      	ldr	r3, [r7, #4]
20003960:	f04f 0200 	mov.w	r2, #0
20003964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
20003966:	f247 734c 	movw	r3, #30540	; 0x774c
2000396a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000396e:	68fa      	ldr	r2, [r7, #12]
20003970:	601a      	str	r2, [r3, #0]

	return xTimeNow;
20003972:	68fb      	ldr	r3, [r7, #12]
}
20003974:	4618      	mov	r0, r3
20003976:	f107 0710 	add.w	r7, r7, #16
2000397a:	46bd      	mov	sp, r7
2000397c:	bd80      	pop	{r7, pc}
2000397e:	bf00      	nop

20003980 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20003980:	b580      	push	{r7, lr}
20003982:	b086      	sub	sp, #24
20003984:	af00      	add	r7, sp, #0
20003986:	60f8      	str	r0, [r7, #12]
20003988:	60b9      	str	r1, [r7, #8]
2000398a:	607a      	str	r2, [r7, #4]
2000398c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
2000398e:	f04f 0300 	mov.w	r3, #0
20003992:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20003994:	68fb      	ldr	r3, [r7, #12]
20003996:	68ba      	ldr	r2, [r7, #8]
20003998:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
2000399a:	68fb      	ldr	r3, [r7, #12]
2000399c:	68fa      	ldr	r2, [r7, #12]
2000399e:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
200039a0:	68ba      	ldr	r2, [r7, #8]
200039a2:	687b      	ldr	r3, [r7, #4]
200039a4:	429a      	cmp	r2, r3
200039a6:	d818      	bhi.n	200039da <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200039a8:	687a      	ldr	r2, [r7, #4]
200039aa:	683b      	ldr	r3, [r7, #0]
200039ac:	ebc3 0202 	rsb	r2, r3, r2
200039b0:	68fb      	ldr	r3, [r7, #12]
200039b2:	699b      	ldr	r3, [r3, #24]
200039b4:	429a      	cmp	r2, r3
200039b6:	d303      	bcc.n	200039c0 <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
200039b8:	f04f 0301 	mov.w	r3, #1
200039bc:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
200039be:	e024      	b.n	20003a0a <prvInsertTimerInActiveList+0x8a>
200039c0:	f247 7340 	movw	r3, #30528	; 0x7740
200039c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039c8:	681a      	ldr	r2, [r3, #0]
200039ca:	68fb      	ldr	r3, [r7, #12]
200039cc:	f103 0304 	add.w	r3, r3, #4
200039d0:	4610      	mov	r0, r2
200039d2:	4619      	mov	r1, r3
200039d4:	f7fd fc86 	bl	200012e4 <vListInsert>
200039d8:	e017      	b.n	20003a0a <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
200039da:	687a      	ldr	r2, [r7, #4]
200039dc:	683b      	ldr	r3, [r7, #0]
200039de:	429a      	cmp	r2, r3
200039e0:	d207      	bcs.n	200039f2 <prvInsertTimerInActiveList+0x72>
200039e2:	68ba      	ldr	r2, [r7, #8]
200039e4:	683b      	ldr	r3, [r7, #0]
200039e6:	429a      	cmp	r2, r3
200039e8:	d303      	bcc.n	200039f2 <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
200039ea:	f04f 0301 	mov.w	r3, #1
200039ee:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
200039f0:	e00b      	b.n	20003a0a <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
200039f2:	f247 733c 	movw	r3, #30524	; 0x773c
200039f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200039fa:	681a      	ldr	r2, [r3, #0]
200039fc:	68fb      	ldr	r3, [r7, #12]
200039fe:	f103 0304 	add.w	r3, r3, #4
20003a02:	4610      	mov	r0, r2
20003a04:	4619      	mov	r1, r3
20003a06:	f7fd fc6d 	bl	200012e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
20003a0a:	697b      	ldr	r3, [r7, #20]
}
20003a0c:	4618      	mov	r0, r3
20003a0e:	f107 0718 	add.w	r7, r7, #24
20003a12:	46bd      	mov	sp, r7
20003a14:	bd80      	pop	{r7, pc}
20003a16:	bf00      	nop

20003a18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20003a18:	b580      	push	{r7, lr}
20003a1a:	b08e      	sub	sp, #56	; 0x38
20003a1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003a1e:	e0a5      	b.n	20003b6c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20003a20:	687b      	ldr	r3, [r7, #4]
20003a22:	2b00      	cmp	r3, #0
20003a24:	da1a      	bge.n	20003a5c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
20003a26:	f107 0304 	add.w	r3, r7, #4
20003a2a:	f103 0304 	add.w	r3, r3, #4
20003a2e:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003a30:	6a3b      	ldr	r3, [r7, #32]
20003a32:	2b00      	cmp	r3, #0
20003a34:	d109      	bne.n	20003a4a <prvProcessReceivedCommands+0x32>
20003a36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003a3a:	f383 8811 	msr	BASEPRI, r3
20003a3e:	f3bf 8f6f 	isb	sy
20003a42:	f3bf 8f4f 	dsb	sy
20003a46:	627b      	str	r3, [r7, #36]	; 0x24
20003a48:	e7fe      	b.n	20003a48 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
20003a4a:	6a3b      	ldr	r3, [r7, #32]
20003a4c:	681b      	ldr	r3, [r3, #0]
20003a4e:	6a3a      	ldr	r2, [r7, #32]
20003a50:	6851      	ldr	r1, [r2, #4]
20003a52:	6a3a      	ldr	r2, [r7, #32]
20003a54:	6892      	ldr	r2, [r2, #8]
20003a56:	4608      	mov	r0, r1
20003a58:	4611      	mov	r1, r2
20003a5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
20003a5c:	687b      	ldr	r3, [r7, #4]
20003a5e:	2b00      	cmp	r3, #0
20003a60:	f2c0 8084 	blt.w	20003b6c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
20003a64:	68fb      	ldr	r3, [r7, #12]
20003a66:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
20003a68:	697b      	ldr	r3, [r7, #20]
20003a6a:	695b      	ldr	r3, [r3, #20]
20003a6c:	2b00      	cmp	r3, #0
20003a6e:	d005      	beq.n	20003a7c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003a70:	697b      	ldr	r3, [r7, #20]
20003a72:	f103 0304 	add.w	r3, r3, #4
20003a76:	4618      	mov	r0, r3
20003a78:	f7fd fc6e 	bl	20001358 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003a7c:	463b      	mov	r3, r7
20003a7e:	4618      	mov	r0, r3
20003a80:	f7ff ff56 	bl	20003930 <prvSampleTimeNow>
20003a84:	4603      	mov	r3, r0
20003a86:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
20003a88:	687b      	ldr	r3, [r7, #4]
20003a8a:	2b09      	cmp	r3, #9
20003a8c:	d86e      	bhi.n	20003b6c <prvProcessReceivedCommands+0x154>
20003a8e:	a201      	add	r2, pc, #4	; (adr r2, 20003a94 <prvProcessReceivedCommands+0x7c>)
20003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003a94:	20003abd 	.word	0x20003abd
20003a98:	20003abd 	.word	0x20003abd
20003a9c:	20003abd 	.word	0x20003abd
20003aa0:	20003b6d 	.word	0x20003b6d
20003aa4:	20003b23 	.word	0x20003b23
20003aa8:	20003b5b 	.word	0x20003b5b
20003aac:	20003abd 	.word	0x20003abd
20003ab0:	20003abd 	.word	0x20003abd
20003ab4:	20003b6d 	.word	0x20003b6d
20003ab8:	20003b23 	.word	0x20003b23
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003abc:	68ba      	ldr	r2, [r7, #8]
20003abe:	697b      	ldr	r3, [r7, #20]
20003ac0:	699b      	ldr	r3, [r3, #24]
20003ac2:	441a      	add	r2, r3
20003ac4:	68bb      	ldr	r3, [r7, #8]
20003ac6:	6978      	ldr	r0, [r7, #20]
20003ac8:	4611      	mov	r1, r2
20003aca:	69fa      	ldr	r2, [r7, #28]
20003acc:	f7ff ff58 	bl	20003980 <prvInsertTimerInActiveList>
20003ad0:	4603      	mov	r3, r0
20003ad2:	2b00      	cmp	r3, #0
20003ad4:	d045      	beq.n	20003b62 <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003ad6:	697b      	ldr	r3, [r7, #20]
20003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003ada:	6978      	ldr	r0, [r7, #20]
20003adc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003ade:	697b      	ldr	r3, [r7, #20]
20003ae0:	69db      	ldr	r3, [r3, #28]
20003ae2:	2b01      	cmp	r3, #1
20003ae4:	d13f      	bne.n	20003b66 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
20003ae6:	68ba      	ldr	r2, [r7, #8]
20003ae8:	697b      	ldr	r3, [r7, #20]
20003aea:	699b      	ldr	r3, [r3, #24]
20003aec:	4413      	add	r3, r2
20003aee:	f04f 0200 	mov.w	r2, #0
20003af2:	9200      	str	r2, [sp, #0]
20003af4:	6978      	ldr	r0, [r7, #20]
20003af6:	f04f 0100 	mov.w	r1, #0
20003afa:	461a      	mov	r2, r3
20003afc:	f04f 0300 	mov.w	r3, #0
20003b00:	f7ff fdd8 	bl	200036b4 <xTimerGenericCommand>
20003b04:	4603      	mov	r3, r0
20003b06:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
20003b08:	69bb      	ldr	r3, [r7, #24]
20003b0a:	2b00      	cmp	r3, #0
20003b0c:	d12d      	bne.n	20003b6a <prvProcessReceivedCommands+0x152>
20003b0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003b12:	f383 8811 	msr	BASEPRI, r3
20003b16:	f3bf 8f6f 	isb	sy
20003b1a:	f3bf 8f4f 	dsb	sy
20003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
20003b20:	e7fe      	b.n	20003b20 <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20003b22:	68ba      	ldr	r2, [r7, #8]
20003b24:	697b      	ldr	r3, [r7, #20]
20003b26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003b28:	697b      	ldr	r3, [r7, #20]
20003b2a:	699b      	ldr	r3, [r3, #24]
20003b2c:	2b00      	cmp	r3, #0
20003b2e:	d109      	bne.n	20003b44 <prvProcessReceivedCommands+0x12c>
20003b30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003b34:	f383 8811 	msr	BASEPRI, r3
20003b38:	f3bf 8f6f 	isb	sy
20003b3c:	f3bf 8f4f 	dsb	sy
20003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
20003b42:	e7fe      	b.n	20003b42 <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
20003b44:	697b      	ldr	r3, [r7, #20]
20003b46:	699a      	ldr	r2, [r3, #24]
20003b48:	69fb      	ldr	r3, [r7, #28]
20003b4a:	4413      	add	r3, r2
20003b4c:	6978      	ldr	r0, [r7, #20]
20003b4e:	4619      	mov	r1, r3
20003b50:	69fa      	ldr	r2, [r7, #28]
20003b52:	69fb      	ldr	r3, [r7, #28]
20003b54:	f7ff ff14 	bl	20003980 <prvInsertTimerInActiveList>
					break;
20003b58:	e008      	b.n	20003b6c <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
20003b5a:	6978      	ldr	r0, [r7, #20]
20003b5c:	f000 f9ce 	bl	20003efc <vPortFree>
20003b60:	e004      	b.n	20003b6c <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
20003b62:	bf00      	nop
20003b64:	e002      	b.n	20003b6c <prvProcessReceivedCommands+0x154>
20003b66:	bf00      	nop
20003b68:	e000      	b.n	20003b6c <prvProcessReceivedCommands+0x154>
20003b6a:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003b6c:	f247 7344 	movw	r3, #30532	; 0x7744
20003b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003b74:	681a      	ldr	r2, [r3, #0]
20003b76:	f107 0304 	add.w	r3, r7, #4
20003b7a:	4610      	mov	r0, r2
20003b7c:	4619      	mov	r1, r3
20003b7e:	f04f 0200 	mov.w	r2, #0
20003b82:	f04f 0300 	mov.w	r3, #0
20003b86:	f7fd fee1 	bl	2000194c <xQueueGenericReceive>
20003b8a:	4603      	mov	r3, r0
20003b8c:	2b00      	cmp	r3, #0
20003b8e:	f47f af47 	bne.w	20003a20 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
20003b92:	f107 0730 	add.w	r7, r7, #48	; 0x30
20003b96:	46bd      	mov	sp, r7
20003b98:	bd80      	pop	{r7, pc}
20003b9a:	bf00      	nop

20003b9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003b9c:	b580      	push	{r7, lr}
20003b9e:	b088      	sub	sp, #32
20003ba0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003ba2:	e053      	b.n	20003c4c <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003ba4:	f247 733c 	movw	r3, #30524	; 0x773c
20003ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bac:	681b      	ldr	r3, [r3, #0]
20003bae:	68db      	ldr	r3, [r3, #12]
20003bb0:	681b      	ldr	r3, [r3, #0]
20003bb2:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
20003bb4:	f247 733c 	movw	r3, #30524	; 0x773c
20003bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003bbc:	681b      	ldr	r3, [r3, #0]
20003bbe:	68db      	ldr	r3, [r3, #12]
20003bc0:	68db      	ldr	r3, [r3, #12]
20003bc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003bc4:	68fb      	ldr	r3, [r7, #12]
20003bc6:	f103 0304 	add.w	r3, r3, #4
20003bca:	4618      	mov	r0, r3
20003bcc:	f7fd fbc4 	bl	20001358 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003bd0:	68fb      	ldr	r3, [r7, #12]
20003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20003bd4:	68f8      	ldr	r0, [r7, #12]
20003bd6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
20003bd8:	68fb      	ldr	r3, [r7, #12]
20003bda:	69db      	ldr	r3, [r3, #28]
20003bdc:	2b01      	cmp	r3, #1
20003bde:	d135      	bne.n	20003c4c <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003be0:	68fb      	ldr	r3, [r7, #12]
20003be2:	699a      	ldr	r2, [r3, #24]
20003be4:	683b      	ldr	r3, [r7, #0]
20003be6:	4413      	add	r3, r2
20003be8:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
20003bea:	687a      	ldr	r2, [r7, #4]
20003bec:	683b      	ldr	r3, [r7, #0]
20003bee:	429a      	cmp	r2, r3
20003bf0:	d912      	bls.n	20003c18 <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20003bf2:	68fb      	ldr	r3, [r7, #12]
20003bf4:	687a      	ldr	r2, [r7, #4]
20003bf6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003bf8:	68fb      	ldr	r3, [r7, #12]
20003bfa:	68fa      	ldr	r2, [r7, #12]
20003bfc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003bfe:	f247 733c 	movw	r3, #30524	; 0x773c
20003c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c06:	681a      	ldr	r2, [r3, #0]
20003c08:	68fb      	ldr	r3, [r7, #12]
20003c0a:	f103 0304 	add.w	r3, r3, #4
20003c0e:	4610      	mov	r0, r2
20003c10:	4619      	mov	r1, r3
20003c12:	f7fd fb67 	bl	200012e4 <vListInsert>
20003c16:	e019      	b.n	20003c4c <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003c18:	f04f 0300 	mov.w	r3, #0
20003c1c:	9300      	str	r3, [sp, #0]
20003c1e:	68f8      	ldr	r0, [r7, #12]
20003c20:	f04f 0100 	mov.w	r1, #0
20003c24:	683a      	ldr	r2, [r7, #0]
20003c26:	f04f 0300 	mov.w	r3, #0
20003c2a:	f7ff fd43 	bl	200036b4 <xTimerGenericCommand>
20003c2e:	4603      	mov	r3, r0
20003c30:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
20003c32:	693b      	ldr	r3, [r7, #16]
20003c34:	2b00      	cmp	r3, #0
20003c36:	d109      	bne.n	20003c4c <prvSwitchTimerLists+0xb0>
20003c38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003c3c:	f383 8811 	msr	BASEPRI, r3
20003c40:	f3bf 8f6f 	isb	sy
20003c44:	f3bf 8f4f 	dsb	sy
20003c48:	617b      	str	r3, [r7, #20]
20003c4a:	e7fe      	b.n	20003c4a <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003c4c:	f247 733c 	movw	r3, #30524	; 0x773c
20003c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c54:	681b      	ldr	r3, [r3, #0]
20003c56:	681b      	ldr	r3, [r3, #0]
20003c58:	2b00      	cmp	r3, #0
20003c5a:	d1a3      	bne.n	20003ba4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
20003c5c:	f247 733c 	movw	r3, #30524	; 0x773c
20003c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c64:	681b      	ldr	r3, [r3, #0]
20003c66:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
20003c68:	f247 7340 	movw	r3, #30528	; 0x7740
20003c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c70:	681a      	ldr	r2, [r3, #0]
20003c72:	f247 733c 	movw	r3, #30524	; 0x773c
20003c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c7a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
20003c7c:	f247 7340 	movw	r3, #30528	; 0x7740
20003c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003c84:	68ba      	ldr	r2, [r7, #8]
20003c86:	601a      	str	r2, [r3, #0]
}
20003c88:	f107 0718 	add.w	r7, r7, #24
20003c8c:	46bd      	mov	sp, r7
20003c8e:	bd80      	pop	{r7, pc}

20003c90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003c90:	b580      	push	{r7, lr}
20003c92:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003c94:	f000 fb82 	bl	2000439c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
20003c98:	f247 7344 	movw	r3, #30532	; 0x7744
20003c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ca0:	681b      	ldr	r3, [r3, #0]
20003ca2:	2b00      	cmp	r3, #0
20003ca4:	d12b      	bne.n	20003cfe <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
20003ca6:	f247 7014 	movw	r0, #30484	; 0x7714
20003caa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003cae:	f7fd fac3 	bl	20001238 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003cb2:	f247 7028 	movw	r0, #30504	; 0x7728
20003cb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003cba:	f7fd fabd 	bl	20001238 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003cbe:	f247 733c 	movw	r3, #30524	; 0x773c
20003cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cc6:	f247 7214 	movw	r2, #30484	; 0x7714
20003cca:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003cce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003cd0:	f247 7340 	movw	r3, #30528	; 0x7740
20003cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cd8:	f247 7228 	movw	r2, #30504	; 0x7728
20003cdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
20003ce0:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
20003ce2:	f04f 0005 	mov.w	r0, #5
20003ce6:	f04f 0110 	mov.w	r1, #16
20003cea:	f04f 0200 	mov.w	r2, #0
20003cee:	f7fd fbd5 	bl	2000149c <xQueueGenericCreate>
20003cf2:	4602      	mov	r2, r0
20003cf4:	f247 7344 	movw	r3, #30532	; 0x7744
20003cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003cfc:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003cfe:	f000 fb85 	bl	2000440c <vPortExitCritical>
}
20003d02:	bd80      	pop	{r7, pc}

20003d04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003d04:	b580      	push	{r7, lr}
20003d06:	b08a      	sub	sp, #40	; 0x28
20003d08:	af00      	add	r7, sp, #0
20003d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003d0c:	f04f 0300 	mov.w	r3, #0
20003d10:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
20003d12:	f7fe fb89 	bl	20002428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003d16:	f64d 1300 	movw	r3, #55552	; 0xd900
20003d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d1e:	681b      	ldr	r3, [r3, #0]
20003d20:	2b00      	cmp	r3, #0
20003d22:	d101      	bne.n	20003d28 <pvPortMalloc+0x24>
		{
			prvHeapInit();
20003d24:	f000 f956 	bl	20003fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003d28:	f64d 130c 	movw	r3, #55564	; 0xd90c
20003d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d30:	681a      	ldr	r2, [r3, #0]
20003d32:	687b      	ldr	r3, [r7, #4]
20003d34:	ea02 0303 	and.w	r3, r2, r3
20003d38:	2b00      	cmp	r3, #0
20003d3a:	f040 80c2 	bne.w	20003ec2 <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003d3e:	687b      	ldr	r3, [r7, #4]
20003d40:	2b00      	cmp	r3, #0
20003d42:	d021      	beq.n	20003d88 <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
20003d44:	f247 5328 	movw	r3, #29992	; 0x7528
20003d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d4c:	681b      	ldr	r3, [r3, #0]
20003d4e:	687a      	ldr	r2, [r7, #4]
20003d50:	4413      	add	r3, r2
20003d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003d54:	687b      	ldr	r3, [r7, #4]
20003d56:	f003 0307 	and.w	r3, r3, #7
20003d5a:	2b00      	cmp	r3, #0
20003d5c:	d014      	beq.n	20003d88 <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
20003d5e:	687b      	ldr	r3, [r7, #4]
20003d60:	f023 0307 	bic.w	r3, r3, #7
20003d64:	f103 0308 	add.w	r3, r3, #8
20003d68:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003d6a:	687b      	ldr	r3, [r7, #4]
20003d6c:	f003 0307 	and.w	r3, r3, #7
20003d70:	2b00      	cmp	r3, #0
20003d72:	d009      	beq.n	20003d88 <pvPortMalloc+0x84>
20003d74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003d78:	f383 8811 	msr	BASEPRI, r3
20003d7c:	f3bf 8f6f 	isb	sy
20003d80:	f3bf 8f4f 	dsb	sy
20003d84:	61fb      	str	r3, [r7, #28]
20003d86:	e7fe      	b.n	20003d86 <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
20003d88:	687b      	ldr	r3, [r7, #4]
20003d8a:	2b00      	cmp	r3, #0
20003d8c:	f000 8099 	beq.w	20003ec2 <pvPortMalloc+0x1be>
20003d90:	f64d 1304 	movw	r3, #55556	; 0xd904
20003d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003d98:	681b      	ldr	r3, [r3, #0]
20003d9a:	687a      	ldr	r2, [r7, #4]
20003d9c:	429a      	cmp	r2, r3
20003d9e:	f200 8090 	bhi.w	20003ec2 <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003da2:	f64d 03f8 	movw	r3, #55544	; 0xd8f8
20003da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003daa:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
20003dac:	f64d 03f8 	movw	r3, #55544	; 0xd8f8
20003db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003db4:	681b      	ldr	r3, [r3, #0]
20003db6:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003db8:	e004      	b.n	20003dc4 <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
20003dba:	68fb      	ldr	r3, [r7, #12]
20003dbc:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
20003dbe:	68fb      	ldr	r3, [r7, #12]
20003dc0:	681b      	ldr	r3, [r3, #0]
20003dc2:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003dc4:	68fb      	ldr	r3, [r7, #12]
20003dc6:	685a      	ldr	r2, [r3, #4]
20003dc8:	687b      	ldr	r3, [r7, #4]
20003dca:	429a      	cmp	r2, r3
20003dcc:	d203      	bcs.n	20003dd6 <pvPortMalloc+0xd2>
20003dce:	68fb      	ldr	r3, [r7, #12]
20003dd0:	681b      	ldr	r3, [r3, #0]
20003dd2:	2b00      	cmp	r3, #0
20003dd4:	d1f1      	bne.n	20003dba <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
20003dd6:	f64d 1300 	movw	r3, #55552	; 0xd900
20003dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003dde:	681b      	ldr	r3, [r3, #0]
20003de0:	68fa      	ldr	r2, [r7, #12]
20003de2:	429a      	cmp	r2, r3
20003de4:	d06d      	beq.n	20003ec2 <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20003de6:	693b      	ldr	r3, [r7, #16]
20003de8:	681a      	ldr	r2, [r3, #0]
20003dea:	f247 5328 	movw	r3, #29992	; 0x7528
20003dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003df2:	681b      	ldr	r3, [r3, #0]
20003df4:	4413      	add	r3, r2
20003df6:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20003df8:	68fb      	ldr	r3, [r7, #12]
20003dfa:	681a      	ldr	r2, [r3, #0]
20003dfc:	693b      	ldr	r3, [r7, #16]
20003dfe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003e00:	68fb      	ldr	r3, [r7, #12]
20003e02:	685a      	ldr	r2, [r3, #4]
20003e04:	687b      	ldr	r3, [r7, #4]
20003e06:	ebc3 0202 	rsb	r2, r3, r2
20003e0a:	f247 5328 	movw	r3, #29992	; 0x7528
20003e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e12:	681b      	ldr	r3, [r3, #0]
20003e14:	ea4f 0343 	mov.w	r3, r3, lsl #1
20003e18:	429a      	cmp	r2, r3
20003e1a:	d91f      	bls.n	20003e5c <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003e1c:	68fa      	ldr	r2, [r7, #12]
20003e1e:	687b      	ldr	r3, [r7, #4]
20003e20:	4413      	add	r3, r2
20003e22:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20003e24:	697b      	ldr	r3, [r7, #20]
20003e26:	f003 0307 	and.w	r3, r3, #7
20003e2a:	2b00      	cmp	r3, #0
20003e2c:	d009      	beq.n	20003e42 <pvPortMalloc+0x13e>
20003e2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003e32:	f383 8811 	msr	BASEPRI, r3
20003e36:	f3bf 8f6f 	isb	sy
20003e3a:	f3bf 8f4f 	dsb	sy
20003e3e:	623b      	str	r3, [r7, #32]
20003e40:	e7fe      	b.n	20003e40 <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
20003e42:	68fb      	ldr	r3, [r7, #12]
20003e44:	685a      	ldr	r2, [r3, #4]
20003e46:	687b      	ldr	r3, [r7, #4]
20003e48:	ebc3 0202 	rsb	r2, r3, r2
20003e4c:	697b      	ldr	r3, [r7, #20]
20003e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
20003e50:	68fb      	ldr	r3, [r7, #12]
20003e52:	687a      	ldr	r2, [r7, #4]
20003e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
20003e56:	6978      	ldr	r0, [r7, #20]
20003e58:	f000 f93e 	bl	200040d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20003e5c:	f64d 1304 	movw	r3, #55556	; 0xd904
20003e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e64:	681a      	ldr	r2, [r3, #0]
20003e66:	68fb      	ldr	r3, [r7, #12]
20003e68:	685b      	ldr	r3, [r3, #4]
20003e6a:	ebc3 0202 	rsb	r2, r3, r2
20003e6e:	f64d 1304 	movw	r3, #55556	; 0xd904
20003e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e76:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
20003e78:	f64d 1304 	movw	r3, #55556	; 0xd904
20003e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e80:	681a      	ldr	r2, [r3, #0]
20003e82:	f64d 1308 	movw	r3, #55560	; 0xd908
20003e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e8a:	681b      	ldr	r3, [r3, #0]
20003e8c:	429a      	cmp	r2, r3
20003e8e:	d209      	bcs.n	20003ea4 <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
20003e90:	f64d 1304 	movw	r3, #55556	; 0xd904
20003e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003e98:	681a      	ldr	r2, [r3, #0]
20003e9a:	f64d 1308 	movw	r3, #55560	; 0xd908
20003e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003ea2:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
20003ea4:	68fb      	ldr	r3, [r7, #12]
20003ea6:	685a      	ldr	r2, [r3, #4]
20003ea8:	f64d 130c 	movw	r3, #55564	; 0xd90c
20003eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003eb0:	681b      	ldr	r3, [r3, #0]
20003eb2:	ea42 0203 	orr.w	r2, r2, r3
20003eb6:	68fb      	ldr	r3, [r7, #12]
20003eb8:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20003eba:	68fb      	ldr	r3, [r7, #12]
20003ebc:	f04f 0200 	mov.w	r2, #0
20003ec0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
20003ec2:	f7fe fac3 	bl	2000244c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
20003ec6:	69bb      	ldr	r3, [r7, #24]
20003ec8:	2b00      	cmp	r3, #0
20003eca:	d101      	bne.n	20003ed0 <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
20003ecc:	f7fc faa6 	bl	2000041c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
20003ed0:	69bb      	ldr	r3, [r7, #24]
20003ed2:	f003 0307 	and.w	r3, r3, #7
20003ed6:	2b00      	cmp	r3, #0
20003ed8:	d009      	beq.n	20003eee <pvPortMalloc+0x1ea>
20003eda:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003ede:	f383 8811 	msr	BASEPRI, r3
20003ee2:	f3bf 8f6f 	isb	sy
20003ee6:	f3bf 8f4f 	dsb	sy
20003eea:	627b      	str	r3, [r7, #36]	; 0x24
20003eec:	e7fe      	b.n	20003eec <pvPortMalloc+0x1e8>
	return pvReturn;
20003eee:	69bb      	ldr	r3, [r7, #24]
}
20003ef0:	4618      	mov	r0, r3
20003ef2:	f107 0728 	add.w	r7, r7, #40	; 0x28
20003ef6:	46bd      	mov	sp, r7
20003ef8:	bd80      	pop	{r7, pc}
20003efa:	bf00      	nop

20003efc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20003efc:	b580      	push	{r7, lr}
20003efe:	b086      	sub	sp, #24
20003f00:	af00      	add	r7, sp, #0
20003f02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20003f04:	687b      	ldr	r3, [r7, #4]
20003f06:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
20003f08:	687b      	ldr	r3, [r7, #4]
20003f0a:	2b00      	cmp	r3, #0
20003f0c:	d05e      	beq.n	20003fcc <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20003f0e:	f247 5328 	movw	r3, #29992	; 0x7528
20003f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f16:	681b      	ldr	r3, [r3, #0]
20003f18:	f1c3 0300 	rsb	r3, r3, #0
20003f1c:	68ba      	ldr	r2, [r7, #8]
20003f1e:	4413      	add	r3, r2
20003f20:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
20003f22:	68bb      	ldr	r3, [r7, #8]
20003f24:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
20003f26:	68fb      	ldr	r3, [r7, #12]
20003f28:	685a      	ldr	r2, [r3, #4]
20003f2a:	f64d 130c 	movw	r3, #55564	; 0xd90c
20003f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f32:	681b      	ldr	r3, [r3, #0]
20003f34:	ea02 0303 	and.w	r3, r2, r3
20003f38:	2b00      	cmp	r3, #0
20003f3a:	d109      	bne.n	20003f50 <vPortFree+0x54>
20003f3c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f40:	f383 8811 	msr	BASEPRI, r3
20003f44:	f3bf 8f6f 	isb	sy
20003f48:	f3bf 8f4f 	dsb	sy
20003f4c:	613b      	str	r3, [r7, #16]
20003f4e:	e7fe      	b.n	20003f4e <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
20003f50:	68fb      	ldr	r3, [r7, #12]
20003f52:	681b      	ldr	r3, [r3, #0]
20003f54:	2b00      	cmp	r3, #0
20003f56:	d009      	beq.n	20003f6c <vPortFree+0x70>
20003f58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20003f5c:	f383 8811 	msr	BASEPRI, r3
20003f60:	f3bf 8f6f 	isb	sy
20003f64:	f3bf 8f4f 	dsb	sy
20003f68:	617b      	str	r3, [r7, #20]
20003f6a:	e7fe      	b.n	20003f6a <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20003f6c:	68fb      	ldr	r3, [r7, #12]
20003f6e:	685a      	ldr	r2, [r3, #4]
20003f70:	f64d 130c 	movw	r3, #55564	; 0xd90c
20003f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f78:	681b      	ldr	r3, [r3, #0]
20003f7a:	ea02 0303 	and.w	r3, r2, r3
20003f7e:	2b00      	cmp	r3, #0
20003f80:	d024      	beq.n	20003fcc <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20003f82:	68fb      	ldr	r3, [r7, #12]
20003f84:	681b      	ldr	r3, [r3, #0]
20003f86:	2b00      	cmp	r3, #0
20003f88:	d120      	bne.n	20003fcc <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20003f8a:	68fb      	ldr	r3, [r7, #12]
20003f8c:	685a      	ldr	r2, [r3, #4]
20003f8e:	f64d 130c 	movw	r3, #55564	; 0xd90c
20003f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003f96:	681b      	ldr	r3, [r3, #0]
20003f98:	ea6f 0303 	mvn.w	r3, r3
20003f9c:	ea02 0203 	and.w	r2, r2, r3
20003fa0:	68fb      	ldr	r3, [r7, #12]
20003fa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20003fa4:	f7fe fa40 	bl	20002428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20003fa8:	68fb      	ldr	r3, [r7, #12]
20003faa:	685a      	ldr	r2, [r3, #4]
20003fac:	f64d 1304 	movw	r3, #55556	; 0xd904
20003fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fb4:	681b      	ldr	r3, [r3, #0]
20003fb6:	441a      	add	r2, r3
20003fb8:	f64d 1304 	movw	r3, #55556	; 0xd904
20003fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fc0:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
20003fc2:	68f8      	ldr	r0, [r7, #12]
20003fc4:	f000 f888 	bl	200040d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
20003fc8:	f7fe fa40 	bl	2000244c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20003fcc:	f107 0718 	add.w	r7, r7, #24
20003fd0:	46bd      	mov	sp, r7
20003fd2:	bd80      	pop	{r7, pc}

20003fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20003fd4:	b480      	push	{r7}
20003fd6:	b085      	sub	sp, #20
20003fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20003fda:	f246 13a8 	movw	r3, #25000	; 0x61a8
20003fde:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20003fe0:	f247 7350 	movw	r3, #30544	; 0x7750
20003fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003fe8:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20003fea:	68bb      	ldr	r3, [r7, #8]
20003fec:	f003 0307 	and.w	r3, r3, #7
20003ff0:	2b00      	cmp	r3, #0
20003ff2:	d011      	beq.n	20004018 <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20003ff4:	68bb      	ldr	r3, [r7, #8]
20003ff6:	f103 0307 	add.w	r3, r3, #7
20003ffa:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003ffc:	68bb      	ldr	r3, [r7, #8]
20003ffe:	f023 0307 	bic.w	r3, r3, #7
20004002:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20004004:	68fa      	ldr	r2, [r7, #12]
20004006:	68bb      	ldr	r3, [r7, #8]
20004008:	ebc3 0202 	rsb	r2, r3, r2
2000400c:	f247 7350 	movw	r3, #30544	; 0x7750
20004010:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004014:	4413      	add	r3, r2
20004016:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20004018:	68bb      	ldr	r3, [r7, #8]
2000401a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
2000401c:	687a      	ldr	r2, [r7, #4]
2000401e:	f64d 03f8 	movw	r3, #55544	; 0xd8f8
20004022:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004026:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
20004028:	f64d 03f8 	movw	r3, #55544	; 0xd8f8
2000402c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004030:	f04f 0200 	mov.w	r2, #0
20004034:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
20004036:	687a      	ldr	r2, [r7, #4]
20004038:	68fb      	ldr	r3, [r7, #12]
2000403a:	4413      	add	r3, r2
2000403c:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
2000403e:	f247 5328 	movw	r3, #29992	; 0x7528
20004042:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004046:	681b      	ldr	r3, [r3, #0]
20004048:	68ba      	ldr	r2, [r7, #8]
2000404a:	ebc3 0302 	rsb	r3, r3, r2
2000404e:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20004050:	68bb      	ldr	r3, [r7, #8]
20004052:	f023 0307 	bic.w	r3, r3, #7
20004056:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
20004058:	68ba      	ldr	r2, [r7, #8]
2000405a:	f64d 1300 	movw	r3, #55552	; 0xd900
2000405e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004062:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
20004064:	f64d 1300 	movw	r3, #55552	; 0xd900
20004068:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000406c:	681b      	ldr	r3, [r3, #0]
2000406e:	f04f 0200 	mov.w	r2, #0
20004072:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
20004074:	f64d 1300 	movw	r3, #55552	; 0xd900
20004078:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000407c:	681b      	ldr	r3, [r3, #0]
2000407e:	f04f 0200 	mov.w	r2, #0
20004082:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20004084:	687b      	ldr	r3, [r7, #4]
20004086:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
20004088:	683b      	ldr	r3, [r7, #0]
2000408a:	68ba      	ldr	r2, [r7, #8]
2000408c:	ebc3 0202 	rsb	r2, r3, r2
20004090:	683b      	ldr	r3, [r7, #0]
20004092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20004094:	f64d 1300 	movw	r3, #55552	; 0xd900
20004098:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000409c:	681a      	ldr	r2, [r3, #0]
2000409e:	683b      	ldr	r3, [r7, #0]
200040a0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
200040a2:	683b      	ldr	r3, [r7, #0]
200040a4:	685a      	ldr	r2, [r3, #4]
200040a6:	f64d 1308 	movw	r3, #55560	; 0xd908
200040aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040ae:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
200040b0:	683b      	ldr	r3, [r7, #0]
200040b2:	685a      	ldr	r2, [r3, #4]
200040b4:	f64d 1304 	movw	r3, #55556	; 0xd904
200040b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040bc:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
200040be:	f64d 130c 	movw	r3, #55564	; 0xd90c
200040c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
200040ca:	601a      	str	r2, [r3, #0]
}
200040cc:	f107 0714 	add.w	r7, r7, #20
200040d0:	46bd      	mov	sp, r7
200040d2:	bc80      	pop	{r7}
200040d4:	4770      	bx	lr
200040d6:	bf00      	nop

200040d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
200040d8:	b480      	push	{r7}
200040da:	b085      	sub	sp, #20
200040dc:	af00      	add	r7, sp, #0
200040de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
200040e0:	f64d 03f8 	movw	r3, #55544	; 0xd8f8
200040e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200040e8:	60bb      	str	r3, [r7, #8]
200040ea:	e002      	b.n	200040f2 <prvInsertBlockIntoFreeList+0x1a>
200040ec:	68bb      	ldr	r3, [r7, #8]
200040ee:	681b      	ldr	r3, [r3, #0]
200040f0:	60bb      	str	r3, [r7, #8]
200040f2:	68bb      	ldr	r3, [r7, #8]
200040f4:	681a      	ldr	r2, [r3, #0]
200040f6:	687b      	ldr	r3, [r7, #4]
200040f8:	429a      	cmp	r2, r3
200040fa:	d3f7      	bcc.n	200040ec <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
200040fc:	68bb      	ldr	r3, [r7, #8]
200040fe:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
20004100:	68bb      	ldr	r3, [r7, #8]
20004102:	685a      	ldr	r2, [r3, #4]
20004104:	68fb      	ldr	r3, [r7, #12]
20004106:	441a      	add	r2, r3
20004108:	687b      	ldr	r3, [r7, #4]
2000410a:	429a      	cmp	r2, r3
2000410c:	d108      	bne.n	20004120 <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
2000410e:	68bb      	ldr	r3, [r7, #8]
20004110:	685a      	ldr	r2, [r3, #4]
20004112:	687b      	ldr	r3, [r7, #4]
20004114:	685b      	ldr	r3, [r3, #4]
20004116:	441a      	add	r2, r3
20004118:	68bb      	ldr	r3, [r7, #8]
2000411a:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
2000411c:	68bb      	ldr	r3, [r7, #8]
2000411e:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
20004120:	687b      	ldr	r3, [r7, #4]
20004122:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
20004124:	687b      	ldr	r3, [r7, #4]
20004126:	685a      	ldr	r2, [r3, #4]
20004128:	68fb      	ldr	r3, [r7, #12]
2000412a:	441a      	add	r2, r3
2000412c:	68bb      	ldr	r3, [r7, #8]
2000412e:	681b      	ldr	r3, [r3, #0]
20004130:	429a      	cmp	r2, r3
20004132:	d11e      	bne.n	20004172 <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
20004134:	68bb      	ldr	r3, [r7, #8]
20004136:	681a      	ldr	r2, [r3, #0]
20004138:	f64d 1300 	movw	r3, #55552	; 0xd900
2000413c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004140:	681b      	ldr	r3, [r3, #0]
20004142:	429a      	cmp	r2, r3
20004144:	d00d      	beq.n	20004162 <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
20004146:	687b      	ldr	r3, [r7, #4]
20004148:	685a      	ldr	r2, [r3, #4]
2000414a:	68bb      	ldr	r3, [r7, #8]
2000414c:	681b      	ldr	r3, [r3, #0]
2000414e:	685b      	ldr	r3, [r3, #4]
20004150:	441a      	add	r2, r3
20004152:	687b      	ldr	r3, [r7, #4]
20004154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
20004156:	68bb      	ldr	r3, [r7, #8]
20004158:	681b      	ldr	r3, [r3, #0]
2000415a:	681a      	ldr	r2, [r3, #0]
2000415c:	687b      	ldr	r3, [r7, #4]
2000415e:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
20004160:	e00b      	b.n	2000417a <prvInsertBlockIntoFreeList+0xa2>
20004162:	f64d 1300 	movw	r3, #55552	; 0xd900
20004166:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000416a:	681a      	ldr	r2, [r3, #0]
2000416c:	687b      	ldr	r3, [r7, #4]
2000416e:	601a      	str	r2, [r3, #0]
20004170:	e003      	b.n	2000417a <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
20004172:	68bb      	ldr	r3, [r7, #8]
20004174:	681a      	ldr	r2, [r3, #0]
20004176:	687b      	ldr	r3, [r7, #4]
20004178:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
2000417a:	68ba      	ldr	r2, [r7, #8]
2000417c:	687b      	ldr	r3, [r7, #4]
2000417e:	429a      	cmp	r2, r3
20004180:	d002      	beq.n	20004188 <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
20004182:	68bb      	ldr	r3, [r7, #8]
20004184:	687a      	ldr	r2, [r7, #4]
20004186:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20004188:	f107 0714 	add.w	r7, r7, #20
2000418c:	46bd      	mov	sp, r7
2000418e:	bc80      	pop	{r7}
20004190:	4770      	bx	lr
20004192:	bf00      	nop

20004194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20004194:	b480      	push	{r7}
20004196:	b085      	sub	sp, #20
20004198:	af00      	add	r7, sp, #0
2000419a:	60f8      	str	r0, [r7, #12]
2000419c:	60b9      	str	r1, [r7, #8]
2000419e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
200041a0:	68fb      	ldr	r3, [r7, #12]
200041a2:	f1a3 0304 	sub.w	r3, r3, #4
200041a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
200041a8:	68fb      	ldr	r3, [r7, #12]
200041aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
200041ae:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
200041b0:	68fb      	ldr	r3, [r7, #12]
200041b2:	f1a3 0304 	sub.w	r3, r3, #4
200041b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
200041b8:	68bb      	ldr	r3, [r7, #8]
200041ba:	f023 0201 	bic.w	r2, r3, #1
200041be:	68fb      	ldr	r3, [r7, #12]
200041c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
200041c2:	68fb      	ldr	r3, [r7, #12]
200041c4:	f1a3 0304 	sub.w	r3, r3, #4
200041c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
200041ca:	f244 13fd 	movw	r3, #16893	; 0x41fd
200041ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200041d2:	68fa      	ldr	r2, [r7, #12]
200041d4:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
200041d6:	68fb      	ldr	r3, [r7, #12]
200041d8:	f1a3 0314 	sub.w	r3, r3, #20
200041dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
200041de:	687a      	ldr	r2, [r7, #4]
200041e0:	68fb      	ldr	r3, [r7, #12]
200041e2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
200041e4:	68fb      	ldr	r3, [r7, #12]
200041e6:	f1a3 0320 	sub.w	r3, r3, #32
200041ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
200041ec:	68fb      	ldr	r3, [r7, #12]
}
200041ee:	4618      	mov	r0, r3
200041f0:	f107 0714 	add.w	r7, r7, #20
200041f4:	46bd      	mov	sp, r7
200041f6:	bc80      	pop	{r7}
200041f8:	4770      	bx	lr
200041fa:	bf00      	nop

200041fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
200041fc:	b480      	push	{r7}
200041fe:	b083      	sub	sp, #12
20004200:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
20004202:	f247 53a0 	movw	r3, #30112	; 0x75a0
20004206:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000420a:	681b      	ldr	r3, [r3, #0]
2000420c:	f1b3 3fff 	cmp.w	r3, #4294967295
20004210:	d009      	beq.n	20004226 <prvTaskExitError+0x2a>
20004212:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004216:	f383 8811 	msr	BASEPRI, r3
2000421a:	f3bf 8f6f 	isb	sy
2000421e:	f3bf 8f4f 	dsb	sy
20004222:	603b      	str	r3, [r7, #0]
20004224:	e7fe      	b.n	20004224 <prvTaskExitError+0x28>
20004226:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000422a:	f383 8811 	msr	BASEPRI, r3
2000422e:	f3bf 8f6f 	isb	sy
20004232:	f3bf 8f4f 	dsb	sy
20004236:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
20004238:	e7fe      	b.n	20004238 <prvTaskExitError+0x3c>
2000423a:	bf00      	nop
2000423c:	0000      	lsls	r0, r0, #0
	...

20004240 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20004240:	4b07      	ldr	r3, [pc, #28]	; (20004260 <pxCurrentTCBConst2>)
20004242:	6819      	ldr	r1, [r3, #0]
20004244:	6808      	ldr	r0, [r1, #0]
20004246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
2000424a:	f380 8809 	msr	PSP, r0
2000424e:	f3bf 8f6f 	isb	sy
20004252:	f04f 0000 	mov.w	r0, #0
20004256:	f380 8811 	msr	BASEPRI, r0
2000425a:	f04e 0e0d 	orr.w	lr, lr, #13
2000425e:	4770      	bx	lr

20004260 <pxCurrentTCBConst2>:
20004260:	20007608 	.word	0x20007608
20004264:	f3af 8000 	nop.w
20004268:	f3af 8000 	nop.w
2000426c:	f3af 8000 	nop.w

20004270 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
20004270:	4806      	ldr	r0, [pc, #24]	; (2000428c <prvPortStartFirstTask+0x1c>)
20004272:	6800      	ldr	r0, [r0, #0]
20004274:	6800      	ldr	r0, [r0, #0]
20004276:	f380 8808 	msr	MSP, r0
2000427a:	b662      	cpsie	i
2000427c:	b661      	cpsie	f
2000427e:	f3bf 8f4f 	dsb	sy
20004282:	f3bf 8f6f 	isb	sy
20004286:	df00      	svc	0
20004288:	bf00      	nop
2000428a:	0000      	.short	0x0000
2000428c:	e000ed08 	.word	0xe000ed08

20004290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20004290:	b580      	push	{r7, lr}
20004292:	b084      	sub	sp, #16
20004294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20004296:	f24e 4300 	movw	r3, #58368	; 0xe400
2000429a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000429e:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
200042a0:	68fb      	ldr	r3, [r7, #12]
200042a2:	781b      	ldrb	r3, [r3, #0]
200042a4:	b2db      	uxtb	r3, r3
200042a6:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
200042a8:	68fb      	ldr	r3, [r7, #12]
200042aa:	f04f 32ff 	mov.w	r2, #4294967295
200042ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
200042b0:	68fb      	ldr	r3, [r7, #12]
200042b2:	781b      	ldrb	r3, [r3, #0]
200042b4:	b2db      	uxtb	r3, r3
200042b6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
200042b8:	79fb      	ldrb	r3, [r7, #7]
200042ba:	b2db      	uxtb	r3, r3
200042bc:	461a      	mov	r2, r3
200042be:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
200042c2:	f64d 1310 	movw	r3, #55568	; 0xd910
200042c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042ca:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
200042cc:	f64d 1314 	movw	r3, #55572	; 0xd914
200042d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042d4:	f04f 0207 	mov.w	r2, #7
200042d8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
200042da:	e011      	b.n	20004300 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
200042dc:	f64d 1314 	movw	r3, #55572	; 0xd914
200042e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042e4:	681b      	ldr	r3, [r3, #0]
200042e6:	f103 32ff 	add.w	r2, r3, #4294967295
200042ea:	f64d 1314 	movw	r3, #55572	; 0xd914
200042ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200042f2:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
200042f4:	79fb      	ldrb	r3, [r7, #7]
200042f6:	b2db      	uxtb	r3, r3
200042f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
200042fc:	b2db      	uxtb	r3, r3
200042fe:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20004300:	79fb      	ldrb	r3, [r7, #7]
20004302:	b2db      	uxtb	r3, r3
20004304:	b25b      	sxtb	r3, r3
20004306:	2b00      	cmp	r3, #0
20004308:	dbe8      	blt.n	200042dc <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
2000430a:	f64d 1314 	movw	r3, #55572	; 0xd914
2000430e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004312:	681b      	ldr	r3, [r3, #0]
20004314:	ea4f 2203 	mov.w	r2, r3, lsl #8
20004318:	f64d 1314 	movw	r3, #55572	; 0xd914
2000431c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004320:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20004322:	f64d 1314 	movw	r3, #55572	; 0xd914
20004326:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000432a:	681b      	ldr	r3, [r3, #0]
2000432c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20004330:	f64d 1314 	movw	r3, #55572	; 0xd914
20004334:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004338:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
2000433a:	68bb      	ldr	r3, [r7, #8]
2000433c:	b2da      	uxtb	r2, r3
2000433e:	68fb      	ldr	r3, [r7, #12]
20004340:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
20004342:	f64e 5320 	movw	r3, #60704	; 0xed20
20004346:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000434a:	f64e 5220 	movw	r2, #60704	; 0xed20
2000434e:	f2ce 0200 	movt	r2, #57344	; 0xe000
20004352:	6812      	ldr	r2, [r2, #0]
20004354:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
20004358:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
2000435a:	f64e 5320 	movw	r3, #60704	; 0xed20
2000435e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004362:	f64e 5220 	movw	r2, #60704	; 0xed20
20004366:	f2ce 0200 	movt	r2, #57344	; 0xe000
2000436a:	6812      	ldr	r2, [r2, #0]
2000436c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
20004370:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
20004372:	f000 f8c7 	bl	20004504 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
20004376:	f247 53a0 	movw	r3, #30112	; 0x75a0
2000437a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000437e:	f04f 0200 	mov.w	r2, #0
20004382:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20004384:	f7ff ff74 	bl	20004270 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
20004388:	f7ff ff38 	bl	200041fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
2000438c:	f04f 0300 	mov.w	r3, #0
}
20004390:	4618      	mov	r0, r3
20004392:	f107 0710 	add.w	r7, r7, #16
20004396:	46bd      	mov	sp, r7
20004398:	bd80      	pop	{r7, pc}
2000439a:	bf00      	nop

2000439c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
2000439c:	b480      	push	{r7}
2000439e:	b083      	sub	sp, #12
200043a0:	af00      	add	r7, sp, #0
200043a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200043a6:	f383 8811 	msr	BASEPRI, r3
200043aa:	f3bf 8f6f 	isb	sy
200043ae:	f3bf 8f4f 	dsb	sy
200043b2:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
200043b4:	f247 53a0 	movw	r3, #30112	; 0x75a0
200043b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043bc:	681b      	ldr	r3, [r3, #0]
200043be:	f103 0201 	add.w	r2, r3, #1
200043c2:	f247 53a0 	movw	r3, #30112	; 0x75a0
200043c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043ca:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
200043cc:	f247 53a0 	movw	r3, #30112	; 0x75a0
200043d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200043d4:	681b      	ldr	r3, [r3, #0]
200043d6:	2b01      	cmp	r3, #1
200043d8:	d112      	bne.n	20004400 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
200043da:	f64e 5304 	movw	r3, #60676	; 0xed04
200043de:	f2ce 0300 	movt	r3, #57344	; 0xe000
200043e2:	681b      	ldr	r3, [r3, #0]
200043e4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
200043e8:	2b00      	cmp	r3, #0
200043ea:	d009      	beq.n	20004400 <vPortEnterCritical+0x64>
200043ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200043f0:	f383 8811 	msr	BASEPRI, r3
200043f4:	f3bf 8f6f 	isb	sy
200043f8:	f3bf 8f4f 	dsb	sy
200043fc:	607b      	str	r3, [r7, #4]
200043fe:	e7fe      	b.n	200043fe <vPortEnterCritical+0x62>
	}
}
20004400:	f107 070c 	add.w	r7, r7, #12
20004404:	46bd      	mov	sp, r7
20004406:	bc80      	pop	{r7}
20004408:	4770      	bx	lr
2000440a:	bf00      	nop

2000440c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
2000440c:	b480      	push	{r7}
2000440e:	b083      	sub	sp, #12
20004410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20004412:	f247 53a0 	movw	r3, #30112	; 0x75a0
20004416:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000441a:	681b      	ldr	r3, [r3, #0]
2000441c:	2b00      	cmp	r3, #0
2000441e:	d109      	bne.n	20004434 <vPortExitCritical+0x28>
20004420:	f04f 03a0 	mov.w	r3, #160	; 0xa0
20004424:	f383 8811 	msr	BASEPRI, r3
20004428:	f3bf 8f6f 	isb	sy
2000442c:	f3bf 8f4f 	dsb	sy
20004430:	603b      	str	r3, [r7, #0]
20004432:	e7fe      	b.n	20004432 <vPortExitCritical+0x26>
	uxCriticalNesting--;
20004434:	f247 53a0 	movw	r3, #30112	; 0x75a0
20004438:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000443c:	681b      	ldr	r3, [r3, #0]
2000443e:	f103 32ff 	add.w	r2, r3, #4294967295
20004442:	f247 53a0 	movw	r3, #30112	; 0x75a0
20004446:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000444a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
2000444c:	f247 53a0 	movw	r3, #30112	; 0x75a0
20004450:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004454:	681b      	ldr	r3, [r3, #0]
20004456:	2b00      	cmp	r3, #0
20004458:	d105      	bne.n	20004466 <vPortExitCritical+0x5a>
2000445a:	f04f 0300 	mov.w	r3, #0
2000445e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20004460:	687b      	ldr	r3, [r7, #4]
20004462:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
20004466:	f107 070c 	add.w	r7, r7, #12
2000446a:	46bd      	mov	sp, r7
2000446c:	bc80      	pop	{r7}
2000446e:	4770      	bx	lr

20004470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20004470:	f3ef 8009 	mrs	r0, PSP
20004474:	f3bf 8f6f 	isb	sy
20004478:	4b0d      	ldr	r3, [pc, #52]	; (200044b0 <pxCurrentTCBConst>)
2000447a:	681a      	ldr	r2, [r3, #0]
2000447c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
20004480:	6010      	str	r0, [r2, #0]
20004482:	e92d 4008 	stmdb	sp!, {r3, lr}
20004486:	f04f 00a0 	mov.w	r0, #160	; 0xa0
2000448a:	f380 8811 	msr	BASEPRI, r0
2000448e:	f7fe f9c5 	bl	2000281c <vTaskSwitchContext>
20004492:	f04f 0000 	mov.w	r0, #0
20004496:	f380 8811 	msr	BASEPRI, r0
2000449a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2000449e:	6819      	ldr	r1, [r3, #0]
200044a0:	6808      	ldr	r0, [r1, #0]
200044a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
200044a6:	f380 8809 	msr	PSP, r0
200044aa:	f3bf 8f6f 	isb	sy
200044ae:	4770      	bx	lr

200044b0 <pxCurrentTCBConst>:
200044b0:	20007608 	.word	0x20007608
200044b4:	f3af 8000 	nop.w
200044b8:	f3af 8000 	nop.w
200044bc:	f3af 8000 	nop.w

200044c0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
200044c0:	b580      	push	{r7, lr}
200044c2:	b082      	sub	sp, #8
200044c4:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200044c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200044ca:	f383 8811 	msr	BASEPRI, r3
200044ce:	f3bf 8f6f 	isb	sy
200044d2:	f3bf 8f4f 	dsb	sy
200044d6:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
200044d8:	f7fe f898 	bl	2000260c <xTaskIncrementTick>
200044dc:	4603      	mov	r3, r0
200044de:	2b00      	cmp	r3, #0
200044e0:	d006      	beq.n	200044f0 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
200044e2:	f64e 5304 	movw	r3, #60676	; 0xed04
200044e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200044ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200044ee:	601a      	str	r2, [r3, #0]
200044f0:	f04f 0300 	mov.w	r3, #0
200044f4:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
200044f6:	687b      	ldr	r3, [r7, #4]
200044f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
200044fc:	f107 0708 	add.w	r7, r7, #8
20004500:	46bd      	mov	sp, r7
20004502:	bd80      	pop	{r7, pc}

20004504 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20004504:	b480      	push	{r7}
20004506:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20004508:	f24e 0314 	movw	r3, #57364	; 0xe014
2000450c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004510:	f247 52e0 	movw	r2, #30176	; 0x75e0
20004514:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004518:	6811      	ldr	r1, [r2, #0]
2000451a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
2000451e:	f2c1 0262 	movt	r2, #4194	; 0x1062
20004522:	fba2 0201 	umull	r0, r2, r2, r1
20004526:	ea4f 1292 	mov.w	r2, r2, lsr #6
2000452a:	f102 32ff 	add.w	r2, r2, #4294967295
2000452e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20004530:	f24e 0310 	movw	r3, #57360	; 0xe010
20004534:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004538:	f04f 0207 	mov.w	r2, #7
2000453c:	601a      	str	r2, [r3, #0]
}
2000453e:	46bd      	mov	sp, r7
20004540:	bc80      	pop	{r7}
20004542:	4770      	bx	lr

20004544 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20004544:	b480      	push	{r7}
20004546:	b085      	sub	sp, #20
20004548:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
2000454a:	f3ef 8305 	mrs	r3, IPSR
2000454e:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
20004550:	683b      	ldr	r3, [r7, #0]
20004552:	2b0f      	cmp	r3, #15
20004554:	d91a      	bls.n	2000458c <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
20004556:	f247 532c 	movw	r3, #29996	; 0x752c
2000455a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000455e:	681a      	ldr	r2, [r3, #0]
20004560:	683b      	ldr	r3, [r7, #0]
20004562:	4413      	add	r3, r2
20004564:	781b      	ldrb	r3, [r3, #0]
20004566:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
20004568:	f64d 1310 	movw	r3, #55568	; 0xd910
2000456c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004570:	781b      	ldrb	r3, [r3, #0]
20004572:	79fa      	ldrb	r2, [r7, #7]
20004574:	429a      	cmp	r2, r3
20004576:	d209      	bcs.n	2000458c <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20004578:	f04f 03a0 	mov.w	r3, #160	; 0xa0
2000457c:	f383 8811 	msr	BASEPRI, r3
20004580:	f3bf 8f6f 	isb	sy
20004584:	f3bf 8f4f 	dsb	sy
20004588:	60bb      	str	r3, [r7, #8]
2000458a:	e7fe      	b.n	2000458a <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
2000458c:	f64e 530c 	movw	r3, #60684	; 0xed0c
20004590:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004594:	681b      	ldr	r3, [r3, #0]
20004596:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
2000459a:	f64d 1314 	movw	r3, #55572	; 0xd914
2000459e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200045a2:	681b      	ldr	r3, [r3, #0]
200045a4:	429a      	cmp	r2, r3
200045a6:	d909      	bls.n	200045bc <vPortValidateInterruptPriority+0x78>
200045a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
200045ac:	f383 8811 	msr	BASEPRI, r3
200045b0:	f3bf 8f6f 	isb	sy
200045b4:	f3bf 8f4f 	dsb	sy
200045b8:	60fb      	str	r3, [r7, #12]
200045ba:	e7fe      	b.n	200045ba <vPortValidateInterruptPriority+0x76>
	}
200045bc:	f107 0714 	add.w	r7, r7, #20
200045c0:	46bd      	mov	sp, r7
200045c2:	bc80      	pop	{r7}
200045c4:	4770      	bx	lr
200045c6:	bf00      	nop

200045c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200045c8:	b480      	push	{r7}
200045ca:	b083      	sub	sp, #12
200045cc:	af00      	add	r7, sp, #0
200045ce:	4603      	mov	r3, r0
200045d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200045d2:	f24e 1300 	movw	r3, #57600	; 0xe100
200045d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200045da:	f997 2007 	ldrsb.w	r2, [r7, #7]
200045de:	ea4f 1252 	mov.w	r2, r2, lsr #5
200045e2:	79f9      	ldrb	r1, [r7, #7]
200045e4:	f001 011f 	and.w	r1, r1, #31
200045e8:	f04f 0001 	mov.w	r0, #1
200045ec:	fa00 f101 	lsl.w	r1, r0, r1
200045f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200045f4:	f107 070c 	add.w	r7, r7, #12
200045f8:	46bd      	mov	sp, r7
200045fa:	bc80      	pop	{r7}
200045fc:	4770      	bx	lr
200045fe:	bf00      	nop

20004600 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20004600:	b480      	push	{r7}
20004602:	b083      	sub	sp, #12
20004604:	af00      	add	r7, sp, #0
20004606:	4603      	mov	r3, r0
20004608:	6039      	str	r1, [r7, #0]
2000460a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
2000460c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004610:	2b00      	cmp	r3, #0
20004612:	da10      	bge.n	20004636 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
20004614:	f64e 5300 	movw	r3, #60672	; 0xed00
20004618:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000461c:	79fa      	ldrb	r2, [r7, #7]
2000461e:	f002 020f 	and.w	r2, r2, #15
20004622:	f1a2 0104 	sub.w	r1, r2, #4
20004626:	683a      	ldr	r2, [r7, #0]
20004628:	b2d2      	uxtb	r2, r2
2000462a:	ea4f 1202 	mov.w	r2, r2, lsl #4
2000462e:	b2d2      	uxtb	r2, r2
20004630:	440b      	add	r3, r1
20004632:	761a      	strb	r2, [r3, #24]
20004634:	e00d      	b.n	20004652 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
20004636:	f24e 1300 	movw	r3, #57600	; 0xe100
2000463a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000463e:	f997 1007 	ldrsb.w	r1, [r7, #7]
20004642:	683a      	ldr	r2, [r7, #0]
20004644:	b2d2      	uxtb	r2, r2
20004646:	ea4f 1202 	mov.w	r2, r2, lsl #4
2000464a:	b2d2      	uxtb	r2, r2
2000464c:	440b      	add	r3, r1
2000464e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
20004652:	f107 070c 	add.w	r7, r7, #12
20004656:	46bd      	mov	sp, r7
20004658:	bc80      	pop	{r7}
2000465a:	4770      	bx	lr

2000465c <get_hk_data>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void get_hk_data(void* d){
2000465c:	b590      	push	{r4, r7, lr}
2000465e:	b089      	sub	sp, #36	; 0x24
20004660:	af00      	add	r7, sp, #0
20004662:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(get_pld_pkt_handle);
20004664:	f24e 0358 	movw	r3, #57432	; 0xe058
20004668:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000466c:	681b      	ldr	r3, [r3, #0]
2000466e:	4618      	mov	r0, r3
20004670:	f7fd fd84 	bl	2000217c <uxTaskPriorityGet>
20004674:	4603      	mov	r3, r0
20004676:	61bb      	str	r3, [r7, #24]

	if(feed_get_hk_data != pdFAIL){
20004678:	f24e 0378 	movw	r3, #57464	; 0xe078
2000467c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004680:	681b      	ldr	r3, [r3, #0]
20004682:	2b00      	cmp	r3, #0
20004684:	f000 81ea 	beq.w	20004a5c <get_hk_data+0x400>

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
20004688:	f04f 0300 	mov.w	r3, #0
2000468c:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
2000468e:	f04f 0300 	mov.w	r3, #0
20004692:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
20004694:	f64d 12fc 	movw	r2, #55804	; 0xd9fc
20004698:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000469c:	f24e 0360 	movw	r3, #57440	; 0xe060
200046a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046a4:	601a      	str	r2, [r3, #0]


		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
200046a6:	f107 0116 	add.w	r1, r7, #22
200046aa:	f107 0214 	add.w	r2, r7, #20
200046ae:	f107 0312 	add.w	r3, r7, #18
200046b2:	4608      	mov	r0, r1
200046b4:	4611      	mov	r1, r2
200046b6:	461a      	mov	r2, r3
200046b8:	f7fb fed4 	bl	20000464 <get_IMU_acc>
200046bc:	4603      	mov	r3, r0
200046be:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
200046c0:	f107 010e 	add.w	r1, r7, #14
200046c4:	f107 020c 	add.w	r2, r7, #12
200046c8:	f107 030a 	add.w	r3, r7, #10
200046cc:	4608      	mov	r0, r1
200046ce:	4611      	mov	r1, r2
200046d0:	461a      	mov	r2, r3
200046d2:	f7fc f85d 	bl	20000790 <get_IMU_gyro>
200046d6:	4603      	mov	r3, r0
200046d8:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;
			hk_pkt->cmd_cnt = command_cnt;
200046da:	f24e 0360 	movw	r3, #57440	; 0xe060
200046de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046e2:	681a      	ldr	r2, [r3, #0]
200046e4:	f24e 0350 	movw	r3, #57424	; 0xe050
200046e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200046ec:	881b      	ldrh	r3, [r3, #0]
200046ee:	b29b      	uxth	r3, r3
200046f0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
200046f4:	f04f 0000 	mov.w	r0, #0
200046f8:	ea40 0101 	orr.w	r1, r0, r1
200046fc:	7391      	strb	r1, [r2, #14]
200046fe:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004702:	b29b      	uxth	r3, r3
20004704:	f04f 0100 	mov.w	r1, #0
20004708:	ea41 0303 	orr.w	r3, r1, r3
2000470c:	73d3      	strb	r3, [r2, #15]
			hk_pkt->cmd_reject_cnt = command_reject_cnt;
2000470e:	f24e 0360 	movw	r3, #57440	; 0xe060
20004712:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004716:	681a      	ldr	r2, [r3, #0]
20004718:	f24e 0390 	movw	r3, #57488	; 0xe090
2000471c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004720:	881b      	ldrh	r3, [r3, #0]
20004722:	b29b      	uxth	r3, r3
20004724:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004728:	f04f 0000 	mov.w	r0, #0
2000472c:	ea40 0101 	orr.w	r1, r0, r1
20004730:	7411      	strb	r1, [r2, #16]
20004732:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004736:	b29b      	uxth	r3, r3
20004738:	f04f 0100 	mov.w	r1, #0
2000473c:	ea41 0303 	orr.w	r3, r1, r3
20004740:	7453      	strb	r3, [r2, #17]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
20004742:	f24e 0360 	movw	r3, #57440	; 0xe060
20004746:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000474a:	681b      	ldr	r3, [r3, #0]
2000474c:	8afa      	ldrh	r2, [r7, #22]
2000474e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004752:	f04f 0000 	mov.w	r0, #0
20004756:	ea40 0101 	orr.w	r1, r0, r1
2000475a:	7499      	strb	r1, [r3, #18]
2000475c:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004760:	b292      	uxth	r2, r2
20004762:	f04f 0100 	mov.w	r1, #0
20004766:	ea41 0202 	orr.w	r2, r1, r2
2000476a:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
2000476c:	f24e 0360 	movw	r3, #57440	; 0xe060
20004770:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004774:	681b      	ldr	r3, [r3, #0]
20004776:	8aba      	ldrh	r2, [r7, #20]
20004778:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2000477c:	f04f 0000 	mov.w	r0, #0
20004780:	ea40 0101 	orr.w	r1, r0, r1
20004784:	7519      	strb	r1, [r3, #20]
20004786:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000478a:	b292      	uxth	r2, r2
2000478c:	f04f 0100 	mov.w	r1, #0
20004790:	ea41 0202 	orr.w	r2, r1, r2
20004794:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Acc[2] = ((az));
20004796:	f24e 0360 	movw	r3, #57440	; 0xe060
2000479a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000479e:	681b      	ldr	r3, [r3, #0]
200047a0:	8a7a      	ldrh	r2, [r7, #18]
200047a2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200047a6:	f04f 0000 	mov.w	r0, #0
200047aa:	ea40 0101 	orr.w	r1, r0, r1
200047ae:	7599      	strb	r1, [r3, #22]
200047b0:	ea4f 2212 	mov.w	r2, r2, lsr #8
200047b4:	b292      	uxth	r2, r2
200047b6:	f04f 0100 	mov.w	r1, #0
200047ba:	ea41 0202 	orr.w	r2, r1, r2
200047be:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
200047c0:	f24e 0360 	movw	r3, #57440	; 0xe060
200047c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047c8:	681b      	ldr	r3, [r3, #0]
200047ca:	89fa      	ldrh	r2, [r7, #14]
200047cc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200047d0:	f04f 0000 	mov.w	r0, #0
200047d4:	ea40 0101 	orr.w	r1, r0, r1
200047d8:	7619      	strb	r1, [r3, #24]
200047da:	ea4f 2212 	mov.w	r2, r2, lsr #8
200047de:	b292      	uxth	r2, r2
200047e0:	f04f 0100 	mov.w	r1, #0
200047e4:	ea41 0202 	orr.w	r2, r1, r2
200047e8:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
200047ea:	f24e 0360 	movw	r3, #57440	; 0xe060
200047ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
200047f2:	681b      	ldr	r3, [r3, #0]
200047f4:	89ba      	ldrh	r2, [r7, #12]
200047f6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
200047fa:	f04f 0000 	mov.w	r0, #0
200047fe:	ea40 0101 	orr.w	r1, r0, r1
20004802:	7699      	strb	r1, [r3, #26]
20004804:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004808:	b292      	uxth	r2, r2
2000480a:	f04f 0100 	mov.w	r1, #0
2000480e:	ea41 0202 	orr.w	r2, r1, r2
20004812:	76da      	strb	r2, [r3, #27]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
20004814:	f24e 0360 	movw	r3, #57440	; 0xe060
20004818:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000481c:	681b      	ldr	r3, [r3, #0]
2000481e:	897a      	ldrh	r2, [r7, #10]
20004820:	f002 01ff 	and.w	r1, r2, #255	; 0xff
20004824:	f04f 0000 	mov.w	r0, #0
20004828:	ea40 0101 	orr.w	r1, r0, r1
2000482c:	7719      	strb	r1, [r3, #28]
2000482e:	ea4f 2212 	mov.w	r2, r2, lsr #8
20004832:	b292      	uxth	r2, r2
20004834:	f04f 0100 	mov.w	r1, #0
20004838:	ea41 0202 	orr.w	r2, r1, r2
2000483c:	775a      	strb	r2, [r3, #29]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
2000483e:	f107 0308 	add.w	r3, r7, #8
20004842:	4618      	mov	r0, r3
20004844:	f7fc f916 	bl	20000a74 <get_IMU_temp>
20004848:	4603      	mov	r3, r0
2000484a:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
2000484c:	f24e 0360 	movw	r3, #57440	; 0xe060
20004850:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004854:	681b      	ldr	r3, [r3, #0]
20004856:	893a      	ldrh	r2, [r7, #8]
20004858:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2000485c:	f04f 0000 	mov.w	r0, #0
20004860:	ea40 0101 	orr.w	r1, r0, r1
20004864:	7799      	strb	r1, [r3, #30]
20004866:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000486a:	b292      	uxth	r2, r2
2000486c:	f04f 0100 	mov.w	r1, #0
20004870:	ea41 0202 	orr.w	r2, r1, r2
20004874:	77da      	strb	r2, [r3, #31]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
20004876:	f24e 0360 	movw	r3, #57440	; 0xe060
2000487a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000487e:	681c      	ldr	r4, [r3, #0]
20004880:	f107 0311 	add.w	r3, r7, #17
20004884:	f04f 0040 	mov.w	r0, #64	; 0x40
20004888:	f04f 0101 	mov.w	r1, #1
2000488c:	461a      	mov	r2, r3
2000488e:	f7fc fa25 	bl	20000cdc <read_bus_voltage>
20004892:	4603      	mov	r3, r0
20004894:	b29b      	uxth	r3, r3
20004896:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2000489a:	f04f 0100 	mov.w	r1, #0
2000489e:	ea41 0202 	orr.w	r2, r1, r2
200048a2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
200048a6:	ea4f 2313 	mov.w	r3, r3, lsr #8
200048aa:	b29b      	uxth	r3, r3
200048ac:	f04f 0200 	mov.w	r2, #0
200048b0:	ea42 0303 	orr.w	r3, r2, r3
200048b4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
200048b8:	7c7a      	ldrb	r2, [r7, #17]
200048ba:	7ffb      	ldrb	r3, [r7, #31]
200048bc:	4413      	add	r3, r2
200048be:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
200048c0:	f24e 0360 	movw	r3, #57440	; 0xe060
200048c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200048c8:	681c      	ldr	r4, [r3, #0]
200048ca:	f107 0311 	add.w	r3, r7, #17
200048ce:	f04f 0040 	mov.w	r0, #64	; 0x40
200048d2:	f04f 0102 	mov.w	r1, #2
200048d6:	461a      	mov	r2, r3
200048d8:	f7fc fa00 	bl	20000cdc <read_bus_voltage>
200048dc:	4603      	mov	r3, r0
200048de:	b29b      	uxth	r3, r3
200048e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200048e4:	f04f 0100 	mov.w	r1, #0
200048e8:	ea41 0202 	orr.w	r2, r1, r2
200048ec:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
200048f0:	ea4f 2313 	mov.w	r3, r3, lsr #8
200048f4:	b29b      	uxth	r3, r3
200048f6:	f04f 0200 	mov.w	r2, #0
200048fa:	ea42 0303 	orr.w	r3, r2, r3
200048fe:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
20004902:	7c7a      	ldrb	r2, [r7, #17]
20004904:	7ffb      	ldrb	r3, [r7, #31]
20004906:	4413      	add	r3, r2
20004908:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
2000490a:	f24e 0360 	movw	r3, #57440	; 0xe060
2000490e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004912:	681c      	ldr	r4, [r3, #0]
20004914:	f107 0311 	add.w	r3, r7, #17
20004918:	f04f 0040 	mov.w	r0, #64	; 0x40
2000491c:	f04f 0103 	mov.w	r1, #3
20004920:	461a      	mov	r2, r3
20004922:	f7fc f9db 	bl	20000cdc <read_bus_voltage>
20004926:	4603      	mov	r3, r0
20004928:	b29b      	uxth	r3, r3
2000492a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2000492e:	f04f 0100 	mov.w	r1, #0
20004932:	ea41 0202 	orr.w	r2, r1, r2
20004936:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
2000493a:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000493e:	b29b      	uxth	r3, r3
20004940:	f04f 0200 	mov.w	r2, #0
20004944:	ea42 0303 	orr.w	r3, r2, r3
20004948:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
2000494c:	7c7a      	ldrb	r2, [r7, #17]
2000494e:	7ffb      	ldrb	r3, [r7, #31]
20004950:	4413      	add	r3, r2
20004952:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
20004954:	f24e 0360 	movw	r3, #57440	; 0xe060
20004958:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000495c:	681c      	ldr	r4, [r3, #0]
2000495e:	f107 0311 	add.w	r3, r7, #17
20004962:	f04f 0040 	mov.w	r0, #64	; 0x40
20004966:	f04f 0101 	mov.w	r1, #1
2000496a:	461a      	mov	r2, r3
2000496c:	f7fc fa14 	bl	20000d98 <read_shunt_voltage>
20004970:	4603      	mov	r3, r0
20004972:	b29b      	uxth	r3, r3
20004974:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004978:	f04f 0100 	mov.w	r1, #0
2000497c:	ea41 0202 	orr.w	r2, r1, r2
20004980:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
20004984:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004988:	b29b      	uxth	r3, r3
2000498a:	f04f 0200 	mov.w	r2, #0
2000498e:	ea42 0303 	orr.w	r3, r2, r3
20004992:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
20004996:	7c7a      	ldrb	r2, [r7, #17]
20004998:	7ffb      	ldrb	r3, [r7, #31]
2000499a:	4413      	add	r3, r2
2000499c:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
2000499e:	f24e 0360 	movw	r3, #57440	; 0xe060
200049a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049a6:	681c      	ldr	r4, [r3, #0]
200049a8:	f107 0311 	add.w	r3, r7, #17
200049ac:	f04f 0040 	mov.w	r0, #64	; 0x40
200049b0:	f04f 0102 	mov.w	r1, #2
200049b4:	461a      	mov	r2, r3
200049b6:	f7fc f9ef 	bl	20000d98 <read_shunt_voltage>
200049ba:	4603      	mov	r3, r0
200049bc:	b29b      	uxth	r3, r3
200049be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
200049c2:	f04f 0100 	mov.w	r1, #0
200049c6:	ea41 0202 	orr.w	r2, r1, r2
200049ca:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
200049ce:	ea4f 2313 	mov.w	r3, r3, lsr #8
200049d2:	b29b      	uxth	r3, r3
200049d4:	f04f 0200 	mov.w	r2, #0
200049d8:	ea42 0303 	orr.w	r3, r2, r3
200049dc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
200049e0:	7c7a      	ldrb	r2, [r7, #17]
200049e2:	7ffb      	ldrb	r3, [r7, #31]
200049e4:	4413      	add	r3, r2
200049e6:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
200049e8:	f24e 0360 	movw	r3, #57440	; 0xe060
200049ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200049f0:	681c      	ldr	r4, [r3, #0]
200049f2:	f107 0311 	add.w	r3, r7, #17
200049f6:	f04f 0040 	mov.w	r0, #64	; 0x40
200049fa:	f04f 0103 	mov.w	r1, #3
200049fe:	461a      	mov	r2, r3
20004a00:	f7fc f9ca 	bl	20000d98 <read_shunt_voltage>
20004a04:	4603      	mov	r3, r0
20004a06:	b29b      	uxth	r3, r3
20004a08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
20004a0c:	f04f 0100 	mov.w	r1, #0
20004a10:	ea41 0202 	orr.w	r2, r1, r2
20004a14:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
20004a18:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004a1c:	b29b      	uxth	r3, r3
20004a1e:	f04f 0200 	mov.w	r2, #0
20004a22:	ea42 0303 	orr.w	r3, r2, r3
20004a26:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			loss_count+= flag;
20004a2a:	7c7a      	ldrb	r2, [r7, #17]
20004a2c:	7ffb      	ldrb	r3, [r7, #31]
20004a2e:	4413      	add	r3, r2
20004a30:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
20004a32:	f64d 13fc 	movw	r3, #55804	; 0xd9fc
20004a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a3a:	f04f 0201 	mov.w	r2, #1
20004a3e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(get_pld_pkt_handle, uxPriority + 1);
20004a42:	f24e 0358 	movw	r3, #57432	; 0xe058
20004a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a4a:	681a      	ldr	r2, [r3, #0]
20004a4c:	69bb      	ldr	r3, [r7, #24]
20004a4e:	f103 0301 	add.w	r3, r3, #1
20004a52:	4610      	mov	r0, r2
20004a54:	4619      	mov	r1, r3
20004a56:	f7fd fbad 	bl	200021b4 <vTaskPrioritySet>

		}
20004a5a:	e624      	b.n	200046a6 <get_hk_data+0x4a>

	}
}
20004a5c:	f107 0724 	add.w	r7, r7, #36	; 0x24
20004a60:	46bd      	mov	sp, r7
20004a62:	bd90      	pop	{r4, r7, pc}

20004a64 <get_pld_data>:

void get_pld_data(void* d1){
20004a64:	b5b0      	push	{r4, r5, r7, lr}
20004a66:	b084      	sub	sp, #16
20004a68:	af00      	add	r7, sp, #0
20004a6a:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(NULL);
20004a6c:	f04f 0000 	mov.w	r0, #0
20004a70:	f7fd fb84 	bl	2000217c <uxTaskPriorityGet>
20004a74:	4603      	mov	r3, r0
20004a76:	60bb      	str	r3, [r7, #8]

	if(feed_get_payload_data != pdFAIL){
20004a78:	f24e 0388 	movw	r3, #57480	; 0xe088
20004a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a80:	681b      	ldr	r3, [r3, #0]
20004a82:	2b00      	cmp	r3, #0
20004a84:	d04f      	beq.n	20004b26 <get_pld_data+0xc2>

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
20004a86:	f64d 121c 	movw	r2, #55580	; 0xd91c
20004a8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004a8e:	f24e 038c 	movw	r3, #57484	; 0xe08c
20004a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004a96:	601a      	str	r2, [r3, #0]
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004a98:	f04f 0300 	mov.w	r3, #0
20004a9c:	73fb      	strb	r3, [r7, #15]
20004a9e:	e02e      	b.n	20004afe <get_pld_data+0x9a>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
20004aa0:	f24e 038c 	movw	r3, #57484	; 0xe08c
20004aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004aa8:	681c      	ldr	r4, [r3, #0]
20004aaa:	7bfd      	ldrb	r5, [r7, #15]
20004aac:	7bbb      	ldrb	r3, [r7, #14]
20004aae:	7bfa      	ldrb	r2, [r7, #15]
20004ab0:	f64d 70c4 	movw	r0, #57284	; 0xdfc4
20004ab4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004ab8:	f04f 0121 	mov.w	r1, #33	; 0x21
20004abc:	f7fc f9cc 	bl	20000e58 <get_ADC_value>
20004ac0:	4603      	mov	r3, r0
20004ac2:	4619      	mov	r1, r3
20004ac4:	f105 0204 	add.w	r2, r5, #4
20004ac8:	f001 00ff 	and.w	r0, r1, #255	; 0xff
20004acc:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004ad0:	4423      	add	r3, r4
20004ad2:	f04f 0c00 	mov.w	ip, #0
20004ad6:	ea4c 0000 	orr.w	r0, ip, r0
20004ada:	7198      	strb	r0, [r3, #6]
20004adc:	ea4f 2311 	mov.w	r3, r1, lsr #8
20004ae0:	b298      	uxth	r0, r3
20004ae2:	ea4f 0342 	mov.w	r3, r2, lsl #1
20004ae6:	4423      	add	r3, r4
20004ae8:	f04f 0200 	mov.w	r2, #0
20004aec:	4611      	mov	r1, r2
20004aee:	4602      	mov	r2, r0
20004af0:	ea41 0202 	orr.w	r2, r1, r2
20004af4:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
20004af6:	7bfb      	ldrb	r3, [r7, #15]
20004af8:	f103 0301 	add.w	r3, r3, #1
20004afc:	73fb      	strb	r3, [r7, #15]
20004afe:	7bfb      	ldrb	r3, [r7, #15]
20004b00:	2b06      	cmp	r3, #6
20004b02:	d9cd      	bls.n	20004aa0 <get_pld_data+0x3c>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
20004b04:	f64d 131c 	movw	r3, #55580	; 0xd91c
20004b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b0c:	f04f 0202 	mov.w	r2, #2
20004b10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(NULL, uxPriority - 2);
20004b14:	68bb      	ldr	r3, [r7, #8]
20004b16:	f1a3 0302 	sub.w	r3, r3, #2
20004b1a:	f04f 0000 	mov.w	r0, #0
20004b1e:	4619      	mov	r1, r3
20004b20:	f7fd fb48 	bl	200021b4 <vTaskPrioritySet>

		}
20004b24:	e7b8      	b.n	20004a98 <get_pld_data+0x34>

	}
}
20004b26:	f107 0710 	add.w	r7, r7, #16
20004b2a:	46bd      	mov	sp, r7
20004b2c:	bdb0      	pop	{r4, r5, r7, pc}
20004b2e:	bf00      	nop

20004b30 <vtlm_task>:


void vtlm_task(void* d){
20004b30:	b480      	push	{r7}
20004b32:	b085      	sub	sp, #20
20004b34:	af00      	add	r7, sp, #0
20004b36:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;
20004b38:	f04f 0300 	mov.w	r3, #0
20004b3c:	81fb      	strh	r3, [r7, #14]

//	xQueueReceive(Data_Queue, data, 10);

//	if(feed_tlm_task != pdFAIL){
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		if(data[511] == HK_API_ID){
20004b3e:	f64d 13fc 	movw	r3, #55804	; 0xd9fc
20004b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b46:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
20004b4a:	2b01      	cmp	r3, #1
20004b4c:	d17b      	bne.n	20004c46 <vtlm_task+0x116>
//			while(1){
				hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
20004b4e:	f24e 0360 	movw	r3, #57440	; 0xe060
20004b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b56:	681b      	ldr	r3, [r3, #0]
20004b58:	f04f 0200 	mov.w	r2, #0
20004b5c:	f042 0208 	orr.w	r2, r2, #8
20004b60:	701a      	strb	r2, [r3, #0]
20004b62:	f04f 0200 	mov.w	r2, #0
20004b66:	f042 0201 	orr.w	r2, r2, #1
20004b6a:	705a      	strb	r2, [r3, #1]
				hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004b6c:	f24e 0360 	movw	r3, #57440	; 0xe060
20004b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004b74:	681a      	ldr	r2, [r3, #0]
20004b76:	89fb      	ldrh	r3, [r7, #14]
20004b78:	f103 0301 	add.w	r3, r3, #1
20004b7c:	81fb      	strh	r3, [r7, #14]
20004b7e:	89fb      	ldrh	r3, [r7, #14]
20004b80:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004b84:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004b88:	b29b      	uxth	r3, r3
20004b8a:	b29b      	uxth	r3, r3
20004b8c:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004b90:	b299      	uxth	r1, r3
20004b92:	89fb      	ldrh	r3, [r7, #14]
20004b94:	f103 0301 	add.w	r3, r3, #1
20004b98:	81fb      	strh	r3, [r7, #14]
20004b9a:	89fb      	ldrh	r3, [r7, #14]
20004b9c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004ba0:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004ba4:	b29b      	uxth	r3, r3
20004ba6:	b29b      	uxth	r3, r3
20004ba8:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004bac:	b29b      	uxth	r3, r3
20004bae:	ea41 0303 	orr.w	r3, r1, r3
20004bb2:	b29b      	uxth	r3, r3
20004bb4:	b29b      	uxth	r3, r3
20004bb6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004bba:	f04f 0000 	mov.w	r0, #0
20004bbe:	ea40 0101 	orr.w	r1, r0, r1
20004bc2:	7091      	strb	r1, [r2, #2]
20004bc4:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004bc8:	b29b      	uxth	r3, r3
20004bca:	f04f 0100 	mov.w	r1, #0
20004bce:	ea41 0303 	orr.w	r3, r1, r3
20004bd2:	70d3      	strb	r3, [r2, #3]
				hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
20004bd4:	f24e 0360 	movw	r3, #57440	; 0xe060
20004bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bdc:	681b      	ldr	r3, [r3, #0]
20004bde:	f04f 0200 	mov.w	r2, #0
20004be2:	711a      	strb	r2, [r3, #4]
20004be4:	f04f 0200 	mov.w	r2, #0
20004be8:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
20004bec:	715a      	strb	r2, [r3, #5]
				hk_pkt->ccsds_s1 = 0;
20004bee:	f24e 0360 	movw	r3, #57440	; 0xe060
20004bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004bf6:	681b      	ldr	r3, [r3, #0]
20004bf8:	f04f 0200 	mov.w	r2, #0
20004bfc:	719a      	strb	r2, [r3, #6]
20004bfe:	f04f 0200 	mov.w	r2, #0
20004c02:	71da      	strb	r2, [r3, #7]
20004c04:	f04f 0200 	mov.w	r2, #0
20004c08:	721a      	strb	r2, [r3, #8]
20004c0a:	f04f 0200 	mov.w	r2, #0
20004c0e:	725a      	strb	r2, [r3, #9]
				hk_pkt->ccsds_s2 = 0;
20004c10:	f24e 0360 	movw	r3, #57440	; 0xe060
20004c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c18:	681b      	ldr	r3, [r3, #0]
20004c1a:	f04f 0200 	mov.w	r2, #0
20004c1e:	729a      	strb	r2, [r3, #10]
20004c20:	f04f 0200 	mov.w	r2, #0
20004c24:	72da      	strb	r2, [r3, #11]
20004c26:	f04f 0200 	mov.w	r2, #0
20004c2a:	731a      	strb	r2, [r3, #12]
20004c2c:	f04f 0200 	mov.w	r2, #0
20004c30:	735a      	strb	r2, [r3, #13]
				Data_HK_Queue = hk_pkt;
20004c32:	f24e 0360 	movw	r3, #57440	; 0xe060
20004c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c3a:	681a      	ldr	r2, [r3, #0]
20004c3c:	f24e 0374 	movw	r3, #57460	; 0xe074
20004c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c44:	601a      	str	r2, [r3, #0]

//			}
		}


		if(data_pld[49] == PLD_API_ID){
20004c46:	f64d 131c 	movw	r3, #55580	; 0xd91c
20004c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
20004c52:	2b02      	cmp	r3, #2
20004c54:	d17b      	bne.n	20004d4e <vtlm_task+0x21e>
//			while(1){

				pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
20004c56:	f24e 038c 	movw	r3, #57484	; 0xe08c
20004c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c5e:	681b      	ldr	r3, [r3, #0]
20004c60:	f04f 0200 	mov.w	r2, #0
20004c64:	f042 0208 	orr.w	r2, r2, #8
20004c68:	701a      	strb	r2, [r3, #0]
20004c6a:	f04f 0200 	mov.w	r2, #0
20004c6e:	f042 0202 	orr.w	r2, r2, #2
20004c72:	705a      	strb	r2, [r3, #1]
				pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
20004c74:	f24e 038c 	movw	r3, #57484	; 0xe08c
20004c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004c7c:	681a      	ldr	r2, [r3, #0]
20004c7e:	89fb      	ldrh	r3, [r7, #14]
20004c80:	f103 0301 	add.w	r3, r3, #1
20004c84:	81fb      	strh	r3, [r7, #14]
20004c86:	89fb      	ldrh	r3, [r7, #14]
20004c88:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004c8c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004c90:	b29b      	uxth	r3, r3
20004c92:	b29b      	uxth	r3, r3
20004c94:	ea4f 2303 	mov.w	r3, r3, lsl #8
20004c98:	b299      	uxth	r1, r3
20004c9a:	89fb      	ldrh	r3, [r7, #14]
20004c9c:	f103 0301 	add.w	r3, r3, #1
20004ca0:	81fb      	strh	r3, [r7, #14]
20004ca2:	89fb      	ldrh	r3, [r7, #14]
20004ca4:	ea6f 4383 	mvn.w	r3, r3, lsl #18
20004ca8:	ea6f 4393 	mvn.w	r3, r3, lsr #18
20004cac:	b29b      	uxth	r3, r3
20004cae:	b29b      	uxth	r3, r3
20004cb0:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004cb4:	b29b      	uxth	r3, r3
20004cb6:	ea41 0303 	orr.w	r3, r1, r3
20004cba:	b29b      	uxth	r3, r3
20004cbc:	b29b      	uxth	r3, r3
20004cbe:	f003 01ff 	and.w	r1, r3, #255	; 0xff
20004cc2:	f04f 0000 	mov.w	r0, #0
20004cc6:	ea40 0101 	orr.w	r1, r0, r1
20004cca:	7091      	strb	r1, [r2, #2]
20004ccc:	ea4f 2313 	mov.w	r3, r3, lsr #8
20004cd0:	b29b      	uxth	r3, r3
20004cd2:	f04f 0100 	mov.w	r1, #0
20004cd6:	ea41 0303 	orr.w	r3, r1, r3
20004cda:	70d3      	strb	r3, [r2, #3]
				pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
20004cdc:	f24e 038c 	movw	r3, #57484	; 0xe08c
20004ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004ce4:	681b      	ldr	r3, [r3, #0]
20004ce6:	f04f 0200 	mov.w	r2, #0
20004cea:	711a      	strb	r2, [r3, #4]
20004cec:	f04f 0200 	mov.w	r2, #0
20004cf0:	f042 021e 	orr.w	r2, r2, #30
20004cf4:	715a      	strb	r2, [r3, #5]

				pld_pkt->ccsds_s1 = 0;
20004cf6:	f24e 038c 	movw	r3, #57484	; 0xe08c
20004cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004cfe:	681b      	ldr	r3, [r3, #0]
20004d00:	f04f 0200 	mov.w	r2, #0
20004d04:	719a      	strb	r2, [r3, #6]
20004d06:	f04f 0200 	mov.w	r2, #0
20004d0a:	71da      	strb	r2, [r3, #7]
20004d0c:	f04f 0200 	mov.w	r2, #0
20004d10:	721a      	strb	r2, [r3, #8]
20004d12:	f04f 0200 	mov.w	r2, #0
20004d16:	725a      	strb	r2, [r3, #9]
				pld_pkt->ccsds_s2 = 0;
20004d18:	f24e 038c 	movw	r3, #57484	; 0xe08c
20004d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d20:	681b      	ldr	r3, [r3, #0]
20004d22:	f04f 0200 	mov.w	r2, #0
20004d26:	729a      	strb	r2, [r3, #10]
20004d28:	f04f 0200 	mov.w	r2, #0
20004d2c:	72da      	strb	r2, [r3, #11]
20004d2e:	f04f 0200 	mov.w	r2, #0
20004d32:	731a      	strb	r2, [r3, #12]
20004d34:	f04f 0200 	mov.w	r2, #0
20004d38:	735a      	strb	r2, [r3, #13]
				Data_PLD_Queue  = pld_pkt ;
20004d3a:	f24e 038c 	movw	r3, #57484	; 0xe08c
20004d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d42:	681a      	ldr	r2, [r3, #0]
20004d44:	f24e 0384 	movw	r3, #57476	; 0xe084
20004d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d4c:	601a      	str	r2, [r3, #0]
		else{

		}
//	}

}
20004d4e:	f107 0714 	add.w	r7, r7, #20
20004d52:	46bd      	mov	sp, r7
20004d54:	bc80      	pop	{r7}
20004d56:	4770      	bx	lr

20004d58 <vtlm_sender>:


void vtlm_sender(void* d){
20004d58:	b580      	push	{r7, lr}
20004d5a:	b082      	sub	sp, #8
20004d5c:	af00      	add	r7, sp, #0
20004d5e:	6078      	str	r0, [r7, #4]
//	Queue_Data = (QueueHandle_t*) d1;
//	uint8_t a;

//	if(feed_tlm_sender != pdFAIL){
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		if(data[511] == HK_API_ID){
20004d60:	f64d 13fc 	movw	r3, #55804	; 0xd9fc
20004d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d68:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
20004d6c:	2b01      	cmp	r3, #1
20004d6e:	d10d      	bne.n	20004d8c <vtlm_sender+0x34>
//			while(1){

				MSS_UART_polled_tx(&g_mss_uart0, Data_HK_Queue, sizeof(pkt_hk_t));
20004d70:	f24e 0374 	movw	r3, #57460	; 0xe074
20004d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d78:	681b      	ldr	r3, [r3, #0]
20004d7a:	f24e 00d8 	movw	r0, #57560	; 0xe0d8
20004d7e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004d82:	4619      	mov	r1, r3
20004d84:	f04f 022e 	mov.w	r2, #46	; 0x2e
20004d88:	f000 fb08 	bl	2000539c <MSS_UART_polled_tx>


		}
		if(data_pld[49] == PLD_API_ID){
20004d8c:	f64d 131c 	movw	r3, #55580	; 0xd91c
20004d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004d94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
20004d98:	2b02      	cmp	r3, #2
20004d9a:	d10d      	bne.n	20004db8 <vtlm_sender+0x60>


				MSS_UART_polled_tx(&g_mss_uart0, Data_PLD_Queue , sizeof(pkt_pld_t));
20004d9c:	f24e 0384 	movw	r3, #57476	; 0xe084
20004da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004da4:	681b      	ldr	r3, [r3, #0]
20004da6:	f24e 00d8 	movw	r0, #57560	; 0xe0d8
20004daa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004dae:	4619      	mov	r1, r3
20004db0:	f04f 021e 	mov.w	r2, #30
20004db4:	f000 faf2 	bl	2000539c <MSS_UART_polled_tx>

		}

}
20004db8:	f107 0708 	add.w	r7, r7, #8
20004dbc:	46bd      	mov	sp, r7
20004dbe:	bd80      	pop	{r7, pc}

20004dc0 <irq_tsk_func>:
//	}
//
//}


void irq_tsk_func(void* f_param){
20004dc0:	b580      	push	{r7, lr}
20004dc2:	b084      	sub	sp, #16
20004dc4:	af00      	add	r7, sp, #0
20004dc6:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue;

	while(1){

		xTaskNotifyWait(0x00, 0, &ulNotifiedValue, portMAX_DELAY);
20004dc8:	f107 0308 	add.w	r3, r7, #8
20004dcc:	f04f 0000 	mov.w	r0, #0
20004dd0:	f04f 0100 	mov.w	r1, #0
20004dd4:	461a      	mov	r2, r3
20004dd6:	f04f 33ff 	mov.w	r3, #4294967295
20004dda:	f7fe fa39 	bl	20003250 <xTaskNotifyWait>
		ulTaskNotifyTake(pdTRUE, 1);
20004dde:	f04f 0001 	mov.w	r0, #1
20004de2:	f04f 0101 	mov.w	r1, #1
20004de6:	f7fe f9d3 	bl	20003190 <ulTaskNotifyTake>
		rx_cmd_t* rx_cmd;
		rx_cmd = (rx_cmd_t* ) f_param;
20004dea:	687b      	ldr	r3, [r7, #4]
20004dec:	60fb      	str	r3, [r7, #12]


		if(cmd_valid(rx_cmd)){
20004dee:	68f8      	ldr	r0, [r7, #12]
20004df0:	f7fc f8d0 	bl	20000f94 <cmd_valid>
20004df4:	4603      	mov	r3, r0
20004df6:	2b00      	cmp	r3, #0
20004df8:	d011      	beq.n	20004e1e <irq_tsk_func+0x5e>
			cmd_engine(rx_cmd);
20004dfa:	68f8      	ldr	r0, [r7, #12]
20004dfc:	f7fc f97c 	bl	200010f8 <cmd_engine>
			command_cnt++;
20004e00:	f24e 0350 	movw	r3, #57424	; 0xe050
20004e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e08:	881b      	ldrh	r3, [r3, #0]
20004e0a:	b29b      	uxth	r3, r3
20004e0c:	f103 0301 	add.w	r3, r3, #1
20004e10:	b29a      	uxth	r2, r3
20004e12:	f24e 0350 	movw	r3, #57424	; 0xe050
20004e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e1a:	801a      	strh	r2, [r3, #0]
		else{
			command_reject_cnt++;
		}


	}
20004e1c:	e7d4      	b.n	20004dc8 <irq_tsk_func+0x8>
		if(cmd_valid(rx_cmd)){
			cmd_engine(rx_cmd);
			command_cnt++;
		}
		else{
			command_reject_cnt++;
20004e1e:	f24e 0390 	movw	r3, #57488	; 0xe090
20004e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e26:	881b      	ldrh	r3, [r3, #0]
20004e28:	b29b      	uxth	r3, r3
20004e2a:	f103 0301 	add.w	r3, r3, #1
20004e2e:	b29a      	uxth	r2, r3
20004e30:	f24e 0390 	movw	r3, #57488	; 0xe090
20004e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e38:	801a      	strh	r2, [r3, #0]
		}


	}
20004e3a:	e7c5      	b.n	20004dc8 <irq_tsk_func+0x8>

20004e3c <uart0_rx_handler>:
}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
20004e3c:	b580      	push	{r7, lr}
20004e3e:	b084      	sub	sp, #16
20004e40:	af00      	add	r7, sp, #0
20004e42:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer, 8);
20004e44:	6878      	ldr	r0, [r7, #4]
20004e46:	f64d 11bc 	movw	r1, #55740	; 0xd9bc
20004e4a:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004e4e:	f04f 0208 	mov.w	r2, #8
20004e52:	f000 fb15 	bl	20005480 <MSS_UART_get_rx>
20004e56:	4602      	mov	r2, r0
20004e58:	f64d 13f8 	movw	r3, #55800	; 0xd9f8
20004e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e60:	601a      	str	r2, [r3, #0]

	BaseType_t xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
20004e62:	f04f 0300 	mov.w	r3, #0
20004e66:	60fb      	str	r3, [r7, #12]

	 vTaskNotifyGiveFromISR(uart_irq, &xHigherPriorityTaskWoken);
20004e68:	f64d 1318 	movw	r3, #55576	; 0xd918
20004e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004e70:	681a      	ldr	r2, [r3, #0]
20004e72:	f107 030c 	add.w	r3, r7, #12
20004e76:	4610      	mov	r0, r2
20004e78:	4619      	mov	r1, r3
20004e7a:	f7fe fa61 	bl	20003340 <vTaskNotifyGiveFromISR>

	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
20004e7e:	68fb      	ldr	r3, [r7, #12]
20004e80:	2b00      	cmp	r3, #0
20004e82:	d00a      	beq.n	20004e9a <uart0_rx_handler+0x5e>
20004e84:	f64e 5304 	movw	r3, #60676	; 0xed04
20004e88:	f2ce 0300 	movt	r3, #57344	; 0xe000
20004e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20004e90:	601a      	str	r2, [r3, #0]
20004e92:	f3bf 8f4f 	dsb	sy
20004e96:	f3bf 8f6f 	isb	sy

}
20004e9a:	f107 0710 	add.w	r7, r7, #16
20004e9e:	46bd      	mov	sp, r7
20004ea0:	bd80      	pop	{r7, pc}
20004ea2:	bf00      	nop

20004ea4 <demo_tasks>:
//	 }
//}



void demo_tasks(void){
20004ea4:	b590      	push	{r4, r7, lr}
20004ea6:	b08b      	sub	sp, #44	; 0x2c
20004ea8:	af02      	add	r7, sp, #8

		uint8_t REF_DATA[3] = {0x38, 0x00, 0x00};
20004eaa:	f04f 0338 	mov.w	r3, #56	; 0x38
20004eae:	733b      	strb	r3, [r7, #12]
20004eb0:	f04f 0300 	mov.w	r3, #0
20004eb4:	737b      	strb	r3, [r7, #13]
20004eb6:	f04f 0300 	mov.w	r3, #0
20004eba:	73bb      	strb	r3, [r7, #14]
		uint8_t PWR[3] = {0x20, 0x00, 0x0F};
20004ebc:	f247 5268 	movw	r2, #30056	; 0x7568
20004ec0:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004ec4:	f107 0308 	add.w	r3, r7, #8
20004ec8:	6812      	ldr	r2, [r2, #0]
20004eca:	4611      	mov	r1, r2
20004ecc:	8019      	strh	r1, [r3, #0]
20004ece:	f103 0302 	add.w	r3, r3, #2
20004ed2:	ea4f 4212 	mov.w	r2, r2, lsr #16
20004ed6:	701a      	strb	r2, [r3, #0]
		uint8_t config[3] = {0x30, 0x00, 0x01};
20004ed8:	f247 526c 	movw	r2, #30060	; 0x756c
20004edc:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004ee0:	f107 0304 	add.w	r3, r7, #4
20004ee4:	6812      	ldr	r2, [r2, #0]
20004ee6:	4611      	mov	r1, r2
20004ee8:	8019      	strh	r1, [r3, #0]
20004eea:	f103 0302 	add.w	r3, r3, #2
20004eee:	ea4f 4212 	mov.w	r2, r2, lsr #16
20004ef2:	701a      	strb	r2, [r3, #0]
		uint8_t sw_clear[3] = {0x28, 0x00, 0x01};
20004ef4:	f247 5270 	movw	r2, #30064	; 0x7570
20004ef8:	f2c2 0200 	movt	r2, #8192	; 0x2000
20004efc:	463b      	mov	r3, r7
20004efe:	6812      	ldr	r2, [r2, #0]
20004f00:	4611      	mov	r1, r2
20004f02:	8019      	strh	r1, [r3, #0]
20004f04:	f103 0302 	add.w	r3, r3, #2
20004f08:	ea4f 4212 	mov.w	r2, r2, lsr #16
20004f0c:	701a      	strb	r2, [r3, #0]
		i2c_status_t status;

//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
20004f0e:	f64d 43fc 	movw	r3, #56572	; 0xdcfc
20004f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f16:	613b      	str	r3, [r7, #16]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
20004f18:	f247 53a4 	movw	r3, #30116	; 0x75a4
20004f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f20:	617b      	str	r3, [r7, #20]
		imu_ptr->init = &init;
20004f22:	693a      	ldr	r2, [r7, #16]
20004f24:	f640 63f9 	movw	r3, #3833	; 0xef9
20004f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f2c:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
20004f2e:	693b      	ldr	r3, [r7, #16]
20004f30:	681b      	ldr	r3, [r3, #0]
20004f32:	f04f 0000 	mov.w	r0, #0
20004f36:	6979      	ldr	r1, [r7, #20]
20004f38:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
20004f3a:	f64d 70c4 	movw	r0, #57284	; 0xdfc4
20004f3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004f42:	f244 0100 	movw	r1, #16384	; 0x4000
20004f46:	f2c5 0100 	movt	r1, #20480	; 0x5000
20004f4a:	f04f 0221 	mov.w	r2, #33	; 0x21
20004f4e:	f04f 0300 	mov.w	r3, #0
20004f52:	f000 ff25 	bl	20005da0 <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
20004f56:	f64d 43fc 	movw	r3, #56572	; 0xdcfc
20004f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f5e:	61bb      	str	r3, [r7, #24]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
20004f60:	f247 53c4 	movw	r3, #30148	; 0x75c4
20004f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f68:	61fb      	str	r3, [r7, #28]
		vc_ptr->init = &init;
20004f6a:	69ba      	ldr	r2, [r7, #24]
20004f6c:	f640 63f9 	movw	r3, #3833	; 0xef9
20004f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f74:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
20004f76:	69bb      	ldr	r3, [r7, #24]
20004f78:	681b      	ldr	r3, [r3, #0]
20004f7a:	f04f 000a 	mov.w	r0, #10
20004f7e:	69f9      	ldr	r1, [r7, #28]
20004f80:	4798      	blx	r3

		Data_HK_Queue = xQueueCreate(QUEUE_LENGTH, SIZE_QUEUE);
20004f82:	f04f 0001 	mov.w	r0, #1
20004f86:	f04f 012e 	mov.w	r1, #46	; 0x2e
20004f8a:	f04f 0200 	mov.w	r2, #0
20004f8e:	f7fc fa85 	bl	2000149c <xQueueGenericCreate>
20004f92:	4602      	mov	r2, r0
20004f94:	f24e 0374 	movw	r3, #57460	; 0xe074
20004f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004f9c:	601a      	str	r2, [r3, #0]
		Data_PLD_Queue = xQueueCreate(QUEUE_LENGTH, SIZE_PLD_QUEUE);
20004f9e:	f04f 0001 	mov.w	r0, #1
20004fa2:	f04f 011e 	mov.w	r1, #30
20004fa6:	f04f 0200 	mov.w	r2, #0
20004faa:	f7fc fa77 	bl	2000149c <xQueueGenericCreate>
20004fae:	4602      	mov	r2, r0
20004fb0:	f24e 0384 	movw	r3, #57476	; 0xe084
20004fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20004fb8:	601a      	str	r2, [r3, #0]
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		NVIC_EnableIRQ(UART0_IRQn);
20004fba:	f04f 000a 	mov.w	r0, #10
20004fbe:	f7ff fb03 	bl	200045c8 <NVIC_EnableIRQ>
		NVIC_SetPriority(UART0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1);
20004fc2:	f04f 000a 	mov.w	r0, #10
20004fc6:	f04f 019f 	mov.w	r1, #159	; 0x9f
20004fca:	f7ff fb19 	bl	20004600 <NVIC_SetPriority>


		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
20004fce:	f24e 00d8 	movw	r0, #57560	; 0xe0d8
20004fd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004fd6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
20004fda:	f04f 0203 	mov.w	r2, #3
20004fde:	f000 f99b 	bl	20005318 <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_FIFO_EIGHT_BYTES);
20004fe2:	f24e 00d8 	movw	r0, #57560	; 0xe0d8
20004fe6:	f2c2 0000 	movt	r0, #8192	; 0x2000
20004fea:	f644 613d 	movw	r1, #20029	; 0x4e3d
20004fee:	f2c2 0100 	movt	r1, #8192	; 0x2000
20004ff2:	f04f 0280 	mov.w	r2, #128	; 0x80
20004ff6:	f000 fab1 	bl	2000555c <MSS_UART_set_rx_handler>
//		init_demo(imu);
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;


	 xMutex = xSemaphoreCreateMutex();
20004ffa:	f04f 0001 	mov.w	r0, #1
20004ffe:	f7fc facf 	bl	200015a0 <xQueueCreateMutex>
20005002:	4602      	mov	r2, r0
20005004:	f24e 0370 	movw	r3, #57456	; 0xe070
20005008:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000500c:	601a      	str	r2, [r3, #0]
//	 xTaskCreate(get_imu_data, "IMU", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(get_vc_data, "VC", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(pktmngr, "Packet", configMINIMAL_STACK_SIZE, (void*) data, 1, NULL);


		feed_get_hk_data = xTaskCreate(get_hk_data, "HK", configMINIMAL_STACK_SIZE, (void*)data , 2, &get_hk_pkt_handle);
2000500e:	f04f 0302 	mov.w	r3, #2
20005012:	9300      	str	r3, [sp, #0]
20005014:	f24e 0380 	movw	r3, #57472	; 0xe080
20005018:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000501c:	9301      	str	r3, [sp, #4]
2000501e:	f244 605d 	movw	r0, #18013	; 0x465d
20005022:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005026:	f247 5130 	movw	r1, #30000	; 0x7530
2000502a:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000502e:	f04f 0250 	mov.w	r2, #80	; 0x50
20005032:	f64d 13fc 	movw	r3, #55804	; 0xd9fc
20005036:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000503a:	f7fc ff21 	bl	20001e80 <xTaskCreate>
2000503e:	4602      	mov	r2, r0
20005040:	f24e 0378 	movw	r3, #57464	; 0xe078
20005044:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005048:	601a      	str	r2, [r3, #0]

		feed_get_payload_data = xTaskCreate(get_pld_data, "Payload", configMINIMAL_STACK_SIZE, (void* )data, 1, &get_pld_pkt_handle);
2000504a:	f04f 0301 	mov.w	r3, #1
2000504e:	9300      	str	r3, [sp, #0]
20005050:	f24e 0358 	movw	r3, #57432	; 0xe058
20005054:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005058:	9301      	str	r3, [sp, #4]
2000505a:	f644 2065 	movw	r0, #19045	; 0x4a65
2000505e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005062:	f247 5134 	movw	r1, #30004	; 0x7534
20005066:	f2c2 0100 	movt	r1, #8192	; 0x2000
2000506a:	f04f 0250 	mov.w	r2, #80	; 0x50
2000506e:	f64d 13fc 	movw	r3, #55804	; 0xd9fc
20005072:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005076:	f7fc ff03 	bl	20001e80 <xTaskCreate>
2000507a:	4602      	mov	r2, r0
2000507c:	f24e 0388 	movw	r3, #57480	; 0xe088
20005080:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005084:	601a      	str	r2, [r3, #0]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);
20005086:	f04f 0303 	mov.w	r3, #3
2000508a:	9300      	str	r3, [sp, #0]
2000508c:	f64d 1318 	movw	r3, #55576	; 0xd918
20005090:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005094:	9301      	str	r3, [sp, #4]
20005096:	f644 50c1 	movw	r0, #19905	; 0x4dc1
2000509a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000509e:	f247 513c 	movw	r1, #30012	; 0x753c
200050a2:	f2c2 0100 	movt	r1, #8192	; 0x2000
200050a6:	f04f 0250 	mov.w	r2, #80	; 0x50
200050aa:	f64d 13bc 	movw	r3, #55740	; 0xd9bc
200050ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050b2:	f7fc fee5 	bl	20001e80 <xTaskCreate>

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);

		pkt_timer[0] = xTimerCreate("TLM_Task_Timer", pdMS_TO_TICKS(5000),pdTRUE, (void* )0, vtlm_task);
200050b6:	f644 3331 	movw	r3, #19249	; 0x4b31
200050ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050be:	9300      	str	r3, [sp, #0]
200050c0:	f247 5048 	movw	r0, #30024	; 0x7548
200050c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200050c8:	f241 3188 	movw	r1, #5000	; 0x1388
200050cc:	f04f 0201 	mov.w	r2, #1
200050d0:	f04f 0300 	mov.w	r3, #0
200050d4:	f7fe fa9c 	bl	20003610 <xTimerCreate>
200050d8:	4602      	mov	r2, r0
200050da:	f24e 0348 	movw	r3, #57416	; 0xe048
200050de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050e2:	601a      	str	r2, [r3, #0]
		xTimerStart(pkt_timer[0], 0);
200050e4:	f24e 0348 	movw	r3, #57416	; 0xe048
200050e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200050ec:	681c      	ldr	r4, [r3, #0]
200050ee:	f7fd fa7d 	bl	200025ec <xTaskGetTickCount>
200050f2:	4603      	mov	r3, r0
200050f4:	f04f 0200 	mov.w	r2, #0
200050f8:	9200      	str	r2, [sp, #0]
200050fa:	4620      	mov	r0, r4
200050fc:	f04f 0101 	mov.w	r1, #1
20005100:	461a      	mov	r2, r3
20005102:	f04f 0300 	mov.w	r3, #0
20005106:	f7fe fad5 	bl	200036b4 <xTimerGenericCommand>

		pkt_timer[1] = xTimerCreate("Sender_Timer", pdMS_TO_TICKS(5005), pdTRUE, (void* )0, vtlm_sender);
2000510a:	f644 5359 	movw	r3, #19801	; 0x4d59
2000510e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005112:	9300      	str	r3, [sp, #0]
20005114:	f247 5058 	movw	r0, #30040	; 0x7558
20005118:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000511c:	f241 318d 	movw	r1, #5005	; 0x138d
20005120:	f04f 0201 	mov.w	r2, #1
20005124:	f04f 0300 	mov.w	r3, #0
20005128:	f7fe fa72 	bl	20003610 <xTimerCreate>
2000512c:	4602      	mov	r2, r0
2000512e:	f24e 0348 	movw	r3, #57416	; 0xe048
20005132:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005136:	605a      	str	r2, [r3, #4]
		xTimerStart(pkt_timer[1], 0);
20005138:	f24e 0348 	movw	r3, #57416	; 0xe048
2000513c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005140:	685c      	ldr	r4, [r3, #4]
20005142:	f7fd fa53 	bl	200025ec <xTaskGetTickCount>
20005146:	4603      	mov	r3, r0
20005148:	f04f 0200 	mov.w	r2, #0
2000514c:	9200      	str	r2, [sp, #0]
2000514e:	4620      	mov	r0, r4
20005150:	f04f 0101 	mov.w	r1, #1
20005154:	461a      	mov	r2, r3
20005156:	f04f 0300 	mov.w	r3, #0
2000515a:	f7fe faab 	bl	200036b4 <xTimerGenericCommand>
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
2000515e:	f7fd f909 	bl	20002374 <vTaskStartScheduler>

}
20005162:	f107 0724 	add.w	r7, r7, #36	; 0x24
20005166:	46bd      	mov	sp, r7
20005168:	bd90      	pop	{r4, r7, pc}
2000516a:	bf00      	nop

2000516c <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
2000516c:	b580      	push	{r7, lr}
2000516e:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
20005170:	f64d 600c 	movw	r0, #56844	; 0xde0c
20005174:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005178:	f001 f838 	bl	200061ec <I2C_isr>
}
2000517c:	bd80      	pop	{r7, pc}
2000517e:	bf00      	nop

20005180 <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
20005180:	b580      	push	{r7, lr}
20005182:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
20005184:	f64d 6078 	movw	r0, #56952	; 0xde78
20005188:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000518c:	f001 f82e 	bl	200061ec <I2C_isr>
}
20005190:	bd80      	pop	{r7, pc}
20005192:	bf00      	nop

20005194 <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
20005194:	b580      	push	{r7, lr}
20005196:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
20005198:	f64d 1050 	movw	r0, #55632	; 0xd950
2000519c:	f2c2 0000 	movt	r0, #8192	; 0x2000
200051a0:	f001 f824 	bl	200061ec <I2C_isr>
}
200051a4:	bd80      	pop	{r7, pc}
200051a6:	bf00      	nop

200051a8 <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
200051a8:	b580      	push	{r7, lr}
200051aa:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
200051ac:	f64d 7050 	movw	r0, #57168	; 0xdf50
200051b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200051b4:	f001 f81a 	bl	200061ec <I2C_isr>
}
200051b8:	bd80      	pop	{r7, pc}
200051ba:	bf00      	nop

200051bc <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
200051bc:	b580      	push	{r7, lr}
200051be:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
200051c0:	f64d 70c4 	movw	r0, #57284	; 0xdfc4
200051c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200051c8:	f001 f810 	bl	200061ec <I2C_isr>
}
200051cc:	bd80      	pop	{r7, pc}
200051ce:	bf00      	nop

200051d0 <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
200051d0:	b580      	push	{r7, lr}
200051d2:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
200051d4:	f64d 60e4 	movw	r0, #57060	; 0xdee4
200051d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200051dc:	f001 f806 	bl	200061ec <I2C_isr>
}
200051e0:	bd80      	pop	{r7, pc}
200051e2:	bf00      	nop

200051e4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200051e4:	b480      	push	{r7}
200051e6:	b083      	sub	sp, #12
200051e8:	af00      	add	r7, sp, #0
200051ea:	4603      	mov	r3, r0
200051ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200051ee:	f24e 1300 	movw	r3, #57600	; 0xe100
200051f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200051f6:	f997 2007 	ldrsb.w	r2, [r7, #7]
200051fa:	ea4f 1252 	mov.w	r2, r2, lsr #5
200051fe:	79f9      	ldrb	r1, [r7, #7]
20005200:	f001 011f 	and.w	r1, r1, #31
20005204:	f04f 0001 	mov.w	r0, #1
20005208:	fa00 f101 	lsl.w	r1, r0, r1
2000520c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20005210:	f107 070c 	add.w	r7, r7, #12
20005214:	46bd      	mov	sp, r7
20005216:	bc80      	pop	{r7}
20005218:	4770      	bx	lr
2000521a:	bf00      	nop

2000521c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000521c:	b480      	push	{r7}
2000521e:	b083      	sub	sp, #12
20005220:	af00      	add	r7, sp, #0
20005222:	4603      	mov	r3, r0
20005224:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20005226:	f24e 1300 	movw	r3, #57600	; 0xe100
2000522a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000522e:	f997 2007 	ldrsb.w	r2, [r7, #7]
20005232:	ea4f 1252 	mov.w	r2, r2, lsr #5
20005236:	79f9      	ldrb	r1, [r7, #7]
20005238:	f001 011f 	and.w	r1, r1, #31
2000523c:	f04f 0001 	mov.w	r0, #1
20005240:	fa00 f101 	lsl.w	r1, r0, r1
20005244:	f102 0260 	add.w	r2, r2, #96	; 0x60
20005248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000524c:	f107 070c 	add.w	r7, r7, #12
20005250:	46bd      	mov	sp, r7
20005252:	bc80      	pop	{r7}
20005254:	4770      	bx	lr
20005256:	bf00      	nop

20005258 <set_bit_reg8>:
20005258:	b480      	push	{r7}
2000525a:	b083      	sub	sp, #12
2000525c:	af00      	add	r7, sp, #0
2000525e:	6078      	str	r0, [r7, #4]
20005260:	460b      	mov	r3, r1
20005262:	70fb      	strb	r3, [r7, #3]
20005264:	687b      	ldr	r3, [r7, #4]
20005266:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
2000526a:	687b      	ldr	r3, [r7, #4]
2000526c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20005270:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20005274:	ea4f 1343 	mov.w	r3, r3, lsl #5
20005278:	441a      	add	r2, r3
2000527a:	78fb      	ldrb	r3, [r7, #3]
2000527c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005280:	4413      	add	r3, r2
20005282:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
20005286:	f04f 0201 	mov.w	r2, #1
2000528a:	601a      	str	r2, [r3, #0]
2000528c:	f107 070c 	add.w	r7, r7, #12
20005290:	46bd      	mov	sp, r7
20005292:	bc80      	pop	{r7}
20005294:	4770      	bx	lr
20005296:	bf00      	nop

20005298 <clear_bit_reg8>:
20005298:	b480      	push	{r7}
2000529a:	b083      	sub	sp, #12
2000529c:	af00      	add	r7, sp, #0
2000529e:	6078      	str	r0, [r7, #4]
200052a0:	460b      	mov	r3, r1
200052a2:	70fb      	strb	r3, [r7, #3]
200052a4:	687b      	ldr	r3, [r7, #4]
200052a6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200052aa:	687b      	ldr	r3, [r7, #4]
200052ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200052b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200052b4:	ea4f 1343 	mov.w	r3, r3, lsl #5
200052b8:	441a      	add	r2, r3
200052ba:	78fb      	ldrb	r3, [r7, #3]
200052bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
200052c0:	4413      	add	r3, r2
200052c2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
200052c6:	f04f 0200 	mov.w	r2, #0
200052ca:	601a      	str	r2, [r3, #0]
200052cc:	f107 070c 	add.w	r7, r7, #12
200052d0:	46bd      	mov	sp, r7
200052d2:	bc80      	pop	{r7}
200052d4:	4770      	bx	lr
200052d6:	bf00      	nop

200052d8 <read_bit_reg8>:
200052d8:	b480      	push	{r7}
200052da:	b083      	sub	sp, #12
200052dc:	af00      	add	r7, sp, #0
200052de:	6078      	str	r0, [r7, #4]
200052e0:	460b      	mov	r3, r1
200052e2:	70fb      	strb	r3, [r7, #3]
200052e4:	687b      	ldr	r3, [r7, #4]
200052e6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
200052ea:	687b      	ldr	r3, [r7, #4]
200052ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200052f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200052f4:	ea4f 1343 	mov.w	r3, r3, lsl #5
200052f8:	441a      	add	r2, r3
200052fa:	78fb      	ldrb	r3, [r7, #3]
200052fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
20005300:	4413      	add	r3, r2
20005302:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
20005306:	681b      	ldr	r3, [r3, #0]
20005308:	b2db      	uxtb	r3, r3
2000530a:	4618      	mov	r0, r3
2000530c:	f107 070c 	add.w	r7, r7, #12
20005310:	46bd      	mov	sp, r7
20005312:	bc80      	pop	{r7}
20005314:	4770      	bx	lr
20005316:	bf00      	nop

20005318 <MSS_UART_init>:
20005318:	b580      	push	{r7, lr}
2000531a:	b084      	sub	sp, #16
2000531c:	af00      	add	r7, sp, #0
2000531e:	60f8      	str	r0, [r7, #12]
20005320:	60b9      	str	r1, [r7, #8]
20005322:	4613      	mov	r3, r2
20005324:	71fb      	strb	r3, [r7, #7]
20005326:	68fa      	ldr	r2, [r7, #12]
20005328:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
2000532c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005330:	429a      	cmp	r2, r3
20005332:	d007      	beq.n	20005344 <MSS_UART_init+0x2c>
20005334:	68fa      	ldr	r2, [r7, #12]
20005336:	f24e 0398 	movw	r3, #57496	; 0xe098
2000533a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000533e:	429a      	cmp	r2, r3
20005340:	d000      	beq.n	20005344 <MSS_UART_init+0x2c>
20005342:	be00      	bkpt	0x0000
20005344:	79fb      	ldrb	r3, [r7, #7]
20005346:	68f8      	ldr	r0, [r7, #12]
20005348:	68b9      	ldr	r1, [r7, #8]
2000534a:	461a      	mov	r2, r3
2000534c:	f000 fa56 	bl	200057fc <global_init>
20005350:	68fb      	ldr	r3, [r7, #12]
20005352:	681b      	ldr	r3, [r3, #0]
20005354:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005358:	4618      	mov	r0, r3
2000535a:	f04f 0103 	mov.w	r1, #3
2000535e:	f7ff ff9b 	bl	20005298 <clear_bit_reg8>
20005362:	68fb      	ldr	r3, [r7, #12]
20005364:	681b      	ldr	r3, [r3, #0]
20005366:	f103 0334 	add.w	r3, r3, #52	; 0x34
2000536a:	4618      	mov	r0, r3
2000536c:	f04f 0102 	mov.w	r1, #2
20005370:	f7ff ff92 	bl	20005298 <clear_bit_reg8>
20005374:	68fb      	ldr	r3, [r7, #12]
20005376:	681b      	ldr	r3, [r3, #0]
20005378:	f103 0338 	add.w	r3, r3, #56	; 0x38
2000537c:	4618      	mov	r0, r3
2000537e:	f04f 0100 	mov.w	r1, #0
20005382:	f7ff ff89 	bl	20005298 <clear_bit_reg8>
20005386:	68fa      	ldr	r2, [r7, #12]
20005388:	f645 4395 	movw	r3, #23701	; 0x5c95
2000538c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005390:	6253      	str	r3, [r2, #36]	; 0x24
20005392:	f107 0710 	add.w	r7, r7, #16
20005396:	46bd      	mov	sp, r7
20005398:	bd80      	pop	{r7, pc}
2000539a:	bf00      	nop

2000539c <MSS_UART_polled_tx>:
2000539c:	b480      	push	{r7}
2000539e:	b089      	sub	sp, #36	; 0x24
200053a0:	af00      	add	r7, sp, #0
200053a2:	60f8      	str	r0, [r7, #12]
200053a4:	60b9      	str	r1, [r7, #8]
200053a6:	607a      	str	r2, [r7, #4]
200053a8:	f04f 0300 	mov.w	r3, #0
200053ac:	613b      	str	r3, [r7, #16]
200053ae:	68fa      	ldr	r2, [r7, #12]
200053b0:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
200053b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053b8:	429a      	cmp	r2, r3
200053ba:	d007      	beq.n	200053cc <MSS_UART_polled_tx+0x30>
200053bc:	68fa      	ldr	r2, [r7, #12]
200053be:	f24e 0398 	movw	r3, #57496	; 0xe098
200053c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053c6:	429a      	cmp	r2, r3
200053c8:	d000      	beq.n	200053cc <MSS_UART_polled_tx+0x30>
200053ca:	be00      	bkpt	0x0000
200053cc:	68bb      	ldr	r3, [r7, #8]
200053ce:	2b00      	cmp	r3, #0
200053d0:	d100      	bne.n	200053d4 <MSS_UART_polled_tx+0x38>
200053d2:	be00      	bkpt	0x0000
200053d4:	687b      	ldr	r3, [r7, #4]
200053d6:	2b00      	cmp	r3, #0
200053d8:	d100      	bne.n	200053dc <MSS_UART_polled_tx+0x40>
200053da:	be00      	bkpt	0x0000
200053dc:	68fa      	ldr	r2, [r7, #12]
200053de:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
200053e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053e6:	429a      	cmp	r2, r3
200053e8:	d006      	beq.n	200053f8 <MSS_UART_polled_tx+0x5c>
200053ea:	68fa      	ldr	r2, [r7, #12]
200053ec:	f24e 0398 	movw	r3, #57496	; 0xe098
200053f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200053f4:	429a      	cmp	r2, r3
200053f6:	d13d      	bne.n	20005474 <MSS_UART_polled_tx+0xd8>
200053f8:	68bb      	ldr	r3, [r7, #8]
200053fa:	2b00      	cmp	r3, #0
200053fc:	d03a      	beq.n	20005474 <MSS_UART_polled_tx+0xd8>
200053fe:	687b      	ldr	r3, [r7, #4]
20005400:	2b00      	cmp	r3, #0
20005402:	d037      	beq.n	20005474 <MSS_UART_polled_tx+0xd8>
20005404:	68fb      	ldr	r3, [r7, #12]
20005406:	681b      	ldr	r3, [r3, #0]
20005408:	7d1b      	ldrb	r3, [r3, #20]
2000540a:	76fb      	strb	r3, [r7, #27]
2000540c:	68fb      	ldr	r3, [r7, #12]
2000540e:	7b5a      	ldrb	r2, [r3, #13]
20005410:	7efb      	ldrb	r3, [r7, #27]
20005412:	ea42 0303 	orr.w	r3, r2, r3
20005416:	b2da      	uxtb	r2, r3
20005418:	68fb      	ldr	r3, [r7, #12]
2000541a:	735a      	strb	r2, [r3, #13]
2000541c:	7efb      	ldrb	r3, [r7, #27]
2000541e:	f003 0320 	and.w	r3, r3, #32
20005422:	2b00      	cmp	r3, #0
20005424:	d023      	beq.n	2000546e <MSS_UART_polled_tx+0xd2>
20005426:	f04f 0310 	mov.w	r3, #16
2000542a:	61fb      	str	r3, [r7, #28]
2000542c:	687b      	ldr	r3, [r7, #4]
2000542e:	2b0f      	cmp	r3, #15
20005430:	d801      	bhi.n	20005436 <MSS_UART_polled_tx+0x9a>
20005432:	687b      	ldr	r3, [r7, #4]
20005434:	61fb      	str	r3, [r7, #28]
20005436:	f04f 0300 	mov.w	r3, #0
2000543a:	617b      	str	r3, [r7, #20]
2000543c:	e00e      	b.n	2000545c <MSS_UART_polled_tx+0xc0>
2000543e:	68fb      	ldr	r3, [r7, #12]
20005440:	681b      	ldr	r3, [r3, #0]
20005442:	68b9      	ldr	r1, [r7, #8]
20005444:	693a      	ldr	r2, [r7, #16]
20005446:	440a      	add	r2, r1
20005448:	7812      	ldrb	r2, [r2, #0]
2000544a:	701a      	strb	r2, [r3, #0]
2000544c:	693b      	ldr	r3, [r7, #16]
2000544e:	f103 0301 	add.w	r3, r3, #1
20005452:	613b      	str	r3, [r7, #16]
20005454:	697b      	ldr	r3, [r7, #20]
20005456:	f103 0301 	add.w	r3, r3, #1
2000545a:	617b      	str	r3, [r7, #20]
2000545c:	697a      	ldr	r2, [r7, #20]
2000545e:	69fb      	ldr	r3, [r7, #28]
20005460:	429a      	cmp	r2, r3
20005462:	d3ec      	bcc.n	2000543e <MSS_UART_polled_tx+0xa2>
20005464:	687a      	ldr	r2, [r7, #4]
20005466:	697b      	ldr	r3, [r7, #20]
20005468:	ebc3 0302 	rsb	r3, r3, r2
2000546c:	607b      	str	r3, [r7, #4]
2000546e:	687b      	ldr	r3, [r7, #4]
20005470:	2b00      	cmp	r3, #0
20005472:	d1c7      	bne.n	20005404 <MSS_UART_polled_tx+0x68>
20005474:	f107 0724 	add.w	r7, r7, #36	; 0x24
20005478:	46bd      	mov	sp, r7
2000547a:	bc80      	pop	{r7}
2000547c:	4770      	bx	lr
2000547e:	bf00      	nop

20005480 <MSS_UART_get_rx>:
20005480:	b480      	push	{r7}
20005482:	b087      	sub	sp, #28
20005484:	af00      	add	r7, sp, #0
20005486:	60f8      	str	r0, [r7, #12]
20005488:	60b9      	str	r1, [r7, #8]
2000548a:	607a      	str	r2, [r7, #4]
2000548c:	f04f 0300 	mov.w	r3, #0
20005490:	613b      	str	r3, [r7, #16]
20005492:	f04f 0300 	mov.w	r3, #0
20005496:	75fb      	strb	r3, [r7, #23]
20005498:	68fa      	ldr	r2, [r7, #12]
2000549a:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
2000549e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200054a2:	429a      	cmp	r2, r3
200054a4:	d007      	beq.n	200054b6 <MSS_UART_get_rx+0x36>
200054a6:	68fa      	ldr	r2, [r7, #12]
200054a8:	f24e 0398 	movw	r3, #57496	; 0xe098
200054ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200054b0:	429a      	cmp	r2, r3
200054b2:	d000      	beq.n	200054b6 <MSS_UART_get_rx+0x36>
200054b4:	be00      	bkpt	0x0000
200054b6:	68bb      	ldr	r3, [r7, #8]
200054b8:	2b00      	cmp	r3, #0
200054ba:	d100      	bne.n	200054be <MSS_UART_get_rx+0x3e>
200054bc:	be00      	bkpt	0x0000
200054be:	687b      	ldr	r3, [r7, #4]
200054c0:	2b00      	cmp	r3, #0
200054c2:	d100      	bne.n	200054c6 <MSS_UART_get_rx+0x46>
200054c4:	be00      	bkpt	0x0000
200054c6:	68fa      	ldr	r2, [r7, #12]
200054c8:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
200054cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200054d0:	429a      	cmp	r2, r3
200054d2:	d006      	beq.n	200054e2 <MSS_UART_get_rx+0x62>
200054d4:	68fa      	ldr	r2, [r7, #12]
200054d6:	f24e 0398 	movw	r3, #57496	; 0xe098
200054da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200054de:	429a      	cmp	r2, r3
200054e0:	d134      	bne.n	2000554c <MSS_UART_get_rx+0xcc>
200054e2:	68bb      	ldr	r3, [r7, #8]
200054e4:	2b00      	cmp	r3, #0
200054e6:	d031      	beq.n	2000554c <MSS_UART_get_rx+0xcc>
200054e8:	687b      	ldr	r3, [r7, #4]
200054ea:	2b00      	cmp	r3, #0
200054ec:	d02e      	beq.n	2000554c <MSS_UART_get_rx+0xcc>
200054ee:	68fb      	ldr	r3, [r7, #12]
200054f0:	681b      	ldr	r3, [r3, #0]
200054f2:	7d1b      	ldrb	r3, [r3, #20]
200054f4:	75fb      	strb	r3, [r7, #23]
200054f6:	68fb      	ldr	r3, [r7, #12]
200054f8:	7b5a      	ldrb	r2, [r3, #13]
200054fa:	7dfb      	ldrb	r3, [r7, #23]
200054fc:	ea42 0303 	orr.w	r3, r2, r3
20005500:	b2da      	uxtb	r2, r3
20005502:	68fb      	ldr	r3, [r7, #12]
20005504:	735a      	strb	r2, [r3, #13]
20005506:	e017      	b.n	20005538 <MSS_UART_get_rx+0xb8>
20005508:	68ba      	ldr	r2, [r7, #8]
2000550a:	693b      	ldr	r3, [r7, #16]
2000550c:	4413      	add	r3, r2
2000550e:	68fa      	ldr	r2, [r7, #12]
20005510:	6812      	ldr	r2, [r2, #0]
20005512:	7812      	ldrb	r2, [r2, #0]
20005514:	b2d2      	uxtb	r2, r2
20005516:	701a      	strb	r2, [r3, #0]
20005518:	693b      	ldr	r3, [r7, #16]
2000551a:	f103 0301 	add.w	r3, r3, #1
2000551e:	613b      	str	r3, [r7, #16]
20005520:	68fb      	ldr	r3, [r7, #12]
20005522:	681b      	ldr	r3, [r3, #0]
20005524:	7d1b      	ldrb	r3, [r3, #20]
20005526:	75fb      	strb	r3, [r7, #23]
20005528:	68fb      	ldr	r3, [r7, #12]
2000552a:	7b5a      	ldrb	r2, [r3, #13]
2000552c:	7dfb      	ldrb	r3, [r7, #23]
2000552e:	ea42 0303 	orr.w	r3, r2, r3
20005532:	b2da      	uxtb	r2, r3
20005534:	68fb      	ldr	r3, [r7, #12]
20005536:	735a      	strb	r2, [r3, #13]
20005538:	7dfb      	ldrb	r3, [r7, #23]
2000553a:	f003 0301 	and.w	r3, r3, #1
2000553e:	b2db      	uxtb	r3, r3
20005540:	2b00      	cmp	r3, #0
20005542:	d003      	beq.n	2000554c <MSS_UART_get_rx+0xcc>
20005544:	693a      	ldr	r2, [r7, #16]
20005546:	687b      	ldr	r3, [r7, #4]
20005548:	429a      	cmp	r2, r3
2000554a:	d3dd      	bcc.n	20005508 <MSS_UART_get_rx+0x88>
2000554c:	693b      	ldr	r3, [r7, #16]
2000554e:	4618      	mov	r0, r3
20005550:	f107 071c 	add.w	r7, r7, #28
20005554:	46bd      	mov	sp, r7
20005556:	bc80      	pop	{r7}
20005558:	4770      	bx	lr
2000555a:	bf00      	nop

2000555c <MSS_UART_set_rx_handler>:
2000555c:	b580      	push	{r7, lr}
2000555e:	b084      	sub	sp, #16
20005560:	af00      	add	r7, sp, #0
20005562:	60f8      	str	r0, [r7, #12]
20005564:	60b9      	str	r1, [r7, #8]
20005566:	4613      	mov	r3, r2
20005568:	71fb      	strb	r3, [r7, #7]
2000556a:	68fa      	ldr	r2, [r7, #12]
2000556c:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
20005570:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005574:	429a      	cmp	r2, r3
20005576:	d007      	beq.n	20005588 <MSS_UART_set_rx_handler+0x2c>
20005578:	68fa      	ldr	r2, [r7, #12]
2000557a:	f24e 0398 	movw	r3, #57496	; 0xe098
2000557e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005582:	429a      	cmp	r2, r3
20005584:	d000      	beq.n	20005588 <MSS_UART_set_rx_handler+0x2c>
20005586:	be00      	bkpt	0x0000
20005588:	68bb      	ldr	r3, [r7, #8]
2000558a:	2b00      	cmp	r3, #0
2000558c:	d100      	bne.n	20005590 <MSS_UART_set_rx_handler+0x34>
2000558e:	be00      	bkpt	0x0000
20005590:	79fb      	ldrb	r3, [r7, #7]
20005592:	2bc0      	cmp	r3, #192	; 0xc0
20005594:	d900      	bls.n	20005598 <MSS_UART_set_rx_handler+0x3c>
20005596:	be00      	bkpt	0x0000
20005598:	68fa      	ldr	r2, [r7, #12]
2000559a:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
2000559e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055a2:	429a      	cmp	r2, r3
200055a4:	d006      	beq.n	200055b4 <MSS_UART_set_rx_handler+0x58>
200055a6:	68fa      	ldr	r2, [r7, #12]
200055a8:	f24e 0398 	movw	r3, #57496	; 0xe098
200055ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
200055b0:	429a      	cmp	r2, r3
200055b2:	d12e      	bne.n	20005612 <MSS_UART_set_rx_handler+0xb6>
200055b4:	68bb      	ldr	r3, [r7, #8]
200055b6:	2b00      	cmp	r3, #0
200055b8:	d02b      	beq.n	20005612 <MSS_UART_set_rx_handler+0xb6>
200055ba:	79fb      	ldrb	r3, [r7, #7]
200055bc:	2bc0      	cmp	r3, #192	; 0xc0
200055be:	d828      	bhi.n	20005612 <MSS_UART_set_rx_handler+0xb6>
200055c0:	68fb      	ldr	r3, [r7, #12]
200055c2:	68ba      	ldr	r2, [r7, #8]
200055c4:	621a      	str	r2, [r3, #32]
200055c6:	68fb      	ldr	r3, [r7, #12]
200055c8:	681a      	ldr	r2, [r3, #0]
200055ca:	68fb      	ldr	r3, [r7, #12]
200055cc:	681b      	ldr	r3, [r3, #0]
200055ce:	7a1b      	ldrb	r3, [r3, #8]
200055d0:	b2db      	uxtb	r3, r3
200055d2:	b2db      	uxtb	r3, r3
200055d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200055d8:	79f8      	ldrb	r0, [r7, #7]
200055da:	4619      	mov	r1, r3
200055dc:	4603      	mov	r3, r0
200055de:	ea41 0303 	orr.w	r3, r1, r3
200055e2:	b2db      	uxtb	r3, r3
200055e4:	b2db      	uxtb	r3, r3
200055e6:	7213      	strb	r3, [r2, #8]
200055e8:	68fb      	ldr	r3, [r7, #12]
200055ea:	791b      	ldrb	r3, [r3, #4]
200055ec:	b25b      	sxtb	r3, r3
200055ee:	4618      	mov	r0, r3
200055f0:	f7ff fe14 	bl	2000521c <NVIC_ClearPendingIRQ>
200055f4:	68fb      	ldr	r3, [r7, #12]
200055f6:	681b      	ldr	r3, [r3, #0]
200055f8:	f103 0304 	add.w	r3, r3, #4
200055fc:	4618      	mov	r0, r3
200055fe:	f04f 0100 	mov.w	r1, #0
20005602:	f7ff fe29 	bl	20005258 <set_bit_reg8>
20005606:	68fb      	ldr	r3, [r7, #12]
20005608:	791b      	ldrb	r3, [r3, #4]
2000560a:	b25b      	sxtb	r3, r3
2000560c:	4618      	mov	r0, r3
2000560e:	f7ff fde9 	bl	200051e4 <NVIC_EnableIRQ>
20005612:	f107 0710 	add.w	r7, r7, #16
20005616:	46bd      	mov	sp, r7
20005618:	bd80      	pop	{r7, pc}
2000561a:	bf00      	nop

2000561c <UART0_IRQHandler>:
2000561c:	4668      	mov	r0, sp
2000561e:	f020 0107 	bic.w	r1, r0, #7
20005622:	468d      	mov	sp, r1
20005624:	b589      	push	{r0, r3, r7, lr}
20005626:	af00      	add	r7, sp, #0
20005628:	f24e 00d8 	movw	r0, #57560	; 0xe0d8
2000562c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005630:	f000 fa1a 	bl	20005a68 <MSS_UART_isr>
20005634:	46bd      	mov	sp, r7
20005636:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000563a:	4685      	mov	sp, r0
2000563c:	4770      	bx	lr
2000563e:	bf00      	nop

20005640 <UART1_IRQHandler>:
20005640:	4668      	mov	r0, sp
20005642:	f020 0107 	bic.w	r1, r0, #7
20005646:	468d      	mov	sp, r1
20005648:	b589      	push	{r0, r3, r7, lr}
2000564a:	af00      	add	r7, sp, #0
2000564c:	f24e 0098 	movw	r0, #57496	; 0xe098
20005650:	f2c2 0000 	movt	r0, #8192	; 0x2000
20005654:	f000 fa08 	bl	20005a68 <MSS_UART_isr>
20005658:	46bd      	mov	sp, r7
2000565a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000565e:	4685      	mov	sp, r0
20005660:	4770      	bx	lr
20005662:	bf00      	nop

20005664 <config_baud_divisors>:
20005664:	b580      	push	{r7, lr}
20005666:	b088      	sub	sp, #32
20005668:	af00      	add	r7, sp, #0
2000566a:	6078      	str	r0, [r7, #4]
2000566c:	6039      	str	r1, [r7, #0]
2000566e:	687a      	ldr	r2, [r7, #4]
20005670:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
20005674:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005678:	429a      	cmp	r2, r3
2000567a:	d007      	beq.n	2000568c <config_baud_divisors+0x28>
2000567c:	687a      	ldr	r2, [r7, #4]
2000567e:	f24e 0398 	movw	r3, #57496	; 0xe098
20005682:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005686:	429a      	cmp	r2, r3
20005688:	d000      	beq.n	2000568c <config_baud_divisors+0x28>
2000568a:	be00      	bkpt	0x0000
2000568c:	687a      	ldr	r2, [r7, #4]
2000568e:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
20005692:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005696:	429a      	cmp	r2, r3
20005698:	d007      	beq.n	200056aa <config_baud_divisors+0x46>
2000569a:	687a      	ldr	r2, [r7, #4]
2000569c:	f24e 0398 	movw	r3, #57496	; 0xe098
200056a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056a4:	429a      	cmp	r2, r3
200056a6:	f040 80a4 	bne.w	200057f2 <config_baud_divisors+0x18e>
200056aa:	687b      	ldr	r3, [r7, #4]
200056ac:	683a      	ldr	r2, [r7, #0]
200056ae:	609a      	str	r2, [r3, #8]
200056b0:	f001 fbca 	bl	20006e48 <SystemCoreClockUpdate>
200056b4:	687a      	ldr	r2, [r7, #4]
200056b6:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
200056ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056be:	429a      	cmp	r2, r3
200056c0:	d106      	bne.n	200056d0 <config_baud_divisors+0x6c>
200056c2:	f247 53e4 	movw	r3, #30180	; 0x75e4
200056c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056ca:	681b      	ldr	r3, [r3, #0]
200056cc:	61fb      	str	r3, [r7, #28]
200056ce:	e005      	b.n	200056dc <config_baud_divisors+0x78>
200056d0:	f247 53e8 	movw	r3, #30184	; 0x75e8
200056d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200056d8:	681b      	ldr	r3, [r3, #0]
200056da:	61fb      	str	r3, [r7, #28]
200056dc:	69fb      	ldr	r3, [r7, #28]
200056de:	ea4f 02c3 	mov.w	r2, r3, lsl #3
200056e2:	683b      	ldr	r3, [r7, #0]
200056e4:	fbb2 f3f3 	udiv	r3, r2, r3
200056e8:	617b      	str	r3, [r7, #20]
200056ea:	697b      	ldr	r3, [r7, #20]
200056ec:	ea4f 0353 	mov.w	r3, r3, lsr #1
200056f0:	613b      	str	r3, [r7, #16]
200056f2:	693b      	ldr	r3, [r7, #16]
200056f4:	ea4f 1393 	mov.w	r3, r3, lsr #6
200056f8:	60fb      	str	r3, [r7, #12]
200056fa:	68fb      	ldr	r3, [r7, #12]
200056fc:	ea4f 1383 	mov.w	r3, r3, lsl #6
20005700:	693a      	ldr	r2, [r7, #16]
20005702:	ebc3 0302 	rsb	r3, r3, r2
20005706:	61bb      	str	r3, [r7, #24]
20005708:	68fb      	ldr	r3, [r7, #12]
2000570a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
2000570e:	697a      	ldr	r2, [r7, #20]
20005710:	ebc3 0202 	rsb	r2, r3, r2
20005714:	69bb      	ldr	r3, [r7, #24]
20005716:	ea4f 0343 	mov.w	r3, r3, lsl #1
2000571a:	ebc3 0302 	rsb	r3, r3, r2
2000571e:	69ba      	ldr	r2, [r7, #24]
20005720:	4413      	add	r3, r2
20005722:	61bb      	str	r3, [r7, #24]
20005724:	68fa      	ldr	r2, [r7, #12]
20005726:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000572a:	429a      	cmp	r2, r3
2000572c:	d900      	bls.n	20005730 <config_baud_divisors+0xcc>
2000572e:	be00      	bkpt	0x0000
20005730:	68fa      	ldr	r2, [r7, #12]
20005732:	f64f 73ff 	movw	r3, #65535	; 0xffff
20005736:	429a      	cmp	r2, r3
20005738:	d85b      	bhi.n	200057f2 <config_baud_divisors+0x18e>
2000573a:	68fb      	ldr	r3, [r7, #12]
2000573c:	2b01      	cmp	r3, #1
2000573e:	d931      	bls.n	200057a4 <config_baud_divisors+0x140>
20005740:	687b      	ldr	r3, [r7, #4]
20005742:	681b      	ldr	r3, [r3, #0]
20005744:	f103 030c 	add.w	r3, r3, #12
20005748:	4618      	mov	r0, r3
2000574a:	f04f 0107 	mov.w	r1, #7
2000574e:	f7ff fd83 	bl	20005258 <set_bit_reg8>
20005752:	687b      	ldr	r3, [r7, #4]
20005754:	681b      	ldr	r3, [r3, #0]
20005756:	68fa      	ldr	r2, [r7, #12]
20005758:	ea4f 2212 	mov.w	r2, r2, lsr #8
2000575c:	b2d2      	uxtb	r2, r2
2000575e:	711a      	strb	r2, [r3, #4]
20005760:	687b      	ldr	r3, [r7, #4]
20005762:	681b      	ldr	r3, [r3, #0]
20005764:	68fa      	ldr	r2, [r7, #12]
20005766:	b2d2      	uxtb	r2, r2
20005768:	701a      	strb	r2, [r3, #0]
2000576a:	687b      	ldr	r3, [r7, #4]
2000576c:	681b      	ldr	r3, [r3, #0]
2000576e:	f103 030c 	add.w	r3, r3, #12
20005772:	4618      	mov	r0, r3
20005774:	f04f 0107 	mov.w	r1, #7
20005778:	f7ff fd8e 	bl	20005298 <clear_bit_reg8>
2000577c:	687b      	ldr	r3, [r7, #4]
2000577e:	681b      	ldr	r3, [r3, #0]
20005780:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005784:	4618      	mov	r0, r3
20005786:	f04f 0107 	mov.w	r1, #7
2000578a:	f7ff fd65 	bl	20005258 <set_bit_reg8>
2000578e:	69bb      	ldr	r3, [r7, #24]
20005790:	2bff      	cmp	r3, #255	; 0xff
20005792:	d900      	bls.n	20005796 <config_baud_divisors+0x132>
20005794:	be00      	bkpt	0x0000
20005796:	687b      	ldr	r3, [r7, #4]
20005798:	681b      	ldr	r3, [r3, #0]
2000579a:	69ba      	ldr	r2, [r7, #24]
2000579c:	b2d2      	uxtb	r2, r2
2000579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
200057a2:	e026      	b.n	200057f2 <config_baud_divisors+0x18e>
200057a4:	687b      	ldr	r3, [r7, #4]
200057a6:	681b      	ldr	r3, [r3, #0]
200057a8:	f103 030c 	add.w	r3, r3, #12
200057ac:	4618      	mov	r0, r3
200057ae:	f04f 0107 	mov.w	r1, #7
200057b2:	f7ff fd51 	bl	20005258 <set_bit_reg8>
200057b6:	687b      	ldr	r3, [r7, #4]
200057b8:	681b      	ldr	r3, [r3, #0]
200057ba:	68fa      	ldr	r2, [r7, #12]
200057bc:	ea4f 2212 	mov.w	r2, r2, lsr #8
200057c0:	b2d2      	uxtb	r2, r2
200057c2:	711a      	strb	r2, [r3, #4]
200057c4:	687b      	ldr	r3, [r7, #4]
200057c6:	681b      	ldr	r3, [r3, #0]
200057c8:	68fa      	ldr	r2, [r7, #12]
200057ca:	b2d2      	uxtb	r2, r2
200057cc:	701a      	strb	r2, [r3, #0]
200057ce:	687b      	ldr	r3, [r7, #4]
200057d0:	681b      	ldr	r3, [r3, #0]
200057d2:	f103 030c 	add.w	r3, r3, #12
200057d6:	4618      	mov	r0, r3
200057d8:	f04f 0107 	mov.w	r1, #7
200057dc:	f7ff fd5c 	bl	20005298 <clear_bit_reg8>
200057e0:	687b      	ldr	r3, [r7, #4]
200057e2:	681b      	ldr	r3, [r3, #0]
200057e4:	f103 0330 	add.w	r3, r3, #48	; 0x30
200057e8:	4618      	mov	r0, r3
200057ea:	f04f 0107 	mov.w	r1, #7
200057ee:	f7ff fd53 	bl	20005298 <clear_bit_reg8>
200057f2:	f107 0720 	add.w	r7, r7, #32
200057f6:	46bd      	mov	sp, r7
200057f8:	bd80      	pop	{r7, pc}
200057fa:	bf00      	nop

200057fc <global_init>:
200057fc:	b580      	push	{r7, lr}
200057fe:	b084      	sub	sp, #16
20005800:	af00      	add	r7, sp, #0
20005802:	60f8      	str	r0, [r7, #12]
20005804:	60b9      	str	r1, [r7, #8]
20005806:	4613      	mov	r3, r2
20005808:	71fb      	strb	r3, [r7, #7]
2000580a:	68fa      	ldr	r2, [r7, #12]
2000580c:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
20005810:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005814:	429a      	cmp	r2, r3
20005816:	d007      	beq.n	20005828 <global_init+0x2c>
20005818:	68fa      	ldr	r2, [r7, #12]
2000581a:	f24e 0398 	movw	r3, #57496	; 0xe098
2000581e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005822:	429a      	cmp	r2, r3
20005824:	d000      	beq.n	20005828 <global_init+0x2c>
20005826:	be00      	bkpt	0x0000
20005828:	68fa      	ldr	r2, [r7, #12]
2000582a:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
2000582e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005832:	429a      	cmp	r2, r3
20005834:	d124      	bne.n	20005880 <global_init+0x84>
20005836:	68fb      	ldr	r3, [r7, #12]
20005838:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
2000583c:	601a      	str	r2, [r3, #0]
2000583e:	68fb      	ldr	r3, [r7, #12]
20005840:	f04f 020a 	mov.w	r2, #10
20005844:	711a      	strb	r2, [r3, #4]
20005846:	f248 0300 	movw	r3, #32768	; 0x8000
2000584a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000584e:	f248 0200 	movw	r2, #32768	; 0x8000
20005852:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005856:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005858:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2000585c:	649a      	str	r2, [r3, #72]	; 0x48
2000585e:	f04f 000a 	mov.w	r0, #10
20005862:	f7ff fcdb 	bl	2000521c <NVIC_ClearPendingIRQ>
20005866:	f248 0300 	movw	r3, #32768	; 0x8000
2000586a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000586e:	f248 0200 	movw	r2, #32768	; 0x8000
20005872:	f2c4 0203 	movt	r2, #16387	; 0x4003
20005876:	6c92      	ldr	r2, [r2, #72]	; 0x48
20005878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000587c:	649a      	str	r2, [r3, #72]	; 0x48
2000587e:	e025      	b.n	200058cc <global_init+0xd0>
20005880:	68fa      	ldr	r2, [r7, #12]
20005882:	f240 0300 	movw	r3, #0
20005886:	f2c4 0301 	movt	r3, #16385	; 0x4001
2000588a:	6013      	str	r3, [r2, #0]
2000588c:	68fb      	ldr	r3, [r7, #12]
2000588e:	f04f 020b 	mov.w	r2, #11
20005892:	711a      	strb	r2, [r3, #4]
20005894:	f248 0300 	movw	r3, #32768	; 0x8000
20005898:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000589c:	f248 0200 	movw	r2, #32768	; 0x8000
200058a0:	f2c4 0203 	movt	r2, #16387	; 0x4003
200058a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
200058a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200058aa:	649a      	str	r2, [r3, #72]	; 0x48
200058ac:	f04f 000b 	mov.w	r0, #11
200058b0:	f7ff fcb4 	bl	2000521c <NVIC_ClearPendingIRQ>
200058b4:	f248 0300 	movw	r3, #32768	; 0x8000
200058b8:	f2c4 0303 	movt	r3, #16387	; 0x4003
200058bc:	f248 0200 	movw	r2, #32768	; 0x8000
200058c0:	f2c4 0203 	movt	r2, #16387	; 0x4003
200058c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
200058c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
200058ca:	649a      	str	r2, [r3, #72]	; 0x48
200058cc:	68fb      	ldr	r3, [r7, #12]
200058ce:	681b      	ldr	r3, [r3, #0]
200058d0:	f04f 0200 	mov.w	r2, #0
200058d4:	711a      	strb	r2, [r3, #4]
200058d6:	68fb      	ldr	r3, [r7, #12]
200058d8:	681b      	ldr	r3, [r3, #0]
200058da:	f04f 0200 	mov.w	r2, #0
200058de:	721a      	strb	r2, [r3, #8]
200058e0:	68fb      	ldr	r3, [r7, #12]
200058e2:	681b      	ldr	r3, [r3, #0]
200058e4:	f103 0308 	add.w	r3, r3, #8
200058e8:	4618      	mov	r0, r3
200058ea:	f04f 0101 	mov.w	r1, #1
200058ee:	f7ff fcb3 	bl	20005258 <set_bit_reg8>
200058f2:	68fb      	ldr	r3, [r7, #12]
200058f4:	681b      	ldr	r3, [r3, #0]
200058f6:	f103 0308 	add.w	r3, r3, #8
200058fa:	4618      	mov	r0, r3
200058fc:	f04f 0102 	mov.w	r1, #2
20005900:	f7ff fcaa 	bl	20005258 <set_bit_reg8>
20005904:	68fb      	ldr	r3, [r7, #12]
20005906:	681b      	ldr	r3, [r3, #0]
20005908:	f103 0308 	add.w	r3, r3, #8
2000590c:	4618      	mov	r0, r3
2000590e:	f04f 0100 	mov.w	r1, #0
20005912:	f7ff fca1 	bl	20005258 <set_bit_reg8>
20005916:	68fb      	ldr	r3, [r7, #12]
20005918:	681b      	ldr	r3, [r3, #0]
2000591a:	f103 0310 	add.w	r3, r3, #16
2000591e:	4618      	mov	r0, r3
20005920:	f04f 0104 	mov.w	r1, #4
20005924:	f7ff fcb8 	bl	20005298 <clear_bit_reg8>
20005928:	68fb      	ldr	r3, [r7, #12]
2000592a:	681b      	ldr	r3, [r3, #0]
2000592c:	f103 0310 	add.w	r3, r3, #16
20005930:	4618      	mov	r0, r3
20005932:	f04f 0105 	mov.w	r1, #5
20005936:	f7ff fcaf 	bl	20005298 <clear_bit_reg8>
2000593a:	68fb      	ldr	r3, [r7, #12]
2000593c:	681b      	ldr	r3, [r3, #0]
2000593e:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005942:	4618      	mov	r0, r3
20005944:	f04f 0101 	mov.w	r1, #1
20005948:	f7ff fca6 	bl	20005298 <clear_bit_reg8>
2000594c:	68fb      	ldr	r3, [r7, #12]
2000594e:	681b      	ldr	r3, [r3, #0]
20005950:	f103 0334 	add.w	r3, r3, #52	; 0x34
20005954:	4618      	mov	r0, r3
20005956:	f04f 0100 	mov.w	r1, #0
2000595a:	f7ff fc9d 	bl	20005298 <clear_bit_reg8>
2000595e:	68fb      	ldr	r3, [r7, #12]
20005960:	681b      	ldr	r3, [r3, #0]
20005962:	f103 0338 	add.w	r3, r3, #56	; 0x38
20005966:	4618      	mov	r0, r3
20005968:	f04f 0101 	mov.w	r1, #1
2000596c:	f7ff fc94 	bl	20005298 <clear_bit_reg8>
20005970:	68fb      	ldr	r3, [r7, #12]
20005972:	681b      	ldr	r3, [r3, #0]
20005974:	f103 0330 	add.w	r3, r3, #48	; 0x30
20005978:	4618      	mov	r0, r3
2000597a:	f04f 0105 	mov.w	r1, #5
2000597e:	f7ff fc8b 	bl	20005298 <clear_bit_reg8>
20005982:	68fb      	ldr	r3, [r7, #12]
20005984:	681b      	ldr	r3, [r3, #0]
20005986:	f103 0330 	add.w	r3, r3, #48	; 0x30
2000598a:	4618      	mov	r0, r3
2000598c:	f04f 0106 	mov.w	r1, #6
20005990:	f7ff fc82 	bl	20005298 <clear_bit_reg8>
20005994:	68fb      	ldr	r3, [r7, #12]
20005996:	681b      	ldr	r3, [r3, #0]
20005998:	f103 0330 	add.w	r3, r3, #48	; 0x30
2000599c:	4618      	mov	r0, r3
2000599e:	f04f 0107 	mov.w	r1, #7
200059a2:	f7ff fc79 	bl	20005298 <clear_bit_reg8>
200059a6:	68fb      	ldr	r3, [r7, #12]
200059a8:	681b      	ldr	r3, [r3, #0]
200059aa:	f103 0338 	add.w	r3, r3, #56	; 0x38
200059ae:	4618      	mov	r0, r3
200059b0:	f04f 0103 	mov.w	r1, #3
200059b4:	f7ff fc70 	bl	20005298 <clear_bit_reg8>
200059b8:	68fb      	ldr	r3, [r7, #12]
200059ba:	681b      	ldr	r3, [r3, #0]
200059bc:	f04f 0200 	mov.w	r2, #0
200059c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200059c4:	68fb      	ldr	r3, [r7, #12]
200059c6:	681b      	ldr	r3, [r3, #0]
200059c8:	f04f 0200 	mov.w	r2, #0
200059cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
200059d0:	68fb      	ldr	r3, [r7, #12]
200059d2:	681b      	ldr	r3, [r3, #0]
200059d4:	f04f 0200 	mov.w	r2, #0
200059d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
200059dc:	68f8      	ldr	r0, [r7, #12]
200059de:	68b9      	ldr	r1, [r7, #8]
200059e0:	f7ff fe40 	bl	20005664 <config_baud_divisors>
200059e4:	68fb      	ldr	r3, [r7, #12]
200059e6:	681b      	ldr	r3, [r3, #0]
200059e8:	79fa      	ldrb	r2, [r7, #7]
200059ea:	731a      	strb	r2, [r3, #12]
200059ec:	68fb      	ldr	r3, [r7, #12]
200059ee:	68ba      	ldr	r2, [r7, #8]
200059f0:	609a      	str	r2, [r3, #8]
200059f2:	68fb      	ldr	r3, [r7, #12]
200059f4:	79fa      	ldrb	r2, [r7, #7]
200059f6:	731a      	strb	r2, [r3, #12]
200059f8:	68fb      	ldr	r3, [r7, #12]
200059fa:	f04f 0200 	mov.w	r2, #0
200059fe:	615a      	str	r2, [r3, #20]
20005a00:	68fb      	ldr	r3, [r7, #12]
20005a02:	f04f 0200 	mov.w	r2, #0
20005a06:	611a      	str	r2, [r3, #16]
20005a08:	68fb      	ldr	r3, [r7, #12]
20005a0a:	f04f 0200 	mov.w	r2, #0
20005a0e:	619a      	str	r2, [r3, #24]
20005a10:	68fb      	ldr	r3, [r7, #12]
20005a12:	f04f 0200 	mov.w	r2, #0
20005a16:	621a      	str	r2, [r3, #32]
20005a18:	68fb      	ldr	r3, [r7, #12]
20005a1a:	f04f 0200 	mov.w	r2, #0
20005a1e:	625a      	str	r2, [r3, #36]	; 0x24
20005a20:	68fb      	ldr	r3, [r7, #12]
20005a22:	f04f 0200 	mov.w	r2, #0
20005a26:	61da      	str	r2, [r3, #28]
20005a28:	68fb      	ldr	r3, [r7, #12]
20005a2a:	f04f 0200 	mov.w	r2, #0
20005a2e:	629a      	str	r2, [r3, #40]	; 0x28
20005a30:	68fb      	ldr	r3, [r7, #12]
20005a32:	f04f 0200 	mov.w	r2, #0
20005a36:	62da      	str	r2, [r3, #44]	; 0x2c
20005a38:	68fb      	ldr	r3, [r7, #12]
20005a3a:	f04f 0200 	mov.w	r2, #0
20005a3e:	631a      	str	r2, [r3, #48]	; 0x30
20005a40:	68fb      	ldr	r3, [r7, #12]
20005a42:	f04f 0200 	mov.w	r2, #0
20005a46:	635a      	str	r2, [r3, #52]	; 0x34
20005a48:	68fb      	ldr	r3, [r7, #12]
20005a4a:	f04f 0200 	mov.w	r2, #0
20005a4e:	639a      	str	r2, [r3, #56]	; 0x38
20005a50:	68fb      	ldr	r3, [r7, #12]
20005a52:	f04f 0200 	mov.w	r2, #0
20005a56:	63da      	str	r2, [r3, #60]	; 0x3c
20005a58:	68fb      	ldr	r3, [r7, #12]
20005a5a:	f04f 0200 	mov.w	r2, #0
20005a5e:	735a      	strb	r2, [r3, #13]
20005a60:	f107 0710 	add.w	r7, r7, #16
20005a64:	46bd      	mov	sp, r7
20005a66:	bd80      	pop	{r7, pc}

20005a68 <MSS_UART_isr>:
20005a68:	b580      	push	{r7, lr}
20005a6a:	b084      	sub	sp, #16
20005a6c:	af00      	add	r7, sp, #0
20005a6e:	6078      	str	r0, [r7, #4]
20005a70:	687a      	ldr	r2, [r7, #4]
20005a72:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
20005a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a7a:	429a      	cmp	r2, r3
20005a7c:	d007      	beq.n	20005a8e <MSS_UART_isr+0x26>
20005a7e:	687a      	ldr	r2, [r7, #4]
20005a80:	f24e 0398 	movw	r3, #57496	; 0xe098
20005a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a88:	429a      	cmp	r2, r3
20005a8a:	d000      	beq.n	20005a8e <MSS_UART_isr+0x26>
20005a8c:	be00      	bkpt	0x0000
20005a8e:	687a      	ldr	r2, [r7, #4]
20005a90:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
20005a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005a98:	429a      	cmp	r2, r3
20005a9a:	d007      	beq.n	20005aac <MSS_UART_isr+0x44>
20005a9c:	687a      	ldr	r2, [r7, #4]
20005a9e:	f24e 0398 	movw	r3, #57496	; 0xe098
20005aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005aa6:	429a      	cmp	r2, r3
20005aa8:	f040 80ef 	bne.w	20005c8a <MSS_UART_isr+0x222>
20005aac:	687b      	ldr	r3, [r7, #4]
20005aae:	681b      	ldr	r3, [r3, #0]
20005ab0:	7a1b      	ldrb	r3, [r3, #8]
20005ab2:	b2db      	uxtb	r3, r3
20005ab4:	f003 030f 	and.w	r3, r3, #15
20005ab8:	73fb      	strb	r3, [r7, #15]
20005aba:	7bfb      	ldrb	r3, [r7, #15]
20005abc:	2b0c      	cmp	r3, #12
20005abe:	f200 80d7 	bhi.w	20005c70 <MSS_UART_isr+0x208>
20005ac2:	a201      	add	r2, pc, #4	; (adr r2, 20005ac8 <MSS_UART_isr+0x60>)
20005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005ac8:	20005afd 	.word	0x20005afd
20005acc:	20005c71 	.word	0x20005c71
20005ad0:	20005b1b 	.word	0x20005b1b
20005ad4:	20005b75 	.word	0x20005b75
20005ad8:	20005b39 	.word	0x20005b39
20005adc:	20005c71 	.word	0x20005c71
20005ae0:	20005b57 	.word	0x20005b57
20005ae4:	20005c71 	.word	0x20005c71
20005ae8:	20005c71 	.word	0x20005c71
20005aec:	20005c71 	.word	0x20005c71
20005af0:	20005c71 	.word	0x20005c71
20005af4:	20005c71 	.word	0x20005c71
20005af8:	20005b39 	.word	0x20005b39
20005afc:	687b      	ldr	r3, [r7, #4]
20005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005b00:	2b00      	cmp	r3, #0
20005b02:	d100      	bne.n	20005b06 <MSS_UART_isr+0x9e>
20005b04:	be00      	bkpt	0x0000
20005b06:	687b      	ldr	r3, [r7, #4]
20005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005b0a:	2b00      	cmp	r3, #0
20005b0c:	f000 80b2 	beq.w	20005c74 <MSS_UART_isr+0x20c>
20005b10:	687b      	ldr	r3, [r7, #4]
20005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20005b14:	6878      	ldr	r0, [r7, #4]
20005b16:	4798      	blx	r3
20005b18:	e0b7      	b.n	20005c8a <MSS_UART_isr+0x222>
20005b1a:	687b      	ldr	r3, [r7, #4]
20005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005b1e:	2b00      	cmp	r3, #0
20005b20:	d100      	bne.n	20005b24 <MSS_UART_isr+0xbc>
20005b22:	be00      	bkpt	0x0000
20005b24:	687b      	ldr	r3, [r7, #4]
20005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005b28:	2b00      	cmp	r3, #0
20005b2a:	f000 80a5 	beq.w	20005c78 <MSS_UART_isr+0x210>
20005b2e:	687b      	ldr	r3, [r7, #4]
20005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20005b32:	6878      	ldr	r0, [r7, #4]
20005b34:	4798      	blx	r3
20005b36:	e0a8      	b.n	20005c8a <MSS_UART_isr+0x222>
20005b38:	687b      	ldr	r3, [r7, #4]
20005b3a:	6a1b      	ldr	r3, [r3, #32]
20005b3c:	2b00      	cmp	r3, #0
20005b3e:	d100      	bne.n	20005b42 <MSS_UART_isr+0xda>
20005b40:	be00      	bkpt	0x0000
20005b42:	687b      	ldr	r3, [r7, #4]
20005b44:	6a1b      	ldr	r3, [r3, #32]
20005b46:	2b00      	cmp	r3, #0
20005b48:	f000 8098 	beq.w	20005c7c <MSS_UART_isr+0x214>
20005b4c:	687b      	ldr	r3, [r7, #4]
20005b4e:	6a1b      	ldr	r3, [r3, #32]
20005b50:	6878      	ldr	r0, [r7, #4]
20005b52:	4798      	blx	r3
20005b54:	e099      	b.n	20005c8a <MSS_UART_isr+0x222>
20005b56:	687b      	ldr	r3, [r7, #4]
20005b58:	69db      	ldr	r3, [r3, #28]
20005b5a:	2b00      	cmp	r3, #0
20005b5c:	d100      	bne.n	20005b60 <MSS_UART_isr+0xf8>
20005b5e:	be00      	bkpt	0x0000
20005b60:	687b      	ldr	r3, [r7, #4]
20005b62:	69db      	ldr	r3, [r3, #28]
20005b64:	2b00      	cmp	r3, #0
20005b66:	f000 808b 	beq.w	20005c80 <MSS_UART_isr+0x218>
20005b6a:	687b      	ldr	r3, [r7, #4]
20005b6c:	69db      	ldr	r3, [r3, #28]
20005b6e:	6878      	ldr	r0, [r7, #4]
20005b70:	4798      	blx	r3
20005b72:	e08a      	b.n	20005c8a <MSS_UART_isr+0x222>
20005b74:	687b      	ldr	r3, [r7, #4]
20005b76:	681b      	ldr	r3, [r3, #0]
20005b78:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005b7c:	4618      	mov	r0, r3
20005b7e:	f04f 0100 	mov.w	r1, #0
20005b82:	f7ff fba9 	bl	200052d8 <read_bit_reg8>
20005b86:	4603      	mov	r3, r0
20005b88:	2b00      	cmp	r3, #0
20005b8a:	d00c      	beq.n	20005ba6 <MSS_UART_isr+0x13e>
20005b8c:	687b      	ldr	r3, [r7, #4]
20005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005b90:	2b00      	cmp	r3, #0
20005b92:	d100      	bne.n	20005b96 <MSS_UART_isr+0x12e>
20005b94:	be00      	bkpt	0x0000
20005b96:	687b      	ldr	r3, [r7, #4]
20005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005b9a:	2b00      	cmp	r3, #0
20005b9c:	d003      	beq.n	20005ba6 <MSS_UART_isr+0x13e>
20005b9e:	687b      	ldr	r3, [r7, #4]
20005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20005ba2:	6878      	ldr	r0, [r7, #4]
20005ba4:	4798      	blx	r3
20005ba6:	687b      	ldr	r3, [r7, #4]
20005ba8:	681b      	ldr	r3, [r3, #0]
20005baa:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005bae:	4618      	mov	r0, r3
20005bb0:	f04f 0101 	mov.w	r1, #1
20005bb4:	f7ff fb90 	bl	200052d8 <read_bit_reg8>
20005bb8:	4603      	mov	r3, r0
20005bba:	2b00      	cmp	r3, #0
20005bbc:	d00c      	beq.n	20005bd8 <MSS_UART_isr+0x170>
20005bbe:	687b      	ldr	r3, [r7, #4]
20005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005bc2:	2b00      	cmp	r3, #0
20005bc4:	d100      	bne.n	20005bc8 <MSS_UART_isr+0x160>
20005bc6:	be00      	bkpt	0x0000
20005bc8:	687b      	ldr	r3, [r7, #4]
20005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005bcc:	2b00      	cmp	r3, #0
20005bce:	d003      	beq.n	20005bd8 <MSS_UART_isr+0x170>
20005bd0:	687b      	ldr	r3, [r7, #4]
20005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20005bd4:	6878      	ldr	r0, [r7, #4]
20005bd6:	4798      	blx	r3
20005bd8:	687b      	ldr	r3, [r7, #4]
20005bda:	681b      	ldr	r3, [r3, #0]
20005bdc:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005be0:	4618      	mov	r0, r3
20005be2:	f04f 0102 	mov.w	r1, #2
20005be6:	f7ff fb77 	bl	200052d8 <read_bit_reg8>
20005bea:	4603      	mov	r3, r0
20005bec:	2b00      	cmp	r3, #0
20005bee:	d00c      	beq.n	20005c0a <MSS_UART_isr+0x1a2>
20005bf0:	687b      	ldr	r3, [r7, #4]
20005bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005bf4:	2b00      	cmp	r3, #0
20005bf6:	d100      	bne.n	20005bfa <MSS_UART_isr+0x192>
20005bf8:	be00      	bkpt	0x0000
20005bfa:	687b      	ldr	r3, [r7, #4]
20005bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005bfe:	2b00      	cmp	r3, #0
20005c00:	d003      	beq.n	20005c0a <MSS_UART_isr+0x1a2>
20005c02:	687b      	ldr	r3, [r7, #4]
20005c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20005c06:	6878      	ldr	r0, [r7, #4]
20005c08:	4798      	blx	r3
20005c0a:	687b      	ldr	r3, [r7, #4]
20005c0c:	681b      	ldr	r3, [r3, #0]
20005c0e:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005c12:	4618      	mov	r0, r3
20005c14:	f04f 0103 	mov.w	r1, #3
20005c18:	f7ff fb5e 	bl	200052d8 <read_bit_reg8>
20005c1c:	4603      	mov	r3, r0
20005c1e:	2b00      	cmp	r3, #0
20005c20:	d00c      	beq.n	20005c3c <MSS_UART_isr+0x1d4>
20005c22:	687b      	ldr	r3, [r7, #4]
20005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005c26:	2b00      	cmp	r3, #0
20005c28:	d100      	bne.n	20005c2c <MSS_UART_isr+0x1c4>
20005c2a:	be00      	bkpt	0x0000
20005c2c:	687b      	ldr	r3, [r7, #4]
20005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005c30:	2b00      	cmp	r3, #0
20005c32:	d003      	beq.n	20005c3c <MSS_UART_isr+0x1d4>
20005c34:	687b      	ldr	r3, [r7, #4]
20005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20005c38:	6878      	ldr	r0, [r7, #4]
20005c3a:	4798      	blx	r3
20005c3c:	687b      	ldr	r3, [r7, #4]
20005c3e:	681b      	ldr	r3, [r3, #0]
20005c40:	f103 0328 	add.w	r3, r3, #40	; 0x28
20005c44:	4618      	mov	r0, r3
20005c46:	f04f 0104 	mov.w	r1, #4
20005c4a:	f7ff fb45 	bl	200052d8 <read_bit_reg8>
20005c4e:	4603      	mov	r3, r0
20005c50:	2b00      	cmp	r3, #0
20005c52:	d017      	beq.n	20005c84 <MSS_UART_isr+0x21c>
20005c54:	687b      	ldr	r3, [r7, #4]
20005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005c58:	2b00      	cmp	r3, #0
20005c5a:	d100      	bne.n	20005c5e <MSS_UART_isr+0x1f6>
20005c5c:	be00      	bkpt	0x0000
20005c5e:	687b      	ldr	r3, [r7, #4]
20005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005c62:	2b00      	cmp	r3, #0
20005c64:	d010      	beq.n	20005c88 <MSS_UART_isr+0x220>
20005c66:	687b      	ldr	r3, [r7, #4]
20005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20005c6a:	6878      	ldr	r0, [r7, #4]
20005c6c:	4798      	blx	r3
20005c6e:	e00c      	b.n	20005c8a <MSS_UART_isr+0x222>
20005c70:	be00      	bkpt	0x0000
20005c72:	e00a      	b.n	20005c8a <MSS_UART_isr+0x222>
20005c74:	bf00      	nop
20005c76:	e008      	b.n	20005c8a <MSS_UART_isr+0x222>
20005c78:	bf00      	nop
20005c7a:	e006      	b.n	20005c8a <MSS_UART_isr+0x222>
20005c7c:	bf00      	nop
20005c7e:	e004      	b.n	20005c8a <MSS_UART_isr+0x222>
20005c80:	bf00      	nop
20005c82:	e002      	b.n	20005c8a <MSS_UART_isr+0x222>
20005c84:	bf00      	nop
20005c86:	e000      	b.n	20005c8a <MSS_UART_isr+0x222>
20005c88:	bf00      	nop
20005c8a:	f107 0710 	add.w	r7, r7, #16
20005c8e:	46bd      	mov	sp, r7
20005c90:	bd80      	pop	{r7, pc}
20005c92:	bf00      	nop

20005c94 <default_tx_handler>:
20005c94:	b580      	push	{r7, lr}
20005c96:	b086      	sub	sp, #24
20005c98:	af00      	add	r7, sp, #0
20005c9a:	6078      	str	r0, [r7, #4]
20005c9c:	687a      	ldr	r2, [r7, #4]
20005c9e:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
20005ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005ca6:	429a      	cmp	r2, r3
20005ca8:	d007      	beq.n	20005cba <default_tx_handler+0x26>
20005caa:	687a      	ldr	r2, [r7, #4]
20005cac:	f24e 0398 	movw	r3, #57496	; 0xe098
20005cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005cb4:	429a      	cmp	r2, r3
20005cb6:	d000      	beq.n	20005cba <default_tx_handler+0x26>
20005cb8:	be00      	bkpt	0x0000
20005cba:	687b      	ldr	r3, [r7, #4]
20005cbc:	691b      	ldr	r3, [r3, #16]
20005cbe:	2b00      	cmp	r3, #0
20005cc0:	d100      	bne.n	20005cc4 <default_tx_handler+0x30>
20005cc2:	be00      	bkpt	0x0000
20005cc4:	687b      	ldr	r3, [r7, #4]
20005cc6:	695b      	ldr	r3, [r3, #20]
20005cc8:	2b00      	cmp	r3, #0
20005cca:	d100      	bne.n	20005cce <default_tx_handler+0x3a>
20005ccc:	be00      	bkpt	0x0000
20005cce:	687a      	ldr	r2, [r7, #4]
20005cd0:	f24e 03d8 	movw	r3, #57560	; 0xe0d8
20005cd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005cd8:	429a      	cmp	r2, r3
20005cda:	d006      	beq.n	20005cea <default_tx_handler+0x56>
20005cdc:	687a      	ldr	r2, [r7, #4]
20005cde:	f24e 0398 	movw	r3, #57496	; 0xe098
20005ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20005ce6:	429a      	cmp	r2, r3
20005ce8:	d155      	bne.n	20005d96 <default_tx_handler+0x102>
20005cea:	687b      	ldr	r3, [r7, #4]
20005cec:	691b      	ldr	r3, [r3, #16]
20005cee:	2b00      	cmp	r3, #0
20005cf0:	d051      	beq.n	20005d96 <default_tx_handler+0x102>
20005cf2:	687b      	ldr	r3, [r7, #4]
20005cf4:	695b      	ldr	r3, [r3, #20]
20005cf6:	2b00      	cmp	r3, #0
20005cf8:	d04d      	beq.n	20005d96 <default_tx_handler+0x102>
20005cfa:	687b      	ldr	r3, [r7, #4]
20005cfc:	681b      	ldr	r3, [r3, #0]
20005cfe:	7d1b      	ldrb	r3, [r3, #20]
20005d00:	72fb      	strb	r3, [r7, #11]
20005d02:	687b      	ldr	r3, [r7, #4]
20005d04:	7b5a      	ldrb	r2, [r3, #13]
20005d06:	7afb      	ldrb	r3, [r7, #11]
20005d08:	ea42 0303 	orr.w	r3, r2, r3
20005d0c:	b2da      	uxtb	r2, r3
20005d0e:	687b      	ldr	r3, [r7, #4]
20005d10:	735a      	strb	r2, [r3, #13]
20005d12:	7afb      	ldrb	r3, [r7, #11]
20005d14:	f003 0320 	and.w	r3, r3, #32
20005d18:	2b00      	cmp	r3, #0
20005d1a:	d029      	beq.n	20005d70 <default_tx_handler+0xdc>
20005d1c:	f04f 0310 	mov.w	r3, #16
20005d20:	613b      	str	r3, [r7, #16]
20005d22:	687b      	ldr	r3, [r7, #4]
20005d24:	695a      	ldr	r2, [r3, #20]
20005d26:	687b      	ldr	r3, [r7, #4]
20005d28:	699b      	ldr	r3, [r3, #24]
20005d2a:	ebc3 0302 	rsb	r3, r3, r2
20005d2e:	617b      	str	r3, [r7, #20]
20005d30:	697b      	ldr	r3, [r7, #20]
20005d32:	2b0f      	cmp	r3, #15
20005d34:	d801      	bhi.n	20005d3a <default_tx_handler+0xa6>
20005d36:	697b      	ldr	r3, [r7, #20]
20005d38:	613b      	str	r3, [r7, #16]
20005d3a:	f04f 0300 	mov.w	r3, #0
20005d3e:	60fb      	str	r3, [r7, #12]
20005d40:	e012      	b.n	20005d68 <default_tx_handler+0xd4>
20005d42:	687b      	ldr	r3, [r7, #4]
20005d44:	681b      	ldr	r3, [r3, #0]
20005d46:	687a      	ldr	r2, [r7, #4]
20005d48:	6911      	ldr	r1, [r2, #16]
20005d4a:	687a      	ldr	r2, [r7, #4]
20005d4c:	6992      	ldr	r2, [r2, #24]
20005d4e:	440a      	add	r2, r1
20005d50:	7812      	ldrb	r2, [r2, #0]
20005d52:	701a      	strb	r2, [r3, #0]
20005d54:	687b      	ldr	r3, [r7, #4]
20005d56:	699b      	ldr	r3, [r3, #24]
20005d58:	f103 0201 	add.w	r2, r3, #1
20005d5c:	687b      	ldr	r3, [r7, #4]
20005d5e:	619a      	str	r2, [r3, #24]
20005d60:	68fb      	ldr	r3, [r7, #12]
20005d62:	f103 0301 	add.w	r3, r3, #1
20005d66:	60fb      	str	r3, [r7, #12]
20005d68:	68fa      	ldr	r2, [r7, #12]
20005d6a:	693b      	ldr	r3, [r7, #16]
20005d6c:	429a      	cmp	r2, r3
20005d6e:	d3e8      	bcc.n	20005d42 <default_tx_handler+0xae>
20005d70:	687b      	ldr	r3, [r7, #4]
20005d72:	699a      	ldr	r2, [r3, #24]
20005d74:	687b      	ldr	r3, [r7, #4]
20005d76:	695b      	ldr	r3, [r3, #20]
20005d78:	429a      	cmp	r2, r3
20005d7a:	d10c      	bne.n	20005d96 <default_tx_handler+0x102>
20005d7c:	687b      	ldr	r3, [r7, #4]
20005d7e:	f04f 0200 	mov.w	r2, #0
20005d82:	615a      	str	r2, [r3, #20]
20005d84:	687b      	ldr	r3, [r7, #4]
20005d86:	681b      	ldr	r3, [r3, #0]
20005d88:	f103 0304 	add.w	r3, r3, #4
20005d8c:	4618      	mov	r0, r3
20005d8e:	f04f 0101 	mov.w	r1, #1
20005d92:	f7ff fa81 	bl	20005298 <clear_bit_reg8>
20005d96:	f107 0718 	add.w	r7, r7, #24
20005d9a:	46bd      	mov	sp, r7
20005d9c:	bd80      	pop	{r7, pc}
20005d9e:	bf00      	nop

20005da0 <I2C_init>:
20005da0:	b580      	push	{r7, lr}
20005da2:	b086      	sub	sp, #24
20005da4:	af00      	add	r7, sp, #0
20005da6:	60f8      	str	r0, [r7, #12]
20005da8:	60b9      	str	r1, [r7, #8]
20005daa:	71fa      	strb	r2, [r7, #7]
20005dac:	71bb      	strb	r3, [r7, #6]
20005dae:	79bb      	ldrb	r3, [r7, #6]
20005db0:	617b      	str	r3, [r7, #20]
20005db2:	f001 f9e9 	bl	20007188 <HAL_disable_interrupts>
20005db6:	4603      	mov	r3, r0
20005db8:	613b      	str	r3, [r7, #16]
20005dba:	68f8      	ldr	r0, [r7, #12]
20005dbc:	f04f 0100 	mov.w	r1, #0
20005dc0:	f04f 026c 	mov.w	r2, #108	; 0x6c
20005dc4:	f001 fb20 	bl	20007408 <memset>
20005dc8:	68fb      	ldr	r3, [r7, #12]
20005dca:	68ba      	ldr	r2, [r7, #8]
20005dcc:	601a      	str	r2, [r3, #0]
20005dce:	79fb      	ldrb	r3, [r7, #7]
20005dd0:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005dd4:	68fb      	ldr	r3, [r7, #12]
20005dd6:	605a      	str	r2, [r3, #4]
20005dd8:	68fb      	ldr	r3, [r7, #12]
20005dda:	681b      	ldr	r3, [r3, #0]
20005ddc:	4618      	mov	r0, r3
20005dde:	f04f 0106 	mov.w	r1, #6
20005de2:	f04f 0240 	mov.w	r2, #64	; 0x40
20005de6:	f04f 0300 	mov.w	r3, #0
20005dea:	f001 fa08 	bl	200071fe <HW_set_8bit_reg_field>
20005dee:	68fb      	ldr	r3, [r7, #12]
20005df0:	681b      	ldr	r3, [r3, #0]
20005df2:	4618      	mov	r0, r3
20005df4:	f04f 0106 	mov.w	r1, #6
20005df8:	f04f 0240 	mov.w	r2, #64	; 0x40
20005dfc:	f04f 0301 	mov.w	r3, #1
20005e00:	f001 f9fd 	bl	200071fe <HW_set_8bit_reg_field>
20005e04:	68fb      	ldr	r3, [r7, #12]
20005e06:	681a      	ldr	r2, [r3, #0]
20005e08:	697b      	ldr	r3, [r7, #20]
20005e0a:	ea4f 0393 	mov.w	r3, r3, lsr #2
20005e0e:	f003 0301 	and.w	r3, r3, #1
20005e12:	4610      	mov	r0, r2
20005e14:	f04f 0107 	mov.w	r1, #7
20005e18:	f04f 0280 	mov.w	r2, #128	; 0x80
20005e1c:	f001 f9ef 	bl	200071fe <HW_set_8bit_reg_field>
20005e20:	68fb      	ldr	r3, [r7, #12]
20005e22:	681a      	ldr	r2, [r3, #0]
20005e24:	697b      	ldr	r3, [r7, #20]
20005e26:	ea4f 0353 	mov.w	r3, r3, lsr #1
20005e2a:	f003 0301 	and.w	r3, r3, #1
20005e2e:	4610      	mov	r0, r2
20005e30:	f04f 0101 	mov.w	r1, #1
20005e34:	f04f 0202 	mov.w	r2, #2
20005e38:	f001 f9e1 	bl	200071fe <HW_set_8bit_reg_field>
20005e3c:	68fb      	ldr	r3, [r7, #12]
20005e3e:	681a      	ldr	r2, [r3, #0]
20005e40:	697b      	ldr	r3, [r7, #20]
20005e42:	f003 0301 	and.w	r3, r3, #1
20005e46:	4610      	mov	r0, r2
20005e48:	f04f 0100 	mov.w	r1, #0
20005e4c:	f04f 0201 	mov.w	r2, #1
20005e50:	f001 f9d5 	bl	200071fe <HW_set_8bit_reg_field>
20005e54:	68fb      	ldr	r3, [r7, #12]
20005e56:	681b      	ldr	r3, [r3, #0]
20005e58:	f103 020c 	add.w	r2, r3, #12
20005e5c:	68fb      	ldr	r3, [r7, #12]
20005e5e:	685b      	ldr	r3, [r3, #4]
20005e60:	4610      	mov	r0, r2
20005e62:	4619      	mov	r1, r3
20005e64:	f001 f9c7 	bl	200071f6 <HW_set_8bit_reg>
20005e68:	68fb      	ldr	r3, [r7, #12]
20005e6a:	681b      	ldr	r3, [r3, #0]
20005e6c:	f103 021c 	add.w	r2, r3, #28
20005e70:	68fb      	ldr	r3, [r7, #12]
20005e72:	685b      	ldr	r3, [r3, #4]
20005e74:	4610      	mov	r0, r2
20005e76:	4619      	mov	r1, r3
20005e78:	f001 f9bd 	bl	200071f6 <HW_set_8bit_reg>
20005e7c:	6938      	ldr	r0, [r7, #16]
20005e7e:	f001 f987 	bl	20007190 <HAL_restore_interrupts>
20005e82:	f107 0718 	add.w	r7, r7, #24
20005e86:	46bd      	mov	sp, r7
20005e88:	bd80      	pop	{r7, pc}
20005e8a:	bf00      	nop

20005e8c <I2C_write>:
20005e8c:	b580      	push	{r7, lr}
20005e8e:	b086      	sub	sp, #24
20005e90:	af00      	add	r7, sp, #0
20005e92:	60f8      	str	r0, [r7, #12]
20005e94:	607a      	str	r2, [r7, #4]
20005e96:	460a      	mov	r2, r1
20005e98:	72fa      	strb	r2, [r7, #11]
20005e9a:	807b      	strh	r3, [r7, #2]
20005e9c:	f001 f974 	bl	20007188 <HAL_disable_interrupts>
20005ea0:	4603      	mov	r3, r0
20005ea2:	617b      	str	r3, [r7, #20]
20005ea4:	68fb      	ldr	r3, [r7, #12]
20005ea6:	7b1b      	ldrb	r3, [r3, #12]
20005ea8:	2b00      	cmp	r3, #0
20005eaa:	d103      	bne.n	20005eb4 <I2C_write+0x28>
20005eac:	68fb      	ldr	r3, [r7, #12]
20005eae:	f04f 0201 	mov.w	r2, #1
20005eb2:	731a      	strb	r2, [r3, #12]
20005eb4:	68fb      	ldr	r3, [r7, #12]
20005eb6:	f04f 0201 	mov.w	r2, #1
20005eba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
20005ebe:	7afb      	ldrb	r3, [r7, #11]
20005ec0:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005ec4:	68fb      	ldr	r3, [r7, #12]
20005ec6:	609a      	str	r2, [r3, #8]
20005ec8:	68fb      	ldr	r3, [r7, #12]
20005eca:	f04f 0200 	mov.w	r2, #0
20005ece:	625a      	str	r2, [r3, #36]	; 0x24
20005ed0:	68fb      	ldr	r3, [r7, #12]
20005ed2:	687a      	ldr	r2, [r7, #4]
20005ed4:	619a      	str	r2, [r3, #24]
20005ed6:	887a      	ldrh	r2, [r7, #2]
20005ed8:	68fb      	ldr	r3, [r7, #12]
20005eda:	61da      	str	r2, [r3, #28]
20005edc:	68fb      	ldr	r3, [r7, #12]
20005ede:	f04f 0200 	mov.w	r2, #0
20005ee2:	621a      	str	r2, [r3, #32]
20005ee4:	68fb      	ldr	r3, [r7, #12]
20005ee6:	f04f 0201 	mov.w	r2, #1
20005eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005eee:	68fb      	ldr	r3, [r7, #12]
20005ef0:	f897 2020 	ldrb.w	r2, [r7, #32]
20005ef4:	751a      	strb	r2, [r3, #20]
20005ef6:	68fb      	ldr	r3, [r7, #12]
20005ef8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005efc:	b2db      	uxtb	r3, r3
20005efe:	2b01      	cmp	r3, #1
20005f00:	d105      	bne.n	20005f0e <I2C_write+0x82>
20005f02:	68fb      	ldr	r3, [r7, #12]
20005f04:	f04f 0201 	mov.w	r2, #1
20005f08:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005f0c:	e00a      	b.n	20005f24 <I2C_write+0x98>
20005f0e:	68fb      	ldr	r3, [r7, #12]
20005f10:	681b      	ldr	r3, [r3, #0]
20005f12:	4618      	mov	r0, r3
20005f14:	f04f 0105 	mov.w	r1, #5
20005f18:	f04f 0220 	mov.w	r2, #32
20005f1c:	f04f 0301 	mov.w	r3, #1
20005f20:	f001 f96d 	bl	200071fe <HW_set_8bit_reg_field>
20005f24:	68fb      	ldr	r3, [r7, #12]
20005f26:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20005f2a:	2b01      	cmp	r3, #1
20005f2c:	d10a      	bne.n	20005f44 <I2C_write+0xb8>
20005f2e:	68fb      	ldr	r3, [r7, #12]
20005f30:	681b      	ldr	r3, [r3, #0]
20005f32:	4618      	mov	r0, r3
20005f34:	f04f 0103 	mov.w	r1, #3
20005f38:	f04f 0208 	mov.w	r2, #8
20005f3c:	f04f 0300 	mov.w	r3, #0
20005f40:	f001 f95d 	bl	200071fe <HW_set_8bit_reg_field>
20005f44:	68fb      	ldr	r3, [r7, #12]
20005f46:	681b      	ldr	r3, [r3, #0]
20005f48:	f103 0304 	add.w	r3, r3, #4
20005f4c:	4618      	mov	r0, r3
20005f4e:	f001 f954 	bl	200071fa <HW_get_8bit_reg>
20005f52:	4603      	mov	r3, r0
20005f54:	74fb      	strb	r3, [r7, #19]
20005f56:	7cfb      	ldrb	r3, [r7, #19]
20005f58:	b2db      	uxtb	r3, r3
20005f5a:	74fb      	strb	r3, [r7, #19]
20005f5c:	68f8      	ldr	r0, [r7, #12]
20005f5e:	f000 fec9 	bl	20006cf4 <I2C_enable_irq>
20005f62:	6978      	ldr	r0, [r7, #20]
20005f64:	f001 f914 	bl	20007190 <HAL_restore_interrupts>
20005f68:	f107 0718 	add.w	r7, r7, #24
20005f6c:	46bd      	mov	sp, r7
20005f6e:	bd80      	pop	{r7, pc}

20005f70 <I2C_read>:
20005f70:	b580      	push	{r7, lr}
20005f72:	b086      	sub	sp, #24
20005f74:	af00      	add	r7, sp, #0
20005f76:	60f8      	str	r0, [r7, #12]
20005f78:	607a      	str	r2, [r7, #4]
20005f7a:	460a      	mov	r2, r1
20005f7c:	72fa      	strb	r2, [r7, #11]
20005f7e:	807b      	strh	r3, [r7, #2]
20005f80:	f001 f902 	bl	20007188 <HAL_disable_interrupts>
20005f84:	4603      	mov	r3, r0
20005f86:	617b      	str	r3, [r7, #20]
20005f88:	68fb      	ldr	r3, [r7, #12]
20005f8a:	7b1b      	ldrb	r3, [r3, #12]
20005f8c:	2b00      	cmp	r3, #0
20005f8e:	d103      	bne.n	20005f98 <I2C_read+0x28>
20005f90:	68fb      	ldr	r3, [r7, #12]
20005f92:	f04f 0202 	mov.w	r2, #2
20005f96:	731a      	strb	r2, [r3, #12]
20005f98:	68fb      	ldr	r3, [r7, #12]
20005f9a:	f04f 0202 	mov.w	r2, #2
20005f9e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
20005fa2:	7afb      	ldrb	r3, [r7, #11]
20005fa4:	ea4f 0243 	mov.w	r2, r3, lsl #1
20005fa8:	68fb      	ldr	r3, [r7, #12]
20005faa:	609a      	str	r2, [r3, #8]
20005fac:	68fb      	ldr	r3, [r7, #12]
20005fae:	f04f 0201 	mov.w	r2, #1
20005fb2:	625a      	str	r2, [r3, #36]	; 0x24
20005fb4:	68fb      	ldr	r3, [r7, #12]
20005fb6:	687a      	ldr	r2, [r7, #4]
20005fb8:	629a      	str	r2, [r3, #40]	; 0x28
20005fba:	887a      	ldrh	r2, [r7, #2]
20005fbc:	68fb      	ldr	r3, [r7, #12]
20005fbe:	62da      	str	r2, [r3, #44]	; 0x2c
20005fc0:	68fb      	ldr	r3, [r7, #12]
20005fc2:	f04f 0200 	mov.w	r2, #0
20005fc6:	631a      	str	r2, [r3, #48]	; 0x30
20005fc8:	68fb      	ldr	r3, [r7, #12]
20005fca:	f04f 0201 	mov.w	r2, #1
20005fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20005fd2:	68fb      	ldr	r3, [r7, #12]
20005fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
20005fd8:	751a      	strb	r2, [r3, #20]
20005fda:	68fb      	ldr	r3, [r7, #12]
20005fdc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20005fe0:	b2db      	uxtb	r3, r3
20005fe2:	2b01      	cmp	r3, #1
20005fe4:	d105      	bne.n	20005ff2 <I2C_read+0x82>
20005fe6:	68fb      	ldr	r3, [r7, #12]
20005fe8:	f04f 0201 	mov.w	r2, #1
20005fec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20005ff0:	e00a      	b.n	20006008 <I2C_read+0x98>
20005ff2:	68fb      	ldr	r3, [r7, #12]
20005ff4:	681b      	ldr	r3, [r3, #0]
20005ff6:	4618      	mov	r0, r3
20005ff8:	f04f 0105 	mov.w	r1, #5
20005ffc:	f04f 0220 	mov.w	r2, #32
20006000:	f04f 0301 	mov.w	r3, #1
20006004:	f001 f8fb 	bl	200071fe <HW_set_8bit_reg_field>
20006008:	68fb      	ldr	r3, [r7, #12]
2000600a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
2000600e:	2b01      	cmp	r3, #1
20006010:	d10a      	bne.n	20006028 <I2C_read+0xb8>
20006012:	68fb      	ldr	r3, [r7, #12]
20006014:	681b      	ldr	r3, [r3, #0]
20006016:	4618      	mov	r0, r3
20006018:	f04f 0103 	mov.w	r1, #3
2000601c:	f04f 0208 	mov.w	r2, #8
20006020:	f04f 0300 	mov.w	r3, #0
20006024:	f001 f8eb 	bl	200071fe <HW_set_8bit_reg_field>
20006028:	68fb      	ldr	r3, [r7, #12]
2000602a:	681b      	ldr	r3, [r3, #0]
2000602c:	f103 0304 	add.w	r3, r3, #4
20006030:	4618      	mov	r0, r3
20006032:	f001 f8e2 	bl	200071fa <HW_get_8bit_reg>
20006036:	4603      	mov	r3, r0
20006038:	74fb      	strb	r3, [r7, #19]
2000603a:	7cfb      	ldrb	r3, [r7, #19]
2000603c:	b2db      	uxtb	r3, r3
2000603e:	74fb      	strb	r3, [r7, #19]
20006040:	68f8      	ldr	r0, [r7, #12]
20006042:	f000 fe57 	bl	20006cf4 <I2C_enable_irq>
20006046:	6978      	ldr	r0, [r7, #20]
20006048:	f001 f8a2 	bl	20007190 <HAL_restore_interrupts>
2000604c:	f107 0718 	add.w	r7, r7, #24
20006050:	46bd      	mov	sp, r7
20006052:	bd80      	pop	{r7, pc}

20006054 <I2C_write_read>:
20006054:	b580      	push	{r7, lr}
20006056:	b086      	sub	sp, #24
20006058:	af00      	add	r7, sp, #0
2000605a:	60f8      	str	r0, [r7, #12]
2000605c:	607a      	str	r2, [r7, #4]
2000605e:	460a      	mov	r2, r1
20006060:	72fa      	strb	r2, [r7, #11]
20006062:	807b      	strh	r3, [r7, #2]
20006064:	887b      	ldrh	r3, [r7, #2]
20006066:	2b00      	cmp	r3, #0
20006068:	d100      	bne.n	2000606c <I2C_write_read+0x18>
2000606a:	be00      	bkpt	0x0000
2000606c:	687b      	ldr	r3, [r7, #4]
2000606e:	2b00      	cmp	r3, #0
20006070:	d100      	bne.n	20006074 <I2C_write_read+0x20>
20006072:	be00      	bkpt	0x0000
20006074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20006076:	2b00      	cmp	r3, #0
20006078:	d100      	bne.n	2000607c <I2C_write_read+0x28>
2000607a:	be00      	bkpt	0x0000
2000607c:	6a3b      	ldr	r3, [r7, #32]
2000607e:	2b00      	cmp	r3, #0
20006080:	d100      	bne.n	20006084 <I2C_write_read+0x30>
20006082:	be00      	bkpt	0x0000
20006084:	68fb      	ldr	r3, [r7, #12]
20006086:	f04f 0202 	mov.w	r2, #2
2000608a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2000608e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20006090:	2b00      	cmp	r3, #0
20006092:	d072      	beq.n	2000617a <I2C_write_read+0x126>
20006094:	887b      	ldrh	r3, [r7, #2]
20006096:	2b00      	cmp	r3, #0
20006098:	d06f      	beq.n	2000617a <I2C_write_read+0x126>
2000609a:	f001 f875 	bl	20007188 <HAL_disable_interrupts>
2000609e:	4603      	mov	r3, r0
200060a0:	617b      	str	r3, [r7, #20]
200060a2:	68fb      	ldr	r3, [r7, #12]
200060a4:	7b1b      	ldrb	r3, [r3, #12]
200060a6:	2b00      	cmp	r3, #0
200060a8:	d103      	bne.n	200060b2 <I2C_write_read+0x5e>
200060aa:	68fb      	ldr	r3, [r7, #12]
200060ac:	f04f 0203 	mov.w	r2, #3
200060b0:	731a      	strb	r2, [r3, #12]
200060b2:	68fb      	ldr	r3, [r7, #12]
200060b4:	f04f 0203 	mov.w	r2, #3
200060b8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
200060bc:	7afb      	ldrb	r3, [r7, #11]
200060be:	ea4f 0243 	mov.w	r2, r3, lsl #1
200060c2:	68fb      	ldr	r3, [r7, #12]
200060c4:	609a      	str	r2, [r3, #8]
200060c6:	68fb      	ldr	r3, [r7, #12]
200060c8:	f04f 0200 	mov.w	r2, #0
200060cc:	625a      	str	r2, [r3, #36]	; 0x24
200060ce:	68fb      	ldr	r3, [r7, #12]
200060d0:	687a      	ldr	r2, [r7, #4]
200060d2:	619a      	str	r2, [r3, #24]
200060d4:	887a      	ldrh	r2, [r7, #2]
200060d6:	68fb      	ldr	r3, [r7, #12]
200060d8:	61da      	str	r2, [r3, #28]
200060da:	68fb      	ldr	r3, [r7, #12]
200060dc:	f04f 0200 	mov.w	r2, #0
200060e0:	621a      	str	r2, [r3, #32]
200060e2:	68fb      	ldr	r3, [r7, #12]
200060e4:	6a3a      	ldr	r2, [r7, #32]
200060e6:	629a      	str	r2, [r3, #40]	; 0x28
200060e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
200060ea:	68fb      	ldr	r3, [r7, #12]
200060ec:	62da      	str	r2, [r3, #44]	; 0x2c
200060ee:	68fb      	ldr	r3, [r7, #12]
200060f0:	f04f 0200 	mov.w	r2, #0
200060f4:	631a      	str	r2, [r3, #48]	; 0x30
200060f6:	68fb      	ldr	r3, [r7, #12]
200060f8:	f04f 0201 	mov.w	r2, #1
200060fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006100:	68fb      	ldr	r3, [r7, #12]
20006102:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
20006106:	751a      	strb	r2, [r3, #20]
20006108:	68fb      	ldr	r3, [r7, #12]
2000610a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
2000610e:	b2db      	uxtb	r3, r3
20006110:	2b01      	cmp	r3, #1
20006112:	d105      	bne.n	20006120 <I2C_write_read+0xcc>
20006114:	68fb      	ldr	r3, [r7, #12]
20006116:	f04f 0201 	mov.w	r2, #1
2000611a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
2000611e:	e00a      	b.n	20006136 <I2C_write_read+0xe2>
20006120:	68fb      	ldr	r3, [r7, #12]
20006122:	681b      	ldr	r3, [r3, #0]
20006124:	4618      	mov	r0, r3
20006126:	f04f 0105 	mov.w	r1, #5
2000612a:	f04f 0220 	mov.w	r2, #32
2000612e:	f04f 0301 	mov.w	r3, #1
20006132:	f001 f864 	bl	200071fe <HW_set_8bit_reg_field>
20006136:	68fb      	ldr	r3, [r7, #12]
20006138:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
2000613c:	2b01      	cmp	r3, #1
2000613e:	d10a      	bne.n	20006156 <I2C_write_read+0x102>
20006140:	68fb      	ldr	r3, [r7, #12]
20006142:	681b      	ldr	r3, [r3, #0]
20006144:	4618      	mov	r0, r3
20006146:	f04f 0103 	mov.w	r1, #3
2000614a:	f04f 0208 	mov.w	r2, #8
2000614e:	f04f 0300 	mov.w	r3, #0
20006152:	f001 f854 	bl	200071fe <HW_set_8bit_reg_field>
20006156:	68fb      	ldr	r3, [r7, #12]
20006158:	681b      	ldr	r3, [r3, #0]
2000615a:	f103 0304 	add.w	r3, r3, #4
2000615e:	4618      	mov	r0, r3
20006160:	f001 f84b 	bl	200071fa <HW_get_8bit_reg>
20006164:	4603      	mov	r3, r0
20006166:	74fb      	strb	r3, [r7, #19]
20006168:	7cfb      	ldrb	r3, [r7, #19]
2000616a:	b2db      	uxtb	r3, r3
2000616c:	74fb      	strb	r3, [r7, #19]
2000616e:	68f8      	ldr	r0, [r7, #12]
20006170:	f000 fdc0 	bl	20006cf4 <I2C_enable_irq>
20006174:	6978      	ldr	r0, [r7, #20]
20006176:	f001 f80b 	bl	20007190 <HAL_restore_interrupts>
2000617a:	f107 0718 	add.w	r7, r7, #24
2000617e:	46bd      	mov	sp, r7
20006180:	bd80      	pop	{r7, pc}
20006182:	bf00      	nop

20006184 <I2C_wait_complete>:
20006184:	b580      	push	{r7, lr}
20006186:	b084      	sub	sp, #16
20006188:	af00      	add	r7, sp, #0
2000618a:	6078      	str	r0, [r7, #4]
2000618c:	6039      	str	r1, [r7, #0]
2000618e:	f000 fffb 	bl	20007188 <HAL_disable_interrupts>
20006192:	4603      	mov	r3, r0
20006194:	60fb      	str	r3, [r7, #12]
20006196:	687b      	ldr	r3, [r7, #4]
20006198:	683a      	ldr	r2, [r7, #0]
2000619a:	639a      	str	r2, [r3, #56]	; 0x38
2000619c:	68f8      	ldr	r0, [r7, #12]
2000619e:	f000 fff7 	bl	20007190 <HAL_restore_interrupts>
200061a2:	687b      	ldr	r3, [r7, #4]
200061a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200061a8:	72fb      	strb	r3, [r7, #11]
200061aa:	7afb      	ldrb	r3, [r7, #11]
200061ac:	2b01      	cmp	r3, #1
200061ae:	d0f8      	beq.n	200061a2 <I2C_wait_complete+0x1e>
200061b0:	7afb      	ldrb	r3, [r7, #11]
200061b2:	4618      	mov	r0, r3
200061b4:	f107 0710 	add.w	r7, r7, #16
200061b8:	46bd      	mov	sp, r7
200061ba:	bd80      	pop	{r7, pc}

200061bc <enable_slave_if_required>:
200061bc:	b580      	push	{r7, lr}
200061be:	b082      	sub	sp, #8
200061c0:	af00      	add	r7, sp, #0
200061c2:	6078      	str	r0, [r7, #4]
200061c4:	687b      	ldr	r3, [r7, #4]
200061c6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
200061ca:	2b00      	cmp	r3, #0
200061cc:	d00a      	beq.n	200061e4 <enable_slave_if_required+0x28>
200061ce:	687b      	ldr	r3, [r7, #4]
200061d0:	681b      	ldr	r3, [r3, #0]
200061d2:	4618      	mov	r0, r3
200061d4:	f04f 0102 	mov.w	r1, #2
200061d8:	f04f 0204 	mov.w	r2, #4
200061dc:	f04f 0301 	mov.w	r3, #1
200061e0:	f001 f80d 	bl	200071fe <HW_set_8bit_reg_field>
200061e4:	f107 0708 	add.w	r7, r7, #8
200061e8:	46bd      	mov	sp, r7
200061ea:	bd80      	pop	{r7, pc}

200061ec <I2C_isr>:
200061ec:	b5b0      	push	{r4, r5, r7, lr}
200061ee:	b084      	sub	sp, #16
200061f0:	af00      	add	r7, sp, #0
200061f2:	6078      	str	r0, [r7, #4]
200061f4:	f04f 0301 	mov.w	r3, #1
200061f8:	73bb      	strb	r3, [r7, #14]
200061fa:	687b      	ldr	r3, [r7, #4]
200061fc:	681b      	ldr	r3, [r3, #0]
200061fe:	f103 0304 	add.w	r3, r3, #4
20006202:	4618      	mov	r0, r3
20006204:	f000 fff9 	bl	200071fa <HW_get_8bit_reg>
20006208:	4603      	mov	r3, r0
2000620a:	72fb      	strb	r3, [r7, #11]
2000620c:	7afb      	ldrb	r3, [r7, #11]
2000620e:	b2db      	uxtb	r3, r3
20006210:	f1a3 0308 	sub.w	r3, r3, #8
20006214:	2bd8      	cmp	r3, #216	; 0xd8
20006216:	f200 84e3 	bhi.w	20006be0 <I2C_isr+0x9f4>
2000621a:	a201      	add	r2, pc, #4	; (adr r2, 20006220 <I2C_isr+0x34>)
2000621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20006220:	20006585 	.word	0x20006585
20006224:	20006be1 	.word	0x20006be1
20006228:	20006be1 	.word	0x20006be1
2000622c:	20006be1 	.word	0x20006be1
20006230:	20006be1 	.word	0x20006be1
20006234:	20006be1 	.word	0x20006be1
20006238:	20006be1 	.word	0x20006be1
2000623c:	20006be1 	.word	0x20006be1
20006240:	20006585 	.word	0x20006585
20006244:	20006be1 	.word	0x20006be1
20006248:	20006be1 	.word	0x20006be1
2000624c:	20006be1 	.word	0x20006be1
20006250:	20006be1 	.word	0x20006be1
20006254:	20006be1 	.word	0x20006be1
20006258:	20006be1 	.word	0x20006be1
2000625c:	20006be1 	.word	0x20006be1
20006260:	2000665b 	.word	0x2000665b
20006264:	20006be1 	.word	0x20006be1
20006268:	20006be1 	.word	0x20006be1
2000626c:	20006be1 	.word	0x20006be1
20006270:	20006be1 	.word	0x20006be1
20006274:	20006be1 	.word	0x20006be1
20006278:	20006be1 	.word	0x20006be1
2000627c:	20006be1 	.word	0x20006be1
20006280:	2000662b 	.word	0x2000662b
20006284:	20006be1 	.word	0x20006be1
20006288:	20006be1 	.word	0x20006be1
2000628c:	20006be1 	.word	0x20006be1
20006290:	20006be1 	.word	0x20006be1
20006294:	20006be1 	.word	0x20006be1
20006298:	20006be1 	.word	0x20006be1
2000629c:	20006be1 	.word	0x20006be1
200062a0:	2000665b 	.word	0x2000665b
200062a4:	20006be1 	.word	0x20006be1
200062a8:	20006be1 	.word	0x20006be1
200062ac:	20006be1 	.word	0x20006be1
200062b0:	20006be1 	.word	0x20006be1
200062b4:	20006be1 	.word	0x20006be1
200062b8:	20006be1 	.word	0x20006be1
200062bc:	20006be1 	.word	0x20006be1
200062c0:	2000670b 	.word	0x2000670b
200062c4:	20006be1 	.word	0x20006be1
200062c8:	20006be1 	.word	0x20006be1
200062cc:	20006be1 	.word	0x20006be1
200062d0:	20006be1 	.word	0x20006be1
200062d4:	20006be1 	.word	0x20006be1
200062d8:	20006be1 	.word	0x20006be1
200062dc:	20006be1 	.word	0x20006be1
200062e0:	20006613 	.word	0x20006613
200062e4:	20006be1 	.word	0x20006be1
200062e8:	20006be1 	.word	0x20006be1
200062ec:	20006be1 	.word	0x20006be1
200062f0:	20006be1 	.word	0x20006be1
200062f4:	20006be1 	.word	0x20006be1
200062f8:	20006be1 	.word	0x20006be1
200062fc:	20006be1 	.word	0x20006be1
20006300:	2000673b 	.word	0x2000673b
20006304:	20006be1 	.word	0x20006be1
20006308:	20006be1 	.word	0x20006be1
2000630c:	20006be1 	.word	0x20006be1
20006310:	20006be1 	.word	0x20006be1
20006314:	20006be1 	.word	0x20006be1
20006318:	20006be1 	.word	0x20006be1
2000631c:	20006be1 	.word	0x20006be1
20006320:	200067bb 	.word	0x200067bb
20006324:	20006be1 	.word	0x20006be1
20006328:	20006be1 	.word	0x20006be1
2000632c:	20006be1 	.word	0x20006be1
20006330:	20006be1 	.word	0x20006be1
20006334:	20006be1 	.word	0x20006be1
20006338:	20006be1 	.word	0x20006be1
2000633c:	20006be1 	.word	0x20006be1
20006340:	200067eb 	.word	0x200067eb
20006344:	20006be1 	.word	0x20006be1
20006348:	20006be1 	.word	0x20006be1
2000634c:	20006be1 	.word	0x20006be1
20006350:	20006be1 	.word	0x20006be1
20006354:	20006be1 	.word	0x20006be1
20006358:	20006be1 	.word	0x20006be1
2000635c:	20006be1 	.word	0x20006be1
20006360:	2000683b 	.word	0x2000683b
20006364:	20006be1 	.word	0x20006be1
20006368:	20006be1 	.word	0x20006be1
2000636c:	20006be1 	.word	0x20006be1
20006370:	20006be1 	.word	0x20006be1
20006374:	20006be1 	.word	0x20006be1
20006378:	20006be1 	.word	0x20006be1
2000637c:	20006be1 	.word	0x20006be1
20006380:	20006905 	.word	0x20006905
20006384:	20006be1 	.word	0x20006be1
20006388:	20006be1 	.word	0x20006be1
2000638c:	20006be1 	.word	0x20006be1
20006390:	20006be1 	.word	0x20006be1
20006394:	20006be1 	.word	0x20006be1
20006398:	20006be1 	.word	0x20006be1
2000639c:	20006be1 	.word	0x20006be1
200063a0:	200068fb 	.word	0x200068fb
200063a4:	20006be1 	.word	0x20006be1
200063a8:	20006be1 	.word	0x20006be1
200063ac:	20006be1 	.word	0x20006be1
200063b0:	20006be1 	.word	0x20006be1
200063b4:	20006be1 	.word	0x20006be1
200063b8:	20006be1 	.word	0x20006be1
200063bc:	20006be1 	.word	0x20006be1
200063c0:	20006905 	.word	0x20006905
200063c4:	20006be1 	.word	0x20006be1
200063c8:	20006be1 	.word	0x20006be1
200063cc:	20006be1 	.word	0x20006be1
200063d0:	20006be1 	.word	0x20006be1
200063d4:	20006be1 	.word	0x20006be1
200063d8:	20006be1 	.word	0x20006be1
200063dc:	20006be1 	.word	0x20006be1
200063e0:	200068fb 	.word	0x200068fb
200063e4:	20006be1 	.word	0x20006be1
200063e8:	20006be1 	.word	0x20006be1
200063ec:	20006be1 	.word	0x20006be1
200063f0:	20006be1 	.word	0x20006be1
200063f4:	20006be1 	.word	0x20006be1
200063f8:	20006be1 	.word	0x20006be1
200063fc:	20006be1 	.word	0x20006be1
20006400:	20006961 	.word	0x20006961
20006404:	20006be1 	.word	0x20006be1
20006408:	20006be1 	.word	0x20006be1
2000640c:	20006be1 	.word	0x20006be1
20006410:	20006be1 	.word	0x20006be1
20006414:	20006be1 	.word	0x20006be1
20006418:	20006be1 	.word	0x20006be1
2000641c:	20006be1 	.word	0x20006be1
20006420:	200068af 	.word	0x200068af
20006424:	20006be1 	.word	0x20006be1
20006428:	20006be1 	.word	0x20006be1
2000642c:	20006be1 	.word	0x20006be1
20006430:	20006be1 	.word	0x20006be1
20006434:	20006be1 	.word	0x20006be1
20006438:	20006be1 	.word	0x20006be1
2000643c:	20006be1 	.word	0x20006be1
20006440:	20006961 	.word	0x20006961
20006444:	20006be1 	.word	0x20006be1
20006448:	20006be1 	.word	0x20006be1
2000644c:	20006be1 	.word	0x20006be1
20006450:	20006be1 	.word	0x20006be1
20006454:	20006be1 	.word	0x20006be1
20006458:	20006be1 	.word	0x20006be1
2000645c:	20006be1 	.word	0x20006be1
20006460:	200068af 	.word	0x200068af
20006464:	20006be1 	.word	0x20006be1
20006468:	20006be1 	.word	0x20006be1
2000646c:	20006be1 	.word	0x20006be1
20006470:	20006be1 	.word	0x20006be1
20006474:	20006be1 	.word	0x20006be1
20006478:	20006be1 	.word	0x20006be1
2000647c:	20006be1 	.word	0x20006be1
20006480:	200069d3 	.word	0x200069d3
20006484:	20006be1 	.word	0x20006be1
20006488:	20006be1 	.word	0x20006be1
2000648c:	20006be1 	.word	0x20006be1
20006490:	20006be1 	.word	0x20006be1
20006494:	20006be1 	.word	0x20006be1
20006498:	20006be1 	.word	0x20006be1
2000649c:	20006be1 	.word	0x20006be1
200064a0:	20006ac5 	.word	0x20006ac5
200064a4:	20006be1 	.word	0x20006be1
200064a8:	20006be1 	.word	0x20006be1
200064ac:	20006be1 	.word	0x20006be1
200064b0:	20006be1 	.word	0x20006be1
200064b4:	20006be1 	.word	0x20006be1
200064b8:	20006be1 	.word	0x20006be1
200064bc:	20006be1 	.word	0x20006be1
200064c0:	20006ac5 	.word	0x20006ac5
200064c4:	20006be1 	.word	0x20006be1
200064c8:	20006be1 	.word	0x20006be1
200064cc:	20006be1 	.word	0x20006be1
200064d0:	20006be1 	.word	0x20006be1
200064d4:	20006be1 	.word	0x20006be1
200064d8:	20006be1 	.word	0x20006be1
200064dc:	20006be1 	.word	0x20006be1
200064e0:	20006ac5 	.word	0x20006ac5
200064e4:	20006be1 	.word	0x20006be1
200064e8:	20006be1 	.word	0x20006be1
200064ec:	20006be1 	.word	0x20006be1
200064f0:	20006be1 	.word	0x20006be1
200064f4:	20006be1 	.word	0x20006be1
200064f8:	20006be1 	.word	0x20006be1
200064fc:	20006be1 	.word	0x20006be1
20006500:	20006b8f 	.word	0x20006b8f
20006504:	20006be1 	.word	0x20006be1
20006508:	20006be1 	.word	0x20006be1
2000650c:	20006be1 	.word	0x20006be1
20006510:	20006be1 	.word	0x20006be1
20006514:	20006be1 	.word	0x20006be1
20006518:	20006be1 	.word	0x20006be1
2000651c:	20006be1 	.word	0x20006be1
20006520:	20006b8f 	.word	0x20006b8f
20006524:	20006be1 	.word	0x20006be1
20006528:	20006be1 	.word	0x20006be1
2000652c:	20006be1 	.word	0x20006be1
20006530:	20006be1 	.word	0x20006be1
20006534:	20006be1 	.word	0x20006be1
20006538:	20006be1 	.word	0x20006be1
2000653c:	20006be1 	.word	0x20006be1
20006540:	20006be1 	.word	0x20006be1
20006544:	20006be1 	.word	0x20006be1
20006548:	20006be1 	.word	0x20006be1
2000654c:	20006be1 	.word	0x20006be1
20006550:	20006be1 	.word	0x20006be1
20006554:	20006be1 	.word	0x20006be1
20006558:	20006be1 	.word	0x20006be1
2000655c:	20006be1 	.word	0x20006be1
20006560:	20006a97 	.word	0x20006a97
20006564:	20006be1 	.word	0x20006be1
20006568:	20006be1 	.word	0x20006be1
2000656c:	20006be1 	.word	0x20006be1
20006570:	20006be1 	.word	0x20006be1
20006574:	20006be1 	.word	0x20006be1
20006578:	20006be1 	.word	0x20006be1
2000657c:	20006be1 	.word	0x20006be1
20006580:	20006c35 	.word	0x20006c35
20006584:	687b      	ldr	r3, [r7, #4]
20006586:	681b      	ldr	r3, [r3, #0]
20006588:	4618      	mov	r0, r3
2000658a:	f04f 0105 	mov.w	r1, #5
2000658e:	f04f 0220 	mov.w	r2, #32
20006592:	f04f 0300 	mov.w	r3, #0
20006596:	f000 fe32 	bl	200071fe <HW_set_8bit_reg_field>
2000659a:	687b      	ldr	r3, [r7, #4]
2000659c:	681b      	ldr	r3, [r3, #0]
2000659e:	f103 0208 	add.w	r2, r3, #8
200065a2:	687b      	ldr	r3, [r7, #4]
200065a4:	689b      	ldr	r3, [r3, #8]
200065a6:	4610      	mov	r0, r2
200065a8:	4619      	mov	r1, r3
200065aa:	f000 fe24 	bl	200071f6 <HW_set_8bit_reg>
200065ae:	687b      	ldr	r3, [r7, #4]
200065b0:	681b      	ldr	r3, [r3, #0]
200065b2:	f103 0208 	add.w	r2, r3, #8
200065b6:	687b      	ldr	r3, [r7, #4]
200065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200065ba:	4610      	mov	r0, r2
200065bc:	f04f 0100 	mov.w	r1, #0
200065c0:	f04f 0201 	mov.w	r2, #1
200065c4:	f000 fe1b 	bl	200071fe <HW_set_8bit_reg_field>
200065c8:	687b      	ldr	r3, [r7, #4]
200065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200065cc:	2b00      	cmp	r3, #0
200065ce:	d104      	bne.n	200065da <I2C_isr+0x3ee>
200065d0:	687b      	ldr	r3, [r7, #4]
200065d2:	f04f 0200 	mov.w	r2, #0
200065d6:	621a      	str	r2, [r3, #32]
200065d8:	e003      	b.n	200065e2 <I2C_isr+0x3f6>
200065da:	687b      	ldr	r3, [r7, #4]
200065dc:	f04f 0200 	mov.w	r2, #0
200065e0:	631a      	str	r2, [r3, #48]	; 0x30
200065e2:	687b      	ldr	r3, [r7, #4]
200065e4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200065e8:	2b00      	cmp	r3, #0
200065ea:	d004      	beq.n	200065f6 <I2C_isr+0x40a>
200065ec:	687b      	ldr	r3, [r7, #4]
200065ee:	f04f 0200 	mov.w	r2, #0
200065f2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
200065f6:	687b      	ldr	r3, [r7, #4]
200065f8:	7b1a      	ldrb	r2, [r3, #12]
200065fa:	687b      	ldr	r3, [r7, #4]
200065fc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
20006600:	429a      	cmp	r2, r3
20006602:	f000 8319 	beq.w	20006c38 <I2C_isr+0xa4c>
20006606:	687b      	ldr	r3, [r7, #4]
20006608:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
2000660c:	687b      	ldr	r3, [r7, #4]
2000660e:	731a      	strb	r2, [r3, #12]
20006610:	e31b      	b.n	20006c4a <I2C_isr+0xa5e>
20006612:	687b      	ldr	r3, [r7, #4]
20006614:	681b      	ldr	r3, [r3, #0]
20006616:	4618      	mov	r0, r3
20006618:	f04f 0105 	mov.w	r1, #5
2000661c:	f04f 0220 	mov.w	r2, #32
20006620:	f04f 0301 	mov.w	r3, #1
20006624:	f000 fdeb 	bl	200071fe <HW_set_8bit_reg_field>
20006628:	e30f      	b.n	20006c4a <I2C_isr+0xa5e>
2000662a:	687b      	ldr	r3, [r7, #4]
2000662c:	681b      	ldr	r3, [r3, #0]
2000662e:	4618      	mov	r0, r3
20006630:	f04f 0104 	mov.w	r1, #4
20006634:	f04f 0210 	mov.w	r2, #16
20006638:	f04f 0301 	mov.w	r3, #1
2000663c:	f000 fddf 	bl	200071fe <HW_set_8bit_reg_field>
20006640:	687b      	ldr	r3, [r7, #4]
20006642:	f04f 0202 	mov.w	r2, #2
20006646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2000664a:	687b      	ldr	r3, [r7, #4]
2000664c:	f04f 0200 	mov.w	r2, #0
20006650:	731a      	strb	r2, [r3, #12]
20006652:	6878      	ldr	r0, [r7, #4]
20006654:	f7ff fdb2 	bl	200061bc <enable_slave_if_required>
20006658:	e2f7      	b.n	20006c4a <I2C_isr+0xa5e>
2000665a:	687b      	ldr	r3, [r7, #4]
2000665c:	6a1a      	ldr	r2, [r3, #32]
2000665e:	687b      	ldr	r3, [r7, #4]
20006660:	69db      	ldr	r3, [r3, #28]
20006662:	429a      	cmp	r2, r3
20006664:	d212      	bcs.n	2000668c <I2C_isr+0x4a0>
20006666:	687b      	ldr	r3, [r7, #4]
20006668:	681b      	ldr	r3, [r3, #0]
2000666a:	f103 0108 	add.w	r1, r3, #8
2000666e:	687b      	ldr	r3, [r7, #4]
20006670:	699a      	ldr	r2, [r3, #24]
20006672:	687b      	ldr	r3, [r7, #4]
20006674:	6a1b      	ldr	r3, [r3, #32]
20006676:	441a      	add	r2, r3
20006678:	7812      	ldrb	r2, [r2, #0]
2000667a:	f103 0001 	add.w	r0, r3, #1
2000667e:	687b      	ldr	r3, [r7, #4]
20006680:	6218      	str	r0, [r3, #32]
20006682:	4608      	mov	r0, r1
20006684:	4611      	mov	r1, r2
20006686:	f000 fdb6 	bl	200071f6 <HW_set_8bit_reg>
2000668a:	e2de      	b.n	20006c4a <I2C_isr+0xa5e>
2000668c:	687b      	ldr	r3, [r7, #4]
2000668e:	7b1b      	ldrb	r3, [r3, #12]
20006690:	2b03      	cmp	r3, #3
20006692:	d10f      	bne.n	200066b4 <I2C_isr+0x4c8>
20006694:	687b      	ldr	r3, [r7, #4]
20006696:	f04f 0201 	mov.w	r2, #1
2000669a:	625a      	str	r2, [r3, #36]	; 0x24
2000669c:	687b      	ldr	r3, [r7, #4]
2000669e:	681b      	ldr	r3, [r3, #0]
200066a0:	4618      	mov	r0, r3
200066a2:	f04f 0105 	mov.w	r1, #5
200066a6:	f04f 0220 	mov.w	r2, #32
200066aa:	f04f 0301 	mov.w	r3, #1
200066ae:	f000 fda6 	bl	200071fe <HW_set_8bit_reg_field>
200066b2:	e2ca      	b.n	20006c4a <I2C_isr+0xa5e>
200066b4:	687b      	ldr	r3, [r7, #4]
200066b6:	f04f 0200 	mov.w	r2, #0
200066ba:	731a      	strb	r2, [r3, #12]
200066bc:	687b      	ldr	r3, [r7, #4]
200066be:	7d1b      	ldrb	r3, [r3, #20]
200066c0:	f003 0301 	and.w	r3, r3, #1
200066c4:	737b      	strb	r3, [r7, #13]
200066c6:	687b      	ldr	r3, [r7, #4]
200066c8:	7b7a      	ldrb	r2, [r7, #13]
200066ca:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
200066ce:	7b7b      	ldrb	r3, [r7, #13]
200066d0:	2b00      	cmp	r3, #0
200066d2:	d10e      	bne.n	200066f2 <I2C_isr+0x506>
200066d4:	687b      	ldr	r3, [r7, #4]
200066d6:	681b      	ldr	r3, [r3, #0]
200066d8:	4618      	mov	r0, r3
200066da:	f04f 0104 	mov.w	r1, #4
200066de:	f04f 0210 	mov.w	r2, #16
200066e2:	f04f 0301 	mov.w	r3, #1
200066e6:	f000 fd8a 	bl	200071fe <HW_set_8bit_reg_field>
200066ea:	6878      	ldr	r0, [r7, #4]
200066ec:	f7ff fd66 	bl	200061bc <enable_slave_if_required>
200066f0:	e005      	b.n	200066fe <I2C_isr+0x512>
200066f2:	6878      	ldr	r0, [r7, #4]
200066f4:	f000 fb48 	bl	20006d88 <I2C_disable_irq>
200066f8:	f04f 0300 	mov.w	r3, #0
200066fc:	73bb      	strb	r3, [r7, #14]
200066fe:	687b      	ldr	r3, [r7, #4]
20006700:	f04f 0200 	mov.w	r2, #0
20006704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006708:	e29f      	b.n	20006c4a <I2C_isr+0xa5e>
2000670a:	687b      	ldr	r3, [r7, #4]
2000670c:	681b      	ldr	r3, [r3, #0]
2000670e:	4618      	mov	r0, r3
20006710:	f04f 0104 	mov.w	r1, #4
20006714:	f04f 0210 	mov.w	r2, #16
20006718:	f04f 0301 	mov.w	r3, #1
2000671c:	f000 fd6f 	bl	200071fe <HW_set_8bit_reg_field>
20006720:	687b      	ldr	r3, [r7, #4]
20006722:	f04f 0202 	mov.w	r2, #2
20006726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
2000672a:	687b      	ldr	r3, [r7, #4]
2000672c:	f04f 0200 	mov.w	r2, #0
20006730:	731a      	strb	r2, [r3, #12]
20006732:	6878      	ldr	r0, [r7, #4]
20006734:	f7ff fd42 	bl	200061bc <enable_slave_if_required>
20006738:	e287      	b.n	20006c4a <I2C_isr+0xa5e>
2000673a:	687b      	ldr	r3, [r7, #4]
2000673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000673e:	2b01      	cmp	r3, #1
20006740:	d90b      	bls.n	2000675a <I2C_isr+0x56e>
20006742:	687b      	ldr	r3, [r7, #4]
20006744:	681b      	ldr	r3, [r3, #0]
20006746:	4618      	mov	r0, r3
20006748:	f04f 0102 	mov.w	r1, #2
2000674c:	f04f 0204 	mov.w	r2, #4
20006750:	f04f 0301 	mov.w	r3, #1
20006754:	f000 fd53 	bl	200071fe <HW_set_8bit_reg_field>
20006758:	e277      	b.n	20006c4a <I2C_isr+0xa5e>
2000675a:	687b      	ldr	r3, [r7, #4]
2000675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000675e:	2b01      	cmp	r3, #1
20006760:	d10b      	bne.n	2000677a <I2C_isr+0x58e>
20006762:	687b      	ldr	r3, [r7, #4]
20006764:	681b      	ldr	r3, [r3, #0]
20006766:	4618      	mov	r0, r3
20006768:	f04f 0102 	mov.w	r1, #2
2000676c:	f04f 0204 	mov.w	r2, #4
20006770:	f04f 0300 	mov.w	r3, #0
20006774:	f000 fd43 	bl	200071fe <HW_set_8bit_reg_field>
20006778:	e267      	b.n	20006c4a <I2C_isr+0xa5e>
2000677a:	687b      	ldr	r3, [r7, #4]
2000677c:	681b      	ldr	r3, [r3, #0]
2000677e:	4618      	mov	r0, r3
20006780:	f04f 0102 	mov.w	r1, #2
20006784:	f04f 0204 	mov.w	r2, #4
20006788:	f04f 0301 	mov.w	r3, #1
2000678c:	f000 fd37 	bl	200071fe <HW_set_8bit_reg_field>
20006790:	687b      	ldr	r3, [r7, #4]
20006792:	681b      	ldr	r3, [r3, #0]
20006794:	4618      	mov	r0, r3
20006796:	f04f 0104 	mov.w	r1, #4
2000679a:	f04f 0210 	mov.w	r2, #16
2000679e:	f04f 0301 	mov.w	r3, #1
200067a2:	f000 fd2c 	bl	200071fe <HW_set_8bit_reg_field>
200067a6:	687b      	ldr	r3, [r7, #4]
200067a8:	f04f 0200 	mov.w	r2, #0
200067ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
200067b0:	687b      	ldr	r3, [r7, #4]
200067b2:	f04f 0200 	mov.w	r2, #0
200067b6:	731a      	strb	r2, [r3, #12]
200067b8:	e247      	b.n	20006c4a <I2C_isr+0xa5e>
200067ba:	687b      	ldr	r3, [r7, #4]
200067bc:	681b      	ldr	r3, [r3, #0]
200067be:	4618      	mov	r0, r3
200067c0:	f04f 0104 	mov.w	r1, #4
200067c4:	f04f 0210 	mov.w	r2, #16
200067c8:	f04f 0301 	mov.w	r3, #1
200067cc:	f000 fd17 	bl	200071fe <HW_set_8bit_reg_field>
200067d0:	687b      	ldr	r3, [r7, #4]
200067d2:	f04f 0202 	mov.w	r2, #2
200067d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
200067da:	687b      	ldr	r3, [r7, #4]
200067dc:	f04f 0200 	mov.w	r2, #0
200067e0:	731a      	strb	r2, [r3, #12]
200067e2:	6878      	ldr	r0, [r7, #4]
200067e4:	f7ff fcea 	bl	200061bc <enable_slave_if_required>
200067e8:	e22f      	b.n	20006c4a <I2C_isr+0xa5e>
200067ea:	687b      	ldr	r3, [r7, #4]
200067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200067ee:	687a      	ldr	r2, [r7, #4]
200067f0:	6b14      	ldr	r4, [r2, #48]	; 0x30
200067f2:	eb03 0504 	add.w	r5, r3, r4
200067f6:	687b      	ldr	r3, [r7, #4]
200067f8:	681b      	ldr	r3, [r3, #0]
200067fa:	f103 0308 	add.w	r3, r3, #8
200067fe:	4618      	mov	r0, r3
20006800:	f000 fcfb 	bl	200071fa <HW_get_8bit_reg>
20006804:	4603      	mov	r3, r0
20006806:	702b      	strb	r3, [r5, #0]
20006808:	f104 0201 	add.w	r2, r4, #1
2000680c:	687b      	ldr	r3, [r7, #4]
2000680e:	631a      	str	r2, [r3, #48]	; 0x30
20006810:	687b      	ldr	r3, [r7, #4]
20006812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20006814:	687b      	ldr	r3, [r7, #4]
20006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006818:	f103 33ff 	add.w	r3, r3, #4294967295
2000681c:	429a      	cmp	r2, r3
2000681e:	f0c0 820d 	bcc.w	20006c3c <I2C_isr+0xa50>
20006822:	687b      	ldr	r3, [r7, #4]
20006824:	681b      	ldr	r3, [r3, #0]
20006826:	4618      	mov	r0, r3
20006828:	f04f 0102 	mov.w	r1, #2
2000682c:	f04f 0204 	mov.w	r2, #4
20006830:	f04f 0300 	mov.w	r3, #0
20006834:	f000 fce3 	bl	200071fe <HW_set_8bit_reg_field>
20006838:	e207      	b.n	20006c4a <I2C_isr+0xa5e>
2000683a:	687b      	ldr	r3, [r7, #4]
2000683c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000683e:	687b      	ldr	r3, [r7, #4]
20006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006842:	eb02 0403 	add.w	r4, r2, r3
20006846:	687b      	ldr	r3, [r7, #4]
20006848:	681b      	ldr	r3, [r3, #0]
2000684a:	f103 0308 	add.w	r3, r3, #8
2000684e:	4618      	mov	r0, r3
20006850:	f000 fcd3 	bl	200071fa <HW_get_8bit_reg>
20006854:	4603      	mov	r3, r0
20006856:	7023      	strb	r3, [r4, #0]
20006858:	687b      	ldr	r3, [r7, #4]
2000685a:	7d1b      	ldrb	r3, [r3, #20]
2000685c:	f003 0301 	and.w	r3, r3, #1
20006860:	737b      	strb	r3, [r7, #13]
20006862:	687b      	ldr	r3, [r7, #4]
20006864:	7b7a      	ldrb	r2, [r7, #13]
20006866:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
2000686a:	7b7b      	ldrb	r3, [r7, #13]
2000686c:	2b00      	cmp	r3, #0
2000686e:	d10e      	bne.n	2000688e <I2C_isr+0x6a2>
20006870:	687b      	ldr	r3, [r7, #4]
20006872:	681b      	ldr	r3, [r3, #0]
20006874:	4618      	mov	r0, r3
20006876:	f04f 0104 	mov.w	r1, #4
2000687a:	f04f 0210 	mov.w	r2, #16
2000687e:	f04f 0301 	mov.w	r3, #1
20006882:	f000 fcbc 	bl	200071fe <HW_set_8bit_reg_field>
20006886:	6878      	ldr	r0, [r7, #4]
20006888:	f7ff fc98 	bl	200061bc <enable_slave_if_required>
2000688c:	e005      	b.n	2000689a <I2C_isr+0x6ae>
2000688e:	6878      	ldr	r0, [r7, #4]
20006890:	f000 fa7a 	bl	20006d88 <I2C_disable_irq>
20006894:	f04f 0300 	mov.w	r3, #0
20006898:	73bb      	strb	r3, [r7, #14]
2000689a:	687b      	ldr	r3, [r7, #4]
2000689c:	f04f 0200 	mov.w	r2, #0
200068a0:	731a      	strb	r2, [r3, #12]
200068a2:	687b      	ldr	r3, [r7, #4]
200068a4:	f04f 0200 	mov.w	r2, #0
200068a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
200068ac:	e1cd      	b.n	20006c4a <I2C_isr+0xa5e>
200068ae:	687b      	ldr	r3, [r7, #4]
200068b0:	681b      	ldr	r3, [r3, #0]
200068b2:	4618      	mov	r0, r3
200068b4:	f04f 0102 	mov.w	r1, #2
200068b8:	f04f 0204 	mov.w	r2, #4
200068bc:	f04f 0301 	mov.w	r3, #1
200068c0:	f000 fc9d 	bl	200071fe <HW_set_8bit_reg_field>
200068c4:	687b      	ldr	r3, [r7, #4]
200068c6:	f04f 0200 	mov.w	r2, #0
200068ca:	731a      	strb	r2, [r3, #12]
200068cc:	687b      	ldr	r3, [r7, #4]
200068ce:	f04f 0200 	mov.w	r2, #0
200068d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
200068d6:	687b      	ldr	r3, [r7, #4]
200068d8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
200068dc:	2b00      	cmp	r3, #0
200068de:	f000 81af 	beq.w	20006c40 <I2C_isr+0xa54>
200068e2:	687b      	ldr	r3, [r7, #4]
200068e4:	681b      	ldr	r3, [r3, #0]
200068e6:	4618      	mov	r0, r3
200068e8:	f04f 0105 	mov.w	r1, #5
200068ec:	f04f 0220 	mov.w	r2, #32
200068f0:	f04f 0301 	mov.w	r3, #1
200068f4:	f000 fc83 	bl	200071fe <HW_set_8bit_reg_field>
200068f8:	e1a7      	b.n	20006c4a <I2C_isr+0xa5e>
200068fa:	687b      	ldr	r3, [r7, #4]
200068fc:	f04f 0201 	mov.w	r2, #1
20006900:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006904:	687b      	ldr	r3, [r7, #4]
20006906:	f04f 0204 	mov.w	r2, #4
2000690a:	731a      	strb	r2, [r3, #12]
2000690c:	687b      	ldr	r3, [r7, #4]
2000690e:	f04f 0200 	mov.w	r2, #0
20006912:	651a      	str	r2, [r3, #80]	; 0x50
20006914:	687b      	ldr	r3, [r7, #4]
20006916:	f04f 0200 	mov.w	r2, #0
2000691a:	611a      	str	r2, [r3, #16]
2000691c:	687b      	ldr	r3, [r7, #4]
2000691e:	681b      	ldr	r3, [r3, #0]
20006920:	4618      	mov	r0, r3
20006922:	f04f 0105 	mov.w	r1, #5
20006926:	f04f 0220 	mov.w	r2, #32
2000692a:	f000 fc76 	bl	2000721a <HW_get_8bit_reg_field>
2000692e:	4603      	mov	r3, r0
20006930:	2b00      	cmp	r3, #0
20006932:	d00f      	beq.n	20006954 <I2C_isr+0x768>
20006934:	687b      	ldr	r3, [r7, #4]
20006936:	681b      	ldr	r3, [r3, #0]
20006938:	4618      	mov	r0, r3
2000693a:	f04f 0105 	mov.w	r1, #5
2000693e:	f04f 0220 	mov.w	r2, #32
20006942:	f04f 0300 	mov.w	r3, #0
20006946:	f000 fc5a 	bl	200071fe <HW_set_8bit_reg_field>
2000694a:	687b      	ldr	r3, [r7, #4]
2000694c:	f04f 0201 	mov.w	r2, #1
20006950:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006954:	687b      	ldr	r3, [r7, #4]
20006956:	f04f 0201 	mov.w	r2, #1
2000695a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
2000695e:	e174      	b.n	20006c4a <I2C_isr+0xa5e>
20006960:	687b      	ldr	r3, [r7, #4]
20006962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20006964:	2b00      	cmp	r3, #0
20006966:	d021      	beq.n	200069ac <I2C_isr+0x7c0>
20006968:	687b      	ldr	r3, [r7, #4]
2000696a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2000696c:	687b      	ldr	r3, [r7, #4]
2000696e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20006970:	429a      	cmp	r2, r3
20006972:	d21b      	bcs.n	200069ac <I2C_isr+0x7c0>
20006974:	687b      	ldr	r3, [r7, #4]
20006976:	681b      	ldr	r3, [r3, #0]
20006978:	f103 0308 	add.w	r3, r3, #8
2000697c:	4618      	mov	r0, r3
2000697e:	f000 fc3c 	bl	200071fa <HW_get_8bit_reg>
20006982:	4603      	mov	r3, r0
20006984:	733b      	strb	r3, [r7, #12]
20006986:	687b      	ldr	r3, [r7, #4]
20006988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2000698a:	687b      	ldr	r3, [r7, #4]
2000698c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000698e:	441a      	add	r2, r3
20006990:	7b39      	ldrb	r1, [r7, #12]
20006992:	7011      	strb	r1, [r2, #0]
20006994:	f103 0201 	add.w	r2, r3, #1
20006998:	687b      	ldr	r3, [r7, #4]
2000699a:	651a      	str	r2, [r3, #80]	; 0x50
2000699c:	687b      	ldr	r3, [r7, #4]
2000699e:	691b      	ldr	r3, [r3, #16]
200069a0:	ea4f 2203 	mov.w	r2, r3, lsl #8
200069a4:	7b3b      	ldrb	r3, [r7, #12]
200069a6:	441a      	add	r2, r3
200069a8:	687b      	ldr	r3, [r7, #4]
200069aa:	611a      	str	r2, [r3, #16]
200069ac:	687b      	ldr	r3, [r7, #4]
200069ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200069b0:	687b      	ldr	r3, [r7, #4]
200069b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200069b4:	429a      	cmp	r2, r3
200069b6:	f0c0 8145 	bcc.w	20006c44 <I2C_isr+0xa58>
200069ba:	687b      	ldr	r3, [r7, #4]
200069bc:	681b      	ldr	r3, [r3, #0]
200069be:	4618      	mov	r0, r3
200069c0:	f04f 0102 	mov.w	r1, #2
200069c4:	f04f 0204 	mov.w	r2, #4
200069c8:	f04f 0300 	mov.w	r3, #0
200069cc:	f000 fc17 	bl	200071fe <HW_set_8bit_reg_field>
200069d0:	e13b      	b.n	20006c4a <I2C_isr+0xa5e>
200069d2:	687b      	ldr	r3, [r7, #4]
200069d4:	7b1b      	ldrb	r3, [r3, #12]
200069d6:	2b04      	cmp	r3, #4
200069d8:	d13c      	bne.n	20006a54 <I2C_isr+0x868>
200069da:	687b      	ldr	r3, [r7, #4]
200069dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200069de:	687b      	ldr	r3, [r7, #4]
200069e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200069e2:	429a      	cmp	r2, r3
200069e4:	d103      	bne.n	200069ee <I2C_isr+0x802>
200069e6:	687b      	ldr	r3, [r7, #4]
200069e8:	691a      	ldr	r2, [r3, #16]
200069ea:	687b      	ldr	r3, [r7, #4]
200069ec:	645a      	str	r2, [r3, #68]	; 0x44
200069ee:	687b      	ldr	r3, [r7, #4]
200069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200069f2:	2b00      	cmp	r3, #0
200069f4:	d022      	beq.n	20006a3c <I2C_isr+0x850>
200069f6:	687b      	ldr	r3, [r7, #4]
200069f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200069fa:	687a      	ldr	r2, [r7, #4]
200069fc:	6c91      	ldr	r1, [r2, #72]	; 0x48
200069fe:	687a      	ldr	r2, [r7, #4]
20006a00:	6d12      	ldr	r2, [r2, #80]	; 0x50
20006a02:	b292      	uxth	r2, r2
20006a04:	6878      	ldr	r0, [r7, #4]
20006a06:	4798      	blx	r3
20006a08:	4603      	mov	r3, r0
20006a0a:	73fb      	strb	r3, [r7, #15]
20006a0c:	7bfb      	ldrb	r3, [r7, #15]
20006a0e:	2b00      	cmp	r3, #0
20006a10:	d103      	bne.n	20006a1a <I2C_isr+0x82e>
20006a12:	6878      	ldr	r0, [r7, #4]
20006a14:	f7ff fbd2 	bl	200061bc <enable_slave_if_required>
20006a18:	e023      	b.n	20006a62 <I2C_isr+0x876>
20006a1a:	687b      	ldr	r3, [r7, #4]
20006a1c:	681b      	ldr	r3, [r3, #0]
20006a1e:	4618      	mov	r0, r3
20006a20:	f04f 0102 	mov.w	r1, #2
20006a24:	f04f 0204 	mov.w	r2, #4
20006a28:	f04f 0300 	mov.w	r3, #0
20006a2c:	f000 fbe7 	bl	200071fe <HW_set_8bit_reg_field>
20006a30:	687b      	ldr	r3, [r7, #4]
20006a32:	f04f 0200 	mov.w	r2, #0
20006a36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
20006a3a:	e012      	b.n	20006a62 <I2C_isr+0x876>
20006a3c:	687b      	ldr	r3, [r7, #4]
20006a3e:	681b      	ldr	r3, [r3, #0]
20006a40:	4618      	mov	r0, r3
20006a42:	f04f 0102 	mov.w	r1, #2
20006a46:	f04f 0204 	mov.w	r2, #4
20006a4a:	f04f 0301 	mov.w	r3, #1
20006a4e:	f000 fbd6 	bl	200071fe <HW_set_8bit_reg_field>
20006a52:	e006      	b.n	20006a62 <I2C_isr+0x876>
20006a54:	687b      	ldr	r3, [r7, #4]
20006a56:	f04f 0200 	mov.w	r2, #0
20006a5a:	645a      	str	r2, [r3, #68]	; 0x44
20006a5c:	6878      	ldr	r0, [r7, #4]
20006a5e:	f7ff fbad 	bl	200061bc <enable_slave_if_required>
20006a62:	687b      	ldr	r3, [r7, #4]
20006a64:	f04f 0200 	mov.w	r2, #0
20006a68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006a6c:	687b      	ldr	r3, [r7, #4]
20006a6e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006a72:	2b00      	cmp	r3, #0
20006a74:	d00a      	beq.n	20006a8c <I2C_isr+0x8a0>
20006a76:	687b      	ldr	r3, [r7, #4]
20006a78:	681b      	ldr	r3, [r3, #0]
20006a7a:	4618      	mov	r0, r3
20006a7c:	f04f 0105 	mov.w	r1, #5
20006a80:	f04f 0220 	mov.w	r2, #32
20006a84:	f04f 0301 	mov.w	r3, #1
20006a88:	f000 fbb9 	bl	200071fe <HW_set_8bit_reg_field>
20006a8c:	687b      	ldr	r3, [r7, #4]
20006a8e:	f04f 0200 	mov.w	r2, #0
20006a92:	731a      	strb	r2, [r3, #12]
20006a94:	e0d9      	b.n	20006c4a <I2C_isr+0xa5e>
20006a96:	687b      	ldr	r3, [r7, #4]
20006a98:	f04f 0200 	mov.w	r2, #0
20006a9c:	731a      	strb	r2, [r3, #12]
20006a9e:	687b      	ldr	r3, [r7, #4]
20006aa0:	f04f 0200 	mov.w	r2, #0
20006aa4:	645a      	str	r2, [r3, #68]	; 0x44
20006aa6:	687b      	ldr	r3, [r7, #4]
20006aa8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006aac:	b2db      	uxtb	r3, r3
20006aae:	2b01      	cmp	r3, #1
20006ab0:	d104      	bne.n	20006abc <I2C_isr+0x8d0>
20006ab2:	687b      	ldr	r3, [r7, #4]
20006ab4:	f04f 0202 	mov.w	r2, #2
20006ab8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006abc:	6878      	ldr	r0, [r7, #4]
20006abe:	f7ff fb7d 	bl	200061bc <enable_slave_if_required>
20006ac2:	e0c2      	b.n	20006c4a <I2C_isr+0xa5e>
20006ac4:	7afb      	ldrb	r3, [r7, #11]
20006ac6:	b2db      	uxtb	r3, r3
20006ac8:	2ba8      	cmp	r3, #168	; 0xa8
20006aca:	d128      	bne.n	20006b1e <I2C_isr+0x932>
20006acc:	687b      	ldr	r3, [r7, #4]
20006ace:	f04f 0205 	mov.w	r2, #5
20006ad2:	731a      	strb	r2, [r3, #12]
20006ad4:	687b      	ldr	r3, [r7, #4]
20006ad6:	f04f 0200 	mov.w	r2, #0
20006ada:	611a      	str	r2, [r3, #16]
20006adc:	687b      	ldr	r3, [r7, #4]
20006ade:	f04f 0201 	mov.w	r2, #1
20006ae2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006ae6:	687b      	ldr	r3, [r7, #4]
20006ae8:	681b      	ldr	r3, [r3, #0]
20006aea:	4618      	mov	r0, r3
20006aec:	f04f 0105 	mov.w	r1, #5
20006af0:	f04f 0220 	mov.w	r2, #32
20006af4:	f000 fb91 	bl	2000721a <HW_get_8bit_reg_field>
20006af8:	4603      	mov	r3, r0
20006afa:	2b00      	cmp	r3, #0
20006afc:	d00f      	beq.n	20006b1e <I2C_isr+0x932>
20006afe:	687b      	ldr	r3, [r7, #4]
20006b00:	681b      	ldr	r3, [r3, #0]
20006b02:	4618      	mov	r0, r3
20006b04:	f04f 0105 	mov.w	r1, #5
20006b08:	f04f 0220 	mov.w	r2, #32
20006b0c:	f04f 0300 	mov.w	r3, #0
20006b10:	f000 fb75 	bl	200071fe <HW_set_8bit_reg_field>
20006b14:	687b      	ldr	r3, [r7, #4]
20006b16:	f04f 0201 	mov.w	r2, #1
20006b1a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
20006b1e:	687b      	ldr	r3, [r7, #4]
20006b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006b22:	687b      	ldr	r3, [r7, #4]
20006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006b26:	429a      	cmp	r2, r3
20006b28:	d309      	bcc.n	20006b3e <I2C_isr+0x952>
20006b2a:	687b      	ldr	r3, [r7, #4]
20006b2c:	681b      	ldr	r3, [r3, #0]
20006b2e:	f103 0308 	add.w	r3, r3, #8
20006b32:	4618      	mov	r0, r3
20006b34:	f04f 01ff 	mov.w	r1, #255	; 0xff
20006b38:	f000 fb5d 	bl	200071f6 <HW_set_8bit_reg>
20006b3c:	e011      	b.n	20006b62 <I2C_isr+0x976>
20006b3e:	687b      	ldr	r3, [r7, #4]
20006b40:	681b      	ldr	r3, [r3, #0]
20006b42:	f103 0108 	add.w	r1, r3, #8
20006b46:	687b      	ldr	r3, [r7, #4]
20006b48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
20006b4a:	687b      	ldr	r3, [r7, #4]
20006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006b4e:	441a      	add	r2, r3
20006b50:	7812      	ldrb	r2, [r2, #0]
20006b52:	f103 0001 	add.w	r0, r3, #1
20006b56:	687b      	ldr	r3, [r7, #4]
20006b58:	6458      	str	r0, [r3, #68]	; 0x44
20006b5a:	4608      	mov	r0, r1
20006b5c:	4611      	mov	r1, r2
20006b5e:	f000 fb4a 	bl	200071f6 <HW_set_8bit_reg>
20006b62:	687b      	ldr	r3, [r7, #4]
20006b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006b66:	687b      	ldr	r3, [r7, #4]
20006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006b6a:	429a      	cmp	r2, r3
20006b6c:	d36c      	bcc.n	20006c48 <I2C_isr+0xa5c>
20006b6e:	687b      	ldr	r3, [r7, #4]
20006b70:	681b      	ldr	r3, [r3, #0]
20006b72:	4618      	mov	r0, r3
20006b74:	f04f 0102 	mov.w	r1, #2
20006b78:	f04f 0204 	mov.w	r2, #4
20006b7c:	f04f 0300 	mov.w	r3, #0
20006b80:	f000 fb3d 	bl	200071fe <HW_set_8bit_reg_field>
20006b84:	687b      	ldr	r3, [r7, #4]
20006b86:	f04f 0200 	mov.w	r2, #0
20006b8a:	645a      	str	r2, [r3, #68]	; 0x44
20006b8c:	e05d      	b.n	20006c4a <I2C_isr+0xa5e>
20006b8e:	687b      	ldr	r3, [r7, #4]
20006b90:	f04f 0200 	mov.w	r2, #0
20006b94:	645a      	str	r2, [r3, #68]	; 0x44
20006b96:	687b      	ldr	r3, [r7, #4]
20006b98:	681b      	ldr	r3, [r3, #0]
20006b9a:	4618      	mov	r0, r3
20006b9c:	f04f 0102 	mov.w	r1, #2
20006ba0:	f04f 0204 	mov.w	r2, #4
20006ba4:	f04f 0301 	mov.w	r3, #1
20006ba8:	f000 fb29 	bl	200071fe <HW_set_8bit_reg_field>
20006bac:	687b      	ldr	r3, [r7, #4]
20006bae:	f04f 0200 	mov.w	r2, #0
20006bb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006bb6:	687b      	ldr	r3, [r7, #4]
20006bb8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
20006bbc:	2b00      	cmp	r3, #0
20006bbe:	d00a      	beq.n	20006bd6 <I2C_isr+0x9ea>
20006bc0:	687b      	ldr	r3, [r7, #4]
20006bc2:	681b      	ldr	r3, [r3, #0]
20006bc4:	4618      	mov	r0, r3
20006bc6:	f04f 0105 	mov.w	r1, #5
20006bca:	f04f 0220 	mov.w	r2, #32
20006bce:	f04f 0301 	mov.w	r3, #1
20006bd2:	f000 fb14 	bl	200071fe <HW_set_8bit_reg_field>
20006bd6:	687b      	ldr	r3, [r7, #4]
20006bd8:	f04f 0200 	mov.w	r2, #0
20006bdc:	731a      	strb	r2, [r3, #12]
20006bde:	e034      	b.n	20006c4a <I2C_isr+0xa5e>
20006be0:	687b      	ldr	r3, [r7, #4]
20006be2:	681b      	ldr	r3, [r3, #0]
20006be4:	4618      	mov	r0, r3
20006be6:	f04f 0105 	mov.w	r1, #5
20006bea:	f04f 0220 	mov.w	r2, #32
20006bee:	f04f 0300 	mov.w	r3, #0
20006bf2:	f000 fb04 	bl	200071fe <HW_set_8bit_reg_field>
20006bf6:	687b      	ldr	r3, [r7, #4]
20006bf8:	f04f 0200 	mov.w	r2, #0
20006bfc:	731a      	strb	r2, [r3, #12]
20006bfe:	687b      	ldr	r3, [r7, #4]
20006c00:	f04f 0200 	mov.w	r2, #0
20006c04:	645a      	str	r2, [r3, #68]	; 0x44
20006c06:	687b      	ldr	r3, [r7, #4]
20006c08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20006c0c:	b2db      	uxtb	r3, r3
20006c0e:	2b01      	cmp	r3, #1
20006c10:	d104      	bne.n	20006c1c <I2C_isr+0xa30>
20006c12:	687b      	ldr	r3, [r7, #4]
20006c14:	f04f 0202 	mov.w	r2, #2
20006c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20006c1c:	687b      	ldr	r3, [r7, #4]
20006c1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
20006c22:	b2db      	uxtb	r3, r3
20006c24:	2b01      	cmp	r3, #1
20006c26:	d110      	bne.n	20006c4a <I2C_isr+0xa5e>
20006c28:	687b      	ldr	r3, [r7, #4]
20006c2a:	f04f 0202 	mov.w	r2, #2
20006c2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
20006c32:	e00a      	b.n	20006c4a <I2C_isr+0xa5e>
20006c34:	bf00      	nop
20006c36:	e008      	b.n	20006c4a <I2C_isr+0xa5e>
20006c38:	bf00      	nop
20006c3a:	e006      	b.n	20006c4a <I2C_isr+0xa5e>
20006c3c:	bf00      	nop
20006c3e:	e004      	b.n	20006c4a <I2C_isr+0xa5e>
20006c40:	bf00      	nop
20006c42:	e002      	b.n	20006c4a <I2C_isr+0xa5e>
20006c44:	bf00      	nop
20006c46:	e000      	b.n	20006c4a <I2C_isr+0xa5e>
20006c48:	bf00      	nop
20006c4a:	7bbb      	ldrb	r3, [r7, #14]
20006c4c:	2b00      	cmp	r3, #0
20006c4e:	d00a      	beq.n	20006c66 <I2C_isr+0xa7a>
20006c50:	687b      	ldr	r3, [r7, #4]
20006c52:	681b      	ldr	r3, [r3, #0]
20006c54:	4618      	mov	r0, r3
20006c56:	f04f 0103 	mov.w	r1, #3
20006c5a:	f04f 0208 	mov.w	r2, #8
20006c5e:	f04f 0300 	mov.w	r3, #0
20006c62:	f000 facc 	bl	200071fe <HW_set_8bit_reg_field>
20006c66:	687b      	ldr	r3, [r7, #4]
20006c68:	681b      	ldr	r3, [r3, #0]
20006c6a:	f103 0304 	add.w	r3, r3, #4
20006c6e:	4618      	mov	r0, r3
20006c70:	f000 fac3 	bl	200071fa <HW_get_8bit_reg>
20006c74:	4603      	mov	r3, r0
20006c76:	72fb      	strb	r3, [r7, #11]
20006c78:	f107 0710 	add.w	r7, r7, #16
20006c7c:	46bd      	mov	sp, r7
20006c7e:	bdb0      	pop	{r4, r5, r7, pc}

20006c80 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20006c80:	b480      	push	{r7}
20006c82:	b083      	sub	sp, #12
20006c84:	af00      	add	r7, sp, #0
20006c86:	4603      	mov	r3, r0
20006c88:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20006c8a:	f24e 1300 	movw	r3, #57600	; 0xe100
20006c8e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006c92:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006c96:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006c9a:	79f9      	ldrb	r1, [r7, #7]
20006c9c:	f001 011f 	and.w	r1, r1, #31
20006ca0:	f04f 0001 	mov.w	r0, #1
20006ca4:	fa00 f101 	lsl.w	r1, r0, r1
20006ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006cac:	f107 070c 	add.w	r7, r7, #12
20006cb0:	46bd      	mov	sp, r7
20006cb2:	bc80      	pop	{r7}
20006cb4:	4770      	bx	lr
20006cb6:	bf00      	nop

20006cb8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20006cb8:	b480      	push	{r7}
20006cba:	b083      	sub	sp, #12
20006cbc:	af00      	add	r7, sp, #0
20006cbe:	4603      	mov	r3, r0
20006cc0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20006cc2:	f24e 1300 	movw	r3, #57600	; 0xe100
20006cc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006cca:	f997 2007 	ldrsb.w	r2, [r7, #7]
20006cce:	ea4f 1252 	mov.w	r2, r2, lsr #5
20006cd2:	79f9      	ldrb	r1, [r7, #7]
20006cd4:	f001 011f 	and.w	r1, r1, #31
20006cd8:	f04f 0001 	mov.w	r0, #1
20006cdc:	fa00 f101 	lsl.w	r1, r0, r1
20006ce0:	f102 0220 	add.w	r2, r2, #32
20006ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20006ce8:	f107 070c 	add.w	r7, r7, #12
20006cec:	46bd      	mov	sp, r7
20006cee:	bc80      	pop	{r7}
20006cf0:	4770      	bx	lr
20006cf2:	bf00      	nop

20006cf4 <I2C_enable_irq>:
20006cf4:	b580      	push	{r7, lr}
20006cf6:	b082      	sub	sp, #8
20006cf8:	af00      	add	r7, sp, #0
20006cfa:	6078      	str	r0, [r7, #4]
20006cfc:	687a      	ldr	r2, [r7, #4]
20006cfe:	f64d 630c 	movw	r3, #56844	; 0xde0c
20006d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d06:	429a      	cmp	r2, r3
20006d08:	d103      	bne.n	20006d12 <I2C_enable_irq+0x1e>
20006d0a:	f04f 0022 	mov.w	r0, #34	; 0x22
20006d0e:	f7ff ffb7 	bl	20006c80 <NVIC_EnableIRQ>
20006d12:	687a      	ldr	r2, [r7, #4]
20006d14:	f64d 6378 	movw	r3, #56952	; 0xde78
20006d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d1c:	429a      	cmp	r2, r3
20006d1e:	d103      	bne.n	20006d28 <I2C_enable_irq+0x34>
20006d20:	f04f 0023 	mov.w	r0, #35	; 0x23
20006d24:	f7ff ffac 	bl	20006c80 <NVIC_EnableIRQ>
20006d28:	687a      	ldr	r2, [r7, #4]
20006d2a:	f64d 1350 	movw	r3, #55632	; 0xd950
20006d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d32:	429a      	cmp	r2, r3
20006d34:	d103      	bne.n	20006d3e <I2C_enable_irq+0x4a>
20006d36:	f04f 0024 	mov.w	r0, #36	; 0x24
20006d3a:	f7ff ffa1 	bl	20006c80 <NVIC_EnableIRQ>
20006d3e:	687a      	ldr	r2, [r7, #4]
20006d40:	f64d 7350 	movw	r3, #57168	; 0xdf50
20006d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d48:	429a      	cmp	r2, r3
20006d4a:	d103      	bne.n	20006d54 <I2C_enable_irq+0x60>
20006d4c:	f04f 0025 	mov.w	r0, #37	; 0x25
20006d50:	f7ff ff96 	bl	20006c80 <NVIC_EnableIRQ>
20006d54:	687a      	ldr	r2, [r7, #4]
20006d56:	f64d 73c4 	movw	r3, #57284	; 0xdfc4
20006d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d5e:	429a      	cmp	r2, r3
20006d60:	d103      	bne.n	20006d6a <I2C_enable_irq+0x76>
20006d62:	f04f 0026 	mov.w	r0, #38	; 0x26
20006d66:	f7ff ff8b 	bl	20006c80 <NVIC_EnableIRQ>
20006d6a:	687a      	ldr	r2, [r7, #4]
20006d6c:	f64d 63e4 	movw	r3, #57060	; 0xdee4
20006d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d74:	429a      	cmp	r2, r3
20006d76:	d103      	bne.n	20006d80 <I2C_enable_irq+0x8c>
20006d78:	f04f 0027 	mov.w	r0, #39	; 0x27
20006d7c:	f7ff ff80 	bl	20006c80 <NVIC_EnableIRQ>
20006d80:	f107 0708 	add.w	r7, r7, #8
20006d84:	46bd      	mov	sp, r7
20006d86:	bd80      	pop	{r7, pc}

20006d88 <I2C_disable_irq>:
20006d88:	b580      	push	{r7, lr}
20006d8a:	b082      	sub	sp, #8
20006d8c:	af00      	add	r7, sp, #0
20006d8e:	6078      	str	r0, [r7, #4]
20006d90:	687a      	ldr	r2, [r7, #4]
20006d92:	f64d 630c 	movw	r3, #56844	; 0xde0c
20006d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006d9a:	429a      	cmp	r2, r3
20006d9c:	d103      	bne.n	20006da6 <I2C_disable_irq+0x1e>
20006d9e:	f04f 0022 	mov.w	r0, #34	; 0x22
20006da2:	f7ff ff89 	bl	20006cb8 <NVIC_DisableIRQ>
20006da6:	687a      	ldr	r2, [r7, #4]
20006da8:	f64d 6378 	movw	r3, #56952	; 0xde78
20006dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006db0:	429a      	cmp	r2, r3
20006db2:	d103      	bne.n	20006dbc <I2C_disable_irq+0x34>
20006db4:	f04f 0023 	mov.w	r0, #35	; 0x23
20006db8:	f7ff ff7e 	bl	20006cb8 <NVIC_DisableIRQ>
20006dbc:	687a      	ldr	r2, [r7, #4]
20006dbe:	f64d 1350 	movw	r3, #55632	; 0xd950
20006dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006dc6:	429a      	cmp	r2, r3
20006dc8:	d103      	bne.n	20006dd2 <I2C_disable_irq+0x4a>
20006dca:	f04f 0024 	mov.w	r0, #36	; 0x24
20006dce:	f7ff ff73 	bl	20006cb8 <NVIC_DisableIRQ>
20006dd2:	687a      	ldr	r2, [r7, #4]
20006dd4:	f64d 7350 	movw	r3, #57168	; 0xdf50
20006dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ddc:	429a      	cmp	r2, r3
20006dde:	d103      	bne.n	20006de8 <I2C_disable_irq+0x60>
20006de0:	f04f 0025 	mov.w	r0, #37	; 0x25
20006de4:	f7ff ff68 	bl	20006cb8 <NVIC_DisableIRQ>
20006de8:	687a      	ldr	r2, [r7, #4]
20006dea:	f64d 73c4 	movw	r3, #57284	; 0xdfc4
20006dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006df2:	429a      	cmp	r2, r3
20006df4:	d103      	bne.n	20006dfe <I2C_disable_irq+0x76>
20006df6:	f04f 0026 	mov.w	r0, #38	; 0x26
20006dfa:	f7ff ff5d 	bl	20006cb8 <NVIC_DisableIRQ>
20006dfe:	687a      	ldr	r2, [r7, #4]
20006e00:	f64d 63e4 	movw	r3, #57060	; 0xdee4
20006e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006e08:	429a      	cmp	r2, r3
20006e0a:	d103      	bne.n	20006e14 <I2C_disable_irq+0x8c>
20006e0c:	f04f 0027 	mov.w	r0, #39	; 0x27
20006e10:	f7ff ff52 	bl	20006cb8 <NVIC_DisableIRQ>
20006e14:	f107 0708 	add.w	r7, r7, #8
20006e18:	46bd      	mov	sp, r7
20006e1a:	bd80      	pop	{r7, pc}

20006e1c <SystemInit>:
20006e1c:	b580      	push	{r7, lr}
20006e1e:	af00      	add	r7, sp, #0
20006e20:	f000 f96a 	bl	200070f8 <complete_clock_config>
20006e24:	f000 f936 	bl	20007094 <silicon_workarounds>
20006e28:	f64e 5300 	movw	r3, #60672	; 0xed00
20006e2c:	f2ce 0300 	movt	r3, #57344	; 0xe000
20006e30:	f64e 5200 	movw	r2, #60672	; 0xed00
20006e34:	f2ce 0200 	movt	r2, #57344	; 0xe000
20006e38:	6952      	ldr	r2, [r2, #20]
20006e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20006e3e:	615a      	str	r2, [r3, #20]
20006e40:	f7f9 fa35 	bl	200002ae <mscc_post_hw_cfg_init>
20006e44:	bd80      	pop	{r7, pc}
20006e46:	bf00      	nop

20006e48 <SystemCoreClockUpdate>:
20006e48:	b580      	push	{r7, lr}
20006e4a:	b088      	sub	sp, #32
20006e4c:	af00      	add	r7, sp, #0
20006e4e:	f248 0300 	movw	r3, #32768	; 0x8000
20006e52:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20006e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
20006e5e:	60fb      	str	r3, [r7, #12]
20006e60:	68fb      	ldr	r3, [r7, #12]
20006e62:	2b00      	cmp	r3, #0
20006e64:	f040 808b 	bne.w	20006f7e <SystemCoreClockUpdate+0x136>
20006e68:	f248 0300 	movw	r3, #32768	; 0x8000
20006e6c:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20006e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20006e78:	617b      	str	r3, [r7, #20]
20006e7a:	697b      	ldr	r3, [r7, #20]
20006e7c:	2b00      	cmp	r3, #0
20006e7e:	d13f      	bne.n	20006f00 <SystemCoreClockUpdate+0xb8>
20006e80:	f247 53e0 	movw	r3, #30176	; 0x75e0
20006e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006e88:	f24e 1200 	movw	r2, #57600	; 0xe100
20006e8c:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006e90:	601a      	str	r2, [r3, #0]
20006e92:	f247 53e4 	movw	r3, #30180	; 0x75e4
20006e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006e9a:	f24e 1200 	movw	r2, #57600	; 0xe100
20006e9e:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006ea2:	601a      	str	r2, [r3, #0]
20006ea4:	f247 53e8 	movw	r3, #30184	; 0x75e8
20006ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006eac:	f24e 1200 	movw	r2, #57600	; 0xe100
20006eb0:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006eb4:	601a      	str	r2, [r3, #0]
20006eb6:	f247 53ec 	movw	r3, #30188	; 0x75ec
20006eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ebe:	f24f 0280 	movw	r2, #61568	; 0xf080
20006ec2:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20006ec6:	601a      	str	r2, [r3, #0]
20006ec8:	f247 53f0 	movw	r3, #30192	; 0x75f0
20006ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ed0:	f24e 1200 	movw	r2, #57600	; 0xe100
20006ed4:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006ed8:	601a      	str	r2, [r3, #0]
20006eda:	f247 53f4 	movw	r3, #30196	; 0x75f4
20006ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ee2:	f24e 1200 	movw	r2, #57600	; 0xe100
20006ee6:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006eea:	601a      	str	r2, [r3, #0]
20006eec:	f247 53f8 	movw	r3, #30200	; 0x75f8
20006ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ef4:	f24e 1200 	movw	r2, #57600	; 0xe100
20006ef8:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
20006efc:	601a      	str	r2, [r3, #0]
20006efe:	e045      	b.n	20006f8c <SystemCoreClockUpdate+0x144>
20006f00:	f247 5374 	movw	r3, #30068	; 0x7574
20006f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006f08:	f107 0204 	add.w	r2, r7, #4
20006f0c:	e893 0003 	ldmia.w	r3, {r0, r1}
20006f10:	e882 0003 	stmia.w	r2, {r0, r1}
20006f14:	f248 0300 	movw	r3, #32768	; 0x8000
20006f18:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
20006f20:	ea4f 1393 	mov.w	r3, r3, lsr #6
20006f24:	f003 0307 	and.w	r3, r3, #7
20006f28:	61bb      	str	r3, [r7, #24]
20006f2a:	69bb      	ldr	r3, [r7, #24]
20006f2c:	f107 0220 	add.w	r2, r7, #32
20006f30:	4413      	add	r3, r2
20006f32:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
20006f36:	77fb      	strb	r3, [r7, #31]
20006f38:	7ffb      	ldrb	r3, [r7, #31]
20006f3a:	2b01      	cmp	r3, #1
20006f3c:	d00b      	beq.n	20006f56 <SystemCoreClockUpdate+0x10e>
20006f3e:	2b02      	cmp	r3, #2
20006f40:	d00e      	beq.n	20006f60 <SystemCoreClockUpdate+0x118>
20006f42:	2b00      	cmp	r3, #0
20006f44:	d114      	bne.n	20006f70 <SystemCoreClockUpdate+0x128>
20006f46:	f000 f825 	bl	20006f94 <get_rcosc_25_50mhz_frequency>
20006f4a:	4603      	mov	r3, r0
20006f4c:	613b      	str	r3, [r7, #16]
20006f4e:	6938      	ldr	r0, [r7, #16]
20006f50:	f000 f842 	bl	20006fd8 <set_clock_frequency_globals>
20006f54:	e01a      	b.n	20006f8c <SystemCoreClockUpdate+0x144>
20006f56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20006f5a:	f000 f83d 	bl	20006fd8 <set_clock_frequency_globals>
20006f5e:	e015      	b.n	20006f8c <SystemCoreClockUpdate+0x144>
20006f60:	f244 2040 	movw	r0, #16960	; 0x4240
20006f64:	f2c0 000f 	movt	r0, #15
20006f68:	f000 f836 	bl	20006fd8 <set_clock_frequency_globals>
20006f6c:	bf00      	nop
20006f6e:	e00d      	b.n	20006f8c <SystemCoreClockUpdate+0x144>
20006f70:	f244 2040 	movw	r0, #16960	; 0x4240
20006f74:	f2c0 000f 	movt	r0, #15
20006f78:	f000 f82e 	bl	20006fd8 <set_clock_frequency_globals>
20006f7c:	e006      	b.n	20006f8c <SystemCoreClockUpdate+0x144>
20006f7e:	f000 f809 	bl	20006f94 <get_rcosc_25_50mhz_frequency>
20006f82:	4603      	mov	r3, r0
20006f84:	613b      	str	r3, [r7, #16]
20006f86:	6938      	ldr	r0, [r7, #16]
20006f88:	f000 f826 	bl	20006fd8 <set_clock_frequency_globals>
20006f8c:	f107 0720 	add.w	r7, r7, #32
20006f90:	46bd      	mov	sp, r7
20006f92:	bd80      	pop	{r7, pc}

20006f94 <get_rcosc_25_50mhz_frequency>:
20006f94:	b480      	push	{r7}
20006f96:	b083      	sub	sp, #12
20006f98:	af00      	add	r7, sp, #0
20006f9a:	f248 0300 	movw	r3, #32768	; 0x8000
20006f9e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20006fa2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
20006fa6:	f003 0304 	and.w	r3, r3, #4
20006faa:	603b      	str	r3, [r7, #0]
20006fac:	683b      	ldr	r3, [r7, #0]
20006fae:	2b00      	cmp	r3, #0
20006fb0:	d105      	bne.n	20006fbe <get_rcosc_25_50mhz_frequency+0x2a>
20006fb2:	f647 0340 	movw	r3, #30784	; 0x7840
20006fb6:	f2c0 137d 	movt	r3, #381	; 0x17d
20006fba:	607b      	str	r3, [r7, #4]
20006fbc:	e004      	b.n	20006fc8 <get_rcosc_25_50mhz_frequency+0x34>
20006fbe:	f24f 0380 	movw	r3, #61568	; 0xf080
20006fc2:	f2c0 23fa 	movt	r3, #762	; 0x2fa
20006fc6:	607b      	str	r3, [r7, #4]
20006fc8:	687b      	ldr	r3, [r7, #4]
20006fca:	4618      	mov	r0, r3
20006fcc:	f107 070c 	add.w	r7, r7, #12
20006fd0:	46bd      	mov	sp, r7
20006fd2:	bc80      	pop	{r7}
20006fd4:	4770      	bx	lr
20006fd6:	bf00      	nop

20006fd8 <set_clock_frequency_globals>:
20006fd8:	b480      	push	{r7}
20006fda:	b083      	sub	sp, #12
20006fdc:	af00      	add	r7, sp, #0
20006fde:	6078      	str	r0, [r7, #4]
20006fe0:	f247 53e0 	movw	r3, #30176	; 0x75e0
20006fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006fe8:	687a      	ldr	r2, [r7, #4]
20006fea:	601a      	str	r2, [r3, #0]
20006fec:	f247 53e4 	movw	r3, #30180	; 0x75e4
20006ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20006ff4:	687a      	ldr	r2, [r7, #4]
20006ff6:	601a      	str	r2, [r3, #0]
20006ff8:	f247 53e8 	movw	r3, #30184	; 0x75e8
20006ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007000:	687a      	ldr	r2, [r7, #4]
20007002:	601a      	str	r2, [r3, #0]
20007004:	f247 53ec 	movw	r3, #30188	; 0x75ec
20007008:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000700c:	f24f 0280 	movw	r2, #61568	; 0xf080
20007010:	f2c0 22fa 	movt	r2, #762	; 0x2fa
20007014:	601a      	str	r2, [r3, #0]
20007016:	f247 53f0 	movw	r3, #30192	; 0x75f0
2000701a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000701e:	687a      	ldr	r2, [r7, #4]
20007020:	601a      	str	r2, [r3, #0]
20007022:	f247 53f4 	movw	r3, #30196	; 0x75f4
20007026:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000702a:	687a      	ldr	r2, [r7, #4]
2000702c:	601a      	str	r2, [r3, #0]
2000702e:	f247 53f8 	movw	r3, #30200	; 0x75f8
20007032:	f2c2 0300 	movt	r3, #8192	; 0x2000
20007036:	687a      	ldr	r2, [r7, #4]
20007038:	601a      	str	r2, [r3, #0]
2000703a:	f107 070c 	add.w	r7, r7, #12
2000703e:	46bd      	mov	sp, r7
20007040:	bc80      	pop	{r7}
20007042:	4770      	bx	lr

20007044 <get_silicon_revision>:
20007044:	b480      	push	{r7}
20007046:	b083      	sub	sp, #12
20007048:	af00      	add	r7, sp, #0
2000704a:	f248 0300 	movw	r3, #32768	; 0x8000
2000704e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007052:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
20007056:	607b      	str	r3, [r7, #4]
20007058:	687a      	ldr	r2, [r7, #4]
2000705a:	f64f 0302 	movw	r3, #63490	; 0xf802
2000705e:	429a      	cmp	r2, r3
20007060:	d006      	beq.n	20007070 <get_silicon_revision+0x2c>
20007062:	f64f 0302 	movw	r3, #63490	; 0xf802
20007066:	f2c0 0301 	movt	r3, #1
2000706a:	429a      	cmp	r2, r3
2000706c:	d004      	beq.n	20007078 <get_silicon_revision+0x34>
2000706e:	e007      	b.n	20007080 <get_silicon_revision+0x3c>
20007070:	f04f 0301 	mov.w	r3, #1
20007074:	603b      	str	r3, [r7, #0]
20007076:	e006      	b.n	20007086 <get_silicon_revision+0x42>
20007078:	f04f 0302 	mov.w	r3, #2
2000707c:	603b      	str	r3, [r7, #0]
2000707e:	e002      	b.n	20007086 <get_silicon_revision+0x42>
20007080:	f04f 0300 	mov.w	r3, #0
20007084:	603b      	str	r3, [r7, #0]
20007086:	683b      	ldr	r3, [r7, #0]
20007088:	4618      	mov	r0, r3
2000708a:	f107 070c 	add.w	r7, r7, #12
2000708e:	46bd      	mov	sp, r7
20007090:	bc80      	pop	{r7}
20007092:	4770      	bx	lr

20007094 <silicon_workarounds>:
20007094:	b580      	push	{r7, lr}
20007096:	b082      	sub	sp, #8
20007098:	af00      	add	r7, sp, #0
2000709a:	f7ff ffd3 	bl	20007044 <get_silicon_revision>
2000709e:	4603      	mov	r3, r0
200070a0:	607b      	str	r3, [r7, #4]
200070a2:	687b      	ldr	r3, [r7, #4]
200070a4:	2b01      	cmp	r3, #1
200070a6:	d101      	bne.n	200070ac <silicon_workarounds+0x18>
200070a8:	f000 f804 	bl	200070b4 <m2s050_rev_a_workarounds>
200070ac:	f107 0708 	add.w	r7, r7, #8
200070b0:	46bd      	mov	sp, r7
200070b2:	bd80      	pop	{r7, pc}

200070b4 <m2s050_rev_a_workarounds>:
200070b4:	b480      	push	{r7}
200070b6:	af00      	add	r7, sp, #0
200070b8:	f248 0300 	movw	r3, #32768	; 0x8000
200070bc:	f2c4 0303 	movt	r3, #16387	; 0x4003
200070c0:	f248 0200 	movw	r2, #32768	; 0x8000
200070c4:	f2c4 0203 	movt	r2, #16387	; 0x4003
200070c8:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
200070cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200070d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
200070d4:	f248 0300 	movw	r3, #32768	; 0x8000
200070d8:	f2c4 0303 	movt	r3, #16387	; 0x4003
200070dc:	f248 0200 	movw	r2, #32768	; 0x8000
200070e0:	f2c4 0203 	movt	r2, #16387	; 0x4003
200070e4:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
200070e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
200070ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
200070f0:	46bd      	mov	sp, r7
200070f2:	bc80      	pop	{r7}
200070f4:	4770      	bx	lr
200070f6:	bf00      	nop

200070f8 <complete_clock_config>:
200070f8:	b480      	push	{r7}
200070fa:	b083      	sub	sp, #12
200070fc:	af00      	add	r7, sp, #0
200070fe:	f248 0300 	movw	r3, #32768	; 0x8000
20007102:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007106:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2000710a:	f003 0301 	and.w	r3, r3, #1
2000710e:	607b      	str	r3, [r7, #4]
20007110:	687b      	ldr	r3, [r7, #4]
20007112:	2b00      	cmp	r3, #0
20007114:	d0f3      	beq.n	200070fe <complete_clock_config+0x6>
20007116:	f248 0300 	movw	r3, #32768	; 0x8000
2000711a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000711e:	f248 0200 	movw	r2, #32768	; 0x8000
20007122:	f2c4 0203 	movt	r2, #16387	; 0x4003
20007126:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
2000712a:	f022 0201 	bic.w	r2, r2, #1
2000712e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
20007132:	f248 0300 	movw	r3, #32768	; 0x8000
20007136:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000713a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
2000713e:	f003 0302 	and.w	r3, r3, #2
20007142:	607b      	str	r3, [r7, #4]
20007144:	687b      	ldr	r3, [r7, #4]
20007146:	2b00      	cmp	r3, #0
20007148:	d0f3      	beq.n	20007132 <complete_clock_config+0x3a>
2000714a:	f248 0300 	movw	r3, #32768	; 0x8000
2000714e:	f2c4 0303 	movt	r3, #16387	; 0x4003
20007152:	f248 0200 	movw	r2, #32768	; 0x8000
20007156:	f2c4 0203 	movt	r2, #16387	; 0x4003
2000715a:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
2000715e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20007162:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
20007166:	f248 0300 	movw	r3, #32768	; 0x8000
2000716a:	f2c4 0303 	movt	r3, #16387	; 0x4003
2000716e:	f248 0200 	movw	r2, #32768	; 0x8000
20007172:	f2c4 0203 	movt	r2, #16387	; 0x4003
20007176:	6c92      	ldr	r2, [r2, #72]	; 0x48
20007178:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2000717c:	649a      	str	r2, [r3, #72]	; 0x48
2000717e:	f107 070c 	add.w	r7, r7, #12
20007182:	46bd      	mov	sp, r7
20007184:	bc80      	pop	{r7}
20007186:	4770      	bx	lr

20007188 <HAL_disable_interrupts>:
20007188:	f3ef 8010 	mrs	r0, PRIMASK
2000718c:	b672      	cpsid	i
2000718e:	4770      	bx	lr

20007190 <HAL_restore_interrupts>:
20007190:	f380 8810 	msr	PRIMASK, r0
20007194:	4770      	bx	lr

20007196 <HW_set_32bit_reg>:
20007196:	6001      	str	r1, [r0, #0]
20007198:	4770      	bx	lr

2000719a <HW_get_32bit_reg>:
2000719a:	6800      	ldr	r0, [r0, #0]
2000719c:	4770      	bx	lr

2000719e <HW_set_32bit_reg_field>:
2000719e:	b50e      	push	{r1, r2, r3, lr}
200071a0:	fa03 f301 	lsl.w	r3, r3, r1
200071a4:	ea03 0302 	and.w	r3, r3, r2
200071a8:	6801      	ldr	r1, [r0, #0]
200071aa:	ea6f 0202 	mvn.w	r2, r2
200071ae:	ea01 0102 	and.w	r1, r1, r2
200071b2:	ea41 0103 	orr.w	r1, r1, r3
200071b6:	6001      	str	r1, [r0, #0]
200071b8:	bd0e      	pop	{r1, r2, r3, pc}

200071ba <HW_get_32bit_reg_field>:
200071ba:	6800      	ldr	r0, [r0, #0]
200071bc:	ea00 0002 	and.w	r0, r0, r2
200071c0:	fa20 f001 	lsr.w	r0, r0, r1
200071c4:	4770      	bx	lr

200071c6 <HW_set_16bit_reg>:
200071c6:	8001      	strh	r1, [r0, #0]
200071c8:	4770      	bx	lr

200071ca <HW_get_16bit_reg>:
200071ca:	8800      	ldrh	r0, [r0, #0]
200071cc:	4770      	bx	lr

200071ce <HW_set_16bit_reg_field>:
200071ce:	b50e      	push	{r1, r2, r3, lr}
200071d0:	fa03 f301 	lsl.w	r3, r3, r1
200071d4:	ea03 0302 	and.w	r3, r3, r2
200071d8:	8801      	ldrh	r1, [r0, #0]
200071da:	ea6f 0202 	mvn.w	r2, r2
200071de:	ea01 0102 	and.w	r1, r1, r2
200071e2:	ea41 0103 	orr.w	r1, r1, r3
200071e6:	8001      	strh	r1, [r0, #0]
200071e8:	bd0e      	pop	{r1, r2, r3, pc}

200071ea <HW_get_16bit_reg_field>:
200071ea:	8800      	ldrh	r0, [r0, #0]
200071ec:	ea00 0002 	and.w	r0, r0, r2
200071f0:	fa20 f001 	lsr.w	r0, r0, r1
200071f4:	4770      	bx	lr

200071f6 <HW_set_8bit_reg>:
200071f6:	7001      	strb	r1, [r0, #0]
200071f8:	4770      	bx	lr

200071fa <HW_get_8bit_reg>:
200071fa:	7800      	ldrb	r0, [r0, #0]
200071fc:	4770      	bx	lr

200071fe <HW_set_8bit_reg_field>:
200071fe:	b50e      	push	{r1, r2, r3, lr}
20007200:	fa03 f301 	lsl.w	r3, r3, r1
20007204:	ea03 0302 	and.w	r3, r3, r2
20007208:	7801      	ldrb	r1, [r0, #0]
2000720a:	ea6f 0202 	mvn.w	r2, r2
2000720e:	ea01 0102 	and.w	r1, r1, r2
20007212:	ea41 0103 	orr.w	r1, r1, r3
20007216:	7001      	strb	r1, [r0, #0]
20007218:	bd0e      	pop	{r1, r2, r3, pc}

2000721a <HW_get_8bit_reg_field>:
2000721a:	7800      	ldrb	r0, [r0, #0]
2000721c:	ea00 0002 	and.w	r0, r0, r2
20007220:	fa20 f001 	lsr.w	r0, r0, r1
20007224:	4770      	bx	lr
	...

20007228 <__libc_init_array>:
20007228:	b570      	push	{r4, r5, r6, lr}
2000722a:	f247 5694 	movw	r6, #30100	; 0x7594
2000722e:	f247 5594 	movw	r5, #30100	; 0x7594
20007232:	f2c2 0600 	movt	r6, #8192	; 0x2000
20007236:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000723a:	1b76      	subs	r6, r6, r5
2000723c:	10b6      	asrs	r6, r6, #2
2000723e:	d006      	beq.n	2000724e <__libc_init_array+0x26>
20007240:	2400      	movs	r4, #0
20007242:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20007246:	3401      	adds	r4, #1
20007248:	4798      	blx	r3
2000724a:	42a6      	cmp	r6, r4
2000724c:	d8f9      	bhi.n	20007242 <__libc_init_array+0x1a>
2000724e:	f247 5594 	movw	r5, #30100	; 0x7594
20007252:	f247 5698 	movw	r6, #30104	; 0x7598
20007256:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000725a:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000725e:	1b76      	subs	r6, r6, r5
20007260:	f000 f98c 	bl	2000757c <_init>
20007264:	10b6      	asrs	r6, r6, #2
20007266:	d006      	beq.n	20007276 <__libc_init_array+0x4e>
20007268:	2400      	movs	r4, #0
2000726a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000726e:	3401      	adds	r4, #1
20007270:	4798      	blx	r3
20007272:	42a6      	cmp	r6, r4
20007274:	d8f9      	bhi.n	2000726a <__libc_init_array+0x42>
20007276:	bd70      	pop	{r4, r5, r6, pc}

20007278 <memcpy>:
20007278:	2a03      	cmp	r2, #3
2000727a:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
2000727e:	d80b      	bhi.n	20007298 <memcpy+0x20>
20007280:	b13a      	cbz	r2, 20007292 <memcpy+0x1a>
20007282:	2300      	movs	r3, #0
20007284:	f811 c003 	ldrb.w	ip, [r1, r3]
20007288:	f800 c003 	strb.w	ip, [r0, r3]
2000728c:	3301      	adds	r3, #1
2000728e:	4293      	cmp	r3, r2
20007290:	d1f8      	bne.n	20007284 <memcpy+0xc>
20007292:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
20007296:	4770      	bx	lr
20007298:	1882      	adds	r2, r0, r2
2000729a:	460c      	mov	r4, r1
2000729c:	4603      	mov	r3, r0
2000729e:	e003      	b.n	200072a8 <memcpy+0x30>
200072a0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
200072a4:	f803 1c01 	strb.w	r1, [r3, #-1]
200072a8:	f003 0603 	and.w	r6, r3, #3
200072ac:	4619      	mov	r1, r3
200072ae:	46a4      	mov	ip, r4
200072b0:	3301      	adds	r3, #1
200072b2:	3401      	adds	r4, #1
200072b4:	2e00      	cmp	r6, #0
200072b6:	d1f3      	bne.n	200072a0 <memcpy+0x28>
200072b8:	f01c 0403 	ands.w	r4, ip, #3
200072bc:	4663      	mov	r3, ip
200072be:	bf08      	it	eq
200072c0:	ebc1 0c02 	rsbeq	ip, r1, r2
200072c4:	d068      	beq.n	20007398 <memcpy+0x120>
200072c6:	4265      	negs	r5, r4
200072c8:	f1c4 0a04 	rsb	sl, r4, #4
200072cc:	eb0c 0705 	add.w	r7, ip, r5
200072d0:	4633      	mov	r3, r6
200072d2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
200072d6:	f85c 6005 	ldr.w	r6, [ip, r5]
200072da:	ea4f 08c4 	mov.w	r8, r4, lsl #3
200072de:	1a55      	subs	r5, r2, r1
200072e0:	e008      	b.n	200072f4 <memcpy+0x7c>
200072e2:	f857 4f04 	ldr.w	r4, [r7, #4]!
200072e6:	4626      	mov	r6, r4
200072e8:	fa04 f40a 	lsl.w	r4, r4, sl
200072ec:	ea49 0404 	orr.w	r4, r9, r4
200072f0:	50cc      	str	r4, [r1, r3]
200072f2:	3304      	adds	r3, #4
200072f4:	185c      	adds	r4, r3, r1
200072f6:	2d03      	cmp	r5, #3
200072f8:	fa26 f908 	lsr.w	r9, r6, r8
200072fc:	f1a5 0504 	sub.w	r5, r5, #4
20007300:	eb0c 0603 	add.w	r6, ip, r3
20007304:	dced      	bgt.n	200072e2 <memcpy+0x6a>
20007306:	2300      	movs	r3, #0
20007308:	e002      	b.n	20007310 <memcpy+0x98>
2000730a:	5cf1      	ldrb	r1, [r6, r3]
2000730c:	54e1      	strb	r1, [r4, r3]
2000730e:	3301      	adds	r3, #1
20007310:	1919      	adds	r1, r3, r4
20007312:	4291      	cmp	r1, r2
20007314:	d3f9      	bcc.n	2000730a <memcpy+0x92>
20007316:	e7bc      	b.n	20007292 <memcpy+0x1a>
20007318:	f853 4c40 	ldr.w	r4, [r3, #-64]
2000731c:	f841 4c40 	str.w	r4, [r1, #-64]
20007320:	f853 4c3c 	ldr.w	r4, [r3, #-60]
20007324:	f841 4c3c 	str.w	r4, [r1, #-60]
20007328:	f853 4c38 	ldr.w	r4, [r3, #-56]
2000732c:	f841 4c38 	str.w	r4, [r1, #-56]
20007330:	f853 4c34 	ldr.w	r4, [r3, #-52]
20007334:	f841 4c34 	str.w	r4, [r1, #-52]
20007338:	f853 4c30 	ldr.w	r4, [r3, #-48]
2000733c:	f841 4c30 	str.w	r4, [r1, #-48]
20007340:	f853 4c2c 	ldr.w	r4, [r3, #-44]
20007344:	f841 4c2c 	str.w	r4, [r1, #-44]
20007348:	f853 4c28 	ldr.w	r4, [r3, #-40]
2000734c:	f841 4c28 	str.w	r4, [r1, #-40]
20007350:	f853 4c24 	ldr.w	r4, [r3, #-36]
20007354:	f841 4c24 	str.w	r4, [r1, #-36]
20007358:	f853 4c20 	ldr.w	r4, [r3, #-32]
2000735c:	f841 4c20 	str.w	r4, [r1, #-32]
20007360:	f853 4c1c 	ldr.w	r4, [r3, #-28]
20007364:	f841 4c1c 	str.w	r4, [r1, #-28]
20007368:	f853 4c18 	ldr.w	r4, [r3, #-24]
2000736c:	f841 4c18 	str.w	r4, [r1, #-24]
20007370:	f853 4c14 	ldr.w	r4, [r3, #-20]
20007374:	f841 4c14 	str.w	r4, [r1, #-20]
20007378:	f853 4c10 	ldr.w	r4, [r3, #-16]
2000737c:	f841 4c10 	str.w	r4, [r1, #-16]
20007380:	f853 4c0c 	ldr.w	r4, [r3, #-12]
20007384:	f841 4c0c 	str.w	r4, [r1, #-12]
20007388:	f853 4c08 	ldr.w	r4, [r3, #-8]
2000738c:	f841 4c08 	str.w	r4, [r1, #-8]
20007390:	f853 4c04 	ldr.w	r4, [r3, #-4]
20007394:	f841 4c04 	str.w	r4, [r1, #-4]
20007398:	461c      	mov	r4, r3
2000739a:	460d      	mov	r5, r1
2000739c:	3340      	adds	r3, #64	; 0x40
2000739e:	3140      	adds	r1, #64	; 0x40
200073a0:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
200073a4:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
200073a8:	dcb6      	bgt.n	20007318 <memcpy+0xa0>
200073aa:	4621      	mov	r1, r4
200073ac:	462b      	mov	r3, r5
200073ae:	1b54      	subs	r4, r2, r5
200073b0:	e00f      	b.n	200073d2 <memcpy+0x15a>
200073b2:	f851 5c10 	ldr.w	r5, [r1, #-16]
200073b6:	f843 5c10 	str.w	r5, [r3, #-16]
200073ba:	f851 5c0c 	ldr.w	r5, [r1, #-12]
200073be:	f843 5c0c 	str.w	r5, [r3, #-12]
200073c2:	f851 5c08 	ldr.w	r5, [r1, #-8]
200073c6:	f843 5c08 	str.w	r5, [r3, #-8]
200073ca:	f851 5c04 	ldr.w	r5, [r1, #-4]
200073ce:	f843 5c04 	str.w	r5, [r3, #-4]
200073d2:	2c0f      	cmp	r4, #15
200073d4:	460d      	mov	r5, r1
200073d6:	469c      	mov	ip, r3
200073d8:	f101 0110 	add.w	r1, r1, #16
200073dc:	f103 0310 	add.w	r3, r3, #16
200073e0:	f1a4 0410 	sub.w	r4, r4, #16
200073e4:	dce5      	bgt.n	200073b2 <memcpy+0x13a>
200073e6:	ebcc 0102 	rsb	r1, ip, r2
200073ea:	2300      	movs	r3, #0
200073ec:	e003      	b.n	200073f6 <memcpy+0x17e>
200073ee:	58ec      	ldr	r4, [r5, r3]
200073f0:	f84c 4003 	str.w	r4, [ip, r3]
200073f4:	3304      	adds	r3, #4
200073f6:	195e      	adds	r6, r3, r5
200073f8:	2903      	cmp	r1, #3
200073fa:	eb03 040c 	add.w	r4, r3, ip
200073fe:	f1a1 0104 	sub.w	r1, r1, #4
20007402:	dcf4      	bgt.n	200073ee <memcpy+0x176>
20007404:	e77f      	b.n	20007306 <memcpy+0x8e>
20007406:	bf00      	nop

20007408 <memset>:
20007408:	2a03      	cmp	r2, #3
2000740a:	b2c9      	uxtb	r1, r1
2000740c:	b430      	push	{r4, r5}
2000740e:	d807      	bhi.n	20007420 <memset+0x18>
20007410:	b122      	cbz	r2, 2000741c <memset+0x14>
20007412:	2300      	movs	r3, #0
20007414:	54c1      	strb	r1, [r0, r3]
20007416:	3301      	adds	r3, #1
20007418:	4293      	cmp	r3, r2
2000741a:	d1fb      	bne.n	20007414 <memset+0xc>
2000741c:	bc30      	pop	{r4, r5}
2000741e:	4770      	bx	lr
20007420:	eb00 0c02 	add.w	ip, r0, r2
20007424:	4603      	mov	r3, r0
20007426:	e001      	b.n	2000742c <memset+0x24>
20007428:	f803 1c01 	strb.w	r1, [r3, #-1]
2000742c:	f003 0403 	and.w	r4, r3, #3
20007430:	461a      	mov	r2, r3
20007432:	3301      	adds	r3, #1
20007434:	2c00      	cmp	r4, #0
20007436:	d1f7      	bne.n	20007428 <memset+0x20>
20007438:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
2000743c:	ebc2 040c 	rsb	r4, r2, ip
20007440:	fb03 f301 	mul.w	r3, r3, r1
20007444:	e01f      	b.n	20007486 <memset+0x7e>
20007446:	f842 3c40 	str.w	r3, [r2, #-64]
2000744a:	f842 3c3c 	str.w	r3, [r2, #-60]
2000744e:	f842 3c38 	str.w	r3, [r2, #-56]
20007452:	f842 3c34 	str.w	r3, [r2, #-52]
20007456:	f842 3c30 	str.w	r3, [r2, #-48]
2000745a:	f842 3c2c 	str.w	r3, [r2, #-44]
2000745e:	f842 3c28 	str.w	r3, [r2, #-40]
20007462:	f842 3c24 	str.w	r3, [r2, #-36]
20007466:	f842 3c20 	str.w	r3, [r2, #-32]
2000746a:	f842 3c1c 	str.w	r3, [r2, #-28]
2000746e:	f842 3c18 	str.w	r3, [r2, #-24]
20007472:	f842 3c14 	str.w	r3, [r2, #-20]
20007476:	f842 3c10 	str.w	r3, [r2, #-16]
2000747a:	f842 3c0c 	str.w	r3, [r2, #-12]
2000747e:	f842 3c08 	str.w	r3, [r2, #-8]
20007482:	f842 3c04 	str.w	r3, [r2, #-4]
20007486:	4615      	mov	r5, r2
20007488:	3240      	adds	r2, #64	; 0x40
2000748a:	2c3f      	cmp	r4, #63	; 0x3f
2000748c:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20007490:	dcd9      	bgt.n	20007446 <memset+0x3e>
20007492:	462a      	mov	r2, r5
20007494:	ebc5 040c 	rsb	r4, r5, ip
20007498:	e007      	b.n	200074aa <memset+0xa2>
2000749a:	f842 3c10 	str.w	r3, [r2, #-16]
2000749e:	f842 3c0c 	str.w	r3, [r2, #-12]
200074a2:	f842 3c08 	str.w	r3, [r2, #-8]
200074a6:	f842 3c04 	str.w	r3, [r2, #-4]
200074aa:	4615      	mov	r5, r2
200074ac:	3210      	adds	r2, #16
200074ae:	2c0f      	cmp	r4, #15
200074b0:	f1a4 0410 	sub.w	r4, r4, #16
200074b4:	dcf1      	bgt.n	2000749a <memset+0x92>
200074b6:	462a      	mov	r2, r5
200074b8:	ebc5 050c 	rsb	r5, r5, ip
200074bc:	e001      	b.n	200074c2 <memset+0xba>
200074be:	f842 3c04 	str.w	r3, [r2, #-4]
200074c2:	4614      	mov	r4, r2
200074c4:	3204      	adds	r2, #4
200074c6:	2d03      	cmp	r5, #3
200074c8:	f1a5 0504 	sub.w	r5, r5, #4
200074cc:	dcf7      	bgt.n	200074be <memset+0xb6>
200074ce:	e001      	b.n	200074d4 <memset+0xcc>
200074d0:	f804 1b01 	strb.w	r1, [r4], #1
200074d4:	4564      	cmp	r4, ip
200074d6:	d3fb      	bcc.n	200074d0 <memset+0xc8>
200074d8:	e7a0      	b.n	2000741c <memset+0x14>
200074da:	bf00      	nop

200074dc <C.48.4660>:
200074dc:	6a10 0000                                   .j..

200074e0 <C.40.4595>:
200074e0:	6020 0000 6d63 5f64 6974 656d 0072 0000      `..cmd_timer...
200074f0:	4449 454c 0000 0000 2509 0963 7525 2509     IDLE.....%c.%u.%
20007500:	0975 7525 0a0d 0000 2509 0975 2509 2575     u.%u.....%u..%u%
20007510:	0d25 000a 2509 0975 3c09 2531 0d25 000a     %....%u..<1%%...
20007520:	6d54 2072 7653 0063                         Tmr Svc.

20007528 <xHeapStructSize>:
20007528:	0008 0000                                   ....

2000752c <pcInterruptPriorityRegisters>:
2000752c:	e3f0 e000 4b48 0000 6150 6c79 616f 0064     ....HK..Payload.
2000753c:	6175 7472 695f 7172 0000 0000 4c54 5f4d     uart_irq....TLM_
2000754c:	6154 6b73 545f 6d69 7265 0000 6553 646e     Task_Timer..Send
2000755c:	7265 545f 6d69 7265 0000 0000               er_Timer....

20007568 <C.136.6353>:
20007568:	0020 000f                                    ...

2000756c <C.137.6354>:
2000756c:	0030 0001                                   0...

20007570 <C.138.6355>:
20007570:	0028 0001                                   (...

20007574 <C.18.3459>:
20007574:	0100 0100 0202 0303                         ........

2000757c <_init>:
2000757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000757e:	bf00      	nop
20007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
20007582:	bc08      	pop	{r3}
20007584:	469e      	mov	lr, r3
20007586:	4770      	bx	lr

20007588 <_fini>:
20007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000758a:	bf00      	nop
2000758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000758e:	bc08      	pop	{r3}
20007590:	469e      	mov	lr, r3
20007592:	4770      	bx	lr

20007594 <__frame_dummy_init_array_entry>:
20007594:	0305 2000                                   ... 

20007598 <__do_global_dtors_aux_fini_array_entry>:
20007598:	02f1 2000                                   ... 
