
RTOSDemo:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         000002f0  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000074e8  a0000000  a0000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000060  a00074e8  a00074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00006b48  a0007548  a0007548  00017548  2**2
                  ALLOC
  4 .stack        00003000  a000e090  a000e090  00017548  2**0
                  ALLOC
  5 .comment      0000045e  00000000  00000000  00017548  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000bf0  00000000  00000000  000179a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001e65  00000000  00000000  00018596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000ef95  00000000  00000000  0001a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002529  00000000  00000000  00029390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00011f66  00000000  00000000  0002b8b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002790  00000000  00000000  0003d820  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004bf0  00000000  00000000  0003ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000418f  00000000  00000000  00044ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macinfo 000cd55d  00000000  00000000  00048d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .ARM.attributes 00000025  00000000  00000000  0011628c  2**0
                  CONTENTS, READONLY
 16 .debug_ranges 00000b80  00000000  00000000  001162b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

20000000 <__vector_table_vma_base_address>:
20000000:	a2000000 	.word	0xa2000000
20000004:	20000189 	.word	0x20000189
20000008:	200001f9 	.word	0x200001f9
2000000c:	200001fb 	.word	0x200001fb
20000010:	200001fd 	.word	0x200001fd
20000014:	200001ff 	.word	0x200001ff
20000018:	20000201 	.word	0x20000201
	...
2000002c:	a0004091 	.word	0xa0004091
20000030:	20000205 	.word	0x20000205
20000034:	00000000 	.word	0x00000000
20000038:	a00042c1 	.word	0xa00042c1
2000003c:	a0004311 	.word	0xa0004311
20000040:	2000020b 	.word	0x2000020b
20000044:	2000020d 	.word	0x2000020d
20000048:	2000020f 	.word	0x2000020f
2000004c:	20000211 	.word	0x20000211
20000050:	20000213 	.word	0x20000213
20000054:	20000215 	.word	0x20000215
20000058:	20000217 	.word	0x20000217
2000005c:	20000219 	.word	0x20000219
20000060:	2000021b 	.word	0x2000021b
20000064:	2000021d 	.word	0x2000021d
20000068:	a000556d 	.word	0xa000556d
2000006c:	a0005591 	.word	0xa0005591
20000070:	20000223 	.word	0x20000223
20000074:	20000225 	.word	0x20000225
20000078:	20000227 	.word	0x20000227
2000007c:	20000229 	.word	0x20000229
20000080:	2000022b 	.word	0x2000022b
20000084:	2000022d 	.word	0x2000022d
20000088:	2000022f 	.word	0x2000022f
2000008c:	20000231 	.word	0x20000231
20000090:	20000233 	.word	0x20000233
20000094:	20000235 	.word	0x20000235
20000098:	20000237 	.word	0x20000237
2000009c:	20000239 	.word	0x20000239
200000a0:	2000023b 	.word	0x2000023b
200000a4:	2000023d 	.word	0x2000023d
200000a8:	2000023f 	.word	0x2000023f
200000ac:	20000241 	.word	0x20000241
200000b0:	20000243 	.word	0x20000243
200000b4:	20000245 	.word	0x20000245
200000b8:	20000247 	.word	0x20000247
200000bc:	20000249 	.word	0x20000249
200000c0:	2000024b 	.word	0x2000024b
200000c4:	2000024d 	.word	0x2000024d
200000c8:	a00050bd 	.word	0xa00050bd
200000cc:	a00050d1 	.word	0xa00050d1
200000d0:	a00050e5 	.word	0xa00050e5
200000d4:	a00050f9 	.word	0xa00050f9
200000d8:	a000510d 	.word	0xa000510d
200000dc:	a0005121 	.word	0xa0005121
200000e0:	2000025b 	.word	0x2000025b
200000e4:	2000025d 	.word	0x2000025d
200000e8:	2000025f 	.word	0x2000025f
200000ec:	20000261 	.word	0x20000261
200000f0:	20000263 	.word	0x20000263
200000f4:	20000265 	.word	0x20000265
200000f8:	20000267 	.word	0x20000267
200000fc:	20000269 	.word	0x20000269
20000100:	2000026b 	.word	0x2000026b
20000104:	2000026d 	.word	0x2000026d
20000108:	2000026f 	.word	0x2000026f
2000010c:	20000271 	.word	0x20000271
20000110:	20000273 	.word	0x20000273
20000114:	20000275 	.word	0x20000275
20000118:	20000277 	.word	0x20000277
2000011c:	20000279 	.word	0x20000279
20000120:	2000027b 	.word	0x2000027b
20000124:	2000027d 	.word	0x2000027d
20000128:	2000027f 	.word	0x2000027f
2000012c:	20000281 	.word	0x20000281
20000130:	20000283 	.word	0x20000283
20000134:	20000285 	.word	0x20000285
20000138:	20000287 	.word	0x20000287
2000013c:	20000289 	.word	0x20000289
20000140:	2000028b 	.word	0x2000028b
20000144:	2000028d 	.word	0x2000028d
20000148:	2000028f 	.word	0x2000028f
2000014c:	20000291 	.word	0x20000291
20000150:	20000293 	.word	0x20000293
20000154:	20000295 	.word	0x20000295
20000158:	20000297 	.word	0x20000297
2000015c:	20000299 	.word	0x20000299
20000160:	2000029b 	.word	0x2000029b
20000164:	2000029d 	.word	0x2000029d
20000168:	2000029f 	.word	0x2000029f
2000016c:	200002a1 	.word	0x200002a1
20000170:	200002a3 	.word	0x200002a3
20000174:	200002a5 	.word	0x200002a5
20000178:	200002a7 	.word	0x200002a7
2000017c:	200002a9 	.word	0x200002a9
20000180:	200002ab 	.word	0x200002ab
20000184:	200002ad 	.word	0x200002ad

20000188 <Reset_Handler>:
20000188:	4849      	ldr	r0, [pc, #292]	; (200002b0 <mscc_post_hw_cfg_init+0x2>)
2000018a:	4780      	blx	r0
2000018c:	4849      	ldr	r0, [pc, #292]	; (200002b4 <mscc_post_hw_cfg_init+0x6>)
2000018e:	2800      	cmp	r0, #0
20000190:	d10b      	bne.n	200001aa <copy_data>
20000192:	4849      	ldr	r0, [pc, #292]	; (200002b8 <mscc_post_hw_cfg_init+0xa>)
20000194:	4949      	ldr	r1, [pc, #292]	; (200002bc <mscc_post_hw_cfg_init+0xe>)
20000196:	4a4a      	ldr	r2, [pc, #296]	; (200002c0 <mscc_post_hw_cfg_init+0x12>)
20000198:	4288      	cmp	r0, r1
2000019a:	d006      	beq.n	200001aa <copy_data>

2000019c <copy_code_loop>:
2000019c:	4291      	cmp	r1, r2
2000019e:	bf1c      	itt	ne
200001a0:	f850 3b04 	ldrne.w	r3, [r0], #4
200001a4:	f841 3b04 	strne.w	r3, [r1], #4
200001a8:	d1f8      	bne.n	2000019c <copy_code_loop>

200001aa <copy_data>:
200001aa:	4846      	ldr	r0, [pc, #280]	; (200002c4 <mscc_post_hw_cfg_init+0x16>)
200001ac:	4946      	ldr	r1, [pc, #280]	; (200002c8 <mscc_post_hw_cfg_init+0x1a>)
200001ae:	4a47      	ldr	r2, [pc, #284]	; (200002cc <mscc_post_hw_cfg_init+0x1e>)
200001b0:	4288      	cmp	r0, r1
200001b2:	d006      	beq.n	200001c2 <clear_bss>

200001b4 <copy_data_loop>:
200001b4:	4291      	cmp	r1, r2
200001b6:	bf1c      	itt	ne
200001b8:	f850 3b04 	ldrne.w	r3, [r0], #4
200001bc:	f841 3b04 	strne.w	r3, [r1], #4
200001c0:	d1f8      	bne.n	200001b4 <copy_data_loop>

200001c2 <clear_bss>:
200001c2:	4843      	ldr	r0, [pc, #268]	; (200002d0 <mscc_post_hw_cfg_init+0x22>)
200001c4:	4943      	ldr	r1, [pc, #268]	; (200002d4 <mscc_post_hw_cfg_init+0x26>)
200001c6:	4a44      	ldr	r2, [pc, #272]	; (200002d8 <mscc_post_hw_cfg_init+0x2a>)

200001c8 <clear_bss_loop>:
200001c8:	4291      	cmp	r1, r2
200001ca:	bf18      	it	ne
200001cc:	f841 0b04 	strne.w	r0, [r1], #4
200001d0:	d1fa      	bne.n	200001c8 <clear_bss_loop>
	...

200001e0 <call_glob_ctor>:
200001e0:	f8df 00f8 	ldr.w	r0, [pc, #248]	; 200002dc <mscc_post_hw_cfg_init+0x2e>
200001e4:	f20f 0e03 	addw	lr, pc, #3
200001e8:	4700      	bx	r0

200001ea <branch_to_main>:
200001ea:	f04f 0000 	mov.w	r0, #0
200001ee:	f04f 0100 	mov.w	r1, #0
200001f2:	f8df f0ec 	ldr.w	pc, [pc, #236]	; 200002e0 <mscc_post_hw_cfg_init+0x32>

200001f6 <ExitLoop>:
200001f6:	e7fe      	b.n	200001f6 <ExitLoop>

200001f8 <NMI_Handler>:
200001f8:	e7fe      	b.n	200001f8 <NMI_Handler>

200001fa <HardFault_Handler>:
200001fa:	e7fe      	b.n	200001fa <HardFault_Handler>

200001fc <MemManage_Handler>:
200001fc:	e7fe      	b.n	200001fc <MemManage_Handler>

200001fe <BusFault_Handler>:
200001fe:	e7fe      	b.n	200001fe <BusFault_Handler>

20000200 <UsageFault_Handler>:
20000200:	e7fe      	b.n	20000200 <UsageFault_Handler>
20000202:	e7fe      	b.n	20000202 <UsageFault_Handler+0x2>

20000204 <DebugMon_Handler>:
20000204:	e7fe      	b.n	20000204 <DebugMon_Handler>
20000206:	e7fe      	b.n	20000206 <DebugMon_Handler+0x2>
20000208:	e7fe      	b.n	20000208 <DebugMon_Handler+0x4>

2000020a <WdogWakeup_IRQHandler>:
2000020a:	e7fe      	b.n	2000020a <WdogWakeup_IRQHandler>

2000020c <RTC_Wakeup_IRQHandler>:
2000020c:	e7fe      	b.n	2000020c <RTC_Wakeup_IRQHandler>

2000020e <SPI0_IRQHandler>:
2000020e:	e7fe      	b.n	2000020e <SPI0_IRQHandler>

20000210 <SPI1_IRQHandler>:
20000210:	e7fe      	b.n	20000210 <SPI1_IRQHandler>

20000212 <I2C0_IRQHandler>:
20000212:	e7fe      	b.n	20000212 <I2C0_IRQHandler>

20000214 <I2C0_SMBAlert_IRQHandler>:
20000214:	e7fe      	b.n	20000214 <I2C0_SMBAlert_IRQHandler>

20000216 <I2C0_SMBus_IRQHandler>:
20000216:	e7fe      	b.n	20000216 <I2C0_SMBus_IRQHandler>

20000218 <I2C1_IRQHandler>:
20000218:	e7fe      	b.n	20000218 <I2C1_IRQHandler>

2000021a <I2C1_SMBAlert_IRQHandler>:
2000021a:	e7fe      	b.n	2000021a <I2C1_SMBAlert_IRQHandler>

2000021c <I2C1_SMBus_IRQHandler>:
2000021c:	e7fe      	b.n	2000021c <I2C1_SMBus_IRQHandler>
2000021e:	e7fe      	b.n	2000021e <I2C1_SMBus_IRQHandler+0x2>
20000220:	e7fe      	b.n	20000220 <I2C1_SMBus_IRQHandler+0x4>

20000222 <EthernetMAC_IRQHandler>:
20000222:	e7fe      	b.n	20000222 <EthernetMAC_IRQHandler>

20000224 <DMA_IRQHandler>:
20000224:	e7fe      	b.n	20000224 <DMA_IRQHandler>

20000226 <Timer1_IRQHandler>:
20000226:	e7fe      	b.n	20000226 <Timer1_IRQHandler>

20000228 <Timer2_IRQHandler>:
20000228:	e7fe      	b.n	20000228 <Timer2_IRQHandler>

2000022a <CAN_IRQHandler>:
2000022a:	e7fe      	b.n	2000022a <CAN_IRQHandler>

2000022c <ENVM0_IRQHandler>:
2000022c:	e7fe      	b.n	2000022c <ENVM0_IRQHandler>

2000022e <ENVM1_IRQHandler>:
2000022e:	e7fe      	b.n	2000022e <ENVM1_IRQHandler>

20000230 <ComBlk_IRQHandler>:
20000230:	e7fe      	b.n	20000230 <ComBlk_IRQHandler>

20000232 <USB_IRQHandler>:
20000232:	e7fe      	b.n	20000232 <USB_IRQHandler>

20000234 <USB_DMA_IRQHandler>:
20000234:	e7fe      	b.n	20000234 <USB_DMA_IRQHandler>

20000236 <PLL_Lock_IRQHandler>:
20000236:	e7fe      	b.n	20000236 <PLL_Lock_IRQHandler>

20000238 <PLL_LockLost_IRQHandler>:
20000238:	e7fe      	b.n	20000238 <PLL_LockLost_IRQHandler>

2000023a <CommSwitchError_IRQHandler>:
2000023a:	e7fe      	b.n	2000023a <CommSwitchError_IRQHandler>

2000023c <CacheError_IRQHandler>:
2000023c:	e7fe      	b.n	2000023c <CacheError_IRQHandler>

2000023e <DDR_IRQHandler>:
2000023e:	e7fe      	b.n	2000023e <DDR_IRQHandler>

20000240 <HPDMA_Complete_IRQHandler>:
20000240:	e7fe      	b.n	20000240 <HPDMA_Complete_IRQHandler>

20000242 <HPDMA_Error_IRQHandler>:
20000242:	e7fe      	b.n	20000242 <HPDMA_Error_IRQHandler>

20000244 <ECC_Error_IRQHandler>:
20000244:	e7fe      	b.n	20000244 <ECC_Error_IRQHandler>

20000246 <MDDR_IOCalib_IRQHandler>:
20000246:	e7fe      	b.n	20000246 <MDDR_IOCalib_IRQHandler>

20000248 <FAB_PLL_Lock_IRQHandler>:
20000248:	e7fe      	b.n	20000248 <FAB_PLL_Lock_IRQHandler>

2000024a <FAB_PLL_LockLost_IRQHandler>:
2000024a:	e7fe      	b.n	2000024a <FAB_PLL_LockLost_IRQHandler>

2000024c <FIC64_IRQHandler>:
2000024c:	e7fe      	b.n	2000024c <FIC64_IRQHandler>
2000024e:	e7fe      	b.n	2000024e <FIC64_IRQHandler+0x2>
20000250:	e7fe      	b.n	20000250 <FIC64_IRQHandler+0x4>
20000252:	e7fe      	b.n	20000252 <FIC64_IRQHandler+0x6>
20000254:	e7fe      	b.n	20000254 <FIC64_IRQHandler+0x8>
20000256:	e7fe      	b.n	20000256 <FIC64_IRQHandler+0xa>
20000258:	e7fe      	b.n	20000258 <FIC64_IRQHandler+0xc>

2000025a <FabricIrq6_IRQHandler>:
2000025a:	e7fe      	b.n	2000025a <FabricIrq6_IRQHandler>

2000025c <FabricIrq7_IRQHandler>:
2000025c:	e7fe      	b.n	2000025c <FabricIrq7_IRQHandler>

2000025e <FabricIrq8_IRQHandler>:
2000025e:	e7fe      	b.n	2000025e <FabricIrq8_IRQHandler>

20000260 <FabricIrq9_IRQHandler>:
20000260:	e7fe      	b.n	20000260 <FabricIrq9_IRQHandler>

20000262 <FabricIrq10_IRQHandler>:
20000262:	e7fe      	b.n	20000262 <FabricIrq10_IRQHandler>

20000264 <FabricIrq11_IRQHandler>:
20000264:	e7fe      	b.n	20000264 <FabricIrq11_IRQHandler>

20000266 <FabricIrq12_IRQHandler>:
20000266:	e7fe      	b.n	20000266 <FabricIrq12_IRQHandler>

20000268 <FabricIrq13_IRQHandler>:
20000268:	e7fe      	b.n	20000268 <FabricIrq13_IRQHandler>

2000026a <FabricIrq14_IRQHandler>:
2000026a:	e7fe      	b.n	2000026a <FabricIrq14_IRQHandler>

2000026c <FabricIrq15_IRQHandler>:
2000026c:	e7fe      	b.n	2000026c <FabricIrq15_IRQHandler>

2000026e <GPIO0_IRQHandler>:
2000026e:	e7fe      	b.n	2000026e <GPIO0_IRQHandler>

20000270 <GPIO1_IRQHandler>:
20000270:	e7fe      	b.n	20000270 <GPIO1_IRQHandler>

20000272 <GPIO2_IRQHandler>:
20000272:	e7fe      	b.n	20000272 <GPIO2_IRQHandler>

20000274 <GPIO3_IRQHandler>:
20000274:	e7fe      	b.n	20000274 <GPIO3_IRQHandler>

20000276 <GPIO4_IRQHandler>:
20000276:	e7fe      	b.n	20000276 <GPIO4_IRQHandler>

20000278 <GPIO5_IRQHandler>:
20000278:	e7fe      	b.n	20000278 <GPIO5_IRQHandler>

2000027a <GPIO6_IRQHandler>:
2000027a:	e7fe      	b.n	2000027a <GPIO6_IRQHandler>

2000027c <GPIO7_IRQHandler>:
2000027c:	e7fe      	b.n	2000027c <GPIO7_IRQHandler>

2000027e <GPIO8_IRQHandler>:
2000027e:	e7fe      	b.n	2000027e <GPIO8_IRQHandler>

20000280 <GPIO9_IRQHandler>:
20000280:	e7fe      	b.n	20000280 <GPIO9_IRQHandler>

20000282 <GPIO10_IRQHandler>:
20000282:	e7fe      	b.n	20000282 <GPIO10_IRQHandler>

20000284 <GPIO11_IRQHandler>:
20000284:	e7fe      	b.n	20000284 <GPIO11_IRQHandler>

20000286 <GPIO12_IRQHandler>:
20000286:	e7fe      	b.n	20000286 <GPIO12_IRQHandler>

20000288 <GPIO13_IRQHandler>:
20000288:	e7fe      	b.n	20000288 <GPIO13_IRQHandler>

2000028a <GPIO14_IRQHandler>:
2000028a:	e7fe      	b.n	2000028a <GPIO14_IRQHandler>

2000028c <GPIO15_IRQHandler>:
2000028c:	e7fe      	b.n	2000028c <GPIO15_IRQHandler>

2000028e <GPIO16_IRQHandler>:
2000028e:	e7fe      	b.n	2000028e <GPIO16_IRQHandler>

20000290 <GPIO17_IRQHandler>:
20000290:	e7fe      	b.n	20000290 <GPIO17_IRQHandler>

20000292 <GPIO18_IRQHandler>:
20000292:	e7fe      	b.n	20000292 <GPIO18_IRQHandler>

20000294 <GPIO19_IRQHandler>:
20000294:	e7fe      	b.n	20000294 <GPIO19_IRQHandler>

20000296 <GPIO20_IRQHandler>:
20000296:	e7fe      	b.n	20000296 <GPIO20_IRQHandler>

20000298 <GPIO21_IRQHandler>:
20000298:	e7fe      	b.n	20000298 <GPIO21_IRQHandler>

2000029a <GPIO22_IRQHandler>:
2000029a:	e7fe      	b.n	2000029a <GPIO22_IRQHandler>

2000029c <GPIO23_IRQHandler>:
2000029c:	e7fe      	b.n	2000029c <GPIO23_IRQHandler>

2000029e <GPIO24_IRQHandler>:
2000029e:	e7fe      	b.n	2000029e <GPIO24_IRQHandler>

200002a0 <GPIO25_IRQHandler>:
200002a0:	e7fe      	b.n	200002a0 <GPIO25_IRQHandler>

200002a2 <GPIO26_IRQHandler>:
200002a2:	e7fe      	b.n	200002a2 <GPIO26_IRQHandler>

200002a4 <GPIO27_IRQHandler>:
200002a4:	e7fe      	b.n	200002a4 <GPIO27_IRQHandler>

200002a6 <GPIO28_IRQHandler>:
200002a6:	e7fe      	b.n	200002a6 <GPIO28_IRQHandler>

200002a8 <GPIO29_IRQHandler>:
200002a8:	e7fe      	b.n	200002a8 <GPIO29_IRQHandler>

200002aa <GPIO30_IRQHandler>:
200002aa:	e7fe      	b.n	200002aa <GPIO30_IRQHandler>

200002ac <GPIO31_IRQHandler>:
200002ac:	e7fe      	b.n	200002ac <GPIO31_IRQHandler>

200002ae <mscc_post_hw_cfg_init>:
200002ae:	4770      	bx	lr
200002b0:	a0006d6d 	.word	0xa0006d6d
200002b4:	00000000 	.word	0x00000000
200002b8:	a0000000 	.word	0xa0000000
200002bc:	a0000000 	.word	0xa0000000
200002c0:	a00074e8 	.word	0xa00074e8
200002c4:	a00074e8 	.word	0xa00074e8
200002c8:	a00074e8 	.word	0xa00074e8
200002cc:	a0007548 	.word	0xa0007548
200002d0:	00000000 	.word	0x00000000
200002d4:	a0007548 	.word	0xa0007548
200002d8:	a000e090 	.word	0xa000e090
200002dc:	a0007179 	.word	0xa0007179
200002e0:	a000011d 	.word	0xa000011d
	...

Disassembly of section .text:

a0000000 <__do_global_dtors_aux>:
a0000000:	f247 5348 	movw	r3, #30024	; 0x7548
a0000004:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000008:	781a      	ldrb	r2, [r3, #0]
a000000a:	b90a      	cbnz	r2, a0000010 <__do_global_dtors_aux+0x10>
a000000c:	2001      	movs	r0, #1
a000000e:	7018      	strb	r0, [r3, #0]
a0000010:	4770      	bx	lr
a0000012:	bf00      	nop

a0000014 <frame_dummy>:
a0000014:	f247 40e8 	movw	r0, #29928	; 0x74e8
a0000018:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000001c:	b508      	push	{r3, lr}
a000001e:	6803      	ldr	r3, [r0, #0]
a0000020:	b12b      	cbz	r3, a000002e <frame_dummy+0x1a>
a0000022:	f240 0300 	movw	r3, #0
a0000026:	f2c0 0300 	movt	r3, #0
a000002a:	b103      	cbz	r3, a000002e <frame_dummy+0x1a>
a000002c:	4798      	blx	r3
a000002e:	bd08      	pop	{r3, pc}

a0000030 <vConfigureTimerForRunTimeStats>:
#define runtimeOVERFLOW_BIT_14		( 1UL << ( 32UL - runtimeSHIFT_14 ) )

/*-----------------------------------------------------------*/

void vConfigureTimerForRunTimeStats( void )
{
a0000030:	b480      	push	{r7}
a0000032:	af00      	add	r7, sp, #0
	/* Enable TRCENA. */
	rtsSCB_DEMCR = rtsSCB_DEMCR | rtsTRCENA_BIT;
a0000034:	f64e 53fc 	movw	r3, #60924	; 0xedfc
a0000038:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000003c:	f64e 52fc 	movw	r2, #60924	; 0xedfc
a0000040:	f2ce 0200 	movt	r2, #57344	; 0xe000
a0000044:	6812      	ldr	r2, [r2, #0]
a0000046:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
a000004a:	601a      	str	r2, [r3, #0]

	/* Reset counter. */
	rtsDWT_CYCCNT = 0;
a000004c:	f241 0304 	movw	r3, #4100	; 0x1004
a0000050:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0000054:	f04f 0200 	mov.w	r2, #0
a0000058:	601a      	str	r2, [r3, #0]

	/* Enable counter. */
	rtsDWT_CONTROL = rtsDWT_CONTROL | rtsCOUNTER_ENABLE_BIT;
a000005a:	f241 0300 	movw	r3, #4096	; 0x1000
a000005e:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0000062:	f241 0200 	movw	r2, #4096	; 0x1000
a0000066:	f2ce 0200 	movt	r2, #57344	; 0xe000
a000006a:	6812      	ldr	r2, [r2, #0]
a000006c:	f042 0201 	orr.w	r2, r2, #1
a0000070:	601a      	str	r2, [r3, #0]
}
a0000072:	46bd      	mov	sp, r7
a0000074:	bc80      	pop	{r7}
a0000076:	4770      	bx	lr

a0000078 <ulGetRunTimeCounterValue>:
/*-----------------------------------------------------------*/

uint32_t ulGetRunTimeCounterValue( void )
{
a0000078:	b480      	push	{r7}
a000007a:	b083      	sub	sp, #12
a000007c:	af00      	add	r7, sp, #0
static unsigned long ulLastCounterValue = 0UL, ulOverflows = 0;
unsigned long ulValueNow;

	ulValueNow = rtsDWT_CYCCNT;
a000007e:	f241 0304 	movw	r3, #4100	; 0x1004
a0000082:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0000086:	681b      	ldr	r3, [r3, #0]
a0000088:	607b      	str	r3, [r7, #4]

	/* Has the value overflowed since it was last read. */
	if( ulValueNow < ulLastCounterValue )
a000008a:	f247 534c 	movw	r3, #30028	; 0x754c
a000008e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000092:	681b      	ldr	r3, [r3, #0]
a0000094:	687a      	ldr	r2, [r7, #4]
a0000096:	429a      	cmp	r2, r3
a0000098:	d20b      	bcs.n	a00000b2 <ulGetRunTimeCounterValue+0x3a>
	{
		ulOverflows++;
a000009a:	f247 5350 	movw	r3, #30032	; 0x7550
a000009e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00000a2:	681b      	ldr	r3, [r3, #0]
a00000a4:	f103 0201 	add.w	r2, r3, #1
a00000a8:	f247 5350 	movw	r3, #30032	; 0x7550
a00000ac:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00000b0:	601a      	str	r2, [r3, #0]
	}
	ulLastCounterValue = ulValueNow;
a00000b2:	f247 534c 	movw	r3, #30028	; 0x754c
a00000b6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00000ba:	687a      	ldr	r2, [r7, #4]
a00000bc:	601a      	str	r2, [r3, #0]

	/* Cannot use configCPU_CLOCK_HZ directly as it may itself not be a constant
	but instead map to a variable that holds the clock speed. */

	/* There is no prescale on the counter, so simulate in software. */
	if( configCPU_CLOCK_HZ < runtimeSLOWER_CLOCK_SPEEDS )
a00000be:	f247 532c 	movw	r3, #29996	; 0x752c
a00000c2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00000c6:	681a      	ldr	r2, [r3, #0]
a00000c8:	f641 537f 	movw	r3, #7551	; 0x1d7f
a00000cc:	f2c0 432c 	movt	r3, #1068	; 0x42c
a00000d0:	429a      	cmp	r2, r3
a00000d2:	d80e      	bhi.n	a00000f2 <ulGetRunTimeCounterValue+0x7a>
	{
		ulValueNow >>= runtimeSHIFT_13;
a00000d4:	687b      	ldr	r3, [r7, #4]
a00000d6:	ea4f 3353 	mov.w	r3, r3, lsr #13
a00000da:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_13 * ulOverflows );
a00000dc:	f247 5350 	movw	r3, #30032	; 0x7550
a00000e0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00000e4:	681b      	ldr	r3, [r3, #0]
a00000e6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
a00000ea:	687a      	ldr	r2, [r7, #4]
a00000ec:	4413      	add	r3, r2
a00000ee:	607b      	str	r3, [r7, #4]
a00000f0:	e00d      	b.n	a000010e <ulGetRunTimeCounterValue+0x96>
	}
	else
	{
		ulValueNow >>= runtimeSHIFT_14;
a00000f2:	687b      	ldr	r3, [r7, #4]
a00000f4:	ea4f 3393 	mov.w	r3, r3, lsr #14
a00000f8:	607b      	str	r3, [r7, #4]
		ulValueNow += ( runtimeOVERFLOW_BIT_14 * ulOverflows );
a00000fa:	f247 5350 	movw	r3, #30032	; 0x7550
a00000fe:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000102:	681b      	ldr	r3, [r3, #0]
a0000104:	ea4f 4383 	mov.w	r3, r3, lsl #18
a0000108:	687a      	ldr	r2, [r7, #4]
a000010a:	4413      	add	r3, r2
a000010c:	607b      	str	r3, [r7, #4]
	}

	return ulValueNow;
a000010e:	687b      	ldr	r3, [r7, #4]
}
a0000110:	4618      	mov	r0, r3
a0000112:	f107 070c 	add.w	r7, r7, #12
a0000116:	46bd      	mov	sp, r7
a0000118:	bc80      	pop	{r7}
a000011a:	4770      	bx	lr

a000011c <main>:
/*-----------------------------------------------------------*/
/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
a000011c:	b580      	push	{r7, lr}
a000011e:	af00      	add	r7, sp, #0
		//main_blinky();


//		demo();

		demo_tasks();
a0000120:	f004 fe18 	bl	a0004d54 <demo_tasks>
//		uint8_t j = 0;
		//main_full();
	}
	#endif

	return 0;
a0000124:	f04f 0300 	mov.w	r3, #0
}
a0000128:	4618      	mov	r0, r3
a000012a:	bd80      	pop	{r7, pc}

a000012c <vApplicationMallocFailedHook>:
	//vParTestInitialise();
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
a000012c:	b480      	push	{r7}
a000012e:	b083      	sub	sp, #12
a0000130:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
a0000132:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0000136:	f383 8811 	msr	BASEPRI, r3
a000013a:	f3bf 8f6f 	isb	sy
a000013e:	f3bf 8f4f 	dsb	sy
a0000142:	607b      	str	r3, [r7, #4]
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
a0000144:	e7fe      	b.n	a0000144 <vApplicationMallocFailedHook+0x18>
a0000146:	bf00      	nop

a0000148 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
a0000148:	b480      	push	{r7}
a000014a:	af00      	add	r7, sp, #0
			}
		}
		#endif
	}
	#endif
}
a000014c:	46bd      	mov	sp, r7
a000014e:	bc80      	pop	{r7}
a0000150:	4770      	bx	lr
a0000152:	bf00      	nop

a0000154 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
a0000154:	b480      	push	{r7}
a0000156:	b085      	sub	sp, #20
a0000158:	af00      	add	r7, sp, #0
a000015a:	6078      	str	r0, [r7, #4]
a000015c:	6039      	str	r1, [r7, #0]
a000015e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0000162:	f383 8811 	msr	BASEPRI, r3
a0000166:	f3bf 8f6f 	isb	sy
a000016a:	f3bf 8f4f 	dsb	sy
a000016e:	60fb      	str	r3, [r7, #12]

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
a0000170:	e7fe      	b.n	a0000170 <vApplicationStackOverflowHook+0x1c>
a0000172:	bf00      	nop

a0000174 <set_pktRate>:

#include "stream.h"
#include "Demo_Tasks/demo_tasks.h"


void set_pktRate(pkt_name_t pn, uint8_t sr){
a0000174:	b480      	push	{r7}
a0000176:	b083      	sub	sp, #12
a0000178:	af00      	add	r7, sp, #0
a000017a:	4602      	mov	r2, r0
a000017c:	460b      	mov	r3, r1
a000017e:	71fa      	strb	r2, [r7, #7]
a0000180:	71bb      	strb	r3, [r7, #6]

	pkt_stream[pn].rate = sr * 1000;
a0000182:	79f9      	ldrb	r1, [r7, #7]
a0000184:	79bb      	ldrb	r3, [r7, #6]
a0000186:	461a      	mov	r2, r3
a0000188:	ea4f 1242 	mov.w	r2, r2, lsl #5
a000018c:	ebc3 0202 	rsb	r2, r3, r2
a0000190:	ea4f 0282 	mov.w	r2, r2, lsl #2
a0000194:	4413      	add	r3, r2
a0000196:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a000019a:	b298      	uxth	r0, r3
a000019c:	f64d 5250 	movw	r2, #56656	; 0xdd50
a00001a0:	f2ca 0200 	movt	r2, #40960	; 0xa000
a00001a4:	460b      	mov	r3, r1
a00001a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a00001aa:	440b      	add	r3, r1
a00001ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
a00001b0:	4413      	add	r3, r2
a00001b2:	f103 0310 	add.w	r3, r3, #16
a00001b6:	4602      	mov	r2, r0
a00001b8:	801a      	strh	r2, [r3, #0]

}
a00001ba:	f107 070c 	add.w	r7, r7, #12
a00001be:	46bd      	mov	sp, r7
a00001c0:	bc80      	pop	{r7}
a00001c2:	4770      	bx	lr

a00001c4 <get_IMU_acc>:


extern i2c_instance_t g_core_i2c5;
extern i2c_instance_t g_core_i2c2;

uint8_t get_IMU_acc(uint16_t *a_x,uint16_t *a_y,uint16_t *a_z) {
a00001c4:	b580      	push	{r7, lr}
a00001c6:	b092      	sub	sp, #72	; 0x48
a00001c8:	af04      	add	r7, sp, #16
a00001ca:	60f8      	str	r0, [r7, #12]
a00001cc:	60b9      	str	r1, [r7, #8]
a00001ce:	607a      	str	r2, [r7, #4]
	uint8_t write_CTRL_REG6_XL[2] = {0x20,0x60};
a00001d0:	f247 4330 	movw	r3, #29744	; 0x7430
a00001d4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00001d8:	881b      	ldrh	r3, [r3, #0]
a00001da:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t read_ACC_out_X_L[] = {0x28};
a00001dc:	f04f 0328 	mov.w	r3, #40	; 0x28
a00001e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t read_ACC_out_Y_L[] = {0x2A};
a00001e4:	f04f 032a 	mov.w	r3, #42	; 0x2a
a00001e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t read_ACC_out_Z_L[] = {0x2C};
a00001ec:	f04f 032c 	mov.w	r3, #44	; 0x2c
a00001f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t read_ACC_out_X_H[] = {0x29};
a00001f4:	f04f 0329 	mov.w	r3, #41	; 0x29
a00001f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t read_ACC_out_Y_H[] = {0x2B};
a00001fc:	f04f 032b 	mov.w	r3, #43	; 0x2b
a0000200:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t read_ACC_out_Z_H[] = {0x2D};
a0000204:	f04f 032d 	mov.w	r3, #45	; 0x2d
a0000208:	773b      	strb	r3, [r7, #28]
	uint8_t rx_buffer[1],rx_buffer_2[1];
	uint8_t result = 0;
a000020a:	f04f 0300 	mov.w	r3, #0
a000020e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	i2c_status_t status;

	I2C_write(&g_core_i2c5, IMU_ADDR, write_CTRL_REG6_XL, 2,I2C_RELEASE_BUS);
a0000212:	f107 0334 	add.w	r3, r7, #52	; 0x34
a0000216:	f04f 0200 	mov.w	r2, #0
a000021a:	9200      	str	r2, [sp, #0]
a000021c:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000220:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000224:	f04f 016a 	mov.w	r1, #106	; 0x6a
a0000228:	461a      	mov	r2, r3
a000022a:	f04f 0302 	mov.w	r3, #2
a000022e:	f005 fdd5 	bl	a0005ddc <I2C_write>

	I2C_read(&g_core_i2c5, IMU_ADDR, rx_buffer, 1, I2C_RELEASE_BUS);
a0000232:	f107 0318 	add.w	r3, r7, #24
a0000236:	f04f 0200 	mov.w	r2, #0
a000023a:	9200      	str	r2, [sp, #0]
a000023c:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000240:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000244:	f04f 016a 	mov.w	r1, #106	; 0x6a
a0000248:	461a      	mov	r2, r3
a000024a:	f04f 0301 	mov.w	r3, #1
a000024e:	f005 fe37 	bl	a0005ec0 <I2C_read>

//	I2C_write_read(&g_core_i2c5,IMU_ADDR,write_CTRL_REG6_XL,2,rx_buffer,
//					1,I2C_RELEASE_BUS);
	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a0000252:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000256:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000025a:	f04f 0100 	mov.w	r1, #0
a000025e:	f005 ff39 	bl	a00060d4 <I2C_wait_complete>
a0000262:	4603      	mov	r3, r0
a0000264:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
a0000268:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a000026c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a0000270:	4413      	add	r3, r2
a0000272:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_L,1,rx_buffer,
a0000276:	f107 0328 	add.w	r3, r7, #40	; 0x28
a000027a:	f107 0218 	add.w	r2, r7, #24
a000027e:	9200      	str	r2, [sp, #0]
a0000280:	f04f 0201 	mov.w	r2, #1
a0000284:	9201      	str	r2, [sp, #4]
a0000286:	f04f 0200 	mov.w	r2, #0
a000028a:	9202      	str	r2, [sp, #8]
a000028c:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000290:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000294:	f04f 016a 	mov.w	r1, #106	; 0x6a
a0000298:	461a      	mov	r2, r3
a000029a:	f04f 0301 	mov.w	r3, #1
a000029e:	f005 fe81 	bl	a0005fa4 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a00002a2:	f64d 6060 	movw	r0, #56928	; 0xde60
a00002a6:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00002aa:	f04f 0100 	mov.w	r1, #0
a00002ae:	f005 ff11 	bl	a00060d4 <I2C_wait_complete>
a00002b2:	4603      	mov	r3, r0
a00002b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
a00002b8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a00002bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a00002c0:	4413      	add	r3, r2
a00002c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Z_H,1,rx_buffer_2,
a00002c6:	f107 031c 	add.w	r3, r7, #28
a00002ca:	f107 0214 	add.w	r2, r7, #20
a00002ce:	9200      	str	r2, [sp, #0]
a00002d0:	f04f 0201 	mov.w	r2, #1
a00002d4:	9201      	str	r2, [sp, #4]
a00002d6:	f04f 0200 	mov.w	r2, #0
a00002da:	9202      	str	r2, [sp, #8]
a00002dc:	f64d 6060 	movw	r0, #56928	; 0xde60
a00002e0:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00002e4:	f04f 016a 	mov.w	r1, #106	; 0x6a
a00002e8:	461a      	mov	r2, r3
a00002ea:	f04f 0301 	mov.w	r3, #1
a00002ee:	f005 fe59 	bl	a0005fa4 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a00002f2:	f64d 6060 	movw	r0, #56928	; 0xde60
a00002f6:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00002fa:	f04f 0100 	mov.w	r1, #0
a00002fe:	f005 fee9 	bl	a00060d4 <I2C_wait_complete>
a0000302:	4603      	mov	r3, r0
a0000304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
a0000308:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a000030c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a0000310:	4413      	add	r3, r2
a0000312:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_z = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
a0000316:	7d3b      	ldrb	r3, [r7, #20]
a0000318:	ea4f 2303 	mov.w	r3, r3, lsl #8
a000031c:	b29a      	uxth	r2, r3
a000031e:	7e3b      	ldrb	r3, [r7, #24]
a0000320:	ea42 0303 	orr.w	r3, r2, r3
a0000324:	b29b      	uxth	r3, r3
a0000326:	b29a      	uxth	r2, r3
a0000328:	687b      	ldr	r3, [r7, #4]
a000032a:	801a      	strh	r2, [r3, #0]
	if((*a_z) > 32768) {
a000032c:	687b      	ldr	r3, [r7, #4]
a000032e:	881b      	ldrh	r3, [r3, #0]
a0000330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
a0000334:	d906      	bls.n	a0000344 <get_IMU_acc+0x180>
		*a_z = 65535-*a_z;
a0000336:	687b      	ldr	r3, [r7, #4]
a0000338:	881b      	ldrh	r3, [r3, #0]
a000033a:	ea6f 0303 	mvn.w	r3, r3
a000033e:	b29a      	uxth	r2, r3
a0000340:	687b      	ldr	r3, [r7, #4]
a0000342:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_L,1,rx_buffer,
a0000344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
a0000348:	f107 0218 	add.w	r2, r7, #24
a000034c:	9200      	str	r2, [sp, #0]
a000034e:	f04f 0201 	mov.w	r2, #1
a0000352:	9201      	str	r2, [sp, #4]
a0000354:	f04f 0200 	mov.w	r2, #0
a0000358:	9202      	str	r2, [sp, #8]
a000035a:	f64d 6060 	movw	r0, #56928	; 0xde60
a000035e:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000362:	f04f 016a 	mov.w	r1, #106	; 0x6a
a0000366:	461a      	mov	r2, r3
a0000368:	f04f 0301 	mov.w	r3, #1
a000036c:	f005 fe1a 	bl	a0005fa4 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a0000370:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000374:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000378:	f04f 0100 	mov.w	r1, #0
a000037c:	f005 feaa 	bl	a00060d4 <I2C_wait_complete>
a0000380:	4603      	mov	r3, r0
a0000382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
a0000386:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a000038a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a000038e:	4413      	add	r3, r2
a0000390:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_Y_H,1,rx_buffer_2,
a0000394:	f107 0320 	add.w	r3, r7, #32
a0000398:	f107 0214 	add.w	r2, r7, #20
a000039c:	9200      	str	r2, [sp, #0]
a000039e:	f04f 0201 	mov.w	r2, #1
a00003a2:	9201      	str	r2, [sp, #4]
a00003a4:	f04f 0200 	mov.w	r2, #0
a00003a8:	9202      	str	r2, [sp, #8]
a00003aa:	f64d 6060 	movw	r0, #56928	; 0xde60
a00003ae:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00003b2:	f04f 016a 	mov.w	r1, #106	; 0x6a
a00003b6:	461a      	mov	r2, r3
a00003b8:	f04f 0301 	mov.w	r3, #1
a00003bc:	f005 fdf2 	bl	a0005fa4 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a00003c0:	f64d 6060 	movw	r0, #56928	; 0xde60
a00003c4:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00003c8:	f04f 0100 	mov.w	r1, #0
a00003cc:	f005 fe82 	bl	a00060d4 <I2C_wait_complete>
a00003d0:	4603      	mov	r3, r0
a00003d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
a00003d6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a00003da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a00003de:	4413      	add	r3, r2
a00003e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_y = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
a00003e4:	7d3b      	ldrb	r3, [r7, #20]
a00003e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
a00003ea:	b29a      	uxth	r2, r3
a00003ec:	7e3b      	ldrb	r3, [r7, #24]
a00003ee:	ea42 0303 	orr.w	r3, r2, r3
a00003f2:	b29b      	uxth	r3, r3
a00003f4:	b29a      	uxth	r2, r3
a00003f6:	68bb      	ldr	r3, [r7, #8]
a00003f8:	801a      	strh	r2, [r3, #0]
	if((*a_y) > 32768) {
a00003fa:	68bb      	ldr	r3, [r7, #8]
a00003fc:	881b      	ldrh	r3, [r3, #0]
a00003fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
a0000402:	d906      	bls.n	a0000412 <get_IMU_acc+0x24e>
		*a_y = 65535-*a_y;
a0000404:	68bb      	ldr	r3, [r7, #8]
a0000406:	881b      	ldrh	r3, [r3, #0]
a0000408:	ea6f 0303 	mvn.w	r3, r3
a000040c:	b29a      	uxth	r2, r3
a000040e:	68bb      	ldr	r3, [r7, #8]
a0000410:	801a      	strh	r2, [r3, #0]
	}

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_L,1,rx_buffer,
a0000412:	f107 0330 	add.w	r3, r7, #48	; 0x30
a0000416:	f107 0218 	add.w	r2, r7, #24
a000041a:	9200      	str	r2, [sp, #0]
a000041c:	f04f 0201 	mov.w	r2, #1
a0000420:	9201      	str	r2, [sp, #4]
a0000422:	f04f 0200 	mov.w	r2, #0
a0000426:	9202      	str	r2, [sp, #8]
a0000428:	f64d 6060 	movw	r0, #56928	; 0xde60
a000042c:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000430:	f04f 016a 	mov.w	r1, #106	; 0x6a
a0000434:	461a      	mov	r2, r3
a0000436:	f04f 0301 	mov.w	r3, #1
a000043a:	f005 fdb3 	bl	a0005fa4 <I2C_write_read>


							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a000043e:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000442:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000446:	f04f 0100 	mov.w	r1, #0
a000044a:	f005 fe43 	bl	a00060d4 <I2C_wait_complete>
a000044e:	4603      	mov	r3, r0
a0000450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
a0000454:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a0000458:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a000045c:	4413      	add	r3, r2
a000045e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	I2C_write_read(&g_core_i2c5,IMU_ADDR,read_ACC_out_X_H,1,rx_buffer_2,
a0000462:	f107 0324 	add.w	r3, r7, #36	; 0x24
a0000466:	f107 0214 	add.w	r2, r7, #20
a000046a:	9200      	str	r2, [sp, #0]
a000046c:	f04f 0201 	mov.w	r2, #1
a0000470:	9201      	str	r2, [sp, #4]
a0000472:	f04f 0200 	mov.w	r2, #0
a0000476:	9202      	str	r2, [sp, #8]
a0000478:	f64d 6060 	movw	r0, #56928	; 0xde60
a000047c:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000480:	f04f 016a 	mov.w	r1, #106	; 0x6a
a0000484:	461a      	mov	r2, r3
a0000486:	f04f 0301 	mov.w	r3, #1
a000048a:	f005 fd8b 	bl	a0005fa4 <I2C_write_read>
							1,I2C_RELEASE_BUS);

	status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a000048e:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000492:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000496:	f04f 0100 	mov.w	r1, #0
a000049a:	f005 fe1b 	bl	a00060d4 <I2C_wait_complete>
a000049e:	4603      	mov	r3, r0
a00004a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	result+=status;
a00004a4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a00004a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a00004ac:	4413      	add	r3, r2
a00004ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	*a_x = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
a00004b2:	7d3b      	ldrb	r3, [r7, #20]
a00004b4:	ea4f 2303 	mov.w	r3, r3, lsl #8
a00004b8:	b29a      	uxth	r2, r3
a00004ba:	7e3b      	ldrb	r3, [r7, #24]
a00004bc:	ea42 0303 	orr.w	r3, r2, r3
a00004c0:	b29b      	uxth	r3, r3
a00004c2:	b29a      	uxth	r2, r3
a00004c4:	68fb      	ldr	r3, [r7, #12]
a00004c6:	801a      	strh	r2, [r3, #0]
	if((*a_x) > 32768) {
a00004c8:	68fb      	ldr	r3, [r7, #12]
a00004ca:	881b      	ldrh	r3, [r3, #0]
a00004cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
a00004d0:	d906      	bls.n	a00004e0 <get_IMU_acc+0x31c>
		*a_x = 65535-*a_x;
a00004d2:	68fb      	ldr	r3, [r7, #12]
a00004d4:	881b      	ldrh	r3, [r3, #0]
a00004d6:	ea6f 0303 	mvn.w	r3, r3
a00004da:	b29a      	uxth	r2, r3
a00004dc:	68fb      	ldr	r3, [r7, #12]
a00004de:	801a      	strh	r2, [r3, #0]
	}

	return status;
a00004e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

}
a00004e4:	4618      	mov	r0, r3
a00004e6:	f107 0738 	add.w	r7, r7, #56	; 0x38
a00004ea:	46bd      	mov	sp, r7
a00004ec:	bd80      	pop	{r7, pc}
a00004ee:	bf00      	nop

a00004f0 <get_IMU_gyro>:

uint8_t get_IMU_gyro(uint16_t *roll_rate, uint16_t *pitch_rate,uint16_t *yaw_rate) {
a00004f0:	b580      	push	{r7, lr}
a00004f2:	b092      	sub	sp, #72	; 0x48
a00004f4:	af04      	add	r7, sp, #16
a00004f6:	60f8      	str	r0, [r7, #12]
a00004f8:	60b9      	str	r1, [r7, #8]
a00004fa:	607a      	str	r2, [r7, #4]

	uint8_t write_CTRL_REG1_G[2] = {0x10,0x6A};
a00004fc:	f247 432c 	movw	r3, #29740	; 0x742c
a0000500:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000504:	881b      	ldrh	r3, [r3, #0]
a0000506:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t read_ACC_out_X_L[] = {0x18};
a0000508:	f04f 0318 	mov.w	r3, #24
a000050c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t read_ACC_out_Y_L[] = {0x1A};
a0000510:	f04f 031a 	mov.w	r3, #26
a0000514:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		uint8_t read_ACC_out_Z_L[] = {0x1C};
a0000518:	f04f 031c 	mov.w	r3, #28
a000051c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t read_ACC_out_X_H[] = {0x19};
a0000520:	f04f 0319 	mov.w	r3, #25
a0000524:	f887 3020 	strb.w	r3, [r7, #32]
		uint8_t read_ACC_out_Y_H[] = {0x1B};
a0000528:	f04f 031b 	mov.w	r3, #27
a000052c:	773b      	strb	r3, [r7, #28]
		uint8_t read_ACC_out_Z_H[] = {0x1D};
a000052e:	f04f 031d 	mov.w	r3, #29
a0000532:	763b      	strb	r3, [r7, #24]
		uint8_t IMU_slave_addr = 0x6a;
a0000534:	f04f 036a 	mov.w	r3, #106	; 0x6a
a0000538:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		uint8_t rx_buffer[1],rx_buffer_2[1];
		uint8_t result = 0,status;
a000053c:	f04f 0300 	mov.w	r3, #0
a0000540:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		I2C_write_read(&g_core_i2c5,IMU_slave_addr,write_CTRL_REG1_G,2,rx_buffer,
a0000544:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
a0000548:	f107 0330 	add.w	r3, r7, #48	; 0x30
a000054c:	f107 0114 	add.w	r1, r7, #20
a0000550:	9100      	str	r1, [sp, #0]
a0000552:	f04f 0101 	mov.w	r1, #1
a0000556:	9101      	str	r1, [sp, #4]
a0000558:	f04f 0100 	mov.w	r1, #0
a000055c:	9102      	str	r1, [sp, #8]
a000055e:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000562:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000566:	4611      	mov	r1, r2
a0000568:	461a      	mov	r2, r3
a000056a:	f04f 0302 	mov.w	r3, #2
a000056e:	f005 fd19 	bl	a0005fa4 <I2C_write_read>
						1,I2C_RELEASE_BUS);
		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a0000572:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000576:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000057a:	f04f 0100 	mov.w	r1, #0
a000057e:	f005 fda9 	bl	a00060d4 <I2C_wait_complete>
a0000582:	4603      	mov	r3, r0
a0000584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
a0000588:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a000058c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a0000590:	4413      	add	r3, r2
a0000592:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_L,1,rx_buffer,
a0000596:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
a000059a:	f107 0324 	add.w	r3, r7, #36	; 0x24
a000059e:	f107 0114 	add.w	r1, r7, #20
a00005a2:	9100      	str	r1, [sp, #0]
a00005a4:	f04f 0101 	mov.w	r1, #1
a00005a8:	9101      	str	r1, [sp, #4]
a00005aa:	f04f 0100 	mov.w	r1, #0
a00005ae:	9102      	str	r1, [sp, #8]
a00005b0:	f64d 6060 	movw	r0, #56928	; 0xde60
a00005b4:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00005b8:	4611      	mov	r1, r2
a00005ba:	461a      	mov	r2, r3
a00005bc:	f04f 0301 	mov.w	r3, #1
a00005c0:	f005 fcf0 	bl	a0005fa4 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a00005c4:	f64d 6060 	movw	r0, #56928	; 0xde60
a00005c8:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00005cc:	f04f 0100 	mov.w	r1, #0
a00005d0:	f005 fd80 	bl	a00060d4 <I2C_wait_complete>
a00005d4:	4603      	mov	r3, r0
a00005d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
a00005da:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a00005de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a00005e2:	4413      	add	r3, r2
a00005e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Z_H,1,rx_buffer_2,
a00005e8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
a00005ec:	f107 0318 	add.w	r3, r7, #24
a00005f0:	f107 0110 	add.w	r1, r7, #16
a00005f4:	9100      	str	r1, [sp, #0]
a00005f6:	f04f 0101 	mov.w	r1, #1
a00005fa:	9101      	str	r1, [sp, #4]
a00005fc:	f04f 0100 	mov.w	r1, #0
a0000600:	9102      	str	r1, [sp, #8]
a0000602:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000606:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000060a:	4611      	mov	r1, r2
a000060c:	461a      	mov	r2, r3
a000060e:	f04f 0301 	mov.w	r3, #1
a0000612:	f005 fcc7 	bl	a0005fa4 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a0000616:	f64d 6060 	movw	r0, #56928	; 0xde60
a000061a:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000061e:	f04f 0100 	mov.w	r1, #0
a0000622:	f005 fd57 	bl	a00060d4 <I2C_wait_complete>
a0000626:	4603      	mov	r3, r0
a0000628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
a000062c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a0000630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a0000634:	4413      	add	r3, r2
a0000636:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*roll_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
a000063a:	7c3b      	ldrb	r3, [r7, #16]
a000063c:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000640:	b29a      	uxth	r2, r3
a0000642:	7d3b      	ldrb	r3, [r7, #20]
a0000644:	ea42 0303 	orr.w	r3, r2, r3
a0000648:	b29b      	uxth	r3, r3
a000064a:	b29a      	uxth	r2, r3
a000064c:	68fb      	ldr	r3, [r7, #12]
a000064e:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_L,1,rx_buffer,
a0000650:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
a0000654:	f107 0328 	add.w	r3, r7, #40	; 0x28
a0000658:	f107 0114 	add.w	r1, r7, #20
a000065c:	9100      	str	r1, [sp, #0]
a000065e:	f04f 0101 	mov.w	r1, #1
a0000662:	9101      	str	r1, [sp, #4]
a0000664:	f04f 0100 	mov.w	r1, #0
a0000668:	9102      	str	r1, [sp, #8]
a000066a:	f64d 6060 	movw	r0, #56928	; 0xde60
a000066e:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000672:	4611      	mov	r1, r2
a0000674:	461a      	mov	r2, r3
a0000676:	f04f 0301 	mov.w	r3, #1
a000067a:	f005 fc93 	bl	a0005fa4 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a000067e:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000682:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000686:	f04f 0100 	mov.w	r1, #0
a000068a:	f005 fd23 	bl	a00060d4 <I2C_wait_complete>
a000068e:	4603      	mov	r3, r0
a0000690:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
a0000694:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a0000698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a000069c:	4413      	add	r3, r2
a000069e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_Y_H,1,rx_buffer_2,
a00006a2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
a00006a6:	f107 031c 	add.w	r3, r7, #28
a00006aa:	f107 0110 	add.w	r1, r7, #16
a00006ae:	9100      	str	r1, [sp, #0]
a00006b0:	f04f 0101 	mov.w	r1, #1
a00006b4:	9101      	str	r1, [sp, #4]
a00006b6:	f04f 0100 	mov.w	r1, #0
a00006ba:	9102      	str	r1, [sp, #8]
a00006bc:	f64d 6060 	movw	r0, #56928	; 0xde60
a00006c0:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00006c4:	4611      	mov	r1, r2
a00006c6:	461a      	mov	r2, r3
a00006c8:	f04f 0301 	mov.w	r3, #1
a00006cc:	f005 fc6a 	bl	a0005fa4 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a00006d0:	f64d 6060 	movw	r0, #56928	; 0xde60
a00006d4:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00006d8:	f04f 0100 	mov.w	r1, #0
a00006dc:	f005 fcfa 	bl	a00060d4 <I2C_wait_complete>
a00006e0:	4603      	mov	r3, r0
a00006e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
a00006e6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a00006ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a00006ee:	4413      	add	r3, r2
a00006f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*pitch_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
a00006f4:	7c3b      	ldrb	r3, [r7, #16]
a00006f6:	ea4f 2303 	mov.w	r3, r3, lsl #8
a00006fa:	b29a      	uxth	r2, r3
a00006fc:	7d3b      	ldrb	r3, [r7, #20]
a00006fe:	ea42 0303 	orr.w	r3, r2, r3
a0000702:	b29b      	uxth	r3, r3
a0000704:	b29a      	uxth	r2, r3
a0000706:	68bb      	ldr	r3, [r7, #8]
a0000708:	801a      	strh	r2, [r3, #0]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_L,1,rx_buffer,
a000070a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
a000070e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
a0000712:	f107 0114 	add.w	r1, r7, #20
a0000716:	9100      	str	r1, [sp, #0]
a0000718:	f04f 0101 	mov.w	r1, #1
a000071c:	9101      	str	r1, [sp, #4]
a000071e:	f04f 0100 	mov.w	r1, #0
a0000722:	9102      	str	r1, [sp, #8]
a0000724:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000728:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000072c:	4611      	mov	r1, r2
a000072e:	461a      	mov	r2, r3
a0000730:	f04f 0301 	mov.w	r3, #1
a0000734:	f005 fc36 	bl	a0005fa4 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a0000738:	f64d 6060 	movw	r0, #56928	; 0xde60
a000073c:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000740:	f04f 0100 	mov.w	r1, #0
a0000744:	f005 fcc6 	bl	a00060d4 <I2C_wait_complete>
a0000748:	4603      	mov	r3, r0
a000074a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
a000074e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a0000752:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a0000756:	4413      	add	r3, r2
a0000758:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_ACC_out_X_H,1,rx_buffer_2,
a000075c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
a0000760:	f107 0320 	add.w	r3, r7, #32
a0000764:	f107 0110 	add.w	r1, r7, #16
a0000768:	9100      	str	r1, [sp, #0]
a000076a:	f04f 0101 	mov.w	r1, #1
a000076e:	9101      	str	r1, [sp, #4]
a0000770:	f04f 0100 	mov.w	r1, #0
a0000774:	9102      	str	r1, [sp, #8]
a0000776:	f64d 6060 	movw	r0, #56928	; 0xde60
a000077a:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000077e:	4611      	mov	r1, r2
a0000780:	461a      	mov	r2, r3
a0000782:	f04f 0301 	mov.w	r3, #1
a0000786:	f005 fc0d 	bl	a0005fa4 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a000078a:	f64d 6060 	movw	r0, #56928	; 0xde60
a000078e:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000792:	f04f 0100 	mov.w	r1, #0
a0000796:	f005 fc9d 	bl	a00060d4 <I2C_wait_complete>
a000079a:	4603      	mov	r3, r0
a000079c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		result+=status;
a00007a0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
a00007a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
a00007a8:	4413      	add	r3, r2
a00007aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		*yaw_rate = ((rx_buffer_2[0] << 8) | rx_buffer[0]);
a00007ae:	7c3b      	ldrb	r3, [r7, #16]
a00007b0:	ea4f 2303 	mov.w	r3, r3, lsl #8
a00007b4:	b29a      	uxth	r2, r3
a00007b6:	7d3b      	ldrb	r3, [r7, #20]
a00007b8:	ea42 0303 	orr.w	r3, r2, r3
a00007bc:	b29b      	uxth	r3, r3
a00007be:	b29a      	uxth	r2, r3
a00007c0:	687b      	ldr	r3, [r7, #4]
a00007c2:	801a      	strh	r2, [r3, #0]

		return status;
a00007c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
a00007c8:	4618      	mov	r0, r3
a00007ca:	f107 0738 	add.w	r7, r7, #56	; 0x38
a00007ce:	46bd      	mov	sp, r7
a00007d0:	bd80      	pop	{r7, pc}
a00007d2:	bf00      	nop

a00007d4 <get_IMU_temp>:

uint8_t get_IMU_temp(uint16_t *temp) {
a00007d4:	b580      	push	{r7, lr}
a00007d6:	b08a      	sub	sp, #40	; 0x28
a00007d8:	af04      	add	r7, sp, #16
a00007da:	6078      	str	r0, [r7, #4]

		uint8_t read_temp_L[] = {0x15};
a00007dc:	f04f 0315 	mov.w	r3, #21
a00007e0:	753b      	strb	r3, [r7, #20]
		uint8_t read_temp_H[] = {0x16};
a00007e2:	f04f 0316 	mov.w	r3, #22
a00007e6:	743b      	strb	r3, [r7, #16]
		uint8_t IMU_slave_addr = 0x6a;
a00007e8:	f04f 036a 	mov.w	r3, #106	; 0x6a
a00007ec:	75bb      	strb	r3, [r7, #22]
		uint8_t rx_buffer[1],rx_buffer_2[1];
		i2c_status_t status;

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_L,1,rx_buffer,
a00007ee:	7dba      	ldrb	r2, [r7, #22]
a00007f0:	f107 0314 	add.w	r3, r7, #20
a00007f4:	f107 010c 	add.w	r1, r7, #12
a00007f8:	9100      	str	r1, [sp, #0]
a00007fa:	f04f 0101 	mov.w	r1, #1
a00007fe:	9101      	str	r1, [sp, #4]
a0000800:	f04f 0100 	mov.w	r1, #0
a0000804:	9102      	str	r1, [sp, #8]
a0000806:	f64d 6060 	movw	r0, #56928	; 0xde60
a000080a:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000080e:	4611      	mov	r1, r2
a0000810:	461a      	mov	r2, r3
a0000812:	f04f 0301 	mov.w	r3, #1
a0000816:	f005 fbc5 	bl	a0005fa4 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a000081a:	f64d 6060 	movw	r0, #56928	; 0xde60
a000081e:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000822:	f04f 0100 	mov.w	r1, #0
a0000826:	f005 fc55 	bl	a00060d4 <I2C_wait_complete>
a000082a:	4603      	mov	r3, r0
a000082c:	75fb      	strb	r3, [r7, #23]

		I2C_write_read(&g_core_i2c5,IMU_slave_addr,read_temp_H,1,rx_buffer_2,
a000082e:	7dba      	ldrb	r2, [r7, #22]
a0000830:	f107 0310 	add.w	r3, r7, #16
a0000834:	f107 0108 	add.w	r1, r7, #8
a0000838:	9100      	str	r1, [sp, #0]
a000083a:	f04f 0101 	mov.w	r1, #1
a000083e:	9101      	str	r1, [sp, #4]
a0000840:	f04f 0100 	mov.w	r1, #0
a0000844:	9102      	str	r1, [sp, #8]
a0000846:	f64d 6060 	movw	r0, #56928	; 0xde60
a000084a:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000084e:	4611      	mov	r1, r2
a0000850:	461a      	mov	r2, r3
a0000852:	f04f 0301 	mov.w	r3, #1
a0000856:	f005 fba5 	bl	a0005fa4 <I2C_write_read>
								1,I2C_RELEASE_BUS);

		status = I2C_wait_complete(&g_core_i2c5,I2C_NO_TIMEOUT);
a000085a:	f64d 6060 	movw	r0, #56928	; 0xde60
a000085e:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000862:	f04f 0100 	mov.w	r1, #0
a0000866:	f005 fc35 	bl	a00060d4 <I2C_wait_complete>
a000086a:	4603      	mov	r3, r0
a000086c:	75fb      	strb	r3, [r7, #23]

		*temp = (rx_buffer[0]) | (rx_buffer_2[0] << 8);
a000086e:	7b3b      	ldrb	r3, [r7, #12]
a0000870:	461a      	mov	r2, r3
a0000872:	7a3b      	ldrb	r3, [r7, #8]
a0000874:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000878:	b29b      	uxth	r3, r3
a000087a:	ea42 0303 	orr.w	r3, r2, r3
a000087e:	b29b      	uxth	r3, r3
a0000880:	b29a      	uxth	r2, r3
a0000882:	687b      	ldr	r3, [r7, #4]
a0000884:	801a      	strh	r2, [r3, #0]

		return 0;
a0000886:	f04f 0300 	mov.w	r3, #0

}
a000088a:	4618      	mov	r0, r3
a000088c:	f107 0718 	add.w	r7, r7, #24
a0000890:	46bd      	mov	sp, r7
a0000892:	bd80      	pop	{r7, pc}

a0000894 <vc_write>:
uint16_t init_command;
uint8_t config_reg;
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
a0000894:	b580      	push	{r7, lr}
a0000896:	b086      	sub	sp, #24
a0000898:	af02      	add	r7, sp, #8
a000089a:	60b9      	str	r1, [r7, #8]
a000089c:	4613      	mov	r3, r2
a000089e:	4602      	mov	r2, r0
a00008a0:	73fa      	strb	r2, [r7, #15]
a00008a2:	71fb      	strb	r3, [r7, #7]
     count = 0;
a00008a4:	f64d 5384 	movw	r3, #56708	; 0xdd84
a00008a8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00008ac:	f04f 0200 	mov.w	r2, #0
a00008b0:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
a00008b2:	e032      	b.n	a000091a <vc_write+0x86>
        I2C_write(VC_SENSOR_I2C,addr,tx,tx_size,I2C_RELEASE_BUS);
a00008b4:	79fb      	ldrb	r3, [r7, #7]
a00008b6:	7bfa      	ldrb	r2, [r7, #15]
a00008b8:	f04f 0100 	mov.w	r1, #0
a00008bc:	9100      	str	r1, [sp, #0]
a00008be:	f64d 00a0 	movw	r0, #55456	; 0xd8a0
a00008c2:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00008c6:	4611      	mov	r1, r2
a00008c8:	68ba      	ldr	r2, [r7, #8]
a00008ca:	f005 fa87 	bl	a0005ddc <I2C_write>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
a00008ce:	f64d 00a0 	movw	r0, #55456	; 0xd8a0
a00008d2:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00008d6:	f04f 0100 	mov.w	r1, #0
a00008da:	f005 fbfb 	bl	a00060d4 <I2C_wait_complete>
a00008de:	4603      	mov	r3, r0
a00008e0:	461a      	mov	r2, r3
a00008e2:	f64d 5386 	movw	r3, #56710	; 0xdd86
a00008e6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00008ea:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
a00008ec:	f64d 5386 	movw	r3, #56710	; 0xdd86
a00008f0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00008f4:	781b      	ldrb	r3, [r3, #0]
a00008f6:	2b00      	cmp	r3, #0
a00008f8:	d102      	bne.n	a0000900 <vc_write+0x6c>
            return 0;
a00008fa:	f04f 0300 	mov.w	r3, #0
a00008fe:	e018      	b.n	a0000932 <vc_write+0x9e>
        }
        count++;
a0000900:	f64d 5384 	movw	r3, #56708	; 0xdd84
a0000904:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000908:	781b      	ldrb	r3, [r3, #0]
a000090a:	f103 0301 	add.w	r3, r3, #1
a000090e:	b2da      	uxtb	r2, r3
a0000910:	f64d 5384 	movw	r3, #56708	; 0xdd84
a0000914:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000918:	701a      	strb	r2, [r3, #0]
i2c_status_t status;
uint8_t read[2];
uint16_t bvol;
uint8_t vc_write(uint8_t addr, uint8_t *tx, uint8_t tx_size) {
     count = 0;
    while(count < 10) {
a000091a:	f64d 5384 	movw	r3, #56708	; 0xdd84
a000091e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000922:	781b      	ldrb	r3, [r3, #0]
a0000924:	2b09      	cmp	r3, #9
a0000926:	d9c5      	bls.n	a00008b4 <vc_write+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
a0000928:	f64d 5384 	movw	r3, #56708	; 0xdd84
a000092c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000930:	781b      	ldrb	r3, [r3, #0]

}
a0000932:	4618      	mov	r0, r3
a0000934:	f107 0710 	add.w	r7, r7, #16
a0000938:	46bd      	mov	sp, r7
a000093a:	bd80      	pop	{r7, pc}

a000093c <vc_read>:

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
a000093c:	b580      	push	{r7, lr}
a000093e:	b086      	sub	sp, #24
a0000940:	af02      	add	r7, sp, #8
a0000942:	60b9      	str	r1, [r7, #8]
a0000944:	4613      	mov	r3, r2
a0000946:	4602      	mov	r2, r0
a0000948:	73fa      	strb	r2, [r7, #15]
a000094a:	71fb      	strb	r3, [r7, #7]
    count = 0;
a000094c:	f64d 5384 	movw	r3, #56708	; 0xdd84
a0000950:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000954:	f04f 0200 	mov.w	r2, #0
a0000958:	701a      	strb	r2, [r3, #0]
    while(count < 10) {
a000095a:	e032      	b.n	a00009c2 <vc_read+0x86>
        I2C_read(VC_SENSOR_I2C,addr,rx,rx_size,I2C_RELEASE_BUS);
a000095c:	79fb      	ldrb	r3, [r7, #7]
a000095e:	7bfa      	ldrb	r2, [r7, #15]
a0000960:	f04f 0100 	mov.w	r1, #0
a0000964:	9100      	str	r1, [sp, #0]
a0000966:	f64d 00a0 	movw	r0, #55456	; 0xd8a0
a000096a:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000096e:	4611      	mov	r1, r2
a0000970:	68ba      	ldr	r2, [r7, #8]
a0000972:	f005 faa5 	bl	a0005ec0 <I2C_read>
        status = I2C_wait_complete(VC_SENSOR_I2C,I2C_NO_TIMEOUT);
a0000976:	f64d 00a0 	movw	r0, #55456	; 0xd8a0
a000097a:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000097e:	f04f 0100 	mov.w	r1, #0
a0000982:	f005 fba7 	bl	a00060d4 <I2C_wait_complete>
a0000986:	4603      	mov	r3, r0
a0000988:	461a      	mov	r2, r3
a000098a:	f64d 5386 	movw	r3, #56710	; 0xdd86
a000098e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000992:	701a      	strb	r2, [r3, #0]
        if(status == I2C_SUCCESS) {
a0000994:	f64d 5386 	movw	r3, #56710	; 0xdd86
a0000998:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000099c:	781b      	ldrb	r3, [r3, #0]
a000099e:	2b00      	cmp	r3, #0
a00009a0:	d102      	bne.n	a00009a8 <vc_read+0x6c>
            return 0;
a00009a2:	f04f 0300 	mov.w	r3, #0
a00009a6:	e018      	b.n	a00009da <vc_read+0x9e>
        }
        count++;
a00009a8:	f64d 5384 	movw	r3, #56708	; 0xdd84
a00009ac:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00009b0:	781b      	ldrb	r3, [r3, #0]
a00009b2:	f103 0301 	add.w	r3, r3, #1
a00009b6:	b2da      	uxtb	r2, r3
a00009b8:	f64d 5384 	movw	r3, #56708	; 0xdd84
a00009bc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00009c0:	701a      	strb	r2, [r3, #0]

}

uint8_t vc_read(uint8_t addr, uint8_t *rx, uint8_t rx_size) {
    count = 0;
    while(count < 10) {
a00009c2:	f64d 5384 	movw	r3, #56708	; 0xdd84
a00009c6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00009ca:	781b      	ldrb	r3, [r3, #0]
a00009cc:	2b09      	cmp	r3, #9
a00009ce:	d9c5      	bls.n	a000095c <vc_read+0x20>
        if(status == I2C_SUCCESS) {
            return 0;
        }
        count++;
    }
    return count;
a00009d0:	f64d 5384 	movw	r3, #56708	; 0xdd84
a00009d4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00009d8:	781b      	ldrb	r3, [r3, #0]

}
a00009da:	4618      	mov	r0, r3
a00009dc:	f107 0710 	add.w	r7, r7, #16
a00009e0:	46bd      	mov	sp, r7
a00009e2:	bd80      	pop	{r7, pc}

a00009e4 <vc_read_reg>:

uint8_t vc_read_reg(uint8_t vc_addr, uint8_t reg_addr,uint8_t *rx) {
a00009e4:	b580      	push	{r7, lr}
a00009e6:	b082      	sub	sp, #8
a00009e8:	af00      	add	r7, sp, #0
a00009ea:	460b      	mov	r3, r1
a00009ec:	603a      	str	r2, [r7, #0]
a00009ee:	4602      	mov	r2, r0
a00009f0:	71fa      	strb	r2, [r7, #7]
a00009f2:	71bb      	strb	r3, [r7, #6]
    if((vc_write(vc_addr,&reg_addr,sizeof(reg_addr))) >= 10) {
a00009f4:	79fa      	ldrb	r2, [r7, #7]
a00009f6:	f107 0306 	add.w	r3, r7, #6
a00009fa:	4610      	mov	r0, r2
a00009fc:	4619      	mov	r1, r3
a00009fe:	f04f 0201 	mov.w	r2, #1
a0000a02:	f7ff ff47 	bl	a0000894 <vc_write>
a0000a06:	4603      	mov	r3, r0
a0000a08:	2b09      	cmp	r3, #9
a0000a0a:	d902      	bls.n	a0000a12 <vc_read_reg+0x2e>
        return 1;
a0000a0c:	f04f 0301 	mov.w	r3, #1
a0000a10:	e00e      	b.n	a0000a30 <vc_read_reg+0x4c>
    }
    if((vc_read(vc_addr,(uint8_t*)rx,2)) >= 10) {
a0000a12:	79fb      	ldrb	r3, [r7, #7]
a0000a14:	4618      	mov	r0, r3
a0000a16:	6839      	ldr	r1, [r7, #0]
a0000a18:	f04f 0202 	mov.w	r2, #2
a0000a1c:	f7ff ff8e 	bl	a000093c <vc_read>
a0000a20:	4603      	mov	r3, r0
a0000a22:	2b09      	cmp	r3, #9
a0000a24:	d902      	bls.n	a0000a2c <vc_read_reg+0x48>
        return 1;
a0000a26:	f04f 0301 	mov.w	r3, #1
a0000a2a:	e001      	b.n	a0000a30 <vc_read_reg+0x4c>
    }

    return 0;
a0000a2c:	f04f 0300 	mov.w	r3, #0
}
a0000a30:	4618      	mov	r0, r3
a0000a32:	f107 0708 	add.w	r7, r7, #8
a0000a36:	46bd      	mov	sp, r7
a0000a38:	bd80      	pop	{r7, pc}
a0000a3a:	bf00      	nop

a0000a3c <read_bus_voltage>:
    }

    return 0;
}

uint16_t read_bus_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
a0000a3c:	b580      	push	{r7, lr}
a0000a3e:	b082      	sub	sp, #8
a0000a40:	af00      	add	r7, sp, #0
a0000a42:	460b      	mov	r3, r1
a0000a44:	603a      	str	r2, [r7, #0]
a0000a46:	4602      	mov	r2, r0
a0000a48:	71fa      	strb	r2, [r7, #7]
a0000a4a:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
a0000a4c:	f64d 5380 	movw	r3, #56704	; 0xdd80
a0000a50:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000a54:	f04f 0200 	mov.w	r2, #0
a0000a58:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
a0000a5a:	f64d 5380 	movw	r3, #56704	; 0xdd80
a0000a5e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000a62:	f04f 0200 	mov.w	r2, #0
a0000a66:	705a      	strb	r2, [r3, #1]
	bvol = 0;
a0000a68:	f64d 5382 	movw	r3, #56706	; 0xdd82
a0000a6c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000a70:	f04f 0200 	mov.w	r2, #0
a0000a74:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_BUSV_CHx(chx),read) == 0) {
a0000a76:	79bb      	ldrb	r3, [r7, #6]
a0000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
a0000a7c:	b2db      	uxtb	r3, r3
a0000a7e:	79fa      	ldrb	r2, [r7, #7]
a0000a80:	4610      	mov	r0, r2
a0000a82:	4619      	mov	r1, r3
a0000a84:	f64d 5280 	movw	r2, #56704	; 0xdd80
a0000a88:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0000a8c:	f7ff ffaa 	bl	a00009e4 <vc_read_reg>
a0000a90:	4603      	mov	r3, r0
a0000a92:	2b00      	cmp	r3, #0
a0000a94:	d11a      	bne.n	a0000acc <read_bus_voltage+0x90>
		bvol = read[0]<<8 | read[1];
a0000a96:	f64d 5380 	movw	r3, #56704	; 0xdd80
a0000a9a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000a9e:	781b      	ldrb	r3, [r3, #0]
a0000aa0:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000aa4:	b29a      	uxth	r2, r3
a0000aa6:	f64d 5380 	movw	r3, #56704	; 0xdd80
a0000aaa:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000aae:	785b      	ldrb	r3, [r3, #1]
a0000ab0:	ea42 0303 	orr.w	r3, r2, r3
a0000ab4:	b29b      	uxth	r3, r3
a0000ab6:	b29a      	uxth	r2, r3
a0000ab8:	f64d 5382 	movw	r3, #56706	; 0xdd82
a0000abc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000ac0:	801a      	strh	r2, [r3, #0]
		*flag = 0;
a0000ac2:	683b      	ldr	r3, [r7, #0]
a0000ac4:	f04f 0200 	mov.w	r2, #0
a0000ac8:	701a      	strb	r2, [r3, #0]
a0000aca:	e00a      	b.n	a0000ae2 <read_bus_voltage+0xa6>

	} else {
		*flag = 1;
a0000acc:	683b      	ldr	r3, [r7, #0]
a0000ace:	f04f 0201 	mov.w	r2, #1
a0000ad2:	701a      	strb	r2, [r3, #0]
		bvol = 0;
a0000ad4:	f64d 5382 	movw	r3, #56706	; 0xdd82
a0000ad8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000adc:	f04f 0200 	mov.w	r2, #0
a0000ae0:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
a0000ae2:	f64d 5382 	movw	r3, #56706	; 0xdd82
a0000ae6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000aea:	881b      	ldrh	r3, [r3, #0]
}
a0000aec:	4618      	mov	r0, r3
a0000aee:	f107 0708 	add.w	r7, r7, #8
a0000af2:	46bd      	mov	sp, r7
a0000af4:	bd80      	pop	{r7, pc}
a0000af6:	bf00      	nop

a0000af8 <read_shunt_voltage>:

uint16_t read_shunt_voltage(uint8_t addr, uint8_t chx,uint8_t *flag) {
a0000af8:	b580      	push	{r7, lr}
a0000afa:	b082      	sub	sp, #8
a0000afc:	af00      	add	r7, sp, #0
a0000afe:	460b      	mov	r3, r1
a0000b00:	603a      	str	r2, [r7, #0]
a0000b02:	4602      	mov	r2, r0
a0000b04:	71fa      	strb	r2, [r7, #7]
a0000b06:	71bb      	strb	r3, [r7, #6]
	read[0] = 0;
a0000b08:	f64d 5380 	movw	r3, #56704	; 0xdd80
a0000b0c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000b10:	f04f 0200 	mov.w	r2, #0
a0000b14:	701a      	strb	r2, [r3, #0]
	read[1] = 0;
a0000b16:	f64d 5380 	movw	r3, #56704	; 0xdd80
a0000b1a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000b1e:	f04f 0200 	mov.w	r2, #0
a0000b22:	705a      	strb	r2, [r3, #1]
	bvol = 0;
a0000b24:	f64d 5382 	movw	r3, #56706	; 0xdd82
a0000b28:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000b2c:	f04f 0200 	mov.w	r2, #0
a0000b30:	801a      	strh	r2, [r3, #0]
	if(vc_read_reg(addr,VC_SHUNTV_CHx(chx),read) == 0) {
a0000b32:	79bb      	ldrb	r3, [r7, #6]
a0000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
a0000b38:	b2db      	uxtb	r3, r3
a0000b3a:	f103 33ff 	add.w	r3, r3, #4294967295
a0000b3e:	b2db      	uxtb	r3, r3
a0000b40:	79fa      	ldrb	r2, [r7, #7]
a0000b42:	4610      	mov	r0, r2
a0000b44:	4619      	mov	r1, r3
a0000b46:	f64d 5280 	movw	r2, #56704	; 0xdd80
a0000b4a:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0000b4e:	f7ff ff49 	bl	a00009e4 <vc_read_reg>
a0000b52:	4603      	mov	r3, r0
a0000b54:	2b00      	cmp	r3, #0
a0000b56:	d11a      	bne.n	a0000b8e <read_shunt_voltage+0x96>
		bvol = read[0]<<8 | read[1];
a0000b58:	f64d 5380 	movw	r3, #56704	; 0xdd80
a0000b5c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000b60:	781b      	ldrb	r3, [r3, #0]
a0000b62:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000b66:	b29a      	uxth	r2, r3
a0000b68:	f64d 5380 	movw	r3, #56704	; 0xdd80
a0000b6c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000b70:	785b      	ldrb	r3, [r3, #1]
a0000b72:	ea42 0303 	orr.w	r3, r2, r3
a0000b76:	b29b      	uxth	r3, r3
a0000b78:	b29a      	uxth	r2, r3
a0000b7a:	f64d 5382 	movw	r3, #56706	; 0xdd82
a0000b7e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000b82:	801a      	strh	r2, [r3, #0]
		*flag = 0;
a0000b84:	683b      	ldr	r3, [r7, #0]
a0000b86:	f04f 0200 	mov.w	r2, #0
a0000b8a:	701a      	strb	r2, [r3, #0]
a0000b8c:	e00a      	b.n	a0000ba4 <read_shunt_voltage+0xac>
	} else {
		*flag = 1;
a0000b8e:	683b      	ldr	r3, [r7, #0]
a0000b90:	f04f 0201 	mov.w	r2, #1
a0000b94:	701a      	strb	r2, [r3, #0]
		bvol = 0;
a0000b96:	f64d 5382 	movw	r3, #56706	; 0xdd82
a0000b9a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000b9e:	f04f 0200 	mov.w	r2, #0
a0000ba2:	801a      	strh	r2, [r3, #0]
	}
	return bvol;
a0000ba4:	f64d 5382 	movw	r3, #56706	; 0xdd82
a0000ba8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000bac:	881b      	ldrh	r3, [r3, #0]
}
a0000bae:	4618      	mov	r0, r3
a0000bb0:	f107 0708 	add.w	r7, r7, #8
a0000bb4:	46bd      	mov	sp, r7
a0000bb6:	bd80      	pop	{r7, pc}

a0000bb8 <get_ADC_value>:

uint16_t get_ADC_value(i2c_instance_t *i2c_chx,uint8_t address,uint8_t chx,uint8_t *flag) {
a0000bb8:	b580      	push	{r7, lr}
a0000bba:	b08c      	sub	sp, #48	; 0x30
a0000bbc:	af04      	add	r7, sp, #16
a0000bbe:	60f8      	str	r0, [r7, #12]
a0000bc0:	607b      	str	r3, [r7, #4]
a0000bc2:	460b      	mov	r3, r1
a0000bc4:	72fb      	strb	r3, [r7, #11]
a0000bc6:	4613      	mov	r3, r2
a0000bc8:	72bb      	strb	r3, [r7, #10]
	uint8_t adc_read_value[2];
	uint8_t ch_read[] = {chx};
a0000bca:	7abb      	ldrb	r3, [r7, #10]
a0000bcc:	753b      	strb	r3, [r7, #20]
	ch_read[0] |= 0x8;
a0000bce:	7d3b      	ldrb	r3, [r7, #20]
a0000bd0:	f043 0308 	orr.w	r3, r3, #8
a0000bd4:	b2db      	uxtb	r3, r3
a0000bd6:	753b      	strb	r3, [r7, #20]
	ch_read[0] = ch_read[0] << 4;
a0000bd8:	7d3b      	ldrb	r3, [r7, #20]
a0000bda:	ea4f 1303 	mov.w	r3, r3, lsl #4
a0000bde:	b2db      	uxtb	r3, r3
a0000be0:	753b      	strb	r3, [r7, #20]
	uint8_t status;
	uint16_t voltage;
	I2C_write_read(i2c_chx,address,ch_read,1,adc_read_value,2,I2C_RELEASE_BUS);
a0000be2:	7afa      	ldrb	r2, [r7, #11]
a0000be4:	f107 0314 	add.w	r3, r7, #20
a0000be8:	f107 0118 	add.w	r1, r7, #24
a0000bec:	9100      	str	r1, [sp, #0]
a0000bee:	f04f 0102 	mov.w	r1, #2
a0000bf2:	9101      	str	r1, [sp, #4]
a0000bf4:	f04f 0100 	mov.w	r1, #0
a0000bf8:	9102      	str	r1, [sp, #8]
a0000bfa:	68f8      	ldr	r0, [r7, #12]
a0000bfc:	4611      	mov	r1, r2
a0000bfe:	461a      	mov	r2, r3
a0000c00:	f04f 0301 	mov.w	r3, #1
a0000c04:	f005 f9ce 	bl	a0005fa4 <I2C_write_read>
	status = I2C_wait_complete(i2c_chx, I2C_NO_TIMEOUT);
a0000c08:	68f8      	ldr	r0, [r7, #12]
a0000c0a:	f04f 0100 	mov.w	r1, #0
a0000c0e:	f005 fa61 	bl	a00060d4 <I2C_wait_complete>
a0000c12:	4603      	mov	r3, r0
a0000c14:	777b      	strb	r3, [r7, #29]
	if(status != 0) {
a0000c16:	7f7b      	ldrb	r3, [r7, #29]
a0000c18:	2b00      	cmp	r3, #0
a0000c1a:	d004      	beq.n	a0000c26 <get_ADC_value+0x6e>
		*flag = 1;
a0000c1c:	687b      	ldr	r3, [r7, #4]
a0000c1e:	f04f 0201 	mov.w	r2, #1
a0000c22:	701a      	strb	r2, [r3, #0]
a0000c24:	e012      	b.n	a0000c4c <get_ADC_value+0x94>
	} else {
		voltage = (adc_read_value[0] << 8 ) | adc_read_value[1];
a0000c26:	7e3b      	ldrb	r3, [r7, #24]
a0000c28:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000c2c:	b29a      	uxth	r2, r3
a0000c2e:	7e7b      	ldrb	r3, [r7, #25]
a0000c30:	ea42 0303 	orr.w	r3, r2, r3
a0000c34:	b29b      	uxth	r3, r3
a0000c36:	83fb      	strh	r3, [r7, #30]
		voltage &= 0x0FFF;
a0000c38:	8bfb      	ldrh	r3, [r7, #30]
a0000c3a:	ea4f 5303 	mov.w	r3, r3, lsl #20
a0000c3e:	ea4f 5313 	mov.w	r3, r3, lsr #20
a0000c42:	83fb      	strh	r3, [r7, #30]
		*flag = 0;
a0000c44:	687b      	ldr	r3, [r7, #4]
a0000c46:	f04f 0200 	mov.w	r2, #0
a0000c4a:	701a      	strb	r2, [r3, #0]
	}
	return voltage;
a0000c4c:	8bfb      	ldrh	r3, [r7, #30]
}
a0000c4e:	4618      	mov	r0, r3
a0000c50:	f107 0720 	add.w	r7, r7, #32
a0000c54:	46bd      	mov	sp, r7
a0000c56:	bd80      	pop	{r7, pc}

a0000c58 <init>:
//
//imu_param-> {&g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
//
//}

void init(device_t d, void* command){
a0000c58:	b580      	push	{r7, lr}
a0000c5a:	b084      	sub	sp, #16
a0000c5c:	af00      	add	r7, sp, #0
a0000c5e:	4603      	mov	r3, r0
a0000c60:	6039      	str	r1, [r7, #0]
a0000c62:	71fb      	strb	r3, [r7, #7]

	if(d == imu){
a0000c64:	79fb      	ldrb	r3, [r7, #7]
a0000c66:	2b00      	cmp	r3, #0
a0000c68:	d10e      	bne.n	a0000c88 <init+0x30>
		imu_t* imu_pkt;
		imu_pkt = (imu_t*) command;
a0000c6a:	683b      	ldr	r3, [r7, #0]
a0000c6c:	60bb      	str	r3, [r7, #8]
//		void set_param();
		I2C_init(imu_pkt->g_core_i2c5, imu_pkt->Base_Addr, DUMMY_I2C_ADDR, imu_pkt->clck_speed);
a0000c6e:	68bb      	ldr	r3, [r7, #8]
a0000c70:	6859      	ldr	r1, [r3, #4]
a0000c72:	68bb      	ldr	r3, [r7, #8]
a0000c74:	689a      	ldr	r2, [r3, #8]
a0000c76:	68bb      	ldr	r3, [r7, #8]
a0000c78:	7b1b      	ldrb	r3, [r3, #12]
a0000c7a:	4608      	mov	r0, r1
a0000c7c:	4611      	mov	r1, r2
a0000c7e:	f04f 0288 	mov.w	r2, #136	; 0x88
a0000c82:	f005 f835 	bl	a0005cf0 <I2C_init>
a0000c86:	e030      	b.n	a0000cea <init+0x92>
	}
	else if(d == vc_sensor){
a0000c88:	79fb      	ldrb	r3, [r7, #7]
a0000c8a:	2b0a      	cmp	r3, #10
a0000c8c:	d10e      	bne.n	a0000cac <init+0x54>
		vc_sensor_t* vc_pkt;
		vc_pkt = (vc_sensor_t*) command;
a0000c8e:	683b      	ldr	r3, [r7, #0]
a0000c90:	60fb      	str	r3, [r7, #12]
		I2C_init(vc_pkt->g_core_i2c2, vc_pkt->Base_Addr, DUMMY_I2C_ADDR, vc_pkt->clck_speed);
a0000c92:	68fb      	ldr	r3, [r7, #12]
a0000c94:	6859      	ldr	r1, [r3, #4]
a0000c96:	68fb      	ldr	r3, [r7, #12]
a0000c98:	689a      	ldr	r2, [r3, #8]
a0000c9a:	68fb      	ldr	r3, [r7, #12]
a0000c9c:	7b1b      	ldrb	r3, [r3, #12]
a0000c9e:	4608      	mov	r0, r1
a0000ca0:	4611      	mov	r1, r2
a0000ca2:	f04f 0288 	mov.w	r2, #136	; 0x88
a0000ca6:	f005 f823 	bl	a0005cf0 <I2C_init>
a0000caa:	e01e      	b.n	a0000cea <init+0x92>
	}
	else if(d == all){
a0000cac:	79fb      	ldrb	r3, [r7, #7]
a0000cae:	2b0b      	cmp	r3, #11
a0000cb0:	d11b      	bne.n	a0000cea <init+0x92>
		I2C_init(&g_core_i2c5, COREI2C_5_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
a0000cb2:	f64d 6060 	movw	r0, #56928	; 0xde60
a0000cb6:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000cba:	f245 0100 	movw	r1, #20480	; 0x5000
a0000cbe:	f2c5 0100 	movt	r1, #20480	; 0x5000
a0000cc2:	f04f 0288 	mov.w	r2, #136	; 0x88
a0000cc6:	f04f 0300 	mov.w	r3, #0
a0000cca:	f005 f811 	bl	a0005cf0 <I2C_init>
		I2C_init(&g_core_i2c2, COREI2C_2_0, DUMMY_I2C_ADDR, I2C_PCLK_DIV_256);
a0000cce:	f64d 00a0 	movw	r0, #55456	; 0xd8a0
a0000cd2:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000cd6:	f242 0100 	movw	r1, #8192	; 0x2000
a0000cda:	f2c5 0100 	movt	r1, #20480	; 0x5000
a0000cde:	f04f 0288 	mov.w	r2, #136	; 0x88
a0000ce2:	f04f 0300 	mov.w	r3, #0
a0000ce6:	f005 f803 	bl	a0005cf0 <I2C_init>
	}
	else{

	}

}
a0000cea:	f107 0710 	add.w	r7, r7, #16
a0000cee:	46bd      	mov	sp, r7
a0000cf0:	bd80      	pop	{r7, pc}
a0000cf2:	bf00      	nop

a0000cf4 <xMsToTicks>:

	vTaskDelay(tick_for_time);

}

TickType_t xMsToTicks(uint16_t timems){
a0000cf4:	b480      	push	{r7}
a0000cf6:	b083      	sub	sp, #12
a0000cf8:	af00      	add	r7, sp, #0
a0000cfa:	4603      	mov	r3, r0
a0000cfc:	80fb      	strh	r3, [r7, #6]
	return pdMS_TO_TICKS(timems);
a0000cfe:	88fb      	ldrh	r3, [r7, #6]
a0000d00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
a0000d04:	fb02 f203 	mul.w	r2, r2, r3
a0000d08:	f644 53d3 	movw	r3, #19923	; 0x4dd3
a0000d0c:	f2c1 0362 	movt	r3, #4194	; 0x1062
a0000d10:	fba3 1302 	umull	r1, r3, r3, r2
a0000d14:	ea4f 1393 	mov.w	r3, r3, lsr #6
}
a0000d18:	4618      	mov	r0, r3
a0000d1a:	f107 070c 	add.w	r7, r7, #12
a0000d1e:	46bd      	mov	sp, r7
a0000d20:	bc80      	pop	{r7}
a0000d22:	4770      	bx	lr

a0000d24 <cmd_valid>:
// Function checking the CheckSUM
//void chk_sum();

cmd_t cmd_list[NUM_CMDS];

uint8_t cmd_valid(rx_cmd_t* rx_cmd){
a0000d24:	b480      	push	{r7}
a0000d26:	b083      	sub	sp, #12
a0000d28:	af00      	add	r7, sp, #0
a0000d2a:	6078      	str	r0, [r7, #4]
	return 1;  //Will be checking the validated of the checksum.
a0000d2c:	f04f 0301 	mov.w	r3, #1
}
a0000d30:	4618      	mov	r0, r3
a0000d32:	f107 070c 	add.w	r7, r7, #12
a0000d36:	46bd      	mov	sp, r7
a0000d38:	bc80      	pop	{r7}
a0000d3a:	4770      	bx	lr

a0000d3c <chk_s_cmd>:

uint8_t chk_s_cmd(rx_cmd_t* rx_cmd){
a0000d3c:	b480      	push	{r7}
a0000d3e:	b085      	sub	sp, #20
a0000d40:	af00      	add	r7, sp, #0
a0000d42:	6078      	str	r0, [r7, #4]
	uint16_t p;


	p = PILOT_REVERSE_BYTE_ORDER(rx_cmd->ccsds_cmd_p1);
a0000d44:	687b      	ldr	r3, [r7, #4]
a0000d46:	781a      	ldrb	r2, [r3, #0]
a0000d48:	785b      	ldrb	r3, [r3, #1]
a0000d4a:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000d4e:	ea43 0302 	orr.w	r3, r3, r2
a0000d52:	b29b      	uxth	r3, r3
a0000d54:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000d58:	b29a      	uxth	r2, r3
a0000d5a:	687b      	ldr	r3, [r7, #4]
a0000d5c:	7819      	ldrb	r1, [r3, #0]
a0000d5e:	785b      	ldrb	r3, [r3, #1]
a0000d60:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000d64:	ea43 0301 	orr.w	r3, r3, r1
a0000d68:	b29b      	uxth	r3, r3
a0000d6a:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0000d6e:	b29b      	uxth	r3, r3
a0000d70:	ea42 0303 	orr.w	r3, r2, r3
a0000d74:	b29b      	uxth	r3, r3
a0000d76:	81fb      	strh	r3, [r7, #14]


	cmd->length = p & 0x07FF;
a0000d78:	f64d 73c8 	movw	r3, #57288	; 0xdfc8
a0000d7c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000d80:	681a      	ldr	r2, [r3, #0]
a0000d82:	89fb      	ldrh	r3, [r7, #14]
a0000d84:	ea4f 5343 	mov.w	r3, r3, lsl #21
a0000d88:	ea4f 5353 	mov.w	r3, r3, lsr #21
a0000d8c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
a0000d90:	f04f 0000 	mov.w	r0, #0
a0000d94:	ea40 0101 	orr.w	r1, r0, r1
a0000d98:	7051      	strb	r1, [r2, #1]
a0000d9a:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0000d9e:	b29b      	uxth	r3, r3
a0000da0:	f04f 0100 	mov.w	r1, #0
a0000da4:	ea41 0303 	orr.w	r3, r1, r3
a0000da8:	7093      	strb	r3, [r2, #2]

	if( (p >> 11) & 0x01){
a0000daa:	89fb      	ldrh	r3, [r7, #14]
a0000dac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
a0000db0:	b29b      	uxth	r3, r3
a0000db2:	f003 0301 	and.w	r3, r3, #1
a0000db6:	b2db      	uxtb	r3, r3
a0000db8:	2b00      	cmp	r3, #0
a0000dba:	d002      	beq.n	a0000dc2 <chk_s_cmd+0x86>
		return 1;
a0000dbc:	f04f 0301 	mov.w	r3, #1
a0000dc0:	e001      	b.n	a0000dc6 <chk_s_cmd+0x8a>
	}
	else{
		return 0;
a0000dc2:	f04f 0300 	mov.w	r3, #0
	}
}
a0000dc6:	4618      	mov	r0, r3
a0000dc8:	f107 0714 	add.w	r7, r7, #20
a0000dcc:	46bd      	mov	sp, r7
a0000dce:	bc80      	pop	{r7}
a0000dd0:	4770      	bx	lr
a0000dd2:	bf00      	nop

a0000dd4 <add_cmd>:


void add_cmd(uint8_t id, uint16_t length, void (*ex_func)(uint8_t id, rx_cmd_t* rcv_cmd)){
a0000dd4:	b480      	push	{r7}
a0000dd6:	b083      	sub	sp, #12
a0000dd8:	af00      	add	r7, sp, #0
a0000dda:	460b      	mov	r3, r1
a0000ddc:	603a      	str	r2, [r7, #0]
a0000dde:	4602      	mov	r2, r0
a0000de0:	71fa      	strb	r2, [r7, #7]
a0000de2:	80bb      	strh	r3, [r7, #4]

	cmd_list[id].id = id;
a0000de4:	79f9      	ldrb	r1, [r7, #7]
a0000de6:	f64d 72b0 	movw	r2, #57264	; 0xdfb0
a0000dea:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0000dee:	460b      	mov	r3, r1
a0000df0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a0000df4:	ebc1 0303 	rsb	r3, r1, r3
a0000df8:	4413      	add	r3, r2
a0000dfa:	79fa      	ldrb	r2, [r7, #7]
a0000dfc:	701a      	strb	r2, [r3, #0]
	cmd_list[id].length = length;
a0000dfe:	79f9      	ldrb	r1, [r7, #7]
a0000e00:	f64d 72b0 	movw	r2, #57264	; 0xdfb0
a0000e04:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0000e08:	460b      	mov	r3, r1
a0000e0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a0000e0e:	ebc1 0303 	rsb	r3, r1, r3
a0000e12:	4413      	add	r3, r2
a0000e14:	793a      	ldrb	r2, [r7, #4]
a0000e16:	f04f 0100 	mov.w	r1, #0
a0000e1a:	ea41 0202 	orr.w	r2, r1, r2
a0000e1e:	705a      	strb	r2, [r3, #1]
a0000e20:	797a      	ldrb	r2, [r7, #5]
a0000e22:	f04f 0100 	mov.w	r1, #0
a0000e26:	ea41 0202 	orr.w	r2, r1, r2
a0000e2a:	709a      	strb	r2, [r3, #2]
	cmd_list[id].ex_func = ex_func;
a0000e2c:	79f8      	ldrb	r0, [r7, #7]
a0000e2e:	683a      	ldr	r2, [r7, #0]
a0000e30:	f64d 71b0 	movw	r1, #57264	; 0xdfb0
a0000e34:	f2ca 0100 	movt	r1, #40960	; 0xa000
a0000e38:	4603      	mov	r3, r0
a0000e3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a0000e3e:	ebc0 0303 	rsb	r3, r0, r3
a0000e42:	440b      	add	r3, r1
a0000e44:	f002 01ff 	and.w	r1, r2, #255	; 0xff
a0000e48:	f04f 0000 	mov.w	r0, #0
a0000e4c:	ea40 0101 	orr.w	r1, r0, r1
a0000e50:	70d9      	strb	r1, [r3, #3]
a0000e52:	ea4f 2112 	mov.w	r1, r2, lsr #8
a0000e56:	f001 01ff 	and.w	r1, r1, #255	; 0xff
a0000e5a:	f04f 0000 	mov.w	r0, #0
a0000e5e:	ea40 0101 	orr.w	r1, r0, r1
a0000e62:	7119      	strb	r1, [r3, #4]
a0000e64:	ea4f 4112 	mov.w	r1, r2, lsr #16
a0000e68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
a0000e6c:	f04f 0000 	mov.w	r0, #0
a0000e70:	ea40 0101 	orr.w	r1, r0, r1
a0000e74:	7159      	strb	r1, [r3, #5]
a0000e76:	ea4f 6212 	mov.w	r2, r2, lsr #24
a0000e7a:	f04f 0100 	mov.w	r1, #0
a0000e7e:	ea41 0202 	orr.w	r2, r1, r2
a0000e82:	719a      	strb	r2, [r3, #6]

}
a0000e84:	f107 070c 	add.w	r7, r7, #12
a0000e88:	46bd      	mov	sp, r7
a0000e8a:	bc80      	pop	{r7}
a0000e8c:	4770      	bx	lr
a0000e8e:	bf00      	nop

a0000e90 <vcmd_callback>:

void vcmd_callback(){
a0000e90:	b480      	push	{r7}
a0000e92:	af00      	add	r7, sp, #0
	//Execution for the timer based command
}
a0000e94:	46bd      	mov	sp, r7
a0000e96:	bc80      	pop	{r7}
a0000e98:	4770      	bx	lr
a0000e9a:	bf00      	nop

a0000e9c <cmd_engine>:

void cmd_engine(rx_cmd_t* rx_cmd){
a0000e9c:	b590      	push	{r4, r7, lr}
a0000e9e:	b085      	sub	sp, #20
a0000ea0:	af02      	add	r7, sp, #8
a0000ea2:	6078      	str	r0, [r7, #4]

	add_cmd(0, 16, cmd_noop);
a0000ea4:	f640 73a1 	movw	r3, #4001	; 0xfa1
a0000ea8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000eac:	f04f 0000 	mov.w	r0, #0
a0000eb0:	f04f 0110 	mov.w	r1, #16
a0000eb4:	461a      	mov	r2, r3
a0000eb6:	f7ff ff8d 	bl	a0000dd4 <add_cmd>
	add_cmd(1, 16, set_pkt_rate);   //the actual command apid's is one greater than this.
a0000eba:	f640 73b5 	movw	r3, #4021	; 0xfb5
a0000ebe:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000ec2:	f04f 0001 	mov.w	r0, #1
a0000ec6:	f04f 0110 	mov.w	r1, #16
a0000eca:	461a      	mov	r2, r3
a0000ecc:	f7ff ff82 	bl	a0000dd4 <add_cmd>

	if(chk_s_cmd(rx_cmd)){  //if the command is storable
a0000ed0:	6878      	ldr	r0, [r7, #4]
a0000ed2:	f7ff ff33 	bl	a0000d3c <chk_s_cmd>
a0000ed6:	4603      	mov	r3, r0
a0000ed8:	2b00      	cmp	r3, #0
a0000eda:	d037      	beq.n	a0000f4c <cmd_engine+0xb0>
		cmd_timer[0] = xTimerCreate("cmd_timer", pdMS_TO_TICKS(rx_cmd->ccsds_time), pdFALSE, (void*)0, vcmd_callback);
a0000edc:	687b      	ldr	r3, [r7, #4]
a0000ede:	791b      	ldrb	r3, [r3, #4]
a0000ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
a0000ee4:	fb02 f203 	mul.w	r2, r2, r3
a0000ee8:	f644 53d3 	movw	r3, #19923	; 0x4dd3
a0000eec:	f2c1 0362 	movt	r3, #4194	; 0x1062
a0000ef0:	fba3 1302 	umull	r1, r3, r3, r2
a0000ef4:	ea4f 1293 	mov.w	r2, r3, lsr #6
a0000ef8:	f640 6391 	movw	r3, #3729	; 0xe91
a0000efc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000f00:	9300      	str	r3, [sp, #0]
a0000f02:	f247 4034 	movw	r0, #29748	; 0x7434
a0000f06:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0000f0a:	4611      	mov	r1, r2
a0000f0c:	f04f 0200 	mov.w	r2, #0
a0000f10:	f04f 0300 	mov.w	r3, #0
a0000f14:	f002 fa82 	bl	a000341c <xTimerCreate>
a0000f18:	4602      	mov	r2, r0
a0000f1a:	f64d 73ac 	movw	r3, #57260	; 0xdfac
a0000f1e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000f22:	601a      	str	r2, [r3, #0]
		xTimerStart(cmd_timer[0], 0);
a0000f24:	f64d 73ac 	movw	r3, #57260	; 0xdfac
a0000f28:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000f2c:	681c      	ldr	r4, [r3, #0]
a0000f2e:	f001 fa63 	bl	a00023f8 <xTaskGetTickCount>
a0000f32:	4603      	mov	r3, r0
a0000f34:	f04f 0200 	mov.w	r2, #0
a0000f38:	9200      	str	r2, [sp, #0]
a0000f3a:	4620      	mov	r0, r4
a0000f3c:	f04f 0101 	mov.w	r1, #1
a0000f40:	461a      	mov	r2, r3
a0000f42:	f04f 0300 	mov.w	r3, #0
a0000f46:	f002 fabb 	bl	a00034c0 <xTimerGenericCommand>
a0000f4a:	e025      	b.n	a0000f98 <cmd_engine+0xfc>
	}
	else{
		 //Commands needs to be executed right now.
//		add_cmd(rx_cmd->ccsds_APID, cmd->length, cmd_list[rx_cmd->ccsds_APID].ex_func(rx_cmd->ccsds_APID, rx_cmd->parameters, cmd->length));
		cmd_list[rx_cmd->ccsds_APID - 1].ex_func(rx_cmd);
a0000f4c:	687b      	ldr	r3, [r7, #4]
a0000f4e:	789a      	ldrb	r2, [r3, #2]
a0000f50:	78db      	ldrb	r3, [r3, #3]
a0000f52:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0000f56:	ea43 0302 	orr.w	r3, r3, r2
a0000f5a:	b29b      	uxth	r3, r3
a0000f5c:	f103 31ff 	add.w	r1, r3, #4294967295
a0000f60:	f64d 72b0 	movw	r2, #57264	; 0xdfb0
a0000f64:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0000f68:	460b      	mov	r3, r1
a0000f6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a0000f6e:	ebc1 0303 	rsb	r3, r1, r3
a0000f72:	4413      	add	r3, r2
a0000f74:	78da      	ldrb	r2, [r3, #3]
a0000f76:	7919      	ldrb	r1, [r3, #4]
a0000f78:	ea4f 2101 	mov.w	r1, r1, lsl #8
a0000f7c:	ea41 0202 	orr.w	r2, r1, r2
a0000f80:	7959      	ldrb	r1, [r3, #5]
a0000f82:	ea4f 4101 	mov.w	r1, r1, lsl #16
a0000f86:	ea41 0202 	orr.w	r2, r1, r2
a0000f8a:	799b      	ldrb	r3, [r3, #6]
a0000f8c:	ea4f 6303 	mov.w	r3, r3, lsl #24
a0000f90:	ea43 0302 	orr.w	r3, r3, r2
a0000f94:	6878      	ldr	r0, [r7, #4]
a0000f96:	4798      	blx	r3
	}

}
a0000f98:	f107 070c 	add.w	r7, r7, #12
a0000f9c:	46bd      	mov	sp, r7
a0000f9e:	bd90      	pop	{r4, r7, pc}

a0000fa0 <cmd_noop>:

// Commands Definition

void cmd_noop(rx_cmd_t* rcv_cmd){
a0000fa0:	b480      	push	{r7}
a0000fa2:	b085      	sub	sp, #20
a0000fa4:	af00      	add	r7, sp, #0
a0000fa6:	6078      	str	r0, [r7, #4]

	uint8_t a;

}
a0000fa8:	f107 0714 	add.w	r7, r7, #20
a0000fac:	46bd      	mov	sp, r7
a0000fae:	bc80      	pop	{r7}
a0000fb0:	4770      	bx	lr
a0000fb2:	bf00      	nop

a0000fb4 <set_pkt_rate>:

void set_pkt_rate(rx_cmd_t* rcv_cmd){
a0000fb4:	b590      	push	{r4, r7, lr}
a0000fb6:	b085      	sub	sp, #20
a0000fb8:	af02      	add	r7, sp, #8
a0000fba:	6078      	str	r0, [r7, #4]

	if(rcv_cmd->parameters[1] != 0){
a0000fbc:	687b      	ldr	r3, [r7, #4]
a0000fbe:	79db      	ldrb	r3, [r3, #7]
a0000fc0:	2b00      	cmp	r3, #0
a0000fc2:	d025      	beq.n	a0001010 <set_pkt_rate+0x5c>
		xTimerChangePeriod(pkt_timer[rcv_cmd->parameters[0]], xMsToTicks(rcv_cmd->parameters[1] * 1000), 0);
a0000fc4:	687b      	ldr	r3, [r7, #4]
a0000fc6:	799b      	ldrb	r3, [r3, #6]
a0000fc8:	461a      	mov	r2, r3
a0000fca:	f64d 5374 	movw	r3, #56692	; 0xdd74
a0000fce:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0000fd2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
a0000fd6:	687b      	ldr	r3, [r7, #4]
a0000fd8:	79db      	ldrb	r3, [r3, #7]
a0000fda:	461a      	mov	r2, r3
a0000fdc:	ea4f 1242 	mov.w	r2, r2, lsl #5
a0000fe0:	ebc3 0202 	rsb	r2, r3, r2
a0000fe4:	ea4f 0282 	mov.w	r2, r2, lsl #2
a0000fe8:	4413      	add	r3, r2
a0000fea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a0000fee:	b29b      	uxth	r3, r3
a0000ff0:	4618      	mov	r0, r3
a0000ff2:	f7ff fe7f 	bl	a0000cf4 <xMsToTicks>
a0000ff6:	4603      	mov	r3, r0
a0000ff8:	f04f 0200 	mov.w	r2, #0
a0000ffc:	9200      	str	r2, [sp, #0]
a0000ffe:	4620      	mov	r0, r4
a0001000:	f04f 0104 	mov.w	r1, #4
a0001004:	461a      	mov	r2, r3
a0001006:	f04f 0300 	mov.w	r3, #0
a000100a:	f002 fa59 	bl	a00034c0 <xTimerGenericCommand>
a000100e:	e014      	b.n	a000103a <set_pkt_rate+0x86>
	}
	else{
		xTimerStop(pkt_timer[rcv_cmd->parameters[0]], 0);
a0001010:	687b      	ldr	r3, [r7, #4]
a0001012:	799b      	ldrb	r3, [r3, #6]
a0001014:	461a      	mov	r2, r3
a0001016:	f64d 5374 	movw	r3, #56692	; 0xdd74
a000101a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000101e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
a0001022:	f04f 0200 	mov.w	r2, #0
a0001026:	9200      	str	r2, [sp, #0]
a0001028:	4618      	mov	r0, r3
a000102a:	f04f 0103 	mov.w	r1, #3
a000102e:	f04f 0200 	mov.w	r2, #0
a0001032:	f04f 0300 	mov.w	r3, #0
a0001036:	f002 fa43 	bl	a00034c0 <xTimerGenericCommand>
//	if(pkt_rate->pkt_apid == HK_API_ID){
//		xTimerChangePeriod() Change the downlink rate of HK packet
//	}


}
a000103a:	f107 070c 	add.w	r7, r7, #12
a000103e:	46bd      	mov	sp, r7
a0001040:	bd90      	pop	{r4, r7, pc}
a0001042:	bf00      	nop

a0001044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
a0001044:	b480      	push	{r7}
a0001046:	b083      	sub	sp, #12
a0001048:	af00      	add	r7, sp, #0
a000104a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
a000104c:	687b      	ldr	r3, [r7, #4]
a000104e:	f103 0308 	add.w	r3, r3, #8
a0001052:	461a      	mov	r2, r3
a0001054:	687b      	ldr	r3, [r7, #4]
a0001056:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
a0001058:	687b      	ldr	r3, [r7, #4]
a000105a:	f04f 32ff 	mov.w	r2, #4294967295
a000105e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
a0001060:	687b      	ldr	r3, [r7, #4]
a0001062:	f103 0308 	add.w	r3, r3, #8
a0001066:	461a      	mov	r2, r3
a0001068:	687b      	ldr	r3, [r7, #4]
a000106a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
a000106c:	687b      	ldr	r3, [r7, #4]
a000106e:	f103 0308 	add.w	r3, r3, #8
a0001072:	461a      	mov	r2, r3
a0001074:	687b      	ldr	r3, [r7, #4]
a0001076:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
a0001078:	687b      	ldr	r3, [r7, #4]
a000107a:	f04f 0200 	mov.w	r2, #0
a000107e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
a0001080:	f107 070c 	add.w	r7, r7, #12
a0001084:	46bd      	mov	sp, r7
a0001086:	bc80      	pop	{r7}
a0001088:	4770      	bx	lr
a000108a:	bf00      	nop

a000108c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
a000108c:	b480      	push	{r7}
a000108e:	b083      	sub	sp, #12
a0001090:	af00      	add	r7, sp, #0
a0001092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
a0001094:	687b      	ldr	r3, [r7, #4]
a0001096:	f04f 0200 	mov.w	r2, #0
a000109a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
a000109c:	f107 070c 	add.w	r7, r7, #12
a00010a0:	46bd      	mov	sp, r7
a00010a2:	bc80      	pop	{r7}
a00010a4:	4770      	bx	lr
a00010a6:	bf00      	nop

a00010a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
a00010a8:	b480      	push	{r7}
a00010aa:	b085      	sub	sp, #20
a00010ac:	af00      	add	r7, sp, #0
a00010ae:	6078      	str	r0, [r7, #4]
a00010b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
a00010b2:	687b      	ldr	r3, [r7, #4]
a00010b4:	685b      	ldr	r3, [r3, #4]
a00010b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
a00010b8:	683b      	ldr	r3, [r7, #0]
a00010ba:	68fa      	ldr	r2, [r7, #12]
a00010bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
a00010be:	68fb      	ldr	r3, [r7, #12]
a00010c0:	689a      	ldr	r2, [r3, #8]
a00010c2:	683b      	ldr	r3, [r7, #0]
a00010c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
a00010c6:	68fb      	ldr	r3, [r7, #12]
a00010c8:	689b      	ldr	r3, [r3, #8]
a00010ca:	683a      	ldr	r2, [r7, #0]
a00010cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
a00010ce:	68fb      	ldr	r3, [r7, #12]
a00010d0:	683a      	ldr	r2, [r7, #0]
a00010d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
a00010d4:	683b      	ldr	r3, [r7, #0]
a00010d6:	687a      	ldr	r2, [r7, #4]
a00010d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
a00010da:	687b      	ldr	r3, [r7, #4]
a00010dc:	681b      	ldr	r3, [r3, #0]
a00010de:	f103 0201 	add.w	r2, r3, #1
a00010e2:	687b      	ldr	r3, [r7, #4]
a00010e4:	601a      	str	r2, [r3, #0]
}
a00010e6:	f107 0714 	add.w	r7, r7, #20
a00010ea:	46bd      	mov	sp, r7
a00010ec:	bc80      	pop	{r7}
a00010ee:	4770      	bx	lr

a00010f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
a00010f0:	b480      	push	{r7}
a00010f2:	b085      	sub	sp, #20
a00010f4:	af00      	add	r7, sp, #0
a00010f6:	6078      	str	r0, [r7, #4]
a00010f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
a00010fa:	683b      	ldr	r3, [r7, #0]
a00010fc:	681b      	ldr	r3, [r3, #0]
a00010fe:	60fb      	str	r3, [r7, #12]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
a0001100:	68fb      	ldr	r3, [r7, #12]
a0001102:	f1b3 3fff 	cmp.w	r3, #4294967295
a0001106:	d103      	bne.n	a0001110 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
a0001108:	687b      	ldr	r3, [r7, #4]
a000110a:	691b      	ldr	r3, [r3, #16]
a000110c:	60bb      	str	r3, [r7, #8]
a000110e:	e00d      	b.n	a000112c <vListInsert+0x3c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
a0001110:	687b      	ldr	r3, [r7, #4]
a0001112:	f103 0308 	add.w	r3, r3, #8
a0001116:	60bb      	str	r3, [r7, #8]
a0001118:	e002      	b.n	a0001120 <vListInsert+0x30>
a000111a:	68bb      	ldr	r3, [r7, #8]
a000111c:	685b      	ldr	r3, [r3, #4]
a000111e:	60bb      	str	r3, [r7, #8]
a0001120:	68bb      	ldr	r3, [r7, #8]
a0001122:	685b      	ldr	r3, [r3, #4]
a0001124:	681a      	ldr	r2, [r3, #0]
a0001126:	68fb      	ldr	r3, [r7, #12]
a0001128:	429a      	cmp	r2, r3
a000112a:	d9f6      	bls.n	a000111a <vListInsert+0x2a>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
a000112c:	68bb      	ldr	r3, [r7, #8]
a000112e:	685a      	ldr	r2, [r3, #4]
a0001130:	683b      	ldr	r3, [r7, #0]
a0001132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
a0001134:	683b      	ldr	r3, [r7, #0]
a0001136:	685b      	ldr	r3, [r3, #4]
a0001138:	683a      	ldr	r2, [r7, #0]
a000113a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
a000113c:	683b      	ldr	r3, [r7, #0]
a000113e:	68ba      	ldr	r2, [r7, #8]
a0001140:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
a0001142:	68bb      	ldr	r3, [r7, #8]
a0001144:	683a      	ldr	r2, [r7, #0]
a0001146:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
a0001148:	683b      	ldr	r3, [r7, #0]
a000114a:	687a      	ldr	r2, [r7, #4]
a000114c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
a000114e:	687b      	ldr	r3, [r7, #4]
a0001150:	681b      	ldr	r3, [r3, #0]
a0001152:	f103 0201 	add.w	r2, r3, #1
a0001156:	687b      	ldr	r3, [r7, #4]
a0001158:	601a      	str	r2, [r3, #0]
}
a000115a:	f107 0714 	add.w	r7, r7, #20
a000115e:	46bd      	mov	sp, r7
a0001160:	bc80      	pop	{r7}
a0001162:	4770      	bx	lr

a0001164 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
a0001164:	b480      	push	{r7}
a0001166:	b085      	sub	sp, #20
a0001168:	af00      	add	r7, sp, #0
a000116a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
a000116c:	687b      	ldr	r3, [r7, #4]
a000116e:	691b      	ldr	r3, [r3, #16]
a0001170:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
a0001172:	687b      	ldr	r3, [r7, #4]
a0001174:	685b      	ldr	r3, [r3, #4]
a0001176:	687a      	ldr	r2, [r7, #4]
a0001178:	6892      	ldr	r2, [r2, #8]
a000117a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
a000117c:	687b      	ldr	r3, [r7, #4]
a000117e:	689b      	ldr	r3, [r3, #8]
a0001180:	687a      	ldr	r2, [r7, #4]
a0001182:	6852      	ldr	r2, [r2, #4]
a0001184:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
a0001186:	68fb      	ldr	r3, [r7, #12]
a0001188:	685a      	ldr	r2, [r3, #4]
a000118a:	687b      	ldr	r3, [r7, #4]
a000118c:	429a      	cmp	r2, r3
a000118e:	d103      	bne.n	a0001198 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
a0001190:	687b      	ldr	r3, [r7, #4]
a0001192:	689a      	ldr	r2, [r3, #8]
a0001194:	68fb      	ldr	r3, [r7, #12]
a0001196:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
a0001198:	687b      	ldr	r3, [r7, #4]
a000119a:	f04f 0200 	mov.w	r2, #0
a000119e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
a00011a0:	68fb      	ldr	r3, [r7, #12]
a00011a2:	681b      	ldr	r3, [r3, #0]
a00011a4:	f103 32ff 	add.w	r2, r3, #4294967295
a00011a8:	68fb      	ldr	r3, [r7, #12]
a00011aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
a00011ac:	68fb      	ldr	r3, [r7, #12]
a00011ae:	681b      	ldr	r3, [r3, #0]
}
a00011b0:	4618      	mov	r0, r3
a00011b2:	f107 0714 	add.w	r7, r7, #20
a00011b6:	46bd      	mov	sp, r7
a00011b8:	bc80      	pop	{r7}
a00011ba:	4770      	bx	lr

a00011bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
a00011bc:	b580      	push	{r7, lr}
a00011be:	b084      	sub	sp, #16
a00011c0:	af00      	add	r7, sp, #0
a00011c2:	6078      	str	r0, [r7, #4]
a00011c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
a00011c6:	687b      	ldr	r3, [r7, #4]
a00011c8:	60bb      	str	r3, [r7, #8]

	configASSERT( pxQueue );
a00011ca:	68bb      	ldr	r3, [r7, #8]
a00011cc:	2b00      	cmp	r3, #0
a00011ce:	d109      	bne.n	a00011e4 <xQueueGenericReset+0x28>
a00011d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00011d4:	f383 8811 	msr	BASEPRI, r3
a00011d8:	f3bf 8f6f 	isb	sy
a00011dc:	f3bf 8f4f 	dsb	sy
a00011e0:	60fb      	str	r3, [r7, #12]
a00011e2:	e7fe      	b.n	a00011e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
a00011e4:	f003 f802 	bl	a00041ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
a00011e8:	68bb      	ldr	r3, [r7, #8]
a00011ea:	681a      	ldr	r2, [r3, #0]
a00011ec:	68bb      	ldr	r3, [r7, #8]
a00011ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a00011f0:	68b9      	ldr	r1, [r7, #8]
a00011f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
a00011f4:	fb01 f303 	mul.w	r3, r1, r3
a00011f8:	441a      	add	r2, r3
a00011fa:	68bb      	ldr	r3, [r7, #8]
a00011fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
a00011fe:	68bb      	ldr	r3, [r7, #8]
a0001200:	f04f 0200 	mov.w	r2, #0
a0001204:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
a0001206:	68bb      	ldr	r3, [r7, #8]
a0001208:	681a      	ldr	r2, [r3, #0]
a000120a:	68bb      	ldr	r3, [r7, #8]
a000120c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
a000120e:	68bb      	ldr	r3, [r7, #8]
a0001210:	681a      	ldr	r2, [r3, #0]
a0001212:	68bb      	ldr	r3, [r7, #8]
a0001214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a0001216:	f103 33ff 	add.w	r3, r3, #4294967295
a000121a:	68b9      	ldr	r1, [r7, #8]
a000121c:	6c09      	ldr	r1, [r1, #64]	; 0x40
a000121e:	fb01 f303 	mul.w	r3, r1, r3
a0001222:	441a      	add	r2, r3
a0001224:	68bb      	ldr	r3, [r7, #8]
a0001226:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
a0001228:	68bb      	ldr	r3, [r7, #8]
a000122a:	f04f 32ff 	mov.w	r2, #4294967295
a000122e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
a0001232:	68bb      	ldr	r3, [r7, #8]
a0001234:	f04f 32ff 	mov.w	r2, #4294967295
a0001238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
a000123c:	683b      	ldr	r3, [r7, #0]
a000123e:	2b00      	cmp	r3, #0
a0001240:	d118      	bne.n	a0001274 <xQueueGenericReset+0xb8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
a0001242:	68bb      	ldr	r3, [r7, #8]
a0001244:	691b      	ldr	r3, [r3, #16]
a0001246:	2b00      	cmp	r3, #0
a0001248:	d021      	beq.n	a000128e <xQueueGenericReset+0xd2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
a000124a:	68bb      	ldr	r3, [r7, #8]
a000124c:	f103 0310 	add.w	r3, r3, #16
a0001250:	4618      	mov	r0, r3
a0001252:	f001 fb0f 	bl	a0002874 <xTaskRemoveFromEventList>
a0001256:	4603      	mov	r3, r0
a0001258:	2b00      	cmp	r3, #0
a000125a:	d01a      	beq.n	a0001292 <xQueueGenericReset+0xd6>
				{
					queueYIELD_IF_USING_PREEMPTION();
a000125c:	f64e 5304 	movw	r3, #60676	; 0xed04
a0001260:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0001264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0001268:	601a      	str	r2, [r3, #0]
a000126a:	f3bf 8f4f 	dsb	sy
a000126e:	f3bf 8f6f 	isb	sy
a0001272:	e00f      	b.n	a0001294 <xQueueGenericReset+0xd8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
a0001274:	68bb      	ldr	r3, [r7, #8]
a0001276:	f103 0310 	add.w	r3, r3, #16
a000127a:	4618      	mov	r0, r3
a000127c:	f7ff fee2 	bl	a0001044 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
a0001280:	68bb      	ldr	r3, [r7, #8]
a0001282:	f103 0324 	add.w	r3, r3, #36	; 0x24
a0001286:	4618      	mov	r0, r3
a0001288:	f7ff fedc 	bl	a0001044 <vListInitialise>
a000128c:	e002      	b.n	a0001294 <xQueueGenericReset+0xd8>
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					queueYIELD_IF_USING_PREEMPTION();
a000128e:	bf00      	nop
a0001290:	e000      	b.n	a0001294 <xQueueGenericReset+0xd8>
a0001292:	bf00      	nop
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
a0001294:	f002 ffe2 	bl	a000425c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
a0001298:	f04f 0301 	mov.w	r3, #1
}
a000129c:	4618      	mov	r0, r3
a000129e:	f107 0710 	add.w	r7, r7, #16
a00012a2:	46bd      	mov	sp, r7
a00012a4:	bd80      	pop	{r7, pc}
a00012a6:	bf00      	nop

a00012a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
a00012a8:	b580      	push	{r7, lr}
a00012aa:	b08a      	sub	sp, #40	; 0x28
a00012ac:	af02      	add	r7, sp, #8
a00012ae:	60f8      	str	r0, [r7, #12]
a00012b0:	60b9      	str	r1, [r7, #8]
a00012b2:	4613      	mov	r3, r2
a00012b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
a00012b6:	68fb      	ldr	r3, [r7, #12]
a00012b8:	2b00      	cmp	r3, #0
a00012ba:	d109      	bne.n	a00012d0 <xQueueGenericCreate+0x28>
a00012bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00012c0:	f383 8811 	msr	BASEPRI, r3
a00012c4:	f3bf 8f6f 	isb	sy
a00012c8:	f3bf 8f4f 	dsb	sy
a00012cc:	61fb      	str	r3, [r7, #28]
a00012ce:	e7fe      	b.n	a00012ce <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
a00012d0:	68bb      	ldr	r3, [r7, #8]
a00012d2:	2b00      	cmp	r3, #0
a00012d4:	d103      	bne.n	a00012de <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
a00012d6:	f04f 0300 	mov.w	r3, #0
a00012da:	617b      	str	r3, [r7, #20]
a00012dc:	e004      	b.n	a00012e8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a00012de:	68fb      	ldr	r3, [r7, #12]
a00012e0:	68ba      	ldr	r2, [r7, #8]
a00012e2:	fb02 f303 	mul.w	r3, r2, r3
a00012e6:	617b      	str	r3, [r7, #20]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
a00012e8:	697b      	ldr	r3, [r7, #20]
a00012ea:	f103 0350 	add.w	r3, r3, #80	; 0x50
a00012ee:	4618      	mov	r0, r3
a00012f0:	f002 fc2e 	bl	a0003b50 <pvPortMalloc>
a00012f4:	4603      	mov	r3, r0
a00012f6:	613b      	str	r3, [r7, #16]

		if( pxNewQueue != NULL )
a00012f8:	693b      	ldr	r3, [r7, #16]
a00012fa:	2b00      	cmp	r3, #0
a00012fc:	d00b      	beq.n	a0001316 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
a00012fe:	693b      	ldr	r3, [r7, #16]
a0001300:	f103 0350 	add.w	r3, r3, #80	; 0x50
a0001304:	61bb      	str	r3, [r7, #24]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
a0001306:	79fb      	ldrb	r3, [r7, #7]
a0001308:	693a      	ldr	r2, [r7, #16]
a000130a:	9200      	str	r2, [sp, #0]
a000130c:	68f8      	ldr	r0, [r7, #12]
a000130e:	68b9      	ldr	r1, [r7, #8]
a0001310:	69ba      	ldr	r2, [r7, #24]
a0001312:	f000 f807 	bl	a0001324 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
a0001316:	693b      	ldr	r3, [r7, #16]
	}
a0001318:	4618      	mov	r0, r3
a000131a:	f107 0720 	add.w	r7, r7, #32
a000131e:	46bd      	mov	sp, r7
a0001320:	bd80      	pop	{r7, pc}
a0001322:	bf00      	nop

a0001324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
a0001324:	b580      	push	{r7, lr}
a0001326:	b084      	sub	sp, #16
a0001328:	af00      	add	r7, sp, #0
a000132a:	60f8      	str	r0, [r7, #12]
a000132c:	60b9      	str	r1, [r7, #8]
a000132e:	607a      	str	r2, [r7, #4]
a0001330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
a0001332:	68bb      	ldr	r3, [r7, #8]
a0001334:	2b00      	cmp	r3, #0
a0001336:	d103      	bne.n	a0001340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
a0001338:	69ba      	ldr	r2, [r7, #24]
a000133a:	69bb      	ldr	r3, [r7, #24]
a000133c:	601a      	str	r2, [r3, #0]
a000133e:	e002      	b.n	a0001346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
a0001340:	687a      	ldr	r2, [r7, #4]
a0001342:	69bb      	ldr	r3, [r7, #24]
a0001344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
a0001346:	69bb      	ldr	r3, [r7, #24]
a0001348:	68fa      	ldr	r2, [r7, #12]
a000134a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
a000134c:	69bb      	ldr	r3, [r7, #24]
a000134e:	68ba      	ldr	r2, [r7, #8]
a0001350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
a0001352:	69b8      	ldr	r0, [r7, #24]
a0001354:	f04f 0101 	mov.w	r1, #1
a0001358:	f7ff ff30 	bl	a00011bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
a000135c:	69bb      	ldr	r3, [r7, #24]
a000135e:	78fa      	ldrb	r2, [r7, #3]
a0001360:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
a0001364:	f107 0710 	add.w	r7, r7, #16
a0001368:	46bd      	mov	sp, r7
a000136a:	bd80      	pop	{r7, pc}

a000136c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
a000136c:	b580      	push	{r7, lr}
a000136e:	b082      	sub	sp, #8
a0001370:	af00      	add	r7, sp, #0
a0001372:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
a0001374:	687b      	ldr	r3, [r7, #4]
a0001376:	2b00      	cmp	r3, #0
a0001378:	d014      	beq.n	a00013a4 <prvInitialiseMutex+0x38>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
a000137a:	687b      	ldr	r3, [r7, #4]
a000137c:	f04f 0200 	mov.w	r2, #0
a0001380:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
a0001382:	687b      	ldr	r3, [r7, #4]
a0001384:	f04f 0200 	mov.w	r2, #0
a0001388:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
a000138a:	687b      	ldr	r3, [r7, #4]
a000138c:	f04f 0200 	mov.w	r2, #0
a0001390:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
a0001392:	6878      	ldr	r0, [r7, #4]
a0001394:	f04f 0100 	mov.w	r1, #0
a0001398:	f04f 0200 	mov.w	r2, #0
a000139c:	f04f 0300 	mov.w	r3, #0
a00013a0:	f000 f820 	bl	a00013e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
a00013a4:	f107 0708 	add.w	r7, r7, #8
a00013a8:	46bd      	mov	sp, r7
a00013aa:	bd80      	pop	{r7, pc}

a00013ac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
a00013ac:	b580      	push	{r7, lr}
a00013ae:	b086      	sub	sp, #24
a00013b0:	af00      	add	r7, sp, #0
a00013b2:	4603      	mov	r3, r0
a00013b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
a00013b6:	f04f 0301 	mov.w	r3, #1
a00013ba:	613b      	str	r3, [r7, #16]
a00013bc:	f04f 0300 	mov.w	r3, #0
a00013c0:	617b      	str	r3, [r7, #20]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
a00013c2:	79fb      	ldrb	r3, [r7, #7]
a00013c4:	6938      	ldr	r0, [r7, #16]
a00013c6:	6979      	ldr	r1, [r7, #20]
a00013c8:	461a      	mov	r2, r3
a00013ca:	f7ff ff6d 	bl	a00012a8 <xQueueGenericCreate>
a00013ce:	4603      	mov	r3, r0
a00013d0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
a00013d2:	68f8      	ldr	r0, [r7, #12]
a00013d4:	f7ff ffca 	bl	a000136c <prvInitialiseMutex>

		return pxNewQueue;
a00013d8:	68fb      	ldr	r3, [r7, #12]
	}
a00013da:	4618      	mov	r0, r3
a00013dc:	f107 0718 	add.w	r7, r7, #24
a00013e0:	46bd      	mov	sp, r7
a00013e2:	bd80      	pop	{r7, pc}

a00013e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
a00013e4:	b580      	push	{r7, lr}
a00013e6:	b08e      	sub	sp, #56	; 0x38
a00013e8:	af00      	add	r7, sp, #0
a00013ea:	60f8      	str	r0, [r7, #12]
a00013ec:	60b9      	str	r1, [r7, #8]
a00013ee:	607a      	str	r2, [r7, #4]
a00013f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
a00013f2:	f04f 0300 	mov.w	r3, #0
a00013f6:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
a00013f8:	68fb      	ldr	r3, [r7, #12]
a00013fa:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
a00013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00013fe:	2b00      	cmp	r3, #0
a0001400:	d109      	bne.n	a0001416 <xQueueGenericSend+0x32>
a0001402:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001406:	f383 8811 	msr	BASEPRI, r3
a000140a:	f3bf 8f6f 	isb	sy
a000140e:	f3bf 8f4f 	dsb	sy
a0001412:	62bb      	str	r3, [r7, #40]	; 0x28
a0001414:	e7fe      	b.n	a0001414 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
a0001416:	68bb      	ldr	r3, [r7, #8]
a0001418:	2b00      	cmp	r3, #0
a000141a:	d103      	bne.n	a0001424 <xQueueGenericSend+0x40>
a000141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001420:	2b00      	cmp	r3, #0
a0001422:	d102      	bne.n	a000142a <xQueueGenericSend+0x46>
a0001424:	f04f 0301 	mov.w	r3, #1
a0001428:	e001      	b.n	a000142e <xQueueGenericSend+0x4a>
a000142a:	f04f 0300 	mov.w	r3, #0
a000142e:	2b00      	cmp	r3, #0
a0001430:	d109      	bne.n	a0001446 <xQueueGenericSend+0x62>
a0001432:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001436:	f383 8811 	msr	BASEPRI, r3
a000143a:	f3bf 8f6f 	isb	sy
a000143e:	f3bf 8f4f 	dsb	sy
a0001442:	62fb      	str	r3, [r7, #44]	; 0x2c
a0001444:	e7fe      	b.n	a0001444 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
a0001446:	683b      	ldr	r3, [r7, #0]
a0001448:	2b02      	cmp	r3, #2
a000144a:	d103      	bne.n	a0001454 <xQueueGenericSend+0x70>
a000144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a0001450:	2b01      	cmp	r3, #1
a0001452:	d102      	bne.n	a000145a <xQueueGenericSend+0x76>
a0001454:	f04f 0301 	mov.w	r3, #1
a0001458:	e001      	b.n	a000145e <xQueueGenericSend+0x7a>
a000145a:	f04f 0300 	mov.w	r3, #0
a000145e:	2b00      	cmp	r3, #0
a0001460:	d109      	bne.n	a0001476 <xQueueGenericSend+0x92>
a0001462:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001466:	f383 8811 	msr	BASEPRI, r3
a000146a:	f3bf 8f6f 	isb	sy
a000146e:	f3bf 8f4f 	dsb	sy
a0001472:	633b      	str	r3, [r7, #48]	; 0x30
a0001474:	e7fe      	b.n	a0001474 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
a0001476:	f001 fc05 	bl	a0002c84 <xTaskGetSchedulerState>
a000147a:	4603      	mov	r3, r0
a000147c:	2b00      	cmp	r3, #0
a000147e:	d102      	bne.n	a0001486 <xQueueGenericSend+0xa2>
a0001480:	687b      	ldr	r3, [r7, #4]
a0001482:	2b00      	cmp	r3, #0
a0001484:	d102      	bne.n	a000148c <xQueueGenericSend+0xa8>
a0001486:	f04f 0301 	mov.w	r3, #1
a000148a:	e001      	b.n	a0001490 <xQueueGenericSend+0xac>
a000148c:	f04f 0300 	mov.w	r3, #0
a0001490:	2b00      	cmp	r3, #0
a0001492:	d10a      	bne.n	a00014aa <xQueueGenericSend+0xc6>
a0001494:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001498:	f383 8811 	msr	BASEPRI, r3
a000149c:	f3bf 8f6f 	isb	sy
a00014a0:	f3bf 8f4f 	dsb	sy
a00014a4:	637b      	str	r3, [r7, #52]	; 0x34
a00014a6:	e7fe      	b.n	a00014a6 <xQueueGenericSend+0xc2>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
a00014a8:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
a00014aa:	f002 fe9f 	bl	a00041ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
a00014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00014b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
a00014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00014b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a00014b6:	429a      	cmp	r2, r3
a00014b8:	d302      	bcc.n	a00014c0 <xQueueGenericSend+0xdc>
a00014ba:	683b      	ldr	r3, [r7, #0]
a00014bc:	2b02      	cmp	r3, #2
a00014be:	d134      	bne.n	a000152a <xQueueGenericSend+0x146>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
a00014c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
a00014c2:	68b9      	ldr	r1, [r7, #8]
a00014c4:	683a      	ldr	r2, [r7, #0]
a00014c6:	f000 fa7b 	bl	a00019c0 <prvCopyDataToQueue>
a00014ca:	4603      	mov	r3, r0
a00014cc:	623b      	str	r3, [r7, #32]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
a00014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a00014d2:	2b00      	cmp	r3, #0
a00014d4:	d014      	beq.n	a0001500 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
a00014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00014d8:	f103 0324 	add.w	r3, r3, #36	; 0x24
a00014dc:	4618      	mov	r0, r3
a00014de:	f001 f9c9 	bl	a0002874 <xTaskRemoveFromEventList>
a00014e2:	4603      	mov	r3, r0
a00014e4:	2b00      	cmp	r3, #0
a00014e6:	d01a      	beq.n	a000151e <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
a00014e8:	f64e 5304 	movw	r3, #60676	; 0xed04
a00014ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
a00014f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a00014f4:	601a      	str	r2, [r3, #0]
a00014f6:	f3bf 8f4f 	dsb	sy
a00014fa:	f3bf 8f6f 	isb	sy
a00014fe:	e00f      	b.n	a0001520 <xQueueGenericSend+0x13c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
a0001500:	6a3b      	ldr	r3, [r7, #32]
a0001502:	2b00      	cmp	r3, #0
a0001504:	d00c      	beq.n	a0001520 <xQueueGenericSend+0x13c>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
a0001506:	f64e 5304 	movw	r3, #60676	; 0xed04
a000150a:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000150e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0001512:	601a      	str	r2, [r3, #0]
a0001514:	f3bf 8f4f 	dsb	sy
a0001518:	f3bf 8f6f 	isb	sy
a000151c:	e000      	b.n	a0001520 <xQueueGenericSend+0x13c>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
a000151e:	bf00      	nop
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
a0001520:	f002 fe9c 	bl	a000425c <vPortExitCritical>
				return pdPASS;
a0001524:	f04f 0301 	mov.w	r3, #1
a0001528:	e06f      	b.n	a000160a <xQueueGenericSend+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
a000152a:	687b      	ldr	r3, [r7, #4]
a000152c:	2b00      	cmp	r3, #0
a000152e:	d104      	bne.n	a000153a <xQueueGenericSend+0x156>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
a0001530:	f002 fe94 	bl	a000425c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
a0001534:	f04f 0300 	mov.w	r3, #0
a0001538:	e067      	b.n	a000160a <xQueueGenericSend+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
a000153a:	69fb      	ldr	r3, [r7, #28]
a000153c:	2b00      	cmp	r3, #0
a000153e:	d107      	bne.n	a0001550 <xQueueGenericSend+0x16c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
a0001540:	f107 0314 	add.w	r3, r7, #20
a0001544:	4618      	mov	r0, r3
a0001546:	f001 fa0d 	bl	a0002964 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
a000154a:	f04f 0301 	mov.w	r3, #1
a000154e:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
a0001550:	f002 fe84 	bl	a000425c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
a0001554:	f000 fe6e 	bl	a0002234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
a0001558:	f002 fe48 	bl	a00041ec <vPortEnterCritical>
a000155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000155e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
a0001562:	b2db      	uxtb	r3, r3
a0001564:	b25b      	sxtb	r3, r3
a0001566:	f1b3 3fff 	cmp.w	r3, #4294967295
a000156a:	d104      	bne.n	a0001576 <xQueueGenericSend+0x192>
a000156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000156e:	f04f 0200 	mov.w	r2, #0
a0001572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
a0001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
a000157c:	b2db      	uxtb	r3, r3
a000157e:	b25b      	sxtb	r3, r3
a0001580:	f1b3 3fff 	cmp.w	r3, #4294967295
a0001584:	d104      	bne.n	a0001590 <xQueueGenericSend+0x1ac>
a0001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001588:	f04f 0200 	mov.w	r2, #0
a000158c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
a0001590:	f002 fe64 	bl	a000425c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
a0001594:	f107 0214 	add.w	r2, r7, #20
a0001598:	f107 0304 	add.w	r3, r7, #4
a000159c:	4610      	mov	r0, r2
a000159e:	4619      	mov	r1, r3
a00015a0:	f001 fa04 	bl	a00029ac <xTaskCheckForTimeOut>
a00015a4:	4603      	mov	r3, r0
a00015a6:	2b00      	cmp	r3, #0
a00015a8:	d128      	bne.n	a00015fc <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
a00015aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
a00015ac:	f000 fb18 	bl	a0001be0 <prvIsQueueFull>
a00015b0:	4603      	mov	r3, r0
a00015b2:	2b00      	cmp	r3, #0
a00015b4:	d01c      	beq.n	a00015f0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
a00015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00015b8:	f103 0210 	add.w	r2, r3, #16
a00015bc:	687b      	ldr	r3, [r7, #4]
a00015be:	4610      	mov	r0, r2
a00015c0:	4619      	mov	r1, r3
a00015c2:	f001 f905 	bl	a00027d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
a00015c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
a00015c8:	f000 fa9a 	bl	a0001b00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
a00015cc:	f000 fe44 	bl	a0002258 <xTaskResumeAll>
a00015d0:	4603      	mov	r3, r0
a00015d2:	2b00      	cmp	r3, #0
a00015d4:	f47f af68 	bne.w	a00014a8 <xQueueGenericSend+0xc4>
				{
					portYIELD_WITHIN_API();
a00015d8:	f64e 5304 	movw	r3, #60676	; 0xed04
a00015dc:	f2ce 0300 	movt	r3, #57344	; 0xe000
a00015e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a00015e4:	601a      	str	r2, [r3, #0]
a00015e6:	f3bf 8f4f 	dsb	sy
a00015ea:	f3bf 8f6f 	isb	sy
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
a00015ee:	e75c      	b.n	a00014aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
a00015f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
a00015f2:	f000 fa85 	bl	a0001b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
a00015f6:	f000 fe2f 	bl	a0002258 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
a00015fa:	e756      	b.n	a00014aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
a00015fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
a00015fe:	f000 fa7f 	bl	a0001b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
a0001602:	f000 fe29 	bl	a0002258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
a0001606:	f04f 0300 	mov.w	r3, #0
		}
	}
}
a000160a:	4618      	mov	r0, r3
a000160c:	f107 0738 	add.w	r7, r7, #56	; 0x38
a0001610:	46bd      	mov	sp, r7
a0001612:	bd80      	pop	{r7, pc}

a0001614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
a0001614:	b580      	push	{r7, lr}
a0001616:	b08e      	sub	sp, #56	; 0x38
a0001618:	af00      	add	r7, sp, #0
a000161a:	60f8      	str	r0, [r7, #12]
a000161c:	60b9      	str	r1, [r7, #8]
a000161e:	607a      	str	r2, [r7, #4]
a0001620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
a0001622:	68fb      	ldr	r3, [r7, #12]
a0001624:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
a0001626:	69bb      	ldr	r3, [r7, #24]
a0001628:	2b00      	cmp	r3, #0
a000162a:	d109      	bne.n	a0001640 <xQueueGenericSendFromISR+0x2c>
a000162c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001630:	f383 8811 	msr	BASEPRI, r3
a0001634:	f3bf 8f6f 	isb	sy
a0001638:	f3bf 8f4f 	dsb	sy
a000163c:	623b      	str	r3, [r7, #32]
a000163e:	e7fe      	b.n	a000163e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
a0001640:	68bb      	ldr	r3, [r7, #8]
a0001642:	2b00      	cmp	r3, #0
a0001644:	d103      	bne.n	a000164e <xQueueGenericSendFromISR+0x3a>
a0001646:	69bb      	ldr	r3, [r7, #24]
a0001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a000164a:	2b00      	cmp	r3, #0
a000164c:	d102      	bne.n	a0001654 <xQueueGenericSendFromISR+0x40>
a000164e:	f04f 0301 	mov.w	r3, #1
a0001652:	e001      	b.n	a0001658 <xQueueGenericSendFromISR+0x44>
a0001654:	f04f 0300 	mov.w	r3, #0
a0001658:	2b00      	cmp	r3, #0
a000165a:	d109      	bne.n	a0001670 <xQueueGenericSendFromISR+0x5c>
a000165c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001660:	f383 8811 	msr	BASEPRI, r3
a0001664:	f3bf 8f6f 	isb	sy
a0001668:	f3bf 8f4f 	dsb	sy
a000166c:	627b      	str	r3, [r7, #36]	; 0x24
a000166e:	e7fe      	b.n	a000166e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
a0001670:	683b      	ldr	r3, [r7, #0]
a0001672:	2b02      	cmp	r3, #2
a0001674:	d103      	bne.n	a000167e <xQueueGenericSendFromISR+0x6a>
a0001676:	69bb      	ldr	r3, [r7, #24]
a0001678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a000167a:	2b01      	cmp	r3, #1
a000167c:	d102      	bne.n	a0001684 <xQueueGenericSendFromISR+0x70>
a000167e:	f04f 0301 	mov.w	r3, #1
a0001682:	e001      	b.n	a0001688 <xQueueGenericSendFromISR+0x74>
a0001684:	f04f 0300 	mov.w	r3, #0
a0001688:	2b00      	cmp	r3, #0
a000168a:	d109      	bne.n	a00016a0 <xQueueGenericSendFromISR+0x8c>
a000168c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001690:	f383 8811 	msr	BASEPRI, r3
a0001694:	f3bf 8f6f 	isb	sy
a0001698:	f3bf 8f4f 	dsb	sy
a000169c:	62bb      	str	r3, [r7, #40]	; 0x28
a000169e:	e7fe      	b.n	a000169e <xQueueGenericSendFromISR+0x8a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
a00016a0:	f002 fe78 	bl	a0004394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
a00016a4:	f3ef 8211 	mrs	r2, BASEPRI
a00016a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00016ac:	f383 8811 	msr	BASEPRI, r3
a00016b0:	f3bf 8f6f 	isb	sy
a00016b4:	f3bf 8f4f 	dsb	sy
a00016b8:	633a      	str	r2, [r7, #48]	; 0x30
a00016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
a00016bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
a00016be:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
a00016c0:	69bb      	ldr	r3, [r7, #24]
a00016c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
a00016c4:	69bb      	ldr	r3, [r7, #24]
a00016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a00016c8:	429a      	cmp	r2, r3
a00016ca:	d302      	bcc.n	a00016d2 <xQueueGenericSendFromISR+0xbe>
a00016cc:	683b      	ldr	r3, [r7, #0]
a00016ce:	2b02      	cmp	r3, #2
a00016d0:	d134      	bne.n	a000173c <xQueueGenericSendFromISR+0x128>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
a00016d2:	69bb      	ldr	r3, [r7, #24]
a00016d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
a00016d8:	77fb      	strb	r3, [r7, #31]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
a00016da:	69b8      	ldr	r0, [r7, #24]
a00016dc:	68b9      	ldr	r1, [r7, #8]
a00016de:	683a      	ldr	r2, [r7, #0]
a00016e0:	f000 f96e 	bl	a00019c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
a00016e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
a00016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
a00016ec:	d114      	bne.n	a0001718 <xQueueGenericSendFromISR+0x104>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
a00016ee:	69bb      	ldr	r3, [r7, #24]
a00016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a00016f2:	2b00      	cmp	r3, #0
a00016f4:	d019      	beq.n	a000172a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
a00016f6:	69bb      	ldr	r3, [r7, #24]
a00016f8:	f103 0324 	add.w	r3, r3, #36	; 0x24
a00016fc:	4618      	mov	r0, r3
a00016fe:	f001 f8b9 	bl	a0002874 <xTaskRemoveFromEventList>
a0001702:	4603      	mov	r3, r0
a0001704:	2b00      	cmp	r3, #0
a0001706:	d012      	beq.n	a000172e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
a0001708:	687b      	ldr	r3, [r7, #4]
a000170a:	2b00      	cmp	r3, #0
a000170c:	d011      	beq.n	a0001732 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
a000170e:	687b      	ldr	r3, [r7, #4]
a0001710:	f04f 0201 	mov.w	r2, #1
a0001714:	601a      	str	r2, [r3, #0]
a0001716:	e00d      	b.n	a0001734 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
a0001718:	7ffb      	ldrb	r3, [r7, #31]
a000171a:	f103 0301 	add.w	r3, r3, #1
a000171e:	b2db      	uxtb	r3, r3
a0001720:	461a      	mov	r2, r3
a0001722:	69bb      	ldr	r3, [r7, #24]
a0001724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
a0001728:	e004      	b.n	a0001734 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
a000172a:	bf00      	nop
a000172c:	e002      	b.n	a0001734 <xQueueGenericSendFromISR+0x120>
a000172e:	bf00      	nop
a0001730:	e000      	b.n	a0001734 <xQueueGenericSendFromISR+0x120>
a0001732:	bf00      	nop
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
a0001734:	f04f 0301 	mov.w	r3, #1
a0001738:	613b      	str	r3, [r7, #16]
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
a000173a:	e002      	b.n	a0001742 <xQueueGenericSendFromISR+0x12e>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
a000173c:	f04f 0300 	mov.w	r3, #0
a0001740:	613b      	str	r3, [r7, #16]
a0001742:	697b      	ldr	r3, [r7, #20]
a0001744:	637b      	str	r3, [r7, #52]	; 0x34
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
a0001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
a0001748:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
a000174c:	693b      	ldr	r3, [r7, #16]
}
a000174e:	4618      	mov	r0, r3
a0001750:	f107 0738 	add.w	r7, r7, #56	; 0x38
a0001754:	46bd      	mov	sp, r7
a0001756:	bd80      	pop	{r7, pc}

a0001758 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
a0001758:	b580      	push	{r7, lr}
a000175a:	b08e      	sub	sp, #56	; 0x38
a000175c:	af00      	add	r7, sp, #0
a000175e:	60f8      	str	r0, [r7, #12]
a0001760:	60b9      	str	r1, [r7, #8]
a0001762:	607a      	str	r2, [r7, #4]
a0001764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
a0001766:	f04f 0300 	mov.w	r3, #0
a000176a:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
a000176c:	68fb      	ldr	r3, [r7, #12]
a000176e:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( pxQueue );
a0001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001772:	2b00      	cmp	r3, #0
a0001774:	d109      	bne.n	a000178a <xQueueGenericReceive+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
a0001776:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a000177a:	f383 8811 	msr	BASEPRI, r3
a000177e:	f3bf 8f6f 	isb	sy
a0001782:	f3bf 8f4f 	dsb	sy
a0001786:	62fb      	str	r3, [r7, #44]	; 0x2c
a0001788:	e7fe      	b.n	a0001788 <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
a000178a:	68bb      	ldr	r3, [r7, #8]
a000178c:	2b00      	cmp	r3, #0
a000178e:	d103      	bne.n	a0001798 <xQueueGenericReceive+0x40>
a0001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001794:	2b00      	cmp	r3, #0
a0001796:	d102      	bne.n	a000179e <xQueueGenericReceive+0x46>
a0001798:	f04f 0301 	mov.w	r3, #1
a000179c:	e001      	b.n	a00017a2 <xQueueGenericReceive+0x4a>
a000179e:	f04f 0300 	mov.w	r3, #0
a00017a2:	2b00      	cmp	r3, #0
a00017a4:	d109      	bne.n	a00017ba <xQueueGenericReceive+0x62>
a00017a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00017aa:	f383 8811 	msr	BASEPRI, r3
a00017ae:	f3bf 8f6f 	isb	sy
a00017b2:	f3bf 8f4f 	dsb	sy
a00017b6:	633b      	str	r3, [r7, #48]	; 0x30
a00017b8:	e7fe      	b.n	a00017b8 <xQueueGenericReceive+0x60>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
a00017ba:	f001 fa63 	bl	a0002c84 <xTaskGetSchedulerState>
a00017be:	4603      	mov	r3, r0
a00017c0:	2b00      	cmp	r3, #0
a00017c2:	d102      	bne.n	a00017ca <xQueueGenericReceive+0x72>
a00017c4:	687b      	ldr	r3, [r7, #4]
a00017c6:	2b00      	cmp	r3, #0
a00017c8:	d102      	bne.n	a00017d0 <xQueueGenericReceive+0x78>
a00017ca:	f04f 0301 	mov.w	r3, #1
a00017ce:	e001      	b.n	a00017d4 <xQueueGenericReceive+0x7c>
a00017d0:	f04f 0300 	mov.w	r3, #0
a00017d4:	2b00      	cmp	r3, #0
a00017d6:	d10c      	bne.n	a00017f2 <xQueueGenericReceive+0x9a>
a00017d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00017dc:	f383 8811 	msr	BASEPRI, r3
a00017e0:	f3bf 8f6f 	isb	sy
a00017e4:	f3bf 8f4f 	dsb	sy
a00017e8:	637b      	str	r3, [r7, #52]	; 0x34
a00017ea:	e7fe      	b.n	a00017ea <xQueueGenericReceive+0x92>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
a00017ec:	bf00      	nop
a00017ee:	e000      	b.n	a00017f2 <xQueueGenericReceive+0x9a>
a00017f0:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
a00017f2:	f002 fcfb 	bl	a00041ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
a00017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
a00017fa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
a00017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
a00017fe:	2b00      	cmp	r3, #0
a0001800:	d055      	beq.n	a00018ae <xQueueGenericReceive+0x156>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
a0001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001804:	68db      	ldr	r3, [r3, #12]
a0001806:	623b      	str	r3, [r7, #32]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
a0001808:	6a78      	ldr	r0, [r7, #36]	; 0x24
a000180a:	68b9      	ldr	r1, [r7, #8]
a000180c:	f000 f950 	bl	a0001ab0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
a0001810:	683b      	ldr	r3, [r7, #0]
a0001812:	2b00      	cmp	r3, #0
a0001814:	d127      	bne.n	a0001866 <xQueueGenericReceive+0x10e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
a0001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
a0001818:	f103 32ff 	add.w	r2, r3, #4294967295
a000181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000181e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
a0001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001822:	681b      	ldr	r3, [r3, #0]
a0001824:	2b00      	cmp	r3, #0
a0001826:	d105      	bne.n	a0001834 <xQueueGenericReceive+0xdc>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
a0001828:	f001 fb9c 	bl	a0002f64 <pvTaskIncrementMutexHeldCount>
a000182c:	4603      	mov	r3, r0
a000182e:	461a      	mov	r2, r3
a0001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001832:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
a0001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001836:	691b      	ldr	r3, [r3, #16]
a0001838:	2b00      	cmp	r3, #0
a000183a:	d030      	beq.n	a000189e <xQueueGenericReceive+0x146>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
a000183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000183e:	f103 0310 	add.w	r3, r3, #16
a0001842:	4618      	mov	r0, r3
a0001844:	f001 f816 	bl	a0002874 <xTaskRemoveFromEventList>
a0001848:	4603      	mov	r3, r0
a000184a:	2b00      	cmp	r3, #0
a000184c:	d029      	beq.n	a00018a2 <xQueueGenericReceive+0x14a>
						{
							queueYIELD_IF_USING_PREEMPTION();
a000184e:	f64e 5304 	movw	r3, #60676	; 0xed04
a0001852:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0001856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a000185a:	601a      	str	r2, [r3, #0]
a000185c:	f3bf 8f4f 	dsb	sy
a0001860:	f3bf 8f6f 	isb	sy
a0001864:	e01e      	b.n	a00018a4 <xQueueGenericReceive+0x14c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
a0001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001868:	6a3a      	ldr	r2, [r7, #32]
a000186a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
a000186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a0001870:	2b00      	cmp	r3, #0
a0001872:	d017      	beq.n	a00018a4 <xQueueGenericReceive+0x14c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
a0001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001876:	f103 0324 	add.w	r3, r3, #36	; 0x24
a000187a:	4618      	mov	r0, r3
a000187c:	f000 fffa 	bl	a0002874 <xTaskRemoveFromEventList>
a0001880:	4603      	mov	r3, r0
a0001882:	2b00      	cmp	r3, #0
a0001884:	d00e      	beq.n	a00018a4 <xQueueGenericReceive+0x14c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
a0001886:	f64e 5304 	movw	r3, #60676	; 0xed04
a000188a:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000188e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0001892:	601a      	str	r2, [r3, #0]
a0001894:	f3bf 8f4f 	dsb	sy
a0001898:	f3bf 8f6f 	isb	sy
a000189c:	e002      	b.n	a00018a4 <xQueueGenericReceive+0x14c>

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
						{
							queueYIELD_IF_USING_PREEMPTION();
a000189e:	bf00      	nop
a00018a0:	e000      	b.n	a00018a4 <xQueueGenericReceive+0x14c>
a00018a2:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
a00018a4:	f002 fcda 	bl	a000425c <vPortExitCritical>
				return pdPASS;
a00018a8:	f04f 0301 	mov.w	r3, #1
a00018ac:	e083      	b.n	a00019b6 <xQueueGenericReceive+0x25e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
a00018ae:	687b      	ldr	r3, [r7, #4]
a00018b0:	2b00      	cmp	r3, #0
a00018b2:	d104      	bne.n	a00018be <xQueueGenericReceive+0x166>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
a00018b4:	f002 fcd2 	bl	a000425c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
a00018b8:	f04f 0300 	mov.w	r3, #0
a00018bc:	e07b      	b.n	a00019b6 <xQueueGenericReceive+0x25e>
				}
				else if( xEntryTimeSet == pdFALSE )
a00018be:	69fb      	ldr	r3, [r7, #28]
a00018c0:	2b00      	cmp	r3, #0
a00018c2:	d107      	bne.n	a00018d4 <xQueueGenericReceive+0x17c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
a00018c4:	f107 0314 	add.w	r3, r7, #20
a00018c8:	4618      	mov	r0, r3
a00018ca:	f001 f84b 	bl	a0002964 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
a00018ce:	f04f 0301 	mov.w	r3, #1
a00018d2:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
a00018d4:	f002 fcc2 	bl	a000425c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
a00018d8:	f000 fcac 	bl	a0002234 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
a00018dc:	f002 fc86 	bl	a00041ec <vPortEnterCritical>
a00018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00018e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
a00018e6:	b2db      	uxtb	r3, r3
a00018e8:	b25b      	sxtb	r3, r3
a00018ea:	f1b3 3fff 	cmp.w	r3, #4294967295
a00018ee:	d104      	bne.n	a00018fa <xQueueGenericReceive+0x1a2>
a00018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00018f2:	f04f 0200 	mov.w	r2, #0
a00018f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
a00018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00018fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
a0001900:	b2db      	uxtb	r3, r3
a0001902:	b25b      	sxtb	r3, r3
a0001904:	f1b3 3fff 	cmp.w	r3, #4294967295
a0001908:	d104      	bne.n	a0001914 <xQueueGenericReceive+0x1bc>
a000190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000190c:	f04f 0200 	mov.w	r2, #0
a0001910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
a0001914:	f002 fca2 	bl	a000425c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
a0001918:	f107 0214 	add.w	r2, r7, #20
a000191c:	f107 0304 	add.w	r3, r7, #4
a0001920:	4610      	mov	r0, r2
a0001922:	4619      	mov	r1, r3
a0001924:	f001 f842 	bl	a00029ac <xTaskCheckForTimeOut>
a0001928:	4603      	mov	r3, r0
a000192a:	2b00      	cmp	r3, #0
a000192c:	d135      	bne.n	a000199a <xQueueGenericReceive+0x242>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
a000192e:	6a78      	ldr	r0, [r7, #36]	; 0x24
a0001930:	f000 f93c 	bl	a0001bac <prvIsQueueEmpty>
a0001934:	4603      	mov	r3, r0
a0001936:	2b00      	cmp	r3, #0
a0001938:	d029      	beq.n	a000198e <xQueueGenericReceive+0x236>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
a000193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000193c:	681b      	ldr	r3, [r3, #0]
a000193e:	2b00      	cmp	r3, #0
a0001940:	d108      	bne.n	a0001954 <xQueueGenericReceive+0x1fc>
					{
						taskENTER_CRITICAL();
a0001942:	f002 fc53 	bl	a00041ec <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
a0001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001948:	685b      	ldr	r3, [r3, #4]
a000194a:	4618      	mov	r0, r3
a000194c:	f001 f9be 	bl	a0002ccc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
a0001950:	f002 fc84 	bl	a000425c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
a0001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0001956:	f103 0224 	add.w	r2, r3, #36	; 0x24
a000195a:	687b      	ldr	r3, [r7, #4]
a000195c:	4610      	mov	r0, r2
a000195e:	4619      	mov	r1, r3
a0001960:	f000 ff36 	bl	a00027d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
a0001964:	6a78      	ldr	r0, [r7, #36]	; 0x24
a0001966:	f000 f8cb 	bl	a0001b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
a000196a:	f000 fc75 	bl	a0002258 <xTaskResumeAll>
a000196e:	4603      	mov	r3, r0
a0001970:	2b00      	cmp	r3, #0
a0001972:	f47f af3b 	bne.w	a00017ec <xQueueGenericReceive+0x94>
				{
					portYIELD_WITHIN_API();
a0001976:	f64e 5304 	movw	r3, #60676	; 0xed04
a000197a:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000197e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0001982:	601a      	str	r2, [r3, #0]
a0001984:	f3bf 8f4f 	dsb	sy
a0001988:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
a000198c:	e731      	b.n	a00017f2 <xQueueGenericReceive+0x9a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
a000198e:	6a78      	ldr	r0, [r7, #36]	; 0x24
a0001990:	f000 f8b6 	bl	a0001b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
a0001994:	f000 fc60 	bl	a0002258 <xTaskResumeAll>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
a0001998:	e72b      	b.n	a00017f2 <xQueueGenericReceive+0x9a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
a000199a:	6a78      	ldr	r0, [r7, #36]	; 0x24
a000199c:	f000 f8b0 	bl	a0001b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
a00019a0:	f000 fc5a 	bl	a0002258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
a00019a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
a00019a6:	f000 f901 	bl	a0001bac <prvIsQueueEmpty>
a00019aa:	4603      	mov	r3, r0
a00019ac:	2b00      	cmp	r3, #0
a00019ae:	f43f af1f 	beq.w	a00017f0 <xQueueGenericReceive+0x98>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
a00019b2:	f04f 0300 	mov.w	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
a00019b6:	4618      	mov	r0, r3
a00019b8:	f107 0738 	add.w	r7, r7, #56	; 0x38
a00019bc:	46bd      	mov	sp, r7
a00019be:	bd80      	pop	{r7, pc}

a00019c0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
a00019c0:	b580      	push	{r7, lr}
a00019c2:	b086      	sub	sp, #24
a00019c4:	af00      	add	r7, sp, #0
a00019c6:	60f8      	str	r0, [r7, #12]
a00019c8:	60b9      	str	r1, [r7, #8]
a00019ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
a00019cc:	f04f 0300 	mov.w	r3, #0
a00019d0:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
a00019d2:	68fb      	ldr	r3, [r7, #12]
a00019d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
a00019d6:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
a00019d8:	68fb      	ldr	r3, [r7, #12]
a00019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a00019dc:	2b00      	cmp	r3, #0
a00019de:	d10f      	bne.n	a0001a00 <prvCopyDataToQueue+0x40>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
a00019e0:	68fb      	ldr	r3, [r7, #12]
a00019e2:	681b      	ldr	r3, [r3, #0]
a00019e4:	2b00      	cmp	r3, #0
a00019e6:	d155      	bne.n	a0001a94 <prvCopyDataToQueue+0xd4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
a00019e8:	68fb      	ldr	r3, [r7, #12]
a00019ea:	685b      	ldr	r3, [r3, #4]
a00019ec:	4618      	mov	r0, r3
a00019ee:	f001 fa13 	bl	a0002e18 <xTaskPriorityDisinherit>
a00019f2:	4603      	mov	r3, r0
a00019f4:	613b      	str	r3, [r7, #16]
				pxQueue->pxMutexHolder = NULL;
a00019f6:	68fb      	ldr	r3, [r7, #12]
a00019f8:	f04f 0200 	mov.w	r2, #0
a00019fc:	605a      	str	r2, [r3, #4]
a00019fe:	e04c      	b.n	a0001a9a <prvCopyDataToQueue+0xda>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
a0001a00:	687b      	ldr	r3, [r7, #4]
a0001a02:	2b00      	cmp	r3, #0
a0001a04:	d11a      	bne.n	a0001a3c <prvCopyDataToQueue+0x7c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
a0001a06:	68fb      	ldr	r3, [r7, #12]
a0001a08:	689a      	ldr	r2, [r3, #8]
a0001a0a:	68fb      	ldr	r3, [r7, #12]
a0001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001a0e:	4610      	mov	r0, r2
a0001a10:	68b9      	ldr	r1, [r7, #8]
a0001a12:	461a      	mov	r2, r3
a0001a14:	f005 fbd8 	bl	a00071c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
a0001a18:	68fb      	ldr	r3, [r7, #12]
a0001a1a:	689a      	ldr	r2, [r3, #8]
a0001a1c:	68fb      	ldr	r3, [r7, #12]
a0001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001a20:	441a      	add	r2, r3
a0001a22:	68fb      	ldr	r3, [r7, #12]
a0001a24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
a0001a26:	68fb      	ldr	r3, [r7, #12]
a0001a28:	689a      	ldr	r2, [r3, #8]
a0001a2a:	68fb      	ldr	r3, [r7, #12]
a0001a2c:	685b      	ldr	r3, [r3, #4]
a0001a2e:	429a      	cmp	r2, r3
a0001a30:	d332      	bcc.n	a0001a98 <prvCopyDataToQueue+0xd8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
a0001a32:	68fb      	ldr	r3, [r7, #12]
a0001a34:	681a      	ldr	r2, [r3, #0]
a0001a36:	68fb      	ldr	r3, [r7, #12]
a0001a38:	609a      	str	r2, [r3, #8]
a0001a3a:	e02e      	b.n	a0001a9a <prvCopyDataToQueue+0xda>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a0001a3c:	68fb      	ldr	r3, [r7, #12]
a0001a3e:	68da      	ldr	r2, [r3, #12]
a0001a40:	68fb      	ldr	r3, [r7, #12]
a0001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001a44:	4610      	mov	r0, r2
a0001a46:	68b9      	ldr	r1, [r7, #8]
a0001a48:	461a      	mov	r2, r3
a0001a4a:	f005 fbbd 	bl	a00071c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
a0001a4e:	68fb      	ldr	r3, [r7, #12]
a0001a50:	68da      	ldr	r2, [r3, #12]
a0001a52:	68fb      	ldr	r3, [r7, #12]
a0001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001a56:	f1c3 0300 	rsb	r3, r3, #0
a0001a5a:	441a      	add	r2, r3
a0001a5c:	68fb      	ldr	r3, [r7, #12]
a0001a5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
a0001a60:	68fb      	ldr	r3, [r7, #12]
a0001a62:	68da      	ldr	r2, [r3, #12]
a0001a64:	68fb      	ldr	r3, [r7, #12]
a0001a66:	681b      	ldr	r3, [r3, #0]
a0001a68:	429a      	cmp	r2, r3
a0001a6a:	d208      	bcs.n	a0001a7e <prvCopyDataToQueue+0xbe>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
a0001a6c:	68fb      	ldr	r3, [r7, #12]
a0001a6e:	685a      	ldr	r2, [r3, #4]
a0001a70:	68fb      	ldr	r3, [r7, #12]
a0001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001a74:	f1c3 0300 	rsb	r3, r3, #0
a0001a78:	441a      	add	r2, r3
a0001a7a:	68fb      	ldr	r3, [r7, #12]
a0001a7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
a0001a7e:	687b      	ldr	r3, [r7, #4]
a0001a80:	2b02      	cmp	r3, #2
a0001a82:	d10a      	bne.n	a0001a9a <prvCopyDataToQueue+0xda>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
a0001a84:	697b      	ldr	r3, [r7, #20]
a0001a86:	2b00      	cmp	r3, #0
a0001a88:	d007      	beq.n	a0001a9a <prvCopyDataToQueue+0xda>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
a0001a8a:	697b      	ldr	r3, [r7, #20]
a0001a8c:	f103 33ff 	add.w	r3, r3, #4294967295
a0001a90:	617b      	str	r3, [r7, #20]
a0001a92:	e002      	b.n	a0001a9a <prvCopyDataToQueue+0xda>
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
a0001a94:	bf00      	nop
a0001a96:	e000      	b.n	a0001a9a <prvCopyDataToQueue+0xda>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
a0001a98:	bf00      	nop
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
a0001a9a:	697b      	ldr	r3, [r7, #20]
a0001a9c:	f103 0201 	add.w	r2, r3, #1
a0001aa0:	68fb      	ldr	r3, [r7, #12]
a0001aa2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
a0001aa4:	693b      	ldr	r3, [r7, #16]
}
a0001aa6:	4618      	mov	r0, r3
a0001aa8:	f107 0718 	add.w	r7, r7, #24
a0001aac:	46bd      	mov	sp, r7
a0001aae:	bd80      	pop	{r7, pc}

a0001ab0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
a0001ab0:	b580      	push	{r7, lr}
a0001ab2:	b082      	sub	sp, #8
a0001ab4:	af00      	add	r7, sp, #0
a0001ab6:	6078      	str	r0, [r7, #4]
a0001ab8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
a0001aba:	687b      	ldr	r3, [r7, #4]
a0001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001abe:	2b00      	cmp	r3, #0
a0001ac0:	d019      	beq.n	a0001af6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
a0001ac2:	687b      	ldr	r3, [r7, #4]
a0001ac4:	68da      	ldr	r2, [r3, #12]
a0001ac6:	687b      	ldr	r3, [r7, #4]
a0001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001aca:	441a      	add	r2, r3
a0001acc:	687b      	ldr	r3, [r7, #4]
a0001ace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
a0001ad0:	687b      	ldr	r3, [r7, #4]
a0001ad2:	68da      	ldr	r2, [r3, #12]
a0001ad4:	687b      	ldr	r3, [r7, #4]
a0001ad6:	685b      	ldr	r3, [r3, #4]
a0001ad8:	429a      	cmp	r2, r3
a0001ada:	d303      	bcc.n	a0001ae4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
a0001adc:	687b      	ldr	r3, [r7, #4]
a0001ade:	681a      	ldr	r2, [r3, #0]
a0001ae0:	687b      	ldr	r3, [r7, #4]
a0001ae2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
a0001ae4:	687b      	ldr	r3, [r7, #4]
a0001ae6:	68da      	ldr	r2, [r3, #12]
a0001ae8:	687b      	ldr	r3, [r7, #4]
a0001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0001aec:	6838      	ldr	r0, [r7, #0]
a0001aee:	4611      	mov	r1, r2
a0001af0:	461a      	mov	r2, r3
a0001af2:	f005 fb69 	bl	a00071c8 <memcpy>
	}
}
a0001af6:	f107 0708 	add.w	r7, r7, #8
a0001afa:	46bd      	mov	sp, r7
a0001afc:	bd80      	pop	{r7, pc}
a0001afe:	bf00      	nop

a0001b00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
a0001b00:	b580      	push	{r7, lr}
a0001b02:	b084      	sub	sp, #16
a0001b04:	af00      	add	r7, sp, #0
a0001b06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
a0001b08:	f002 fb70 	bl	a00041ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
a0001b0c:	687b      	ldr	r3, [r7, #4]
a0001b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
a0001b12:	73bb      	strb	r3, [r7, #14]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
a0001b14:	e012      	b.n	a0001b3c <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
a0001b16:	687b      	ldr	r3, [r7, #4]
a0001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a0001b1a:	2b00      	cmp	r3, #0
a0001b1c:	d013      	beq.n	a0001b46 <prvUnlockQueue+0x46>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
a0001b1e:	687b      	ldr	r3, [r7, #4]
a0001b20:	f103 0324 	add.w	r3, r3, #36	; 0x24
a0001b24:	4618      	mov	r0, r3
a0001b26:	f000 fea5 	bl	a0002874 <xTaskRemoveFromEventList>
a0001b2a:	4603      	mov	r3, r0
a0001b2c:	2b00      	cmp	r3, #0
a0001b2e:	d001      	beq.n	a0001b34 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
a0001b30:	f000 ffa4 	bl	a0002a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
a0001b34:	7bbb      	ldrb	r3, [r7, #14]
a0001b36:	f103 33ff 	add.w	r3, r3, #4294967295
a0001b3a:	73bb      	strb	r3, [r7, #14]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
a0001b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
a0001b40:	2b00      	cmp	r3, #0
a0001b42:	dce8      	bgt.n	a0001b16 <prvUnlockQueue+0x16>
a0001b44:	e000      	b.n	a0001b48 <prvUnlockQueue+0x48>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
a0001b46:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
a0001b48:	687b      	ldr	r3, [r7, #4]
a0001b4a:	f04f 32ff 	mov.w	r2, #4294967295
a0001b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
a0001b52:	f002 fb83 	bl	a000425c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
a0001b56:	f002 fb49 	bl	a00041ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
a0001b5a:	687b      	ldr	r3, [r7, #4]
a0001b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
a0001b60:	73fb      	strb	r3, [r7, #15]

		while( cRxLock > queueLOCKED_UNMODIFIED )
a0001b62:	e012      	b.n	a0001b8a <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
a0001b64:	687b      	ldr	r3, [r7, #4]
a0001b66:	691b      	ldr	r3, [r3, #16]
a0001b68:	2b00      	cmp	r3, #0
a0001b6a:	d013      	beq.n	a0001b94 <prvUnlockQueue+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
a0001b6c:	687b      	ldr	r3, [r7, #4]
a0001b6e:	f103 0310 	add.w	r3, r3, #16
a0001b72:	4618      	mov	r0, r3
a0001b74:	f000 fe7e 	bl	a0002874 <xTaskRemoveFromEventList>
a0001b78:	4603      	mov	r3, r0
a0001b7a:	2b00      	cmp	r3, #0
a0001b7c:	d001      	beq.n	a0001b82 <prvUnlockQueue+0x82>
				{
					vTaskMissedYield();
a0001b7e:	f000 ff7d 	bl	a0002a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
a0001b82:	7bfb      	ldrb	r3, [r7, #15]
a0001b84:	f103 33ff 	add.w	r3, r3, #4294967295
a0001b88:	73fb      	strb	r3, [r7, #15]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
a0001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
a0001b8e:	2b00      	cmp	r3, #0
a0001b90:	dce8      	bgt.n	a0001b64 <prvUnlockQueue+0x64>
a0001b92:	e000      	b.n	a0001b96 <prvUnlockQueue+0x96>

				--cRxLock;
			}
			else
			{
				break;
a0001b94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
a0001b96:	687b      	ldr	r3, [r7, #4]
a0001b98:	f04f 32ff 	mov.w	r2, #4294967295
a0001b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
a0001ba0:	f002 fb5c 	bl	a000425c <vPortExitCritical>
}
a0001ba4:	f107 0710 	add.w	r7, r7, #16
a0001ba8:	46bd      	mov	sp, r7
a0001baa:	bd80      	pop	{r7, pc}

a0001bac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
a0001bac:	b580      	push	{r7, lr}
a0001bae:	b084      	sub	sp, #16
a0001bb0:	af00      	add	r7, sp, #0
a0001bb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
a0001bb4:	f002 fb1a 	bl	a00041ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
a0001bb8:	687b      	ldr	r3, [r7, #4]
a0001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
a0001bbc:	2b00      	cmp	r3, #0
a0001bbe:	d103      	bne.n	a0001bc8 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
a0001bc0:	f04f 0301 	mov.w	r3, #1
a0001bc4:	60fb      	str	r3, [r7, #12]
a0001bc6:	e002      	b.n	a0001bce <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
a0001bc8:	f04f 0300 	mov.w	r3, #0
a0001bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
a0001bce:	f002 fb45 	bl	a000425c <vPortExitCritical>

	return xReturn;
a0001bd2:	68fb      	ldr	r3, [r7, #12]
}
a0001bd4:	4618      	mov	r0, r3
a0001bd6:	f107 0710 	add.w	r7, r7, #16
a0001bda:	46bd      	mov	sp, r7
a0001bdc:	bd80      	pop	{r7, pc}
a0001bde:	bf00      	nop

a0001be0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
a0001be0:	b580      	push	{r7, lr}
a0001be2:	b084      	sub	sp, #16
a0001be4:	af00      	add	r7, sp, #0
a0001be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
a0001be8:	f002 fb00 	bl	a00041ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
a0001bec:	687b      	ldr	r3, [r7, #4]
a0001bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
a0001bf0:	687b      	ldr	r3, [r7, #4]
a0001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a0001bf4:	429a      	cmp	r2, r3
a0001bf6:	d103      	bne.n	a0001c00 <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
a0001bf8:	f04f 0301 	mov.w	r3, #1
a0001bfc:	60fb      	str	r3, [r7, #12]
a0001bfe:	e002      	b.n	a0001c06 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
a0001c00:	f04f 0300 	mov.w	r3, #0
a0001c04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
a0001c06:	f002 fb29 	bl	a000425c <vPortExitCritical>

	return xReturn;
a0001c0a:	68fb      	ldr	r3, [r7, #12]
}
a0001c0c:	4618      	mov	r0, r3
a0001c0e:	f107 0710 	add.w	r7, r7, #16
a0001c12:	46bd      	mov	sp, r7
a0001c14:	bd80      	pop	{r7, pc}
a0001c16:	bf00      	nop

a0001c18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
a0001c18:	b580      	push	{r7, lr}
a0001c1a:	b086      	sub	sp, #24
a0001c1c:	af00      	add	r7, sp, #0
a0001c1e:	60f8      	str	r0, [r7, #12]
a0001c20:	60b9      	str	r1, [r7, #8]
a0001c22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
a0001c24:	68fb      	ldr	r3, [r7, #12]
a0001c26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
a0001c28:	f002 fae0 	bl	a00041ec <vPortEnterCritical>
a0001c2c:	697b      	ldr	r3, [r7, #20]
a0001c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
a0001c32:	b2db      	uxtb	r3, r3
a0001c34:	b25b      	sxtb	r3, r3
a0001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
a0001c3a:	d104      	bne.n	a0001c46 <vQueueWaitForMessageRestricted+0x2e>
a0001c3c:	697b      	ldr	r3, [r7, #20]
a0001c3e:	f04f 0200 	mov.w	r2, #0
a0001c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
a0001c46:	697b      	ldr	r3, [r7, #20]
a0001c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
a0001c4c:	b2db      	uxtb	r3, r3
a0001c4e:	b25b      	sxtb	r3, r3
a0001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
a0001c54:	d104      	bne.n	a0001c60 <vQueueWaitForMessageRestricted+0x48>
a0001c56:	697b      	ldr	r3, [r7, #20]
a0001c58:	f04f 0200 	mov.w	r2, #0
a0001c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
a0001c60:	f002 fafc 	bl	a000425c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
a0001c64:	697b      	ldr	r3, [r7, #20]
a0001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
a0001c68:	2b00      	cmp	r3, #0
a0001c6a:	d107      	bne.n	a0001c7c <vQueueWaitForMessageRestricted+0x64>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
a0001c6c:	697b      	ldr	r3, [r7, #20]
a0001c6e:	f103 0324 	add.w	r3, r3, #36	; 0x24
a0001c72:	4618      	mov	r0, r3
a0001c74:	68b9      	ldr	r1, [r7, #8]
a0001c76:	687a      	ldr	r2, [r7, #4]
a0001c78:	f000 fdd0 	bl	a000281c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
a0001c7c:	6978      	ldr	r0, [r7, #20]
a0001c7e:	f7ff ff3f 	bl	a0001b00 <prvUnlockQueue>
	}
a0001c82:	f107 0718 	add.w	r7, r7, #24
a0001c86:	46bd      	mov	sp, r7
a0001c88:	bd80      	pop	{r7, pc}
a0001c8a:	bf00      	nop

a0001c8c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
a0001c8c:	b580      	push	{r7, lr}
a0001c8e:	b08c      	sub	sp, #48	; 0x30
a0001c90:	af04      	add	r7, sp, #16
a0001c92:	60f8      	str	r0, [r7, #12]
a0001c94:	60b9      	str	r1, [r7, #8]
a0001c96:	603b      	str	r3, [r7, #0]
a0001c98:	4613      	mov	r3, r2
a0001c9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a0001c9c:	88fb      	ldrh	r3, [r7, #6]
a0001c9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0001ca2:	4618      	mov	r0, r3
a0001ca4:	f001 ff54 	bl	a0003b50 <pvPortMalloc>
a0001ca8:	4603      	mov	r3, r0
a0001caa:	61fb      	str	r3, [r7, #28]

			if( pxStack != NULL )
a0001cac:	69fb      	ldr	r3, [r7, #28]
a0001cae:	2b00      	cmp	r3, #0
a0001cb0:	d010      	beq.n	a0001cd4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
a0001cb2:	f04f 005c 	mov.w	r0, #92	; 0x5c
a0001cb6:	f001 ff4b 	bl	a0003b50 <pvPortMalloc>
a0001cba:	4603      	mov	r3, r0
a0001cbc:	617b      	str	r3, [r7, #20]

				if( pxNewTCB != NULL )
a0001cbe:	697b      	ldr	r3, [r7, #20]
a0001cc0:	2b00      	cmp	r3, #0
a0001cc2:	d003      	beq.n	a0001ccc <xTaskCreate+0x40>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
a0001cc4:	697b      	ldr	r3, [r7, #20]
a0001cc6:	69fa      	ldr	r2, [r7, #28]
a0001cc8:	631a      	str	r2, [r3, #48]	; 0x30
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
a0001cca:	e006      	b.n	a0001cda <xTaskCreate+0x4e>
a0001ccc:	69f8      	ldr	r0, [r7, #28]
a0001cce:	f002 f83b 	bl	a0003d48 <vPortFree>
a0001cd2:	e002      	b.n	a0001cda <xTaskCreate+0x4e>
				}
			}
			else
			{
				pxNewTCB = NULL;
a0001cd4:	f04f 0300 	mov.w	r3, #0
a0001cd8:	617b      	str	r3, [r7, #20]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
a0001cda:	697b      	ldr	r3, [r7, #20]
a0001cdc:	2b00      	cmp	r3, #0
a0001cde:	d016      	beq.n	a0001d0e <xTaskCreate+0x82>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
a0001ce0:	88fb      	ldrh	r3, [r7, #6]
a0001ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
a0001ce4:	9200      	str	r2, [sp, #0]
a0001ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
a0001ce8:	9201      	str	r2, [sp, #4]
a0001cea:	697a      	ldr	r2, [r7, #20]
a0001cec:	9202      	str	r2, [sp, #8]
a0001cee:	f04f 0200 	mov.w	r2, #0
a0001cf2:	9203      	str	r2, [sp, #12]
a0001cf4:	68f8      	ldr	r0, [r7, #12]
a0001cf6:	68b9      	ldr	r1, [r7, #8]
a0001cf8:	461a      	mov	r2, r3
a0001cfa:	683b      	ldr	r3, [r7, #0]
a0001cfc:	f000 f810 	bl	a0001d20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
a0001d00:	6978      	ldr	r0, [r7, #20]
a0001d02:	f000 f8a3 	bl	a0001e4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
a0001d06:	f04f 0301 	mov.w	r3, #1
a0001d0a:	61bb      	str	r3, [r7, #24]
a0001d0c:	e002      	b.n	a0001d14 <xTaskCreate+0x88>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
a0001d0e:	f04f 33ff 	mov.w	r3, #4294967295
a0001d12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
a0001d14:	69bb      	ldr	r3, [r7, #24]
	}
a0001d16:	4618      	mov	r0, r3
a0001d18:	f107 0720 	add.w	r7, r7, #32
a0001d1c:	46bd      	mov	sp, r7
a0001d1e:	bd80      	pop	{r7, pc}

a0001d20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
a0001d20:	b580      	push	{r7, lr}
a0001d22:	b088      	sub	sp, #32
a0001d24:	af00      	add	r7, sp, #0
a0001d26:	60f8      	str	r0, [r7, #12]
a0001d28:	60b9      	str	r1, [r7, #8]
a0001d2a:	607a      	str	r2, [r7, #4]
a0001d2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
a0001d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
a0001d32:	687b      	ldr	r3, [r7, #4]
a0001d34:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0001d38:	4610      	mov	r0, r2
a0001d3a:	f04f 01a5 	mov.w	r1, #165	; 0xa5
a0001d3e:	461a      	mov	r2, r3
a0001d40:	f005 fb0a 	bl	a0007358 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
a0001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
a0001d48:	687b      	ldr	r3, [r7, #4]
a0001d4a:	f103 33ff 	add.w	r3, r3, #4294967295
a0001d4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0001d52:	4413      	add	r3, r2
a0001d54:	617b      	str	r3, [r7, #20]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
a0001d56:	697b      	ldr	r3, [r7, #20]
a0001d58:	f023 0307 	bic.w	r3, r3, #7
a0001d5c:	617b      	str	r3, [r7, #20]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
a0001d5e:	697b      	ldr	r3, [r7, #20]
a0001d60:	f003 0307 	and.w	r3, r3, #7
a0001d64:	2b00      	cmp	r3, #0
a0001d66:	d009      	beq.n	a0001d7c <prvInitialiseNewTask+0x5c>
a0001d68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001d6c:	f383 8811 	msr	BASEPRI, r3
a0001d70:	f3bf 8f6f 	isb	sy
a0001d74:	f3bf 8f4f 	dsb	sy
a0001d78:	61fb      	str	r3, [r7, #28]
a0001d7a:	e7fe      	b.n	a0001d7a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
a0001d7c:	f04f 0300 	mov.w	r3, #0
a0001d80:	61bb      	str	r3, [r7, #24]
a0001d82:	e012      	b.n	a0001daa <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
a0001d84:	69b9      	ldr	r1, [r7, #24]
a0001d86:	68ba      	ldr	r2, [r7, #8]
a0001d88:	69bb      	ldr	r3, [r7, #24]
a0001d8a:	4413      	add	r3, r2
a0001d8c:	781a      	ldrb	r2, [r3, #0]
a0001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001d90:	440b      	add	r3, r1
a0001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
a0001d96:	68ba      	ldr	r2, [r7, #8]
a0001d98:	69bb      	ldr	r3, [r7, #24]
a0001d9a:	4413      	add	r3, r2
a0001d9c:	781b      	ldrb	r3, [r3, #0]
a0001d9e:	2b00      	cmp	r3, #0
a0001da0:	d007      	beq.n	a0001db2 <prvInitialiseNewTask+0x92>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
a0001da2:	69bb      	ldr	r3, [r7, #24]
a0001da4:	f103 0301 	add.w	r3, r3, #1
a0001da8:	61bb      	str	r3, [r7, #24]
a0001daa:	69bb      	ldr	r3, [r7, #24]
a0001dac:	2b09      	cmp	r3, #9
a0001dae:	d9e9      	bls.n	a0001d84 <prvInitialiseNewTask+0x64>
a0001db0:	e000      	b.n	a0001db4 <prvInitialiseNewTask+0x94>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
a0001db2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
a0001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001db6:	f04f 0200 	mov.w	r2, #0
a0001dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
a0001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
a0001dc0:	2b04      	cmp	r3, #4
a0001dc2:	d902      	bls.n	a0001dca <prvInitialiseNewTask+0xaa>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
a0001dc4:	f04f 0304 	mov.w	r3, #4
a0001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
a0001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
a0001dce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
a0001dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
a0001dd4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
a0001dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001dd8:	f04f 0200 	mov.w	r2, #0
a0001ddc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
a0001dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001de0:	f103 0304 	add.w	r3, r3, #4
a0001de4:	4618      	mov	r0, r3
a0001de6:	f7ff f951 	bl	a000108c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
a0001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001dec:	f103 0318 	add.w	r3, r3, #24
a0001df0:	4618      	mov	r0, r3
a0001df2:	f7ff f94b 	bl	a000108c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
a0001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
a0001dfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a0001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
a0001dfe:	f1c3 0205 	rsb	r2, r3, #5
a0001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001e04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
a0001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
a0001e0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
a0001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001e0e:	f04f 0200 	mov.w	r2, #0
a0001e12:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
a0001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001e16:	f04f 0200 	mov.w	r2, #0
a0001e1a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
a0001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001e1e:	f04f 0200 	mov.w	r2, #0
a0001e22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
a0001e26:	6978      	ldr	r0, [r7, #20]
a0001e28:	68f9      	ldr	r1, [r7, #12]
a0001e2a:	683a      	ldr	r2, [r7, #0]
a0001e2c:	f002 f8d8 	bl	a0003fe0 <pxPortInitialiseStack>
a0001e30:	4603      	mov	r3, r0
a0001e32:	461a      	mov	r2, r3
a0001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
a0001e36:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
a0001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
a0001e3a:	2b00      	cmp	r3, #0
a0001e3c:	d002      	beq.n	a0001e44 <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
a0001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
a0001e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
a0001e42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
a0001e44:	f107 0720 	add.w	r7, r7, #32
a0001e48:	46bd      	mov	sp, r7
a0001e4a:	bd80      	pop	{r7, pc}

a0001e4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
a0001e4c:	b580      	push	{r7, lr}
a0001e4e:	b082      	sub	sp, #8
a0001e50:	af00      	add	r7, sp, #0
a0001e52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
a0001e54:	f002 f9ca 	bl	a00041ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
a0001e58:	f247 632c 	movw	r3, #30252	; 0x762c
a0001e5c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001e60:	681b      	ldr	r3, [r3, #0]
a0001e62:	f103 0201 	add.w	r2, r3, #1
a0001e66:	f247 632c 	movw	r3, #30252	; 0x762c
a0001e6a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001e6e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
a0001e70:	f247 5354 	movw	r3, #30036	; 0x7554
a0001e74:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001e78:	681b      	ldr	r3, [r3, #0]
a0001e7a:	2b00      	cmp	r3, #0
a0001e7c:	d10f      	bne.n	a0001e9e <prvAddNewTaskToReadyList+0x52>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
a0001e7e:	f247 5354 	movw	r3, #30036	; 0x7554
a0001e82:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001e86:	687a      	ldr	r2, [r7, #4]
a0001e88:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
a0001e8a:	f247 632c 	movw	r3, #30252	; 0x762c
a0001e8e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001e92:	681b      	ldr	r3, [r3, #0]
a0001e94:	2b01      	cmp	r3, #1
a0001e96:	d11a      	bne.n	a0001ece <prvAddNewTaskToReadyList+0x82>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
a0001e98:	f000 fe18 	bl	a0002acc <prvInitialiseTaskLists>
a0001e9c:	e018      	b.n	a0001ed0 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
a0001e9e:	f247 6338 	movw	r3, #30264	; 0x7638
a0001ea2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001ea6:	681b      	ldr	r3, [r3, #0]
a0001ea8:	2b00      	cmp	r3, #0
a0001eaa:	d111      	bne.n	a0001ed0 <prvAddNewTaskToReadyList+0x84>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
a0001eac:	f247 5354 	movw	r3, #30036	; 0x7554
a0001eb0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001eb4:	681b      	ldr	r3, [r3, #0]
a0001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0001eb8:	687b      	ldr	r3, [r7, #4]
a0001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0001ebc:	429a      	cmp	r2, r3
a0001ebe:	d807      	bhi.n	a0001ed0 <prvAddNewTaskToReadyList+0x84>
				{
					pxCurrentTCB = pxNewTCB;
a0001ec0:	f247 5354 	movw	r3, #30036	; 0x7554
a0001ec4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001ec8:	687a      	ldr	r2, [r7, #4]
a0001eca:	601a      	str	r2, [r3, #0]
a0001ecc:	e000      	b.n	a0001ed0 <prvAddNewTaskToReadyList+0x84>
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
a0001ece:	bf00      	nop
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
a0001ed0:	f247 6348 	movw	r3, #30280	; 0x7648
a0001ed4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001ed8:	681b      	ldr	r3, [r3, #0]
a0001eda:	f103 0201 	add.w	r2, r3, #1
a0001ede:	f247 6348 	movw	r3, #30280	; 0x7648
a0001ee2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001ee6:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
a0001ee8:	f247 6348 	movw	r3, #30280	; 0x7648
a0001eec:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001ef0:	681a      	ldr	r2, [r3, #0]
a0001ef2:	687b      	ldr	r3, [r7, #4]
a0001ef4:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
a0001ef6:	687b      	ldr	r3, [r7, #4]
a0001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0001efa:	f04f 0201 	mov.w	r2, #1
a0001efe:	fa02 f203 	lsl.w	r2, r2, r3
a0001f02:	f247 6334 	movw	r3, #30260	; 0x7634
a0001f06:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001f0a:	681b      	ldr	r3, [r3, #0]
a0001f0c:	ea42 0203 	orr.w	r2, r2, r3
a0001f10:	f247 6334 	movw	r3, #30260	; 0x7634
a0001f14:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001f18:	601a      	str	r2, [r3, #0]
a0001f1a:	687b      	ldr	r3, [r7, #4]
a0001f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0001f1e:	4613      	mov	r3, r2
a0001f20:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0001f24:	4413      	add	r3, r2
a0001f26:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0001f2a:	461a      	mov	r2, r3
a0001f2c:	f247 5358 	movw	r3, #30040	; 0x7558
a0001f30:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001f34:	441a      	add	r2, r3
a0001f36:	687b      	ldr	r3, [r7, #4]
a0001f38:	f103 0304 	add.w	r3, r3, #4
a0001f3c:	4610      	mov	r0, r2
a0001f3e:	4619      	mov	r1, r3
a0001f40:	f7ff f8b2 	bl	a00010a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
a0001f44:	f002 f98a 	bl	a000425c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
a0001f48:	f247 6338 	movw	r3, #30264	; 0x7638
a0001f4c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001f50:	681b      	ldr	r3, [r3, #0]
a0001f52:	2b00      	cmp	r3, #0
a0001f54:	d014      	beq.n	a0001f80 <prvAddNewTaskToReadyList+0x134>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
a0001f56:	f247 5354 	movw	r3, #30036	; 0x7554
a0001f5a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001f5e:	681b      	ldr	r3, [r3, #0]
a0001f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0001f62:	687b      	ldr	r3, [r7, #4]
a0001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0001f66:	429a      	cmp	r2, r3
a0001f68:	d20a      	bcs.n	a0001f80 <prvAddNewTaskToReadyList+0x134>
		{
			taskYIELD_IF_USING_PREEMPTION();
a0001f6a:	f64e 5304 	movw	r3, #60676	; 0xed04
a0001f6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0001f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0001f76:	601a      	str	r2, [r3, #0]
a0001f78:	f3bf 8f4f 	dsb	sy
a0001f7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
a0001f80:	f107 0708 	add.w	r7, r7, #8
a0001f84:	46bd      	mov	sp, r7
a0001f86:	bd80      	pop	{r7, pc}

a0001f88 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
a0001f88:	b580      	push	{r7, lr}
a0001f8a:	b084      	sub	sp, #16
a0001f8c:	af00      	add	r7, sp, #0
a0001f8e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
a0001f90:	f002 f92c 	bl	a00041ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
a0001f94:	687b      	ldr	r3, [r7, #4]
a0001f96:	2b00      	cmp	r3, #0
a0001f98:	d105      	bne.n	a0001fa6 <uxTaskPriorityGet+0x1e>
a0001f9a:	f247 5354 	movw	r3, #30036	; 0x7554
a0001f9e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0001fa2:	681b      	ldr	r3, [r3, #0]
a0001fa4:	e000      	b.n	a0001fa8 <uxTaskPriorityGet+0x20>
a0001fa6:	687b      	ldr	r3, [r7, #4]
a0001fa8:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxPriority;
a0001faa:	68bb      	ldr	r3, [r7, #8]
a0001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0001fae:	60fb      	str	r3, [r7, #12]
		}
		taskEXIT_CRITICAL();
a0001fb0:	f002 f954 	bl	a000425c <vPortExitCritical>

		return uxReturn;
a0001fb4:	68fb      	ldr	r3, [r7, #12]
	}
a0001fb6:	4618      	mov	r0, r3
a0001fb8:	f107 0710 	add.w	r7, r7, #16
a0001fbc:	46bd      	mov	sp, r7
a0001fbe:	bd80      	pop	{r7, pc}

a0001fc0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
a0001fc0:	b580      	push	{r7, lr}
a0001fc2:	b088      	sub	sp, #32
a0001fc4:	af00      	add	r7, sp, #0
a0001fc6:	6078      	str	r0, [r7, #4]
a0001fc8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
a0001fca:	f04f 0300 	mov.w	r3, #0
a0001fce:	61bb      	str	r3, [r7, #24]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
a0001fd0:	683b      	ldr	r3, [r7, #0]
a0001fd2:	2b04      	cmp	r3, #4
a0001fd4:	d909      	bls.n	a0001fea <vTaskPrioritySet+0x2a>
a0001fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0001fda:	f383 8811 	msr	BASEPRI, r3
a0001fde:	f3bf 8f6f 	isb	sy
a0001fe2:	f3bf 8f4f 	dsb	sy
a0001fe6:	61fb      	str	r3, [r7, #28]
a0001fe8:	e7fe      	b.n	a0001fe8 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
a0001fea:	683b      	ldr	r3, [r7, #0]
a0001fec:	2b04      	cmp	r3, #4
a0001fee:	d902      	bls.n	a0001ff6 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
a0001ff0:	f04f 0304 	mov.w	r3, #4
a0001ff4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
a0001ff6:	f002 f8f9 	bl	a00041ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
a0001ffa:	687b      	ldr	r3, [r7, #4]
a0001ffc:	2b00      	cmp	r3, #0
a0001ffe:	d105      	bne.n	a000200c <vTaskPrioritySet+0x4c>
a0002000:	f247 5354 	movw	r3, #30036	; 0x7554
a0002004:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002008:	681b      	ldr	r3, [r3, #0]
a000200a:	e000      	b.n	a000200e <vTaskPrioritySet+0x4e>
a000200c:	687b      	ldr	r3, [r7, #4]
a000200e:	60fb      	str	r3, [r7, #12]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
a0002010:	68fb      	ldr	r3, [r7, #12]
a0002012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
a0002014:	613b      	str	r3, [r7, #16]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
a0002016:	693a      	ldr	r2, [r7, #16]
a0002018:	683b      	ldr	r3, [r7, #0]
a000201a:	429a      	cmp	r2, r3
a000201c:	f000 80a9 	beq.w	a0002172 <vTaskPrioritySet+0x1b2>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
a0002020:	683a      	ldr	r2, [r7, #0]
a0002022:	693b      	ldr	r3, [r7, #16]
a0002024:	429a      	cmp	r2, r3
a0002026:	d914      	bls.n	a0002052 <vTaskPrioritySet+0x92>
				{
					if( pxTCB != pxCurrentTCB )
a0002028:	f247 5354 	movw	r3, #30036	; 0x7554
a000202c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002030:	681b      	ldr	r3, [r3, #0]
a0002032:	68fa      	ldr	r2, [r7, #12]
a0002034:	429a      	cmp	r2, r3
a0002036:	d018      	beq.n	a000206a <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
a0002038:	f247 5354 	movw	r3, #30036	; 0x7554
a000203c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002040:	681b      	ldr	r3, [r3, #0]
a0002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002044:	683b      	ldr	r3, [r7, #0]
a0002046:	429a      	cmp	r2, r3
a0002048:	d811      	bhi.n	a000206e <vTaskPrioritySet+0xae>
						{
							xYieldRequired = pdTRUE;
a000204a:	f04f 0301 	mov.w	r3, #1
a000204e:	61bb      	str	r3, [r7, #24]
a0002050:	e00e      	b.n	a0002070 <vTaskPrioritySet+0xb0>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
a0002052:	f247 5354 	movw	r3, #30036	; 0x7554
a0002056:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000205a:	681b      	ldr	r3, [r3, #0]
a000205c:	68fa      	ldr	r2, [r7, #12]
a000205e:	429a      	cmp	r2, r3
a0002060:	d106      	bne.n	a0002070 <vTaskPrioritySet+0xb0>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
a0002062:	f04f 0301 	mov.w	r3, #1
a0002066:	61bb      	str	r3, [r7, #24]
a0002068:	e002      	b.n	a0002070 <vTaskPrioritySet+0xb0>
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
						{
							xYieldRequired = pdTRUE;
a000206a:	bf00      	nop
a000206c:	e000      	b.n	a0002070 <vTaskPrioritySet+0xb0>
a000206e:	bf00      	nop
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
a0002070:	68fb      	ldr	r3, [r7, #12]
a0002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002074:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
a0002076:	68fb      	ldr	r3, [r7, #12]
a0002078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
a000207a:	68fb      	ldr	r3, [r7, #12]
a000207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a000207e:	429a      	cmp	r2, r3
a0002080:	d102      	bne.n	a0002088 <vTaskPrioritySet+0xc8>
					{
						pxTCB->uxPriority = uxNewPriority;
a0002082:	68fb      	ldr	r3, [r7, #12]
a0002084:	683a      	ldr	r2, [r7, #0]
a0002086:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
a0002088:	68fb      	ldr	r3, [r7, #12]
a000208a:	683a      	ldr	r2, [r7, #0]
a000208c:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
a000208e:	68fb      	ldr	r3, [r7, #12]
a0002090:	699b      	ldr	r3, [r3, #24]
a0002092:	2b00      	cmp	r3, #0
a0002094:	db04      	blt.n	a00020a0 <vTaskPrioritySet+0xe0>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a0002096:	683b      	ldr	r3, [r7, #0]
a0002098:	f1c3 0205 	rsb	r2, r3, #5
a000209c:	68fb      	ldr	r3, [r7, #12]
a000209e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
a00020a0:	68fb      	ldr	r3, [r7, #12]
a00020a2:	6959      	ldr	r1, [r3, #20]
a00020a4:	697a      	ldr	r2, [r7, #20]
a00020a6:	4613      	mov	r3, r2
a00020a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
a00020ac:	4413      	add	r3, r2
a00020ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
a00020b2:	461a      	mov	r2, r3
a00020b4:	f247 5358 	movw	r3, #30040	; 0x7558
a00020b8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00020bc:	4413      	add	r3, r2
a00020be:	4299      	cmp	r1, r3
a00020c0:	d102      	bne.n	a00020c8 <vTaskPrioritySet+0x108>
a00020c2:	f04f 0301 	mov.w	r3, #1
a00020c6:	e001      	b.n	a00020cc <vTaskPrioritySet+0x10c>
a00020c8:	f04f 0300 	mov.w	r3, #0
a00020cc:	2b00      	cmp	r3, #0
a00020ce:	d042      	beq.n	a0002156 <vTaskPrioritySet+0x196>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
a00020d0:	68fb      	ldr	r3, [r7, #12]
a00020d2:	f103 0304 	add.w	r3, r3, #4
a00020d6:	4618      	mov	r0, r3
a00020d8:	f7ff f844 	bl	a0001164 <uxListRemove>
a00020dc:	4603      	mov	r3, r0
a00020de:	2b00      	cmp	r3, #0
a00020e0:	d112      	bne.n	a0002108 <vTaskPrioritySet+0x148>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
a00020e2:	697b      	ldr	r3, [r7, #20]
a00020e4:	f04f 0201 	mov.w	r2, #1
a00020e8:	fa02 f303 	lsl.w	r3, r2, r3
a00020ec:	ea6f 0203 	mvn.w	r2, r3
a00020f0:	f247 6334 	movw	r3, #30260	; 0x7634
a00020f4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00020f8:	681b      	ldr	r3, [r3, #0]
a00020fa:	ea02 0203 	and.w	r2, r2, r3
a00020fe:	f247 6334 	movw	r3, #30260	; 0x7634
a0002102:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002106:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
a0002108:	68fb      	ldr	r3, [r7, #12]
a000210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a000210c:	f04f 0201 	mov.w	r2, #1
a0002110:	fa02 f203 	lsl.w	r2, r2, r3
a0002114:	f247 6334 	movw	r3, #30260	; 0x7634
a0002118:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000211c:	681b      	ldr	r3, [r3, #0]
a000211e:	ea42 0203 	orr.w	r2, r2, r3
a0002122:	f247 6334 	movw	r3, #30260	; 0x7634
a0002126:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000212a:	601a      	str	r2, [r3, #0]
a000212c:	68fb      	ldr	r3, [r7, #12]
a000212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002130:	4613      	mov	r3, r2
a0002132:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002136:	4413      	add	r3, r2
a0002138:	ea4f 0383 	mov.w	r3, r3, lsl #2
a000213c:	461a      	mov	r2, r3
a000213e:	f247 5358 	movw	r3, #30040	; 0x7558
a0002142:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002146:	441a      	add	r2, r3
a0002148:	68fb      	ldr	r3, [r7, #12]
a000214a:	f103 0304 	add.w	r3, r3, #4
a000214e:	4610      	mov	r0, r2
a0002150:	4619      	mov	r1, r3
a0002152:	f7fe ffa9 	bl	a00010a8 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
a0002156:	69bb      	ldr	r3, [r7, #24]
a0002158:	2b00      	cmp	r3, #0
a000215a:	d00a      	beq.n	a0002172 <vTaskPrioritySet+0x1b2>
				{
					taskYIELD_IF_USING_PREEMPTION();
a000215c:	f64e 5304 	movw	r3, #60676	; 0xed04
a0002160:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0002164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0002168:	601a      	str	r2, [r3, #0]
a000216a:	f3bf 8f4f 	dsb	sy
a000216e:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
a0002172:	f002 f873 	bl	a000425c <vPortExitCritical>
	}
a0002176:	f107 0720 	add.w	r7, r7, #32
a000217a:	46bd      	mov	sp, r7
a000217c:	bd80      	pop	{r7, pc}
a000217e:	bf00      	nop

a0002180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
a0002180:	b580      	push	{r7, lr}
a0002182:	b086      	sub	sp, #24
a0002184:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
a0002186:	f04f 0300 	mov.w	r3, #0
a000218a:	9300      	str	r3, [sp, #0]
a000218c:	f247 6350 	movw	r3, #30288	; 0x7650
a0002190:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002194:	9301      	str	r3, [sp, #4]
a0002196:	f642 2095 	movw	r0, #10901	; 0x2a95
a000219a:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000219e:	f247 4140 	movw	r1, #29760	; 0x7440
a00021a2:	f2ca 0100 	movt	r1, #40960	; 0xa000
a00021a6:	f04f 0250 	mov.w	r2, #80	; 0x50
a00021aa:	f04f 0300 	mov.w	r3, #0
a00021ae:	f7ff fd6d 	bl	a0001c8c <xTaskCreate>
a00021b2:	4603      	mov	r3, r0
a00021b4:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
a00021b6:	687b      	ldr	r3, [r7, #4]
a00021b8:	2b01      	cmp	r3, #1
a00021ba:	d103      	bne.n	a00021c4 <vTaskStartScheduler+0x44>
		{
			xReturn = xTimerCreateTimerTask();
a00021bc:	f001 f8f4 	bl	a00033a8 <xTimerCreateTimerTask>
a00021c0:	4603      	mov	r3, r0
a00021c2:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
a00021c4:	687b      	ldr	r3, [r7, #4]
a00021c6:	2b01      	cmp	r3, #1
a00021c8:	d122      	bne.n	a0002210 <vTaskStartScheduler+0x90>
a00021ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00021ce:	f383 8811 	msr	BASEPRI, r3
a00021d2:	f3bf 8f6f 	isb	sy
a00021d6:	f3bf 8f4f 	dsb	sy
a00021da:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
a00021dc:	f247 634c 	movw	r3, #30284	; 0x764c
a00021e0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00021e4:	f04f 32ff 	mov.w	r2, #4294967295
a00021e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
a00021ea:	f247 6338 	movw	r3, #30264	; 0x7638
a00021ee:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00021f2:	f04f 0201 	mov.w	r2, #1
a00021f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
a00021f8:	f247 6330 	movw	r3, #30256	; 0x7630
a00021fc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002200:	f04f 0200 	mov.w	r2, #0
a0002204:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
a0002206:	f7fd ff13 	bl	a0000030 <vConfigureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
a000220a:	f001 ff69 	bl	a00040e0 <xPortStartScheduler>
a000220e:	e00d      	b.n	a000222c <vTaskStartScheduler+0xac>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
a0002210:	687b      	ldr	r3, [r7, #4]
a0002212:	f1b3 3fff 	cmp.w	r3, #4294967295
a0002216:	d109      	bne.n	a000222c <vTaskStartScheduler+0xac>
a0002218:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a000221c:	f383 8811 	msr	BASEPRI, r3
a0002220:	f3bf 8f6f 	isb	sy
a0002224:	f3bf 8f4f 	dsb	sy
a0002228:	60fb      	str	r3, [r7, #12]
a000222a:	e7fe      	b.n	a000222a <vTaskStartScheduler+0xaa>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
a000222c:	f107 0710 	add.w	r7, r7, #16
a0002230:	46bd      	mov	sp, r7
a0002232:	bd80      	pop	{r7, pc}

a0002234 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
a0002234:	b480      	push	{r7}
a0002236:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
a0002238:	f247 6354 	movw	r3, #30292	; 0x7654
a000223c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002240:	681b      	ldr	r3, [r3, #0]
a0002242:	f103 0201 	add.w	r2, r3, #1
a0002246:	f247 6354 	movw	r3, #30292	; 0x7654
a000224a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000224e:	601a      	str	r2, [r3, #0]
}
a0002250:	46bd      	mov	sp, r7
a0002252:	bc80      	pop	{r7}
a0002254:	4770      	bx	lr
a0002256:	bf00      	nop

a0002258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
a0002258:	b580      	push	{r7, lr}
a000225a:	b084      	sub	sp, #16
a000225c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
a000225e:	f04f 0300 	mov.w	r3, #0
a0002262:	603b      	str	r3, [r7, #0]
BaseType_t xAlreadyYielded = pdFALSE;
a0002264:	f04f 0300 	mov.w	r3, #0
a0002268:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
a000226a:	f247 6354 	movw	r3, #30292	; 0x7654
a000226e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002272:	681b      	ldr	r3, [r3, #0]
a0002274:	2b00      	cmp	r3, #0
a0002276:	d109      	bne.n	a000228c <xTaskResumeAll+0x34>
a0002278:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a000227c:	f383 8811 	msr	BASEPRI, r3
a0002280:	f3bf 8f6f 	isb	sy
a0002284:	f3bf 8f4f 	dsb	sy
a0002288:	60fb      	str	r3, [r7, #12]
a000228a:	e7fe      	b.n	a000228a <xTaskResumeAll+0x32>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
a000228c:	f001 ffae 	bl	a00041ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
a0002290:	f247 6354 	movw	r3, #30292	; 0x7654
a0002294:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002298:	681b      	ldr	r3, [r3, #0]
a000229a:	f103 32ff 	add.w	r2, r3, #4294967295
a000229e:	f247 6354 	movw	r3, #30292	; 0x7654
a00022a2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00022a6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
a00022a8:	f247 6354 	movw	r3, #30292	; 0x7654
a00022ac:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00022b0:	681b      	ldr	r3, [r3, #0]
a00022b2:	2b00      	cmp	r3, #0
a00022b4:	f040 8098 	bne.w	a00023e8 <xTaskResumeAll+0x190>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
a00022b8:	f247 632c 	movw	r3, #30252	; 0x762c
a00022bc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00022c0:	681b      	ldr	r3, [r3, #0]
a00022c2:	2b00      	cmp	r3, #0
a00022c4:	f000 8090 	beq.w	a00023e8 <xTaskResumeAll+0x190>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
a00022c8:	e04a      	b.n	a0002360 <xTaskResumeAll+0x108>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
a00022ca:	f247 53ec 	movw	r3, #30188	; 0x75ec
a00022ce:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00022d2:	68db      	ldr	r3, [r3, #12]
a00022d4:	68db      	ldr	r3, [r3, #12]
a00022d6:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
a00022d8:	683b      	ldr	r3, [r7, #0]
a00022da:	f103 0318 	add.w	r3, r3, #24
a00022de:	4618      	mov	r0, r3
a00022e0:	f7fe ff40 	bl	a0001164 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
a00022e4:	683b      	ldr	r3, [r7, #0]
a00022e6:	f103 0304 	add.w	r3, r3, #4
a00022ea:	4618      	mov	r0, r3
a00022ec:	f7fe ff3a 	bl	a0001164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
a00022f0:	683b      	ldr	r3, [r7, #0]
a00022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a00022f4:	f04f 0201 	mov.w	r2, #1
a00022f8:	fa02 f203 	lsl.w	r2, r2, r3
a00022fc:	f247 6334 	movw	r3, #30260	; 0x7634
a0002300:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002304:	681b      	ldr	r3, [r3, #0]
a0002306:	ea42 0203 	orr.w	r2, r2, r3
a000230a:	f247 6334 	movw	r3, #30260	; 0x7634
a000230e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002312:	601a      	str	r2, [r3, #0]
a0002314:	683b      	ldr	r3, [r7, #0]
a0002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002318:	4613      	mov	r3, r2
a000231a:	ea4f 0383 	mov.w	r3, r3, lsl #2
a000231e:	4413      	add	r3, r2
a0002320:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002324:	461a      	mov	r2, r3
a0002326:	f247 5358 	movw	r3, #30040	; 0x7558
a000232a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000232e:	441a      	add	r2, r3
a0002330:	683b      	ldr	r3, [r7, #0]
a0002332:	f103 0304 	add.w	r3, r3, #4
a0002336:	4610      	mov	r0, r2
a0002338:	4619      	mov	r1, r3
a000233a:	f7fe feb5 	bl	a00010a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
a000233e:	683b      	ldr	r3, [r7, #0]
a0002340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002342:	f247 5354 	movw	r3, #30036	; 0x7554
a0002346:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000234a:	681b      	ldr	r3, [r3, #0]
a000234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a000234e:	429a      	cmp	r2, r3
a0002350:	d306      	bcc.n	a0002360 <xTaskResumeAll+0x108>
					{
						xYieldPending = pdTRUE;
a0002352:	f247 6340 	movw	r3, #30272	; 0x7640
a0002356:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000235a:	f04f 0201 	mov.w	r2, #1
a000235e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
a0002360:	f247 53ec 	movw	r3, #30188	; 0x75ec
a0002364:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002368:	681b      	ldr	r3, [r3, #0]
a000236a:	2b00      	cmp	r3, #0
a000236c:	d1ad      	bne.n	a00022ca <xTaskResumeAll+0x72>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
a000236e:	683b      	ldr	r3, [r7, #0]
a0002370:	2b00      	cmp	r3, #0
a0002372:	d001      	beq.n	a0002378 <xTaskResumeAll+0x120>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
a0002374:	f000 fc58 	bl	a0002c28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
a0002378:	f247 633c 	movw	r3, #30268	; 0x763c
a000237c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002380:	681b      	ldr	r3, [r3, #0]
a0002382:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
a0002384:	68bb      	ldr	r3, [r7, #8]
a0002386:	2b00      	cmp	r3, #0
a0002388:	d019      	beq.n	a00023be <xTaskResumeAll+0x166>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
a000238a:	f000 f845 	bl	a0002418 <xTaskIncrementTick>
a000238e:	4603      	mov	r3, r0
a0002390:	2b00      	cmp	r3, #0
a0002392:	d006      	beq.n	a00023a2 <xTaskResumeAll+0x14a>
							{
								xYieldPending = pdTRUE;
a0002394:	f247 6340 	movw	r3, #30272	; 0x7640
a0002398:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000239c:	f04f 0201 	mov.w	r2, #1
a00023a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
a00023a2:	68bb      	ldr	r3, [r7, #8]
a00023a4:	f103 33ff 	add.w	r3, r3, #4294967295
a00023a8:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
a00023aa:	68bb      	ldr	r3, [r7, #8]
a00023ac:	2b00      	cmp	r3, #0
a00023ae:	d1ec      	bne.n	a000238a <xTaskResumeAll+0x132>

						uxPendedTicks = 0;
a00023b0:	f247 633c 	movw	r3, #30268	; 0x763c
a00023b4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00023b8:	f04f 0200 	mov.w	r2, #0
a00023bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
a00023be:	f247 6340 	movw	r3, #30272	; 0x7640
a00023c2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00023c6:	681b      	ldr	r3, [r3, #0]
a00023c8:	2b00      	cmp	r3, #0
a00023ca:	d00d      	beq.n	a00023e8 <xTaskResumeAll+0x190>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
a00023cc:	f04f 0301 	mov.w	r3, #1
a00023d0:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
a00023d2:	f64e 5304 	movw	r3, #60676	; 0xed04
a00023d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
a00023da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a00023de:	601a      	str	r2, [r3, #0]
a00023e0:	f3bf 8f4f 	dsb	sy
a00023e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
a00023e8:	f001 ff38 	bl	a000425c <vPortExitCritical>

	return xAlreadyYielded;
a00023ec:	687b      	ldr	r3, [r7, #4]
}
a00023ee:	4618      	mov	r0, r3
a00023f0:	f107 0710 	add.w	r7, r7, #16
a00023f4:	46bd      	mov	sp, r7
a00023f6:	bd80      	pop	{r7, pc}

a00023f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
a00023f8:	b480      	push	{r7}
a00023fa:	b083      	sub	sp, #12
a00023fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
a00023fe:	f247 6330 	movw	r3, #30256	; 0x7630
a0002402:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002406:	681b      	ldr	r3, [r3, #0]
a0002408:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
a000240a:	687b      	ldr	r3, [r7, #4]
}
a000240c:	4618      	mov	r0, r3
a000240e:	f107 070c 	add.w	r7, r7, #12
a0002412:	46bd      	mov	sp, r7
a0002414:	bc80      	pop	{r7}
a0002416:	4770      	bx	lr

a0002418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
a0002418:	b580      	push	{r7, lr}
a000241a:	b086      	sub	sp, #24
a000241c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
a000241e:	f04f 0300 	mov.w	r3, #0
a0002422:	60bb      	str	r3, [r7, #8]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
a0002424:	f247 6354 	movw	r3, #30292	; 0x7654
a0002428:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000242c:	681b      	ldr	r3, [r3, #0]
a000242e:	2b00      	cmp	r3, #0
a0002430:	f040 80dc 	bne.w	a00025ec <xTaskIncrementTick+0x1d4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
a0002434:	f247 6330 	movw	r3, #30256	; 0x7630
a0002438:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000243c:	681b      	ldr	r3, [r3, #0]
a000243e:	f103 0301 	add.w	r3, r3, #1
a0002442:	60fb      	str	r3, [r7, #12]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
a0002444:	f247 6330 	movw	r3, #30256	; 0x7630
a0002448:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000244c:	68fa      	ldr	r2, [r7, #12]
a000244e:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
a0002450:	68fb      	ldr	r3, [r7, #12]
a0002452:	2b00      	cmp	r3, #0
a0002454:	d135      	bne.n	a00024c2 <xTaskIncrementTick+0xaa>
		{
			taskSWITCH_DELAYED_LISTS();
a0002456:	f247 53e4 	movw	r3, #30180	; 0x75e4
a000245a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000245e:	681b      	ldr	r3, [r3, #0]
a0002460:	681b      	ldr	r3, [r3, #0]
a0002462:	2b00      	cmp	r3, #0
a0002464:	d009      	beq.n	a000247a <xTaskIncrementTick+0x62>
a0002466:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a000246a:	f383 8811 	msr	BASEPRI, r3
a000246e:	f3bf 8f6f 	isb	sy
a0002472:	f3bf 8f4f 	dsb	sy
a0002476:	617b      	str	r3, [r7, #20]
a0002478:	e7fe      	b.n	a0002478 <xTaskIncrementTick+0x60>
a000247a:	f247 53e4 	movw	r3, #30180	; 0x75e4
a000247e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002482:	681b      	ldr	r3, [r3, #0]
a0002484:	613b      	str	r3, [r7, #16]
a0002486:	f247 53e8 	movw	r3, #30184	; 0x75e8
a000248a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000248e:	681a      	ldr	r2, [r3, #0]
a0002490:	f247 53e4 	movw	r3, #30180	; 0x75e4
a0002494:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002498:	601a      	str	r2, [r3, #0]
a000249a:	f247 53e8 	movw	r3, #30184	; 0x75e8
a000249e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00024a2:	693a      	ldr	r2, [r7, #16]
a00024a4:	601a      	str	r2, [r3, #0]
a00024a6:	f247 6344 	movw	r3, #30276	; 0x7644
a00024aa:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00024ae:	681b      	ldr	r3, [r3, #0]
a00024b0:	f103 0201 	add.w	r2, r3, #1
a00024b4:	f247 6344 	movw	r3, #30276	; 0x7644
a00024b8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00024bc:	601a      	str	r2, [r3, #0]
a00024be:	f000 fbb3 	bl	a0002c28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
a00024c2:	f247 634c 	movw	r3, #30284	; 0x764c
a00024c6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00024ca:	681b      	ldr	r3, [r3, #0]
a00024cc:	68fa      	ldr	r2, [r7, #12]
a00024ce:	429a      	cmp	r2, r3
a00024d0:	d373      	bcc.n	a00025ba <xTaskIncrementTick+0x1a2>
a00024d2:	e000      	b.n	a00024d6 <xTaskIncrementTick+0xbe>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
a00024d4:	bf00      	nop
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
a00024d6:	f247 53e4 	movw	r3, #30180	; 0x75e4
a00024da:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00024de:	681b      	ldr	r3, [r3, #0]
a00024e0:	681b      	ldr	r3, [r3, #0]
a00024e2:	2b00      	cmp	r3, #0
a00024e4:	d102      	bne.n	a00024ec <xTaskIncrementTick+0xd4>
a00024e6:	f04f 0301 	mov.w	r3, #1
a00024ea:	e001      	b.n	a00024f0 <xTaskIncrementTick+0xd8>
a00024ec:	f04f 0300 	mov.w	r3, #0
a00024f0:	2b00      	cmp	r3, #0
a00024f2:	d007      	beq.n	a0002504 <xTaskIncrementTick+0xec>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a00024f4:	f247 634c 	movw	r3, #30284	; 0x764c
a00024f8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00024fc:	f04f 32ff 	mov.w	r2, #4294967295
a0002500:	601a      	str	r2, [r3, #0]
					break;
a0002502:	e05a      	b.n	a00025ba <xTaskIncrementTick+0x1a2>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
a0002504:	f247 53e4 	movw	r3, #30180	; 0x75e4
a0002508:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000250c:	681b      	ldr	r3, [r3, #0]
a000250e:	68db      	ldr	r3, [r3, #12]
a0002510:	68db      	ldr	r3, [r3, #12]
a0002512:	603b      	str	r3, [r7, #0]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
a0002514:	683b      	ldr	r3, [r7, #0]
a0002516:	685b      	ldr	r3, [r3, #4]
a0002518:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
a000251a:	68fa      	ldr	r2, [r7, #12]
a000251c:	687b      	ldr	r3, [r7, #4]
a000251e:	429a      	cmp	r2, r3
a0002520:	d206      	bcs.n	a0002530 <xTaskIncrementTick+0x118>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
a0002522:	f247 634c 	movw	r3, #30284	; 0x764c
a0002526:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000252a:	687a      	ldr	r2, [r7, #4]
a000252c:	601a      	str	r2, [r3, #0]
						break;
a000252e:	e044      	b.n	a00025ba <xTaskIncrementTick+0x1a2>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
a0002530:	683b      	ldr	r3, [r7, #0]
a0002532:	f103 0304 	add.w	r3, r3, #4
a0002536:	4618      	mov	r0, r3
a0002538:	f7fe fe14 	bl	a0001164 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
a000253c:	683b      	ldr	r3, [r7, #0]
a000253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
a0002540:	2b00      	cmp	r3, #0
a0002542:	d005      	beq.n	a0002550 <xTaskIncrementTick+0x138>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
a0002544:	683b      	ldr	r3, [r7, #0]
a0002546:	f103 0318 	add.w	r3, r3, #24
a000254a:	4618      	mov	r0, r3
a000254c:	f7fe fe0a 	bl	a0001164 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
a0002550:	683b      	ldr	r3, [r7, #0]
a0002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002554:	f04f 0201 	mov.w	r2, #1
a0002558:	fa02 f203 	lsl.w	r2, r2, r3
a000255c:	f247 6334 	movw	r3, #30260	; 0x7634
a0002560:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002564:	681b      	ldr	r3, [r3, #0]
a0002566:	ea42 0203 	orr.w	r2, r2, r3
a000256a:	f247 6334 	movw	r3, #30260	; 0x7634
a000256e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002572:	601a      	str	r2, [r3, #0]
a0002574:	683b      	ldr	r3, [r7, #0]
a0002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002578:	4613      	mov	r3, r2
a000257a:	ea4f 0383 	mov.w	r3, r3, lsl #2
a000257e:	4413      	add	r3, r2
a0002580:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002584:	461a      	mov	r2, r3
a0002586:	f247 5358 	movw	r3, #30040	; 0x7558
a000258a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000258e:	441a      	add	r2, r3
a0002590:	683b      	ldr	r3, [r7, #0]
a0002592:	f103 0304 	add.w	r3, r3, #4
a0002596:	4610      	mov	r0, r2
a0002598:	4619      	mov	r1, r3
a000259a:	f7fe fd85 	bl	a00010a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
a000259e:	683b      	ldr	r3, [r7, #0]
a00025a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a00025a2:	f247 5354 	movw	r3, #30036	; 0x7554
a00025a6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00025aa:	681b      	ldr	r3, [r3, #0]
a00025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a00025ae:	429a      	cmp	r2, r3
a00025b0:	d390      	bcc.n	a00024d4 <xTaskIncrementTick+0xbc>
						{
							xSwitchRequired = pdTRUE;
a00025b2:	f04f 0301 	mov.w	r3, #1
a00025b6:	60bb      	str	r3, [r7, #8]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
a00025b8:	e78d      	b.n	a00024d6 <xTaskIncrementTick+0xbe>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
a00025ba:	f247 5354 	movw	r3, #30036	; 0x7554
a00025be:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00025c2:	681b      	ldr	r3, [r3, #0]
a00025c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a00025c6:	4613      	mov	r3, r2
a00025c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
a00025cc:	4413      	add	r3, r2
a00025ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
a00025d2:	461a      	mov	r2, r3
a00025d4:	f247 5358 	movw	r3, #30040	; 0x7558
a00025d8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00025dc:	4413      	add	r3, r2
a00025de:	681b      	ldr	r3, [r3, #0]
a00025e0:	2b01      	cmp	r3, #1
a00025e2:	d910      	bls.n	a0002606 <xTaskIncrementTick+0x1ee>
			{
				xSwitchRequired = pdTRUE;
a00025e4:	f04f 0301 	mov.w	r3, #1
a00025e8:	60bb      	str	r3, [r7, #8]
a00025ea:	e00d      	b.n	a0002608 <xTaskIncrementTick+0x1f0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
a00025ec:	f247 633c 	movw	r3, #30268	; 0x763c
a00025f0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00025f4:	681b      	ldr	r3, [r3, #0]
a00025f6:	f103 0201 	add.w	r2, r3, #1
a00025fa:	f247 633c 	movw	r3, #30268	; 0x763c
a00025fe:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002602:	601a      	str	r2, [r3, #0]
a0002604:	e000      	b.n	a0002608 <xTaskIncrementTick+0x1f0>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
a0002606:	bf00      	nop
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
a0002608:	f247 6340 	movw	r3, #30272	; 0x7640
a000260c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002610:	681b      	ldr	r3, [r3, #0]
a0002612:	2b00      	cmp	r3, #0
a0002614:	d002      	beq.n	a000261c <xTaskIncrementTick+0x204>
		{
			xSwitchRequired = pdTRUE;
a0002616:	f04f 0301 	mov.w	r3, #1
a000261a:	60bb      	str	r3, [r7, #8]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
a000261c:	68bb      	ldr	r3, [r7, #8]
}
a000261e:	4618      	mov	r0, r3
a0002620:	f107 0718 	add.w	r7, r7, #24
a0002624:	46bd      	mov	sp, r7
a0002626:	bd80      	pop	{r7, pc}

a0002628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
a0002628:	b580      	push	{r7, lr}
a000262a:	b088      	sub	sp, #32
a000262c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
a000262e:	f247 6354 	movw	r3, #30292	; 0x7654
a0002632:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002636:	681b      	ldr	r3, [r3, #0]
a0002638:	2b00      	cmp	r3, #0
a000263a:	d007      	beq.n	a000264c <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
a000263c:	f247 6340 	movw	r3, #30272	; 0x7640
a0002640:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002644:	f04f 0201 	mov.w	r2, #1
a0002648:	601a      	str	r2, [r3, #0]
a000264a:	e0bc      	b.n	a00027c6 <vTaskSwitchContext+0x19e>
	}
	else
	{
		xYieldPending = pdFALSE;
a000264c:	f247 6340 	movw	r3, #30272	; 0x7640
a0002650:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002654:	f04f 0200 	mov.w	r2, #0
a0002658:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
a000265a:	f7fd fd0d 	bl	a0000078 <ulGetRunTimeCounterValue>
a000265e:	4602      	mov	r2, r0
a0002660:	f247 635c 	movw	r3, #30300	; 0x765c
a0002664:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002668:	601a      	str	r2, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
a000266a:	f247 635c 	movw	r3, #30300	; 0x765c
a000266e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002672:	681a      	ldr	r2, [r3, #0]
a0002674:	f247 6358 	movw	r3, #30296	; 0x7658
a0002678:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000267c:	681b      	ldr	r3, [r3, #0]
a000267e:	429a      	cmp	r2, r3
a0002680:	d913      	bls.n	a00026aa <vTaskSwitchContext+0x82>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
a0002682:	f247 5354 	movw	r3, #30036	; 0x7554
a0002686:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000268a:	681a      	ldr	r2, [r3, #0]
a000268c:	6d11      	ldr	r1, [r2, #80]	; 0x50
a000268e:	f247 635c 	movw	r3, #30300	; 0x765c
a0002692:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002696:	6818      	ldr	r0, [r3, #0]
a0002698:	f247 6358 	movw	r3, #30296	; 0x7658
a000269c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00026a0:	681b      	ldr	r3, [r3, #0]
a00026a2:	ebc3 0300 	rsb	r3, r3, r0
a00026a6:	440b      	add	r3, r1
a00026a8:	6513      	str	r3, [r2, #80]	; 0x50
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
a00026aa:	f247 635c 	movw	r3, #30300	; 0x765c
a00026ae:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00026b2:	681a      	ldr	r2, [r3, #0]
a00026b4:	f247 6358 	movw	r3, #30296	; 0x7658
a00026b8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00026bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
a00026be:	f247 5354 	movw	r3, #30036	; 0x7554
a00026c2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00026c6:	681b      	ldr	r3, [r3, #0]
a00026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
a00026ca:	607b      	str	r3, [r7, #4]
a00026cc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
a00026d0:	60bb      	str	r3, [r7, #8]
a00026d2:	687b      	ldr	r3, [r7, #4]
a00026d4:	681a      	ldr	r2, [r3, #0]
a00026d6:	68bb      	ldr	r3, [r7, #8]
a00026d8:	429a      	cmp	r2, r3
a00026da:	d114      	bne.n	a0002706 <vTaskSwitchContext+0xde>
a00026dc:	687b      	ldr	r3, [r7, #4]
a00026de:	f103 0304 	add.w	r3, r3, #4
a00026e2:	681a      	ldr	r2, [r3, #0]
a00026e4:	68bb      	ldr	r3, [r7, #8]
a00026e6:	429a      	cmp	r2, r3
a00026e8:	d10d      	bne.n	a0002706 <vTaskSwitchContext+0xde>
a00026ea:	687b      	ldr	r3, [r7, #4]
a00026ec:	f103 0308 	add.w	r3, r3, #8
a00026f0:	681a      	ldr	r2, [r3, #0]
a00026f2:	68bb      	ldr	r3, [r7, #8]
a00026f4:	429a      	cmp	r2, r3
a00026f6:	d106      	bne.n	a0002706 <vTaskSwitchContext+0xde>
a00026f8:	687b      	ldr	r3, [r7, #4]
a00026fa:	f103 030c 	add.w	r3, r3, #12
a00026fe:	681a      	ldr	r2, [r3, #0]
a0002700:	68bb      	ldr	r3, [r7, #8]
a0002702:	429a      	cmp	r2, r3
a0002704:	d00f      	beq.n	a0002726 <vTaskSwitchContext+0xfe>
a0002706:	f247 5354 	movw	r3, #30036	; 0x7554
a000270a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000270e:	681a      	ldr	r2, [r3, #0]
a0002710:	f247 5354 	movw	r3, #30036	; 0x7554
a0002714:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002718:	681b      	ldr	r3, [r3, #0]
a000271a:	f103 0334 	add.w	r3, r3, #52	; 0x34
a000271e:	4610      	mov	r0, r2
a0002720:	4619      	mov	r1, r3
a0002722:	f7fd fd17 	bl	a0000154 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
a0002726:	f247 6334 	movw	r3, #30260	; 0x7634
a000272a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000272e:	681b      	ldr	r3, [r3, #0]
a0002730:	617b      	str	r3, [r7, #20]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
a0002732:	697b      	ldr	r3, [r7, #20]
a0002734:	fab3 f383 	clz	r3, r3
a0002738:	76fb      	strb	r3, [r7, #27]
		return ucReturn;
a000273a:	7efb      	ldrb	r3, [r7, #27]
a000273c:	f1c3 031f 	rsb	r3, r3, #31
a0002740:	60fb      	str	r3, [r7, #12]
a0002742:	68fa      	ldr	r2, [r7, #12]
a0002744:	4613      	mov	r3, r2
a0002746:	ea4f 0383 	mov.w	r3, r3, lsl #2
a000274a:	4413      	add	r3, r2
a000274c:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002750:	461a      	mov	r2, r3
a0002752:	f247 5358 	movw	r3, #30040	; 0x7558
a0002756:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000275a:	4413      	add	r3, r2
a000275c:	681b      	ldr	r3, [r3, #0]
a000275e:	2b00      	cmp	r3, #0
a0002760:	d109      	bne.n	a0002776 <vTaskSwitchContext+0x14e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
a0002762:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0002766:	f383 8811 	msr	BASEPRI, r3
a000276a:	f3bf 8f6f 	isb	sy
a000276e:	f3bf 8f4f 	dsb	sy
a0002772:	61fb      	str	r3, [r7, #28]
a0002774:	e7fe      	b.n	a0002774 <vTaskSwitchContext+0x14c>
a0002776:	68fa      	ldr	r2, [r7, #12]
a0002778:	4613      	mov	r3, r2
a000277a:	ea4f 0383 	mov.w	r3, r3, lsl #2
a000277e:	4413      	add	r3, r2
a0002780:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002784:	461a      	mov	r2, r3
a0002786:	f247 5358 	movw	r3, #30040	; 0x7558
a000278a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000278e:	4413      	add	r3, r2
a0002790:	613b      	str	r3, [r7, #16]
a0002792:	693b      	ldr	r3, [r7, #16]
a0002794:	685b      	ldr	r3, [r3, #4]
a0002796:	685a      	ldr	r2, [r3, #4]
a0002798:	693b      	ldr	r3, [r7, #16]
a000279a:	605a      	str	r2, [r3, #4]
a000279c:	693b      	ldr	r3, [r7, #16]
a000279e:	685a      	ldr	r2, [r3, #4]
a00027a0:	693b      	ldr	r3, [r7, #16]
a00027a2:	f103 0308 	add.w	r3, r3, #8
a00027a6:	429a      	cmp	r2, r3
a00027a8:	d104      	bne.n	a00027b4 <vTaskSwitchContext+0x18c>
a00027aa:	693b      	ldr	r3, [r7, #16]
a00027ac:	685b      	ldr	r3, [r3, #4]
a00027ae:	685a      	ldr	r2, [r3, #4]
a00027b0:	693b      	ldr	r3, [r7, #16]
a00027b2:	605a      	str	r2, [r3, #4]
a00027b4:	693b      	ldr	r3, [r7, #16]
a00027b6:	685b      	ldr	r3, [r3, #4]
a00027b8:	68db      	ldr	r3, [r3, #12]
a00027ba:	461a      	mov	r2, r3
a00027bc:	f247 5354 	movw	r3, #30036	; 0x7554
a00027c0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00027c4:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
a00027c6:	f107 0720 	add.w	r7, r7, #32
a00027ca:	46bd      	mov	sp, r7
a00027cc:	bd80      	pop	{r7, pc}
a00027ce:	bf00      	nop

a00027d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
a00027d0:	b580      	push	{r7, lr}
a00027d2:	b084      	sub	sp, #16
a00027d4:	af00      	add	r7, sp, #0
a00027d6:	6078      	str	r0, [r7, #4]
a00027d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
a00027da:	687b      	ldr	r3, [r7, #4]
a00027dc:	2b00      	cmp	r3, #0
a00027de:	d109      	bne.n	a00027f4 <vTaskPlaceOnEventList+0x24>
a00027e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00027e4:	f383 8811 	msr	BASEPRI, r3
a00027e8:	f3bf 8f6f 	isb	sy
a00027ec:	f3bf 8f4f 	dsb	sy
a00027f0:	60fb      	str	r3, [r7, #12]
a00027f2:	e7fe      	b.n	a00027f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
a00027f4:	f247 5354 	movw	r3, #30036	; 0x7554
a00027f8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00027fc:	681b      	ldr	r3, [r3, #0]
a00027fe:	f103 0318 	add.w	r3, r3, #24
a0002802:	6878      	ldr	r0, [r7, #4]
a0002804:	4619      	mov	r1, r3
a0002806:	f7fe fc73 	bl	a00010f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
a000280a:	6838      	ldr	r0, [r7, #0]
a000280c:	f04f 0101 	mov.w	r1, #1
a0002810:	f000 fd42 	bl	a0003298 <prvAddCurrentTaskToDelayedList>
}
a0002814:	f107 0710 	add.w	r7, r7, #16
a0002818:	46bd      	mov	sp, r7
a000281a:	bd80      	pop	{r7, pc}

a000281c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
a000281c:	b580      	push	{r7, lr}
a000281e:	b086      	sub	sp, #24
a0002820:	af00      	add	r7, sp, #0
a0002822:	60f8      	str	r0, [r7, #12]
a0002824:	60b9      	str	r1, [r7, #8]
a0002826:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
a0002828:	68fb      	ldr	r3, [r7, #12]
a000282a:	2b00      	cmp	r3, #0
a000282c:	d109      	bne.n	a0002842 <vTaskPlaceOnEventListRestricted+0x26>
a000282e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0002832:	f383 8811 	msr	BASEPRI, r3
a0002836:	f3bf 8f6f 	isb	sy
a000283a:	f3bf 8f4f 	dsb	sy
a000283e:	617b      	str	r3, [r7, #20]
a0002840:	e7fe      	b.n	a0002840 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
a0002842:	f247 5354 	movw	r3, #30036	; 0x7554
a0002846:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000284a:	681b      	ldr	r3, [r3, #0]
a000284c:	f103 0318 	add.w	r3, r3, #24
a0002850:	68f8      	ldr	r0, [r7, #12]
a0002852:	4619      	mov	r1, r3
a0002854:	f7fe fc28 	bl	a00010a8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
a0002858:	687b      	ldr	r3, [r7, #4]
a000285a:	2b00      	cmp	r3, #0
a000285c:	d002      	beq.n	a0002864 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
a000285e:	f04f 33ff 	mov.w	r3, #4294967295
a0002862:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
a0002864:	68b8      	ldr	r0, [r7, #8]
a0002866:	6879      	ldr	r1, [r7, #4]
a0002868:	f000 fd16 	bl	a0003298 <prvAddCurrentTaskToDelayedList>
	}
a000286c:	f107 0718 	add.w	r7, r7, #24
a0002870:	46bd      	mov	sp, r7
a0002872:	bd80      	pop	{r7, pc}

a0002874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
a0002874:	b580      	push	{r7, lr}
a0002876:	b086      	sub	sp, #24
a0002878:	af00      	add	r7, sp, #0
a000287a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
a000287c:	687b      	ldr	r3, [r7, #4]
a000287e:	68db      	ldr	r3, [r3, #12]
a0002880:	68db      	ldr	r3, [r3, #12]
a0002882:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
a0002884:	68fb      	ldr	r3, [r7, #12]
a0002886:	2b00      	cmp	r3, #0
a0002888:	d109      	bne.n	a000289e <xTaskRemoveFromEventList+0x2a>
a000288a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a000288e:	f383 8811 	msr	BASEPRI, r3
a0002892:	f3bf 8f6f 	isb	sy
a0002896:	f3bf 8f4f 	dsb	sy
a000289a:	617b      	str	r3, [r7, #20]
a000289c:	e7fe      	b.n	a000289c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
a000289e:	68fb      	ldr	r3, [r7, #12]
a00028a0:	f103 0318 	add.w	r3, r3, #24
a00028a4:	4618      	mov	r0, r3
a00028a6:	f7fe fc5d 	bl	a0001164 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
a00028aa:	f247 6354 	movw	r3, #30292	; 0x7654
a00028ae:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00028b2:	681b      	ldr	r3, [r3, #0]
a00028b4:	2b00      	cmp	r3, #0
a00028b6:	d12d      	bne.n	a0002914 <xTaskRemoveFromEventList+0xa0>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
a00028b8:	68fb      	ldr	r3, [r7, #12]
a00028ba:	f103 0304 	add.w	r3, r3, #4
a00028be:	4618      	mov	r0, r3
a00028c0:	f7fe fc50 	bl	a0001164 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
a00028c4:	68fb      	ldr	r3, [r7, #12]
a00028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a00028c8:	f04f 0201 	mov.w	r2, #1
a00028cc:	fa02 f203 	lsl.w	r2, r2, r3
a00028d0:	f247 6334 	movw	r3, #30260	; 0x7634
a00028d4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00028d8:	681b      	ldr	r3, [r3, #0]
a00028da:	ea42 0203 	orr.w	r2, r2, r3
a00028de:	f247 6334 	movw	r3, #30260	; 0x7634
a00028e2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00028e6:	601a      	str	r2, [r3, #0]
a00028e8:	68fb      	ldr	r3, [r7, #12]
a00028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a00028ec:	4613      	mov	r3, r2
a00028ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
a00028f2:	4413      	add	r3, r2
a00028f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
a00028f8:	461a      	mov	r2, r3
a00028fa:	f247 5358 	movw	r3, #30040	; 0x7558
a00028fe:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002902:	441a      	add	r2, r3
a0002904:	68fb      	ldr	r3, [r7, #12]
a0002906:	f103 0304 	add.w	r3, r3, #4
a000290a:	4610      	mov	r0, r2
a000290c:	4619      	mov	r1, r3
a000290e:	f7fe fbcb 	bl	a00010a8 <vListInsertEnd>
a0002912:	e009      	b.n	a0002928 <xTaskRemoveFromEventList+0xb4>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
a0002914:	68fb      	ldr	r3, [r7, #12]
a0002916:	f103 0318 	add.w	r3, r3, #24
a000291a:	f247 50ec 	movw	r0, #30188	; 0x75ec
a000291e:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0002922:	4619      	mov	r1, r3
a0002924:	f7fe fbc0 	bl	a00010a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
a0002928:	68fb      	ldr	r3, [r7, #12]
a000292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a000292c:	f247 5354 	movw	r3, #30036	; 0x7554
a0002930:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002934:	681b      	ldr	r3, [r3, #0]
a0002936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002938:	429a      	cmp	r2, r3
a000293a:	d90a      	bls.n	a0002952 <xTaskRemoveFromEventList+0xde>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
a000293c:	f04f 0301 	mov.w	r3, #1
a0002940:	613b      	str	r3, [r7, #16]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
a0002942:	f247 6340 	movw	r3, #30272	; 0x7640
a0002946:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000294a:	f04f 0201 	mov.w	r2, #1
a000294e:	601a      	str	r2, [r3, #0]
a0002950:	e002      	b.n	a0002958 <xTaskRemoveFromEventList+0xe4>
	}
	else
	{
		xReturn = pdFALSE;
a0002952:	f04f 0300 	mov.w	r3, #0
a0002956:	613b      	str	r3, [r7, #16]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
a0002958:	693b      	ldr	r3, [r7, #16]
}
a000295a:	4618      	mov	r0, r3
a000295c:	f107 0718 	add.w	r7, r7, #24
a0002960:	46bd      	mov	sp, r7
a0002962:	bd80      	pop	{r7, pc}

a0002964 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
a0002964:	b480      	push	{r7}
a0002966:	b085      	sub	sp, #20
a0002968:	af00      	add	r7, sp, #0
a000296a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
a000296c:	687b      	ldr	r3, [r7, #4]
a000296e:	2b00      	cmp	r3, #0
a0002970:	d109      	bne.n	a0002986 <vTaskSetTimeOutState+0x22>
a0002972:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0002976:	f383 8811 	msr	BASEPRI, r3
a000297a:	f3bf 8f6f 	isb	sy
a000297e:	f3bf 8f4f 	dsb	sy
a0002982:	60fb      	str	r3, [r7, #12]
a0002984:	e7fe      	b.n	a0002984 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
a0002986:	f247 6344 	movw	r3, #30276	; 0x7644
a000298a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000298e:	681a      	ldr	r2, [r3, #0]
a0002990:	687b      	ldr	r3, [r7, #4]
a0002992:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
a0002994:	f247 6330 	movw	r3, #30256	; 0x7630
a0002998:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000299c:	681a      	ldr	r2, [r3, #0]
a000299e:	687b      	ldr	r3, [r7, #4]
a00029a0:	605a      	str	r2, [r3, #4]
}
a00029a2:	f107 0714 	add.w	r7, r7, #20
a00029a6:	46bd      	mov	sp, r7
a00029a8:	bc80      	pop	{r7}
a00029aa:	4770      	bx	lr

a00029ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
a00029ac:	b580      	push	{r7, lr}
a00029ae:	b086      	sub	sp, #24
a00029b0:	af00      	add	r7, sp, #0
a00029b2:	6078      	str	r0, [r7, #4]
a00029b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
a00029b6:	687b      	ldr	r3, [r7, #4]
a00029b8:	2b00      	cmp	r3, #0
a00029ba:	d109      	bne.n	a00029d0 <xTaskCheckForTimeOut+0x24>
a00029bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00029c0:	f383 8811 	msr	BASEPRI, r3
a00029c4:	f3bf 8f6f 	isb	sy
a00029c8:	f3bf 8f4f 	dsb	sy
a00029cc:	613b      	str	r3, [r7, #16]
a00029ce:	e7fe      	b.n	a00029ce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
a00029d0:	683b      	ldr	r3, [r7, #0]
a00029d2:	2b00      	cmp	r3, #0
a00029d4:	d109      	bne.n	a00029ea <xTaskCheckForTimeOut+0x3e>
a00029d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00029da:	f383 8811 	msr	BASEPRI, r3
a00029de:	f3bf 8f6f 	isb	sy
a00029e2:	f3bf 8f4f 	dsb	sy
a00029e6:	617b      	str	r3, [r7, #20]
a00029e8:	e7fe      	b.n	a00029e8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
a00029ea:	f001 fbff 	bl	a00041ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
a00029ee:	f247 6330 	movw	r3, #30256	; 0x7630
a00029f2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00029f6:	681b      	ldr	r3, [r3, #0]
a00029f8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
a00029fa:	683b      	ldr	r3, [r7, #0]
a00029fc:	681b      	ldr	r3, [r3, #0]
a00029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
a0002a02:	d103      	bne.n	a0002a0c <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
a0002a04:	f04f 0300 	mov.w	r3, #0
a0002a08:	60bb      	str	r3, [r7, #8]
a0002a0a:	e02e      	b.n	a0002a6a <xTaskCheckForTimeOut+0xbe>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
a0002a0c:	687b      	ldr	r3, [r7, #4]
a0002a0e:	681a      	ldr	r2, [r3, #0]
a0002a10:	f247 6344 	movw	r3, #30276	; 0x7644
a0002a14:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002a18:	681b      	ldr	r3, [r3, #0]
a0002a1a:	429a      	cmp	r2, r3
a0002a1c:	d008      	beq.n	a0002a30 <xTaskCheckForTimeOut+0x84>
a0002a1e:	687b      	ldr	r3, [r7, #4]
a0002a20:	685a      	ldr	r2, [r3, #4]
a0002a22:	68fb      	ldr	r3, [r7, #12]
a0002a24:	429a      	cmp	r2, r3
a0002a26:	d803      	bhi.n	a0002a30 <xTaskCheckForTimeOut+0x84>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
a0002a28:	f04f 0301 	mov.w	r3, #1
a0002a2c:	60bb      	str	r3, [r7, #8]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
a0002a2e:	e01c      	b.n	a0002a6a <xTaskCheckForTimeOut+0xbe>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
a0002a30:	687b      	ldr	r3, [r7, #4]
a0002a32:	685b      	ldr	r3, [r3, #4]
a0002a34:	68fa      	ldr	r2, [r7, #12]
a0002a36:	ebc3 0202 	rsb	r2, r3, r2
a0002a3a:	683b      	ldr	r3, [r7, #0]
a0002a3c:	681b      	ldr	r3, [r3, #0]
a0002a3e:	429a      	cmp	r2, r3
a0002a40:	d210      	bcs.n	a0002a64 <xTaskCheckForTimeOut+0xb8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
a0002a42:	683b      	ldr	r3, [r7, #0]
a0002a44:	681a      	ldr	r2, [r3, #0]
a0002a46:	687b      	ldr	r3, [r7, #4]
a0002a48:	6859      	ldr	r1, [r3, #4]
a0002a4a:	68fb      	ldr	r3, [r7, #12]
a0002a4c:	ebc3 0301 	rsb	r3, r3, r1
a0002a50:	441a      	add	r2, r3
a0002a52:	683b      	ldr	r3, [r7, #0]
a0002a54:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
a0002a56:	6878      	ldr	r0, [r7, #4]
a0002a58:	f7ff ff84 	bl	a0002964 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
a0002a5c:	f04f 0300 	mov.w	r3, #0
a0002a60:	60bb      	str	r3, [r7, #8]
a0002a62:	e002      	b.n	a0002a6a <xTaskCheckForTimeOut+0xbe>
		}
		else
		{
			xReturn = pdTRUE;
a0002a64:	f04f 0301 	mov.w	r3, #1
a0002a68:	60bb      	str	r3, [r7, #8]
		}
	}
	taskEXIT_CRITICAL();
a0002a6a:	f001 fbf7 	bl	a000425c <vPortExitCritical>

	return xReturn;
a0002a6e:	68bb      	ldr	r3, [r7, #8]
}
a0002a70:	4618      	mov	r0, r3
a0002a72:	f107 0718 	add.w	r7, r7, #24
a0002a76:	46bd      	mov	sp, r7
a0002a78:	bd80      	pop	{r7, pc}
a0002a7a:	bf00      	nop

a0002a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
a0002a7c:	b480      	push	{r7}
a0002a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
a0002a80:	f247 6340 	movw	r3, #30272	; 0x7640
a0002a84:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002a88:	f04f 0201 	mov.w	r2, #1
a0002a8c:	601a      	str	r2, [r3, #0]
}
a0002a8e:	46bd      	mov	sp, r7
a0002a90:	bc80      	pop	{r7}
a0002a92:	4770      	bx	lr

a0002a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
a0002a94:	b580      	push	{r7, lr}
a0002a96:	b082      	sub	sp, #8
a0002a98:	af00      	add	r7, sp, #0
a0002a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
a0002a9c:	f000 f868 	bl	a0002b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
a0002aa0:	f247 5358 	movw	r3, #30040	; 0x7558
a0002aa4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002aa8:	681b      	ldr	r3, [r3, #0]
a0002aaa:	2b01      	cmp	r3, #1
a0002aac:	d90a      	bls.n	a0002ac4 <prvIdleTask+0x30>
			{
				taskYIELD();
a0002aae:	f64e 5304 	movw	r3, #60676	; 0xed04
a0002ab2:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0002ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0002aba:	601a      	str	r2, [r3, #0]
a0002abc:	f3bf 8f4f 	dsb	sy
a0002ac0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
a0002ac4:	f7fd fb40 	bl	a0000148 <vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
a0002ac8:	e7e8      	b.n	a0002a9c <prvIdleTask+0x8>
a0002aca:	bf00      	nop

a0002acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
a0002acc:	b580      	push	{r7, lr}
a0002ace:	b082      	sub	sp, #8
a0002ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
a0002ad2:	f04f 0300 	mov.w	r3, #0
a0002ad6:	607b      	str	r3, [r7, #4]
a0002ad8:	e013      	b.n	a0002b02 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
a0002ada:	687a      	ldr	r2, [r7, #4]
a0002adc:	4613      	mov	r3, r2
a0002ade:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002ae2:	4413      	add	r3, r2
a0002ae4:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002ae8:	461a      	mov	r2, r3
a0002aea:	f247 5358 	movw	r3, #30040	; 0x7558
a0002aee:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002af2:	4413      	add	r3, r2
a0002af4:	4618      	mov	r0, r3
a0002af6:	f7fe faa5 	bl	a0001044 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
a0002afa:	687b      	ldr	r3, [r7, #4]
a0002afc:	f103 0301 	add.w	r3, r3, #1
a0002b00:	607b      	str	r3, [r7, #4]
a0002b02:	687b      	ldr	r3, [r7, #4]
a0002b04:	2b04      	cmp	r3, #4
a0002b06:	d9e8      	bls.n	a0002ada <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
a0002b08:	f247 50bc 	movw	r0, #30140	; 0x75bc
a0002b0c:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0002b10:	f7fe fa98 	bl	a0001044 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
a0002b14:	f247 50d0 	movw	r0, #30160	; 0x75d0
a0002b18:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0002b1c:	f7fe fa92 	bl	a0001044 <vListInitialise>
	vListInitialise( &xPendingReadyList );
a0002b20:	f247 50ec 	movw	r0, #30188	; 0x75ec
a0002b24:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0002b28:	f7fe fa8c 	bl	a0001044 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
a0002b2c:	f247 6000 	movw	r0, #30208	; 0x7600
a0002b30:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0002b34:	f7fe fa86 	bl	a0001044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
a0002b38:	f247 6018 	movw	r0, #30232	; 0x7618
a0002b3c:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0002b40:	f7fe fa80 	bl	a0001044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
a0002b44:	f247 53e4 	movw	r3, #30180	; 0x75e4
a0002b48:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002b4c:	f247 52bc 	movw	r2, #30140	; 0x75bc
a0002b50:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0002b54:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
a0002b56:	f247 53e8 	movw	r3, #30184	; 0x75e8
a0002b5a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002b5e:	f247 52d0 	movw	r2, #30160	; 0x75d0
a0002b62:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0002b66:	601a      	str	r2, [r3, #0]
}
a0002b68:	f107 0708 	add.w	r7, r7, #8
a0002b6c:	46bd      	mov	sp, r7
a0002b6e:	bd80      	pop	{r7, pc}

a0002b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
a0002b70:	b580      	push	{r7, lr}
a0002b72:	b082      	sub	sp, #8
a0002b74:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
a0002b76:	e03c      	b.n	a0002bf2 <prvCheckTasksWaitingTermination+0x82>
		{
			vTaskSuspendAll();
a0002b78:	f7ff fb5c 	bl	a0002234 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
a0002b7c:	f247 6300 	movw	r3, #30208	; 0x7600
a0002b80:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002b84:	681b      	ldr	r3, [r3, #0]
a0002b86:	2b00      	cmp	r3, #0
a0002b88:	bf14      	ite	ne
a0002b8a:	2300      	movne	r3, #0
a0002b8c:	2301      	moveq	r3, #1
a0002b8e:	603b      	str	r3, [r7, #0]
			}
			( void ) xTaskResumeAll();
a0002b90:	f7ff fb62 	bl	a0002258 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
a0002b94:	683b      	ldr	r3, [r7, #0]
a0002b96:	2b00      	cmp	r3, #0
a0002b98:	d12b      	bne.n	a0002bf2 <prvCheckTasksWaitingTermination+0x82>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
a0002b9a:	f001 fb27 	bl	a00041ec <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
a0002b9e:	f247 6300 	movw	r3, #30208	; 0x7600
a0002ba2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002ba6:	68db      	ldr	r3, [r3, #12]
a0002ba8:	68db      	ldr	r3, [r3, #12]
a0002baa:	607b      	str	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
a0002bac:	687b      	ldr	r3, [r7, #4]
a0002bae:	f103 0304 	add.w	r3, r3, #4
a0002bb2:	4618      	mov	r0, r3
a0002bb4:	f7fe fad6 	bl	a0001164 <uxListRemove>
					--uxCurrentNumberOfTasks;
a0002bb8:	f247 632c 	movw	r3, #30252	; 0x762c
a0002bbc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002bc0:	681b      	ldr	r3, [r3, #0]
a0002bc2:	f103 32ff 	add.w	r2, r3, #4294967295
a0002bc6:	f247 632c 	movw	r3, #30252	; 0x762c
a0002bca:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002bce:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
a0002bd0:	f247 6314 	movw	r3, #30228	; 0x7614
a0002bd4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002bd8:	681b      	ldr	r3, [r3, #0]
a0002bda:	f103 32ff 	add.w	r2, r3, #4294967295
a0002bde:	f247 6314 	movw	r3, #30228	; 0x7614
a0002be2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002be6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
a0002be8:	f001 fb38 	bl	a000425c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
a0002bec:	6878      	ldr	r0, [r7, #4]
a0002bee:	f000 f80b 	bl	a0002c08 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
a0002bf2:	f247 6314 	movw	r3, #30228	; 0x7614
a0002bf6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002bfa:	681b      	ldr	r3, [r3, #0]
a0002bfc:	2b00      	cmp	r3, #0
a0002bfe:	d1bb      	bne.n	a0002b78 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
a0002c00:	f107 0708 	add.w	r7, r7, #8
a0002c04:	46bd      	mov	sp, r7
a0002c06:	bd80      	pop	{r7, pc}

a0002c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
a0002c08:	b580      	push	{r7, lr}
a0002c0a:	b082      	sub	sp, #8
a0002c0c:	af00      	add	r7, sp, #0
a0002c0e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
a0002c10:	687b      	ldr	r3, [r7, #4]
a0002c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
a0002c14:	4618      	mov	r0, r3
a0002c16:	f001 f897 	bl	a0003d48 <vPortFree>
			vPortFree( pxTCB );
a0002c1a:	6878      	ldr	r0, [r7, #4]
a0002c1c:	f001 f894 	bl	a0003d48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
a0002c20:	f107 0708 	add.w	r7, r7, #8
a0002c24:	46bd      	mov	sp, r7
a0002c26:	bd80      	pop	{r7, pc}

a0002c28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
a0002c28:	b480      	push	{r7}
a0002c2a:	b083      	sub	sp, #12
a0002c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
a0002c2e:	f247 53e4 	movw	r3, #30180	; 0x75e4
a0002c32:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002c36:	681b      	ldr	r3, [r3, #0]
a0002c38:	681b      	ldr	r3, [r3, #0]
a0002c3a:	2b00      	cmp	r3, #0
a0002c3c:	d102      	bne.n	a0002c44 <prvResetNextTaskUnblockTime+0x1c>
a0002c3e:	f04f 0301 	mov.w	r3, #1
a0002c42:	e001      	b.n	a0002c48 <prvResetNextTaskUnblockTime+0x20>
a0002c44:	f04f 0300 	mov.w	r3, #0
a0002c48:	2b00      	cmp	r3, #0
a0002c4a:	d007      	beq.n	a0002c5c <prvResetNextTaskUnblockTime+0x34>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
a0002c4c:	f247 634c 	movw	r3, #30284	; 0x764c
a0002c50:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002c54:	f04f 32ff 	mov.w	r2, #4294967295
a0002c58:	601a      	str	r2, [r3, #0]
a0002c5a:	e00e      	b.n	a0002c7a <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
a0002c5c:	f247 53e4 	movw	r3, #30180	; 0x75e4
a0002c60:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002c64:	681b      	ldr	r3, [r3, #0]
a0002c66:	68db      	ldr	r3, [r3, #12]
a0002c68:	68db      	ldr	r3, [r3, #12]
a0002c6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
a0002c6c:	687b      	ldr	r3, [r7, #4]
a0002c6e:	685a      	ldr	r2, [r3, #4]
a0002c70:	f247 634c 	movw	r3, #30284	; 0x764c
a0002c74:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002c78:	601a      	str	r2, [r3, #0]
	}
}
a0002c7a:	f107 070c 	add.w	r7, r7, #12
a0002c7e:	46bd      	mov	sp, r7
a0002c80:	bc80      	pop	{r7}
a0002c82:	4770      	bx	lr

a0002c84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
a0002c84:	b480      	push	{r7}
a0002c86:	b083      	sub	sp, #12
a0002c88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
a0002c8a:	f247 6338 	movw	r3, #30264	; 0x7638
a0002c8e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002c92:	681b      	ldr	r3, [r3, #0]
a0002c94:	2b00      	cmp	r3, #0
a0002c96:	d103      	bne.n	a0002ca0 <xTaskGetSchedulerState+0x1c>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
a0002c98:	f04f 0301 	mov.w	r3, #1
a0002c9c:	607b      	str	r3, [r7, #4]
a0002c9e:	e00d      	b.n	a0002cbc <xTaskGetSchedulerState+0x38>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
a0002ca0:	f247 6354 	movw	r3, #30292	; 0x7654
a0002ca4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002ca8:	681b      	ldr	r3, [r3, #0]
a0002caa:	2b00      	cmp	r3, #0
a0002cac:	d103      	bne.n	a0002cb6 <xTaskGetSchedulerState+0x32>
			{
				xReturn = taskSCHEDULER_RUNNING;
a0002cae:	f04f 0302 	mov.w	r3, #2
a0002cb2:	607b      	str	r3, [r7, #4]
a0002cb4:	e002      	b.n	a0002cbc <xTaskGetSchedulerState+0x38>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
a0002cb6:	f04f 0300 	mov.w	r3, #0
a0002cba:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
a0002cbc:	687b      	ldr	r3, [r7, #4]
	}
a0002cbe:	4618      	mov	r0, r3
a0002cc0:	f107 070c 	add.w	r7, r7, #12
a0002cc4:	46bd      	mov	sp, r7
a0002cc6:	bc80      	pop	{r7}
a0002cc8:	4770      	bx	lr
a0002cca:	bf00      	nop

a0002ccc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
a0002ccc:	b580      	push	{r7, lr}
a0002cce:	b084      	sub	sp, #16
a0002cd0:	af00      	add	r7, sp, #0
a0002cd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
a0002cd4:	687b      	ldr	r3, [r7, #4]
a0002cd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
a0002cd8:	687b      	ldr	r3, [r7, #4]
a0002cda:	2b00      	cmp	r3, #0
a0002cdc:	f000 8098 	beq.w	a0002e10 <vTaskPriorityInherit+0x144>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
a0002ce0:	68fb      	ldr	r3, [r7, #12]
a0002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002ce4:	f247 5354 	movw	r3, #30036	; 0x7554
a0002ce8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002cec:	681b      	ldr	r3, [r3, #0]
a0002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002cf0:	429a      	cmp	r2, r3
a0002cf2:	f080 808d 	bcs.w	a0002e10 <vTaskPriorityInherit+0x144>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
a0002cf6:	68fb      	ldr	r3, [r7, #12]
a0002cf8:	699b      	ldr	r3, [r3, #24]
a0002cfa:	2b00      	cmp	r3, #0
a0002cfc:	db09      	blt.n	a0002d12 <vTaskPriorityInherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a0002cfe:	f247 5354 	movw	r3, #30036	; 0x7554
a0002d02:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002d06:	681b      	ldr	r3, [r3, #0]
a0002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002d0a:	f1c3 0205 	rsb	r2, r3, #5
a0002d0e:	68fb      	ldr	r3, [r7, #12]
a0002d10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
a0002d12:	68fb      	ldr	r3, [r7, #12]
a0002d14:	6959      	ldr	r1, [r3, #20]
a0002d16:	68fb      	ldr	r3, [r7, #12]
a0002d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002d1a:	4613      	mov	r3, r2
a0002d1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002d20:	4413      	add	r3, r2
a0002d22:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002d26:	461a      	mov	r2, r3
a0002d28:	f247 5358 	movw	r3, #30040	; 0x7558
a0002d2c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002d30:	4413      	add	r3, r2
a0002d32:	4299      	cmp	r1, r3
a0002d34:	d102      	bne.n	a0002d3c <vTaskPriorityInherit+0x70>
a0002d36:	f04f 0301 	mov.w	r3, #1
a0002d3a:	e001      	b.n	a0002d40 <vTaskPriorityInherit+0x74>
a0002d3c:	f04f 0300 	mov.w	r3, #0
a0002d40:	2b00      	cmp	r3, #0
a0002d42:	d05d      	beq.n	a0002e00 <vTaskPriorityInherit+0x134>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
a0002d44:	68fb      	ldr	r3, [r7, #12]
a0002d46:	f103 0304 	add.w	r3, r3, #4
a0002d4a:	4618      	mov	r0, r3
a0002d4c:	f7fe fa0a 	bl	a0001164 <uxListRemove>
a0002d50:	4603      	mov	r3, r0
a0002d52:	2b00      	cmp	r3, #0
a0002d54:	d124      	bne.n	a0002da0 <vTaskPriorityInherit+0xd4>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
a0002d56:	68fb      	ldr	r3, [r7, #12]
a0002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002d5a:	4613      	mov	r3, r2
a0002d5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002d60:	4413      	add	r3, r2
a0002d62:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002d66:	461a      	mov	r2, r3
a0002d68:	f247 5358 	movw	r3, #30040	; 0x7558
a0002d6c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002d70:	4413      	add	r3, r2
a0002d72:	681b      	ldr	r3, [r3, #0]
a0002d74:	2b00      	cmp	r3, #0
a0002d76:	d113      	bne.n	a0002da0 <vTaskPriorityInherit+0xd4>
a0002d78:	68fb      	ldr	r3, [r7, #12]
a0002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002d7c:	f04f 0201 	mov.w	r2, #1
a0002d80:	fa02 f303 	lsl.w	r3, r2, r3
a0002d84:	ea6f 0203 	mvn.w	r2, r3
a0002d88:	f247 6334 	movw	r3, #30260	; 0x7634
a0002d8c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002d90:	681b      	ldr	r3, [r3, #0]
a0002d92:	ea02 0203 	and.w	r2, r2, r3
a0002d96:	f247 6334 	movw	r3, #30260	; 0x7634
a0002d9a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002d9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
a0002da0:	f247 5354 	movw	r3, #30036	; 0x7554
a0002da4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002da8:	681b      	ldr	r3, [r3, #0]
a0002daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002dac:	68fb      	ldr	r3, [r7, #12]
a0002dae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
a0002db0:	68fb      	ldr	r3, [r7, #12]
a0002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002db4:	f04f 0201 	mov.w	r2, #1
a0002db8:	fa02 f203 	lsl.w	r2, r2, r3
a0002dbc:	f247 6334 	movw	r3, #30260	; 0x7634
a0002dc0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002dc4:	681b      	ldr	r3, [r3, #0]
a0002dc6:	ea42 0203 	orr.w	r2, r2, r3
a0002dca:	f247 6334 	movw	r3, #30260	; 0x7634
a0002dce:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002dd2:	601a      	str	r2, [r3, #0]
a0002dd4:	68fb      	ldr	r3, [r7, #12]
a0002dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002dd8:	4613      	mov	r3, r2
a0002dda:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002dde:	4413      	add	r3, r2
a0002de0:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002de4:	461a      	mov	r2, r3
a0002de6:	f247 5358 	movw	r3, #30040	; 0x7558
a0002dea:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002dee:	441a      	add	r2, r3
a0002df0:	68fb      	ldr	r3, [r7, #12]
a0002df2:	f103 0304 	add.w	r3, r3, #4
a0002df6:	4610      	mov	r0, r2
a0002df8:	4619      	mov	r1, r3
a0002dfa:	f7fe f955 	bl	a00010a8 <vListInsertEnd>
a0002dfe:	e007      	b.n	a0002e10 <vTaskPriorityInherit+0x144>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
a0002e00:	f247 5354 	movw	r3, #30036	; 0x7554
a0002e04:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002e08:	681b      	ldr	r3, [r3, #0]
a0002e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002e0c:	68fb      	ldr	r3, [r7, #12]
a0002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
a0002e10:	f107 0710 	add.w	r7, r7, #16
a0002e14:	46bd      	mov	sp, r7
a0002e16:	bd80      	pop	{r7, pc}

a0002e18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
a0002e18:	b580      	push	{r7, lr}
a0002e1a:	b086      	sub	sp, #24
a0002e1c:	af00      	add	r7, sp, #0
a0002e1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
a0002e20:	687b      	ldr	r3, [r7, #4]
a0002e22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
a0002e24:	f04f 0300 	mov.w	r3, #0
a0002e28:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
a0002e2a:	687b      	ldr	r3, [r7, #4]
a0002e2c:	2b00      	cmp	r3, #0
a0002e2e:	f000 8092 	beq.w	a0002f56 <xTaskPriorityDisinherit+0x13e>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
a0002e32:	f247 5354 	movw	r3, #30036	; 0x7554
a0002e36:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002e3a:	681b      	ldr	r3, [r3, #0]
a0002e3c:	68ba      	ldr	r2, [r7, #8]
a0002e3e:	429a      	cmp	r2, r3
a0002e40:	d009      	beq.n	a0002e56 <xTaskPriorityDisinherit+0x3e>
a0002e42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0002e46:	f383 8811 	msr	BASEPRI, r3
a0002e4a:	f3bf 8f6f 	isb	sy
a0002e4e:	f3bf 8f4f 	dsb	sy
a0002e52:	613b      	str	r3, [r7, #16]
a0002e54:	e7fe      	b.n	a0002e54 <xTaskPriorityDisinherit+0x3c>

			configASSERT( pxTCB->uxMutexesHeld );
a0002e56:	68bb      	ldr	r3, [r7, #8]
a0002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
a0002e5a:	2b00      	cmp	r3, #0
a0002e5c:	d109      	bne.n	a0002e72 <xTaskPriorityDisinherit+0x5a>
a0002e5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0002e62:	f383 8811 	msr	BASEPRI, r3
a0002e66:	f3bf 8f6f 	isb	sy
a0002e6a:	f3bf 8f4f 	dsb	sy
a0002e6e:	617b      	str	r3, [r7, #20]
a0002e70:	e7fe      	b.n	a0002e70 <xTaskPriorityDisinherit+0x58>
			( pxTCB->uxMutexesHeld )--;
a0002e72:	68bb      	ldr	r3, [r7, #8]
a0002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
a0002e76:	f103 32ff 	add.w	r2, r3, #4294967295
a0002e7a:	68bb      	ldr	r3, [r7, #8]
a0002e7c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
a0002e7e:	68bb      	ldr	r3, [r7, #8]
a0002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002e82:	68bb      	ldr	r3, [r7, #8]
a0002e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
a0002e86:	429a      	cmp	r2, r3
a0002e88:	d065      	beq.n	a0002f56 <xTaskPriorityDisinherit+0x13e>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
a0002e8a:	68bb      	ldr	r3, [r7, #8]
a0002e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
a0002e8e:	2b00      	cmp	r3, #0
a0002e90:	d161      	bne.n	a0002f56 <xTaskPriorityDisinherit+0x13e>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
a0002e92:	68bb      	ldr	r3, [r7, #8]
a0002e94:	f103 0304 	add.w	r3, r3, #4
a0002e98:	4618      	mov	r0, r3
a0002e9a:	f7fe f963 	bl	a0001164 <uxListRemove>
a0002e9e:	4603      	mov	r3, r0
a0002ea0:	2b00      	cmp	r3, #0
a0002ea2:	d124      	bne.n	a0002eee <xTaskPriorityDisinherit+0xd6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
a0002ea4:	68bb      	ldr	r3, [r7, #8]
a0002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002ea8:	4613      	mov	r3, r2
a0002eaa:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002eae:	4413      	add	r3, r2
a0002eb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002eb4:	461a      	mov	r2, r3
a0002eb6:	f247 5358 	movw	r3, #30040	; 0x7558
a0002eba:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002ebe:	4413      	add	r3, r2
a0002ec0:	681b      	ldr	r3, [r3, #0]
a0002ec2:	2b00      	cmp	r3, #0
a0002ec4:	d113      	bne.n	a0002eee <xTaskPriorityDisinherit+0xd6>
a0002ec6:	68bb      	ldr	r3, [r7, #8]
a0002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002eca:	f04f 0201 	mov.w	r2, #1
a0002ece:	fa02 f303 	lsl.w	r3, r2, r3
a0002ed2:	ea6f 0203 	mvn.w	r2, r3
a0002ed6:	f247 6334 	movw	r3, #30260	; 0x7634
a0002eda:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002ede:	681b      	ldr	r3, [r3, #0]
a0002ee0:	ea02 0203 	and.w	r2, r2, r3
a0002ee4:	f247 6334 	movw	r3, #30260	; 0x7634
a0002ee8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002eec:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
a0002eee:	68bb      	ldr	r3, [r7, #8]
a0002ef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
a0002ef2:	68bb      	ldr	r3, [r7, #8]
a0002ef4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a0002ef6:	68bb      	ldr	r3, [r7, #8]
a0002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002efa:	f1c3 0205 	rsb	r2, r3, #5
a0002efe:	68bb      	ldr	r3, [r7, #8]
a0002f00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
a0002f02:	68bb      	ldr	r3, [r7, #8]
a0002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0002f06:	f04f 0201 	mov.w	r2, #1
a0002f0a:	fa02 f203 	lsl.w	r2, r2, r3
a0002f0e:	f247 6334 	movw	r3, #30260	; 0x7634
a0002f12:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002f16:	681b      	ldr	r3, [r3, #0]
a0002f18:	ea42 0203 	orr.w	r2, r2, r3
a0002f1c:	f247 6334 	movw	r3, #30260	; 0x7634
a0002f20:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002f24:	601a      	str	r2, [r3, #0]
a0002f26:	68bb      	ldr	r3, [r7, #8]
a0002f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0002f2a:	4613      	mov	r3, r2
a0002f2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002f30:	4413      	add	r3, r2
a0002f32:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0002f36:	461a      	mov	r2, r3
a0002f38:	f247 5358 	movw	r3, #30040	; 0x7558
a0002f3c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002f40:	441a      	add	r2, r3
a0002f42:	68bb      	ldr	r3, [r7, #8]
a0002f44:	f103 0304 	add.w	r3, r3, #4
a0002f48:	4610      	mov	r0, r2
a0002f4a:	4619      	mov	r1, r3
a0002f4c:	f7fe f8ac 	bl	a00010a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
a0002f50:	f04f 0301 	mov.w	r3, #1
a0002f54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
a0002f56:	68fb      	ldr	r3, [r7, #12]
	}
a0002f58:	4618      	mov	r0, r3
a0002f5a:	f107 0718 	add.w	r7, r7, #24
a0002f5e:	46bd      	mov	sp, r7
a0002f60:	bd80      	pop	{r7, pc}
a0002f62:	bf00      	nop

a0002f64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
a0002f64:	b480      	push	{r7}
a0002f66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
a0002f68:	f247 5354 	movw	r3, #30036	; 0x7554
a0002f6c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002f70:	681b      	ldr	r3, [r3, #0]
a0002f72:	2b00      	cmp	r3, #0
a0002f74:	d008      	beq.n	a0002f88 <pvTaskIncrementMutexHeldCount+0x24>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
a0002f76:	f247 5354 	movw	r3, #30036	; 0x7554
a0002f7a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002f7e:	681b      	ldr	r3, [r3, #0]
a0002f80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
a0002f82:	f102 0201 	add.w	r2, r2, #1
a0002f86:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
a0002f88:	f247 5354 	movw	r3, #30036	; 0x7554
a0002f8c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002f90:	681b      	ldr	r3, [r3, #0]
	}
a0002f92:	4618      	mov	r0, r3
a0002f94:	46bd      	mov	sp, r7
a0002f96:	bc80      	pop	{r7}
a0002f98:	4770      	bx	lr
a0002f9a:	bf00      	nop

a0002f9c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
a0002f9c:	b580      	push	{r7, lr}
a0002f9e:	b084      	sub	sp, #16
a0002fa0:	af00      	add	r7, sp, #0
a0002fa2:	6078      	str	r0, [r7, #4]
a0002fa4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
a0002fa6:	f001 f921 	bl	a00041ec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
a0002faa:	f247 5354 	movw	r3, #30036	; 0x7554
a0002fae:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002fb2:	681b      	ldr	r3, [r3, #0]
a0002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
a0002fb6:	2b00      	cmp	r3, #0
a0002fb8:	d11b      	bne.n	a0002ff2 <ulTaskNotifyTake+0x56>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
a0002fba:	f247 5354 	movw	r3, #30036	; 0x7554
a0002fbe:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0002fc2:	681b      	ldr	r3, [r3, #0]
a0002fc4:	f04f 0201 	mov.w	r2, #1
a0002fc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
a0002fcc:	683b      	ldr	r3, [r7, #0]
a0002fce:	2b00      	cmp	r3, #0
a0002fd0:	d00f      	beq.n	a0002ff2 <ulTaskNotifyTake+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
a0002fd2:	6838      	ldr	r0, [r7, #0]
a0002fd4:	f04f 0101 	mov.w	r1, #1
a0002fd8:	f000 f95e 	bl	a0003298 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
a0002fdc:	f64e 5304 	movw	r3, #60676	; 0xed04
a0002fe0:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0002fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0002fe8:	601a      	str	r2, [r3, #0]
a0002fea:	f3bf 8f4f 	dsb	sy
a0002fee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
a0002ff2:	f001 f933 	bl	a000425c <vPortExitCritical>

		taskENTER_CRITICAL();
a0002ff6:	f001 f8f9 	bl	a00041ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
a0002ffa:	f247 5354 	movw	r3, #30036	; 0x7554
a0002ffe:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003002:	681b      	ldr	r3, [r3, #0]
a0003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
a0003006:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
a0003008:	68fb      	ldr	r3, [r7, #12]
a000300a:	2b00      	cmp	r3, #0
a000300c:	d014      	beq.n	a0003038 <ulTaskNotifyTake+0x9c>
			{
				if( xClearCountOnExit != pdFALSE )
a000300e:	687b      	ldr	r3, [r7, #4]
a0003010:	2b00      	cmp	r3, #0
a0003012:	d008      	beq.n	a0003026 <ulTaskNotifyTake+0x8a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
a0003014:	f247 5354 	movw	r3, #30036	; 0x7554
a0003018:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000301c:	681b      	ldr	r3, [r3, #0]
a000301e:	f04f 0200 	mov.w	r2, #0
a0003022:	655a      	str	r2, [r3, #84]	; 0x54
a0003024:	e008      	b.n	a0003038 <ulTaskNotifyTake+0x9c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
a0003026:	f247 5354 	movw	r3, #30036	; 0x7554
a000302a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000302e:	681b      	ldr	r3, [r3, #0]
a0003030:	68fa      	ldr	r2, [r7, #12]
a0003032:	f102 32ff 	add.w	r2, r2, #4294967295
a0003036:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
a0003038:	f247 5354 	movw	r3, #30036	; 0x7554
a000303c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003040:	681b      	ldr	r3, [r3, #0]
a0003042:	f04f 0200 	mov.w	r2, #0
a0003046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
a000304a:	f001 f907 	bl	a000425c <vPortExitCritical>

		return ulReturn;
a000304e:	68fb      	ldr	r3, [r7, #12]
	}
a0003050:	4618      	mov	r0, r3
a0003052:	f107 0710 	add.w	r7, r7, #16
a0003056:	46bd      	mov	sp, r7
a0003058:	bd80      	pop	{r7, pc}
a000305a:	bf00      	nop

a000305c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
a000305c:	b580      	push	{r7, lr}
a000305e:	b086      	sub	sp, #24
a0003060:	af00      	add	r7, sp, #0
a0003062:	60f8      	str	r0, [r7, #12]
a0003064:	60b9      	str	r1, [r7, #8]
a0003066:	607a      	str	r2, [r7, #4]
a0003068:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
a000306a:	f001 f8bf 	bl	a00041ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
a000306e:	f247 5354 	movw	r3, #30036	; 0x7554
a0003072:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003076:	681b      	ldr	r3, [r3, #0]
a0003078:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
a000307c:	b2db      	uxtb	r3, r3
a000307e:	2b02      	cmp	r3, #2
a0003080:	d027      	beq.n	a00030d2 <xTaskNotifyWait+0x76>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
a0003082:	f247 5354 	movw	r3, #30036	; 0x7554
a0003086:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000308a:	681b      	ldr	r3, [r3, #0]
a000308c:	6d59      	ldr	r1, [r3, #84]	; 0x54
a000308e:	68fa      	ldr	r2, [r7, #12]
a0003090:	ea6f 0202 	mvn.w	r2, r2
a0003094:	ea01 0202 	and.w	r2, r1, r2
a0003098:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
a000309a:	f247 5354 	movw	r3, #30036	; 0x7554
a000309e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00030a2:	681b      	ldr	r3, [r3, #0]
a00030a4:	f04f 0201 	mov.w	r2, #1
a00030a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
a00030ac:	683b      	ldr	r3, [r7, #0]
a00030ae:	2b00      	cmp	r3, #0
a00030b0:	d00f      	beq.n	a00030d2 <xTaskNotifyWait+0x76>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
a00030b2:	6838      	ldr	r0, [r7, #0]
a00030b4:	f04f 0101 	mov.w	r1, #1
a00030b8:	f000 f8ee 	bl	a0003298 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
a00030bc:	f64e 5304 	movw	r3, #60676	; 0xed04
a00030c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
a00030c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a00030c8:	601a      	str	r2, [r3, #0]
a00030ca:	f3bf 8f4f 	dsb	sy
a00030ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
a00030d2:	f001 f8c3 	bl	a000425c <vPortExitCritical>

		taskENTER_CRITICAL();
a00030d6:	f001 f889 	bl	a00041ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
a00030da:	687b      	ldr	r3, [r7, #4]
a00030dc:	2b00      	cmp	r3, #0
a00030de:	d007      	beq.n	a00030f0 <xTaskNotifyWait+0x94>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
a00030e0:	f247 5354 	movw	r3, #30036	; 0x7554
a00030e4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00030e8:	681b      	ldr	r3, [r3, #0]
a00030ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
a00030ec:	687b      	ldr	r3, [r7, #4]
a00030ee:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
a00030f0:	f247 5354 	movw	r3, #30036	; 0x7554
a00030f4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00030f8:	681b      	ldr	r3, [r3, #0]
a00030fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
a00030fe:	b2db      	uxtb	r3, r3
a0003100:	2b01      	cmp	r3, #1
a0003102:	d103      	bne.n	a000310c <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
a0003104:	f04f 0300 	mov.w	r3, #0
a0003108:	617b      	str	r3, [r7, #20]
a000310a:	e00e      	b.n	a000312a <xTaskNotifyWait+0xce>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
a000310c:	f247 5354 	movw	r3, #30036	; 0x7554
a0003110:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003114:	681b      	ldr	r3, [r3, #0]
a0003116:	6d59      	ldr	r1, [r3, #84]	; 0x54
a0003118:	68ba      	ldr	r2, [r7, #8]
a000311a:	ea6f 0202 	mvn.w	r2, r2
a000311e:	ea01 0202 	and.w	r2, r1, r2
a0003122:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
a0003124:	f04f 0301 	mov.w	r3, #1
a0003128:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
a000312a:	f247 5354 	movw	r3, #30036	; 0x7554
a000312e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003132:	681b      	ldr	r3, [r3, #0]
a0003134:	f04f 0200 	mov.w	r2, #0
a0003138:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
a000313c:	f001 f88e 	bl	a000425c <vPortExitCritical>

		return xReturn;
a0003140:	697b      	ldr	r3, [r7, #20]
	}
a0003142:	4618      	mov	r0, r3
a0003144:	f107 0718 	add.w	r7, r7, #24
a0003148:	46bd      	mov	sp, r7
a000314a:	bd80      	pop	{r7, pc}

a000314c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
a000314c:	b580      	push	{r7, lr}
a000314e:	b08a      	sub	sp, #40	; 0x28
a0003150:	af00      	add	r7, sp, #0
a0003152:	6078      	str	r0, [r7, #4]
a0003154:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
a0003156:	687b      	ldr	r3, [r7, #4]
a0003158:	2b00      	cmp	r3, #0
a000315a:	d109      	bne.n	a0003170 <vTaskNotifyGiveFromISR+0x24>
a000315c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003160:	f383 8811 	msr	BASEPRI, r3
a0003164:	f3bf 8f6f 	isb	sy
a0003168:	f3bf 8f4f 	dsb	sy
a000316c:	617b      	str	r3, [r7, #20]
a000316e:	e7fe      	b.n	a000316e <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
a0003170:	f001 f910 	bl	a0004394 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
a0003174:	687b      	ldr	r3, [r7, #4]
a0003176:	60bb      	str	r3, [r7, #8]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
a0003178:	f3ef 8211 	mrs	r2, BASEPRI
a000317c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003180:	f383 8811 	msr	BASEPRI, r3
a0003184:	f3bf 8f6f 	isb	sy
a0003188:	f3bf 8f4f 	dsb	sy
a000318c:	61fa      	str	r2, [r7, #28]
a000318e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
a0003190:	69fb      	ldr	r3, [r7, #28]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
a0003192:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
a0003194:	68bb      	ldr	r3, [r7, #8]
a0003196:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
a000319a:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
a000319c:	68bb      	ldr	r3, [r7, #8]
a000319e:	f04f 0202 	mov.w	r2, #2
a00031a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
a00031a6:	68bb      	ldr	r3, [r7, #8]
a00031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
a00031aa:	f103 0201 	add.w	r2, r3, #1
a00031ae:	68bb      	ldr	r3, [r7, #8]
a00031b0:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
a00031b2:	7bfb      	ldrb	r3, [r7, #15]
a00031b4:	2b01      	cmp	r3, #1
a00031b6:	d165      	bne.n	a0003284 <vTaskNotifyGiveFromISR+0x138>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
a00031b8:	68bb      	ldr	r3, [r7, #8]
a00031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
a00031bc:	2b00      	cmp	r3, #0
a00031be:	d009      	beq.n	a00031d4 <vTaskNotifyGiveFromISR+0x88>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
a00031c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00031c4:	f383 8811 	msr	BASEPRI, r3
a00031c8:	f3bf 8f6f 	isb	sy
a00031cc:	f3bf 8f4f 	dsb	sy
a00031d0:	623b      	str	r3, [r7, #32]
a00031d2:	e7fe      	b.n	a00031d2 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
a00031d4:	f247 6354 	movw	r3, #30292	; 0x7654
a00031d8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00031dc:	681b      	ldr	r3, [r3, #0]
a00031de:	2b00      	cmp	r3, #0
a00031e0:	d12d      	bne.n	a000323e <vTaskNotifyGiveFromISR+0xf2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
a00031e2:	68bb      	ldr	r3, [r7, #8]
a00031e4:	f103 0304 	add.w	r3, r3, #4
a00031e8:	4618      	mov	r0, r3
a00031ea:	f7fd ffbb 	bl	a0001164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
a00031ee:	68bb      	ldr	r3, [r7, #8]
a00031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a00031f2:	f04f 0201 	mov.w	r2, #1
a00031f6:	fa02 f203 	lsl.w	r2, r2, r3
a00031fa:	f247 6334 	movw	r3, #30260	; 0x7634
a00031fe:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003202:	681b      	ldr	r3, [r3, #0]
a0003204:	ea42 0203 	orr.w	r2, r2, r3
a0003208:	f247 6334 	movw	r3, #30260	; 0x7634
a000320c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003210:	601a      	str	r2, [r3, #0]
a0003212:	68bb      	ldr	r3, [r7, #8]
a0003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0003216:	4613      	mov	r3, r2
a0003218:	ea4f 0383 	mov.w	r3, r3, lsl #2
a000321c:	4413      	add	r3, r2
a000321e:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0003222:	461a      	mov	r2, r3
a0003224:	f247 5358 	movw	r3, #30040	; 0x7558
a0003228:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000322c:	441a      	add	r2, r3
a000322e:	68bb      	ldr	r3, [r7, #8]
a0003230:	f103 0304 	add.w	r3, r3, #4
a0003234:	4610      	mov	r0, r2
a0003236:	4619      	mov	r1, r3
a0003238:	f7fd ff36 	bl	a00010a8 <vListInsertEnd>
a000323c:	e009      	b.n	a0003252 <vTaskNotifyGiveFromISR+0x106>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
a000323e:	68bb      	ldr	r3, [r7, #8]
a0003240:	f103 0318 	add.w	r3, r3, #24
a0003244:	f247 50ec 	movw	r0, #30188	; 0x75ec
a0003248:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000324c:	4619      	mov	r1, r3
a000324e:	f7fd ff2b 	bl	a00010a8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
a0003252:	68bb      	ldr	r3, [r7, #8]
a0003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
a0003256:	f247 5354 	movw	r3, #30036	; 0x7554
a000325a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000325e:	681b      	ldr	r3, [r3, #0]
a0003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0003262:	429a      	cmp	r2, r3
a0003264:	d90e      	bls.n	a0003284 <vTaskNotifyGiveFromISR+0x138>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
a0003266:	683b      	ldr	r3, [r7, #0]
a0003268:	2b00      	cmp	r3, #0
a000326a:	d004      	beq.n	a0003276 <vTaskNotifyGiveFromISR+0x12a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
a000326c:	683b      	ldr	r3, [r7, #0]
a000326e:	f04f 0201 	mov.w	r2, #1
a0003272:	601a      	str	r2, [r3, #0]
a0003274:	e006      	b.n	a0003284 <vTaskNotifyGiveFromISR+0x138>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
a0003276:	f247 6340 	movw	r3, #30272	; 0x7640
a000327a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000327e:	f04f 0201 	mov.w	r2, #1
a0003282:	601a      	str	r2, [r3, #0]
a0003284:	693b      	ldr	r3, [r7, #16]
a0003286:	627b      	str	r3, [r7, #36]	; 0x24
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
a0003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000328a:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
a000328e:	f107 0728 	add.w	r7, r7, #40	; 0x28
a0003292:	46bd      	mov	sp, r7
a0003294:	bd80      	pop	{r7, pc}
a0003296:	bf00      	nop

a0003298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
a0003298:	b580      	push	{r7, lr}
a000329a:	b084      	sub	sp, #16
a000329c:	af00      	add	r7, sp, #0
a000329e:	6078      	str	r0, [r7, #4]
a00032a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
a00032a2:	f247 6330 	movw	r3, #30256	; 0x7630
a00032a6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00032aa:	681b      	ldr	r3, [r3, #0]
a00032ac:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
a00032ae:	f247 5354 	movw	r3, #30036	; 0x7554
a00032b2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00032b6:	681b      	ldr	r3, [r3, #0]
a00032b8:	f103 0304 	add.w	r3, r3, #4
a00032bc:	4618      	mov	r0, r3
a00032be:	f7fd ff51 	bl	a0001164 <uxListRemove>
a00032c2:	4603      	mov	r3, r0
a00032c4:	2b00      	cmp	r3, #0
a00032c6:	d117      	bne.n	a00032f8 <prvAddCurrentTaskToDelayedList+0x60>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
a00032c8:	f247 5354 	movw	r3, #30036	; 0x7554
a00032cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00032d0:	681b      	ldr	r3, [r3, #0]
a00032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a00032d4:	f04f 0201 	mov.w	r2, #1
a00032d8:	fa02 f303 	lsl.w	r3, r2, r3
a00032dc:	ea6f 0203 	mvn.w	r2, r3
a00032e0:	f247 6334 	movw	r3, #30260	; 0x7634
a00032e4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00032e8:	681b      	ldr	r3, [r3, #0]
a00032ea:	ea02 0203 	and.w	r2, r2, r3
a00032ee:	f247 6334 	movw	r3, #30260	; 0x7634
a00032f2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00032f6:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
a00032f8:	687b      	ldr	r3, [r7, #4]
a00032fa:	f1b3 3fff 	cmp.w	r3, #4294967295
a00032fe:	d111      	bne.n	a0003324 <prvAddCurrentTaskToDelayedList+0x8c>
a0003300:	683b      	ldr	r3, [r7, #0]
a0003302:	2b00      	cmp	r3, #0
a0003304:	d00e      	beq.n	a0003324 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
a0003306:	f247 5354 	movw	r3, #30036	; 0x7554
a000330a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000330e:	681b      	ldr	r3, [r3, #0]
a0003310:	f103 0304 	add.w	r3, r3, #4
a0003314:	f247 6018 	movw	r0, #30232	; 0x7618
a0003318:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000331c:	4619      	mov	r1, r3
a000331e:	f7fd fec3 	bl	a00010a8 <vListInsertEnd>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
a0003322:	e03d      	b.n	a00033a0 <prvAddCurrentTaskToDelayedList+0x108>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
a0003324:	68fa      	ldr	r2, [r7, #12]
a0003326:	687b      	ldr	r3, [r7, #4]
a0003328:	4413      	add	r3, r2
a000332a:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
a000332c:	f247 5354 	movw	r3, #30036	; 0x7554
a0003330:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003334:	681b      	ldr	r3, [r3, #0]
a0003336:	68ba      	ldr	r2, [r7, #8]
a0003338:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
a000333a:	68ba      	ldr	r2, [r7, #8]
a000333c:	68fb      	ldr	r3, [r7, #12]
a000333e:	429a      	cmp	r2, r3
a0003340:	d210      	bcs.n	a0003364 <prvAddCurrentTaskToDelayedList+0xcc>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
a0003342:	f247 53e8 	movw	r3, #30184	; 0x75e8
a0003346:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000334a:	681a      	ldr	r2, [r3, #0]
a000334c:	f247 5354 	movw	r3, #30036	; 0x7554
a0003350:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003354:	681b      	ldr	r3, [r3, #0]
a0003356:	f103 0304 	add.w	r3, r3, #4
a000335a:	4610      	mov	r0, r2
a000335c:	4619      	mov	r1, r3
a000335e:	f7fd fec7 	bl	a00010f0 <vListInsert>
a0003362:	e01d      	b.n	a00033a0 <prvAddCurrentTaskToDelayedList+0x108>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
a0003364:	f247 53e4 	movw	r3, #30180	; 0x75e4
a0003368:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000336c:	681a      	ldr	r2, [r3, #0]
a000336e:	f247 5354 	movw	r3, #30036	; 0x7554
a0003372:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003376:	681b      	ldr	r3, [r3, #0]
a0003378:	f103 0304 	add.w	r3, r3, #4
a000337c:	4610      	mov	r0, r2
a000337e:	4619      	mov	r1, r3
a0003380:	f7fd feb6 	bl	a00010f0 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
a0003384:	f247 634c 	movw	r3, #30284	; 0x764c
a0003388:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000338c:	681b      	ldr	r3, [r3, #0]
a000338e:	68ba      	ldr	r2, [r7, #8]
a0003390:	429a      	cmp	r2, r3
a0003392:	d205      	bcs.n	a00033a0 <prvAddCurrentTaskToDelayedList+0x108>
				{
					xNextTaskUnblockTime = xTimeToWake;
a0003394:	f247 634c 	movw	r3, #30284	; 0x764c
a0003398:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000339c:	68ba      	ldr	r2, [r7, #8]
a000339e:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
a00033a0:	f107 0710 	add.w	r7, r7, #16
a00033a4:	46bd      	mov	sp, r7
a00033a6:	bd80      	pop	{r7, pc}

a00033a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
a00033a8:	b580      	push	{r7, lr}
a00033aa:	b084      	sub	sp, #16
a00033ac:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
a00033ae:	f04f 0300 	mov.w	r3, #0
a00033b2:	603b      	str	r3, [r7, #0]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
a00033b4:	f000 fb72 	bl	a0003a9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
a00033b8:	f247 6390 	movw	r3, #30352	; 0x7690
a00033bc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00033c0:	681b      	ldr	r3, [r3, #0]
a00033c2:	2b00      	cmp	r3, #0
a00033c4:	d017      	beq.n	a00033f6 <xTimerCreateTimerTask+0x4e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
a00033c6:	f04f 0302 	mov.w	r3, #2
a00033ca:	9300      	str	r3, [sp, #0]
a00033cc:	f247 6394 	movw	r3, #30356	; 0x7694
a00033d0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00033d4:	9301      	str	r3, [sp, #4]
a00033d6:	f243 6019 	movw	r0, #13849	; 0x3619
a00033da:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00033de:	f247 4170 	movw	r1, #29808	; 0x7470
a00033e2:	f2ca 0100 	movt	r1, #40960	; 0xa000
a00033e6:	f04f 02a0 	mov.w	r2, #160	; 0xa0
a00033ea:	f04f 0300 	mov.w	r3, #0
a00033ee:	f7fe fc4d 	bl	a0001c8c <xTaskCreate>
a00033f2:	4603      	mov	r3, r0
a00033f4:	603b      	str	r3, [r7, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
a00033f6:	683b      	ldr	r3, [r7, #0]
a00033f8:	2b00      	cmp	r3, #0
a00033fa:	d109      	bne.n	a0003410 <xTimerCreateTimerTask+0x68>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
a00033fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003400:	f383 8811 	msr	BASEPRI, r3
a0003404:	f3bf 8f6f 	isb	sy
a0003408:	f3bf 8f4f 	dsb	sy
a000340c:	607b      	str	r3, [r7, #4]
a000340e:	e7fe      	b.n	a000340e <xTimerCreateTimerTask+0x66>
	return xReturn;
a0003410:	683b      	ldr	r3, [r7, #0]
}
a0003412:	4618      	mov	r0, r3
a0003414:	f107 0708 	add.w	r7, r7, #8
a0003418:	46bd      	mov	sp, r7
a000341a:	bd80      	pop	{r7, pc}

a000341c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
a000341c:	b580      	push	{r7, lr}
a000341e:	b088      	sub	sp, #32
a0003420:	af02      	add	r7, sp, #8
a0003422:	60f8      	str	r0, [r7, #12]
a0003424:	60b9      	str	r1, [r7, #8]
a0003426:	607a      	str	r2, [r7, #4]
a0003428:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
a000342a:	f04f 002c 	mov.w	r0, #44	; 0x2c
a000342e:	f000 fb8f 	bl	a0003b50 <pvPortMalloc>
a0003432:	4603      	mov	r3, r0
a0003434:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
a0003436:	697b      	ldr	r3, [r7, #20]
a0003438:	2b00      	cmp	r3, #0
a000343a:	d009      	beq.n	a0003450 <xTimerCreate+0x34>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
a000343c:	6a3b      	ldr	r3, [r7, #32]
a000343e:	9300      	str	r3, [sp, #0]
a0003440:	697b      	ldr	r3, [r7, #20]
a0003442:	9301      	str	r3, [sp, #4]
a0003444:	68f8      	ldr	r0, [r7, #12]
a0003446:	68b9      	ldr	r1, [r7, #8]
a0003448:	687a      	ldr	r2, [r7, #4]
a000344a:	683b      	ldr	r3, [r7, #0]
a000344c:	f000 f806 	bl	a000345c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
a0003450:	697b      	ldr	r3, [r7, #20]
	}
a0003452:	4618      	mov	r0, r3
a0003454:	f107 0718 	add.w	r7, r7, #24
a0003458:	46bd      	mov	sp, r7
a000345a:	bd80      	pop	{r7, pc}

a000345c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
a000345c:	b580      	push	{r7, lr}
a000345e:	b086      	sub	sp, #24
a0003460:	af00      	add	r7, sp, #0
a0003462:	60f8      	str	r0, [r7, #12]
a0003464:	60b9      	str	r1, [r7, #8]
a0003466:	607a      	str	r2, [r7, #4]
a0003468:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
a000346a:	68bb      	ldr	r3, [r7, #8]
a000346c:	2b00      	cmp	r3, #0
a000346e:	d109      	bne.n	a0003484 <prvInitialiseNewTimer+0x28>
a0003470:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003474:	f383 8811 	msr	BASEPRI, r3
a0003478:	f3bf 8f6f 	isb	sy
a000347c:	f3bf 8f4f 	dsb	sy
a0003480:	617b      	str	r3, [r7, #20]
a0003482:	e7fe      	b.n	a0003482 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
a0003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0003486:	2b00      	cmp	r3, #0
a0003488:	d016      	beq.n	a00034b8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
a000348a:	f000 fb07 	bl	a0003a9c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
a000348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0003490:	68fa      	ldr	r2, [r7, #12]
a0003492:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
a0003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a0003496:	68ba      	ldr	r2, [r7, #8]
a0003498:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
a000349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a000349c:	687a      	ldr	r2, [r7, #4]
a000349e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
a00034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00034a2:	683a      	ldr	r2, [r7, #0]
a00034a4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
a00034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00034a8:	6a3a      	ldr	r2, [r7, #32]
a00034aa:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
a00034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
a00034ae:	f103 0304 	add.w	r3, r3, #4
a00034b2:	4618      	mov	r0, r3
a00034b4:	f7fd fdea 	bl	a000108c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
a00034b8:	f107 0718 	add.w	r7, r7, #24
a00034bc:	46bd      	mov	sp, r7
a00034be:	bd80      	pop	{r7, pc}

a00034c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
a00034c0:	b580      	push	{r7, lr}
a00034c2:	b08a      	sub	sp, #40	; 0x28
a00034c4:	af00      	add	r7, sp, #0
a00034c6:	60f8      	str	r0, [r7, #12]
a00034c8:	60b9      	str	r1, [r7, #8]
a00034ca:	607a      	str	r2, [r7, #4]
a00034cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
a00034ce:	f04f 0300 	mov.w	r3, #0
a00034d2:	623b      	str	r3, [r7, #32]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
a00034d4:	68fb      	ldr	r3, [r7, #12]
a00034d6:	2b00      	cmp	r3, #0
a00034d8:	d109      	bne.n	a00034ee <xTimerGenericCommand+0x2e>
a00034da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00034de:	f383 8811 	msr	BASEPRI, r3
a00034e2:	f3bf 8f6f 	isb	sy
a00034e6:	f3bf 8f4f 	dsb	sy
a00034ea:	627b      	str	r3, [r7, #36]	; 0x24
a00034ec:	e7fe      	b.n	a00034ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
a00034ee:	f247 6390 	movw	r3, #30352	; 0x7690
a00034f2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00034f6:	681b      	ldr	r3, [r3, #0]
a00034f8:	2b00      	cmp	r3, #0
a00034fa:	d040      	beq.n	a000357e <xTimerGenericCommand+0xbe>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
a00034fc:	68bb      	ldr	r3, [r7, #8]
a00034fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
a0003500:	687b      	ldr	r3, [r7, #4]
a0003502:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
a0003504:	68fb      	ldr	r3, [r7, #12]
a0003506:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
a0003508:	68bb      	ldr	r3, [r7, #8]
a000350a:	2b05      	cmp	r3, #5
a000350c:	dc27      	bgt.n	a000355e <xTimerGenericCommand+0x9e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
a000350e:	f7ff fbb9 	bl	a0002c84 <xTaskGetSchedulerState>
a0003512:	4603      	mov	r3, r0
a0003514:	2b02      	cmp	r3, #2
a0003516:	d110      	bne.n	a000353a <xTimerGenericCommand+0x7a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
a0003518:	f247 6390 	movw	r3, #30352	; 0x7690
a000351c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003520:	681a      	ldr	r2, [r3, #0]
a0003522:	f107 0310 	add.w	r3, r7, #16
a0003526:	4610      	mov	r0, r2
a0003528:	4619      	mov	r1, r3
a000352a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
a000352c:	f04f 0300 	mov.w	r3, #0
a0003530:	f7fd ff58 	bl	a00013e4 <xQueueGenericSend>
a0003534:	4603      	mov	r3, r0
a0003536:	623b      	str	r3, [r7, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
a0003538:	e021      	b.n	a000357e <xTimerGenericCommand+0xbe>
a000353a:	f247 6390 	movw	r3, #30352	; 0x7690
a000353e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003542:	681a      	ldr	r2, [r3, #0]
a0003544:	f107 0310 	add.w	r3, r7, #16
a0003548:	4610      	mov	r0, r2
a000354a:	4619      	mov	r1, r3
a000354c:	f04f 0200 	mov.w	r2, #0
a0003550:	f04f 0300 	mov.w	r3, #0
a0003554:	f7fd ff46 	bl	a00013e4 <xQueueGenericSend>
a0003558:	4603      	mov	r3, r0
a000355a:	623b      	str	r3, [r7, #32]
a000355c:	e00f      	b.n	a000357e <xTimerGenericCommand+0xbe>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
a000355e:	f247 6390 	movw	r3, #30352	; 0x7690
a0003562:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003566:	681a      	ldr	r2, [r3, #0]
a0003568:	f107 0310 	add.w	r3, r7, #16
a000356c:	4610      	mov	r0, r2
a000356e:	4619      	mov	r1, r3
a0003570:	683a      	ldr	r2, [r7, #0]
a0003572:	f04f 0300 	mov.w	r3, #0
a0003576:	f7fe f84d 	bl	a0001614 <xQueueGenericSendFromISR>
a000357a:	4603      	mov	r3, r0
a000357c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
a000357e:	6a3b      	ldr	r3, [r7, #32]
}
a0003580:	4618      	mov	r0, r3
a0003582:	f107 0728 	add.w	r7, r7, #40	; 0x28
a0003586:	46bd      	mov	sp, r7
a0003588:	bd80      	pop	{r7, pc}
a000358a:	bf00      	nop

a000358c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
a000358c:	b580      	push	{r7, lr}
a000358e:	b088      	sub	sp, #32
a0003590:	af02      	add	r7, sp, #8
a0003592:	6078      	str	r0, [r7, #4]
a0003594:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
a0003596:	f247 6388 	movw	r3, #30344	; 0x7688
a000359a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000359e:	681b      	ldr	r3, [r3, #0]
a00035a0:	68db      	ldr	r3, [r3, #12]
a00035a2:	68db      	ldr	r3, [r3, #12]
a00035a4:	613b      	str	r3, [r7, #16]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
a00035a6:	693b      	ldr	r3, [r7, #16]
a00035a8:	f103 0304 	add.w	r3, r3, #4
a00035ac:	4618      	mov	r0, r3
a00035ae:	f7fd fdd9 	bl	a0001164 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
a00035b2:	693b      	ldr	r3, [r7, #16]
a00035b4:	69db      	ldr	r3, [r3, #28]
a00035b6:	2b01      	cmp	r3, #1
a00035b8:	d126      	bne.n	a0003608 <prvProcessExpiredTimer+0x7c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
a00035ba:	693b      	ldr	r3, [r7, #16]
a00035bc:	699a      	ldr	r2, [r3, #24]
a00035be:	687b      	ldr	r3, [r7, #4]
a00035c0:	4413      	add	r3, r2
a00035c2:	6938      	ldr	r0, [r7, #16]
a00035c4:	4619      	mov	r1, r3
a00035c6:	683a      	ldr	r2, [r7, #0]
a00035c8:	687b      	ldr	r3, [r7, #4]
a00035ca:	f000 f8df 	bl	a000378c <prvInsertTimerInActiveList>
a00035ce:	4603      	mov	r3, r0
a00035d0:	2b00      	cmp	r3, #0
a00035d2:	d019      	beq.n	a0003608 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
a00035d4:	f04f 0300 	mov.w	r3, #0
a00035d8:	9300      	str	r3, [sp, #0]
a00035da:	6938      	ldr	r0, [r7, #16]
a00035dc:	f04f 0100 	mov.w	r1, #0
a00035e0:	687a      	ldr	r2, [r7, #4]
a00035e2:	f04f 0300 	mov.w	r3, #0
a00035e6:	f7ff ff6b 	bl	a00034c0 <xTimerGenericCommand>
a00035ea:	4603      	mov	r3, r0
a00035ec:	60fb      	str	r3, [r7, #12]
			configASSERT( xResult );
a00035ee:	68fb      	ldr	r3, [r7, #12]
a00035f0:	2b00      	cmp	r3, #0
a00035f2:	d109      	bne.n	a0003608 <prvProcessExpiredTimer+0x7c>
a00035f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00035f8:	f383 8811 	msr	BASEPRI, r3
a00035fc:	f3bf 8f6f 	isb	sy
a0003600:	f3bf 8f4f 	dsb	sy
a0003604:	617b      	str	r3, [r7, #20]
a0003606:	e7fe      	b.n	a0003606 <prvProcessExpiredTimer+0x7a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
a0003608:	693b      	ldr	r3, [r7, #16]
a000360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a000360c:	6938      	ldr	r0, [r7, #16]
a000360e:	4798      	blx	r3
}
a0003610:	f107 0718 	add.w	r7, r7, #24
a0003614:	46bd      	mov	sp, r7
a0003616:	bd80      	pop	{r7, pc}

a0003618 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
a0003618:	b580      	push	{r7, lr}
a000361a:	b084      	sub	sp, #16
a000361c:	af00      	add	r7, sp, #0
a000361e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
a0003620:	f107 0308 	add.w	r3, r7, #8
a0003624:	4618      	mov	r0, r3
a0003626:	f000 f861 	bl	a00036ec <prvGetNextExpireTime>
a000362a:	4603      	mov	r3, r0
a000362c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
a000362e:	68bb      	ldr	r3, [r7, #8]
a0003630:	68f8      	ldr	r0, [r7, #12]
a0003632:	4619      	mov	r1, r3
a0003634:	f000 f804 	bl	a0003640 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
a0003638:	f000 f8f4 	bl	a0003824 <prvProcessReceivedCommands>
	}
a000363c:	e7f0      	b.n	a0003620 <prvTimerTask+0x8>
a000363e:	bf00      	nop

a0003640 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
a0003640:	b580      	push	{r7, lr}
a0003642:	b084      	sub	sp, #16
a0003644:	af00      	add	r7, sp, #0
a0003646:	6078      	str	r0, [r7, #4]
a0003648:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
a000364a:	f7fe fdf3 	bl	a0002234 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
a000364e:	f107 0308 	add.w	r3, r7, #8
a0003652:	4618      	mov	r0, r3
a0003654:	f000 f872 	bl	a000373c <prvSampleTimeNow>
a0003658:	4603      	mov	r3, r0
a000365a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
a000365c:	68bb      	ldr	r3, [r7, #8]
a000365e:	2b00      	cmp	r3, #0
a0003660:	d13b      	bne.n	a00036da <prvProcessTimerOrBlockTask+0x9a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
a0003662:	683b      	ldr	r3, [r7, #0]
a0003664:	2b00      	cmp	r3, #0
a0003666:	d10b      	bne.n	a0003680 <prvProcessTimerOrBlockTask+0x40>
a0003668:	687a      	ldr	r2, [r7, #4]
a000366a:	68fb      	ldr	r3, [r7, #12]
a000366c:	429a      	cmp	r2, r3
a000366e:	d807      	bhi.n	a0003680 <prvProcessTimerOrBlockTask+0x40>
			{
				( void ) xTaskResumeAll();
a0003670:	f7fe fdf2 	bl	a0002258 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
a0003674:	6878      	ldr	r0, [r7, #4]
a0003676:	68f9      	ldr	r1, [r7, #12]
a0003678:	f7ff ff88 	bl	a000358c <prvProcessExpiredTimer>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
a000367c:	bf00      	nop
a000367e:	e030      	b.n	a00036e2 <prvProcessTimerOrBlockTask+0xa2>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
a0003680:	683b      	ldr	r3, [r7, #0]
a0003682:	2b00      	cmp	r3, #0
a0003684:	d00a      	beq.n	a000369c <prvProcessTimerOrBlockTask+0x5c>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
a0003686:	f247 638c 	movw	r3, #30348	; 0x768c
a000368a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000368e:	681b      	ldr	r3, [r3, #0]
a0003690:	681b      	ldr	r3, [r3, #0]
a0003692:	2b00      	cmp	r3, #0
a0003694:	bf14      	ite	ne
a0003696:	2300      	movne	r3, #0
a0003698:	2301      	moveq	r3, #1
a000369a:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
a000369c:	f247 6390 	movw	r3, #30352	; 0x7690
a00036a0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00036a4:	681a      	ldr	r2, [r3, #0]
a00036a6:	6879      	ldr	r1, [r7, #4]
a00036a8:	68fb      	ldr	r3, [r7, #12]
a00036aa:	ebc3 0301 	rsb	r3, r3, r1
a00036ae:	4610      	mov	r0, r2
a00036b0:	4619      	mov	r1, r3
a00036b2:	683a      	ldr	r2, [r7, #0]
a00036b4:	f7fe fab0 	bl	a0001c18 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
a00036b8:	f7fe fdce 	bl	a0002258 <xTaskResumeAll>
a00036bc:	4603      	mov	r3, r0
a00036be:	2b00      	cmp	r3, #0
a00036c0:	d10e      	bne.n	a00036e0 <prvProcessTimerOrBlockTask+0xa0>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
a00036c2:	f64e 5304 	movw	r3, #60676	; 0xed04
a00036c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
a00036ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a00036ce:	601a      	str	r2, [r3, #0]
a00036d0:	f3bf 8f4f 	dsb	sy
a00036d4:	f3bf 8f6f 	isb	sy
a00036d8:	e003      	b.n	a00036e2 <prvProcessTimerOrBlockTask+0xa2>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
a00036da:	f7fe fdbd 	bl	a0002258 <xTaskResumeAll>
a00036de:	e000      	b.n	a00036e2 <prvProcessTimerOrBlockTask+0xa2>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
a00036e0:	bf00      	nop
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
a00036e2:	f107 0710 	add.w	r7, r7, #16
a00036e6:	46bd      	mov	sp, r7
a00036e8:	bd80      	pop	{r7, pc}
a00036ea:	bf00      	nop

a00036ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
a00036ec:	b480      	push	{r7}
a00036ee:	b085      	sub	sp, #20
a00036f0:	af00      	add	r7, sp, #0
a00036f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
a00036f4:	f247 6388 	movw	r3, #30344	; 0x7688
a00036f8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00036fc:	681b      	ldr	r3, [r3, #0]
a00036fe:	681b      	ldr	r3, [r3, #0]
a0003700:	2b00      	cmp	r3, #0
a0003702:	bf14      	ite	ne
a0003704:	2200      	movne	r2, #0
a0003706:	2201      	moveq	r2, #1
a0003708:	687b      	ldr	r3, [r7, #4]
a000370a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
a000370c:	687b      	ldr	r3, [r7, #4]
a000370e:	681b      	ldr	r3, [r3, #0]
a0003710:	2b00      	cmp	r3, #0
a0003712:	d108      	bne.n	a0003726 <prvGetNextExpireTime+0x3a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
a0003714:	f247 6388 	movw	r3, #30344	; 0x7688
a0003718:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000371c:	681b      	ldr	r3, [r3, #0]
a000371e:	68db      	ldr	r3, [r3, #12]
a0003720:	681b      	ldr	r3, [r3, #0]
a0003722:	60fb      	str	r3, [r7, #12]
a0003724:	e002      	b.n	a000372c <prvGetNextExpireTime+0x40>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
a0003726:	f04f 0300 	mov.w	r3, #0
a000372a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
a000372c:	68fb      	ldr	r3, [r7, #12]
}
a000372e:	4618      	mov	r0, r3
a0003730:	f107 0714 	add.w	r7, r7, #20
a0003734:	46bd      	mov	sp, r7
a0003736:	bc80      	pop	{r7}
a0003738:	4770      	bx	lr
a000373a:	bf00      	nop

a000373c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
a000373c:	b580      	push	{r7, lr}
a000373e:	b084      	sub	sp, #16
a0003740:	af00      	add	r7, sp, #0
a0003742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
a0003744:	f7fe fe58 	bl	a00023f8 <xTaskGetTickCount>
a0003748:	4603      	mov	r3, r0
a000374a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
a000374c:	f247 6398 	movw	r3, #30360	; 0x7698
a0003750:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003754:	681b      	ldr	r3, [r3, #0]
a0003756:	68fa      	ldr	r2, [r7, #12]
a0003758:	429a      	cmp	r2, r3
a000375a:	d206      	bcs.n	a000376a <prvSampleTimeNow+0x2e>
	{
		prvSwitchTimerLists();
a000375c:	f000 f924 	bl	a00039a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
a0003760:	687b      	ldr	r3, [r7, #4]
a0003762:	f04f 0201 	mov.w	r2, #1
a0003766:	601a      	str	r2, [r3, #0]
a0003768:	e003      	b.n	a0003772 <prvSampleTimeNow+0x36>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
a000376a:	687b      	ldr	r3, [r7, #4]
a000376c:	f04f 0200 	mov.w	r2, #0
a0003770:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
a0003772:	f247 6398 	movw	r3, #30360	; 0x7698
a0003776:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000377a:	68fa      	ldr	r2, [r7, #12]
a000377c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
a000377e:	68fb      	ldr	r3, [r7, #12]
}
a0003780:	4618      	mov	r0, r3
a0003782:	f107 0710 	add.w	r7, r7, #16
a0003786:	46bd      	mov	sp, r7
a0003788:	bd80      	pop	{r7, pc}
a000378a:	bf00      	nop

a000378c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
a000378c:	b580      	push	{r7, lr}
a000378e:	b086      	sub	sp, #24
a0003790:	af00      	add	r7, sp, #0
a0003792:	60f8      	str	r0, [r7, #12]
a0003794:	60b9      	str	r1, [r7, #8]
a0003796:	607a      	str	r2, [r7, #4]
a0003798:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
a000379a:	f04f 0300 	mov.w	r3, #0
a000379e:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
a00037a0:	68fb      	ldr	r3, [r7, #12]
a00037a2:	68ba      	ldr	r2, [r7, #8]
a00037a4:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
a00037a6:	68fb      	ldr	r3, [r7, #12]
a00037a8:	68fa      	ldr	r2, [r7, #12]
a00037aa:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
a00037ac:	68ba      	ldr	r2, [r7, #8]
a00037ae:	687b      	ldr	r3, [r7, #4]
a00037b0:	429a      	cmp	r2, r3
a00037b2:	d818      	bhi.n	a00037e6 <prvInsertTimerInActiveList+0x5a>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
a00037b4:	687a      	ldr	r2, [r7, #4]
a00037b6:	683b      	ldr	r3, [r7, #0]
a00037b8:	ebc3 0202 	rsb	r2, r3, r2
a00037bc:	68fb      	ldr	r3, [r7, #12]
a00037be:	699b      	ldr	r3, [r3, #24]
a00037c0:	429a      	cmp	r2, r3
a00037c2:	d303      	bcc.n	a00037cc <prvInsertTimerInActiveList+0x40>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
a00037c4:	f04f 0301 	mov.w	r3, #1
a00037c8:	617b      	str	r3, [r7, #20]
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
a00037ca:	e024      	b.n	a0003816 <prvInsertTimerInActiveList+0x8a>
a00037cc:	f247 638c 	movw	r3, #30348	; 0x768c
a00037d0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00037d4:	681a      	ldr	r2, [r3, #0]
a00037d6:	68fb      	ldr	r3, [r7, #12]
a00037d8:	f103 0304 	add.w	r3, r3, #4
a00037dc:	4610      	mov	r0, r2
a00037de:	4619      	mov	r1, r3
a00037e0:	f7fd fc86 	bl	a00010f0 <vListInsert>
a00037e4:	e017      	b.n	a0003816 <prvInsertTimerInActiveList+0x8a>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
a00037e6:	687a      	ldr	r2, [r7, #4]
a00037e8:	683b      	ldr	r3, [r7, #0]
a00037ea:	429a      	cmp	r2, r3
a00037ec:	d207      	bcs.n	a00037fe <prvInsertTimerInActiveList+0x72>
a00037ee:	68ba      	ldr	r2, [r7, #8]
a00037f0:	683b      	ldr	r3, [r7, #0]
a00037f2:	429a      	cmp	r2, r3
a00037f4:	d303      	bcc.n	a00037fe <prvInsertTimerInActiveList+0x72>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
a00037f6:	f04f 0301 	mov.w	r3, #1
a00037fa:	617b      	str	r3, [r7, #20]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
a00037fc:	e00b      	b.n	a0003816 <prvInsertTimerInActiveList+0x8a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
a00037fe:	f247 6388 	movw	r3, #30344	; 0x7688
a0003802:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003806:	681a      	ldr	r2, [r3, #0]
a0003808:	68fb      	ldr	r3, [r7, #12]
a000380a:	f103 0304 	add.w	r3, r3, #4
a000380e:	4610      	mov	r0, r2
a0003810:	4619      	mov	r1, r3
a0003812:	f7fd fc6d 	bl	a00010f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
a0003816:	697b      	ldr	r3, [r7, #20]
}
a0003818:	4618      	mov	r0, r3
a000381a:	f107 0718 	add.w	r7, r7, #24
a000381e:	46bd      	mov	sp, r7
a0003820:	bd80      	pop	{r7, pc}
a0003822:	bf00      	nop

a0003824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
a0003824:	b580      	push	{r7, lr}
a0003826:	b08e      	sub	sp, #56	; 0x38
a0003828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
a000382a:	e0a5      	b.n	a0003978 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
a000382c:	687b      	ldr	r3, [r7, #4]
a000382e:	2b00      	cmp	r3, #0
a0003830:	da1a      	bge.n	a0003868 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
a0003832:	f107 0304 	add.w	r3, r7, #4
a0003836:	f103 0304 	add.w	r3, r3, #4
a000383a:	623b      	str	r3, [r7, #32]

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
a000383c:	6a3b      	ldr	r3, [r7, #32]
a000383e:	2b00      	cmp	r3, #0
a0003840:	d109      	bne.n	a0003856 <prvProcessReceivedCommands+0x32>
a0003842:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003846:	f383 8811 	msr	BASEPRI, r3
a000384a:	f3bf 8f6f 	isb	sy
a000384e:	f3bf 8f4f 	dsb	sy
a0003852:	627b      	str	r3, [r7, #36]	; 0x24
a0003854:	e7fe      	b.n	a0003854 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
a0003856:	6a3b      	ldr	r3, [r7, #32]
a0003858:	681b      	ldr	r3, [r3, #0]
a000385a:	6a3a      	ldr	r2, [r7, #32]
a000385c:	6851      	ldr	r1, [r2, #4]
a000385e:	6a3a      	ldr	r2, [r7, #32]
a0003860:	6892      	ldr	r2, [r2, #8]
a0003862:	4608      	mov	r0, r1
a0003864:	4611      	mov	r1, r2
a0003866:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
a0003868:	687b      	ldr	r3, [r7, #4]
a000386a:	2b00      	cmp	r3, #0
a000386c:	f2c0 8084 	blt.w	a0003978 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
a0003870:	68fb      	ldr	r3, [r7, #12]
a0003872:	617b      	str	r3, [r7, #20]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
a0003874:	697b      	ldr	r3, [r7, #20]
a0003876:	695b      	ldr	r3, [r3, #20]
a0003878:	2b00      	cmp	r3, #0
a000387a:	d005      	beq.n	a0003888 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
a000387c:	697b      	ldr	r3, [r7, #20]
a000387e:	f103 0304 	add.w	r3, r3, #4
a0003882:	4618      	mov	r0, r3
a0003884:	f7fd fc6e 	bl	a0001164 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
a0003888:	463b      	mov	r3, r7
a000388a:	4618      	mov	r0, r3
a000388c:	f7ff ff56 	bl	a000373c <prvSampleTimeNow>
a0003890:	4603      	mov	r3, r0
a0003892:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
a0003894:	687b      	ldr	r3, [r7, #4]
a0003896:	2b09      	cmp	r3, #9
a0003898:	d86e      	bhi.n	a0003978 <prvProcessReceivedCommands+0x154>
a000389a:	a201      	add	r2, pc, #4	; (adr r2, a00038a0 <prvProcessReceivedCommands+0x7c>)
a000389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
a00038a0:	a00038c9 	.word	0xa00038c9
a00038a4:	a00038c9 	.word	0xa00038c9
a00038a8:	a00038c9 	.word	0xa00038c9
a00038ac:	a0003979 	.word	0xa0003979
a00038b0:	a000392f 	.word	0xa000392f
a00038b4:	a0003967 	.word	0xa0003967
a00038b8:	a00038c9 	.word	0xa00038c9
a00038bc:	a00038c9 	.word	0xa00038c9
a00038c0:	a0003979 	.word	0xa0003979
a00038c4:	a000392f 	.word	0xa000392f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
a00038c8:	68ba      	ldr	r2, [r7, #8]
a00038ca:	697b      	ldr	r3, [r7, #20]
a00038cc:	699b      	ldr	r3, [r3, #24]
a00038ce:	441a      	add	r2, r3
a00038d0:	68bb      	ldr	r3, [r7, #8]
a00038d2:	6978      	ldr	r0, [r7, #20]
a00038d4:	4611      	mov	r1, r2
a00038d6:	69fa      	ldr	r2, [r7, #28]
a00038d8:	f7ff ff58 	bl	a000378c <prvInsertTimerInActiveList>
a00038dc:	4603      	mov	r3, r0
a00038de:	2b00      	cmp	r3, #0
a00038e0:	d045      	beq.n	a000396e <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
a00038e2:	697b      	ldr	r3, [r7, #20]
a00038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a00038e6:	6978      	ldr	r0, [r7, #20]
a00038e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
a00038ea:	697b      	ldr	r3, [r7, #20]
a00038ec:	69db      	ldr	r3, [r3, #28]
a00038ee:	2b01      	cmp	r3, #1
a00038f0:	d13f      	bne.n	a0003972 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
a00038f2:	68ba      	ldr	r2, [r7, #8]
a00038f4:	697b      	ldr	r3, [r7, #20]
a00038f6:	699b      	ldr	r3, [r3, #24]
a00038f8:	4413      	add	r3, r2
a00038fa:	f04f 0200 	mov.w	r2, #0
a00038fe:	9200      	str	r2, [sp, #0]
a0003900:	6978      	ldr	r0, [r7, #20]
a0003902:	f04f 0100 	mov.w	r1, #0
a0003906:	461a      	mov	r2, r3
a0003908:	f04f 0300 	mov.w	r3, #0
a000390c:	f7ff fdd8 	bl	a00034c0 <xTimerGenericCommand>
a0003910:	4603      	mov	r3, r0
a0003912:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
a0003914:	69bb      	ldr	r3, [r7, #24]
a0003916:	2b00      	cmp	r3, #0
a0003918:	d12d      	bne.n	a0003976 <prvProcessReceivedCommands+0x152>
a000391a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a000391e:	f383 8811 	msr	BASEPRI, r3
a0003922:	f3bf 8f6f 	isb	sy
a0003926:	f3bf 8f4f 	dsb	sy
a000392a:	62bb      	str	r3, [r7, #40]	; 0x28
a000392c:	e7fe      	b.n	a000392c <prvProcessReceivedCommands+0x108>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
a000392e:	68ba      	ldr	r2, [r7, #8]
a0003930:	697b      	ldr	r3, [r7, #20]
a0003932:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
a0003934:	697b      	ldr	r3, [r7, #20]
a0003936:	699b      	ldr	r3, [r3, #24]
a0003938:	2b00      	cmp	r3, #0
a000393a:	d109      	bne.n	a0003950 <prvProcessReceivedCommands+0x12c>
a000393c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003940:	f383 8811 	msr	BASEPRI, r3
a0003944:	f3bf 8f6f 	isb	sy
a0003948:	f3bf 8f4f 	dsb	sy
a000394c:	62fb      	str	r3, [r7, #44]	; 0x2c
a000394e:	e7fe      	b.n	a000394e <prvProcessReceivedCommands+0x12a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
a0003950:	697b      	ldr	r3, [r7, #20]
a0003952:	699a      	ldr	r2, [r3, #24]
a0003954:	69fb      	ldr	r3, [r7, #28]
a0003956:	4413      	add	r3, r2
a0003958:	6978      	ldr	r0, [r7, #20]
a000395a:	4619      	mov	r1, r3
a000395c:	69fa      	ldr	r2, [r7, #28]
a000395e:	69fb      	ldr	r3, [r7, #28]
a0003960:	f7ff ff14 	bl	a000378c <prvInsertTimerInActiveList>
					break;
a0003964:	e008      	b.n	a0003978 <prvProcessReceivedCommands+0x154>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
a0003966:	6978      	ldr	r0, [r7, #20]
a0003968:	f000 f9ee 	bl	a0003d48 <vPortFree>
a000396c:	e004      	b.n	a0003978 <prvProcessReceivedCommands+0x154>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
a000396e:	bf00      	nop
a0003970:	e002      	b.n	a0003978 <prvProcessReceivedCommands+0x154>
a0003972:	bf00      	nop
a0003974:	e000      	b.n	a0003978 <prvProcessReceivedCommands+0x154>
a0003976:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
a0003978:	f247 6390 	movw	r3, #30352	; 0x7690
a000397c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003980:	681a      	ldr	r2, [r3, #0]
a0003982:	f107 0304 	add.w	r3, r7, #4
a0003986:	4610      	mov	r0, r2
a0003988:	4619      	mov	r1, r3
a000398a:	f04f 0200 	mov.w	r2, #0
a000398e:	f04f 0300 	mov.w	r3, #0
a0003992:	f7fd fee1 	bl	a0001758 <xQueueGenericReceive>
a0003996:	4603      	mov	r3, r0
a0003998:	2b00      	cmp	r3, #0
a000399a:	f47f af47 	bne.w	a000382c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
a000399e:	f107 0730 	add.w	r7, r7, #48	; 0x30
a00039a2:	46bd      	mov	sp, r7
a00039a4:	bd80      	pop	{r7, pc}
a00039a6:	bf00      	nop

a00039a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
a00039a8:	b580      	push	{r7, lr}
a00039aa:	b088      	sub	sp, #32
a00039ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
a00039ae:	e053      	b.n	a0003a58 <prvSwitchTimerLists+0xb0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
a00039b0:	f247 6388 	movw	r3, #30344	; 0x7688
a00039b4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00039b8:	681b      	ldr	r3, [r3, #0]
a00039ba:	68db      	ldr	r3, [r3, #12]
a00039bc:	681b      	ldr	r3, [r3, #0]
a00039be:	603b      	str	r3, [r7, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
a00039c0:	f247 6388 	movw	r3, #30344	; 0x7688
a00039c4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00039c8:	681b      	ldr	r3, [r3, #0]
a00039ca:	68db      	ldr	r3, [r3, #12]
a00039cc:	68db      	ldr	r3, [r3, #12]
a00039ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
a00039d0:	68fb      	ldr	r3, [r7, #12]
a00039d2:	f103 0304 	add.w	r3, r3, #4
a00039d6:	4618      	mov	r0, r3
a00039d8:	f7fd fbc4 	bl	a0001164 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
a00039dc:	68fb      	ldr	r3, [r7, #12]
a00039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a00039e0:	68f8      	ldr	r0, [r7, #12]
a00039e2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
a00039e4:	68fb      	ldr	r3, [r7, #12]
a00039e6:	69db      	ldr	r3, [r3, #28]
a00039e8:	2b01      	cmp	r3, #1
a00039ea:	d135      	bne.n	a0003a58 <prvSwitchTimerLists+0xb0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
a00039ec:	68fb      	ldr	r3, [r7, #12]
a00039ee:	699a      	ldr	r2, [r3, #24]
a00039f0:	683b      	ldr	r3, [r7, #0]
a00039f2:	4413      	add	r3, r2
a00039f4:	607b      	str	r3, [r7, #4]
			if( xReloadTime > xNextExpireTime )
a00039f6:	687a      	ldr	r2, [r7, #4]
a00039f8:	683b      	ldr	r3, [r7, #0]
a00039fa:	429a      	cmp	r2, r3
a00039fc:	d912      	bls.n	a0003a24 <prvSwitchTimerLists+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
a00039fe:	68fb      	ldr	r3, [r7, #12]
a0003a00:	687a      	ldr	r2, [r7, #4]
a0003a02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
a0003a04:	68fb      	ldr	r3, [r7, #12]
a0003a06:	68fa      	ldr	r2, [r7, #12]
a0003a08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
a0003a0a:	f247 6388 	movw	r3, #30344	; 0x7688
a0003a0e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003a12:	681a      	ldr	r2, [r3, #0]
a0003a14:	68fb      	ldr	r3, [r7, #12]
a0003a16:	f103 0304 	add.w	r3, r3, #4
a0003a1a:	4610      	mov	r0, r2
a0003a1c:	4619      	mov	r1, r3
a0003a1e:	f7fd fb67 	bl	a00010f0 <vListInsert>
a0003a22:	e019      	b.n	a0003a58 <prvSwitchTimerLists+0xb0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
a0003a24:	f04f 0300 	mov.w	r3, #0
a0003a28:	9300      	str	r3, [sp, #0]
a0003a2a:	68f8      	ldr	r0, [r7, #12]
a0003a2c:	f04f 0100 	mov.w	r1, #0
a0003a30:	683a      	ldr	r2, [r7, #0]
a0003a32:	f04f 0300 	mov.w	r3, #0
a0003a36:	f7ff fd43 	bl	a00034c0 <xTimerGenericCommand>
a0003a3a:	4603      	mov	r3, r0
a0003a3c:	613b      	str	r3, [r7, #16]
				configASSERT( xResult );
a0003a3e:	693b      	ldr	r3, [r7, #16]
a0003a40:	2b00      	cmp	r3, #0
a0003a42:	d109      	bne.n	a0003a58 <prvSwitchTimerLists+0xb0>
a0003a44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003a48:	f383 8811 	msr	BASEPRI, r3
a0003a4c:	f3bf 8f6f 	isb	sy
a0003a50:	f3bf 8f4f 	dsb	sy
a0003a54:	617b      	str	r3, [r7, #20]
a0003a56:	e7fe      	b.n	a0003a56 <prvSwitchTimerLists+0xae>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
a0003a58:	f247 6388 	movw	r3, #30344	; 0x7688
a0003a5c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003a60:	681b      	ldr	r3, [r3, #0]
a0003a62:	681b      	ldr	r3, [r3, #0]
a0003a64:	2b00      	cmp	r3, #0
a0003a66:	d1a3      	bne.n	a00039b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
a0003a68:	f247 6388 	movw	r3, #30344	; 0x7688
a0003a6c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003a70:	681b      	ldr	r3, [r3, #0]
a0003a72:	60bb      	str	r3, [r7, #8]
	pxCurrentTimerList = pxOverflowTimerList;
a0003a74:	f247 638c 	movw	r3, #30348	; 0x768c
a0003a78:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003a7c:	681a      	ldr	r2, [r3, #0]
a0003a7e:	f247 6388 	movw	r3, #30344	; 0x7688
a0003a82:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003a86:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
a0003a88:	f247 638c 	movw	r3, #30348	; 0x768c
a0003a8c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003a90:	68ba      	ldr	r2, [r7, #8]
a0003a92:	601a      	str	r2, [r3, #0]
}
a0003a94:	f107 0718 	add.w	r7, r7, #24
a0003a98:	46bd      	mov	sp, r7
a0003a9a:	bd80      	pop	{r7, pc}

a0003a9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
a0003a9c:	b580      	push	{r7, lr}
a0003a9e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
a0003aa0:	f000 fba4 	bl	a00041ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
a0003aa4:	f247 6390 	movw	r3, #30352	; 0x7690
a0003aa8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003aac:	681b      	ldr	r3, [r3, #0]
a0003aae:	2b00      	cmp	r3, #0
a0003ab0:	d12b      	bne.n	a0003b0a <prvCheckForValidListAndQueue+0x6e>
		{
			vListInitialise( &xActiveTimerList1 );
a0003ab2:	f247 6060 	movw	r0, #30304	; 0x7660
a0003ab6:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0003aba:	f7fd fac3 	bl	a0001044 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
a0003abe:	f247 6074 	movw	r0, #30324	; 0x7674
a0003ac2:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0003ac6:	f7fd fabd 	bl	a0001044 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
a0003aca:	f247 6388 	movw	r3, #30344	; 0x7688
a0003ace:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003ad2:	f247 6260 	movw	r2, #30304	; 0x7660
a0003ad6:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0003ada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
a0003adc:	f247 638c 	movw	r3, #30348	; 0x768c
a0003ae0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003ae4:	f247 6274 	movw	r2, #30324	; 0x7674
a0003ae8:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0003aec:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
a0003aee:	f04f 0005 	mov.w	r0, #5
a0003af2:	f04f 0110 	mov.w	r1, #16
a0003af6:	f04f 0200 	mov.w	r2, #0
a0003afa:	f7fd fbd5 	bl	a00012a8 <xQueueGenericCreate>
a0003afe:	4602      	mov	r2, r0
a0003b00:	f247 6390 	movw	r3, #30352	; 0x7690
a0003b04:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003b08:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
a0003b0a:	f000 fba7 	bl	a000425c <vPortExitCritical>
}
a0003b0e:	bd80      	pop	{r7, pc}

a0003b10 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
a0003b10:	b580      	push	{r7, lr}
a0003b12:	b086      	sub	sp, #24
a0003b14:	af00      	add	r7, sp, #0
a0003b16:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
a0003b18:	687b      	ldr	r3, [r7, #4]
a0003b1a:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
a0003b1c:	687b      	ldr	r3, [r7, #4]
a0003b1e:	2b00      	cmp	r3, #0
a0003b20:	d109      	bne.n	a0003b36 <pvTimerGetTimerID+0x26>
a0003b22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003b26:	f383 8811 	msr	BASEPRI, r3
a0003b2a:	f3bf 8f6f 	isb	sy
a0003b2e:	f3bf 8f4f 	dsb	sy
a0003b32:	617b      	str	r3, [r7, #20]
a0003b34:	e7fe      	b.n	a0003b34 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
a0003b36:	f000 fb59 	bl	a00041ec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
a0003b3a:	68fb      	ldr	r3, [r7, #12]
a0003b3c:	6a1b      	ldr	r3, [r3, #32]
a0003b3e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
a0003b40:	f000 fb8c 	bl	a000425c <vPortExitCritical>

	return pvReturn;
a0003b44:	693b      	ldr	r3, [r7, #16]
}
a0003b46:	4618      	mov	r0, r3
a0003b48:	f107 0718 	add.w	r7, r7, #24
a0003b4c:	46bd      	mov	sp, r7
a0003b4e:	bd80      	pop	{r7, pc}

a0003b50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
a0003b50:	b580      	push	{r7, lr}
a0003b52:	b08a      	sub	sp, #40	; 0x28
a0003b54:	af00      	add	r7, sp, #0
a0003b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
a0003b58:	f04f 0300 	mov.w	r3, #0
a0003b5c:	61bb      	str	r3, [r7, #24]

	vTaskSuspendAll();
a0003b5e:	f7fe fb69 	bl	a0002234 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
a0003b62:	f64d 034c 	movw	r3, #55372	; 0xd84c
a0003b66:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003b6a:	681b      	ldr	r3, [r3, #0]
a0003b6c:	2b00      	cmp	r3, #0
a0003b6e:	d101      	bne.n	a0003b74 <pvPortMalloc+0x24>
		{
			prvHeapInit();
a0003b70:	f000 f956 	bl	a0003e20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
a0003b74:	f64d 0358 	movw	r3, #55384	; 0xd858
a0003b78:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003b7c:	681a      	ldr	r2, [r3, #0]
a0003b7e:	687b      	ldr	r3, [r7, #4]
a0003b80:	ea02 0303 	and.w	r3, r2, r3
a0003b84:	2b00      	cmp	r3, #0
a0003b86:	f040 80c2 	bne.w	a0003d0e <pvPortMalloc+0x1be>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
a0003b8a:	687b      	ldr	r3, [r7, #4]
a0003b8c:	2b00      	cmp	r3, #0
a0003b8e:	d021      	beq.n	a0003bd4 <pvPortMalloc+0x84>
			{
				xWantedSize += xHeapStructSize;
a0003b90:	f247 4378 	movw	r3, #29816	; 0x7478
a0003b94:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003b98:	681b      	ldr	r3, [r3, #0]
a0003b9a:	687a      	ldr	r2, [r7, #4]
a0003b9c:	4413      	add	r3, r2
a0003b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
a0003ba0:	687b      	ldr	r3, [r7, #4]
a0003ba2:	f003 0307 	and.w	r3, r3, #7
a0003ba6:	2b00      	cmp	r3, #0
a0003ba8:	d014      	beq.n	a0003bd4 <pvPortMalloc+0x84>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
a0003baa:	687b      	ldr	r3, [r7, #4]
a0003bac:	f023 0307 	bic.w	r3, r3, #7
a0003bb0:	f103 0308 	add.w	r3, r3, #8
a0003bb4:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
a0003bb6:	687b      	ldr	r3, [r7, #4]
a0003bb8:	f003 0307 	and.w	r3, r3, #7
a0003bbc:	2b00      	cmp	r3, #0
a0003bbe:	d009      	beq.n	a0003bd4 <pvPortMalloc+0x84>
a0003bc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003bc4:	f383 8811 	msr	BASEPRI, r3
a0003bc8:	f3bf 8f6f 	isb	sy
a0003bcc:	f3bf 8f4f 	dsb	sy
a0003bd0:	61fb      	str	r3, [r7, #28]
a0003bd2:	e7fe      	b.n	a0003bd2 <pvPortMalloc+0x82>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
a0003bd4:	687b      	ldr	r3, [r7, #4]
a0003bd6:	2b00      	cmp	r3, #0
a0003bd8:	f000 8099 	beq.w	a0003d0e <pvPortMalloc+0x1be>
a0003bdc:	f64d 0350 	movw	r3, #55376	; 0xd850
a0003be0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003be4:	681b      	ldr	r3, [r3, #0]
a0003be6:	687a      	ldr	r2, [r7, #4]
a0003be8:	429a      	cmp	r2, r3
a0003bea:	f200 8090 	bhi.w	a0003d0e <pvPortMalloc+0x1be>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
a0003bee:	f64d 0344 	movw	r3, #55364	; 0xd844
a0003bf2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003bf6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
a0003bf8:	f64d 0344 	movw	r3, #55364	; 0xd844
a0003bfc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003c00:	681b      	ldr	r3, [r3, #0]
a0003c02:	60fb      	str	r3, [r7, #12]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
a0003c04:	e004      	b.n	a0003c10 <pvPortMalloc+0xc0>
				{
					pxPreviousBlock = pxBlock;
a0003c06:	68fb      	ldr	r3, [r7, #12]
a0003c08:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
a0003c0a:	68fb      	ldr	r3, [r7, #12]
a0003c0c:	681b      	ldr	r3, [r3, #0]
a0003c0e:	60fb      	str	r3, [r7, #12]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
a0003c10:	68fb      	ldr	r3, [r7, #12]
a0003c12:	685a      	ldr	r2, [r3, #4]
a0003c14:	687b      	ldr	r3, [r7, #4]
a0003c16:	429a      	cmp	r2, r3
a0003c18:	d203      	bcs.n	a0003c22 <pvPortMalloc+0xd2>
a0003c1a:	68fb      	ldr	r3, [r7, #12]
a0003c1c:	681b      	ldr	r3, [r3, #0]
a0003c1e:	2b00      	cmp	r3, #0
a0003c20:	d1f1      	bne.n	a0003c06 <pvPortMalloc+0xb6>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
a0003c22:	f64d 034c 	movw	r3, #55372	; 0xd84c
a0003c26:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003c2a:	681b      	ldr	r3, [r3, #0]
a0003c2c:	68fa      	ldr	r2, [r7, #12]
a0003c2e:	429a      	cmp	r2, r3
a0003c30:	d06d      	beq.n	a0003d0e <pvPortMalloc+0x1be>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
a0003c32:	693b      	ldr	r3, [r7, #16]
a0003c34:	681a      	ldr	r2, [r3, #0]
a0003c36:	f247 4378 	movw	r3, #29816	; 0x7478
a0003c3a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003c3e:	681b      	ldr	r3, [r3, #0]
a0003c40:	4413      	add	r3, r2
a0003c42:	61bb      	str	r3, [r7, #24]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
a0003c44:	68fb      	ldr	r3, [r7, #12]
a0003c46:	681a      	ldr	r2, [r3, #0]
a0003c48:	693b      	ldr	r3, [r7, #16]
a0003c4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
a0003c4c:	68fb      	ldr	r3, [r7, #12]
a0003c4e:	685a      	ldr	r2, [r3, #4]
a0003c50:	687b      	ldr	r3, [r7, #4]
a0003c52:	ebc3 0202 	rsb	r2, r3, r2
a0003c56:	f247 4378 	movw	r3, #29816	; 0x7478
a0003c5a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003c5e:	681b      	ldr	r3, [r3, #0]
a0003c60:	ea4f 0343 	mov.w	r3, r3, lsl #1
a0003c64:	429a      	cmp	r2, r3
a0003c66:	d91f      	bls.n	a0003ca8 <pvPortMalloc+0x158>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
a0003c68:	68fa      	ldr	r2, [r7, #12]
a0003c6a:	687b      	ldr	r3, [r7, #4]
a0003c6c:	4413      	add	r3, r2
a0003c6e:	617b      	str	r3, [r7, #20]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
a0003c70:	697b      	ldr	r3, [r7, #20]
a0003c72:	f003 0307 	and.w	r3, r3, #7
a0003c76:	2b00      	cmp	r3, #0
a0003c78:	d009      	beq.n	a0003c8e <pvPortMalloc+0x13e>
a0003c7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003c7e:	f383 8811 	msr	BASEPRI, r3
a0003c82:	f3bf 8f6f 	isb	sy
a0003c86:	f3bf 8f4f 	dsb	sy
a0003c8a:	623b      	str	r3, [r7, #32]
a0003c8c:	e7fe      	b.n	a0003c8c <pvPortMalloc+0x13c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
a0003c8e:	68fb      	ldr	r3, [r7, #12]
a0003c90:	685a      	ldr	r2, [r3, #4]
a0003c92:	687b      	ldr	r3, [r7, #4]
a0003c94:	ebc3 0202 	rsb	r2, r3, r2
a0003c98:	697b      	ldr	r3, [r7, #20]
a0003c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
a0003c9c:	68fb      	ldr	r3, [r7, #12]
a0003c9e:	687a      	ldr	r2, [r7, #4]
a0003ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
a0003ca2:	6978      	ldr	r0, [r7, #20]
a0003ca4:	f000 f93e 	bl	a0003f24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
a0003ca8:	f64d 0350 	movw	r3, #55376	; 0xd850
a0003cac:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003cb0:	681a      	ldr	r2, [r3, #0]
a0003cb2:	68fb      	ldr	r3, [r7, #12]
a0003cb4:	685b      	ldr	r3, [r3, #4]
a0003cb6:	ebc3 0202 	rsb	r2, r3, r2
a0003cba:	f64d 0350 	movw	r3, #55376	; 0xd850
a0003cbe:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003cc2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
a0003cc4:	f64d 0350 	movw	r3, #55376	; 0xd850
a0003cc8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003ccc:	681a      	ldr	r2, [r3, #0]
a0003cce:	f64d 0354 	movw	r3, #55380	; 0xd854
a0003cd2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003cd6:	681b      	ldr	r3, [r3, #0]
a0003cd8:	429a      	cmp	r2, r3
a0003cda:	d209      	bcs.n	a0003cf0 <pvPortMalloc+0x1a0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
a0003cdc:	f64d 0350 	movw	r3, #55376	; 0xd850
a0003ce0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003ce4:	681a      	ldr	r2, [r3, #0]
a0003ce6:	f64d 0354 	movw	r3, #55380	; 0xd854
a0003cea:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003cee:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
a0003cf0:	68fb      	ldr	r3, [r7, #12]
a0003cf2:	685a      	ldr	r2, [r3, #4]
a0003cf4:	f64d 0358 	movw	r3, #55384	; 0xd858
a0003cf8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003cfc:	681b      	ldr	r3, [r3, #0]
a0003cfe:	ea42 0203 	orr.w	r2, r2, r3
a0003d02:	68fb      	ldr	r3, [r7, #12]
a0003d04:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
a0003d06:	68fb      	ldr	r3, [r7, #12]
a0003d08:	f04f 0200 	mov.w	r2, #0
a0003d0c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
a0003d0e:	f7fe faa3 	bl	a0002258 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
a0003d12:	69bb      	ldr	r3, [r7, #24]
a0003d14:	2b00      	cmp	r3, #0
a0003d16:	d101      	bne.n	a0003d1c <pvPortMalloc+0x1cc>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
a0003d18:	f7fc fa08 	bl	a000012c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
a0003d1c:	69bb      	ldr	r3, [r7, #24]
a0003d1e:	f003 0307 	and.w	r3, r3, #7
a0003d22:	2b00      	cmp	r3, #0
a0003d24:	d009      	beq.n	a0003d3a <pvPortMalloc+0x1ea>
a0003d26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003d2a:	f383 8811 	msr	BASEPRI, r3
a0003d2e:	f3bf 8f6f 	isb	sy
a0003d32:	f3bf 8f4f 	dsb	sy
a0003d36:	627b      	str	r3, [r7, #36]	; 0x24
a0003d38:	e7fe      	b.n	a0003d38 <pvPortMalloc+0x1e8>
	return pvReturn;
a0003d3a:	69bb      	ldr	r3, [r7, #24]
}
a0003d3c:	4618      	mov	r0, r3
a0003d3e:	f107 0728 	add.w	r7, r7, #40	; 0x28
a0003d42:	46bd      	mov	sp, r7
a0003d44:	bd80      	pop	{r7, pc}
a0003d46:	bf00      	nop

a0003d48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
a0003d48:	b580      	push	{r7, lr}
a0003d4a:	b086      	sub	sp, #24
a0003d4c:	af00      	add	r7, sp, #0
a0003d4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
a0003d50:	687b      	ldr	r3, [r7, #4]
a0003d52:	60bb      	str	r3, [r7, #8]
BlockLink_t *pxLink;

	if( pv != NULL )
a0003d54:	687b      	ldr	r3, [r7, #4]
a0003d56:	2b00      	cmp	r3, #0
a0003d58:	d05e      	beq.n	a0003e18 <vPortFree+0xd0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
a0003d5a:	f247 4378 	movw	r3, #29816	; 0x7478
a0003d5e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003d62:	681b      	ldr	r3, [r3, #0]
a0003d64:	f1c3 0300 	rsb	r3, r3, #0
a0003d68:	68ba      	ldr	r2, [r7, #8]
a0003d6a:	4413      	add	r3, r2
a0003d6c:	60bb      	str	r3, [r7, #8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
a0003d6e:	68bb      	ldr	r3, [r7, #8]
a0003d70:	60fb      	str	r3, [r7, #12]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
a0003d72:	68fb      	ldr	r3, [r7, #12]
a0003d74:	685a      	ldr	r2, [r3, #4]
a0003d76:	f64d 0358 	movw	r3, #55384	; 0xd858
a0003d7a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003d7e:	681b      	ldr	r3, [r3, #0]
a0003d80:	ea02 0303 	and.w	r3, r2, r3
a0003d84:	2b00      	cmp	r3, #0
a0003d86:	d109      	bne.n	a0003d9c <vPortFree+0x54>
a0003d88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003d8c:	f383 8811 	msr	BASEPRI, r3
a0003d90:	f3bf 8f6f 	isb	sy
a0003d94:	f3bf 8f4f 	dsb	sy
a0003d98:	613b      	str	r3, [r7, #16]
a0003d9a:	e7fe      	b.n	a0003d9a <vPortFree+0x52>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
a0003d9c:	68fb      	ldr	r3, [r7, #12]
a0003d9e:	681b      	ldr	r3, [r3, #0]
a0003da0:	2b00      	cmp	r3, #0
a0003da2:	d009      	beq.n	a0003db8 <vPortFree+0x70>
a0003da4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0003da8:	f383 8811 	msr	BASEPRI, r3
a0003dac:	f3bf 8f6f 	isb	sy
a0003db0:	f3bf 8f4f 	dsb	sy
a0003db4:	617b      	str	r3, [r7, #20]
a0003db6:	e7fe      	b.n	a0003db6 <vPortFree+0x6e>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
a0003db8:	68fb      	ldr	r3, [r7, #12]
a0003dba:	685a      	ldr	r2, [r3, #4]
a0003dbc:	f64d 0358 	movw	r3, #55384	; 0xd858
a0003dc0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003dc4:	681b      	ldr	r3, [r3, #0]
a0003dc6:	ea02 0303 	and.w	r3, r2, r3
a0003dca:	2b00      	cmp	r3, #0
a0003dcc:	d024      	beq.n	a0003e18 <vPortFree+0xd0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
a0003dce:	68fb      	ldr	r3, [r7, #12]
a0003dd0:	681b      	ldr	r3, [r3, #0]
a0003dd2:	2b00      	cmp	r3, #0
a0003dd4:	d120      	bne.n	a0003e18 <vPortFree+0xd0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
a0003dd6:	68fb      	ldr	r3, [r7, #12]
a0003dd8:	685a      	ldr	r2, [r3, #4]
a0003dda:	f64d 0358 	movw	r3, #55384	; 0xd858
a0003dde:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003de2:	681b      	ldr	r3, [r3, #0]
a0003de4:	ea6f 0303 	mvn.w	r3, r3
a0003de8:	ea02 0203 	and.w	r2, r2, r3
a0003dec:	68fb      	ldr	r3, [r7, #12]
a0003dee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
a0003df0:	f7fe fa20 	bl	a0002234 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
a0003df4:	68fb      	ldr	r3, [r7, #12]
a0003df6:	685a      	ldr	r2, [r3, #4]
a0003df8:	f64d 0350 	movw	r3, #55376	; 0xd850
a0003dfc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003e00:	681b      	ldr	r3, [r3, #0]
a0003e02:	441a      	add	r2, r3
a0003e04:	f64d 0350 	movw	r3, #55376	; 0xd850
a0003e08:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003e0c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
a0003e0e:	68f8      	ldr	r0, [r7, #12]
a0003e10:	f000 f888 	bl	a0003f24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
a0003e14:	f7fe fa20 	bl	a0002258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
a0003e18:	f107 0718 	add.w	r7, r7, #24
a0003e1c:	46bd      	mov	sp, r7
a0003e1e:	bd80      	pop	{r7, pc}

a0003e20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
a0003e20:	b480      	push	{r7}
a0003e22:	b085      	sub	sp, #20
a0003e24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
a0003e26:	f246 13a8 	movw	r3, #25000	; 0x61a8
a0003e2a:	60fb      	str	r3, [r7, #12]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
a0003e2c:	f247 639c 	movw	r3, #30364	; 0x769c
a0003e30:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003e34:	60bb      	str	r3, [r7, #8]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
a0003e36:	68bb      	ldr	r3, [r7, #8]
a0003e38:	f003 0307 	and.w	r3, r3, #7
a0003e3c:	2b00      	cmp	r3, #0
a0003e3e:	d011      	beq.n	a0003e64 <prvHeapInit+0x44>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
a0003e40:	68bb      	ldr	r3, [r7, #8]
a0003e42:	f103 0307 	add.w	r3, r3, #7
a0003e46:	60bb      	str	r3, [r7, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
a0003e48:	68bb      	ldr	r3, [r7, #8]
a0003e4a:	f023 0307 	bic.w	r3, r3, #7
a0003e4e:	60bb      	str	r3, [r7, #8]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
a0003e50:	68fa      	ldr	r2, [r7, #12]
a0003e52:	68bb      	ldr	r3, [r7, #8]
a0003e54:	ebc3 0202 	rsb	r2, r3, r2
a0003e58:	f247 639c 	movw	r3, #30364	; 0x769c
a0003e5c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003e60:	4413      	add	r3, r2
a0003e62:	60fb      	str	r3, [r7, #12]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
a0003e64:	68bb      	ldr	r3, [r7, #8]
a0003e66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
a0003e68:	687a      	ldr	r2, [r7, #4]
a0003e6a:	f64d 0344 	movw	r3, #55364	; 0xd844
a0003e6e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003e72:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
a0003e74:	f64d 0344 	movw	r3, #55364	; 0xd844
a0003e78:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003e7c:	f04f 0200 	mov.w	r2, #0
a0003e80:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
a0003e82:	687a      	ldr	r2, [r7, #4]
a0003e84:	68fb      	ldr	r3, [r7, #12]
a0003e86:	4413      	add	r3, r2
a0003e88:	60bb      	str	r3, [r7, #8]
	uxAddress -= xHeapStructSize;
a0003e8a:	f247 4378 	movw	r3, #29816	; 0x7478
a0003e8e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003e92:	681b      	ldr	r3, [r3, #0]
a0003e94:	68ba      	ldr	r2, [r7, #8]
a0003e96:	ebc3 0302 	rsb	r3, r3, r2
a0003e9a:	60bb      	str	r3, [r7, #8]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
a0003e9c:	68bb      	ldr	r3, [r7, #8]
a0003e9e:	f023 0307 	bic.w	r3, r3, #7
a0003ea2:	60bb      	str	r3, [r7, #8]
	pxEnd = ( void * ) uxAddress;
a0003ea4:	68ba      	ldr	r2, [r7, #8]
a0003ea6:	f64d 034c 	movw	r3, #55372	; 0xd84c
a0003eaa:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003eae:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
a0003eb0:	f64d 034c 	movw	r3, #55372	; 0xd84c
a0003eb4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003eb8:	681b      	ldr	r3, [r3, #0]
a0003eba:	f04f 0200 	mov.w	r2, #0
a0003ebe:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
a0003ec0:	f64d 034c 	movw	r3, #55372	; 0xd84c
a0003ec4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003ec8:	681b      	ldr	r3, [r3, #0]
a0003eca:	f04f 0200 	mov.w	r2, #0
a0003ece:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
a0003ed0:	687b      	ldr	r3, [r7, #4]
a0003ed2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
a0003ed4:	683b      	ldr	r3, [r7, #0]
a0003ed6:	68ba      	ldr	r2, [r7, #8]
a0003ed8:	ebc3 0202 	rsb	r2, r3, r2
a0003edc:	683b      	ldr	r3, [r7, #0]
a0003ede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
a0003ee0:	f64d 034c 	movw	r3, #55372	; 0xd84c
a0003ee4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003ee8:	681a      	ldr	r2, [r3, #0]
a0003eea:	683b      	ldr	r3, [r7, #0]
a0003eec:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
a0003eee:	683b      	ldr	r3, [r7, #0]
a0003ef0:	685a      	ldr	r2, [r3, #4]
a0003ef2:	f64d 0354 	movw	r3, #55380	; 0xd854
a0003ef6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003efa:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
a0003efc:	683b      	ldr	r3, [r7, #0]
a0003efe:	685a      	ldr	r2, [r3, #4]
a0003f00:	f64d 0350 	movw	r3, #55376	; 0xd850
a0003f04:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003f08:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
a0003f0a:	f64d 0358 	movw	r3, #55384	; 0xd858
a0003f0e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003f12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
a0003f16:	601a      	str	r2, [r3, #0]
}
a0003f18:	f107 0714 	add.w	r7, r7, #20
a0003f1c:	46bd      	mov	sp, r7
a0003f1e:	bc80      	pop	{r7}
a0003f20:	4770      	bx	lr
a0003f22:	bf00      	nop

a0003f24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
a0003f24:	b480      	push	{r7}
a0003f26:	b085      	sub	sp, #20
a0003f28:	af00      	add	r7, sp, #0
a0003f2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
a0003f2c:	f64d 0344 	movw	r3, #55364	; 0xd844
a0003f30:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003f34:	60bb      	str	r3, [r7, #8]
a0003f36:	e002      	b.n	a0003f3e <prvInsertBlockIntoFreeList+0x1a>
a0003f38:	68bb      	ldr	r3, [r7, #8]
a0003f3a:	681b      	ldr	r3, [r3, #0]
a0003f3c:	60bb      	str	r3, [r7, #8]
a0003f3e:	68bb      	ldr	r3, [r7, #8]
a0003f40:	681a      	ldr	r2, [r3, #0]
a0003f42:	687b      	ldr	r3, [r7, #4]
a0003f44:	429a      	cmp	r2, r3
a0003f46:	d3f7      	bcc.n	a0003f38 <prvInsertBlockIntoFreeList+0x14>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
a0003f48:	68bb      	ldr	r3, [r7, #8]
a0003f4a:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
a0003f4c:	68bb      	ldr	r3, [r7, #8]
a0003f4e:	685a      	ldr	r2, [r3, #4]
a0003f50:	68fb      	ldr	r3, [r7, #12]
a0003f52:	441a      	add	r2, r3
a0003f54:	687b      	ldr	r3, [r7, #4]
a0003f56:	429a      	cmp	r2, r3
a0003f58:	d108      	bne.n	a0003f6c <prvInsertBlockIntoFreeList+0x48>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
a0003f5a:	68bb      	ldr	r3, [r7, #8]
a0003f5c:	685a      	ldr	r2, [r3, #4]
a0003f5e:	687b      	ldr	r3, [r7, #4]
a0003f60:	685b      	ldr	r3, [r3, #4]
a0003f62:	441a      	add	r2, r3
a0003f64:	68bb      	ldr	r3, [r7, #8]
a0003f66:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
a0003f68:	68bb      	ldr	r3, [r7, #8]
a0003f6a:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
a0003f6c:	687b      	ldr	r3, [r7, #4]
a0003f6e:	60fb      	str	r3, [r7, #12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
a0003f70:	687b      	ldr	r3, [r7, #4]
a0003f72:	685a      	ldr	r2, [r3, #4]
a0003f74:	68fb      	ldr	r3, [r7, #12]
a0003f76:	441a      	add	r2, r3
a0003f78:	68bb      	ldr	r3, [r7, #8]
a0003f7a:	681b      	ldr	r3, [r3, #0]
a0003f7c:	429a      	cmp	r2, r3
a0003f7e:	d11e      	bne.n	a0003fbe <prvInsertBlockIntoFreeList+0x9a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
a0003f80:	68bb      	ldr	r3, [r7, #8]
a0003f82:	681a      	ldr	r2, [r3, #0]
a0003f84:	f64d 034c 	movw	r3, #55372	; 0xd84c
a0003f88:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003f8c:	681b      	ldr	r3, [r3, #0]
a0003f8e:	429a      	cmp	r2, r3
a0003f90:	d00d      	beq.n	a0003fae <prvInsertBlockIntoFreeList+0x8a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
a0003f92:	687b      	ldr	r3, [r7, #4]
a0003f94:	685a      	ldr	r2, [r3, #4]
a0003f96:	68bb      	ldr	r3, [r7, #8]
a0003f98:	681b      	ldr	r3, [r3, #0]
a0003f9a:	685b      	ldr	r3, [r3, #4]
a0003f9c:	441a      	add	r2, r3
a0003f9e:	687b      	ldr	r3, [r7, #4]
a0003fa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
a0003fa2:	68bb      	ldr	r3, [r7, #8]
a0003fa4:	681b      	ldr	r3, [r3, #0]
a0003fa6:	681a      	ldr	r2, [r3, #0]
a0003fa8:	687b      	ldr	r3, [r7, #4]
a0003faa:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
a0003fac:	e00b      	b.n	a0003fc6 <prvInsertBlockIntoFreeList+0xa2>
a0003fae:	f64d 034c 	movw	r3, #55372	; 0xd84c
a0003fb2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0003fb6:	681a      	ldr	r2, [r3, #0]
a0003fb8:	687b      	ldr	r3, [r7, #4]
a0003fba:	601a      	str	r2, [r3, #0]
a0003fbc:	e003      	b.n	a0003fc6 <prvInsertBlockIntoFreeList+0xa2>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
a0003fbe:	68bb      	ldr	r3, [r7, #8]
a0003fc0:	681a      	ldr	r2, [r3, #0]
a0003fc2:	687b      	ldr	r3, [r7, #4]
a0003fc4:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
a0003fc6:	68ba      	ldr	r2, [r7, #8]
a0003fc8:	687b      	ldr	r3, [r7, #4]
a0003fca:	429a      	cmp	r2, r3
a0003fcc:	d002      	beq.n	a0003fd4 <prvInsertBlockIntoFreeList+0xb0>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
a0003fce:	68bb      	ldr	r3, [r7, #8]
a0003fd0:	687a      	ldr	r2, [r7, #4]
a0003fd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
a0003fd4:	f107 0714 	add.w	r7, r7, #20
a0003fd8:	46bd      	mov	sp, r7
a0003fda:	bc80      	pop	{r7}
a0003fdc:	4770      	bx	lr
a0003fde:	bf00      	nop

a0003fe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
a0003fe0:	b480      	push	{r7}
a0003fe2:	b085      	sub	sp, #20
a0003fe4:	af00      	add	r7, sp, #0
a0003fe6:	60f8      	str	r0, [r7, #12]
a0003fe8:	60b9      	str	r1, [r7, #8]
a0003fea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
a0003fec:	68fb      	ldr	r3, [r7, #12]
a0003fee:	f1a3 0304 	sub.w	r3, r3, #4
a0003ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
a0003ff4:	68fb      	ldr	r3, [r7, #12]
a0003ff6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
a0003ffa:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
a0003ffc:	68fb      	ldr	r3, [r7, #12]
a0003ffe:	f1a3 0304 	sub.w	r3, r3, #4
a0004002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
a0004004:	68bb      	ldr	r3, [r7, #8]
a0004006:	f023 0201 	bic.w	r2, r3, #1
a000400a:	68fb      	ldr	r3, [r7, #12]
a000400c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
a000400e:	68fb      	ldr	r3, [r7, #12]
a0004010:	f1a3 0304 	sub.w	r3, r3, #4
a0004014:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
a0004016:	f244 0349 	movw	r3, #16457	; 0x4049
a000401a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000401e:	68fa      	ldr	r2, [r7, #12]
a0004020:	6013      	str	r3, [r2, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
a0004022:	68fb      	ldr	r3, [r7, #12]
a0004024:	f1a3 0314 	sub.w	r3, r3, #20
a0004028:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
a000402a:	687a      	ldr	r2, [r7, #4]
a000402c:	68fb      	ldr	r3, [r7, #12]
a000402e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
a0004030:	68fb      	ldr	r3, [r7, #12]
a0004032:	f1a3 0320 	sub.w	r3, r3, #32
a0004036:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
a0004038:	68fb      	ldr	r3, [r7, #12]
}
a000403a:	4618      	mov	r0, r3
a000403c:	f107 0714 	add.w	r7, r7, #20
a0004040:	46bd      	mov	sp, r7
a0004042:	bc80      	pop	{r7}
a0004044:	4770      	bx	lr
a0004046:	bf00      	nop

a0004048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
a0004048:	b480      	push	{r7}
a000404a:	b083      	sub	sp, #12
a000404c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
a000404e:	f247 43ec 	movw	r3, #29932	; 0x74ec
a0004052:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004056:	681b      	ldr	r3, [r3, #0]
a0004058:	f1b3 3fff 	cmp.w	r3, #4294967295
a000405c:	d009      	beq.n	a0004072 <prvTaskExitError+0x2a>
a000405e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0004062:	f383 8811 	msr	BASEPRI, r3
a0004066:	f3bf 8f6f 	isb	sy
a000406a:	f3bf 8f4f 	dsb	sy
a000406e:	603b      	str	r3, [r7, #0]
a0004070:	e7fe      	b.n	a0004070 <prvTaskExitError+0x28>
a0004072:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0004076:	f383 8811 	msr	BASEPRI, r3
a000407a:	f3bf 8f6f 	isb	sy
a000407e:	f3bf 8f4f 	dsb	sy
a0004082:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	for( ;; );
a0004084:	e7fe      	b.n	a0004084 <prvTaskExitError+0x3c>
a0004086:	bf00      	nop
	...

a0004090 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
a0004090:	4b07      	ldr	r3, [pc, #28]	; (a00040b0 <pxCurrentTCBConst2>)
a0004092:	6819      	ldr	r1, [r3, #0]
a0004094:	6808      	ldr	r0, [r1, #0]
a0004096:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
a000409a:	f380 8809 	msr	PSP, r0
a000409e:	f3bf 8f6f 	isb	sy
a00040a2:	f04f 0000 	mov.w	r0, #0
a00040a6:	f380 8811 	msr	BASEPRI, r0
a00040aa:	f04e 0e0d 	orr.w	lr, lr, #13
a00040ae:	4770      	bx	lr

a00040b0 <pxCurrentTCBConst2>:
a00040b0:	a0007554 	.word	0xa0007554
a00040b4:	f3af 8000 	nop.w
a00040b8:	f3af 8000 	nop.w
a00040bc:	f3af 8000 	nop.w

a00040c0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
a00040c0:	4806      	ldr	r0, [pc, #24]	; (a00040dc <prvPortStartFirstTask+0x1c>)
a00040c2:	6800      	ldr	r0, [r0, #0]
a00040c4:	6800      	ldr	r0, [r0, #0]
a00040c6:	f380 8808 	msr	MSP, r0
a00040ca:	b662      	cpsie	i
a00040cc:	b661      	cpsie	f
a00040ce:	f3bf 8f4f 	dsb	sy
a00040d2:	f3bf 8f6f 	isb	sy
a00040d6:	df00      	svc	0
a00040d8:	bf00      	nop
a00040da:	0000      	.short	0x0000
a00040dc:	e000ed08 	.word	0xe000ed08

a00040e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
a00040e0:	b580      	push	{r7, lr}
a00040e2:	b084      	sub	sp, #16
a00040e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
a00040e6:	f24e 4300 	movw	r3, #58368	; 0xe400
a00040ea:	f2ce 0300 	movt	r3, #57344	; 0xe000
a00040ee:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
a00040f0:	68fb      	ldr	r3, [r7, #12]
a00040f2:	781b      	ldrb	r3, [r3, #0]
a00040f4:	b2db      	uxtb	r3, r3
a00040f6:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
a00040f8:	68fb      	ldr	r3, [r7, #12]
a00040fa:	f04f 32ff 	mov.w	r2, #4294967295
a00040fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
a0004100:	68fb      	ldr	r3, [r7, #12]
a0004102:	781b      	ldrb	r3, [r3, #0]
a0004104:	b2db      	uxtb	r3, r3
a0004106:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
a0004108:	79fb      	ldrb	r3, [r7, #7]
a000410a:	b2db      	uxtb	r3, r3
a000410c:	461a      	mov	r2, r3
a000410e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
a0004112:	f64d 035c 	movw	r3, #55388	; 0xd85c
a0004116:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000411a:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
a000411c:	f64d 0360 	movw	r3, #55392	; 0xd860
a0004120:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004124:	f04f 0207 	mov.w	r2, #7
a0004128:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
a000412a:	e011      	b.n	a0004150 <xPortStartScheduler+0x70>
		{
			ulMaxPRIGROUPValue--;
a000412c:	f64d 0360 	movw	r3, #55392	; 0xd860
a0004130:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004134:	681b      	ldr	r3, [r3, #0]
a0004136:	f103 32ff 	add.w	r2, r3, #4294967295
a000413a:	f64d 0360 	movw	r3, #55392	; 0xd860
a000413e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004142:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
a0004144:	79fb      	ldrb	r3, [r7, #7]
a0004146:	b2db      	uxtb	r3, r3
a0004148:	ea4f 0343 	mov.w	r3, r3, lsl #1
a000414c:	b2db      	uxtb	r3, r3
a000414e:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
a0004150:	79fb      	ldrb	r3, [r7, #7]
a0004152:	b2db      	uxtb	r3, r3
a0004154:	b25b      	sxtb	r3, r3
a0004156:	2b00      	cmp	r3, #0
a0004158:	dbe8      	blt.n	a000412c <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
a000415a:	f64d 0360 	movw	r3, #55392	; 0xd860
a000415e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004162:	681b      	ldr	r3, [r3, #0]
a0004164:	ea4f 2203 	mov.w	r2, r3, lsl #8
a0004168:	f64d 0360 	movw	r3, #55392	; 0xd860
a000416c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004170:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
a0004172:	f64d 0360 	movw	r3, #55392	; 0xd860
a0004176:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000417a:	681b      	ldr	r3, [r3, #0]
a000417c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
a0004180:	f64d 0360 	movw	r3, #55392	; 0xd860
a0004184:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004188:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
a000418a:	68bb      	ldr	r3, [r7, #8]
a000418c:	b2da      	uxtb	r2, r3
a000418e:	68fb      	ldr	r3, [r7, #12]
a0004190:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
a0004192:	f64e 5320 	movw	r3, #60704	; 0xed20
a0004196:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000419a:	f64e 5220 	movw	r2, #60704	; 0xed20
a000419e:	f2ce 0200 	movt	r2, #57344	; 0xe000
a00041a2:	6812      	ldr	r2, [r2, #0]
a00041a4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
a00041a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
a00041aa:	f64e 5320 	movw	r3, #60704	; 0xed20
a00041ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
a00041b2:	f64e 5220 	movw	r2, #60704	; 0xed20
a00041b6:	f2ce 0200 	movt	r2, #57344	; 0xe000
a00041ba:	6812      	ldr	r2, [r2, #0]
a00041bc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
a00041c0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
a00041c2:	f000 f8c7 	bl	a0004354 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
a00041c6:	f247 43ec 	movw	r3, #29932	; 0x74ec
a00041ca:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00041ce:	f04f 0200 	mov.w	r2, #0
a00041d2:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
a00041d4:	f7ff ff74 	bl	a00040c0 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
a00041d8:	f7ff ff36 	bl	a0004048 <prvTaskExitError>

	/* Should not get here! */
	return 0;
a00041dc:	f04f 0300 	mov.w	r3, #0
}
a00041e0:	4618      	mov	r0, r3
a00041e2:	f107 0710 	add.w	r7, r7, #16
a00041e6:	46bd      	mov	sp, r7
a00041e8:	bd80      	pop	{r7, pc}
a00041ea:	bf00      	nop

a00041ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
a00041ec:	b480      	push	{r7}
a00041ee:	b083      	sub	sp, #12
a00041f0:	af00      	add	r7, sp, #0
a00041f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00041f6:	f383 8811 	msr	BASEPRI, r3
a00041fa:	f3bf 8f6f 	isb	sy
a00041fe:	f3bf 8f4f 	dsb	sy
a0004202:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
a0004204:	f247 43ec 	movw	r3, #29932	; 0x74ec
a0004208:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000420c:	681b      	ldr	r3, [r3, #0]
a000420e:	f103 0201 	add.w	r2, r3, #1
a0004212:	f247 43ec 	movw	r3, #29932	; 0x74ec
a0004216:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000421a:	601a      	str	r2, [r3, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
a000421c:	f247 43ec 	movw	r3, #29932	; 0x74ec
a0004220:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004224:	681b      	ldr	r3, [r3, #0]
a0004226:	2b01      	cmp	r3, #1
a0004228:	d112      	bne.n	a0004250 <vPortEnterCritical+0x64>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
a000422a:	f64e 5304 	movw	r3, #60676	; 0xed04
a000422e:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0004232:	681b      	ldr	r3, [r3, #0]
a0004234:	f003 03ff 	and.w	r3, r3, #255	; 0xff
a0004238:	2b00      	cmp	r3, #0
a000423a:	d009      	beq.n	a0004250 <vPortEnterCritical+0x64>
a000423c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0004240:	f383 8811 	msr	BASEPRI, r3
a0004244:	f3bf 8f6f 	isb	sy
a0004248:	f3bf 8f4f 	dsb	sy
a000424c:	607b      	str	r3, [r7, #4]
a000424e:	e7fe      	b.n	a000424e <vPortEnterCritical+0x62>
	}
}
a0004250:	f107 070c 	add.w	r7, r7, #12
a0004254:	46bd      	mov	sp, r7
a0004256:	bc80      	pop	{r7}
a0004258:	4770      	bx	lr
a000425a:	bf00      	nop

a000425c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
a000425c:	b480      	push	{r7}
a000425e:	b083      	sub	sp, #12
a0004260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
a0004262:	f247 43ec 	movw	r3, #29932	; 0x74ec
a0004266:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000426a:	681b      	ldr	r3, [r3, #0]
a000426c:	2b00      	cmp	r3, #0
a000426e:	d109      	bne.n	a0004284 <vPortExitCritical+0x28>
a0004270:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a0004274:	f383 8811 	msr	BASEPRI, r3
a0004278:	f3bf 8f6f 	isb	sy
a000427c:	f3bf 8f4f 	dsb	sy
a0004280:	603b      	str	r3, [r7, #0]
a0004282:	e7fe      	b.n	a0004282 <vPortExitCritical+0x26>
	uxCriticalNesting--;
a0004284:	f247 43ec 	movw	r3, #29932	; 0x74ec
a0004288:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000428c:	681b      	ldr	r3, [r3, #0]
a000428e:	f103 32ff 	add.w	r2, r3, #4294967295
a0004292:	f247 43ec 	movw	r3, #29932	; 0x74ec
a0004296:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000429a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
a000429c:	f247 43ec 	movw	r3, #29932	; 0x74ec
a00042a0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00042a4:	681b      	ldr	r3, [r3, #0]
a00042a6:	2b00      	cmp	r3, #0
a00042a8:	d105      	bne.n	a00042b6 <vPortExitCritical+0x5a>
a00042aa:	f04f 0300 	mov.w	r3, #0
a00042ae:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
a00042b0:	687b      	ldr	r3, [r7, #4]
a00042b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
a00042b6:	f107 070c 	add.w	r7, r7, #12
a00042ba:	46bd      	mov	sp, r7
a00042bc:	bc80      	pop	{r7}
a00042be:	4770      	bx	lr

a00042c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
a00042c0:	f3ef 8009 	mrs	r0, PSP
a00042c4:	f3bf 8f6f 	isb	sy
a00042c8:	4b0d      	ldr	r3, [pc, #52]	; (a0004300 <pxCurrentTCBConst>)
a00042ca:	681a      	ldr	r2, [r3, #0]
a00042cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
a00042d0:	6010      	str	r0, [r2, #0]
a00042d2:	e92d 4008 	stmdb	sp!, {r3, lr}
a00042d6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
a00042da:	f380 8811 	msr	BASEPRI, r0
a00042de:	f7fe f9a3 	bl	a0002628 <vTaskSwitchContext>
a00042e2:	f04f 0000 	mov.w	r0, #0
a00042e6:	f380 8811 	msr	BASEPRI, r0
a00042ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
a00042ee:	6819      	ldr	r1, [r3, #0]
a00042f0:	6808      	ldr	r0, [r1, #0]
a00042f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
a00042f6:	f380 8809 	msr	PSP, r0
a00042fa:	f3bf 8f6f 	isb	sy
a00042fe:	4770      	bx	lr

a0004300 <pxCurrentTCBConst>:
a0004300:	a0007554 	.word	0xa0007554
a0004304:	f3af 8000 	nop.w
a0004308:	f3af 8000 	nop.w
a000430c:	f3af 8000 	nop.w

a0004310 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
a0004310:	b580      	push	{r7, lr}
a0004312:	b082      	sub	sp, #8
a0004314:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
a0004316:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a000431a:	f383 8811 	msr	BASEPRI, r3
a000431e:	f3bf 8f6f 	isb	sy
a0004322:	f3bf 8f4f 	dsb	sy
a0004326:	603b      	str	r3, [r7, #0]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
a0004328:	f7fe f876 	bl	a0002418 <xTaskIncrementTick>
a000432c:	4603      	mov	r3, r0
a000432e:	2b00      	cmp	r3, #0
a0004330:	d006      	beq.n	a0004340 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
a0004332:	f64e 5304 	movw	r3, #60676	; 0xed04
a0004336:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000433a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a000433e:	601a      	str	r2, [r3, #0]
a0004340:	f04f 0300 	mov.w	r3, #0
a0004344:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
a0004346:	687b      	ldr	r3, [r7, #4]
a0004348:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
a000434c:	f107 0708 	add.w	r7, r7, #8
a0004350:	46bd      	mov	sp, r7
a0004352:	bd80      	pop	{r7, pc}

a0004354 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
a0004354:	b480      	push	{r7}
a0004356:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
a0004358:	f24e 0314 	movw	r3, #57364	; 0xe014
a000435c:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0004360:	f247 522c 	movw	r2, #29996	; 0x752c
a0004364:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0004368:	6811      	ldr	r1, [r2, #0]
a000436a:	f644 52d3 	movw	r2, #19923	; 0x4dd3
a000436e:	f2c1 0262 	movt	r2, #4194	; 0x1062
a0004372:	fba2 0201 	umull	r0, r2, r2, r1
a0004376:	ea4f 1292 	mov.w	r2, r2, lsr #6
a000437a:	f102 32ff 	add.w	r2, r2, #4294967295
a000437e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
a0004380:	f24e 0310 	movw	r3, #57360	; 0xe010
a0004384:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0004388:	f04f 0207 	mov.w	r2, #7
a000438c:	601a      	str	r2, [r3, #0]
}
a000438e:	46bd      	mov	sp, r7
a0004390:	bc80      	pop	{r7}
a0004392:	4770      	bx	lr

a0004394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
a0004394:	b480      	push	{r7}
a0004396:	b085      	sub	sp, #20
a0004398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
a000439a:	f3ef 8305 	mrs	r3, IPSR
a000439e:	603b      	str	r3, [r7, #0]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
a00043a0:	683b      	ldr	r3, [r7, #0]
a00043a2:	2b0f      	cmp	r3, #15
a00043a4:	d91a      	bls.n	a00043dc <vPortValidateInterruptPriority+0x48>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
a00043a6:	f247 437c 	movw	r3, #29820	; 0x747c
a00043aa:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00043ae:	681a      	ldr	r2, [r3, #0]
a00043b0:	683b      	ldr	r3, [r7, #0]
a00043b2:	4413      	add	r3, r2
a00043b4:	781b      	ldrb	r3, [r3, #0]
a00043b6:	71fb      	strb	r3, [r7, #7]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
a00043b8:	f64d 035c 	movw	r3, #55388	; 0xd85c
a00043bc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00043c0:	781b      	ldrb	r3, [r3, #0]
a00043c2:	79fa      	ldrb	r2, [r7, #7]
a00043c4:	429a      	cmp	r2, r3
a00043c6:	d209      	bcs.n	a00043dc <vPortValidateInterruptPriority+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
a00043c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00043cc:	f383 8811 	msr	BASEPRI, r3
a00043d0:	f3bf 8f6f 	isb	sy
a00043d4:	f3bf 8f4f 	dsb	sy
a00043d8:	60bb      	str	r3, [r7, #8]
a00043da:	e7fe      	b.n	a00043da <vPortValidateInterruptPriority+0x46>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
a00043dc:	f64e 530c 	movw	r3, #60684	; 0xed0c
a00043e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
a00043e4:	681b      	ldr	r3, [r3, #0]
a00043e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
a00043ea:	f64d 0360 	movw	r3, #55392	; 0xd860
a00043ee:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00043f2:	681b      	ldr	r3, [r3, #0]
a00043f4:	429a      	cmp	r2, r3
a00043f6:	d909      	bls.n	a000440c <vPortValidateInterruptPriority+0x78>
a00043f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
a00043fc:	f383 8811 	msr	BASEPRI, r3
a0004400:	f3bf 8f6f 	isb	sy
a0004404:	f3bf 8f4f 	dsb	sy
a0004408:	60fb      	str	r3, [r7, #12]
a000440a:	e7fe      	b.n	a000440a <vPortValidateInterruptPriority+0x76>
	}
a000440c:	f107 0714 	add.w	r7, r7, #20
a0004410:	46bd      	mov	sp, r7
a0004412:	bc80      	pop	{r7}
a0004414:	4770      	bx	lr
a0004416:	bf00      	nop

a0004418 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
a0004418:	b480      	push	{r7}
a000441a:	b083      	sub	sp, #12
a000441c:	af00      	add	r7, sp, #0
a000441e:	4603      	mov	r3, r0
a0004420:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
a0004422:	f24e 1300 	movw	r3, #57600	; 0xe100
a0004426:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000442a:	f997 2007 	ldrsb.w	r2, [r7, #7]
a000442e:	ea4f 1252 	mov.w	r2, r2, lsr #5
a0004432:	79f9      	ldrb	r1, [r7, #7]
a0004434:	f001 011f 	and.w	r1, r1, #31
a0004438:	f04f 0001 	mov.w	r0, #1
a000443c:	fa00 f101 	lsl.w	r1, r0, r1
a0004440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
a0004444:	f107 070c 	add.w	r7, r7, #12
a0004448:	46bd      	mov	sp, r7
a000444a:	bc80      	pop	{r7}
a000444c:	4770      	bx	lr
a000444e:	bf00      	nop

a0004450 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
a0004450:	b480      	push	{r7}
a0004452:	b083      	sub	sp, #12
a0004454:	af00      	add	r7, sp, #0
a0004456:	4603      	mov	r3, r0
a0004458:	6039      	str	r1, [r7, #0]
a000445a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
a000445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
a0004460:	2b00      	cmp	r3, #0
a0004462:	da10      	bge.n	a0004486 <NVIC_SetPriority+0x36>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
a0004464:	f64e 5300 	movw	r3, #60672	; 0xed00
a0004468:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000446c:	79fa      	ldrb	r2, [r7, #7]
a000446e:	f002 020f 	and.w	r2, r2, #15
a0004472:	f1a2 0104 	sub.w	r1, r2, #4
a0004476:	683a      	ldr	r2, [r7, #0]
a0004478:	b2d2      	uxtb	r2, r2
a000447a:	ea4f 1202 	mov.w	r2, r2, lsl #4
a000447e:	b2d2      	uxtb	r2, r2
a0004480:	440b      	add	r3, r1
a0004482:	761a      	strb	r2, [r3, #24]
a0004484:	e00d      	b.n	a00044a2 <NVIC_SetPriority+0x52>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
a0004486:	f24e 1300 	movw	r3, #57600	; 0xe100
a000448a:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000448e:	f997 1007 	ldrsb.w	r1, [r7, #7]
a0004492:	683a      	ldr	r2, [r7, #0]
a0004494:	b2d2      	uxtb	r2, r2
a0004496:	ea4f 1202 	mov.w	r2, r2, lsl #4
a000449a:	b2d2      	uxtb	r2, r2
a000449c:	440b      	add	r3, r1
a000449e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
a00044a2:	f107 070c 	add.w	r7, r7, #12
a00044a6:	46bd      	mov	sp, r7
a00044a8:	bc80      	pop	{r7}
a00044aa:	4770      	bx	lr

a00044ac <get_hk_data>:
pkt_hk_t* hk_pkt;
pkt_pld_t* pld_pkt;

extern mss_i2c_instance_t g_mss_i2c1;

void get_hk_data(void* d){
a00044ac:	b590      	push	{r4, r7, lr}
a00044ae:	b089      	sub	sp, #36	; 0x24
a00044b0:	af00      	add	r7, sp, #0
a00044b2:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(get_pld_pkt_handle);
a00044b4:	f64d 73d4 	movw	r3, #57300	; 0xdfd4
a00044b8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00044bc:	681b      	ldr	r3, [r3, #0]
a00044be:	4618      	mov	r0, r3
a00044c0:	f7fd fd62 	bl	a0001f88 <uxTaskPriorityGet>
a00044c4:	4603      	mov	r3, r0
a00044c6:	61bb      	str	r3, [r7, #24]

	if(feed_get_hk_data != pdFAIL){
a00044c8:	f64d 73f0 	movw	r3, #57328	; 0xdff0
a00044cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00044d0:	681b      	ldr	r3, [r3, #0]
a00044d2:	2b00      	cmp	r3, #0
a00044d4:	f000 81ea 	beq.w	a00048ac <get_hk_data+0x400>

//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		uint16_t ax, ay, az;
		uint8_t result = 0, flag;
a00044d8:	f04f 0300 	mov.w	r3, #0
a00044dc:	77bb      	strb	r3, [r7, #30]
		uint8_t loss_count = 0;
a00044de:	f04f 0300 	mov.w	r3, #0
a00044e2:	77fb      	strb	r3, [r7, #31]
		uint16_t roll_rate, pitch_rate, yaw_rate;

		hk_pkt = (pkt_hk_t* )data;
a00044e4:	f64d 124c 	movw	r2, #55628	; 0xd94c
a00044e8:	f2ca 0200 	movt	r2, #40960	; 0xa000
a00044ec:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a00044f0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00044f4:	601a      	str	r2, [r3, #0]


		while(1){
			result = get_IMU_acc(&ax, &ay, &az);
a00044f6:	f107 0116 	add.w	r1, r7, #22
a00044fa:	f107 0214 	add.w	r2, r7, #20
a00044fe:	f107 0312 	add.w	r3, r7, #18
a0004502:	4608      	mov	r0, r1
a0004504:	4611      	mov	r1, r2
a0004506:	461a      	mov	r2, r3
a0004508:	f7fb fe5c 	bl	a00001c4 <get_IMU_acc>
a000450c:	4603      	mov	r3, r0
a000450e:	77bb      	strb	r3, [r7, #30]
//			uint16_t *a;
//			function_t* imu_device = (function_t*) device;
//			imu_t* imu_dev = &imu_struct;
//			imu_device->read = &read_command;
//			a = imu_device->read(read_acc, (void*) imu_dev);
			result = get_IMU_gyro(&roll_rate, &pitch_rate, &yaw_rate);
a0004510:	f107 010e 	add.w	r1, r7, #14
a0004514:	f107 020c 	add.w	r2, r7, #12
a0004518:	f107 030a 	add.w	r3, r7, #10
a000451c:	4608      	mov	r0, r1
a000451e:	4611      	mov	r1, r2
a0004520:	461a      	mov	r2, r3
a0004522:	f7fb ffe5 	bl	a00004f0 <get_IMU_gyro>
a0004526:	4603      	mov	r3, r0
a0004528:	77bb      	strb	r3, [r7, #30]

	//		pkt_hk->HKID = HK_ID;
	//		pkt_hk->length = HK_length;
			hk_pkt->cmd_cnt = command_cnt;
a000452a:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a000452e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004532:	681a      	ldr	r2, [r3, #0]
a0004534:	f64d 0364 	movw	r3, #55396	; 0xd864
a0004538:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000453c:	881b      	ldrh	r3, [r3, #0]
a000453e:	b29b      	uxth	r3, r3
a0004540:	f003 01ff 	and.w	r1, r3, #255	; 0xff
a0004544:	f04f 0000 	mov.w	r0, #0
a0004548:	ea40 0101 	orr.w	r1, r0, r1
a000454c:	7391      	strb	r1, [r2, #14]
a000454e:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0004552:	b29b      	uxth	r3, r3
a0004554:	f04f 0100 	mov.w	r1, #0
a0004558:	ea41 0303 	orr.w	r3, r1, r3
a000455c:	73d3      	strb	r3, [r2, #15]
			hk_pkt->cmd_reject_cnt = command_reject_cnt;
a000455e:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004562:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004566:	681a      	ldr	r2, [r3, #0]
a0004568:	f64d 0366 	movw	r3, #55398	; 0xd866
a000456c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004570:	881b      	ldrh	r3, [r3, #0]
a0004572:	b29b      	uxth	r3, r3
a0004574:	f003 01ff 	and.w	r1, r3, #255	; 0xff
a0004578:	f04f 0000 	mov.w	r0, #0
a000457c:	ea40 0101 	orr.w	r1, r0, r1
a0004580:	7411      	strb	r1, [r2, #16]
a0004582:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0004586:	b29b      	uxth	r3, r3
a0004588:	f04f 0100 	mov.w	r1, #0
a000458c:	ea41 0303 	orr.w	r3, r1, r3
a0004590:	7453      	strb	r3, [r2, #17]
			hk_pkt->imu_pkt.Acc[0] = ((ax));
a0004592:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004596:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000459a:	681b      	ldr	r3, [r3, #0]
a000459c:	8afa      	ldrh	r2, [r7, #22]
a000459e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
a00045a2:	f04f 0000 	mov.w	r0, #0
a00045a6:	ea40 0101 	orr.w	r1, r0, r1
a00045aa:	7499      	strb	r1, [r3, #18]
a00045ac:	ea4f 2212 	mov.w	r2, r2, lsr #8
a00045b0:	b292      	uxth	r2, r2
a00045b2:	f04f 0100 	mov.w	r1, #0
a00045b6:	ea41 0202 	orr.w	r2, r1, r2
a00045ba:	74da      	strb	r2, [r3, #19]
			hk_pkt->imu_pkt.Acc[1] = ((ay));
a00045bc:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a00045c0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00045c4:	681b      	ldr	r3, [r3, #0]
a00045c6:	8aba      	ldrh	r2, [r7, #20]
a00045c8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
a00045cc:	f04f 0000 	mov.w	r0, #0
a00045d0:	ea40 0101 	orr.w	r1, r0, r1
a00045d4:	7519      	strb	r1, [r3, #20]
a00045d6:	ea4f 2212 	mov.w	r2, r2, lsr #8
a00045da:	b292      	uxth	r2, r2
a00045dc:	f04f 0100 	mov.w	r1, #0
a00045e0:	ea41 0202 	orr.w	r2, r1, r2
a00045e4:	755a      	strb	r2, [r3, #21]
			hk_pkt->imu_pkt.Acc[2] = ((az));
a00045e6:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a00045ea:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00045ee:	681b      	ldr	r3, [r3, #0]
a00045f0:	8a7a      	ldrh	r2, [r7, #18]
a00045f2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
a00045f6:	f04f 0000 	mov.w	r0, #0
a00045fa:	ea40 0101 	orr.w	r1, r0, r1
a00045fe:	7599      	strb	r1, [r3, #22]
a0004600:	ea4f 2212 	mov.w	r2, r2, lsr #8
a0004604:	b292      	uxth	r2, r2
a0004606:	f04f 0100 	mov.w	r1, #0
a000460a:	ea41 0202 	orr.w	r2, r1, r2
a000460e:	75da      	strb	r2, [r3, #23]
			hk_pkt->imu_pkt.Angular_Rate[0] = roll_rate;
a0004610:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004614:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004618:	681b      	ldr	r3, [r3, #0]
a000461a:	89fa      	ldrh	r2, [r7, #14]
a000461c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
a0004620:	f04f 0000 	mov.w	r0, #0
a0004624:	ea40 0101 	orr.w	r1, r0, r1
a0004628:	7619      	strb	r1, [r3, #24]
a000462a:	ea4f 2212 	mov.w	r2, r2, lsr #8
a000462e:	b292      	uxth	r2, r2
a0004630:	f04f 0100 	mov.w	r1, #0
a0004634:	ea41 0202 	orr.w	r2, r1, r2
a0004638:	765a      	strb	r2, [r3, #25]
			hk_pkt->imu_pkt.Angular_Rate[1] = pitch_rate;
a000463a:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a000463e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004642:	681b      	ldr	r3, [r3, #0]
a0004644:	89ba      	ldrh	r2, [r7, #12]
a0004646:	f002 01ff 	and.w	r1, r2, #255	; 0xff
a000464a:	f04f 0000 	mov.w	r0, #0
a000464e:	ea40 0101 	orr.w	r1, r0, r1
a0004652:	7699      	strb	r1, [r3, #26]
a0004654:	ea4f 2212 	mov.w	r2, r2, lsr #8
a0004658:	b292      	uxth	r2, r2
a000465a:	f04f 0100 	mov.w	r1, #0
a000465e:	ea41 0202 	orr.w	r2, r1, r2
a0004662:	76da      	strb	r2, [r3, #27]
			hk_pkt->imu_pkt.Angular_Rate[2] = yaw_rate;
a0004664:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004668:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000466c:	681b      	ldr	r3, [r3, #0]
a000466e:	897a      	ldrh	r2, [r7, #10]
a0004670:	f002 01ff 	and.w	r1, r2, #255	; 0xff
a0004674:	f04f 0000 	mov.w	r0, #0
a0004678:	ea40 0101 	orr.w	r1, r0, r1
a000467c:	7719      	strb	r1, [r3, #28]
a000467e:	ea4f 2212 	mov.w	r2, r2, lsr #8
a0004682:	b292      	uxth	r2, r2
a0004684:	f04f 0100 	mov.w	r1, #0
a0004688:	ea41 0202 	orr.w	r2, r1, r2
a000468c:	775a      	strb	r2, [r3, #29]

			uint16_t imu_temp;
			result = get_IMU_temp(&imu_temp);
a000468e:	f107 0308 	add.w	r3, r7, #8
a0004692:	4618      	mov	r0, r3
a0004694:	f7fc f89e 	bl	a00007d4 <get_IMU_temp>
a0004698:	4603      	mov	r3, r0
a000469a:	77bb      	strb	r3, [r7, #30]

			hk_pkt->imu_pkt.imu_temp = imu_temp;
a000469c:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a00046a0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00046a4:	681b      	ldr	r3, [r3, #0]
a00046a6:	893a      	ldrh	r2, [r7, #8]
a00046a8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
a00046ac:	f04f 0000 	mov.w	r0, #0
a00046b0:	ea40 0101 	orr.w	r1, r0, r1
a00046b4:	7799      	strb	r1, [r3, #30]
a00046b6:	ea4f 2212 	mov.w	r2, r2, lsr #8
a00046ba:	b292      	uxth	r2, r2
a00046bc:	f04f 0100 	mov.w	r1, #0
a00046c0:	ea41 0202 	orr.w	r2, r1, r2
a00046c4:	77da      	strb	r2, [r3, #31]

			hk_pkt->vc_pkt.Sensor_Board_VC[0] = read_bus_voltage(VC1, 1, &flag);
a00046c6:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a00046ca:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00046ce:	681c      	ldr	r4, [r3, #0]
a00046d0:	f107 0311 	add.w	r3, r7, #17
a00046d4:	f04f 0040 	mov.w	r0, #64	; 0x40
a00046d8:	f04f 0101 	mov.w	r1, #1
a00046dc:	461a      	mov	r2, r3
a00046de:	f7fc f9ad 	bl	a0000a3c <read_bus_voltage>
a00046e2:	4603      	mov	r3, r0
a00046e4:	b29b      	uxth	r3, r3
a00046e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
a00046ea:	f04f 0100 	mov.w	r1, #0
a00046ee:	ea41 0202 	orr.w	r2, r1, r2
a00046f2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
a00046f6:	ea4f 2313 	mov.w	r3, r3, lsr #8
a00046fa:	b29b      	uxth	r3, r3
a00046fc:	f04f 0200 	mov.w	r2, #0
a0004700:	ea42 0303 	orr.w	r3, r2, r3
a0004704:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
			loss_count+= flag;
a0004708:	7c7a      	ldrb	r2, [r7, #17]
a000470a:	7ffb      	ldrb	r3, [r7, #31]
a000470c:	4413      	add	r3, r2
a000470e:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[0] = read_bus_voltage( VC1,  2, &flag);
a0004710:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004714:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004718:	681c      	ldr	r4, [r3, #0]
a000471a:	f107 0311 	add.w	r3, r7, #17
a000471e:	f04f 0040 	mov.w	r0, #64	; 0x40
a0004722:	f04f 0102 	mov.w	r1, #2
a0004726:	461a      	mov	r2, r3
a0004728:	f7fc f988 	bl	a0000a3c <read_bus_voltage>
a000472c:	4603      	mov	r3, r0
a000472e:	b29b      	uxth	r3, r3
a0004730:	f003 02ff 	and.w	r2, r3, #255	; 0xff
a0004734:	f04f 0100 	mov.w	r1, #0
a0004738:	ea41 0202 	orr.w	r2, r1, r2
a000473c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
a0004740:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0004744:	b29b      	uxth	r3, r3
a0004746:	f04f 0200 	mov.w	r2, #0
a000474a:	ea42 0303 	orr.w	r3, r2, r3
a000474e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			loss_count+= flag;
a0004752:	7c7a      	ldrb	r2, [r7, #17]
a0004754:	7ffb      	ldrb	r3, [r7, #31]
a0004756:	4413      	add	r3, r2
a0004758:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Comms_VC[0] = read_bus_voltage( VC1,  3, &flag);
a000475a:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a000475e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004762:	681c      	ldr	r4, [r3, #0]
a0004764:	f107 0311 	add.w	r3, r7, #17
a0004768:	f04f 0040 	mov.w	r0, #64	; 0x40
a000476c:	f04f 0103 	mov.w	r1, #3
a0004770:	461a      	mov	r2, r3
a0004772:	f7fc f963 	bl	a0000a3c <read_bus_voltage>
a0004776:	4603      	mov	r3, r0
a0004778:	b29b      	uxth	r3, r3
a000477a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
a000477e:	f04f 0100 	mov.w	r1, #0
a0004782:	ea41 0202 	orr.w	r2, r1, r2
a0004786:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
a000478a:	ea4f 2313 	mov.w	r3, r3, lsr #8
a000478e:	b29b      	uxth	r3, r3
a0004790:	f04f 0200 	mov.w	r2, #0
a0004794:	ea42 0303 	orr.w	r3, r2, r3
a0004798:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
			loss_count+= flag;
a000479c:	7c7a      	ldrb	r2, [r7, #17]
a000479e:	7ffb      	ldrb	r3, [r7, #31]
a00047a0:	4413      	add	r3, r2
a00047a2:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.Sensor_Board_VC[1] = read_shunt_voltage(VC1, 1, &flag);
a00047a4:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a00047a8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00047ac:	681c      	ldr	r4, [r3, #0]
a00047ae:	f107 0311 	add.w	r3, r7, #17
a00047b2:	f04f 0040 	mov.w	r0, #64	; 0x40
a00047b6:	f04f 0101 	mov.w	r1, #1
a00047ba:	461a      	mov	r2, r3
a00047bc:	f7fc f99c 	bl	a0000af8 <read_shunt_voltage>
a00047c0:	4603      	mov	r3, r0
a00047c2:	b29b      	uxth	r3, r3
a00047c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
a00047c8:	f04f 0100 	mov.w	r1, #0
a00047cc:	ea41 0202 	orr.w	r2, r1, r2
a00047d0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
a00047d4:	ea4f 2313 	mov.w	r3, r3, lsr #8
a00047d8:	b29b      	uxth	r3, r3
a00047da:	f04f 0200 	mov.w	r2, #0
a00047de:	ea42 0303 	orr.w	r3, r2, r3
a00047e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			loss_count+= flag;
a00047e6:	7c7a      	ldrb	r2, [r7, #17]
a00047e8:	7ffb      	ldrb	r3, [r7, #31]
a00047ea:	4413      	add	r3, r2
a00047ec:	77fb      	strb	r3, [r7, #31]
			hk_pkt->vc_pkt.CDH_VC[1] = read_shunt_voltage( VC1,  2, &flag);
a00047ee:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a00047f2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00047f6:	681c      	ldr	r4, [r3, #0]
a00047f8:	f107 0311 	add.w	r3, r7, #17
a00047fc:	f04f 0040 	mov.w	r0, #64	; 0x40
a0004800:	f04f 0102 	mov.w	r1, #2
a0004804:	461a      	mov	r2, r3
a0004806:	f7fc f977 	bl	a0000af8 <read_shunt_voltage>
a000480a:	4603      	mov	r3, r0
a000480c:	b29b      	uxth	r3, r3
a000480e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
a0004812:	f04f 0100 	mov.w	r1, #0
a0004816:	ea41 0202 	orr.w	r2, r1, r2
a000481a:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
a000481e:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0004822:	b29b      	uxth	r3, r3
a0004824:	f04f 0200 	mov.w	r2, #0
a0004828:	ea42 0303 	orr.w	r3, r2, r3
a000482c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			loss_count+= flag;
a0004830:	7c7a      	ldrb	r2, [r7, #17]
a0004832:	7ffb      	ldrb	r3, [r7, #31]
a0004834:	4413      	add	r3, r2
a0004836:	77fb      	strb	r3, [r7, #31]

			hk_pkt->vc_pkt.Comms_VC[1] = read_shunt_voltage( VC1,  3, &flag);
a0004838:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a000483c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004840:	681c      	ldr	r4, [r3, #0]
a0004842:	f107 0311 	add.w	r3, r7, #17
a0004846:	f04f 0040 	mov.w	r0, #64	; 0x40
a000484a:	f04f 0103 	mov.w	r1, #3
a000484e:	461a      	mov	r2, r3
a0004850:	f7fc f952 	bl	a0000af8 <read_shunt_voltage>
a0004854:	4603      	mov	r3, r0
a0004856:	b29b      	uxth	r3, r3
a0004858:	f003 02ff 	and.w	r2, r3, #255	; 0xff
a000485c:	f04f 0100 	mov.w	r1, #0
a0004860:	ea41 0202 	orr.w	r2, r1, r2
a0004864:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
a0004868:	ea4f 2313 	mov.w	r3, r3, lsr #8
a000486c:	b29b      	uxth	r3, r3
a000486e:	f04f 0200 	mov.w	r2, #0
a0004872:	ea42 0303 	orr.w	r3, r2, r3
a0004876:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			loss_count+= flag;
a000487a:	7c7a      	ldrb	r2, [r7, #17]
a000487c:	7ffb      	ldrb	r3, [r7, #31]
a000487e:	4413      	add	r3, r2
a0004880:	77fb      	strb	r3, [r7, #31]

			data[511] = HK_API_ID;
a0004882:	f64d 134c 	movw	r3, #55628	; 0xd94c
a0004886:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000488a:	f04f 0201 	mov.w	r2, #1
a000488e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(get_pld_pkt_handle, uxPriority + 1);
a0004892:	f64d 73d4 	movw	r3, #57300	; 0xdfd4
a0004896:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000489a:	681a      	ldr	r2, [r3, #0]
a000489c:	69bb      	ldr	r3, [r7, #24]
a000489e:	f103 0301 	add.w	r3, r3, #1
a00048a2:	4610      	mov	r0, r2
a00048a4:	4619      	mov	r1, r3
a00048a6:	f7fd fb8b 	bl	a0001fc0 <vTaskPrioritySet>

		}
a00048aa:	e624      	b.n	a00044f6 <get_hk_data+0x4a>
	}
}
a00048ac:	f107 0724 	add.w	r7, r7, #36	; 0x24
a00048b0:	46bd      	mov	sp, r7
a00048b2:	bd90      	pop	{r4, r7, pc}

a00048b4 <get_pld_data>:

void get_pld_data(void* d1){
a00048b4:	b5b0      	push	{r4, r5, r7, lr}
a00048b6:	b084      	sub	sp, #16
a00048b8:	af00      	add	r7, sp, #0
a00048ba:	6078      	str	r0, [r7, #4]

	UBaseType_t uxPriority = uxTaskPriorityGet(NULL);
a00048bc:	f04f 0000 	mov.w	r0, #0
a00048c0:	f7fd fb62 	bl	a0001f88 <uxTaskPriorityGet>
a00048c4:	4603      	mov	r3, r0
a00048c6:	60bb      	str	r3, [r7, #8]

	if(feed_get_payload_data != pdFAIL){
a00048c8:	f64d 73fc 	movw	r3, #57340	; 0xdffc
a00048cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00048d0:	681b      	ldr	r3, [r3, #0]
a00048d2:	2b00      	cmp	r3, #0
a00048d4:	d04f      	beq.n	a0004976 <get_pld_data+0xc2>

		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
a00048d6:	f64d 026c 	movw	r2, #55404	; 0xd86c
a00048da:	f2ca 0200 	movt	r2, #40960	; 0xa000
a00048de:	f24e 0304 	movw	r3, #57348	; 0xe004
a00048e2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00048e6:	601a      	str	r2, [r3, #0]
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
a00048e8:	f04f 0300 	mov.w	r3, #0
a00048ec:	73fb      	strb	r3, [r7, #15]
a00048ee:	e02e      	b.n	a000494e <get_pld_data+0x9a>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
a00048f0:	f24e 0304 	movw	r3, #57348	; 0xe004
a00048f4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00048f8:	681c      	ldr	r4, [r3, #0]
a00048fa:	7bfd      	ldrb	r5, [r7, #15]
a00048fc:	7bbb      	ldrb	r3, [r7, #14]
a00048fe:	7bfa      	ldrb	r2, [r7, #15]
a0004900:	f64d 7040 	movw	r0, #57152	; 0xdf40
a0004904:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004908:	f04f 0121 	mov.w	r1, #33	; 0x21
a000490c:	f7fc f954 	bl	a0000bb8 <get_ADC_value>
a0004910:	4603      	mov	r3, r0
a0004912:	4619      	mov	r1, r3
a0004914:	f105 0204 	add.w	r2, r5, #4
a0004918:	f001 00ff 	and.w	r0, r1, #255	; 0xff
a000491c:	ea4f 0342 	mov.w	r3, r2, lsl #1
a0004920:	4423      	add	r3, r4
a0004922:	f04f 0c00 	mov.w	ip, #0
a0004926:	ea4c 0000 	orr.w	r0, ip, r0
a000492a:	7198      	strb	r0, [r3, #6]
a000492c:	ea4f 2311 	mov.w	r3, r1, lsr #8
a0004930:	b298      	uxth	r0, r3
a0004932:	ea4f 0342 	mov.w	r3, r2, lsl #1
a0004936:	4423      	add	r3, r4
a0004938:	f04f 0200 	mov.w	r2, #0
a000493c:	4611      	mov	r1, r2
a000493e:	4602      	mov	r2, r0
a0004940:	ea41 0202 	orr.w	r2, r1, r2
a0004944:	71da      	strb	r2, [r3, #7]
		uint8_t flag;
//		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
		pld_pkt = (pkt_pld_t* )data_pld;
		uint8_t i;
		while(1){
			for(i=0;i<7;i++){
a0004946:	7bfb      	ldrb	r3, [r7, #15]
a0004948:	f103 0301 	add.w	r3, r3, #1
a000494c:	73fb      	strb	r3, [r7, #15]
a000494e:	7bfb      	ldrb	r3, [r7, #15]
a0004950:	2b06      	cmp	r3, #6
a0004952:	d9cd      	bls.n	a00048f0 <get_pld_data+0x3c>
				pld_pkt->adc_chx[i] = get_ADC_value(&g_core_i2c4, ADC_ADDR, i, flag);
			}
			data_pld[49] = PLD_API_ID;
a0004954:	f64d 036c 	movw	r3, #55404	; 0xd86c
a0004958:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000495c:	f04f 0202 	mov.w	r2, #2
a0004960:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
//			xTaskNotifyGive(tlm_tsk_handle);
			vTaskPrioritySet(NULL, uxPriority - 2);
a0004964:	68bb      	ldr	r3, [r7, #8]
a0004966:	f1a3 0302 	sub.w	r3, r3, #2
a000496a:	f04f 0000 	mov.w	r0, #0
a000496e:	4619      	mov	r1, r3
a0004970:	f7fd fb26 	bl	a0001fc0 <vTaskPrioritySet>

		}
a0004974:	e7b8      	b.n	a00048e8 <get_pld_data+0x34>

	}
}
a0004976:	f107 0710 	add.w	r7, r7, #16
a000497a:	46bd      	mov	sp, r7
a000497c:	bdb0      	pop	{r4, r5, r7, pc}
a000497e:	bf00      	nop

a0004980 <vGetPktStruct>:


void vGetPktStruct(pkt_name_t pktname, void* pktdata, uint8_t pktsize){
a0004980:	b580      	push	{r7, lr}
a0004982:	b088      	sub	sp, #32
a0004984:	af00      	add	r7, sp, #0
a0004986:	60b9      	str	r1, [r7, #8]
a0004988:	4613      	mov	r3, r2
a000498a:	4602      	mov	r2, r0
a000498c:	73fa      	strb	r2, [r7, #15]
a000498e:	71fb      	strb	r3, [r7, #7]

	pkt_t pkt;

	pkt.pkt_type = pktname;
a0004990:	7bfb      	ldrb	r3, [r7, #15]
a0004992:	753b      	strb	r3, [r7, #20]
	pkt.pkt_data = pktdata;
a0004994:	68bb      	ldr	r3, [r7, #8]
a0004996:	61bb      	str	r3, [r7, #24]
	pkt.pkt_size = pktsize;
a0004998:	79fb      	ldrb	r3, [r7, #7]
a000499a:	773b      	strb	r3, [r7, #28]

//	xQueueSend(Data_PKT_Queue, &pkt, 0);

	// Storing the packets
	if(pkt_stream[pktname].rate != 0){
a000499c:	7bf9      	ldrb	r1, [r7, #15]
a000499e:	f64d 5250 	movw	r2, #56656	; 0xdd50
a00049a2:	f2ca 0200 	movt	r2, #40960	; 0xa000
a00049a6:	460b      	mov	r3, r1
a00049a8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a00049ac:	440b      	add	r3, r1
a00049ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
a00049b2:	4413      	add	r3, r2
a00049b4:	f103 0310 	add.w	r3, r3, #16
a00049b8:	881b      	ldrh	r3, [r3, #0]
a00049ba:	2b00      	cmp	r3, #0
a00049bc:	d011      	beq.n	a00049e2 <vGetPktStruct+0x62>
		xQueueSend(Data_PKT_Queue, &pkt , 0);
a00049be:	f24e 0300 	movw	r3, #57344	; 0xe000
a00049c2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00049c6:	681a      	ldr	r2, [r3, #0]
a00049c8:	f107 0314 	add.w	r3, r7, #20
a00049cc:	4610      	mov	r0, r2
a00049ce:	4619      	mov	r1, r3
a00049d0:	f04f 0200 	mov.w	r2, #0
a00049d4:	f04f 0300 	mov.w	r3, #0
a00049d8:	f7fc fd04 	bl	a00013e4 <xQueueGenericSend>
		vtlm_sender();
a00049dc:	f000 f926 	bl	a0004c2c <vtlm_sender>
a00049e0:	e00e      	b.n	a0004a00 <vGetPktStruct+0x80>
	}
	else{
		xQueueSend(Store_PKT_Queue, &pkt, 0);
a00049e2:	f64d 73cc 	movw	r3, #57292	; 0xdfcc
a00049e6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00049ea:	681a      	ldr	r2, [r3, #0]
a00049ec:	f107 0314 	add.w	r3, r7, #20
a00049f0:	4610      	mov	r0, r2
a00049f2:	4619      	mov	r1, r3
a00049f4:	f04f 0200 	mov.w	r2, #0
a00049f8:	f04f 0300 	mov.w	r3, #0
a00049fc:	f7fc fcf2 	bl	a00013e4 <xQueueGenericSend>
	}

}
a0004a00:	f107 0720 	add.w	r7, r7, #32
a0004a04:	46bd      	mov	sp, r7
a0004a06:	bd80      	pop	{r7, pc}

a0004a08 <vtlm_task>:

void vtlm_task(TimerHandle_t exp_timer){
a0004a08:	b580      	push	{r7, lr}
a0004a0a:	b084      	sub	sp, #16
a0004a0c:	af00      	add	r7, sp, #0
a0004a0e:	6078      	str	r0, [r7, #4]
	uint16_t seq_num=0;  // Try to generalised this timer callback function. Also combine the tlm_task and the tlm_sender task.
a0004a10:	f04f 0300 	mov.w	r3, #0
a0004a14:	817b      	strh	r3, [r7, #10]
	uint16_t* t_id;
	t_id = (uint16_t* )pvTimerGetTimerID(exp_timer);
a0004a16:	6878      	ldr	r0, [r7, #4]
a0004a18:	f7ff f87a 	bl	a0003b10 <pvTimerGetTimerID>
a0004a1c:	4603      	mov	r3, r0
a0004a1e:	60fb      	str	r3, [r7, #12]
//
//	if(pkt_stream->pkt_timer_id == pkt_stream->pkt.pkt_type){
//
//	}

	if(t_id == 0){
a0004a20:	68fb      	ldr	r3, [r7, #12]
a0004a22:	2b00      	cmp	r3, #0
a0004a24:	d17d      	bne.n	a0004b22 <vtlm_task+0x11a>
		hk_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, HK_API_ID))));
a0004a26:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004a2a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004a2e:	681b      	ldr	r3, [r3, #0]
a0004a30:	f04f 0200 	mov.w	r2, #0
a0004a34:	f042 0208 	orr.w	r2, r2, #8
a0004a38:	701a      	strb	r2, [r3, #0]
a0004a3a:	f04f 0200 	mov.w	r2, #0
a0004a3e:	f042 0201 	orr.w	r2, r2, #1
a0004a42:	705a      	strb	r2, [r3, #1]
		hk_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
a0004a44:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004a48:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004a4c:	681a      	ldr	r2, [r3, #0]
a0004a4e:	897b      	ldrh	r3, [r7, #10]
a0004a50:	f103 0301 	add.w	r3, r3, #1
a0004a54:	817b      	strh	r3, [r7, #10]
a0004a56:	897b      	ldrh	r3, [r7, #10]
a0004a58:	ea6f 4383 	mvn.w	r3, r3, lsl #18
a0004a5c:	ea6f 4393 	mvn.w	r3, r3, lsr #18
a0004a60:	b29b      	uxth	r3, r3
a0004a62:	b29b      	uxth	r3, r3
a0004a64:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0004a68:	b299      	uxth	r1, r3
a0004a6a:	897b      	ldrh	r3, [r7, #10]
a0004a6c:	f103 0301 	add.w	r3, r3, #1
a0004a70:	817b      	strh	r3, [r7, #10]
a0004a72:	897b      	ldrh	r3, [r7, #10]
a0004a74:	ea6f 4383 	mvn.w	r3, r3, lsl #18
a0004a78:	ea6f 4393 	mvn.w	r3, r3, lsr #18
a0004a7c:	b29b      	uxth	r3, r3
a0004a7e:	b29b      	uxth	r3, r3
a0004a80:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0004a84:	b29b      	uxth	r3, r3
a0004a86:	ea41 0303 	orr.w	r3, r1, r3
a0004a8a:	b29b      	uxth	r3, r3
a0004a8c:	b29b      	uxth	r3, r3
a0004a8e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
a0004a92:	f04f 0000 	mov.w	r0, #0
a0004a96:	ea40 0101 	orr.w	r1, r0, r1
a0004a9a:	7091      	strb	r1, [r2, #2]
a0004a9c:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0004aa0:	b29b      	uxth	r3, r3
a0004aa2:	f04f 0100 	mov.w	r1, #0
a0004aa6:	ea41 0303 	orr.w	r3, r1, r3
a0004aaa:	70d3      	strb	r3, [r2, #3]
		hk_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(HK_PKT_LENGTH))));
a0004aac:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004ab0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004ab4:	681b      	ldr	r3, [r3, #0]
a0004ab6:	f04f 0200 	mov.w	r2, #0
a0004aba:	711a      	strb	r2, [r3, #4]
a0004abc:	f04f 0200 	mov.w	r2, #0
a0004ac0:	f042 022e 	orr.w	r2, r2, #46	; 0x2e
a0004ac4:	715a      	strb	r2, [r3, #5]
		hk_pkt->ccsds_s1 = 0;
a0004ac6:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004aca:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004ace:	681b      	ldr	r3, [r3, #0]
a0004ad0:	f04f 0200 	mov.w	r2, #0
a0004ad4:	719a      	strb	r2, [r3, #6]
a0004ad6:	f04f 0200 	mov.w	r2, #0
a0004ada:	71da      	strb	r2, [r3, #7]
a0004adc:	f04f 0200 	mov.w	r2, #0
a0004ae0:	721a      	strb	r2, [r3, #8]
a0004ae2:	f04f 0200 	mov.w	r2, #0
a0004ae6:	725a      	strb	r2, [r3, #9]
		hk_pkt->ccsds_s2 = 0;
a0004ae8:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004aec:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004af0:	681b      	ldr	r3, [r3, #0]
a0004af2:	f04f 0200 	mov.w	r2, #0
a0004af6:	729a      	strb	r2, [r3, #10]
a0004af8:	f04f 0200 	mov.w	r2, #0
a0004afc:	72da      	strb	r2, [r3, #11]
a0004afe:	f04f 0200 	mov.w	r2, #0
a0004b02:	731a      	strb	r2, [r3, #12]
a0004b04:	f04f 0200 	mov.w	r2, #0
a0004b08:	735a      	strb	r2, [r3, #13]

		vGetPktStruct( hk, (void*) hk_pkt, HK_PKT_LENGTH);
a0004b0a:	f64d 73dc 	movw	r3, #57308	; 0xdfdc
a0004b0e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004b12:	681b      	ldr	r3, [r3, #0]
a0004b14:	f04f 0000 	mov.w	r0, #0
a0004b18:	4619      	mov	r1, r3
a0004b1a:	f04f 022e 	mov.w	r2, #46	; 0x2e
a0004b1e:	f7ff ff2f 	bl	a0004980 <vGetPktStruct>
	}
	if(t_id == 1){
a0004b22:	68fb      	ldr	r3, [r7, #12]
a0004b24:	2b01      	cmp	r3, #1
a0004b26:	d17d      	bne.n	a0004c24 <vtlm_task+0x21c>
		pld_pkt->ccsds_p1 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p1(tlm_pkt_type, PLD_API_ID))));
a0004b28:	f24e 0304 	movw	r3, #57348	; 0xe004
a0004b2c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004b30:	681b      	ldr	r3, [r3, #0]
a0004b32:	f04f 0200 	mov.w	r2, #0
a0004b36:	f042 0208 	orr.w	r2, r2, #8
a0004b3a:	701a      	strb	r2, [r3, #0]
a0004b3c:	f04f 0200 	mov.w	r2, #0
a0004b40:	f042 0202 	orr.w	r2, r2, #2
a0004b44:	705a      	strb	r2, [r3, #1]
		pld_pkt->ccsds_p2 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p2(++seq_num))));
a0004b46:	f24e 0304 	movw	r3, #57348	; 0xe004
a0004b4a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004b4e:	681a      	ldr	r2, [r3, #0]
a0004b50:	897b      	ldrh	r3, [r7, #10]
a0004b52:	f103 0301 	add.w	r3, r3, #1
a0004b56:	817b      	strh	r3, [r7, #10]
a0004b58:	897b      	ldrh	r3, [r7, #10]
a0004b5a:	ea6f 4383 	mvn.w	r3, r3, lsl #18
a0004b5e:	ea6f 4393 	mvn.w	r3, r3, lsr #18
a0004b62:	b29b      	uxth	r3, r3
a0004b64:	b29b      	uxth	r3, r3
a0004b66:	ea4f 2303 	mov.w	r3, r3, lsl #8
a0004b6a:	b299      	uxth	r1, r3
a0004b6c:	897b      	ldrh	r3, [r7, #10]
a0004b6e:	f103 0301 	add.w	r3, r3, #1
a0004b72:	817b      	strh	r3, [r7, #10]
a0004b74:	897b      	ldrh	r3, [r7, #10]
a0004b76:	ea6f 4383 	mvn.w	r3, r3, lsl #18
a0004b7a:	ea6f 4393 	mvn.w	r3, r3, lsr #18
a0004b7e:	b29b      	uxth	r3, r3
a0004b80:	b29b      	uxth	r3, r3
a0004b82:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0004b86:	b29b      	uxth	r3, r3
a0004b88:	ea41 0303 	orr.w	r3, r1, r3
a0004b8c:	b29b      	uxth	r3, r3
a0004b8e:	b29b      	uxth	r3, r3
a0004b90:	f003 01ff 	and.w	r1, r3, #255	; 0xff
a0004b94:	f04f 0000 	mov.w	r0, #0
a0004b98:	ea40 0101 	orr.w	r1, r0, r1
a0004b9c:	7091      	strb	r1, [r2, #2]
a0004b9e:	ea4f 2313 	mov.w	r3, r3, lsr #8
a0004ba2:	b29b      	uxth	r3, r3
a0004ba4:	f04f 0100 	mov.w	r1, #0
a0004ba8:	ea41 0303 	orr.w	r3, r1, r3
a0004bac:	70d3      	strb	r3, [r2, #3]
		pld_pkt->ccsds_p3 = PILOT_REVERSE_BYTE_ORDER(((ccsds_p3(PLD_PKT_LENGTH))));
a0004bae:	f24e 0304 	movw	r3, #57348	; 0xe004
a0004bb2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004bb6:	681b      	ldr	r3, [r3, #0]
a0004bb8:	f04f 0200 	mov.w	r2, #0
a0004bbc:	711a      	strb	r2, [r3, #4]
a0004bbe:	f04f 0200 	mov.w	r2, #0
a0004bc2:	f042 021e 	orr.w	r2, r2, #30
a0004bc6:	715a      	strb	r2, [r3, #5]

		pld_pkt->ccsds_s1 = 0;
a0004bc8:	f24e 0304 	movw	r3, #57348	; 0xe004
a0004bcc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004bd0:	681b      	ldr	r3, [r3, #0]
a0004bd2:	f04f 0200 	mov.w	r2, #0
a0004bd6:	719a      	strb	r2, [r3, #6]
a0004bd8:	f04f 0200 	mov.w	r2, #0
a0004bdc:	71da      	strb	r2, [r3, #7]
a0004bde:	f04f 0200 	mov.w	r2, #0
a0004be2:	721a      	strb	r2, [r3, #8]
a0004be4:	f04f 0200 	mov.w	r2, #0
a0004be8:	725a      	strb	r2, [r3, #9]
		pld_pkt->ccsds_s2 = 0;
a0004bea:	f24e 0304 	movw	r3, #57348	; 0xe004
a0004bee:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004bf2:	681b      	ldr	r3, [r3, #0]
a0004bf4:	f04f 0200 	mov.w	r2, #0
a0004bf8:	729a      	strb	r2, [r3, #10]
a0004bfa:	f04f 0200 	mov.w	r2, #0
a0004bfe:	72da      	strb	r2, [r3, #11]
a0004c00:	f04f 0200 	mov.w	r2, #0
a0004c04:	731a      	strb	r2, [r3, #12]
a0004c06:	f04f 0200 	mov.w	r2, #0
a0004c0a:	735a      	strb	r2, [r3, #13]

		vGetPktStruct(pld, (void* )pld_pkt, PLD_PKT_LENGTH);
a0004c0c:	f24e 0304 	movw	r3, #57348	; 0xe004
a0004c10:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004c14:	681b      	ldr	r3, [r3, #0]
a0004c16:	f04f 0001 	mov.w	r0, #1
a0004c1a:	4619      	mov	r1, r3
a0004c1c:	f04f 021e 	mov.w	r2, #30
a0004c20:	f7ff feae 	bl	a0004980 <vGetPktStruct>
	}
	else{

	}
}
a0004c24:	f107 0710 	add.w	r7, r7, #16
a0004c28:	46bd      	mov	sp, r7
a0004c2a:	bd80      	pop	{r7, pc}

a0004c2c <vtlm_sender>:


void vtlm_sender(void* d){
a0004c2c:	b580      	push	{r7, lr}
a0004c2e:	b086      	sub	sp, #24
a0004c30:	af00      	add	r7, sp, #0
a0004c32:	6078      	str	r0, [r7, #4]

	pkt_t pkt_send;

//	pkt_stream(pkt_send);

	xQueueReceive(Data_PKT_Queue, &pkt_send, portMAX_DELAY);
a0004c34:	f24e 0300 	movw	r3, #57344	; 0xe000
a0004c38:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004c3c:	681a      	ldr	r2, [r3, #0]
a0004c3e:	f107 030c 	add.w	r3, r7, #12
a0004c42:	4610      	mov	r0, r2
a0004c44:	4619      	mov	r1, r3
a0004c46:	f04f 32ff 	mov.w	r2, #4294967295
a0004c4a:	f04f 0300 	mov.w	r3, #0
a0004c4e:	f7fc fd83 	bl	a0001758 <xQueueGenericReceive>

	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);
a0004c52:	693b      	ldr	r3, [r7, #16]
a0004c54:	461a      	mov	r2, r3
a0004c56:	7d3b      	ldrb	r3, [r7, #20]
a0004c58:	f24e 004c 	movw	r0, #57420	; 0xe04c
a0004c5c:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004c60:	4611      	mov	r1, r2
a0004c62:	461a      	mov	r2, r3
a0004c64:	f000 fb42 	bl	a00052ec <MSS_UART_polled_tx>
//
//
//	MSS_UART_polled_tx(&g_mss_uart0, pkt_send.pkt_data, pkt_send.pkt_size);


}
a0004c68:	f107 0718 	add.w	r7, r7, #24
a0004c6c:	46bd      	mov	sp, r7
a0004c6e:	bd80      	pop	{r7, pc}

a0004c70 <irq_tsk_func>:
	}

}


void irq_tsk_func(void* f_param){
a0004c70:	b580      	push	{r7, lr}
a0004c72:	b084      	sub	sp, #16
a0004c74:	af00      	add	r7, sp, #0
a0004c76:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue;

	while(1){

		xTaskNotifyWait(0x00, 0, &ulNotifiedValue, portMAX_DELAY);
a0004c78:	f107 0308 	add.w	r3, r7, #8
a0004c7c:	f04f 0000 	mov.w	r0, #0
a0004c80:	f04f 0100 	mov.w	r1, #0
a0004c84:	461a      	mov	r2, r3
a0004c86:	f04f 33ff 	mov.w	r3, #4294967295
a0004c8a:	f7fe f9e7 	bl	a000305c <xTaskNotifyWait>
		ulTaskNotifyTake(pdTRUE, 1);
a0004c8e:	f04f 0001 	mov.w	r0, #1
a0004c92:	f04f 0101 	mov.w	r1, #1
a0004c96:	f7fe f981 	bl	a0002f9c <ulTaskNotifyTake>
		rx_cmd_t* rx_cmd;
		rx_cmd = (rx_cmd_t* ) f_param;
a0004c9a:	687b      	ldr	r3, [r7, #4]
a0004c9c:	60fb      	str	r3, [r7, #12]


		if(cmd_valid(rx_cmd)){
a0004c9e:	68f8      	ldr	r0, [r7, #12]
a0004ca0:	f7fc f840 	bl	a0000d24 <cmd_valid>
a0004ca4:	4603      	mov	r3, r0
a0004ca6:	2b00      	cmp	r3, #0
a0004ca8:	d011      	beq.n	a0004cce <irq_tsk_func+0x5e>
			cmd_engine(rx_cmd);
a0004caa:	68f8      	ldr	r0, [r7, #12]
a0004cac:	f7fc f8f6 	bl	a0000e9c <cmd_engine>
			command_cnt++;
a0004cb0:	f64d 0364 	movw	r3, #55396	; 0xd864
a0004cb4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004cb8:	881b      	ldrh	r3, [r3, #0]
a0004cba:	b29b      	uxth	r3, r3
a0004cbc:	f103 0301 	add.w	r3, r3, #1
a0004cc0:	b29a      	uxth	r2, r3
a0004cc2:	f64d 0364 	movw	r3, #55396	; 0xd864
a0004cc6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004cca:	801a      	strh	r2, [r3, #0]
		else{
			command_reject_cnt++;
		}


	}
a0004ccc:	e7d4      	b.n	a0004c78 <irq_tsk_func+0x8>
		if(cmd_valid(rx_cmd)){
			cmd_engine(rx_cmd);
			command_cnt++;
		}
		else{
			command_reject_cnt++;
a0004cce:	f64d 0366 	movw	r3, #55398	; 0xd866
a0004cd2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004cd6:	881b      	ldrh	r3, [r3, #0]
a0004cd8:	b29b      	uxth	r3, r3
a0004cda:	f103 0301 	add.w	r3, r3, #1
a0004cde:	b29a      	uxth	r2, r3
a0004ce0:	f64d 0366 	movw	r3, #55398	; 0xd866
a0004ce4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004ce8:	801a      	strh	r2, [r3, #0]
		}


	}
a0004cea:	e7c5      	b.n	a0004c78 <irq_tsk_func+0x8>

a0004cec <uart0_rx_handler>:
}

void uart0_rx_handler(mss_uart_instance_t * this_uart){
a0004cec:	b580      	push	{r7, lr}
a0004cee:	b084      	sub	sp, #16
a0004cf0:	af00      	add	r7, sp, #0
a0004cf2:	6078      	str	r0, [r7, #4]


	uart1_irq_size = MSS_UART_get_rx(this_uart, uart0_irq_rx_buffer, 8);
a0004cf4:	6878      	ldr	r0, [r7, #4]
a0004cf6:	f64d 110c 	movw	r1, #55564	; 0xd90c
a0004cfa:	f2ca 0100 	movt	r1, #40960	; 0xa000
a0004cfe:	f04f 0208 	mov.w	r2, #8
a0004d02:	f000 fb65 	bl	a00053d0 <MSS_UART_get_rx>
a0004d06:	4602      	mov	r2, r0
a0004d08:	f64d 1348 	movw	r3, #55624	; 0xd948
a0004d0c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004d10:	601a      	str	r2, [r3, #0]

	BaseType_t xHigherPriorityTaskWoken;
	 xHigherPriorityTaskWoken = pdFALSE;
a0004d12:	f04f 0300 	mov.w	r3, #0
a0004d16:	60fb      	str	r3, [r7, #12]

	 vTaskNotifyGiveFromISR(uart_irq, &xHigherPriorityTaskWoken);
a0004d18:	f64d 0368 	movw	r3, #55400	; 0xd868
a0004d1c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004d20:	681a      	ldr	r2, [r3, #0]
a0004d22:	f107 030c 	add.w	r3, r7, #12
a0004d26:	4610      	mov	r0, r2
a0004d28:	4619      	mov	r1, r3
a0004d2a:	f7fe fa0f 	bl	a000314c <vTaskNotifyGiveFromISR>

	 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
a0004d2e:	68fb      	ldr	r3, [r7, #12]
a0004d30:	2b00      	cmp	r3, #0
a0004d32:	d00a      	beq.n	a0004d4a <uart0_rx_handler+0x5e>
a0004d34:	f64e 5304 	movw	r3, #60676	; 0xed04
a0004d38:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0004d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
a0004d40:	601a      	str	r2, [r3, #0]
a0004d42:	f3bf 8f4f 	dsb	sy
a0004d46:	f3bf 8f6f 	isb	sy

}
a0004d4a:	f107 0710 	add.w	r7, r7, #16
a0004d4e:	46bd      	mov	sp, r7
a0004d50:	bd80      	pop	{r7, pc}
a0004d52:	bf00      	nop

a0004d54 <demo_tasks>:
//	 }
//}



void demo_tasks(void){
a0004d54:	b590      	push	{r4, r7, lr}
a0004d56:	b08d      	sub	sp, #52	; 0x34
a0004d58:	af02      	add	r7, sp, #8

		uint8_t REF_DATA[3] = {0x38, 0x00, 0x00};
a0004d5a:	f04f 0338 	mov.w	r3, #56	; 0x38
a0004d5e:	743b      	strb	r3, [r7, #16]
a0004d60:	f04f 0300 	mov.w	r3, #0
a0004d64:	747b      	strb	r3, [r7, #17]
a0004d66:	f04f 0300 	mov.w	r3, #0
a0004d6a:	74bb      	strb	r3, [r7, #18]
		uint8_t PWR[3] = {0x20, 0x00, 0x0F};
a0004d6c:	f247 42a4 	movw	r2, #29860	; 0x74a4
a0004d70:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0004d74:	f107 030c 	add.w	r3, r7, #12
a0004d78:	6812      	ldr	r2, [r2, #0]
a0004d7a:	4611      	mov	r1, r2
a0004d7c:	8019      	strh	r1, [r3, #0]
a0004d7e:	f103 0302 	add.w	r3, r3, #2
a0004d82:	ea4f 4212 	mov.w	r2, r2, lsr #16
a0004d86:	701a      	strb	r2, [r3, #0]
		uint8_t config[3] = {0x30, 0x00, 0x01};
a0004d88:	f247 42a8 	movw	r2, #29864	; 0x74a8
a0004d8c:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0004d90:	f107 0308 	add.w	r3, r7, #8
a0004d94:	6812      	ldr	r2, [r2, #0]
a0004d96:	4611      	mov	r1, r2
a0004d98:	8019      	strh	r1, [r3, #0]
a0004d9a:	f103 0302 	add.w	r3, r3, #2
a0004d9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
a0004da2:	701a      	strb	r2, [r3, #0]
		uint8_t sw_clear[3] = {0x28, 0x00, 0x01};
a0004da4:	f247 42ac 	movw	r2, #29868	; 0x74ac
a0004da8:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0004dac:	f107 0304 	add.w	r3, r7, #4
a0004db0:	6812      	ldr	r2, [r2, #0]
a0004db2:	4611      	mov	r1, r2
a0004db4:	8019      	strh	r1, [r3, #0]
a0004db6:	f103 0302 	add.w	r3, r3, #2
a0004dba:	ea4f 4212 	mov.w	r2, r2, lsr #16
a0004dbe:	701a      	strb	r2, [r3, #0]
		i2c_status_t status;

//		imu_t* imu_struct = (imu_t*) device_param;

		function_t* imu_ptr = (function_t*) device ;
a0004dc0:	f64d 434c 	movw	r3, #56396	; 0xdc4c
a0004dc4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004dc8:	617b      	str	r3, [r7, #20]
		imu_t* imu_dev;
//		static imu_t imu_struct = {IMU_ADDR, &g_core_i2c5, COREI2C_5_0, I2C_PCLK_DIV_256, 0x15, 0x16, {0x20, 0x60}, 0x28, 0x2A, 0x2C, 0x29, 0x2B, 0x2D, {0x10,0x6A}, 0x18, 0x1A, 0x1C, 0x19, 0x1B, 0x1D };
		imu_dev = &imu_struct;
a0004dca:	f247 43f0 	movw	r3, #29936	; 0x74f0
a0004dce:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004dd2:	61bb      	str	r3, [r7, #24]
		imu_ptr->init = &init;
a0004dd4:	697a      	ldr	r2, [r7, #20]
a0004dd6:	f640 4359 	movw	r3, #3161	; 0xc59
a0004dda:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004dde:	6013      	str	r3, [r2, #0]
		imu_ptr->init(imu, (void* )imu_dev);
a0004de0:	697b      	ldr	r3, [r7, #20]
a0004de2:	681b      	ldr	r3, [r3, #0]
a0004de4:	f04f 0000 	mov.w	r0, #0
a0004de8:	69b9      	ldr	r1, [r7, #24]
a0004dea:	4798      	blx	r3

		I2C_init(&g_core_i2c4, COREI2C_4_0, ADC_ADDR, I2C_PCLK_DIV_256); //ADC Initialisation
a0004dec:	f64d 7040 	movw	r0, #57152	; 0xdf40
a0004df0:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004df4:	f244 0100 	movw	r1, #16384	; 0x4000
a0004df8:	f2c5 0100 	movt	r1, #20480	; 0x5000
a0004dfc:	f04f 0221 	mov.w	r2, #33	; 0x21
a0004e00:	f04f 0300 	mov.w	r3, #0
a0004e04:	f000 ff74 	bl	a0005cf0 <I2C_init>

		function_t* vc_ptr = (function_t*) device ;
a0004e08:	f64d 434c 	movw	r3, #56396	; 0xdc4c
a0004e0c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004e10:	61fb      	str	r3, [r7, #28]
		vc_sensor_t* vc_dev;
//		static vc_sensor_t vc_struct = {VC1, &g_core_i2c2, COREI2C_2_0, I2C_PCLK_DIV_256, {0,0}, {0,0}, {0,0}};
		vc_dev = &vc_struct;
a0004e12:	f247 5310 	movw	r3, #29968	; 0x7510
a0004e16:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004e1a:	623b      	str	r3, [r7, #32]
		vc_ptr->init = &init;
a0004e1c:	69fa      	ldr	r2, [r7, #28]
a0004e1e:	f640 4359 	movw	r3, #3161	; 0xc59
a0004e22:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004e26:	6013      	str	r3, [r2, #0]
		vc_ptr->init(vc_sensor, (void* )vc_dev);
a0004e28:	69fb      	ldr	r3, [r7, #28]
a0004e2a:	681b      	ldr	r3, [r3, #0]
a0004e2c:	f04f 000a 	mov.w	r0, #10
a0004e30:	6a39      	ldr	r1, [r7, #32]
a0004e32:	4798      	blx	r3

		Data_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t));  //Common queue for all packets data storage
a0004e34:	f04f 0003 	mov.w	r0, #3
a0004e38:	f04f 010c 	mov.w	r1, #12
a0004e3c:	f04f 0200 	mov.w	r2, #0
a0004e40:	f7fc fa32 	bl	a00012a8 <xQueueGenericCreate>
a0004e44:	4602      	mov	r2, r0
a0004e46:	f24e 0300 	movw	r3, #57344	; 0xe000
a0004e4a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004e4e:	601a      	str	r2, [r3, #0]
		Store_PKT_Queue = xQueueCreate(QUEUE_SIZE, sizeof(pkt_t)); // Queue from which the data will be stored to the storage
a0004e50:	f04f 0003 	mov.w	r0, #3
a0004e54:	f04f 010c 	mov.w	r1, #12
a0004e58:	f04f 0200 	mov.w	r2, #0
a0004e5c:	f7fc fa24 	bl	a00012a8 <xQueueGenericCreate>
a0004e60:	4602      	mov	r2, r0
a0004e62:	f64d 73cc 	movw	r3, #57292	; 0xdfcc
a0004e66:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004e6a:	601a      	str	r2, [r3, #0]

		set_pktRate(hk, HK_PKT_PERIOD);   //Set all the default packet rate
a0004e6c:	f04f 0000 	mov.w	r0, #0
a0004e70:	f04f 0103 	mov.w	r1, #3
a0004e74:	f7fb f97e 	bl	a0000174 <set_pktRate>
		set_pktRate(pld, PLD_PKT_PERIOD);
a0004e78:	f04f 0001 	mov.w	r0, #1
a0004e7c:	f04f 0164 	mov.w	r1, #100	; 0x64
a0004e80:	f7fb f978 	bl	a0000174 <set_pktRate>
//		MSS_I2C_init(&g_mss_i2c1, DAC_ADDR, MSS_I2C_PCLK_DIV_256);

//		I2C_write(VC_SENSOR_I2C, DAC_ADDR, REF_DATA, 2, I2C_RELEASE_BUS);
//		status = I2C_wait_complete(VC_SENSOR_I2C, I2C_NO_TIMEOUT);

		NVIC_EnableIRQ(UART0_IRQn);
a0004e84:	f04f 000a 	mov.w	r0, #10
a0004e88:	f7ff fac6 	bl	a0004418 <NVIC_EnableIRQ>
		NVIC_SetPriority(UART0_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY - 1);
a0004e8c:	f04f 000a 	mov.w	r0, #10
a0004e90:	f04f 019f 	mov.w	r1, #159	; 0x9f
a0004e94:	f7ff fadc 	bl	a0004450 <NVIC_SetPriority>


		MSS_UART_init(&g_mss_uart0, 9600, MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT);
a0004e98:	f24e 004c 	movw	r0, #57420	; 0xe04c
a0004e9c:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004ea0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
a0004ea4:	f04f 0203 	mov.w	r2, #3
a0004ea8:	f000 f9de 	bl	a0005268 <MSS_UART_init>
		MSS_UART_set_rx_handler(&g_mss_uart0, uart0_rx_handler, MSS_UART_FIFO_EIGHT_BYTES);
a0004eac:	f24e 004c 	movw	r0, #57420	; 0xe04c
a0004eb0:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004eb4:	f644 41ed 	movw	r1, #19693	; 0x4ced
a0004eb8:	f2ca 0100 	movt	r1, #40960	; 0xa000
a0004ebc:	f04f 0280 	mov.w	r2, #128	; 0x80
a0004ec0:	f000 faf4 	bl	a00054ac <MSS_UART_set_rx_handler>
//		init_demo(imu);
//	 xTaskCreate(get_hk_data, "Hk_data", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//		pkt_hk_t* hk_pkt;


	 xMutex = xSemaphoreCreateMutex();
a0004ec4:	f04f 0001 	mov.w	r0, #1
a0004ec8:	f7fc fa70 	bl	a00013ac <xQueueCreateMutex>
a0004ecc:	4602      	mov	r2, r0
a0004ece:	f64d 73ec 	movw	r3, #57324	; 0xdfec
a0004ed2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004ed6:	601a      	str	r2, [r3, #0]
//	 xTaskCreate(get_imu_data, "IMU", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(get_vc_data, "VC", configMINIMAL_STACK_SIZE, (void*) hk_pkt , 1, NULL);
//	 xTaskCreate(pktmngr, "Packet", configMINIMAL_STACK_SIZE, (void*) data, 1, NULL);


		feed_get_hk_data = xTaskCreate(get_hk_data, "HK", configMINIMAL_STACK_SIZE, (void*)data , 2, &get_hk_pkt_handle);
a0004ed8:	f04f 0302 	mov.w	r3, #2
a0004edc:	9300      	str	r3, [sp, #0]
a0004ede:	f64d 73f8 	movw	r3, #57336	; 0xdff8
a0004ee2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004ee6:	9301      	str	r3, [sp, #4]
a0004ee8:	f244 40ad 	movw	r0, #17581	; 0x44ad
a0004eec:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004ef0:	f247 4180 	movw	r1, #29824	; 0x7480
a0004ef4:	f2ca 0100 	movt	r1, #40960	; 0xa000
a0004ef8:	f04f 0250 	mov.w	r2, #80	; 0x50
a0004efc:	f64d 134c 	movw	r3, #55628	; 0xd94c
a0004f00:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004f04:	f7fc fec2 	bl	a0001c8c <xTaskCreate>
a0004f08:	4602      	mov	r2, r0
a0004f0a:	f64d 73f0 	movw	r3, #57328	; 0xdff0
a0004f0e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004f12:	601a      	str	r2, [r3, #0]

		feed_get_payload_data = xTaskCreate(get_pld_data, "Payload", configMINIMAL_STACK_SIZE, (void* )data, 1, &get_pld_pkt_handle);
a0004f14:	f04f 0301 	mov.w	r3, #1
a0004f18:	9300      	str	r3, [sp, #0]
a0004f1a:	f64d 73d4 	movw	r3, #57300	; 0xdfd4
a0004f1e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004f22:	9301      	str	r3, [sp, #4]
a0004f24:	f644 00b5 	movw	r0, #18613	; 0x48b5
a0004f28:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004f2c:	f247 4184 	movw	r1, #29828	; 0x7484
a0004f30:	f2ca 0100 	movt	r1, #40960	; 0xa000
a0004f34:	f04f 0250 	mov.w	r2, #80	; 0x50
a0004f38:	f64d 134c 	movw	r3, #55628	; 0xd94c
a0004f3c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004f40:	f7fc fea4 	bl	a0001c8c <xTaskCreate>
a0004f44:	4602      	mov	r2, r0
a0004f46:	f64d 73fc 	movw	r3, #57340	; 0xdffc
a0004f4a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004f4e:	601a      	str	r2, [r3, #0]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);
a0004f50:	f04f 0303 	mov.w	r3, #3
a0004f54:	9300      	str	r3, [sp, #0]
a0004f56:	f64d 0368 	movw	r3, #55400	; 0xd868
a0004f5a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004f5e:	9301      	str	r3, [sp, #4]
a0004f60:	f644 4071 	movw	r0, #19569	; 0x4c71
a0004f64:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004f68:	f247 418c 	movw	r1, #29836	; 0x748c
a0004f6c:	f2ca 0100 	movt	r1, #40960	; 0xa000
a0004f70:	f04f 0250 	mov.w	r2, #80	; 0x50
a0004f74:	f64d 130c 	movw	r3, #55564	; 0xd90c
a0004f78:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004f7c:	f7fc fe86 	bl	a0001c8c <xTaskCreate>

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
a0004f80:	f04f 0300 	mov.w	r3, #0
a0004f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
a0004f88:	e08c      	b.n	a00050a4 <demo_tasks+0x350>
			if(pkt_stream[i].rate != DEFAULT_ZERO_TIMER_PERIOD){
a0004f8a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
a0004f8e:	f64d 5250 	movw	r2, #56656	; 0xdd50
a0004f92:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0004f96:	460b      	mov	r3, r1
a0004f98:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a0004f9c:	440b      	add	r3, r1
a0004f9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
a0004fa2:	4413      	add	r3, r2
a0004fa4:	f103 0310 	add.w	r3, r3, #16
a0004fa8:	881b      	ldrh	r3, [r3, #0]
a0004faa:	2b64      	cmp	r3, #100	; 0x64
a0004fac:	d045      	beq.n	a000503a <demo_tasks+0x2e6>
				pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )i, vtlm_task);
a0004fae:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
a0004fb2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
a0004fb6:	f64d 5250 	movw	r2, #56656	; 0xdd50
a0004fba:	f2ca 0200 	movt	r2, #40960	; 0xa000
a0004fbe:	460b      	mov	r3, r1
a0004fc0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a0004fc4:	440b      	add	r3, r1
a0004fc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
a0004fca:	4413      	add	r3, r2
a0004fcc:	f103 0310 	add.w	r3, r3, #16
a0004fd0:	881b      	ldrh	r3, [r3, #0]
a0004fd2:	4618      	mov	r0, r3
a0004fd4:	f7fb fe8e 	bl	a0000cf4 <xMsToTicks>
a0004fd8:	4602      	mov	r2, r0
a0004fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
a0004fde:	469c      	mov	ip, r3
a0004fe0:	f644 2309 	movw	r3, #18953	; 0x4a09
a0004fe4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0004fe8:	9300      	str	r3, [sp, #0]
a0004fea:	f247 4098 	movw	r0, #29848	; 0x7498
a0004fee:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0004ff2:	4611      	mov	r1, r2
a0004ff4:	f04f 0201 	mov.w	r2, #1
a0004ff8:	4663      	mov	r3, ip
a0004ffa:	f7fe fa0f 	bl	a000341c <xTimerCreate>
a0004ffe:	4602      	mov	r2, r0
a0005000:	f64d 5374 	movw	r3, #56692	; 0xdd74
a0005004:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005008:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	//			vTimerSetTimerID(pkt_timer[i], (void* )i);
				xTimerStart(pkt_timer[i], 0);
a000500c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
a0005010:	f64d 5374 	movw	r3, #56692	; 0xdd74
a0005014:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005018:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
a000501c:	f7fd f9ec 	bl	a00023f8 <xTaskGetTickCount>
a0005020:	4603      	mov	r3, r0
a0005022:	f04f 0200 	mov.w	r2, #0
a0005026:	9200      	str	r2, [sp, #0]
a0005028:	4620      	mov	r0, r4
a000502a:	f04f 0101 	mov.w	r1, #1
a000502e:	461a      	mov	r2, r3
a0005030:	f04f 0300 	mov.w	r3, #0
a0005034:	f7fe fa44 	bl	a00034c0 <xTimerGenericCommand>
a0005038:	e02e      	b.n	a0005098 <demo_tasks+0x344>
			}
			else{
				pkt_timer[i] = xTimerCreate("PKT_Timer", xMsToTicks(pkt_stream[i].rate),pdTRUE, (void* )i, vtlm_task);
a000503a:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
a000503e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
a0005042:	f64d 5250 	movw	r2, #56656	; 0xdd50
a0005046:	f2ca 0200 	movt	r2, #40960	; 0xa000
a000504a:	460b      	mov	r3, r1
a000504c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
a0005050:	440b      	add	r3, r1
a0005052:	ea4f 0343 	mov.w	r3, r3, lsl #1
a0005056:	4413      	add	r3, r2
a0005058:	f103 0310 	add.w	r3, r3, #16
a000505c:	881b      	ldrh	r3, [r3, #0]
a000505e:	4618      	mov	r0, r3
a0005060:	f7fb fe48 	bl	a0000cf4 <xMsToTicks>
a0005064:	4602      	mov	r2, r0
a0005066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
a000506a:	469c      	mov	ip, r3
a000506c:	f644 2309 	movw	r3, #18953	; 0x4a09
a0005070:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005074:	9300      	str	r3, [sp, #0]
a0005076:	f247 4098 	movw	r0, #29848	; 0x7498
a000507a:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000507e:	4611      	mov	r1, r2
a0005080:	f04f 0201 	mov.w	r2, #1
a0005084:	4663      	mov	r3, ip
a0005086:	f7fe f9c9 	bl	a000341c <xTimerCreate>
a000508a:	4602      	mov	r2, r0
a000508c:	f64d 5374 	movw	r3, #56692	; 0xdd74
a0005090:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005094:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

		xTaskCreate(irq_tsk_func, "uart_irq", configMINIMAL_STACK_SIZE, (void* )uart0_irq_rx_buffer, 3, &uart_irq);

//		feed_cmd_tsk = xTaskCreate(pro_cmd_tsk, "Command", configMINIMAL_STACK_SIZE, NULL, 2, &cmd_tsk);
		uint8_t i;
		for(i=0; i<NUM_PKTS; i++){
a0005098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
a000509c:	f103 0301 	add.w	r3, r3, #1
a00050a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
a00050a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
a00050a8:	2b01      	cmp	r3, #1
a00050aa:	f67f af6e 	bls.w	a0004f8a <demo_tasks+0x236>
//		xTaskCreate(print_uart_1, "UART_1", configMINIMAL_STACK_SIZE, NULL, 1, NULL);


//	 xTaskCreate(prvstatsTask, "Stats", configMINIMAL_STACK_SIZE, NULL, 0, NULL);

	vTaskStartScheduler();
a00050ae:	f7fd f867 	bl	a0002180 <vTaskStartScheduler>

}
a00050b2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
a00050b6:	46bd      	mov	sp, r7
a00050b8:	bd90      	pop	{r4, r7, pc}
a00050ba:	bf00      	nop

a00050bc <FabricIrq0_IRQHandler>:

void FabricIrq0_IRQHandler(void)
{
a00050bc:	b580      	push	{r7, lr}
a00050be:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c0);
a00050c0:	f64d 5088 	movw	r0, #56712	; 0xdd88
a00050c4:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00050c8:	f001 f838 	bl	a000613c <I2C_isr>
}
a00050cc:	bd80      	pop	{r7, pc}
a00050ce:	bf00      	nop

a00050d0 <FabricIrq1_IRQHandler>:

void FabricIrq1_IRQHandler(void)
{
a00050d0:	b580      	push	{r7, lr}
a00050d2:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c1);
a00050d4:	f64d 50f4 	movw	r0, #56820	; 0xddf4
a00050d8:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00050dc:	f001 f82e 	bl	a000613c <I2C_isr>
}
a00050e0:	bd80      	pop	{r7, pc}
a00050e2:	bf00      	nop

a00050e4 <FabricIrq2_IRQHandler>:

void FabricIrq2_IRQHandler(void)
{
a00050e4:	b580      	push	{r7, lr}
a00050e6:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c2);
a00050e8:	f64d 00a0 	movw	r0, #55456	; 0xd8a0
a00050ec:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00050f0:	f001 f824 	bl	a000613c <I2C_isr>
}
a00050f4:	bd80      	pop	{r7, pc}
a00050f6:	bf00      	nop

a00050f8 <FabricIrq3_IRQHandler>:

void FabricIrq3_IRQHandler(void)
{
a00050f8:	b580      	push	{r7, lr}
a00050fa:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c3);
a00050fc:	f64d 60cc 	movw	r0, #57036	; 0xdecc
a0005100:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0005104:	f001 f81a 	bl	a000613c <I2C_isr>
}
a0005108:	bd80      	pop	{r7, pc}
a000510a:	bf00      	nop

a000510c <FabricIrq4_IRQHandler>:

void FabricIrq4_IRQHandler(void)
{
a000510c:	b580      	push	{r7, lr}
a000510e:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c4);
a0005110:	f64d 7040 	movw	r0, #57152	; 0xdf40
a0005114:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0005118:	f001 f810 	bl	a000613c <I2C_isr>
}
a000511c:	bd80      	pop	{r7, pc}
a000511e:	bf00      	nop

a0005120 <FabricIrq5_IRQHandler>:

void FabricIrq5_IRQHandler(void)
{
a0005120:	b580      	push	{r7, lr}
a0005122:	af00      	add	r7, sp, #0
    I2C_isr(&g_core_i2c5);
a0005124:	f64d 6060 	movw	r0, #56928	; 0xde60
a0005128:	f2ca 0000 	movt	r0, #40960	; 0xa000
a000512c:	f001 f806 	bl	a000613c <I2C_isr>
}
a0005130:	bd80      	pop	{r7, pc}
a0005132:	bf00      	nop

a0005134 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
a0005134:	b480      	push	{r7}
a0005136:	b083      	sub	sp, #12
a0005138:	af00      	add	r7, sp, #0
a000513a:	4603      	mov	r3, r0
a000513c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
a000513e:	f24e 1300 	movw	r3, #57600	; 0xe100
a0005142:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0005146:	f997 2007 	ldrsb.w	r2, [r7, #7]
a000514a:	ea4f 1252 	mov.w	r2, r2, lsr #5
a000514e:	79f9      	ldrb	r1, [r7, #7]
a0005150:	f001 011f 	and.w	r1, r1, #31
a0005154:	f04f 0001 	mov.w	r0, #1
a0005158:	fa00 f101 	lsl.w	r1, r0, r1
a000515c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
a0005160:	f107 070c 	add.w	r7, r7, #12
a0005164:	46bd      	mov	sp, r7
a0005166:	bc80      	pop	{r7}
a0005168:	4770      	bx	lr
a000516a:	bf00      	nop

a000516c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
a000516c:	b480      	push	{r7}
a000516e:	b083      	sub	sp, #12
a0005170:	af00      	add	r7, sp, #0
a0005172:	4603      	mov	r3, r0
a0005174:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
a0005176:	f24e 1300 	movw	r3, #57600	; 0xe100
a000517a:	f2ce 0300 	movt	r3, #57344	; 0xe000
a000517e:	f997 2007 	ldrsb.w	r2, [r7, #7]
a0005182:	ea4f 1252 	mov.w	r2, r2, lsr #5
a0005186:	79f9      	ldrb	r1, [r7, #7]
a0005188:	f001 011f 	and.w	r1, r1, #31
a000518c:	f04f 0001 	mov.w	r0, #1
a0005190:	fa00 f101 	lsl.w	r1, r0, r1
a0005194:	f102 0260 	add.w	r2, r2, #96	; 0x60
a0005198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
a000519c:	f107 070c 	add.w	r7, r7, #12
a00051a0:	46bd      	mov	sp, r7
a00051a2:	bc80      	pop	{r7}
a00051a4:	4770      	bx	lr
a00051a6:	bf00      	nop

a00051a8 <set_bit_reg8>:
static __INLINE void set_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x1;
}
static __INLINE void set_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
a00051a8:	b480      	push	{r7}
a00051aa:	b083      	sub	sp, #12
a00051ac:	af00      	add	r7, sp, #0
a00051ae:	6078      	str	r0, [r7, #4]
a00051b0:	460b      	mov	r3, r1
a00051b2:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x1;
a00051b4:	687b      	ldr	r3, [r7, #4]
a00051b6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
a00051ba:	687b      	ldr	r3, [r7, #4]
a00051bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
a00051c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
a00051c4:	ea4f 1343 	mov.w	r3, r3, lsl #5
a00051c8:	441a      	add	r2, r3
a00051ca:	78fb      	ldrb	r3, [r7, #3]
a00051cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
a00051d0:	4413      	add	r3, r2
a00051d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
a00051d6:	f04f 0201 	mov.w	r2, #1
a00051da:	601a      	str	r2, [r3, #0]
}
a00051dc:	f107 070c 	add.w	r7, r7, #12
a00051e0:	46bd      	mov	sp, r7
a00051e2:	bc80      	pop	{r7}
a00051e4:	4770      	bx	lr
a00051e6:	bf00      	nop

a00051e8 <clear_bit_reg8>:
static __INLINE void clear_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    HW_REG_BIT(reg,bit) = 0x0;
}
static __INLINE void clear_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
a00051e8:	b480      	push	{r7}
a00051ea:	b083      	sub	sp, #12
a00051ec:	af00      	add	r7, sp, #0
a00051ee:	6078      	str	r0, [r7, #4]
a00051f0:	460b      	mov	r3, r1
a00051f2:	70fb      	strb	r3, [r7, #3]
    HW_REG_BIT(reg,bit) = 0x0;
a00051f4:	687b      	ldr	r3, [r7, #4]
a00051f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
a00051fa:	687b      	ldr	r3, [r7, #4]
a00051fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
a0005200:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
a0005204:	ea4f 1343 	mov.w	r3, r3, lsl #5
a0005208:	441a      	add	r2, r3
a000520a:	78fb      	ldrb	r3, [r7, #3]
a000520c:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0005210:	4413      	add	r3, r2
a0005212:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
a0005216:	f04f 0200 	mov.w	r2, #0
a000521a:	601a      	str	r2, [r3, #0]
}
a000521c:	f107 070c 	add.w	r7, r7, #12
a0005220:	46bd      	mov	sp, r7
a0005222:	bc80      	pop	{r7}
a0005224:	4770      	bx	lr
a0005226:	bf00      	nop

a0005228 <read_bit_reg8>:
static __INLINE uint8_t read_bit_reg16(volatile uint16_t * reg, uint8_t bit)
{
    return (HW_REG_BIT(reg,bit));
}
static __INLINE uint8_t read_bit_reg8(volatile uint8_t * reg, uint8_t bit)
{
a0005228:	b480      	push	{r7}
a000522a:	b083      	sub	sp, #12
a000522c:	af00      	add	r7, sp, #0
a000522e:	6078      	str	r0, [r7, #4]
a0005230:	460b      	mov	r3, r1
a0005232:	70fb      	strb	r3, [r7, #3]
    return (HW_REG_BIT(reg,bit));
a0005234:	687b      	ldr	r3, [r7, #4]
a0005236:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
a000523a:	687b      	ldr	r3, [r7, #4]
a000523c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
a0005240:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
a0005244:	ea4f 1343 	mov.w	r3, r3, lsl #5
a0005248:	441a      	add	r2, r3
a000524a:	78fb      	ldrb	r3, [r7, #3]
a000524c:	ea4f 0383 	mov.w	r3, r3, lsl #2
a0005250:	4413      	add	r3, r2
a0005252:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
a0005256:	681b      	ldr	r3, [r3, #0]
a0005258:	b2db      	uxtb	r3, r3
}
a000525a:	4618      	mov	r0, r3
a000525c:	f107 070c 	add.w	r7, r7, #12
a0005260:	46bd      	mov	sp, r7
a0005262:	bc80      	pop	{r7}
a0005264:	4770      	bx	lr
a0005266:	bf00      	nop

a0005268 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
a0005268:	b580      	push	{r7, lr}
a000526a:	b084      	sub	sp, #16
a000526c:	af00      	add	r7, sp, #0
a000526e:	60f8      	str	r0, [r7, #12]
a0005270:	60b9      	str	r1, [r7, #8]
a0005272:	4613      	mov	r3, r2
a0005274:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
a0005276:	68fa      	ldr	r2, [r7, #12]
a0005278:	f24e 034c 	movw	r3, #57420	; 0xe04c
a000527c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005280:	429a      	cmp	r2, r3
a0005282:	d007      	beq.n	a0005294 <MSS_UART_init+0x2c>
a0005284:	68fa      	ldr	r2, [r7, #12]
a0005286:	f24e 030c 	movw	r3, #57356	; 0xe00c
a000528a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000528e:	429a      	cmp	r2, r3
a0005290:	d000      	beq.n	a0005294 <MSS_UART_init+0x2c>
a0005292:	be00      	bkpt	0x0000

    /* Perform generic initialization */
    global_init(this_uart, baud_rate, line_config);
a0005294:	79fb      	ldrb	r3, [r7, #7]
a0005296:	68f8      	ldr	r0, [r7, #12]
a0005298:	68b9      	ldr	r1, [r7, #8]
a000529a:	461a      	mov	r2, r3
a000529c:	f000 fa56 	bl	a000574c <global_init>

    /* Disable LIN mode */
    clear_bit_reg8(&this_uart->hw_reg->MM0, ELIN);
a00052a0:	68fb      	ldr	r3, [r7, #12]
a00052a2:	681b      	ldr	r3, [r3, #0]
a00052a4:	f103 0330 	add.w	r3, r3, #48	; 0x30
a00052a8:	4618      	mov	r0, r3
a00052aa:	f04f 0103 	mov.w	r1, #3
a00052ae:	f7ff ff9b 	bl	a00051e8 <clear_bit_reg8>

    /* Disable IrDA mode */
    clear_bit_reg8(&this_uart->hw_reg->MM1, EIRD);
a00052b2:	68fb      	ldr	r3, [r7, #12]
a00052b4:	681b      	ldr	r3, [r3, #0]
a00052b6:	f103 0334 	add.w	r3, r3, #52	; 0x34
a00052ba:	4618      	mov	r0, r3
a00052bc:	f04f 0102 	mov.w	r1, #2
a00052c0:	f7ff ff92 	bl	a00051e8 <clear_bit_reg8>

    /* Disable SmartCard Mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2, EERR);
a00052c4:	68fb      	ldr	r3, [r7, #12]
a00052c6:	681b      	ldr	r3, [r3, #0]
a00052c8:	f103 0338 	add.w	r3, r3, #56	; 0x38
a00052cc:	4618      	mov	r0, r3
a00052ce:	f04f 0100 	mov.w	r1, #0
a00052d2:	f7ff ff89 	bl	a00051e8 <clear_bit_reg8>

    /* set default tx handler for automated TX using interrupt in USART mode */
    this_uart->tx_handler = default_tx_handler;
a00052d6:	68fa      	ldr	r2, [r7, #12]
a00052d8:	f645 33e5 	movw	r3, #23525	; 0x5be5
a00052dc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00052e0:	6253      	str	r3, [r2, #36]	; 0x24
}
a00052e2:	f107 0710 	add.w	r7, r7, #16
a00052e6:	46bd      	mov	sp, r7
a00052e8:	bd80      	pop	{r7, pc}
a00052ea:	bf00      	nop

a00052ec <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
a00052ec:	b480      	push	{r7}
a00052ee:	b089      	sub	sp, #36	; 0x24
a00052f0:	af00      	add	r7, sp, #0
a00052f2:	60f8      	str	r0, [r7, #12]
a00052f4:	60b9      	str	r1, [r7, #8]
a00052f6:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0u;
a00052f8:	f04f 0300 	mov.w	r3, #0
a00052fc:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
a00052fe:	68fa      	ldr	r2, [r7, #12]
a0005300:	f24e 034c 	movw	r3, #57420	; 0xe04c
a0005304:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005308:	429a      	cmp	r2, r3
a000530a:	d007      	beq.n	a000531c <MSS_UART_polled_tx+0x30>
a000530c:	68fa      	ldr	r2, [r7, #12]
a000530e:	f24e 030c 	movw	r3, #57356	; 0xe00c
a0005312:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005316:	429a      	cmp	r2, r3
a0005318:	d000      	beq.n	a000531c <MSS_UART_polled_tx+0x30>
a000531a:	be00      	bkpt	0x0000
    ASSERT(pbuff != ( (uint8_t *)0));
a000531c:	68bb      	ldr	r3, [r7, #8]
a000531e:	2b00      	cmp	r3, #0
a0005320:	d100      	bne.n	a0005324 <MSS_UART_polled_tx+0x38>
a0005322:	be00      	bkpt	0x0000
    ASSERT(tx_size > 0u);
a0005324:	687b      	ldr	r3, [r7, #4]
a0005326:	2b00      	cmp	r3, #0
a0005328:	d100      	bne.n	a000532c <MSS_UART_polled_tx+0x40>
a000532a:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
a000532c:	68fa      	ldr	r2, [r7, #12]
a000532e:	f24e 034c 	movw	r3, #57420	; 0xe04c
a0005332:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005336:	429a      	cmp	r2, r3
a0005338:	d006      	beq.n	a0005348 <MSS_UART_polled_tx+0x5c>
a000533a:	68fa      	ldr	r2, [r7, #12]
a000533c:	f24e 030c 	movw	r3, #57356	; 0xe00c
a0005340:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005344:	429a      	cmp	r2, r3
a0005346:	d13d      	bne.n	a00053c4 <MSS_UART_polled_tx+0xd8>
a0005348:	68bb      	ldr	r3, [r7, #8]
a000534a:	2b00      	cmp	r3, #0
a000534c:	d03a      	beq.n	a00053c4 <MSS_UART_polled_tx+0xd8>
a000534e:	687b      	ldr	r3, [r7, #4]
a0005350:	2b00      	cmp	r3, #0
a0005352:	d037      	beq.n	a00053c4 <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
a0005354:	68fb      	ldr	r3, [r7, #12]
a0005356:	681b      	ldr	r3, [r3, #0]
a0005358:	7d1b      	ldrb	r3, [r3, #20]
a000535a:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
a000535c:	68fb      	ldr	r3, [r7, #12]
a000535e:	7b5a      	ldrb	r2, [r3, #13]
a0005360:	7efb      	ldrb	r3, [r7, #27]
a0005362:	ea42 0303 	orr.w	r3, r2, r3
a0005366:	b2da      	uxtb	r2, r3
a0005368:	68fb      	ldr	r3, [r7, #12]
a000536a:	735a      	strb	r2, [r3, #13]

            /* Check if TX FIFO is empty. */
            if(status & MSS_UART_THRE)
a000536c:	7efb      	ldrb	r3, [r7, #27]
a000536e:	f003 0320 	and.w	r3, r3, #32
a0005372:	2b00      	cmp	r3, #0
a0005374:	d023      	beq.n	a00053be <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
a0005376:	f04f 0310 	mov.w	r3, #16
a000537a:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if(tx_size < TX_FIFO_SIZE)
a000537c:	687b      	ldr	r3, [r7, #4]
a000537e:	2b0f      	cmp	r3, #15
a0005380:	d801      	bhi.n	a0005386 <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
a0005382:	687b      	ldr	r3, [r7, #4]
a0005384:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
a0005386:	f04f 0300 	mov.w	r3, #0
a000538a:	617b      	str	r3, [r7, #20]
a000538c:	e00e      	b.n	a00053ac <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx];
a000538e:	68fb      	ldr	r3, [r7, #12]
a0005390:	681b      	ldr	r3, [r3, #0]
a0005392:	68b9      	ldr	r1, [r7, #8]
a0005394:	693a      	ldr	r2, [r7, #16]
a0005396:	440a      	add	r2, r1
a0005398:	7812      	ldrb	r2, [r2, #0]
a000539a:	701a      	strb	r2, [r3, #0]
                    char_idx++;
a000539c:	693b      	ldr	r3, [r7, #16]
a000539e:	f103 0301 	add.w	r3, r3, #1
a00053a2:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for(size_sent = 0u; size_sent < fill_size; ++size_sent)
a00053a4:	697b      	ldr	r3, [r7, #20]
a00053a6:	f103 0301 	add.w	r3, r3, #1
a00053aa:	617b      	str	r3, [r7, #20]
a00053ac:	697a      	ldr	r2, [r7, #20]
a00053ae:	69fb      	ldr	r3, [r7, #28]
a00053b0:	429a      	cmp	r2, r3
a00053b2:	d3ec      	bcc.n	a000538e <MSS_UART_polled_tx+0xa2>
                    this_uart->hw_reg->THR = pbuff[char_idx];
                    char_idx++;
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
a00053b4:	687a      	ldr	r2, [r7, #4]
a00053b6:	697b      	ldr	r3, [r7, #20]
a00053b8:	ebc3 0302 	rsb	r3, r3, r2
a00053bc:	607b      	str	r3, [r7, #4]
            }
        } while(tx_size);
a00053be:	687b      	ldr	r3, [r7, #4]
a00053c0:	2b00      	cmp	r3, #0
a00053c2:	d1c7      	bne.n	a0005354 <MSS_UART_polled_tx+0x68>
    }
}
a00053c4:	f107 0724 	add.w	r7, r7, #36	; 0x24
a00053c8:	46bd      	mov	sp, r7
a00053ca:	bc80      	pop	{r7}
a00053cc:	4770      	bx	lr
a00053ce:	bf00      	nop

a00053d0 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
a00053d0:	b480      	push	{r7}
a00053d2:	b087      	sub	sp, #28
a00053d4:	af00      	add	r7, sp, #0
a00053d6:	60f8      	str	r0, [r7, #12]
a00053d8:	60b9      	str	r1, [r7, #8]
a00053da:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0u;
a00053dc:	f04f 0300 	mov.w	r3, #0
a00053e0:	613b      	str	r3, [r7, #16]
    uint8_t status = 0u;
a00053e2:	f04f 0300 	mov.w	r3, #0
a00053e6:	75fb      	strb	r3, [r7, #23]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
a00053e8:	68fa      	ldr	r2, [r7, #12]
a00053ea:	f24e 034c 	movw	r3, #57420	; 0xe04c
a00053ee:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00053f2:	429a      	cmp	r2, r3
a00053f4:	d007      	beq.n	a0005406 <MSS_UART_get_rx+0x36>
a00053f6:	68fa      	ldr	r2, [r7, #12]
a00053f8:	f24e 030c 	movw	r3, #57356	; 0xe00c
a00053fc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005400:	429a      	cmp	r2, r3
a0005402:	d000      	beq.n	a0005406 <MSS_UART_get_rx+0x36>
a0005404:	be00      	bkpt	0x0000
    ASSERT(rx_buff != ((uint8_t *)0));
a0005406:	68bb      	ldr	r3, [r7, #8]
a0005408:	2b00      	cmp	r3, #0
a000540a:	d100      	bne.n	a000540e <MSS_UART_get_rx+0x3e>
a000540c:	be00      	bkpt	0x0000
    ASSERT(buff_size > 0u);
a000540e:	687b      	ldr	r3, [r7, #4]
a0005410:	2b00      	cmp	r3, #0
a0005412:	d100      	bne.n	a0005416 <MSS_UART_get_rx+0x46>
a0005414:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
a0005416:	68fa      	ldr	r2, [r7, #12]
a0005418:	f24e 034c 	movw	r3, #57420	; 0xe04c
a000541c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005420:	429a      	cmp	r2, r3
a0005422:	d006      	beq.n	a0005432 <MSS_UART_get_rx+0x62>
a0005424:	68fa      	ldr	r2, [r7, #12]
a0005426:	f24e 030c 	movw	r3, #57356	; 0xe00c
a000542a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000542e:	429a      	cmp	r2, r3
a0005430:	d134      	bne.n	a000549c <MSS_UART_get_rx+0xcc>
a0005432:	68bb      	ldr	r3, [r7, #8]
a0005434:	2b00      	cmp	r3, #0
a0005436:	d031      	beq.n	a000549c <MSS_UART_get_rx+0xcc>
a0005438:	687b      	ldr	r3, [r7, #4]
a000543a:	2b00      	cmp	r3, #0
a000543c:	d02e      	beq.n	a000549c <MSS_UART_get_rx+0xcc>
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
a000543e:	68fb      	ldr	r3, [r7, #12]
a0005440:	681b      	ldr	r3, [r3, #0]
a0005442:	7d1b      	ldrb	r3, [r3, #20]
a0005444:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
a0005446:	68fb      	ldr	r3, [r7, #12]
a0005448:	7b5a      	ldrb	r2, [r3, #13]
a000544a:	7dfb      	ldrb	r3, [r7, #23]
a000544c:	ea42 0303 	orr.w	r3, r2, r3
a0005450:	b2da      	uxtb	r2, r3
a0005452:	68fb      	ldr	r3, [r7, #12]
a0005454:	735a      	strb	r2, [r3, #13]

        while(((status & MSS_UART_DATA_READY) != 0u) &&
a0005456:	e017      	b.n	a0005488 <MSS_UART_get_rx+0xb8>
              (rx_size < buff_size))
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
a0005458:	68ba      	ldr	r2, [r7, #8]
a000545a:	693b      	ldr	r3, [r7, #16]
a000545c:	4413      	add	r3, r2
a000545e:	68fa      	ldr	r2, [r7, #12]
a0005460:	6812      	ldr	r2, [r2, #0]
a0005462:	7812      	ldrb	r2, [r2, #0]
a0005464:	b2d2      	uxtb	r2, r2
a0005466:	701a      	strb	r2, [r3, #0]
            ++rx_size;
a0005468:	693b      	ldr	r3, [r7, #16]
a000546a:	f103 0301 	add.w	r3, r3, #1
a000546e:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
a0005470:	68fb      	ldr	r3, [r7, #12]
a0005472:	681b      	ldr	r3, [r3, #0]
a0005474:	7d1b      	ldrb	r3, [r3, #20]
a0005476:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
a0005478:	68fb      	ldr	r3, [r7, #12]
a000547a:	7b5a      	ldrb	r2, [r3, #13]
a000547c:	7dfb      	ldrb	r3, [r7, #23]
a000547e:	ea42 0303 	orr.w	r3, r2, r3
a0005482:	b2da      	uxtb	r2, r3
a0005484:	68fb      	ldr	r3, [r7, #12]
a0005486:	735a      	strb	r2, [r3, #13]
       (rx_buff != ((uint8_t *)0)) && (buff_size > 0u))
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while(((status & MSS_UART_DATA_READY) != 0u) &&
a0005488:	7dfb      	ldrb	r3, [r7, #23]
a000548a:	f003 0301 	and.w	r3, r3, #1
a000548e:	b2db      	uxtb	r3, r3
a0005490:	2b00      	cmp	r3, #0
a0005492:	d003      	beq.n	a000549c <MSS_UART_get_rx+0xcc>
a0005494:	693a      	ldr	r2, [r7, #16]
a0005496:	687b      	ldr	r3, [r7, #4]
a0005498:	429a      	cmp	r2, r3
a000549a:	d3dd      	bcc.n	a0005458 <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
a000549c:	693b      	ldr	r3, [r7, #16]
}
a000549e:	4618      	mov	r0, r3
a00054a0:	f107 071c 	add.w	r7, r7, #28
a00054a4:	46bd      	mov	sp, r7
a00054a6:	bc80      	pop	{r7}
a00054a8:	4770      	bx	lr
a00054aa:	bf00      	nop

a00054ac <MSS_UART_set_rx_handler>:
(
    mss_uart_instance_t *       this_uart,
    mss_uart_irq_handler_t      handler,
    mss_uart_rx_trig_level_t    trigger_level
)
{
a00054ac:	b580      	push	{r7, lr}
a00054ae:	b084      	sub	sp, #16
a00054b0:	af00      	add	r7, sp, #0
a00054b2:	60f8      	str	r0, [r7, #12]
a00054b4:	60b9      	str	r1, [r7, #8]
a00054b6:	4613      	mov	r3, r2
a00054b8:	71fb      	strb	r3, [r7, #7]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
a00054ba:	68fa      	ldr	r2, [r7, #12]
a00054bc:	f24e 034c 	movw	r3, #57420	; 0xe04c
a00054c0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00054c4:	429a      	cmp	r2, r3
a00054c6:	d007      	beq.n	a00054d8 <MSS_UART_set_rx_handler+0x2c>
a00054c8:	68fa      	ldr	r2, [r7, #12]
a00054ca:	f24e 030c 	movw	r3, #57356	; 0xe00c
a00054ce:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00054d2:	429a      	cmp	r2, r3
a00054d4:	d000      	beq.n	a00054d8 <MSS_UART_set_rx_handler+0x2c>
a00054d6:	be00      	bkpt	0x0000
    ASSERT(handler != INVALID_IRQ_HANDLER );
a00054d8:	68bb      	ldr	r3, [r7, #8]
a00054da:	2b00      	cmp	r3, #0
a00054dc:	d100      	bne.n	a00054e0 <MSS_UART_set_rx_handler+0x34>
a00054de:	be00      	bkpt	0x0000
    ASSERT(trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL);
a00054e0:	79fb      	ldrb	r3, [r7, #7]
a00054e2:	2bc0      	cmp	r3, #192	; 0xc0
a00054e4:	d900      	bls.n	a00054e8 <MSS_UART_set_rx_handler+0x3c>
a00054e6:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
a00054e8:	68fa      	ldr	r2, [r7, #12]
a00054ea:	f24e 034c 	movw	r3, #57420	; 0xe04c
a00054ee:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00054f2:	429a      	cmp	r2, r3
a00054f4:	d006      	beq.n	a0005504 <MSS_UART_set_rx_handler+0x58>
a00054f6:	68fa      	ldr	r2, [r7, #12]
a00054f8:	f24e 030c 	movw	r3, #57356	; 0xe00c
a00054fc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005500:	429a      	cmp	r2, r3
a0005502:	d12e      	bne.n	a0005562 <MSS_UART_set_rx_handler+0xb6>
a0005504:	68bb      	ldr	r3, [r7, #8]
a0005506:	2b00      	cmp	r3, #0
a0005508:	d02b      	beq.n	a0005562 <MSS_UART_set_rx_handler+0xb6>
a000550a:	79fb      	ldrb	r3, [r7, #7]
a000550c:	2bc0      	cmp	r3, #192	; 0xc0
a000550e:	d828      	bhi.n	a0005562 <MSS_UART_set_rx_handler+0xb6>
       (handler != INVALID_IRQ_HANDLER) &&
       (trigger_level < MSS_UART_FIFO_INVALID_TRIG_LEVEL))
    {
        this_uart->rx_handler = handler;
a0005510:	68fb      	ldr	r3, [r7, #12]
a0005512:	68ba      	ldr	r2, [r7, #8]
a0005514:	621a      	str	r2, [r3, #32]

        /* Set the receive interrupt trigger level. */
        this_uart->hw_reg->FCR = (this_uart->hw_reg->FCR &
a0005516:	68fb      	ldr	r3, [r7, #12]
a0005518:	681a      	ldr	r2, [r3, #0]
a000551a:	68fb      	ldr	r3, [r7, #12]
a000551c:	681b      	ldr	r3, [r3, #0]
a000551e:	7a1b      	ldrb	r3, [r3, #8]
a0005520:	b2db      	uxtb	r3, r3
a0005522:	b2db      	uxtb	r3, r3
a0005524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
a0005528:	79f8      	ldrb	r0, [r7, #7]
a000552a:	4619      	mov	r1, r3
a000552c:	4603      	mov	r3, r0
a000552e:	ea41 0303 	orr.w	r3, r1, r3
a0005532:	b2db      	uxtb	r3, r3
a0005534:	b2db      	uxtb	r3, r3
a0005536:	7213      	strb	r3, [r2, #8]
                                 (uint8_t)(~((uint8_t)FCR_TRIG_LEVEL_MASK))) |
                                 (uint8_t)trigger_level;
        /* Clear any previously pended interrupts */
        NVIC_ClearPendingIRQ(this_uart->irqn);
a0005538:	68fb      	ldr	r3, [r7, #12]
a000553a:	791b      	ldrb	r3, [r3, #4]
a000553c:	b25b      	sxtb	r3, r3
a000553e:	4618      	mov	r0, r3
a0005540:	f7ff fe14 	bl	a000516c <NVIC_ClearPendingIRQ>

        /* Enable receive interrupt. */
        set_bit_reg8(&this_uart->hw_reg->IER,ERBFI);
a0005544:	68fb      	ldr	r3, [r7, #12]
a0005546:	681b      	ldr	r3, [r3, #0]
a0005548:	f103 0304 	add.w	r3, r3, #4
a000554c:	4618      	mov	r0, r3
a000554e:	f04f 0100 	mov.w	r1, #0
a0005552:	f7ff fe29 	bl	a00051a8 <set_bit_reg8>

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ(this_uart->irqn);
a0005556:	68fb      	ldr	r3, [r7, #12]
a0005558:	791b      	ldrb	r3, [r3, #4]
a000555a:	b25b      	sxtb	r3, r3
a000555c:	4618      	mov	r0, r3
a000555e:	f7ff fde9 	bl	a0005134 <NVIC_EnableIRQ>
    }
}
a0005562:	f107 0710 	add.w	r7, r7, #16
a0005566:	46bd      	mov	sp, r7
a0005568:	bd80      	pop	{r7, pc}
a000556a:	bf00      	nop

a000556c <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler(void)
#else
void UART0_IRQHandler(void)
#endif
{
a000556c:	4668      	mov	r0, sp
a000556e:	f020 0107 	bic.w	r1, r0, #7
a0005572:	468d      	mov	sp, r1
a0005574:	b589      	push	{r0, r3, r7, lr}
a0005576:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart0);
a0005578:	f24e 004c 	movw	r0, #57420	; 0xe04c
a000557c:	f2ca 0000 	movt	r0, #40960	; 0xa000
a0005580:	f000 fa1a 	bl	a00059b8 <MSS_UART_isr>
}
a0005584:	46bd      	mov	sp, r7
a0005586:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
a000558a:	4685      	mov	sp, r0
a000558c:	4770      	bx	lr
a000558e:	bf00      	nop

a0005590 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler(void)
#else
void UART1_IRQHandler(void)
#endif
{
a0005590:	4668      	mov	r0, sp
a0005592:	f020 0107 	bic.w	r1, r0, #7
a0005596:	468d      	mov	sp, r1
a0005598:	b589      	push	{r0, r3, r7, lr}
a000559a:	af00      	add	r7, sp, #0
    MSS_UART_isr(&g_mss_uart1);
a000559c:	f24e 000c 	movw	r0, #57356	; 0xe00c
a00055a0:	f2ca 0000 	movt	r0, #40960	; 0xa000
a00055a4:	f000 fa08 	bl	a00059b8 <MSS_UART_isr>
}
a00055a8:	46bd      	mov	sp, r7
a00055aa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
a00055ae:	4685      	mov	sp, r0
a00055b0:	4770      	bx	lr
a00055b2:	bf00      	nop

a00055b4 <config_baud_divisors>:
config_baud_divisors
(
    mss_uart_instance_t * this_uart,
    uint32_t baudrate
)
{
a00055b4:	b580      	push	{r7, lr}
a00055b6:	b088      	sub	sp, #32
a00055b8:	af00      	add	r7, sp, #0
a00055ba:	6078      	str	r0, [r7, #4]
a00055bc:	6039      	str	r1, [r7, #0]
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
a00055be:	687a      	ldr	r2, [r7, #4]
a00055c0:	f24e 034c 	movw	r3, #57420	; 0xe04c
a00055c4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00055c8:	429a      	cmp	r2, r3
a00055ca:	d007      	beq.n	a00055dc <config_baud_divisors+0x28>
a00055cc:	687a      	ldr	r2, [r7, #4]
a00055ce:	f24e 030c 	movw	r3, #57356	; 0xe00c
a00055d2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00055d6:	429a      	cmp	r2, r3
a00055d8:	d000      	beq.n	a00055dc <config_baud_divisors+0x28>
a00055da:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
a00055dc:	687a      	ldr	r2, [r7, #4]
a00055de:	f24e 034c 	movw	r3, #57420	; 0xe04c
a00055e2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00055e6:	429a      	cmp	r2, r3
a00055e8:	d007      	beq.n	a00055fa <config_baud_divisors+0x46>
a00055ea:	687a      	ldr	r2, [r7, #4]
a00055ec:	f24e 030c 	movw	r3, #57356	; 0xe00c
a00055f0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00055f4:	429a      	cmp	r2, r3
a00055f6:	f040 80a4 	bne.w	a0005742 <config_baud_divisors+0x18e>
        uint32_t baud_value_by_64;
        uint32_t baud_value_by_128;
        uint32_t fractional_baud_value;
        uint32_t pclk_freq;

        this_uart->baudrate = baudrate;
a00055fa:	687b      	ldr	r3, [r7, #4]
a00055fc:	683a      	ldr	r2, [r7, #0]
a00055fe:	609a      	str	r2, [r3, #8]

        /* Force the value of the CMSIS global variables holding the various system
          * clock frequencies to be updated. */
        SystemCoreClockUpdate();
a0005600:	f001 fbca 	bl	a0006d98 <SystemCoreClockUpdate>
        if(this_uart == &g_mss_uart0)
a0005604:	687a      	ldr	r2, [r7, #4]
a0005606:	f24e 034c 	movw	r3, #57420	; 0xe04c
a000560a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000560e:	429a      	cmp	r2, r3
a0005610:	d106      	bne.n	a0005620 <config_baud_divisors+0x6c>
        {
            pclk_freq = g_FrequencyPCLK0;
a0005612:	f247 5330 	movw	r3, #30000	; 0x7530
a0005616:	f2ca 0300 	movt	r3, #40960	; 0xa000
a000561a:	681b      	ldr	r3, [r3, #0]
a000561c:	61fb      	str	r3, [r7, #28]
a000561e:	e005      	b.n	a000562c <config_baud_divisors+0x78>
        }
        else
        {
            pclk_freq = g_FrequencyPCLK1;
a0005620:	f247 5334 	movw	r3, #30004	; 0x7534
a0005624:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005628:	681b      	ldr	r3, [r3, #0]
a000562a:	61fb      	str	r3, [r7, #28]
        /*
         * Compute baud value based on requested baud rate and PCLK frequency.
         * The baud value is computed using the following equation:
         *      baud_value = PCLK_Frequency / (baud_rate * 16)
         */
        baud_value_by_128 = (8u * pclk_freq) / baudrate;
a000562c:	69fb      	ldr	r3, [r7, #28]
a000562e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
a0005632:	683b      	ldr	r3, [r7, #0]
a0005634:	fbb2 f3f3 	udiv	r3, r2, r3
a0005638:	617b      	str	r3, [r7, #20]
        baud_value_by_64 = baud_value_by_128 / 2u;
a000563a:	697b      	ldr	r3, [r7, #20]
a000563c:	ea4f 0353 	mov.w	r3, r3, lsr #1
a0005640:	613b      	str	r3, [r7, #16]
        baud_value = baud_value_by_64 / 64u;
a0005642:	693b      	ldr	r3, [r7, #16]
a0005644:	ea4f 1393 	mov.w	r3, r3, lsr #6
a0005648:	60fb      	str	r3, [r7, #12]
        fractional_baud_value = baud_value_by_64 - (baud_value * 64u);
a000564a:	68fb      	ldr	r3, [r7, #12]
a000564c:	ea4f 1383 	mov.w	r3, r3, lsl #6
a0005650:	693a      	ldr	r2, [r7, #16]
a0005652:	ebc3 0302 	rsb	r3, r3, r2
a0005656:	61bb      	str	r3, [r7, #24]
        fractional_baud_value += (baud_value_by_128 - (baud_value * 128u)) - (fractional_baud_value * 2u);
a0005658:	68fb      	ldr	r3, [r7, #12]
a000565a:	ea4f 13c3 	mov.w	r3, r3, lsl #7
a000565e:	697a      	ldr	r2, [r7, #20]
a0005660:	ebc3 0202 	rsb	r2, r3, r2
a0005664:	69bb      	ldr	r3, [r7, #24]
a0005666:	ea4f 0343 	mov.w	r3, r3, lsl #1
a000566a:	ebc3 0302 	rsb	r3, r3, r2
a000566e:	69ba      	ldr	r2, [r7, #24]
a0005670:	4413      	add	r3, r2
a0005672:	61bb      	str	r3, [r7, #24]

        /* Assert if integer baud value fits in 16-bit. */
        ASSERT(baud_value <= UINT16_MAX);
a0005674:	68fa      	ldr	r2, [r7, #12]
a0005676:	f64f 73ff 	movw	r3, #65535	; 0xffff
a000567a:	429a      	cmp	r2, r3
a000567c:	d900      	bls.n	a0005680 <config_baud_divisors+0xcc>
a000567e:	be00      	bkpt	0x0000

        if(baud_value <= (uint32_t)UINT16_MAX)
a0005680:	68fa      	ldr	r2, [r7, #12]
a0005682:	f64f 73ff 	movw	r3, #65535	; 0xffff
a0005686:	429a      	cmp	r2, r3
a0005688:	d85b      	bhi.n	a0005742 <config_baud_divisors+0x18e>
        {
            if(baud_value > 1u)
a000568a:	68fb      	ldr	r3, [r7, #12]
a000568c:	2b01      	cmp	r3, #1
a000568e:	d931      	bls.n	a00056f4 <config_baud_divisors+0x140>
            {
                /*
                 * Use Frational baud rate divisors
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
a0005690:	687b      	ldr	r3, [r7, #4]
a0005692:	681b      	ldr	r3, [r3, #0]
a0005694:	f103 030c 	add.w	r3, r3, #12
a0005698:	4618      	mov	r0, r3
a000569a:	f04f 0107 	mov.w	r1, #7
a000569e:	f7ff fd83 	bl	a00051a8 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
a00056a2:	687b      	ldr	r3, [r7, #4]
a00056a4:	681b      	ldr	r3, [r3, #0]
a00056a6:	68fa      	ldr	r2, [r7, #12]
a00056a8:	ea4f 2212 	mov.w	r2, r2, lsr #8
a00056ac:	b2d2      	uxtb	r2, r2
a00056ae:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
a00056b0:	687b      	ldr	r3, [r7, #4]
a00056b2:	681b      	ldr	r3, [r3, #0]
a00056b4:	68fa      	ldr	r2, [r7, #12]
a00056b6:	b2d2      	uxtb	r2, r2
a00056b8:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
a00056ba:	687b      	ldr	r3, [r7, #4]
a00056bc:	681b      	ldr	r3, [r3, #0]
a00056be:	f103 030c 	add.w	r3, r3, #12
a00056c2:	4618      	mov	r0, r3
a00056c4:	f04f 0107 	mov.w	r1, #7
a00056c8:	f7ff fd8e 	bl	a00051e8 <clear_bit_reg8>

                /* Enable Fractional baud rate */
                set_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
a00056cc:	687b      	ldr	r3, [r7, #4]
a00056ce:	681b      	ldr	r3, [r3, #0]
a00056d0:	f103 0330 	add.w	r3, r3, #48	; 0x30
a00056d4:	4618      	mov	r0, r3
a00056d6:	f04f 0107 	mov.w	r1, #7
a00056da:	f7ff fd65 	bl	a00051a8 <set_bit_reg8>

                /* Load the fractional baud rate register */
                ASSERT(fractional_baud_value <= (uint32_t)UINT8_MAX);
a00056de:	69bb      	ldr	r3, [r7, #24]
a00056e0:	2bff      	cmp	r3, #255	; 0xff
a00056e2:	d900      	bls.n	a00056e6 <config_baud_divisors+0x132>
a00056e4:	be00      	bkpt	0x0000
                this_uart->hw_reg->DFR = (uint8_t)fractional_baud_value;
a00056e6:	687b      	ldr	r3, [r7, #4]
a00056e8:	681b      	ldr	r3, [r3, #0]
a00056ea:	69ba      	ldr	r2, [r7, #24]
a00056ec:	b2d2      	uxtb	r2, r2
a00056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
a00056f2:	e026      	b.n	a0005742 <config_baud_divisors+0x18e>
            {
                /*
                 * Do NOT use Frational baud rate divisors.
                 */
                /* set divisor latch */
                set_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
a00056f4:	687b      	ldr	r3, [r7, #4]
a00056f6:	681b      	ldr	r3, [r3, #0]
a00056f8:	f103 030c 	add.w	r3, r3, #12
a00056fc:	4618      	mov	r0, r3
a00056fe:	f04f 0107 	mov.w	r1, #7
a0005702:	f7ff fd51 	bl	a00051a8 <set_bit_reg8>

                /* msb of baud value */
                this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8u);
a0005706:	687b      	ldr	r3, [r7, #4]
a0005708:	681b      	ldr	r3, [r3, #0]
a000570a:	68fa      	ldr	r2, [r7, #12]
a000570c:	ea4f 2212 	mov.w	r2, r2, lsr #8
a0005710:	b2d2      	uxtb	r2, r2
a0005712:	711a      	strb	r2, [r3, #4]
                /* lsb of baud value */
                this_uart->hw_reg->DLR = (uint8_t)baud_value;
a0005714:	687b      	ldr	r3, [r7, #4]
a0005716:	681b      	ldr	r3, [r3, #0]
a0005718:	68fa      	ldr	r2, [r7, #12]
a000571a:	b2d2      	uxtb	r2, r2
a000571c:	701a      	strb	r2, [r3, #0]

                /* reset divisor latch */
                clear_bit_reg8(&this_uart->hw_reg->LCR,DLAB);
a000571e:	687b      	ldr	r3, [r7, #4]
a0005720:	681b      	ldr	r3, [r3, #0]
a0005722:	f103 030c 	add.w	r3, r3, #12
a0005726:	4618      	mov	r0, r3
a0005728:	f04f 0107 	mov.w	r1, #7
a000572c:	f7ff fd5c 	bl	a00051e8 <clear_bit_reg8>

                /* Disable Fractional baud rate */
                clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
a0005730:	687b      	ldr	r3, [r7, #4]
a0005732:	681b      	ldr	r3, [r3, #0]
a0005734:	f103 0330 	add.w	r3, r3, #48	; 0x30
a0005738:	4618      	mov	r0, r3
a000573a:	f04f 0107 	mov.w	r1, #7
a000573e:	f7ff fd53 	bl	a00051e8 <clear_bit_reg8>
            }
        }
    }
}
a0005742:	f107 0720 	add.w	r7, r7, #32
a0005746:	46bd      	mov	sp, r7
a0005748:	bd80      	pop	{r7, pc}
a000574a:	bf00      	nop

a000574c <global_init>:
(
    mss_uart_instance_t * this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
a000574c:	b580      	push	{r7, lr}
a000574e:	b084      	sub	sp, #16
a0005750:	af00      	add	r7, sp, #0
a0005752:	60f8      	str	r0, [r7, #12]
a0005754:	60b9      	str	r1, [r7, #8]
a0005756:	4613      	mov	r3, r2
a0005758:	71fb      	strb	r3, [r7, #7]
    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
a000575a:	68fa      	ldr	r2, [r7, #12]
a000575c:	f24e 034c 	movw	r3, #57420	; 0xe04c
a0005760:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005764:	429a      	cmp	r2, r3
a0005766:	d007      	beq.n	a0005778 <global_init+0x2c>
a0005768:	68fa      	ldr	r2, [r7, #12]
a000576a:	f24e 030c 	movw	r3, #57356	; 0xe00c
a000576e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005772:	429a      	cmp	r2, r3
a0005774:	d000      	beq.n	a0005778 <global_init+0x2c>
a0005776:	be00      	bkpt	0x0000

    if(this_uart == &g_mss_uart0)
a0005778:	68fa      	ldr	r2, [r7, #12]
a000577a:	f24e 034c 	movw	r3, #57420	; 0xe04c
a000577e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005782:	429a      	cmp	r2, r3
a0005784:	d124      	bne.n	a00057d0 <global_init+0x84>
    {
        this_uart->hw_reg = UART0;
a0005786:	68fb      	ldr	r3, [r7, #12]
a0005788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
a000578c:	601a      	str	r2, [r3, #0]
        this_uart->irqn = UART0_IRQn;
a000578e:	68fb      	ldr	r3, [r7, #12]
a0005790:	f04f 020a 	mov.w	r2, #10
a0005794:	711a      	strb	r2, [r3, #4]
        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART0_SOFTRESET_MASK;
a0005796:	f248 0300 	movw	r3, #32768	; 0x8000
a000579a:	f2c4 0303 	movt	r3, #16387	; 0x4003
a000579e:	f248 0200 	movw	r2, #32768	; 0x8000
a00057a2:	f2c4 0203 	movt	r2, #16387	; 0x4003
a00057a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
a00057a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
a00057ac:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ(UART0_IRQn);
a00057ae:	f04f 000a 	mov.w	r0, #10
a00057b2:	f7ff fcdb 	bl	a000516c <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART0_SOFTRESET_MASK;
a00057b6:	f248 0300 	movw	r3, #32768	; 0x8000
a00057ba:	f2c4 0303 	movt	r3, #16387	; 0x4003
a00057be:	f248 0200 	movw	r2, #32768	; 0x8000
a00057c2:	f2c4 0203 	movt	r2, #16387	; 0x4003
a00057c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
a00057c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
a00057cc:	649a      	str	r2, [r3, #72]	; 0x48
a00057ce:	e025      	b.n	a000581c <global_init+0xd0>
    }
    else
    {
        this_uart->hw_reg = UART1;
a00057d0:	68fa      	ldr	r2, [r7, #12]
a00057d2:	f240 0300 	movw	r3, #0
a00057d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
a00057da:	6013      	str	r3, [r2, #0]
        this_uart->irqn = UART1_IRQn;
a00057dc:	68fb      	ldr	r3, [r7, #12]
a00057de:	f04f 020b 	mov.w	r2, #11
a00057e2:	711a      	strb	r2, [r3, #4]
        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_MMUART1_SOFTRESET_MASK;
a00057e4:	f248 0300 	movw	r3, #32768	; 0x8000
a00057e8:	f2c4 0303 	movt	r3, #16387	; 0x4003
a00057ec:	f248 0200 	movw	r2, #32768	; 0x8000
a00057f0:	f2c4 0203 	movt	r2, #16387	; 0x4003
a00057f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
a00057f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
a00057fa:	649a      	str	r2, [r3, #72]	; 0x48
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ(UART1_IRQn);
a00057fc:	f04f 000b 	mov.w	r0, #11
a0005800:	f7ff fcb4 	bl	a000516c <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_MMUART1_SOFTRESET_MASK;
a0005804:	f248 0300 	movw	r3, #32768	; 0x8000
a0005808:	f2c4 0303 	movt	r3, #16387	; 0x4003
a000580c:	f248 0200 	movw	r2, #32768	; 0x8000
a0005810:	f2c4 0203 	movt	r2, #16387	; 0x4003
a0005814:	6c92      	ldr	r2, [r2, #72]	; 0x48
a0005816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
a000581a:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0u;
a000581c:	68fb      	ldr	r3, [r7, #12]
a000581e:	681b      	ldr	r3, [r3, #0]
a0005820:	f04f 0200 	mov.w	r2, #0
a0005824:	711a      	strb	r2, [r3, #4]

    /* FIFO configuration */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE;
a0005826:	68fb      	ldr	r3, [r7, #12]
a0005828:	681b      	ldr	r3, [r3, #0]
a000582a:	f04f 0200 	mov.w	r2, #0
a000582e:	721a      	strb	r2, [r3, #8]
    /* clear receiver FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_RX_FIFO);
a0005830:	68fb      	ldr	r3, [r7, #12]
a0005832:	681b      	ldr	r3, [r3, #0]
a0005834:	f103 0308 	add.w	r3, r3, #8
a0005838:	4618      	mov	r0, r3
a000583a:	f04f 0101 	mov.w	r1, #1
a000583e:	f7ff fcb3 	bl	a00051a8 <set_bit_reg8>
    /* clear transmitter FIFO */
    set_bit_reg8(&this_uart->hw_reg->FCR,CLEAR_TX_FIFO);
a0005842:	68fb      	ldr	r3, [r7, #12]
a0005844:	681b      	ldr	r3, [r3, #0]
a0005846:	f103 0308 	add.w	r3, r3, #8
a000584a:	4618      	mov	r0, r3
a000584c:	f04f 0102 	mov.w	r1, #2
a0005850:	f7ff fcaa 	bl	a00051a8 <set_bit_reg8>

    /* set default READY mode : Mode 0*/
    /* enable RXRDYN and TXRDYN pins. The earlier FCR write to set the TX FIFO
     * trigger level inadvertently disabled the FCR_RXRDY_TXRDYN_EN bit. */
    set_bit_reg8(&this_uart->hw_reg->FCR,RXRDY_TXRDYN_EN);
a0005854:	68fb      	ldr	r3, [r7, #12]
a0005856:	681b      	ldr	r3, [r3, #0]
a0005858:	f103 0308 	add.w	r3, r3, #8
a000585c:	4618      	mov	r0, r3
a000585e:	f04f 0100 	mov.w	r1, #0
a0005862:	f7ff fca1 	bl	a00051a8 <set_bit_reg8>

    /* disable loopback : local * remote */
    clear_bit_reg8(&this_uart->hw_reg->MCR,LOOP);
a0005866:	68fb      	ldr	r3, [r7, #12]
a0005868:	681b      	ldr	r3, [r3, #0]
a000586a:	f103 0310 	add.w	r3, r3, #16
a000586e:	4618      	mov	r0, r3
a0005870:	f04f 0104 	mov.w	r1, #4
a0005874:	f7ff fcb8 	bl	a00051e8 <clear_bit_reg8>
    clear_bit_reg8(&this_uart->hw_reg->MCR,RLOOP);
a0005878:	68fb      	ldr	r3, [r7, #12]
a000587a:	681b      	ldr	r3, [r3, #0]
a000587c:	f103 0310 	add.w	r3, r3, #16
a0005880:	4618      	mov	r0, r3
a0005882:	f04f 0105 	mov.w	r1, #5
a0005886:	f7ff fcaf 	bl	a00051e8 <clear_bit_reg8>

    /* set default TX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_TX);
a000588a:	68fb      	ldr	r3, [r7, #12]
a000588c:	681b      	ldr	r3, [r3, #0]
a000588e:	f103 0334 	add.w	r3, r3, #52	; 0x34
a0005892:	4618      	mov	r0, r3
a0005894:	f04f 0101 	mov.w	r1, #1
a0005898:	f7ff fca6 	bl	a00051e8 <clear_bit_reg8>
    /* set default RX endian */
    clear_bit_reg8(&this_uart->hw_reg->MM1,E_MSB_RX);
a000589c:	68fb      	ldr	r3, [r7, #12]
a000589e:	681b      	ldr	r3, [r3, #0]
a00058a0:	f103 0334 	add.w	r3, r3, #52	; 0x34
a00058a4:	4618      	mov	r0, r3
a00058a6:	f04f 0100 	mov.w	r1, #0
a00058aa:	f7ff fc9d 	bl	a00051e8 <clear_bit_reg8>

    /* default AFM : disabled */
    clear_bit_reg8(&this_uart->hw_reg->MM2,EAFM);
a00058ae:	68fb      	ldr	r3, [r7, #12]
a00058b0:	681b      	ldr	r3, [r3, #0]
a00058b2:	f103 0338 	add.w	r3, r3, #56	; 0x38
a00058b6:	4618      	mov	r0, r3
a00058b8:	f04f 0101 	mov.w	r1, #1
a00058bc:	f7ff fc94 	bl	a00051e8 <clear_bit_reg8>

    /* disable TX time gaurd */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ETTG);
a00058c0:	68fb      	ldr	r3, [r7, #12]
a00058c2:	681b      	ldr	r3, [r3, #0]
a00058c4:	f103 0330 	add.w	r3, r3, #48	; 0x30
a00058c8:	4618      	mov	r0, r3
a00058ca:	f04f 0105 	mov.w	r1, #5
a00058ce:	f7ff fc8b 	bl	a00051e8 <clear_bit_reg8>

    /* set default RX timeout */
    clear_bit_reg8(&this_uart->hw_reg->MM0,ERTO);
a00058d2:	68fb      	ldr	r3, [r7, #12]
a00058d4:	681b      	ldr	r3, [r3, #0]
a00058d6:	f103 0330 	add.w	r3, r3, #48	; 0x30
a00058da:	4618      	mov	r0, r3
a00058dc:	f04f 0106 	mov.w	r1, #6
a00058e0:	f7ff fc82 	bl	a00051e8 <clear_bit_reg8>

    /* disable fractional baud-rate */
    clear_bit_reg8(&this_uart->hw_reg->MM0,EFBR);
a00058e4:	68fb      	ldr	r3, [r7, #12]
a00058e6:	681b      	ldr	r3, [r3, #0]
a00058e8:	f103 0330 	add.w	r3, r3, #48	; 0x30
a00058ec:	4618      	mov	r0, r3
a00058ee:	f04f 0107 	mov.w	r1, #7
a00058f2:	f7ff fc79 	bl	a00051e8 <clear_bit_reg8>

    /* disable single wire mode */
    clear_bit_reg8(&this_uart->hw_reg->MM2,ESWM);
a00058f6:	68fb      	ldr	r3, [r7, #12]
a00058f8:	681b      	ldr	r3, [r3, #0]
a00058fa:	f103 0338 	add.w	r3, r3, #56	; 0x38
a00058fe:	4618      	mov	r0, r3
a0005900:	f04f 0103 	mov.w	r1, #3
a0005904:	f7ff fc70 	bl	a00051e8 <clear_bit_reg8>

    /* set filter to minimum value */
    this_uart->hw_reg->GFR = 0u;
a0005908:	68fb      	ldr	r3, [r7, #12]
a000590a:	681b      	ldr	r3, [r3, #0]
a000590c:	f04f 0200 	mov.w	r2, #0
a0005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* set default TX time gaurd */
    this_uart->hw_reg->TTG = 0u;
a0005914:	68fb      	ldr	r3, [r7, #12]
a0005916:	681b      	ldr	r3, [r3, #0]
a0005918:	f04f 0200 	mov.w	r2, #0
a000591c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* set default RX timeout */
    this_uart->hw_reg->RTO = 0u;
a0005920:	68fb      	ldr	r3, [r7, #12]
a0005922:	681b      	ldr	r3, [r3, #0]
a0005924:	f04f 0200 	mov.w	r2, #0
a0005928:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /*
     * Configure baud rate divisors. This uses the frational baud rate divisor
     * where possible to provide the most accurate baud rat possible.
     */
    config_baud_divisors(this_uart, baud_rate);
a000592c:	68f8      	ldr	r0, [r7, #12]
a000592e:	68b9      	ldr	r1, [r7, #8]
a0005930:	f7ff fe40 	bl	a00055b4 <config_baud_divisors>

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
a0005934:	68fb      	ldr	r3, [r7, #12]
a0005936:	681b      	ldr	r3, [r3, #0]
a0005938:	79fa      	ldrb	r2, [r7, #7]
a000593a:	731a      	strb	r2, [r3, #12]

    /* Instance setup */
    this_uart->baudrate = baud_rate;
a000593c:	68fb      	ldr	r3, [r7, #12]
a000593e:	68ba      	ldr	r2, [r7, #8]
a0005940:	609a      	str	r2, [r3, #8]
    this_uart->lineconfig = line_config;
a0005942:	68fb      	ldr	r3, [r7, #12]
a0005944:	79fa      	ldrb	r2, [r7, #7]
a0005946:	731a      	strb	r2, [r3, #12]
    this_uart->tx_buff_size = TX_COMPLETE;
a0005948:	68fb      	ldr	r3, [r7, #12]
a000594a:	f04f 0200 	mov.w	r2, #0
a000594e:	615a      	str	r2, [r3, #20]
    this_uart->tx_buffer = (const uint8_t *)0;
a0005950:	68fb      	ldr	r3, [r7, #12]
a0005952:	f04f 0200 	mov.w	r2, #0
a0005956:	611a      	str	r2, [r3, #16]
    this_uart->tx_idx = 0u;
a0005958:	68fb      	ldr	r3, [r7, #12]
a000595a:	f04f 0200 	mov.w	r2, #0
a000595e:	619a      	str	r2, [r3, #24]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
a0005960:	68fb      	ldr	r3, [r7, #12]
a0005962:	f04f 0200 	mov.w	r2, #0
a0005966:	621a      	str	r2, [r3, #32]
    this_uart->tx_handler       = NULL_HANDLER;
a0005968:	68fb      	ldr	r3, [r7, #12]
a000596a:	f04f 0200 	mov.w	r2, #0
a000596e:	625a      	str	r2, [r3, #36]	; 0x24
    this_uart->linests_handler  = NULL_HANDLER;
a0005970:	68fb      	ldr	r3, [r7, #12]
a0005972:	f04f 0200 	mov.w	r2, #0
a0005976:	61da      	str	r2, [r3, #28]
    this_uart->modemsts_handler = NULL_HANDLER;
a0005978:	68fb      	ldr	r3, [r7, #12]
a000597a:	f04f 0200 	mov.w	r2, #0
a000597e:	629a      	str	r2, [r3, #40]	; 0x28
    this_uart->rto_handler      = NULL_HANDLER;
a0005980:	68fb      	ldr	r3, [r7, #12]
a0005982:	f04f 0200 	mov.w	r2, #0
a0005986:	62da      	str	r2, [r3, #44]	; 0x2c
    this_uart->nack_handler     = NULL_HANDLER;
a0005988:	68fb      	ldr	r3, [r7, #12]
a000598a:	f04f 0200 	mov.w	r2, #0
a000598e:	631a      	str	r2, [r3, #48]	; 0x30
    this_uart->pid_pei_handler  = NULL_HANDLER;
a0005990:	68fb      	ldr	r3, [r7, #12]
a0005992:	f04f 0200 	mov.w	r2, #0
a0005996:	635a      	str	r2, [r3, #52]	; 0x34
    this_uart->break_handler    = NULL_HANDLER;
a0005998:	68fb      	ldr	r3, [r7, #12]
a000599a:	f04f 0200 	mov.w	r2, #0
a000599e:	639a      	str	r2, [r3, #56]	; 0x38
    this_uart->sync_handler     = NULL_HANDLER;
a00059a0:	68fb      	ldr	r3, [r7, #12]
a00059a2:	f04f 0200 	mov.w	r2, #0
a00059a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the sticky status */
    this_uart->status = 0u;
a00059a8:	68fb      	ldr	r3, [r7, #12]
a00059aa:	f04f 0200 	mov.w	r2, #0
a00059ae:	735a      	strb	r2, [r3, #13]
}
a00059b0:	f107 0710 	add.w	r7, r7, #16
a00059b4:	46bd      	mov	sp, r7
a00059b6:	bd80      	pop	{r7, pc}

a00059b8 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
a00059b8:	b580      	push	{r7, lr}
a00059ba:	b084      	sub	sp, #16
a00059bc:	af00      	add	r7, sp, #0
a00059be:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
a00059c0:	687a      	ldr	r2, [r7, #4]
a00059c2:	f24e 034c 	movw	r3, #57420	; 0xe04c
a00059c6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00059ca:	429a      	cmp	r2, r3
a00059cc:	d007      	beq.n	a00059de <MSS_UART_isr+0x26>
a00059ce:	687a      	ldr	r2, [r7, #4]
a00059d0:	f24e 030c 	movw	r3, #57356	; 0xe00c
a00059d4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00059d8:	429a      	cmp	r2, r3
a00059da:	d000      	beq.n	a00059de <MSS_UART_isr+0x26>
a00059dc:	be00      	bkpt	0x0000

    if((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1))
a00059de:	687a      	ldr	r2, [r7, #4]
a00059e0:	f24e 034c 	movw	r3, #57420	; 0xe04c
a00059e4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00059e8:	429a      	cmp	r2, r3
a00059ea:	d007      	beq.n	a00059fc <MSS_UART_isr+0x44>
a00059ec:	687a      	ldr	r2, [r7, #4]
a00059ee:	f24e 030c 	movw	r3, #57356	; 0xe00c
a00059f2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a00059f6:	429a      	cmp	r2, r3
a00059f8:	f040 80ef 	bne.w	a0005bda <MSS_UART_isr+0x222>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
a00059fc:	687b      	ldr	r3, [r7, #4]
a00059fe:	681b      	ldr	r3, [r3, #0]
a0005a00:	7a1b      	ldrb	r3, [r3, #8]
a0005a02:	b2db      	uxtb	r3, r3
a0005a04:	f003 030f 	and.w	r3, r3, #15
a0005a08:	73fb      	strb	r3, [r7, #15]

        switch (iirf)
a0005a0a:	7bfb      	ldrb	r3, [r7, #15]
a0005a0c:	2b0c      	cmp	r3, #12
a0005a0e:	f200 80d7 	bhi.w	a0005bc0 <MSS_UART_isr+0x208>
a0005a12:	a201      	add	r2, pc, #4	; (adr r2, a0005a18 <MSS_UART_isr+0x60>)
a0005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
a0005a18:	a0005a4d 	.word	0xa0005a4d
a0005a1c:	a0005bc1 	.word	0xa0005bc1
a0005a20:	a0005a6b 	.word	0xa0005a6b
a0005a24:	a0005ac5 	.word	0xa0005ac5
a0005a28:	a0005a89 	.word	0xa0005a89
a0005a2c:	a0005bc1 	.word	0xa0005bc1
a0005a30:	a0005aa7 	.word	0xa0005aa7
a0005a34:	a0005bc1 	.word	0xa0005bc1
a0005a38:	a0005bc1 	.word	0xa0005bc1
a0005a3c:	a0005bc1 	.word	0xa0005bc1
a0005a40:	a0005bc1 	.word	0xa0005bc1
a0005a44:	a0005bc1 	.word	0xa0005bc1
a0005a48:	a0005a89 	.word	0xa0005a89
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->modemsts_handler);
a0005a4c:	687b      	ldr	r3, [r7, #4]
a0005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
a0005a50:	2b00      	cmp	r3, #0
a0005a52:	d100      	bne.n	a0005a56 <MSS_UART_isr+0x9e>
a0005a54:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->modemsts_handler)
a0005a56:	687b      	ldr	r3, [r7, #4]
a0005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
a0005a5a:	2b00      	cmp	r3, #0
a0005a5c:	f000 80b2 	beq.w	a0005bc4 <MSS_UART_isr+0x20c>
                {
                   (*(this_uart->modemsts_handler))(this_uart);
a0005a60:	687b      	ldr	r3, [r7, #4]
a0005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
a0005a64:	6878      	ldr	r0, [r7, #4]
a0005a66:	4798      	blx	r3
                }
            }
            break;
a0005a68:	e0b7      	b.n	a0005bda <MSS_UART_isr+0x222>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT(NULL_HANDLER != this_uart->tx_handler);
a0005a6a:	687b      	ldr	r3, [r7, #4]
a0005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a0005a6e:	2b00      	cmp	r3, #0
a0005a70:	d100      	bne.n	a0005a74 <MSS_UART_isr+0xbc>
a0005a72:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->tx_handler)
a0005a74:	687b      	ldr	r3, [r7, #4]
a0005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a0005a78:	2b00      	cmp	r3, #0
a0005a7a:	f000 80a5 	beq.w	a0005bc8 <MSS_UART_isr+0x210>
                {
                    (*(this_uart->tx_handler))(this_uart);
a0005a7e:	687b      	ldr	r3, [r7, #4]
a0005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a0005a82:	6878      	ldr	r0, [r7, #4]
a0005a84:	4798      	blx	r3
                }
            }
            break;
a0005a86:	e0a8      	b.n	a0005bda <MSS_UART_isr+0x222>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT(NULL_HANDLER != this_uart->rx_handler);
a0005a88:	687b      	ldr	r3, [r7, #4]
a0005a8a:	6a1b      	ldr	r3, [r3, #32]
a0005a8c:	2b00      	cmp	r3, #0
a0005a8e:	d100      	bne.n	a0005a92 <MSS_UART_isr+0xda>
a0005a90:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->rx_handler)
a0005a92:	687b      	ldr	r3, [r7, #4]
a0005a94:	6a1b      	ldr	r3, [r3, #32]
a0005a96:	2b00      	cmp	r3, #0
a0005a98:	f000 8098 	beq.w	a0005bcc <MSS_UART_isr+0x214>
                {
                    (*(this_uart->rx_handler))(this_uart);
a0005a9c:	687b      	ldr	r3, [r7, #4]
a0005a9e:	6a1b      	ldr	r3, [r3, #32]
a0005aa0:	6878      	ldr	r0, [r7, #4]
a0005aa2:	4798      	blx	r3
                }
            }
            break;
a0005aa4:	e099      	b.n	a0005bda <MSS_UART_isr+0x222>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT(NULL_HANDLER != this_uart->linests_handler);
a0005aa6:	687b      	ldr	r3, [r7, #4]
a0005aa8:	69db      	ldr	r3, [r3, #28]
a0005aaa:	2b00      	cmp	r3, #0
a0005aac:	d100      	bne.n	a0005ab0 <MSS_UART_isr+0xf8>
a0005aae:	be00      	bkpt	0x0000
                if(NULL_HANDLER != this_uart->linests_handler)
a0005ab0:	687b      	ldr	r3, [r7, #4]
a0005ab2:	69db      	ldr	r3, [r3, #28]
a0005ab4:	2b00      	cmp	r3, #0
a0005ab6:	f000 808b 	beq.w	a0005bd0 <MSS_UART_isr+0x218>
                {
                   (*(this_uart->linests_handler))(this_uart);
a0005aba:	687b      	ldr	r3, [r7, #4]
a0005abc:	69db      	ldr	r3, [r3, #28]
a0005abe:	6878      	ldr	r0, [r7, #4]
a0005ac0:	4798      	blx	r3
                }
            }
            break;
a0005ac2:	e08a      	b.n	a0005bda <MSS_UART_isr+0x222>
            case IIRF_MMI:
            {
                /* Identify multimode interrupts and handle */

                /* Receiver time-out interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ERTOI))
a0005ac4:	687b      	ldr	r3, [r7, #4]
a0005ac6:	681b      	ldr	r3, [r3, #0]
a0005ac8:	f103 0328 	add.w	r3, r3, #40	; 0x28
a0005acc:	4618      	mov	r0, r3
a0005ace:	f04f 0100 	mov.w	r1, #0
a0005ad2:	f7ff fba9 	bl	a0005228 <read_bit_reg8>
a0005ad6:	4603      	mov	r3, r0
a0005ad8:	2b00      	cmp	r3, #0
a0005ada:	d00c      	beq.n	a0005af6 <MSS_UART_isr+0x13e>
                {
                    ASSERT(NULL_HANDLER != this_uart->rto_handler);
a0005adc:	687b      	ldr	r3, [r7, #4]
a0005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0005ae0:	2b00      	cmp	r3, #0
a0005ae2:	d100      	bne.n	a0005ae6 <MSS_UART_isr+0x12e>
a0005ae4:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->rto_handler)
a0005ae6:	687b      	ldr	r3, [r7, #4]
a0005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0005aea:	2b00      	cmp	r3, #0
a0005aec:	d003      	beq.n	a0005af6 <MSS_UART_isr+0x13e>
                    {
                        (*(this_uart->rto_handler))(this_uart);
a0005aee:	687b      	ldr	r3, [r7, #4]
a0005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0005af2:	6878      	ldr	r0, [r7, #4]
a0005af4:	4798      	blx	r3
                    }
                }
                /* NACK interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ENACKI))
a0005af6:	687b      	ldr	r3, [r7, #4]
a0005af8:	681b      	ldr	r3, [r3, #0]
a0005afa:	f103 0328 	add.w	r3, r3, #40	; 0x28
a0005afe:	4618      	mov	r0, r3
a0005b00:	f04f 0101 	mov.w	r1, #1
a0005b04:	f7ff fb90 	bl	a0005228 <read_bit_reg8>
a0005b08:	4603      	mov	r3, r0
a0005b0a:	2b00      	cmp	r3, #0
a0005b0c:	d00c      	beq.n	a0005b28 <MSS_UART_isr+0x170>
                {
                    ASSERT(NULL_HANDLER != this_uart->nack_handler);
a0005b0e:	687b      	ldr	r3, [r7, #4]
a0005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
a0005b12:	2b00      	cmp	r3, #0
a0005b14:	d100      	bne.n	a0005b18 <MSS_UART_isr+0x160>
a0005b16:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->nack_handler)
a0005b18:	687b      	ldr	r3, [r7, #4]
a0005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
a0005b1c:	2b00      	cmp	r3, #0
a0005b1e:	d003      	beq.n	a0005b28 <MSS_UART_isr+0x170>
                    {
                        (*(this_uart->nack_handler))(this_uart);
a0005b20:	687b      	ldr	r3, [r7, #4]
a0005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
a0005b24:	6878      	ldr	r0, [r7, #4]
a0005b26:	4798      	blx	r3
                    }
                }

                /* PID parity error interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,EPID_PEI))
a0005b28:	687b      	ldr	r3, [r7, #4]
a0005b2a:	681b      	ldr	r3, [r3, #0]
a0005b2c:	f103 0328 	add.w	r3, r3, #40	; 0x28
a0005b30:	4618      	mov	r0, r3
a0005b32:	f04f 0102 	mov.w	r1, #2
a0005b36:	f7ff fb77 	bl	a0005228 <read_bit_reg8>
a0005b3a:	4603      	mov	r3, r0
a0005b3c:	2b00      	cmp	r3, #0
a0005b3e:	d00c      	beq.n	a0005b5a <MSS_UART_isr+0x1a2>
                {
                    ASSERT(NULL_HANDLER != this_uart->pid_pei_handler);
a0005b40:	687b      	ldr	r3, [r7, #4]
a0005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
a0005b44:	2b00      	cmp	r3, #0
a0005b46:	d100      	bne.n	a0005b4a <MSS_UART_isr+0x192>
a0005b48:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->pid_pei_handler)
a0005b4a:	687b      	ldr	r3, [r7, #4]
a0005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
a0005b4e:	2b00      	cmp	r3, #0
a0005b50:	d003      	beq.n	a0005b5a <MSS_UART_isr+0x1a2>
                    {
                        (*(this_uart->pid_pei_handler))(this_uart);
a0005b52:	687b      	ldr	r3, [r7, #4]
a0005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
a0005b56:	6878      	ldr	r0, [r7, #4]
a0005b58:	4798      	blx	r3
                    }
                }

                /* LIN break detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINBI))
a0005b5a:	687b      	ldr	r3, [r7, #4]
a0005b5c:	681b      	ldr	r3, [r3, #0]
a0005b5e:	f103 0328 	add.w	r3, r3, #40	; 0x28
a0005b62:	4618      	mov	r0, r3
a0005b64:	f04f 0103 	mov.w	r1, #3
a0005b68:	f7ff fb5e 	bl	a0005228 <read_bit_reg8>
a0005b6c:	4603      	mov	r3, r0
a0005b6e:	2b00      	cmp	r3, #0
a0005b70:	d00c      	beq.n	a0005b8c <MSS_UART_isr+0x1d4>
                {
                    ASSERT(NULL_HANDLER != this_uart->break_handler);
a0005b72:	687b      	ldr	r3, [r7, #4]
a0005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
a0005b76:	2b00      	cmp	r3, #0
a0005b78:	d100      	bne.n	a0005b7c <MSS_UART_isr+0x1c4>
a0005b7a:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->break_handler)
a0005b7c:	687b      	ldr	r3, [r7, #4]
a0005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
a0005b80:	2b00      	cmp	r3, #0
a0005b82:	d003      	beq.n	a0005b8c <MSS_UART_isr+0x1d4>
                    {
                        (*(this_uart->break_handler))(this_uart);
a0005b84:	687b      	ldr	r3, [r7, #4]
a0005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
a0005b88:	6878      	ldr	r0, [r7, #4]
a0005b8a:	4798      	blx	r3
                    }
                }

                /* LIN Sync detection interrupt */
                if(read_bit_reg8(&this_uart->hw_reg->IIM,ELINSI))
a0005b8c:	687b      	ldr	r3, [r7, #4]
a0005b8e:	681b      	ldr	r3, [r3, #0]
a0005b90:	f103 0328 	add.w	r3, r3, #40	; 0x28
a0005b94:	4618      	mov	r0, r3
a0005b96:	f04f 0104 	mov.w	r1, #4
a0005b9a:	f7ff fb45 	bl	a0005228 <read_bit_reg8>
a0005b9e:	4603      	mov	r3, r0
a0005ba0:	2b00      	cmp	r3, #0
a0005ba2:	d017      	beq.n	a0005bd4 <MSS_UART_isr+0x21c>
                {
                    ASSERT(NULL_HANDLER != this_uart->sync_handler);
a0005ba4:	687b      	ldr	r3, [r7, #4]
a0005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a0005ba8:	2b00      	cmp	r3, #0
a0005baa:	d100      	bne.n	a0005bae <MSS_UART_isr+0x1f6>
a0005bac:	be00      	bkpt	0x0000
                    if(NULL_HANDLER != this_uart->sync_handler)
a0005bae:	687b      	ldr	r3, [r7, #4]
a0005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a0005bb2:	2b00      	cmp	r3, #0
a0005bb4:	d010      	beq.n	a0005bd8 <MSS_UART_isr+0x220>
                    {
                        (*(this_uart->sync_handler))(this_uart);
a0005bb6:	687b      	ldr	r3, [r7, #4]
a0005bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
a0005bba:	6878      	ldr	r0, [r7, #4]
a0005bbc:	4798      	blx	r3
                    }
                }
                break;
a0005bbe:	e00c      	b.n	a0005bda <MSS_UART_isr+0x222>
            }

            default:
            {
                ASSERT(INVALID_INTERRUPT);
a0005bc0:	be00      	bkpt	0x0000
a0005bc2:	e00a      	b.n	a0005bda <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->modemsts_handler)
                {
                   (*(this_uart->modemsts_handler))(this_uart);
                }
            }
            break;
a0005bc4:	bf00      	nop
a0005bc6:	e008      	b.n	a0005bda <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->tx_handler)
                {
                    (*(this_uart->tx_handler))(this_uart);
                }
            }
            break;
a0005bc8:	bf00      	nop
a0005bca:	e006      	b.n	a0005bda <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->rx_handler)
                {
                    (*(this_uart->rx_handler))(this_uart);
                }
            }
            break;
a0005bcc:	bf00      	nop
a0005bce:	e004      	b.n	a0005bda <MSS_UART_isr+0x222>
                if(NULL_HANDLER != this_uart->linests_handler)
                {
                   (*(this_uart->linests_handler))(this_uart);
                }
            }
            break;
a0005bd0:	bf00      	nop
a0005bd2:	e002      	b.n	a0005bda <MSS_UART_isr+0x222>
                    if(NULL_HANDLER != this_uart->sync_handler)
                    {
                        (*(this_uart->sync_handler))(this_uart);
                    }
                }
                break;
a0005bd4:	bf00      	nop
a0005bd6:	e000      	b.n	a0005bda <MSS_UART_isr+0x222>
a0005bd8:	bf00      	nop
                ASSERT(INVALID_INTERRUPT);
            }
            break;
        }
    }
}
a0005bda:	f107 0710 	add.w	r7, r7, #16
a0005bde:	46bd      	mov	sp, r7
a0005be0:	bd80      	pop	{r7, pc}
a0005be2:	bf00      	nop

a0005be4 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
a0005be4:	b580      	push	{r7, lr}
a0005be6:	b086      	sub	sp, #24
a0005be8:	af00      	add	r7, sp, #0
a0005bea:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
a0005bec:	687a      	ldr	r2, [r7, #4]
a0005bee:	f24e 034c 	movw	r3, #57420	; 0xe04c
a0005bf2:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005bf6:	429a      	cmp	r2, r3
a0005bf8:	d007      	beq.n	a0005c0a <default_tx_handler+0x26>
a0005bfa:	687a      	ldr	r2, [r7, #4]
a0005bfc:	f24e 030c 	movw	r3, #57356	; 0xe00c
a0005c00:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005c04:	429a      	cmp	r2, r3
a0005c06:	d000      	beq.n	a0005c0a <default_tx_handler+0x26>
a0005c08:	be00      	bkpt	0x0000
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
a0005c0a:	687b      	ldr	r3, [r7, #4]
a0005c0c:	691b      	ldr	r3, [r3, #16]
a0005c0e:	2b00      	cmp	r3, #0
a0005c10:	d100      	bne.n	a0005c14 <default_tx_handler+0x30>
a0005c12:	be00      	bkpt	0x0000
    ASSERT(0u < this_uart->tx_buff_size);
a0005c14:	687b      	ldr	r3, [r7, #4]
a0005c16:	695b      	ldr	r3, [r3, #20]
a0005c18:	2b00      	cmp	r3, #0
a0005c1a:	d100      	bne.n	a0005c1e <default_tx_handler+0x3a>
a0005c1c:	be00      	bkpt	0x0000

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
a0005c1e:	687a      	ldr	r2, [r7, #4]
a0005c20:	f24e 034c 	movw	r3, #57420	; 0xe04c
a0005c24:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005c28:	429a      	cmp	r2, r3
a0005c2a:	d006      	beq.n	a0005c3a <default_tx_handler+0x56>
a0005c2c:	687a      	ldr	r2, [r7, #4]
a0005c2e:	f24e 030c 	movw	r3, #57356	; 0xe00c
a0005c32:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0005c36:	429a      	cmp	r2, r3
a0005c38:	d155      	bne.n	a0005ce6 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
a0005c3a:	687b      	ldr	r3, [r7, #4]
a0005c3c:	691b      	ldr	r3, [r3, #16]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
a0005c3e:	2b00      	cmp	r3, #0
a0005c40:	d051      	beq.n	a0005ce6 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
a0005c42:	687b      	ldr	r3, [r7, #4]
a0005c44:	695b      	ldr	r3, [r3, #20]

    ASSERT((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1));
    ASSERT(( (uint8_t *)0 ) != this_uart->tx_buffer);
    ASSERT(0u < this_uart->tx_buff_size);

    if(((this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1)) &&
a0005c46:	2b00      	cmp	r3, #0
a0005c48:	d04d      	beq.n	a0005ce6 <default_tx_handler+0x102>
       (((uint8_t *)0 ) != this_uart->tx_buffer) &&
       (0u < this_uart->tx_buff_size))
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
a0005c4a:	687b      	ldr	r3, [r7, #4]
a0005c4c:	681b      	ldr	r3, [r3, #0]
a0005c4e:	7d1b      	ldrb	r3, [r3, #20]
a0005c50:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
a0005c52:	687b      	ldr	r3, [r7, #4]
a0005c54:	7b5a      	ldrb	r2, [r3, #13]
a0005c56:	7afb      	ldrb	r3, [r7, #11]
a0005c58:	ea42 0303 	orr.w	r3, r2, r3
a0005c5c:	b2da      	uxtb	r2, r3
a0005c5e:	687b      	ldr	r3, [r7, #4]
a0005c60:	735a      	strb	r2, [r3, #13]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if(status & MSS_UART_THRE)
a0005c62:	7afb      	ldrb	r3, [r7, #11]
a0005c64:	f003 0320 	and.w	r3, r3, #32
a0005c68:	2b00      	cmp	r3, #0
a0005c6a:	d029      	beq.n	a0005cc0 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
a0005c6c:	f04f 0310 	mov.w	r3, #16
a0005c70:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
a0005c72:	687b      	ldr	r3, [r7, #4]
a0005c74:	695a      	ldr	r2, [r3, #20]
a0005c76:	687b      	ldr	r3, [r7, #4]
a0005c78:	699b      	ldr	r3, [r3, #24]
a0005c7a:	ebc3 0302 	rsb	r3, r3, r2
a0005c7e:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if(tx_remain < TX_FIFO_SIZE)
a0005c80:	697b      	ldr	r3, [r7, #20]
a0005c82:	2b0f      	cmp	r3, #15
a0005c84:	d801      	bhi.n	a0005c8a <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
a0005c86:	697b      	ldr	r3, [r7, #20]
a0005c88:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
a0005c8a:	f04f 0300 	mov.w	r3, #0
a0005c8e:	60fb      	str	r3, [r7, #12]
a0005c90:	e012      	b.n	a0005cb8 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
a0005c92:	687b      	ldr	r3, [r7, #4]
a0005c94:	681b      	ldr	r3, [r3, #0]
a0005c96:	687a      	ldr	r2, [r7, #4]
a0005c98:	6911      	ldr	r1, [r2, #16]
a0005c9a:	687a      	ldr	r2, [r7, #4]
a0005c9c:	6992      	ldr	r2, [r2, #24]
a0005c9e:	440a      	add	r2, r1
a0005ca0:	7812      	ldrb	r2, [r2, #0]
a0005ca2:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
a0005ca4:	687b      	ldr	r3, [r7, #4]
a0005ca6:	699b      	ldr	r3, [r3, #24]
a0005ca8:	f103 0201 	add.w	r2, r3, #1
a0005cac:	687b      	ldr	r3, [r7, #4]
a0005cae:	619a      	str	r2, [r3, #24]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for(i = 0u; i < fill_size; ++i)
a0005cb0:	68fb      	ldr	r3, [r7, #12]
a0005cb2:	f103 0301 	add.w	r3, r3, #1
a0005cb6:	60fb      	str	r3, [r7, #12]
a0005cb8:	68fa      	ldr	r2, [r7, #12]
a0005cba:	693b      	ldr	r3, [r7, #16]
a0005cbc:	429a      	cmp	r2, r3
a0005cbe:	d3e8      	bcc.n	a0005c92 <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if(this_uart->tx_idx == this_uart->tx_buff_size)
a0005cc0:	687b      	ldr	r3, [r7, #4]
a0005cc2:	699a      	ldr	r2, [r3, #24]
a0005cc4:	687b      	ldr	r3, [r7, #4]
a0005cc6:	695b      	ldr	r3, [r3, #20]
a0005cc8:	429a      	cmp	r2, r3
a0005cca:	d10c      	bne.n	a0005ce6 <default_tx_handler+0x102>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
a0005ccc:	687b      	ldr	r3, [r7, #4]
a0005cce:	f04f 0200 	mov.w	r2, #0
a0005cd2:	615a      	str	r2, [r3, #20]
            /* disables TX interrupt */
            clear_bit_reg8(&this_uart->hw_reg->IER,ETBEI);
a0005cd4:	687b      	ldr	r3, [r7, #4]
a0005cd6:	681b      	ldr	r3, [r3, #0]
a0005cd8:	f103 0304 	add.w	r3, r3, #4
a0005cdc:	4618      	mov	r0, r3
a0005cde:	f04f 0101 	mov.w	r1, #1
a0005ce2:	f7ff fa81 	bl	a00051e8 <clear_bit_reg8>
        }
    }
}
a0005ce6:	f107 0718 	add.w	r7, r7, #24
a0005cea:	46bd      	mov	sp, r7
a0005cec:	bd80      	pop	{r7, pc}
a0005cee:	bf00      	nop

a0005cf0 <I2C_init>:
    i2c_instance_t * this_i2c,
    addr_t base_address,
    uint8_t ser_address,
    i2c_clock_divider_t ser_clock_speed
)
{
a0005cf0:	b580      	push	{r7, lr}
a0005cf2:	b086      	sub	sp, #24
a0005cf4:	af00      	add	r7, sp, #0
a0005cf6:	60f8      	str	r0, [r7, #12]
a0005cf8:	60b9      	str	r1, [r7, #8]
a0005cfa:	71fa      	strb	r2, [r7, #7]
a0005cfc:	71bb      	strb	r3, [r7, #6]
    psr_t saved_psr;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
a0005cfe:	79bb      	ldrb	r3, [r7, #6]
a0005d00:	617b      	str	r3, [r7, #20]
    
    /*
     * We need to disable ints while doing this as there is no guarantee we
     * have not been called already and the ISR is active.
     */
    saved_psr = HAL_disable_interrupts();
a0005d02:	f001 f9e9 	bl	a00070d8 <HAL_disable_interrupts>
a0005d06:	4603      	mov	r3, r0
a0005d08:	613b      	str	r3, [r7, #16]
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    memset(this_i2c, 0, sizeof(i2c_instance_t));
a0005d0a:	68f8      	ldr	r0, [r7, #12]
a0005d0c:	f04f 0100 	mov.w	r1, #0
a0005d10:	f04f 026c 	mov.w	r2, #108	; 0x6c
a0005d14:	f001 fb20 	bl	a0007358 <memset>
    
    /*
     * Set base address of I2C hardware used by this instance.
     */
    this_i2c->base_address = base_address;
a0005d18:	68fb      	ldr	r3, [r7, #12]
a0005d1a:	68ba      	ldr	r2, [r7, #8]
a0005d1c:	601a      	str	r2, [r3, #0]

    /*
     * Update Serial address of the device
     */
    this_i2c->ser_address = ((uint_fast8_t)ser_address << 1u);
a0005d1e:	79fb      	ldrb	r3, [r7, #7]
a0005d20:	ea4f 0243 	mov.w	r2, r3, lsl #1
a0005d24:	68fb      	ldr	r3, [r7, #12]
a0005d26:	605a      	str	r2, [r3, #4]
    
    /*
     * Configure hardware.
     */
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x00); /* Reset I2C hardware. */
a0005d28:	68fb      	ldr	r3, [r7, #12]
a0005d2a:	681b      	ldr	r3, [r3, #0]
a0005d2c:	4618      	mov	r0, r3
a0005d2e:	f04f 0106 	mov.w	r1, #6
a0005d32:	f04f 0240 	mov.w	r2, #64	; 0x40
a0005d36:	f04f 0300 	mov.w	r3, #0
a0005d3a:	f001 fa08 	bl	a000714e <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, ENS1, 0x01); /* set enable bit */
a0005d3e:	68fb      	ldr	r3, [r7, #12]
a0005d40:	681b      	ldr	r3, [r3, #0]
a0005d42:	4618      	mov	r0, r3
a0005d44:	f04f 0106 	mov.w	r1, #6
a0005d48:	f04f 0240 	mov.w	r2, #64	; 0x40
a0005d4c:	f04f 0301 	mov.w	r3, #1
a0005d50:	f001 f9fd 	bl	a000714e <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR2, ( (clock_speed >> 2) & 0x01) );
a0005d54:	68fb      	ldr	r3, [r7, #12]
a0005d56:	681a      	ldr	r2, [r3, #0]
a0005d58:	697b      	ldr	r3, [r7, #20]
a0005d5a:	ea4f 0393 	mov.w	r3, r3, lsr #2
a0005d5e:	f003 0301 	and.w	r3, r3, #1
a0005d62:	4610      	mov	r0, r2
a0005d64:	f04f 0107 	mov.w	r1, #7
a0005d68:	f04f 0280 	mov.w	r2, #128	; 0x80
a0005d6c:	f001 f9ef 	bl	a000714e <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR1, ( (clock_speed >> 1) & 0x01) );
a0005d70:	68fb      	ldr	r3, [r7, #12]
a0005d72:	681a      	ldr	r2, [r3, #0]
a0005d74:	697b      	ldr	r3, [r7, #20]
a0005d76:	ea4f 0353 	mov.w	r3, r3, lsr #1
a0005d7a:	f003 0301 	and.w	r3, r3, #1
a0005d7e:	4610      	mov	r0, r2
a0005d80:	f04f 0101 	mov.w	r1, #1
a0005d84:	f04f 0202 	mov.w	r2, #2
a0005d88:	f001 f9e1 	bl	a000714e <HW_set_8bit_reg_field>
    HAL_set_8bit_reg_field(this_i2c->base_address, CR0, ( clock_speed & 0x01) );
a0005d8c:	68fb      	ldr	r3, [r7, #12]
a0005d8e:	681a      	ldr	r2, [r3, #0]
a0005d90:	697b      	ldr	r3, [r7, #20]
a0005d92:	f003 0301 	and.w	r3, r3, #1
a0005d96:	4610      	mov	r0, r2
a0005d98:	f04f 0100 	mov.w	r1, #0
a0005d9c:	f04f 0201 	mov.w	r2, #1
a0005da0:	f001 f9d5 	bl	a000714e <HW_set_8bit_reg_field>

    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS, this_i2c->ser_address);
a0005da4:	68fb      	ldr	r3, [r7, #12]
a0005da6:	681b      	ldr	r3, [r3, #0]
a0005da8:	f103 020c 	add.w	r2, r3, #12
a0005dac:	68fb      	ldr	r3, [r7, #12]
a0005dae:	685b      	ldr	r3, [r3, #4]
a0005db0:	4610      	mov	r0, r2
a0005db2:	4619      	mov	r1, r3
a0005db4:	f001 f9c7 	bl	a0007146 <HW_set_8bit_reg>
    HAL_set_8bit_reg(this_i2c->base_address, ADDRESS1, this_i2c->ser_address);
a0005db8:	68fb      	ldr	r3, [r7, #12]
a0005dba:	681b      	ldr	r3, [r3, #0]
a0005dbc:	f103 021c 	add.w	r2, r3, #28
a0005dc0:	68fb      	ldr	r3, [r7, #12]
a0005dc2:	685b      	ldr	r3, [r3, #4]
a0005dc4:	4610      	mov	r0, r2
a0005dc6:	4619      	mov	r1, r3
a0005dc8:	f001 f9bd 	bl	a0007146 <HW_set_8bit_reg>
    
    /*
     * Finally safe to enable interrupts.
     */
    HAL_restore_interrupts( saved_psr );
a0005dcc:	6938      	ldr	r0, [r7, #16]
a0005dce:	f001 f987 	bl	a00070e0 <HAL_restore_interrupts>
}
a0005dd2:	f107 0718 	add.w	r7, r7, #24
a0005dd6:	46bd      	mov	sp, r7
a0005dd8:	bd80      	pop	{r7, pc}
a0005dda:	bf00      	nop

a0005ddc <I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
a0005ddc:	b580      	push	{r7, lr}
a0005dde:	b086      	sub	sp, #24
a0005de0:	af00      	add	r7, sp, #0
a0005de2:	60f8      	str	r0, [r7, #12]
a0005de4:	607a      	str	r2, [r7, #4]
a0005de6:	460a      	mov	r2, r1
a0005de8:	72fa      	strb	r2, [r7, #11]
a0005dea:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
a0005dec:	f001 f974 	bl	a00070d8 <HAL_disable_interrupts>
a0005df0:	4603      	mov	r3, r0
a0005df2:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
a0005df4:	68fb      	ldr	r3, [r7, #12]
a0005df6:	7b1b      	ldrb	r3, [r3, #12]
a0005df8:	2b00      	cmp	r3, #0
a0005dfa:	d103      	bne.n	a0005e04 <I2C_write+0x28>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
a0005dfc:	68fb      	ldr	r3, [r7, #12]
a0005dfe:	f04f 0201 	mov.w	r2, #1
a0005e02:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
a0005e04:	68fb      	ldr	r3, [r7, #12]
a0005e06:	f04f 0201 	mov.w	r2, #1
a0005e0a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
a0005e0e:	7afb      	ldrb	r3, [r7, #11]
a0005e10:	ea4f 0243 	mov.w	r2, r3, lsl #1
a0005e14:	68fb      	ldr	r3, [r7, #12]
a0005e16:	609a      	str	r2, [r3, #8]
    this_i2c->dir = WRITE_DIR;
a0005e18:	68fb      	ldr	r3, [r7, #12]
a0005e1a:	f04f 0200 	mov.w	r2, #0
a0005e1e:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_buffer = write_buffer;
a0005e20:	68fb      	ldr	r3, [r7, #12]
a0005e22:	687a      	ldr	r2, [r7, #4]
a0005e24:	619a      	str	r2, [r3, #24]
    this_i2c->master_tx_size = write_size;
a0005e26:	887a      	ldrh	r2, [r7, #2]
a0005e28:	68fb      	ldr	r3, [r7, #12]
a0005e2a:	61da      	str	r2, [r3, #28]
    this_i2c->master_tx_idx = 0u;
a0005e2c:	68fb      	ldr	r3, [r7, #12]
a0005e2e:	f04f 0200 	mov.w	r2, #0
a0005e32:	621a      	str	r2, [r3, #32]

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
a0005e34:	68fb      	ldr	r3, [r7, #12]
a0005e36:	f04f 0201 	mov.w	r2, #1
a0005e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    this_i2c->options = options;
a0005e3e:	68fb      	ldr	r3, [r7, #12]
a0005e40:	f897 2020 	ldrb.w	r2, [r7, #32]
a0005e44:	751a      	strb	r2, [r3, #20]

    if(I2C_IN_PROGRESS == this_i2c->slave_status)
a0005e46:	68fb      	ldr	r3, [r7, #12]
a0005e48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
a0005e4c:	b2db      	uxtb	r3, r3
a0005e4e:	2b01      	cmp	r3, #1
a0005e50:	d105      	bne.n	a0005e5e <I2C_write+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
a0005e52:	68fb      	ldr	r3, [r7, #12]
a0005e54:	f04f 0201 	mov.w	r2, #1
a0005e58:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
a0005e5c:	e00a      	b.n	a0005e74 <I2C_write+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
a0005e5e:	68fb      	ldr	r3, [r7, #12]
a0005e60:	681b      	ldr	r3, [r3, #0]
a0005e62:	4618      	mov	r0, r3
a0005e64:	f04f 0105 	mov.w	r1, #5
a0005e68:	f04f 0220 	mov.w	r2, #32
a0005e6c:	f04f 0301 	mov.w	r3, #1
a0005e70:	f001 f96d 	bl	a000714e <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
a0005e74:	68fb      	ldr	r3, [r7, #12]
a0005e76:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
a0005e7a:	2b01      	cmp	r3, #1
a0005e7c:	d10a      	bne.n	a0005e94 <I2C_write+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
a0005e7e:	68fb      	ldr	r3, [r7, #12]
a0005e80:	681b      	ldr	r3, [r3, #0]
a0005e82:	4618      	mov	r0, r3
a0005e84:	f04f 0103 	mov.w	r1, #3
a0005e88:	f04f 0208 	mov.w	r2, #8
a0005e8c:	f04f 0300 	mov.w	r3, #0
a0005e90:	f001 f95d 	bl	a000714e <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
a0005e94:	68fb      	ldr	r3, [r7, #12]
a0005e96:	681b      	ldr	r3, [r3, #0]
a0005e98:	f103 0304 	add.w	r3, r3, #4
a0005e9c:	4618      	mov	r0, r3
a0005e9e:	f001 f954 	bl	a000714a <HW_get_8bit_reg>
a0005ea2:	4603      	mov	r3, r0
a0005ea4:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
a0005ea6:	7cfb      	ldrb	r3, [r7, #19]
a0005ea8:	b2db      	uxtb	r3, r3
a0005eaa:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
a0005eac:	68f8      	ldr	r0, [r7, #12]
a0005eae:	f000 fec9 	bl	a0006c44 <I2C_enable_irq>

    HAL_restore_interrupts( saved_psr );
a0005eb2:	6978      	ldr	r0, [r7, #20]
a0005eb4:	f001 f914 	bl	a00070e0 <HAL_restore_interrupts>
}
a0005eb8:	f107 0718 	add.w	r7, r7, #24
a0005ebc:	46bd      	mov	sp, r7
a0005ebe:	bd80      	pop	{r7, pc}

a0005ec0 <I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
a0005ec0:	b580      	push	{r7, lr}
a0005ec2:	b086      	sub	sp, #24
a0005ec4:	af00      	add	r7, sp, #0
a0005ec6:	60f8      	str	r0, [r7, #12]
a0005ec8:	607a      	str	r2, [r7, #4]
a0005eca:	460a      	mov	r2, r1
a0005ecc:	72fa      	strb	r2, [r7, #11]
a0005ece:	807b      	strh	r3, [r7, #2]
    psr_t saved_psr;
    volatile uint8_t stat_ctrl;

    saved_psr = HAL_disable_interrupts();
a0005ed0:	f001 f902 	bl	a00070d8 <HAL_disable_interrupts>
a0005ed4:	4603      	mov	r3, r0
a0005ed6:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
a0005ed8:	68fb      	ldr	r3, [r7, #12]
a0005eda:	7b1b      	ldrb	r3, [r3, #12]
a0005edc:	2b00      	cmp	r3, #0
a0005ede:	d103      	bne.n	a0005ee8 <I2C_read+0x28>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
a0005ee0:	68fb      	ldr	r3, [r7, #12]
a0005ee2:	f04f 0202 	mov.w	r2, #2
a0005ee6:	731a      	strb	r2, [r3, #12]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
a0005ee8:	68fb      	ldr	r3, [r7, #12]
a0005eea:	f04f 0202 	mov.w	r2, #2
a0005eee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
a0005ef2:	7afb      	ldrb	r3, [r7, #11]
a0005ef4:	ea4f 0243 	mov.w	r2, r3, lsl #1
a0005ef8:	68fb      	ldr	r3, [r7, #12]
a0005efa:	609a      	str	r2, [r3, #8]

    this_i2c->dir = READ_DIR;
a0005efc:	68fb      	ldr	r3, [r7, #12]
a0005efe:	f04f 0201 	mov.w	r2, #1
a0005f02:	625a      	str	r2, [r3, #36]	; 0x24

    this_i2c->master_rx_buffer = read_buffer;
a0005f04:	68fb      	ldr	r3, [r7, #12]
a0005f06:	687a      	ldr	r2, [r7, #4]
a0005f08:	629a      	str	r2, [r3, #40]	; 0x28
    this_i2c->master_rx_size = read_size;
a0005f0a:	887a      	ldrh	r2, [r7, #2]
a0005f0c:	68fb      	ldr	r3, [r7, #12]
a0005f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    this_i2c->master_rx_idx = 0u;
a0005f10:	68fb      	ldr	r3, [r7, #12]
a0005f12:	f04f 0200 	mov.w	r2, #0
a0005f16:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set I2C status in progress */
    this_i2c->master_status = I2C_IN_PROGRESS;
a0005f18:	68fb      	ldr	r3, [r7, #12]
a0005f1a:	f04f 0201 	mov.w	r2, #1
a0005f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    this_i2c->options = options;
a0005f22:	68fb      	ldr	r3, [r7, #12]
a0005f24:	f897 2020 	ldrb.w	r2, [r7, #32]
a0005f28:	751a      	strb	r2, [r3, #20]
    
    if(I2C_IN_PROGRESS == this_i2c->slave_status)
a0005f2a:	68fb      	ldr	r3, [r7, #12]
a0005f2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
a0005f30:	b2db      	uxtb	r3, r3
a0005f32:	2b01      	cmp	r3, #1
a0005f34:	d105      	bne.n	a0005f42 <I2C_read+0x82>
    {
        this_i2c->is_transaction_pending = 1u;
a0005f36:	68fb      	ldr	r3, [r7, #12]
a0005f38:	f04f 0201 	mov.w	r2, #1
a0005f3c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
a0005f40:	e00a      	b.n	a0005f58 <I2C_read+0x98>
    }
    else
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
a0005f42:	68fb      	ldr	r3, [r7, #12]
a0005f44:	681b      	ldr	r3, [r3, #0]
a0005f46:	4618      	mov	r0, r3
a0005f48:	f04f 0105 	mov.w	r1, #5
a0005f4c:	f04f 0220 	mov.w	r2, #32
a0005f50:	f04f 0301 	mov.w	r3, #1
a0005f54:	f001 f8fb 	bl	a000714e <HW_set_8bit_reg_field>
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( I2C_HOLD_BUS == this_i2c->bus_status )
a0005f58:	68fb      	ldr	r3, [r7, #12]
a0005f5a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
a0005f5e:	2b01      	cmp	r3, #1
a0005f60:	d10a      	bne.n	a0005f78 <I2C_read+0xb8>
    {
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
a0005f62:	68fb      	ldr	r3, [r7, #12]
a0005f64:	681b      	ldr	r3, [r3, #0]
a0005f66:	4618      	mov	r0, r3
a0005f68:	f04f 0103 	mov.w	r1, #3
a0005f6c:	f04f 0208 	mov.w	r2, #8
a0005f70:	f04f 0300 	mov.w	r3, #0
a0005f74:	f001 f8eb 	bl	a000714e <HW_set_8bit_reg_field>
    }

    stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
a0005f78:	68fb      	ldr	r3, [r7, #12]
a0005f7a:	681b      	ldr	r3, [r3, #0]
a0005f7c:	f103 0304 	add.w	r3, r3, #4
a0005f80:	4618      	mov	r0, r3
a0005f82:	f001 f8e2 	bl	a000714a <HW_get_8bit_reg>
a0005f86:	4603      	mov	r3, r0
a0005f88:	74fb      	strb	r3, [r7, #19]
    stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
a0005f8a:	7cfb      	ldrb	r3, [r7, #19]
a0005f8c:	b2db      	uxtb	r3, r3
a0005f8e:	74fb      	strb	r3, [r7, #19]

    /* Enable the interrupt. ( Re-enable) */
    I2C_enable_irq( this_i2c );
a0005f90:	68f8      	ldr	r0, [r7, #12]
a0005f92:	f000 fe57 	bl	a0006c44 <I2C_enable_irq>
    HAL_restore_interrupts( saved_psr );
a0005f96:	6978      	ldr	r0, [r7, #20]
a0005f98:	f001 f8a2 	bl	a00070e0 <HAL_restore_interrupts>
}
a0005f9c:	f107 0718 	add.w	r7, r7, #24
a0005fa0:	46bd      	mov	sp, r7
a0005fa2:	bd80      	pop	{r7, pc}

a0005fa4 <I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
a0005fa4:	b580      	push	{r7, lr}
a0005fa6:	b086      	sub	sp, #24
a0005fa8:	af00      	add	r7, sp, #0
a0005faa:	60f8      	str	r0, [r7, #12]
a0005fac:	607a      	str	r2, [r7, #4]
a0005fae:	460a      	mov	r2, r1
a0005fb0:	72fa      	strb	r2, [r7, #11]
a0005fb2:	807b      	strh	r3, [r7, #2]
    HAL_ASSERT(offset_size > 0u);
a0005fb4:	887b      	ldrh	r3, [r7, #2]
a0005fb6:	2b00      	cmp	r3, #0
a0005fb8:	d100      	bne.n	a0005fbc <I2C_write_read+0x18>
a0005fba:	be00      	bkpt	0x0000
    HAL_ASSERT(addr_offset != (uint8_t *)0);
a0005fbc:	687b      	ldr	r3, [r7, #4]
a0005fbe:	2b00      	cmp	r3, #0
a0005fc0:	d100      	bne.n	a0005fc4 <I2C_write_read+0x20>
a0005fc2:	be00      	bkpt	0x0000
    HAL_ASSERT(read_size > 0u);
a0005fc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
a0005fc6:	2b00      	cmp	r3, #0
a0005fc8:	d100      	bne.n	a0005fcc <I2C_write_read+0x28>
a0005fca:	be00      	bkpt	0x0000
    HAL_ASSERT(read_buffer != (uint8_t *)0);
a0005fcc:	6a3b      	ldr	r3, [r7, #32]
a0005fce:	2b00      	cmp	r3, #0
a0005fd0:	d100      	bne.n	a0005fd4 <I2C_write_read+0x30>
a0005fd2:	be00      	bkpt	0x0000
    
    this_i2c->master_status = I2C_FAILED;
a0005fd4:	68fb      	ldr	r3, [r7, #12]
a0005fd6:	f04f 0202 	mov.w	r2, #2
a0005fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if((read_size > 0u) && (offset_size > 0u))
a0005fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
a0005fe0:	2b00      	cmp	r3, #0
a0005fe2:	d072      	beq.n	a00060ca <I2C_write_read+0x126>
a0005fe4:	887b      	ldrh	r3, [r7, #2]
a0005fe6:	2b00      	cmp	r3, #0
a0005fe8:	d06f      	beq.n	a00060ca <I2C_write_read+0x126>
    {
        psr_t saved_psr;
        volatile uint8_t stat_ctrl;

        saved_psr = HAL_disable_interrupts();
a0005fea:	f001 f875 	bl	a00070d8 <HAL_disable_interrupts>
a0005fee:	4603      	mov	r3, r0
a0005ff0:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
a0005ff2:	68fb      	ldr	r3, [r7, #12]
a0005ff4:	7b1b      	ldrb	r3, [r3, #12]
a0005ff6:	2b00      	cmp	r3, #0
a0005ff8:	d103      	bne.n	a0006002 <I2C_write_read+0x5e>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
a0005ffa:	68fb      	ldr	r3, [r7, #12]
a0005ffc:	f04f 0203 	mov.w	r2, #3
a0006000:	731a      	strb	r2, [r3, #12]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
a0006002:	68fb      	ldr	r3, [r7, #12]
a0006004:	f04f 0203 	mov.w	r2, #3
a0006008:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
a000600c:	7afb      	ldrb	r3, [r7, #11]
a000600e:	ea4f 0243 	mov.w	r2, r3, lsl #1
a0006012:	68fb      	ldr	r3, [r7, #12]
a0006014:	609a      	str	r2, [r3, #8]

        this_i2c->dir = WRITE_DIR;
a0006016:	68fb      	ldr	r3, [r7, #12]
a0006018:	f04f 0200 	mov.w	r2, #0
a000601c:	625a      	str	r2, [r3, #36]	; 0x24

        this_i2c->master_tx_buffer = addr_offset;
a000601e:	68fb      	ldr	r3, [r7, #12]
a0006020:	687a      	ldr	r2, [r7, #4]
a0006022:	619a      	str	r2, [r3, #24]
        this_i2c->master_tx_size = offset_size;
a0006024:	887a      	ldrh	r2, [r7, #2]
a0006026:	68fb      	ldr	r3, [r7, #12]
a0006028:	61da      	str	r2, [r3, #28]
        this_i2c->master_tx_idx = 0u;
a000602a:	68fb      	ldr	r3, [r7, #12]
a000602c:	f04f 0200 	mov.w	r2, #0
a0006030:	621a      	str	r2, [r3, #32]

        this_i2c->master_rx_buffer = read_buffer;
a0006032:	68fb      	ldr	r3, [r7, #12]
a0006034:	6a3a      	ldr	r2, [r7, #32]
a0006036:	629a      	str	r2, [r3, #40]	; 0x28
        this_i2c->master_rx_size = read_size;
a0006038:	8cba      	ldrh	r2, [r7, #36]	; 0x24
a000603a:	68fb      	ldr	r3, [r7, #12]
a000603c:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_rx_idx = 0u;
a000603e:	68fb      	ldr	r3, [r7, #12]
a0006040:	f04f 0200 	mov.w	r2, #0
a0006044:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Set I2C status in progress */
        this_i2c->master_status = I2C_IN_PROGRESS;
a0006046:	68fb      	ldr	r3, [r7, #12]
a0006048:	f04f 0201 	mov.w	r2, #1
a000604c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        this_i2c->options = options;
a0006050:	68fb      	ldr	r3, [r7, #12]
a0006052:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
a0006056:	751a      	strb	r2, [r3, #20]
        
        if(I2C_IN_PROGRESS == this_i2c->slave_status)
a0006058:	68fb      	ldr	r3, [r7, #12]
a000605a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
a000605e:	b2db      	uxtb	r3, r3
a0006060:	2b01      	cmp	r3, #1
a0006062:	d105      	bne.n	a0006070 <I2C_write_read+0xcc>
        {
            this_i2c->is_transaction_pending = 1u;
a0006064:	68fb      	ldr	r3, [r7, #12]
a0006066:	f04f 0201 	mov.w	r2, #1
a000606a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
a000606e:	e00a      	b.n	a0006086 <I2C_write_read+0xe2>
        }
        else
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
a0006070:	68fb      	ldr	r3, [r7, #12]
a0006072:	681b      	ldr	r3, [r3, #0]
a0006074:	4618      	mov	r0, r3
a0006076:	f04f 0105 	mov.w	r1, #5
a000607a:	f04f 0220 	mov.w	r2, #32
a000607e:	f04f 0301 	mov.w	r3, #1
a0006082:	f001 f864 	bl	a000714e <HW_set_8bit_reg_field>
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( I2C_HOLD_BUS == this_i2c->bus_status )
a0006086:	68fb      	ldr	r3, [r7, #12]
a0006088:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
a000608c:	2b01      	cmp	r3, #1
a000608e:	d10a      	bne.n	a00060a6 <I2C_write_read+0x102>
        {
            HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
a0006090:	68fb      	ldr	r3, [r7, #12]
a0006092:	681b      	ldr	r3, [r3, #0]
a0006094:	4618      	mov	r0, r3
a0006096:	f04f 0103 	mov.w	r1, #3
a000609a:	f04f 0208 	mov.w	r2, #8
a000609e:	f04f 0300 	mov.w	r3, #0
a00060a2:	f001 f854 	bl	a000714e <HW_set_8bit_reg_field>
        }

        stat_ctrl = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
a00060a6:	68fb      	ldr	r3, [r7, #12]
a00060a8:	681b      	ldr	r3, [r3, #0]
a00060aa:	f103 0304 	add.w	r3, r3, #4
a00060ae:	4618      	mov	r0, r3
a00060b0:	f001 f84b 	bl	a000714a <HW_get_8bit_reg>
a00060b4:	4603      	mov	r3, r0
a00060b6:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids lint warning. */
a00060b8:	7cfb      	ldrb	r3, [r7, #19]
a00060ba:	b2db      	uxtb	r3, r3
a00060bc:	74fb      	strb	r3, [r7, #19]
            
        /* Enable the interrupt. ( Re-enable) */
        I2C_enable_irq( this_i2c );
a00060be:	68f8      	ldr	r0, [r7, #12]
a00060c0:	f000 fdc0 	bl	a0006c44 <I2C_enable_irq>

        HAL_restore_interrupts( saved_psr );
a00060c4:	6978      	ldr	r0, [r7, #20]
a00060c6:	f001 f80b 	bl	a00070e0 <HAL_restore_interrupts>
    }
}
a00060ca:	f107 0718 	add.w	r7, r7, #24
a00060ce:	46bd      	mov	sp, r7
a00060d0:	bd80      	pop	{r7, pc}
a00060d2:	bf00      	nop

a00060d4 <I2C_wait_complete>:
i2c_status_t I2C_wait_complete
(
    i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
a00060d4:	b580      	push	{r7, lr}
a00060d6:	b084      	sub	sp, #16
a00060d8:	af00      	add	r7, sp, #0
a00060da:	6078      	str	r0, [r7, #4]
a00060dc:	6039      	str	r1, [r7, #0]
     * Because we have no idea of what CPU we are supposed to be running on
     * we need to guard this write to the timeout value to avoid ISR/user code
     * interaction issues. Checking the status below should be fine as only a
     * single byte should change in that.
     */
    saved_psr = HAL_disable_interrupts();
a00060de:	f000 fffb 	bl	a00070d8 <HAL_disable_interrupts>
a00060e2:	4603      	mov	r3, r0
a00060e4:	60fb      	str	r3, [r7, #12]
    this_i2c->master_timeout_ms = timeout_ms;
a00060e6:	687b      	ldr	r3, [r7, #4]
a00060e8:	683a      	ldr	r2, [r7, #0]
a00060ea:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_restore_interrupts( saved_psr );
a00060ec:	68f8      	ldr	r0, [r7, #12]
a00060ee:	f000 fff7 	bl	a00070e0 <HAL_restore_interrupts>

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
a00060f2:	687b      	ldr	r3, [r7, #4]
a00060f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
a00060f8:	72fb      	strb	r3, [r7, #11]
    } while(I2C_IN_PROGRESS == i2c_status);
a00060fa:	7afb      	ldrb	r3, [r7, #11]
a00060fc:	2b01      	cmp	r3, #1
a00060fe:	d0f8      	beq.n	a00060f2 <I2C_wait_complete+0x1e>
    return i2c_status;
a0006100:	7afb      	ldrb	r3, [r7, #11]
}
a0006102:	4618      	mov	r0, r3
a0006104:	f107 0710 	add.w	r7, r7, #16
a0006108:	46bd      	mov	sp, r7
a000610a:	bd80      	pop	{r7, pc}

a000610c <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    i2c_instance_t * this_i2c
)
{
a000610c:	b580      	push	{r7, lr}
a000610e:	b082      	sub	sp, #8
a0006110:	af00      	add	r7, sp, #0
a0006112:	6078      	str	r0, [r7, #4]
    /*
     * This function is only called from within the ISR and so does not need
     * guarding on the register access.
     */
    if( 0 != this_i2c->is_slave_enabled )
a0006114:	687b      	ldr	r3, [r7, #4]
a0006116:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
a000611a:	2b00      	cmp	r3, #0
a000611c:	d00a      	beq.n	a0006134 <enable_slave_if_required+0x28>
    {
        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
a000611e:	687b      	ldr	r3, [r7, #4]
a0006120:	681b      	ldr	r3, [r3, #0]
a0006122:	4618      	mov	r0, r3
a0006124:	f04f 0102 	mov.w	r1, #2
a0006128:	f04f 0204 	mov.w	r2, #4
a000612c:	f04f 0301 	mov.w	r3, #1
a0006130:	f001 f80d 	bl	a000714e <HW_set_8bit_reg_field>
    }
}
a0006134:	f107 0708 	add.w	r7, r7, #8
a0006138:	46bd      	mov	sp, r7
a000613a:	bd80      	pop	{r7, pc}

a000613c <I2C_isr>:
 */
void I2C_isr
(
    i2c_instance_t * this_i2c
)
{
a000613c:	b5b0      	push	{r4, r5, r7, lr}
a000613e:	b084      	sub	sp, #16
a0006140:	af00      	add	r7, sp, #0
a0006142:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
a0006144:	f04f 0301 	mov.w	r3, #1
a0006148:	73bb      	strb	r3, [r7, #14]

    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
a000614a:	687b      	ldr	r3, [r7, #4]
a000614c:	681b      	ldr	r3, [r3, #0]
a000614e:	f103 0304 	add.w	r3, r3, #4
a0006152:	4618      	mov	r0, r3
a0006154:	f000 fff9 	bl	a000714a <HW_get_8bit_reg>
a0006158:	4603      	mov	r3, r0
a000615a:	72fb      	strb	r3, [r7, #11]
    
    switch( status )
a000615c:	7afb      	ldrb	r3, [r7, #11]
a000615e:	b2db      	uxtb	r3, r3
a0006160:	f1a3 0308 	sub.w	r3, r3, #8
a0006164:	2bd8      	cmp	r3, #216	; 0xd8
a0006166:	f200 84e3 	bhi.w	a0006b30 <I2C_isr+0x9f4>
a000616a:	a201      	add	r2, pc, #4	; (adr r2, a0006170 <I2C_isr+0x34>)
a000616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
a0006170:	a00064d5 	.word	0xa00064d5
a0006174:	a0006b31 	.word	0xa0006b31
a0006178:	a0006b31 	.word	0xa0006b31
a000617c:	a0006b31 	.word	0xa0006b31
a0006180:	a0006b31 	.word	0xa0006b31
a0006184:	a0006b31 	.word	0xa0006b31
a0006188:	a0006b31 	.word	0xa0006b31
a000618c:	a0006b31 	.word	0xa0006b31
a0006190:	a00064d5 	.word	0xa00064d5
a0006194:	a0006b31 	.word	0xa0006b31
a0006198:	a0006b31 	.word	0xa0006b31
a000619c:	a0006b31 	.word	0xa0006b31
a00061a0:	a0006b31 	.word	0xa0006b31
a00061a4:	a0006b31 	.word	0xa0006b31
a00061a8:	a0006b31 	.word	0xa0006b31
a00061ac:	a0006b31 	.word	0xa0006b31
a00061b0:	a00065ab 	.word	0xa00065ab
a00061b4:	a0006b31 	.word	0xa0006b31
a00061b8:	a0006b31 	.word	0xa0006b31
a00061bc:	a0006b31 	.word	0xa0006b31
a00061c0:	a0006b31 	.word	0xa0006b31
a00061c4:	a0006b31 	.word	0xa0006b31
a00061c8:	a0006b31 	.word	0xa0006b31
a00061cc:	a0006b31 	.word	0xa0006b31
a00061d0:	a000657b 	.word	0xa000657b
a00061d4:	a0006b31 	.word	0xa0006b31
a00061d8:	a0006b31 	.word	0xa0006b31
a00061dc:	a0006b31 	.word	0xa0006b31
a00061e0:	a0006b31 	.word	0xa0006b31
a00061e4:	a0006b31 	.word	0xa0006b31
a00061e8:	a0006b31 	.word	0xa0006b31
a00061ec:	a0006b31 	.word	0xa0006b31
a00061f0:	a00065ab 	.word	0xa00065ab
a00061f4:	a0006b31 	.word	0xa0006b31
a00061f8:	a0006b31 	.word	0xa0006b31
a00061fc:	a0006b31 	.word	0xa0006b31
a0006200:	a0006b31 	.word	0xa0006b31
a0006204:	a0006b31 	.word	0xa0006b31
a0006208:	a0006b31 	.word	0xa0006b31
a000620c:	a0006b31 	.word	0xa0006b31
a0006210:	a000665b 	.word	0xa000665b
a0006214:	a0006b31 	.word	0xa0006b31
a0006218:	a0006b31 	.word	0xa0006b31
a000621c:	a0006b31 	.word	0xa0006b31
a0006220:	a0006b31 	.word	0xa0006b31
a0006224:	a0006b31 	.word	0xa0006b31
a0006228:	a0006b31 	.word	0xa0006b31
a000622c:	a0006b31 	.word	0xa0006b31
a0006230:	a0006563 	.word	0xa0006563
a0006234:	a0006b31 	.word	0xa0006b31
a0006238:	a0006b31 	.word	0xa0006b31
a000623c:	a0006b31 	.word	0xa0006b31
a0006240:	a0006b31 	.word	0xa0006b31
a0006244:	a0006b31 	.word	0xa0006b31
a0006248:	a0006b31 	.word	0xa0006b31
a000624c:	a0006b31 	.word	0xa0006b31
a0006250:	a000668b 	.word	0xa000668b
a0006254:	a0006b31 	.word	0xa0006b31
a0006258:	a0006b31 	.word	0xa0006b31
a000625c:	a0006b31 	.word	0xa0006b31
a0006260:	a0006b31 	.word	0xa0006b31
a0006264:	a0006b31 	.word	0xa0006b31
a0006268:	a0006b31 	.word	0xa0006b31
a000626c:	a0006b31 	.word	0xa0006b31
a0006270:	a000670b 	.word	0xa000670b
a0006274:	a0006b31 	.word	0xa0006b31
a0006278:	a0006b31 	.word	0xa0006b31
a000627c:	a0006b31 	.word	0xa0006b31
a0006280:	a0006b31 	.word	0xa0006b31
a0006284:	a0006b31 	.word	0xa0006b31
a0006288:	a0006b31 	.word	0xa0006b31
a000628c:	a0006b31 	.word	0xa0006b31
a0006290:	a000673b 	.word	0xa000673b
a0006294:	a0006b31 	.word	0xa0006b31
a0006298:	a0006b31 	.word	0xa0006b31
a000629c:	a0006b31 	.word	0xa0006b31
a00062a0:	a0006b31 	.word	0xa0006b31
a00062a4:	a0006b31 	.word	0xa0006b31
a00062a8:	a0006b31 	.word	0xa0006b31
a00062ac:	a0006b31 	.word	0xa0006b31
a00062b0:	a000678b 	.word	0xa000678b
a00062b4:	a0006b31 	.word	0xa0006b31
a00062b8:	a0006b31 	.word	0xa0006b31
a00062bc:	a0006b31 	.word	0xa0006b31
a00062c0:	a0006b31 	.word	0xa0006b31
a00062c4:	a0006b31 	.word	0xa0006b31
a00062c8:	a0006b31 	.word	0xa0006b31
a00062cc:	a0006b31 	.word	0xa0006b31
a00062d0:	a0006855 	.word	0xa0006855
a00062d4:	a0006b31 	.word	0xa0006b31
a00062d8:	a0006b31 	.word	0xa0006b31
a00062dc:	a0006b31 	.word	0xa0006b31
a00062e0:	a0006b31 	.word	0xa0006b31
a00062e4:	a0006b31 	.word	0xa0006b31
a00062e8:	a0006b31 	.word	0xa0006b31
a00062ec:	a0006b31 	.word	0xa0006b31
a00062f0:	a000684b 	.word	0xa000684b
a00062f4:	a0006b31 	.word	0xa0006b31
a00062f8:	a0006b31 	.word	0xa0006b31
a00062fc:	a0006b31 	.word	0xa0006b31
a0006300:	a0006b31 	.word	0xa0006b31
a0006304:	a0006b31 	.word	0xa0006b31
a0006308:	a0006b31 	.word	0xa0006b31
a000630c:	a0006b31 	.word	0xa0006b31
a0006310:	a0006855 	.word	0xa0006855
a0006314:	a0006b31 	.word	0xa0006b31
a0006318:	a0006b31 	.word	0xa0006b31
a000631c:	a0006b31 	.word	0xa0006b31
a0006320:	a0006b31 	.word	0xa0006b31
a0006324:	a0006b31 	.word	0xa0006b31
a0006328:	a0006b31 	.word	0xa0006b31
a000632c:	a0006b31 	.word	0xa0006b31
a0006330:	a000684b 	.word	0xa000684b
a0006334:	a0006b31 	.word	0xa0006b31
a0006338:	a0006b31 	.word	0xa0006b31
a000633c:	a0006b31 	.word	0xa0006b31
a0006340:	a0006b31 	.word	0xa0006b31
a0006344:	a0006b31 	.word	0xa0006b31
a0006348:	a0006b31 	.word	0xa0006b31
a000634c:	a0006b31 	.word	0xa0006b31
a0006350:	a00068b1 	.word	0xa00068b1
a0006354:	a0006b31 	.word	0xa0006b31
a0006358:	a0006b31 	.word	0xa0006b31
a000635c:	a0006b31 	.word	0xa0006b31
a0006360:	a0006b31 	.word	0xa0006b31
a0006364:	a0006b31 	.word	0xa0006b31
a0006368:	a0006b31 	.word	0xa0006b31
a000636c:	a0006b31 	.word	0xa0006b31
a0006370:	a00067ff 	.word	0xa00067ff
a0006374:	a0006b31 	.word	0xa0006b31
a0006378:	a0006b31 	.word	0xa0006b31
a000637c:	a0006b31 	.word	0xa0006b31
a0006380:	a0006b31 	.word	0xa0006b31
a0006384:	a0006b31 	.word	0xa0006b31
a0006388:	a0006b31 	.word	0xa0006b31
a000638c:	a0006b31 	.word	0xa0006b31
a0006390:	a00068b1 	.word	0xa00068b1
a0006394:	a0006b31 	.word	0xa0006b31
a0006398:	a0006b31 	.word	0xa0006b31
a000639c:	a0006b31 	.word	0xa0006b31
a00063a0:	a0006b31 	.word	0xa0006b31
a00063a4:	a0006b31 	.word	0xa0006b31
a00063a8:	a0006b31 	.word	0xa0006b31
a00063ac:	a0006b31 	.word	0xa0006b31
a00063b0:	a00067ff 	.word	0xa00067ff
a00063b4:	a0006b31 	.word	0xa0006b31
a00063b8:	a0006b31 	.word	0xa0006b31
a00063bc:	a0006b31 	.word	0xa0006b31
a00063c0:	a0006b31 	.word	0xa0006b31
a00063c4:	a0006b31 	.word	0xa0006b31
a00063c8:	a0006b31 	.word	0xa0006b31
a00063cc:	a0006b31 	.word	0xa0006b31
a00063d0:	a0006923 	.word	0xa0006923
a00063d4:	a0006b31 	.word	0xa0006b31
a00063d8:	a0006b31 	.word	0xa0006b31
a00063dc:	a0006b31 	.word	0xa0006b31
a00063e0:	a0006b31 	.word	0xa0006b31
a00063e4:	a0006b31 	.word	0xa0006b31
a00063e8:	a0006b31 	.word	0xa0006b31
a00063ec:	a0006b31 	.word	0xa0006b31
a00063f0:	a0006a15 	.word	0xa0006a15
a00063f4:	a0006b31 	.word	0xa0006b31
a00063f8:	a0006b31 	.word	0xa0006b31
a00063fc:	a0006b31 	.word	0xa0006b31
a0006400:	a0006b31 	.word	0xa0006b31
a0006404:	a0006b31 	.word	0xa0006b31
a0006408:	a0006b31 	.word	0xa0006b31
a000640c:	a0006b31 	.word	0xa0006b31
a0006410:	a0006a15 	.word	0xa0006a15
a0006414:	a0006b31 	.word	0xa0006b31
a0006418:	a0006b31 	.word	0xa0006b31
a000641c:	a0006b31 	.word	0xa0006b31
a0006420:	a0006b31 	.word	0xa0006b31
a0006424:	a0006b31 	.word	0xa0006b31
a0006428:	a0006b31 	.word	0xa0006b31
a000642c:	a0006b31 	.word	0xa0006b31
a0006430:	a0006a15 	.word	0xa0006a15
a0006434:	a0006b31 	.word	0xa0006b31
a0006438:	a0006b31 	.word	0xa0006b31
a000643c:	a0006b31 	.word	0xa0006b31
a0006440:	a0006b31 	.word	0xa0006b31
a0006444:	a0006b31 	.word	0xa0006b31
a0006448:	a0006b31 	.word	0xa0006b31
a000644c:	a0006b31 	.word	0xa0006b31
a0006450:	a0006adf 	.word	0xa0006adf
a0006454:	a0006b31 	.word	0xa0006b31
a0006458:	a0006b31 	.word	0xa0006b31
a000645c:	a0006b31 	.word	0xa0006b31
a0006460:	a0006b31 	.word	0xa0006b31
a0006464:	a0006b31 	.word	0xa0006b31
a0006468:	a0006b31 	.word	0xa0006b31
a000646c:	a0006b31 	.word	0xa0006b31
a0006470:	a0006adf 	.word	0xa0006adf
a0006474:	a0006b31 	.word	0xa0006b31
a0006478:	a0006b31 	.word	0xa0006b31
a000647c:	a0006b31 	.word	0xa0006b31
a0006480:	a0006b31 	.word	0xa0006b31
a0006484:	a0006b31 	.word	0xa0006b31
a0006488:	a0006b31 	.word	0xa0006b31
a000648c:	a0006b31 	.word	0xa0006b31
a0006490:	a0006b31 	.word	0xa0006b31
a0006494:	a0006b31 	.word	0xa0006b31
a0006498:	a0006b31 	.word	0xa0006b31
a000649c:	a0006b31 	.word	0xa0006b31
a00064a0:	a0006b31 	.word	0xa0006b31
a00064a4:	a0006b31 	.word	0xa0006b31
a00064a8:	a0006b31 	.word	0xa0006b31
a00064ac:	a0006b31 	.word	0xa0006b31
a00064b0:	a00069e7 	.word	0xa00069e7
a00064b4:	a0006b31 	.word	0xa0006b31
a00064b8:	a0006b31 	.word	0xa0006b31
a00064bc:	a0006b31 	.word	0xa0006b31
a00064c0:	a0006b31 	.word	0xa0006b31
a00064c4:	a0006b31 	.word	0xa0006b31
a00064c8:	a0006b31 	.word	0xa0006b31
a00064cc:	a0006b31 	.word	0xa0006b31
a00064d0:	a0006b85 	.word	0xa0006b85
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            HAL_set_8bit_reg_field( this_i2c->base_address, STA, 0x00u);
a00064d4:	687b      	ldr	r3, [r7, #4]
a00064d6:	681b      	ldr	r3, [r3, #0]
a00064d8:	4618      	mov	r0, r3
a00064da:	f04f 0105 	mov.w	r1, #5
a00064de:	f04f 0220 	mov.w	r2, #32
a00064e2:	f04f 0300 	mov.w	r3, #0
a00064e6:	f000 fe32 	bl	a000714e <HW_set_8bit_reg_field>
            HAL_set_8bit_reg( this_i2c->base_address, DATA, this_i2c->target_addr); /* write call address */
a00064ea:	687b      	ldr	r3, [r7, #4]
a00064ec:	681b      	ldr	r3, [r3, #0]
a00064ee:	f103 0208 	add.w	r2, r3, #8
a00064f2:	687b      	ldr	r3, [r7, #4]
a00064f4:	689b      	ldr	r3, [r3, #8]
a00064f6:	4610      	mov	r0, r2
a00064f8:	4619      	mov	r1, r3
a00064fa:	f000 fe24 	bl	a0007146 <HW_set_8bit_reg>
            HAL_set_8bit_reg_field( this_i2c->base_address, DIR, this_i2c->dir); /* set direction bit */
a00064fe:	687b      	ldr	r3, [r7, #4]
a0006500:	681b      	ldr	r3, [r3, #0]
a0006502:	f103 0208 	add.w	r2, r3, #8
a0006506:	687b      	ldr	r3, [r7, #4]
a0006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a000650a:	4610      	mov	r0, r2
a000650c:	f04f 0100 	mov.w	r1, #0
a0006510:	f04f 0201 	mov.w	r2, #1
a0006514:	f000 fe1b 	bl	a000714e <HW_set_8bit_reg_field>
            if(this_i2c->dir == WRITE_DIR)
a0006518:	687b      	ldr	r3, [r7, #4]
a000651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
a000651c:	2b00      	cmp	r3, #0
a000651e:	d104      	bne.n	a000652a <I2C_isr+0x3ee>
            {
                 this_i2c->master_tx_idx = 0u;
a0006520:	687b      	ldr	r3, [r7, #4]
a0006522:	f04f 0200 	mov.w	r2, #0
a0006526:	621a      	str	r2, [r3, #32]
a0006528:	e003      	b.n	a0006532 <I2C_isr+0x3f6>
            }
            else
            {
                 this_i2c->master_rx_idx = 0u;
a000652a:	687b      	ldr	r3, [r7, #4]
a000652c:	f04f 0200 	mov.w	r2, #0
a0006530:	631a      	str	r2, [r3, #48]	; 0x30
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
a0006532:	687b      	ldr	r3, [r7, #4]
a0006534:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
a0006538:	2b00      	cmp	r3, #0
a000653a:	d004      	beq.n	a0006546 <I2C_isr+0x40a>
            {
                this_i2c->is_transaction_pending = 0u;
a000653c:	687b      	ldr	r3, [r7, #4]
a000653e:	f04f 0200 	mov.w	r2, #0
a0006542:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
a0006546:	687b      	ldr	r3, [r7, #4]
a0006548:	7b1a      	ldrb	r2, [r3, #12]
a000654a:	687b      	ldr	r3, [r7, #4]
a000654c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
a0006550:	429a      	cmp	r2, r3
a0006552:	f000 8319 	beq.w	a0006b88 <I2C_isr+0xa4c>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
a0006556:	687b      	ldr	r3, [r7, #4]
a0006558:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
a000655c:	687b      	ldr	r3, [r7, #4]
a000655e:	731a      	strb	r2, [r3, #12]
            }
            break;
a0006560:	e31b      	b.n	a0006b9a <I2C_isr+0xa5e>
            
        case ST_LOST_ARB:
              /* Set start bit.  Let's keep trying!  Don't give up! */
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
a0006562:	687b      	ldr	r3, [r7, #4]
a0006564:	681b      	ldr	r3, [r3, #0]
a0006566:	4618      	mov	r0, r3
a0006568:	f04f 0105 	mov.w	r1, #5
a000656c:	f04f 0220 	mov.w	r2, #32
a0006570:	f04f 0301 	mov.w	r3, #1
a0006574:	f000 fdeb 	bl	a000714e <HW_set_8bit_reg_field>
              break;
a0006578:	e30f      	b.n	a0006b9a <I2C_isr+0xa5e>
              break;

        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
a000657a:	687b      	ldr	r3, [r7, #4]
a000657c:	681b      	ldr	r3, [r3, #0]
a000657e:	4618      	mov	r0, r3
a0006580:	f04f 0104 	mov.w	r1, #4
a0006584:	f04f 0210 	mov.w	r2, #16
a0006588:	f04f 0301 	mov.w	r3, #1
a000658c:	f000 fddf 	bl	a000714e <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
a0006590:	687b      	ldr	r3, [r7, #4]
a0006592:	f04f 0202 	mov.w	r2, #2
a0006596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            this_i2c->transaction = NO_TRANSACTION;
a000659a:	687b      	ldr	r3, [r7, #4]
a000659c:	f04f 0200 	mov.w	r2, #0
a00065a0:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
a00065a2:	6878      	ldr	r0, [r7, #4]
a00065a4:	f7ff fdb2 	bl	a000610c <enable_slave_if_required>
            break;
a00065a8:	e2f7      	b.n	a0006b9a <I2C_isr+0xa5e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
a00065aa:	687b      	ldr	r3, [r7, #4]
a00065ac:	6a1a      	ldr	r2, [r3, #32]
a00065ae:	687b      	ldr	r3, [r7, #4]
a00065b0:	69db      	ldr	r3, [r3, #28]
a00065b2:	429a      	cmp	r2, r3
a00065b4:	d212      	bcs.n	a00065dc <I2C_isr+0x4a0>
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
a00065b6:	687b      	ldr	r3, [r7, #4]
a00065b8:	681b      	ldr	r3, [r3, #0]
a00065ba:	f103 0108 	add.w	r1, r3, #8
a00065be:	687b      	ldr	r3, [r7, #4]
a00065c0:	699a      	ldr	r2, [r3, #24]
a00065c2:	687b      	ldr	r3, [r7, #4]
a00065c4:	6a1b      	ldr	r3, [r3, #32]
a00065c6:	441a      	add	r2, r3
a00065c8:	7812      	ldrb	r2, [r2, #0]
a00065ca:	f103 0001 	add.w	r0, r3, #1
a00065ce:	687b      	ldr	r3, [r7, #4]
a00065d0:	6218      	str	r0, [r3, #32]
a00065d2:	4608      	mov	r0, r1
a00065d4:	4611      	mov	r1, r2
a00065d6:	f000 fdb6 	bl	a0007146 <HW_set_8bit_reg>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
a00065da:	e2de      	b.n	a0006b9a <I2C_isr+0xa5e>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->master_tx_buffer[this_i2c->master_tx_idx++]);
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
a00065dc:	687b      	ldr	r3, [r7, #4]
a00065de:	7b1b      	ldrb	r3, [r3, #12]
a00065e0:	2b03      	cmp	r3, #3
a00065e2:	d10f      	bne.n	a0006604 <I2C_isr+0x4c8>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
a00065e4:	687b      	ldr	r3, [r7, #4]
a00065e6:	f04f 0201 	mov.w	r2, #1
a00065ea:	625a      	str	r2, [r3, #36]	; 0x24
                 HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
a00065ec:	687b      	ldr	r3, [r7, #4]
a00065ee:	681b      	ldr	r3, [r3, #0]
a00065f0:	4618      	mov	r0, r3
a00065f2:	f04f 0105 	mov.w	r1, #5
a00065f6:	f04f 0220 	mov.w	r2, #32
a00065fa:	f04f 0301 	mov.w	r3, #1
a00065fe:	f000 fda6 	bl	a000714e <HW_set_8bit_reg_field>
                    I2C_disable_irq( this_i2c );
                    clear_irq = 0u;
                }
                this_i2c->master_status = I2C_SUCCESS;
            }
            break;
a0006602:	e2ca      	b.n	a0006b9a <I2C_isr+0xa5e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
a0006604:	687b      	ldr	r3, [r7, #4]
a0006606:	f04f 0200 	mov.w	r2, #0
a000660a:	731a      	strb	r2, [r3, #12]
                hold_bus = this_i2c->options & I2C_HOLD_BUS;
a000660c:	687b      	ldr	r3, [r7, #4]
a000660e:	7d1b      	ldrb	r3, [r3, #20]
a0006610:	f003 0301 	and.w	r3, r3, #1
a0006614:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
a0006616:	687b      	ldr	r3, [r7, #4]
a0006618:	7b7a      	ldrb	r2, [r7, #13]
a000661a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                if ( hold_bus == 0u )
a000661e:	7b7b      	ldrb	r3, [r7, #13]
a0006620:	2b00      	cmp	r3, #0
a0006622:	d10e      	bne.n	a0006642 <I2C_isr+0x506>
                { 
                    HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
a0006624:	687b      	ldr	r3, [r7, #4]
a0006626:	681b      	ldr	r3, [r3, #0]
a0006628:	4618      	mov	r0, r3
a000662a:	f04f 0104 	mov.w	r1, #4
a000662e:	f04f 0210 	mov.w	r2, #16
a0006632:	f04f 0301 	mov.w	r3, #1
a0006636:	f000 fd8a 	bl	a000714e <HW_set_8bit_reg_field>
                    enable_slave_if_required(this_i2c);
a000663a:	6878      	ldr	r0, [r7, #4]
a000663c:	f7ff fd66 	bl	a000610c <enable_slave_if_required>
a0006640:	e005      	b.n	a000664e <I2C_isr+0x512>
                }
                else
                {
                    I2C_disable_irq( this_i2c );
a0006642:	6878      	ldr	r0, [r7, #4]
a0006644:	f000 fb48 	bl	a0006cd8 <I2C_disable_irq>
                    clear_irq = 0u;
a0006648:	f04f 0300 	mov.w	r3, #0
a000664c:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = I2C_SUCCESS;
a000664e:	687b      	ldr	r3, [r7, #4]
a0006650:	f04f 0200 	mov.w	r2, #0
a0006654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }
            break;
a0006658:	e29f      	b.n	a0006b9a <I2C_isr+0xa5e>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);/* xmt stop condition */
a000665a:	687b      	ldr	r3, [r7, #4]
a000665c:	681b      	ldr	r3, [r3, #0]
a000665e:	4618      	mov	r0, r3
a0006660:	f04f 0104 	mov.w	r1, #4
a0006664:	f04f 0210 	mov.w	r2, #16
a0006668:	f04f 0301 	mov.w	r3, #1
a000666c:	f000 fd6f 	bl	a000714e <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
a0006670:	687b      	ldr	r3, [r7, #4]
a0006672:	f04f 0202 	mov.w	r2, #2
a0006676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
a000667a:	687b      	ldr	r3, [r7, #4]
a000667c:	f04f 0200 	mov.w	r2, #0
a0006680:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
a0006682:	6878      	ldr	r0, [r7, #4]
a0006684:	f7ff fd42 	bl	a000610c <enable_slave_if_required>
            break;
a0006688:	e287      	b.n	a0006b9a <I2C_isr+0xa5e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
a000668a:	687b      	ldr	r3, [r7, #4]
a000668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a000668e:	2b01      	cmp	r3, #1
a0006690:	d90b      	bls.n	a00066aa <I2C_isr+0x56e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
a0006692:	687b      	ldr	r3, [r7, #4]
a0006694:	681b      	ldr	r3, [r3, #0]
a0006696:	4618      	mov	r0, r3
a0006698:	f04f 0102 	mov.w	r1, #2
a000669c:	f04f 0204 	mov.w	r2, #4
a00066a0:	f04f 0301 	mov.w	r3, #1
a00066a4:	f000 fd53 	bl	a000714e <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
a00066a8:	e277      	b.n	a0006b9a <I2C_isr+0xa5e>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
            }
            else if(1u == this_i2c->master_rx_size)
a00066aa:	687b      	ldr	r3, [r7, #4]
a00066ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a00066ae:	2b01      	cmp	r3, #1
a00066b0:	d10b      	bne.n	a00066ca <I2C_isr+0x58e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
a00066b2:	687b      	ldr	r3, [r7, #4]
a00066b4:	681b      	ldr	r3, [r3, #0]
a00066b6:	4618      	mov	r0, r3
a00066b8:	f04f 0102 	mov.w	r1, #2
a00066bc:	f04f 0204 	mov.w	r2, #4
a00066c0:	f04f 0300 	mov.w	r3, #0
a00066c4:	f000 fd43 	bl	a000714e <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
                this_i2c->master_status = I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
a00066c8:	e267      	b.n	a0006b9a <I2C_isr+0xa5e>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
a00066ca:	687b      	ldr	r3, [r7, #4]
a00066cc:	681b      	ldr	r3, [r3, #0]
a00066ce:	4618      	mov	r0, r3
a00066d0:	f04f 0102 	mov.w	r1, #2
a00066d4:	f04f 0204 	mov.w	r2, #4
a00066d8:	f04f 0301 	mov.w	r3, #1
a00066dc:	f000 fd37 	bl	a000714e <HW_set_8bit_reg_field>
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
a00066e0:	687b      	ldr	r3, [r7, #4]
a00066e2:	681b      	ldr	r3, [r3, #0]
a00066e4:	4618      	mov	r0, r3
a00066e6:	f04f 0104 	mov.w	r1, #4
a00066ea:	f04f 0210 	mov.w	r2, #16
a00066ee:	f04f 0301 	mov.w	r3, #1
a00066f2:	f000 fd2c 	bl	a000714e <HW_set_8bit_reg_field>
                this_i2c->master_status = I2C_SUCCESS;
a00066f6:	687b      	ldr	r3, [r7, #4]
a00066f8:	f04f 0200 	mov.w	r2, #0
a00066fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                this_i2c->transaction = NO_TRANSACTION;
a0006700:	687b      	ldr	r3, [r7, #4]
a0006702:	f04f 0200 	mov.w	r2, #0
a0006706:	731a      	strb	r2, [r3, #12]
            }
            break;
a0006708:	e247      	b.n	a0006b9a <I2C_isr+0xa5e>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);
a000670a:	687b      	ldr	r3, [r7, #4]
a000670c:	681b      	ldr	r3, [r3, #0]
a000670e:	4618      	mov	r0, r3
a0006710:	f04f 0104 	mov.w	r1, #4
a0006714:	f04f 0210 	mov.w	r2, #16
a0006718:	f04f 0301 	mov.w	r3, #1
a000671c:	f000 fd17 	bl	a000714e <HW_set_8bit_reg_field>
            this_i2c->master_status = I2C_FAILED;
a0006720:	687b      	ldr	r3, [r7, #4]
a0006722:	f04f 0202 	mov.w	r2, #2
a0006726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
a000672a:	687b      	ldr	r3, [r7, #4]
a000672c:	f04f 0200 	mov.w	r2, #0
a0006730:	731a      	strb	r2, [r3, #12]
            enable_slave_if_required(this_i2c);
a0006732:	6878      	ldr	r0, [r7, #4]
a0006734:	f7ff fcea 	bl	a000610c <enable_slave_if_required>
            break;
a0006738:	e22f      	b.n	a0006b9a <I2C_isr+0xa5e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
a000673a:	687b      	ldr	r3, [r7, #4]
a000673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
a000673e:	687a      	ldr	r2, [r7, #4]
a0006740:	6b14      	ldr	r4, [r2, #48]	; 0x30
a0006742:	eb03 0504 	add.w	r5, r3, r4
a0006746:	687b      	ldr	r3, [r7, #4]
a0006748:	681b      	ldr	r3, [r3, #0]
a000674a:	f103 0308 	add.w	r3, r3, #8
a000674e:	4618      	mov	r0, r3
a0006750:	f000 fcfb 	bl	a000714a <HW_get_8bit_reg>
a0006754:	4603      	mov	r3, r0
a0006756:	702b      	strb	r3, [r5, #0]
a0006758:	f104 0201 	add.w	r2, r4, #1
a000675c:	687b      	ldr	r3, [r7, #4]
a000675e:	631a      	str	r2, [r3, #48]	; 0x30
            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
a0006760:	687b      	ldr	r3, [r7, #4]
a0006762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
a0006764:	687b      	ldr	r3, [r7, #4]
a0006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
a0006768:	f103 33ff 	add.w	r3, r3, #4294967295
a000676c:	429a      	cmp	r2, r3
a000676e:	f0c0 820d 	bcc.w	a0006b8c <I2C_isr+0xa50>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
a0006772:	687b      	ldr	r3, [r7, #4]
a0006774:	681b      	ldr	r3, [r3, #0]
a0006776:	4618      	mov	r0, r3
a0006778:	f04f 0102 	mov.w	r1, #2
a000677c:	f04f 0204 	mov.w	r2, #4
a0006780:	f04f 0300 	mov.w	r3, #0
a0006784:	f000 fce3 	bl	a000714e <HW_set_8bit_reg_field>
            }
            break;
a0006788:	e207      	b.n	a0006b9a <I2C_isr+0xa5e>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = HAL_get_8bit_reg(this_i2c->base_address, DATA);
a000678a:	687b      	ldr	r3, [r7, #4]
a000678c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
a000678e:	687b      	ldr	r3, [r7, #4]
a0006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
a0006792:	eb02 0403 	add.w	r4, r2, r3
a0006796:	687b      	ldr	r3, [r7, #4]
a0006798:	681b      	ldr	r3, [r3, #0]
a000679a:	f103 0308 	add.w	r3, r3, #8
a000679e:	4618      	mov	r0, r3
a00067a0:	f000 fcd3 	bl	a000714a <HW_get_8bit_reg>
a00067a4:	4603      	mov	r3, r0
a00067a6:	7023      	strb	r3, [r4, #0]
          
            hold_bus = this_i2c->options & I2C_HOLD_BUS; 
a00067a8:	687b      	ldr	r3, [r7, #4]
a00067aa:	7d1b      	ldrb	r3, [r3, #20]
a00067ac:	f003 0301 	and.w	r3, r3, #1
a00067b0:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
a00067b2:	687b      	ldr	r3, [r7, #4]
a00067b4:	7b7a      	ldrb	r2, [r7, #13]
a00067b6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            if ( hold_bus == 0u )
a00067ba:	7b7b      	ldrb	r3, [r7, #13]
a00067bc:	2b00      	cmp	r3, #0
a00067be:	d10e      	bne.n	a00067de <I2C_isr+0x6a2>
            { 
                HAL_set_8bit_reg_field(this_i2c->base_address, STO, 0x01u);  /*xmt stop condition */
a00067c0:	687b      	ldr	r3, [r7, #4]
a00067c2:	681b      	ldr	r3, [r3, #0]
a00067c4:	4618      	mov	r0, r3
a00067c6:	f04f 0104 	mov.w	r1, #4
a00067ca:	f04f 0210 	mov.w	r2, #16
a00067ce:	f04f 0301 	mov.w	r3, #1
a00067d2:	f000 fcbc 	bl	a000714e <HW_set_8bit_reg_field>

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
a00067d6:	6878      	ldr	r0, [r7, #4]
a00067d8:	f7ff fc98 	bl	a000610c <enable_slave_if_required>
a00067dc:	e005      	b.n	a00067ea <I2C_isr+0x6ae>
            }
            else
            {
                I2C_disable_irq( this_i2c );
a00067de:	6878      	ldr	r0, [r7, #4]
a00067e0:	f000 fa7a 	bl	a0006cd8 <I2C_disable_irq>
                clear_irq = 0u;
a00067e4:	f04f 0300 	mov.w	r3, #0
a00067e8:	73bb      	strb	r3, [r7, #14]
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
a00067ea:	687b      	ldr	r3, [r7, #4]
a00067ec:	f04f 0200 	mov.w	r2, #0
a00067f0:	731a      	strb	r2, [r3, #12]
            this_i2c->master_status = I2C_SUCCESS;
a00067f2:	687b      	ldr	r3, [r7, #4]
a00067f4:	f04f 0200 	mov.w	r2, #0
a00067f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            break;
a00067fc:	e1cd      	b.n	a0006b9a <I2C_isr+0xa5e>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u);
a00067fe:	687b      	ldr	r3, [r7, #4]
a0006800:	681b      	ldr	r3, [r3, #0]
a0006802:	4618      	mov	r0, r3
a0006804:	f04f 0102 	mov.w	r1, #2
a0006808:	f04f 0204 	mov.w	r2, #4
a000680c:	f04f 0301 	mov.w	r3, #1
a0006810:	f000 fc9d 	bl	a000714e <HW_set_8bit_reg_field>

            this_i2c->transaction = NO_TRANSACTION;
a0006814:	687b      	ldr	r3, [r7, #4]
a0006816:	f04f 0200 	mov.w	r2, #0
a000681a:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_status = I2C_SUCCESS;
a000681c:	687b      	ldr	r3, [r7, #4]
a000681e:	f04f 0200 	mov.w	r2, #0
a0006822:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
a0006826:	687b      	ldr	r3, [r7, #4]
a0006828:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
a000682c:	2b00      	cmp	r3, #0
a000682e:	f000 81af 	beq.w	a0006b90 <I2C_isr+0xa54>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
a0006832:	687b      	ldr	r3, [r7, #4]
a0006834:	681b      	ldr	r3, [r3, #0]
a0006836:	4618      	mov	r0, r3
a0006838:	f04f 0105 	mov.w	r1, #5
a000683c:	f04f 0220 	mov.w	r2, #32
a0006840:	f04f 0301 	mov.w	r3, #1
a0006844:	f000 fc83 	bl	a000714e <HW_set_8bit_reg_field>
            }
            break;
a0006848:	e1a7      	b.n	a0006b9a <I2C_isr+0xa5e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
a000684a:	687b      	ldr	r3, [r7, #4]
a000684c:	f04f 0201 	mov.w	r2, #1
a0006850:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */
            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
a0006854:	687b      	ldr	r3, [r7, #4]
a0006856:	f04f 0204 	mov.w	r2, #4
a000685a:	731a      	strb	r2, [r3, #12]
            this_i2c->slave_rx_idx = 0u;
a000685c:	687b      	ldr	r3, [r7, #4]
a000685e:	f04f 0200 	mov.w	r2, #0
a0006862:	651a      	str	r2, [r3, #80]	; 0x50
            this_i2c->random_read_addr = 0u;
a0006864:	687b      	ldr	r3, [r7, #4]
a0006866:	f04f 0200 	mov.w	r2, #0
a000686a:	611a      	str	r2, [r3, #16]
            /*
             * If Start Bit is set clear it, but store that information since it is because of
             * pending transaction
             */
            if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
a000686c:	687b      	ldr	r3, [r7, #4]
a000686e:	681b      	ldr	r3, [r3, #0]
a0006870:	4618      	mov	r0, r3
a0006872:	f04f 0105 	mov.w	r1, #5
a0006876:	f04f 0220 	mov.w	r2, #32
a000687a:	f000 fc76 	bl	a000716a <HW_get_8bit_reg_field>
a000687e:	4603      	mov	r3, r0
a0006880:	2b00      	cmp	r3, #0
a0006882:	d00f      	beq.n	a00068a4 <I2C_isr+0x768>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
a0006884:	687b      	ldr	r3, [r7, #4]
a0006886:	681b      	ldr	r3, [r3, #0]
a0006888:	4618      	mov	r0, r3
a000688a:	f04f 0105 	mov.w	r1, #5
a000688e:	f04f 0220 	mov.w	r2, #32
a0006892:	f04f 0300 	mov.w	r3, #0
a0006896:	f000 fc5a 	bl	a000714e <HW_set_8bit_reg_field>
                this_i2c->is_transaction_pending = 1u;
a000689a:	687b      	ldr	r3, [r7, #4]
a000689c:	f04f 0201 	mov.w	r2, #1
a00068a0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
            }
            this_i2c->slave_status = I2C_IN_PROGRESS;
a00068a4:	687b      	ldr	r3, [r7, #4]
a00068a6:	f04f 0201 	mov.w	r2, #1
a00068aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
a00068ae:	e174      	b.n	a0006b9a <I2C_isr+0xa5e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
a00068b0:	687b      	ldr	r3, [r7, #4]
a00068b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
a00068b4:	2b00      	cmp	r3, #0
a00068b6:	d021      	beq.n	a00068fc <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
a00068b8:	687b      	ldr	r3, [r7, #4]
a00068ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
a00068bc:	687b      	ldr	r3, [r7, #4]
a00068be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
a00068c0:	429a      	cmp	r2, r3
a00068c2:	d21b      	bcs.n	a00068fc <I2C_isr+0x7c0>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = HAL_get_8bit_reg(this_i2c->base_address, DATA);
a00068c4:	687b      	ldr	r3, [r7, #4]
a00068c6:	681b      	ldr	r3, [r3, #0]
a00068c8:	f103 0308 	add.w	r3, r3, #8
a00068cc:	4618      	mov	r0, r3
a00068ce:	f000 fc3c 	bl	a000714a <HW_get_8bit_reg>
a00068d2:	4603      	mov	r3, r0
a00068d4:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
a00068d6:	687b      	ldr	r3, [r7, #4]
a00068d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
a00068da:	687b      	ldr	r3, [r7, #4]
a00068dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
a00068de:	441a      	add	r2, r3
a00068e0:	7b39      	ldrb	r1, [r7, #12]
a00068e2:	7011      	strb	r1, [r2, #0]
a00068e4:	f103 0201 	add.w	r2, r3, #1
a00068e8:	687b      	ldr	r3, [r7, #4]
a00068ea:	651a      	str	r2, [r3, #80]	; 0x50
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
a00068ec:	687b      	ldr	r3, [r7, #4]
a00068ee:	691b      	ldr	r3, [r3, #16]
a00068f0:	ea4f 2203 	mov.w	r2, r3, lsl #8
a00068f4:	7b3b      	ldrb	r3, [r7, #12]
a00068f6:	441a      	add	r2, r3
a00068f8:	687b      	ldr	r3, [r7, #4]
a00068fa:	611a      	str	r2, [r3, #16]
#ifdef INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
a00068fc:	687b      	ldr	r3, [r7, #4]
a00068fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
a0006900:	687b      	ldr	r3, [r7, #4]
a0006902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
a0006904:	429a      	cmp	r2, r3
a0006906:	f0c0 8145 	bcc.w	a0006b94 <I2C_isr+0xa58>
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
a000690a:	687b      	ldr	r3, [r7, #4]
a000690c:	681b      	ldr	r3, [r3, #0]
a000690e:	4618      	mov	r0, r3
a0006910:	f04f 0102 	mov.w	r1, #2
a0006914:	f04f 0204 	mov.w	r2, #4
a0006918:	f04f 0300 	mov.w	r3, #0
a000691c:	f000 fc17 	bl	a000714e <HW_set_8bit_reg_field>
            }
            break;
a0006920:	e13b      	b.n	a0006b9a <I2C_isr+0xa5e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
a0006922:	687b      	ldr	r3, [r7, #4]
a0006924:	7b1b      	ldrb	r3, [r3, #12]
a0006926:	2b04      	cmp	r3, #4
a0006928:	d13c      	bne.n	a00069a4 <I2C_isr+0x868>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
a000692a:	687b      	ldr	r3, [r7, #4]
a000692c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
a000692e:	687b      	ldr	r3, [r7, #4]
a0006930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
a0006932:	429a      	cmp	r2, r3
a0006934:	d103      	bne.n	a000693e <I2C_isr+0x802>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
a0006936:	687b      	ldr	r3, [r7, #4]
a0006938:	691a      	ldr	r2, [r3, #16]
a000693a:	687b      	ldr	r3, [r7, #4]
a000693c:	645a      	str	r2, [r3, #68]	; 0x44
                }
                /* Call the slave's write transaction handler if it exists. */
                if ( this_i2c->slave_write_handler != 0u )
a000693e:	687b      	ldr	r3, [r7, #4]
a0006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
a0006942:	2b00      	cmp	r3, #0
a0006944:	d022      	beq.n	a000698c <I2C_isr+0x850>
                {
                    i2c_slave_handler_ret_t h_ret;
                    h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
a0006946:	687b      	ldr	r3, [r7, #4]
a0006948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
a000694a:	687a      	ldr	r2, [r7, #4]
a000694c:	6c91      	ldr	r1, [r2, #72]	; 0x48
a000694e:	687a      	ldr	r2, [r7, #4]
a0006950:	6d12      	ldr	r2, [r2, #80]	; 0x50
a0006952:	b292      	uxth	r2, r2
a0006954:	6878      	ldr	r0, [r7, #4]
a0006956:	4798      	blx	r3
a0006958:	4603      	mov	r3, r0
a000695a:	73fb      	strb	r3, [r7, #15]
                    if ( I2C_REENABLE_SLAVE_RX == h_ret )
a000695c:	7bfb      	ldrb	r3, [r7, #15]
a000695e:	2b00      	cmp	r3, #0
a0006960:	d103      	bne.n	a000696a <I2C_isr+0x82e>
                    {
                        /* There is a small risk that the write handler could
                         * call I2C_disable_slave() but return
                         * I2C_REENABLE_SLAVE_RX in error so we only enable
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
a0006962:	6878      	ldr	r0, [r7, #4]
a0006964:	f7ff fbd2 	bl	a000610c <enable_slave_if_required>
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
a0006968:	e023      	b.n	a00069b2 <I2C_isr+0x876>
                         * ACKs if still in slave mode. */
                         enable_slave_if_required(this_i2c);
                    }
                    else
                    {
                        HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x0u );
a000696a:	687b      	ldr	r3, [r7, #4]
a000696c:	681b      	ldr	r3, [r3, #0]
a000696e:	4618      	mov	r0, r3
a0006970:	f04f 0102 	mov.w	r1, #2
a0006974:	f04f 0204 	mov.w	r2, #4
a0006978:	f04f 0300 	mov.w	r3, #0
a000697c:	f000 fbe7 	bl	a000714e <HW_set_8bit_reg_field>
                        /* Clear slave mode flag as well otherwise in mixed
                         * master/slave applications, the AA bit will get set by
                         * subsequent master operations. */
                        this_i2c->is_slave_enabled = 0u;
a0006980:	687b      	ldr	r3, [r7, #4]
a0006982:	f04f 0200 	mov.w	r2, #0
a0006986:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }
                }
                else
                {
                    /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                    HAL_set_8bit_reg_field( this_i2c->base_address, AA, 0x01u );
a000698a:	e012      	b.n	a00069b2 <I2C_isr+0x876>
a000698c:	687b      	ldr	r3, [r7, #4]
a000698e:	681b      	ldr	r3, [r3, #0]
a0006990:	4618      	mov	r0, r3
a0006992:	f04f 0102 	mov.w	r1, #2
a0006996:	f04f 0204 	mov.w	r2, #4
a000699a:	f04f 0301 	mov.w	r3, #1
a000699e:	f000 fbd6 	bl	a000714e <HW_set_8bit_reg_field>
a00069a2:	e006      	b.n	a00069b2 <I2C_isr+0x876>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
a00069a4:	687b      	ldr	r3, [r7, #4]
a00069a6:	f04f 0200 	mov.w	r2, #0
a00069aa:	645a      	str	r2, [r3, #68]	; 0x44
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
a00069ac:	6878      	ldr	r0, [r7, #4]
a00069ae:	f7ff fbad 	bl	a000610c <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = I2C_SUCCESS;
a00069b2:	687b      	ldr	r3, [r7, #4]
a00069b4:	f04f 0200 	mov.w	r2, #0
a00069b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
a00069bc:	687b      	ldr	r3, [r7, #4]
a00069be:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
a00069c2:	2b00      	cmp	r3, #0
a00069c4:	d00a      	beq.n	a00069dc <I2C_isr+0x8a0>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
a00069c6:	687b      	ldr	r3, [r7, #4]
a00069c8:	681b      	ldr	r3, [r3, #0]
a00069ca:	4618      	mov	r0, r3
a00069cc:	f04f 0105 	mov.w	r1, #5
a00069d0:	f04f 0220 	mov.w	r2, #32
a00069d4:	f04f 0301 	mov.w	r3, #1
a00069d8:	f000 fbb9 	bl	a000714e <HW_set_8bit_reg_field>

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
a00069dc:	687b      	ldr	r3, [r7, #4]
a00069de:	f04f 0200 	mov.w	r2, #0
a00069e2:	731a      	strb	r2, [r3, #12]

            break;
a00069e4:	e0d9      	b.n	a0006b9a <I2C_isr+0xa5e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
a00069e6:	687b      	ldr	r3, [r7, #4]
a00069e8:	f04f 0200 	mov.w	r2, #0
a00069ec:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
a00069ee:	687b      	ldr	r3, [r7, #4]
a00069f0:	f04f 0200 	mov.w	r2, #0
a00069f4:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->slave_status)
a00069f6:	687b      	ldr	r3, [r7, #4]
a00069f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
a00069fc:	b2db      	uxtb	r3, r3
a00069fe:	2b01      	cmp	r3, #1
a0006a00:	d104      	bne.n	a0006a0c <I2C_isr+0x8d0>
            {
                this_i2c->slave_status = I2C_FAILED;
a0006a02:	687b      	ldr	r3, [r7, #4]
a0006a04:	f04f 0202 	mov.w	r2, #2
a0006a08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
a0006a0c:	6878      	ldr	r0, [r7, #4]
a0006a0e:	f7ff fb7d 	bl	a000610c <enable_slave_if_required>

            break;
a0006a12:	e0c2      	b.n	a0006b9a <I2C_isr+0xa5e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:       /* Arbitration lost, and: */
        case ST_RACK:           /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
a0006a14:	7afb      	ldrb	r3, [r7, #11]
a0006a16:	b2db      	uxtb	r3, r3
a0006a18:	2ba8      	cmp	r3, #168	; 0xa8
a0006a1a:	d128      	bne.n	a0006a6e <I2C_isr+0x932>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
a0006a1c:	687b      	ldr	r3, [r7, #4]
a0006a1e:	f04f 0205 	mov.w	r2, #5
a0006a22:	731a      	strb	r2, [r3, #12]
                this_i2c->random_read_addr = 0u;
a0006a24:	687b      	ldr	r3, [r7, #4]
a0006a26:	f04f 0200 	mov.w	r2, #0
a0006a2a:	611a      	str	r2, [r3, #16]
                this_i2c->slave_status = I2C_IN_PROGRESS;
a0006a2c:	687b      	ldr	r3, [r7, #4]
a0006a2e:	f04f 0201 	mov.w	r2, #1
a0006a32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
                /* If Start Bit is set clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(HAL_get_8bit_reg_field(this_i2c->base_address, STA))
a0006a36:	687b      	ldr	r3, [r7, #4]
a0006a38:	681b      	ldr	r3, [r3, #0]
a0006a3a:	4618      	mov	r0, r3
a0006a3c:	f04f 0105 	mov.w	r1, #5
a0006a40:	f04f 0220 	mov.w	r2, #32
a0006a44:	f000 fb91 	bl	a000716a <HW_get_8bit_reg_field>
a0006a48:	4603      	mov	r3, r0
a0006a4a:	2b00      	cmp	r3, #0
a0006a4c:	d00f      	beq.n	a0006a6e <I2C_isr+0x932>
                {
                    HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
a0006a4e:	687b      	ldr	r3, [r7, #4]
a0006a50:	681b      	ldr	r3, [r3, #0]
a0006a52:	4618      	mov	r0, r3
a0006a54:	f04f 0105 	mov.w	r1, #5
a0006a58:	f04f 0220 	mov.w	r2, #32
a0006a5c:	f04f 0300 	mov.w	r3, #0
a0006a60:	f000 fb75 	bl	a000714e <HW_set_8bit_reg_field>
                    this_i2c->is_transaction_pending = 1u;
a0006a64:	687b      	ldr	r3, [r7, #4]
a0006a66:	f04f 0201 	mov.w	r2, #1
a0006a6a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                 }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
a0006a6e:	687b      	ldr	r3, [r7, #4]
a0006a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
a0006a72:	687b      	ldr	r3, [r7, #4]
a0006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0006a76:	429a      	cmp	r2, r3
a0006a78:	d309      	bcc.n	a0006a8e <I2C_isr+0x952>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, 0xFFu);
a0006a7a:	687b      	ldr	r3, [r7, #4]
a0006a7c:	681b      	ldr	r3, [r3, #0]
a0006a7e:	f103 0308 	add.w	r3, r3, #8
a0006a82:	4618      	mov	r0, r3
a0006a84:	f04f 01ff 	mov.w	r1, #255	; 0xff
a0006a88:	f000 fb5d 	bl	a0007146 <HW_set_8bit_reg>
a0006a8c:	e011      	b.n	a0006ab2 <I2C_isr+0x976>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                HAL_set_8bit_reg(this_i2c->base_address, DATA, (uint_fast8_t)this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++]);
a0006a8e:	687b      	ldr	r3, [r7, #4]
a0006a90:	681b      	ldr	r3, [r3, #0]
a0006a92:	f103 0108 	add.w	r1, r3, #8
a0006a96:	687b      	ldr	r3, [r7, #4]
a0006a98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
a0006a9a:	687b      	ldr	r3, [r7, #4]
a0006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
a0006a9e:	441a      	add	r2, r3
a0006aa0:	7812      	ldrb	r2, [r2, #0]
a0006aa2:	f103 0001 	add.w	r0, r3, #1
a0006aa6:	687b      	ldr	r3, [r7, #4]
a0006aa8:	6458      	str	r0, [r3, #68]	; 0x44
a0006aaa:	4608      	mov	r0, r1
a0006aac:	4611      	mov	r1, r2
a0006aae:	f000 fb4a 	bl	a0007146 <HW_set_8bit_reg>
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
a0006ab2:	687b      	ldr	r3, [r7, #4]
a0006ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
a0006ab6:	687b      	ldr	r3, [r7, #4]
a0006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
a0006aba:	429a      	cmp	r2, r3
a0006abc:	d36c      	bcc.n	a0006b98 <I2C_isr+0xa5c>
            {
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
a0006abe:	687b      	ldr	r3, [r7, #4]
a0006ac0:	681b      	ldr	r3, [r3, #0]
a0006ac2:	4618      	mov	r0, r3
a0006ac4:	f04f 0102 	mov.w	r1, #2
a0006ac8:	f04f 0204 	mov.w	r2, #4
a0006acc:	f04f 0300 	mov.w	r3, #0
a0006ad0:	f000 fb3d 	bl	a000714e <HW_set_8bit_reg_field>
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
a0006ad4:	687b      	ldr	r3, [r7, #4]
a0006ad6:	f04f 0200 	mov.w	r2, #0
a0006ada:	645a      	str	r2, [r3, #68]	; 0x44
            }
            break;
a0006adc:	e05d      	b.n	a0006b9a <I2C_isr+0xa5e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
a0006ade:	687b      	ldr	r3, [r7, #4]
a0006ae0:	f04f 0200 	mov.w	r2, #0
a0006ae4:	645a      	str	r2, [r3, #68]	; 0x44
            HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x01u); 
a0006ae6:	687b      	ldr	r3, [r7, #4]
a0006ae8:	681b      	ldr	r3, [r3, #0]
a0006aea:	4618      	mov	r0, r3
a0006aec:	f04f 0102 	mov.w	r1, #2
a0006af0:	f04f 0204 	mov.w	r2, #4
a0006af4:	f04f 0301 	mov.w	r3, #1
a0006af8:	f000 fb29 	bl	a000714e <HW_set_8bit_reg_field>

            /*  Mark previous state as complete */
            this_i2c->slave_status = I2C_SUCCESS;
a0006afc:	687b      	ldr	r3, [r7, #4]
a0006afe:	f04f 0200 	mov.w	r2, #0
a0006b02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
a0006b06:	687b      	ldr	r3, [r7, #4]
a0006b08:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
a0006b0c:	2b00      	cmp	r3, #0
a0006b0e:	d00a      	beq.n	a0006b26 <I2C_isr+0x9ea>
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
a0006b10:	687b      	ldr	r3, [r7, #4]
a0006b12:	681b      	ldr	r3, [r3, #0]
a0006b14:	4618      	mov	r0, r3
a0006b16:	f04f 0105 	mov.w	r1, #5
a0006b1a:	f04f 0220 	mov.w	r2, #32
a0006b1e:	f04f 0301 	mov.w	r3, #1
a0006b22:	f000 fb14 	bl	a000714e <HW_set_8bit_reg_field>
            }
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
a0006b26:	687b      	ldr	r3, [r7, #4]
a0006b28:	f04f 0200 	mov.w	r2, #0
a0006b2c:	731a      	strb	r2, [r3, #12]

            break;
a0006b2e:	e034      	b.n	a0006b9a <I2C_isr+0xa5e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x00u);
a0006b30:	687b      	ldr	r3, [r7, #4]
a0006b32:	681b      	ldr	r3, [r3, #0]
a0006b34:	4618      	mov	r0, r3
a0006b36:	f04f 0105 	mov.w	r1, #5
a0006b3a:	f04f 0220 	mov.w	r2, #32
a0006b3e:	f04f 0300 	mov.w	r3, #0
a0006b42:	f000 fb04 	bl	a000714e <HW_set_8bit_reg_field>
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
a0006b46:	687b      	ldr	r3, [r7, #4]
a0006b48:	f04f 0200 	mov.w	r2, #0
a0006b4c:	731a      	strb	r2, [r3, #12]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
a0006b4e:	687b      	ldr	r3, [r7, #4]
a0006b50:	f04f 0200 	mov.w	r2, #0
a0006b54:	645a      	str	r2, [r3, #68]	; 0x44
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(I2C_IN_PROGRESS == this_i2c->master_status)
a0006b56:	687b      	ldr	r3, [r7, #4]
a0006b58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
a0006b5c:	b2db      	uxtb	r3, r3
a0006b5e:	2b01      	cmp	r3, #1
a0006b60:	d104      	bne.n	a0006b6c <I2C_isr+0xa30>
            {
                this_i2c->master_status = I2C_FAILED;
a0006b62:	687b      	ldr	r3, [r7, #4]
a0006b64:	f04f 0202 	mov.w	r2, #2
a0006b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }

            if(I2C_IN_PROGRESS == this_i2c->slave_status)
a0006b6c:	687b      	ldr	r3, [r7, #4]
a0006b6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
a0006b72:	b2db      	uxtb	r3, r3
a0006b74:	2b01      	cmp	r3, #1
a0006b76:	d110      	bne.n	a0006b9a <I2C_isr+0xa5e>
            {
                this_i2c->slave_status = I2C_FAILED;
a0006b78:	687b      	ldr	r3, [r7, #4]
a0006b7a:	f04f 0202 	mov.w	r2, #2
a0006b7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
a0006b82:	e00a      	b.n	a0006b9a <I2C_isr+0xa5e>
              HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
              break;

        case ST_STOP_TRANSMIT:
             /* Stop has been transmitted. Do nothing */
              break;
a0006b84:	bf00      	nop
a0006b86:	e008      	b.n	a0006b9a <I2C_isr+0xa5e>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
a0006b88:	bf00      	nop
a0006b8a:	e006      	b.n	a0006b9a <I2C_isr+0xa5e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u);
            }
            break;
a0006b8c:	bf00      	nop
a0006b8e:	e004      	b.n	a0006b9a <I2C_isr+0xa5e>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                HAL_set_8bit_reg_field(this_i2c->base_address, STA, 0x01u);
            }
            break;
a0006b90:	bf00      	nop
a0006b92:	e002      	b.n	a0006b9a <I2C_isr+0xa5e>
            if(this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                /* Rx buffer is full. NACK next received byte. */
                HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
            }
            break;
a0006b94:	bf00      	nop
a0006b96:	e000      	b.n	a0006b9a <I2C_isr+0xa5e>
                 HAL_set_8bit_reg_field(this_i2c->base_address, AA, 0x00u); 
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
a0006b98:	bf00      	nop
            }

            break;
    }
    
    if ( clear_irq )
a0006b9a:	7bbb      	ldrb	r3, [r7, #14]
a0006b9c:	2b00      	cmp	r3, #0
a0006b9e:	d00a      	beq.n	a0006bb6 <I2C_isr+0xa7a>
    {
        /* clear interrupt. */
        HAL_set_8bit_reg_field(this_i2c->base_address, SI, 0x00u);
a0006ba0:	687b      	ldr	r3, [r7, #4]
a0006ba2:	681b      	ldr	r3, [r3, #0]
a0006ba4:	4618      	mov	r0, r3
a0006ba6:	f04f 0103 	mov.w	r1, #3
a0006baa:	f04f 0208 	mov.w	r2, #8
a0006bae:	f04f 0300 	mov.w	r3, #0
a0006bb2:	f000 facc 	bl	a000714e <HW_set_8bit_reg_field>
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = HAL_get_8bit_reg( this_i2c->base_address, STATUS);
a0006bb6:	687b      	ldr	r3, [r7, #4]
a0006bb8:	681b      	ldr	r3, [r3, #0]
a0006bba:	f103 0304 	add.w	r3, r3, #4
a0006bbe:	4618      	mov	r0, r3
a0006bc0:	f000 fac3 	bl	a000714a <HW_get_8bit_reg>
a0006bc4:	4603      	mov	r3, r0
a0006bc6:	72fb      	strb	r3, [r7, #11]
}
a0006bc8:	f107 0710 	add.w	r7, r7, #16
a0006bcc:	46bd      	mov	sp, r7
a0006bce:	bdb0      	pop	{r4, r5, r7, pc}

a0006bd0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
a0006bd0:	b480      	push	{r7}
a0006bd2:	b083      	sub	sp, #12
a0006bd4:	af00      	add	r7, sp, #0
a0006bd6:	4603      	mov	r3, r0
a0006bd8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
a0006bda:	f24e 1300 	movw	r3, #57600	; 0xe100
a0006bde:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0006be2:	f997 2007 	ldrsb.w	r2, [r7, #7]
a0006be6:	ea4f 1252 	mov.w	r2, r2, lsr #5
a0006bea:	79f9      	ldrb	r1, [r7, #7]
a0006bec:	f001 011f 	and.w	r1, r1, #31
a0006bf0:	f04f 0001 	mov.w	r0, #1
a0006bf4:	fa00 f101 	lsl.w	r1, r0, r1
a0006bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
a0006bfc:	f107 070c 	add.w	r7, r7, #12
a0006c00:	46bd      	mov	sp, r7
a0006c02:	bc80      	pop	{r7}
a0006c04:	4770      	bx	lr
a0006c06:	bf00      	nop

a0006c08 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
a0006c08:	b480      	push	{r7}
a0006c0a:	b083      	sub	sp, #12
a0006c0c:	af00      	add	r7, sp, #0
a0006c0e:	4603      	mov	r3, r0
a0006c10:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
a0006c12:	f24e 1300 	movw	r3, #57600	; 0xe100
a0006c16:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0006c1a:	f997 2007 	ldrsb.w	r2, [r7, #7]
a0006c1e:	ea4f 1252 	mov.w	r2, r2, lsr #5
a0006c22:	79f9      	ldrb	r1, [r7, #7]
a0006c24:	f001 011f 	and.w	r1, r1, #31
a0006c28:	f04f 0001 	mov.w	r0, #1
a0006c2c:	fa00 f101 	lsl.w	r1, r0, r1
a0006c30:	f102 0220 	add.w	r2, r2, #32
a0006c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
a0006c38:	f107 070c 	add.w	r7, r7, #12
a0006c3c:	46bd      	mov	sp, r7
a0006c3e:	bc80      	pop	{r7}
a0006c40:	4770      	bx	lr
a0006c42:	bf00      	nop

a0006c44 <I2C_enable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to enable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_enable_irq( i2c_instance_t * this_i2c )
{
a0006c44:	b580      	push	{r7, lr}
a0006c46:	b082      	sub	sp, #8
a0006c48:	af00      	add	r7, sp, #0
a0006c4a:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
a0006c4c:	687a      	ldr	r2, [r7, #4]
a0006c4e:	f64d 5388 	movw	r3, #56712	; 0xdd88
a0006c52:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006c56:	429a      	cmp	r2, r3
a0006c58:	d103      	bne.n	a0006c62 <I2C_enable_irq+0x1e>
	{
		NVIC_EnableIRQ( FabricIrq0_IRQn );
a0006c5a:	f04f 0022 	mov.w	r0, #34	; 0x22
a0006c5e:	f7ff ffb7 	bl	a0006bd0 <NVIC_EnableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
a0006c62:	687a      	ldr	r2, [r7, #4]
a0006c64:	f64d 53f4 	movw	r3, #56820	; 0xddf4
a0006c68:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006c6c:	429a      	cmp	r2, r3
a0006c6e:	d103      	bne.n	a0006c78 <I2C_enable_irq+0x34>
	{
		NVIC_EnableIRQ( FabricIrq1_IRQn );
a0006c70:	f04f 0023 	mov.w	r0, #35	; 0x23
a0006c74:	f7ff ffac 	bl	a0006bd0 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c2)
a0006c78:	687a      	ldr	r2, [r7, #4]
a0006c7a:	f64d 03a0 	movw	r3, #55456	; 0xd8a0
a0006c7e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006c82:	429a      	cmp	r2, r3
a0006c84:	d103      	bne.n	a0006c8e <I2C_enable_irq+0x4a>
	{
		NVIC_EnableIRQ( FabricIrq2_IRQn );
a0006c86:	f04f 0024 	mov.w	r0, #36	; 0x24
a0006c8a:	f7ff ffa1 	bl	a0006bd0 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c3)
a0006c8e:	687a      	ldr	r2, [r7, #4]
a0006c90:	f64d 63cc 	movw	r3, #57036	; 0xdecc
a0006c94:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006c98:	429a      	cmp	r2, r3
a0006c9a:	d103      	bne.n	a0006ca4 <I2C_enable_irq+0x60>
	{
		NVIC_EnableIRQ( FabricIrq3_IRQn );
a0006c9c:	f04f 0025 	mov.w	r0, #37	; 0x25
a0006ca0:	f7ff ff96 	bl	a0006bd0 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c4)
a0006ca4:	687a      	ldr	r2, [r7, #4]
a0006ca6:	f64d 7340 	movw	r3, #57152	; 0xdf40
a0006caa:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006cae:	429a      	cmp	r2, r3
a0006cb0:	d103      	bne.n	a0006cba <I2C_enable_irq+0x76>
	{
		NVIC_EnableIRQ( FabricIrq4_IRQn );
a0006cb2:	f04f 0026 	mov.w	r0, #38	; 0x26
a0006cb6:	f7ff ff8b 	bl	a0006bd0 <NVIC_EnableIRQ>
	}
	if(this_i2c == &g_core_i2c5)
a0006cba:	687a      	ldr	r2, [r7, #4]
a0006cbc:	f64d 6360 	movw	r3, #56928	; 0xde60
a0006cc0:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006cc4:	429a      	cmp	r2, r3
a0006cc6:	d103      	bne.n	a0006cd0 <I2C_enable_irq+0x8c>
	{
		NVIC_EnableIRQ( FabricIrq5_IRQn );
a0006cc8:	f04f 0027 	mov.w	r0, #39	; 0x27
a0006ccc:	f7ff ff80 	bl	a0006bd0 <NVIC_EnableIRQ>
	}
}
a0006cd0:	f107 0708 	add.w	r7, r7, #8
a0006cd4:	46bd      	mov	sp, r7
a0006cd6:	bd80      	pop	{r7, pc}

a0006cd8 <I2C_disable_irq>:
/*------------------------------------------------------------------------------
 * This function must be modified to disable interrupts generated from the
 * CoreI2C instance identified as parameter.
 */
void I2C_disable_irq( i2c_instance_t * this_i2c )
{
a0006cd8:	b580      	push	{r7, lr}
a0006cda:	b082      	sub	sp, #8
a0006cdc:	af00      	add	r7, sp, #0
a0006cde:	6078      	str	r0, [r7, #4]
    //HAL_ASSERT(0)
	if(this_i2c == &g_core_i2c0)
a0006ce0:	687a      	ldr	r2, [r7, #4]
a0006ce2:	f64d 5388 	movw	r3, #56712	; 0xdd88
a0006ce6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006cea:	429a      	cmp	r2, r3
a0006cec:	d103      	bne.n	a0006cf6 <I2C_disable_irq+0x1e>
	{
		NVIC_DisableIRQ( FabricIrq0_IRQn );
a0006cee:	f04f 0022 	mov.w	r0, #34	; 0x22
a0006cf2:	f7ff ff89 	bl	a0006c08 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c1)
a0006cf6:	687a      	ldr	r2, [r7, #4]
a0006cf8:	f64d 53f4 	movw	r3, #56820	; 0xddf4
a0006cfc:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006d00:	429a      	cmp	r2, r3
a0006d02:	d103      	bne.n	a0006d0c <I2C_disable_irq+0x34>
	{
		NVIC_DisableIRQ( FabricIrq1_IRQn );
a0006d04:	f04f 0023 	mov.w	r0, #35	; 0x23
a0006d08:	f7ff ff7e 	bl	a0006c08 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c2)
a0006d0c:	687a      	ldr	r2, [r7, #4]
a0006d0e:	f64d 03a0 	movw	r3, #55456	; 0xd8a0
a0006d12:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006d16:	429a      	cmp	r2, r3
a0006d18:	d103      	bne.n	a0006d22 <I2C_disable_irq+0x4a>
	{
		NVIC_DisableIRQ( FabricIrq2_IRQn );
a0006d1a:	f04f 0024 	mov.w	r0, #36	; 0x24
a0006d1e:	f7ff ff73 	bl	a0006c08 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c3)
a0006d22:	687a      	ldr	r2, [r7, #4]
a0006d24:	f64d 63cc 	movw	r3, #57036	; 0xdecc
a0006d28:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006d2c:	429a      	cmp	r2, r3
a0006d2e:	d103      	bne.n	a0006d38 <I2C_disable_irq+0x60>
	{
		NVIC_DisableIRQ( FabricIrq3_IRQn );
a0006d30:	f04f 0025 	mov.w	r0, #37	; 0x25
a0006d34:	f7ff ff68 	bl	a0006c08 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c4)
a0006d38:	687a      	ldr	r2, [r7, #4]
a0006d3a:	f64d 7340 	movw	r3, #57152	; 0xdf40
a0006d3e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006d42:	429a      	cmp	r2, r3
a0006d44:	d103      	bne.n	a0006d4e <I2C_disable_irq+0x76>
	{
		NVIC_DisableIRQ( FabricIrq4_IRQn );
a0006d46:	f04f 0026 	mov.w	r0, #38	; 0x26
a0006d4a:	f7ff ff5d 	bl	a0006c08 <NVIC_DisableIRQ>
	}

	if(this_i2c == &g_core_i2c5)
a0006d4e:	687a      	ldr	r2, [r7, #4]
a0006d50:	f64d 6360 	movw	r3, #56928	; 0xde60
a0006d54:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006d58:	429a      	cmp	r2, r3
a0006d5a:	d103      	bne.n	a0006d64 <I2C_disable_irq+0x8c>
	{
		NVIC_DisableIRQ( FabricIrq5_IRQn );
a0006d5c:	f04f 0027 	mov.w	r0, #39	; 0x27
a0006d60:	f7ff ff52 	bl	a0006c08 <NVIC_DisableIRQ>
	}
}
a0006d64:	f107 0708 	add.w	r7, r7, #8
a0006d68:	46bd      	mov	sp, r7
a0006d6a:	bd80      	pop	{r7, pc}

a0006d6c <SystemInit>:

/***************************************************************************//**
 * See system_m2sxxx.h for details.
 */
void SystemInit(void)
{
a0006d6c:	b580      	push	{r7, lr}
a0006d6e:	af00      	add	r7, sp, #0
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
    complete_clock_config();
a0006d70:	f000 f96a 	bl	a0007048 <complete_clock_config>
#endif

    silicon_workarounds();
a0006d74:	f000 f936 	bl	a0006fe4 <silicon_workarounds>
    /*--------------------------------------------------------------------------
     * Set STKALIGN to ensure exception stacking starts on 8 bytes address
     * boundary. This ensures compliance with the "Procedure Call Standards for
     * the ARM Architecture" (AAPCS).
     */
    SCB->CCR |= SCB_CCR_STKALIGN_Msk;
a0006d78:	f64e 5300 	movw	r3, #60672	; 0xed00
a0006d7c:	f2ce 0300 	movt	r3, #57344	; 0xe000
a0006d80:	f64e 5200 	movw	r2, #60672	; 0xed00
a0006d84:	f2ce 0200 	movt	r2, #57344	; 0xe000
a0006d88:	6952      	ldr	r2, [r2, #20]
a0006d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
a0006d8e:	615a      	str	r2, [r3, #20]
#endif

    /*--------------------------------------------------------------------------
     * Call user defined configuration function.
     */
    mscc_post_hw_cfg_init();
a0006d90:	f000 fb9e 	bl	a00074d0 <__mscc_post_hw_cfg_init_veneer>
    while(!CORE_SF2_CFG->INIT_DONE)
    {
        ;   /* Wait for INIT_DONE from CoreSF2Reset. */
    }
#endif
}
a0006d94:	bd80      	pop	{r7, pc}
a0006d96:	bf00      	nop

a0006d98 <SystemCoreClockUpdate>:
#define FREQ_1MHZ    1000000u
#define FREQ_25MHZ   25000000u
#define FREQ_50MHZ   50000000u

void SystemCoreClockUpdate(void)
{
a0006d98:	b580      	push	{r7, lr}
a0006d9a:	b088      	sub	sp, #32
a0006d9c:	af00      	add	r7, sp, #0
#if 1
    uint32_t controller_pll_init;
    uint32_t clk_src;

    controller_pll_init = SYSREG->MSSDDR_FACC1_CR & CONTROLLER_PLL_INIT_MASK;
a0006d9e:	f248 0300 	movw	r3, #32768	; 0x8000
a0006da2:	f2c4 0303 	movt	r3, #16387	; 0x4003
a0006da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
a0006daa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
a0006dae:	60fb      	str	r3, [r7, #12]
    
    if(0u == controller_pll_init)
a0006db0:	68fb      	ldr	r3, [r7, #12]
a0006db2:	2b00      	cmp	r3, #0
a0006db4:	f040 808b 	bne.w	a0006ece <SystemCoreClockUpdate+0x136>
    {
        /* Normal operations. */
        uint32_t global_mux_sel;
        
        global_mux_sel = SYSREG->MSSDDR_FACC1_CR & FACC_GLMUX_SEL_MASK;
a0006db8:	f248 0300 	movw	r3, #32768	; 0x8000
a0006dbc:	f2c4 0303 	movt	r3, #16387	; 0x4003
a0006dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
a0006dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
a0006dc8:	617b      	str	r3, [r7, #20]
        if(0u == global_mux_sel)
a0006dca:	697b      	ldr	r3, [r7, #20]
a0006dcc:	2b00      	cmp	r3, #0
a0006dce:	d13f      	bne.n	a0006e50 <SystemCoreClockUpdate+0xb8>
        {
            /* MSS clocked from MSS PLL. Use Libero flow defines. */
            SystemCoreClock = MSS_SYS_M3_CLK_FREQ;
a0006dd0:	f247 532c 	movw	r3, #29996	; 0x752c
a0006dd4:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006dd8:	f24e 1200 	movw	r2, #57600	; 0xe100
a0006ddc:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
a0006de0:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK0 = MSS_SYS_APB_0_CLK_FREQ;
a0006de2:	f247 5330 	movw	r3, #30000	; 0x7530
a0006de6:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006dea:	f24e 1200 	movw	r2, #57600	; 0xe100
a0006dee:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
a0006df2:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK1 = MSS_SYS_APB_1_CLK_FREQ;
a0006df4:	f247 5334 	movw	r3, #30004	; 0x7534
a0006df8:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006dfc:	f24e 1200 	movw	r2, #57600	; 0xe100
a0006e00:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
a0006e04:	601a      	str	r2, [r3, #0]
            g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
a0006e06:	f247 5338 	movw	r3, #30008	; 0x7538
a0006e0a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006e0e:	f24f 0280 	movw	r2, #61568	; 0xf080
a0006e12:	f2c0 22fa 	movt	r2, #762	; 0x2fa
a0006e16:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
a0006e18:	f247 533c 	movw	r3, #30012	; 0x753c
a0006e1c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006e20:	f24e 1200 	movw	r2, #57600	; 0xe100
a0006e24:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
a0006e28:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
a0006e2a:	f247 5340 	movw	r3, #30016	; 0x7540
a0006e2e:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006e32:	f24e 1200 	movw	r2, #57600	; 0xe100
a0006e36:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
a0006e3a:	601a      	str	r2, [r3, #0]
            g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
a0006e3c:	f247 5344 	movw	r3, #30020	; 0x7544
a0006e40:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006e44:	f24e 1200 	movw	r2, #57600	; 0xe100
a0006e48:	f2c0 52f5 	movt	r2, #1525	; 0x5f5
a0006e4c:	601a      	str	r2, [r3, #0]
                break;
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
a0006e4e:	e045      	b.n	a0006edc <SystemCoreClockUpdate+0x144>
                                                   RCOSC_25_50MHZ_CLK_SRC,
                                                   CLK_XTAL_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   RCOSC_1_MHZ_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC,
                                                   CCC2ASCI_CLK_SRC };
a0006e50:	f247 43b0 	movw	r3, #29872	; 0x74b0
a0006e54:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006e58:	f107 0204 	add.w	r2, r7, #4
a0006e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
a0006e60:	e882 0003 	stmia.w	r2, {r0, r1}
            
            uint32_t standby_sel;
            uint8_t clock_source;
            
            standby_sel = (SYSREG->MSSDDR_FACC2_CR >> FACC_STANDBY_SHIFT) & FACC_STANDBY_SEL_MASK;
a0006e64:	f248 0300 	movw	r3, #32768	; 0x8000
a0006e68:	f2c4 0303 	movt	r3, #16387	; 0x4003
a0006e6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
a0006e70:	ea4f 1393 	mov.w	r3, r3, lsr #6
a0006e74:	f003 0307 	and.w	r3, r3, #7
a0006e78:	61bb      	str	r3, [r7, #24]
            clock_source = standby_clock_lut[standby_sel];
a0006e7a:	69bb      	ldr	r3, [r7, #24]
a0006e7c:	f107 0220 	add.w	r2, r7, #32
a0006e80:	4413      	add	r3, r2
a0006e82:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
a0006e86:	77fb      	strb	r3, [r7, #31]
            switch(clock_source)
a0006e88:	7ffb      	ldrb	r3, [r7, #31]
a0006e8a:	2b01      	cmp	r3, #1
a0006e8c:	d00b      	beq.n	a0006ea6 <SystemCoreClockUpdate+0x10e>
a0006e8e:	2b02      	cmp	r3, #2
a0006e90:	d00e      	beq.n	a0006eb0 <SystemCoreClockUpdate+0x118>
a0006e92:	2b00      	cmp	r3, #0
a0006e94:	d114      	bne.n	a0006ec0 <SystemCoreClockUpdate+0x128>
            {
                case RCOSC_25_50MHZ_CLK_SRC:
                    clk_src = get_rcosc_25_50mhz_frequency();
a0006e96:	f000 f825 	bl	a0006ee4 <get_rcosc_25_50mhz_frequency>
a0006e9a:	4603      	mov	r3, r0
a0006e9c:	613b      	str	r3, [r7, #16]
                    set_clock_frequency_globals(clk_src);
a0006e9e:	6938      	ldr	r0, [r7, #16]
a0006ea0:	f000 f842 	bl	a0006f28 <set_clock_frequency_globals>
                break;
a0006ea4:	e01a      	b.n	a0006edc <SystemCoreClockUpdate+0x144>
                
                case CLK_XTAL_CLK_SRC:
                    set_clock_frequency_globals(FREQ_32KHZ);
a0006ea6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
a0006eaa:	f000 f83d 	bl	a0006f28 <set_clock_frequency_globals>
                break;
a0006eae:	e015      	b.n	a0006edc <SystemCoreClockUpdate+0x144>
                
                case RCOSC_1_MHZ_CLK_SRC:
                    set_clock_frequency_globals(FREQ_1MHZ);
a0006eb0:	f244 2040 	movw	r0, #16960	; 0x4240
a0006eb4:	f2c0 000f 	movt	r0, #15
a0006eb8:	f000 f836 	bl	a0006f28 <set_clock_frequency_globals>
                break;
a0006ebc:	bf00      	nop
a0006ebe:	e00d      	b.n	a0006edc <SystemCoreClockUpdate+0x144>
                
                case CCC2ASCI_CLK_SRC:
                    /* Fall through. */
                default:
                    set_clock_frequency_globals(FREQ_1MHZ);
a0006ec0:	f244 2040 	movw	r0, #16960	; 0x4240
a0006ec4:	f2c0 000f 	movt	r0, #15
a0006ec8:	f000 f82e 	bl	a0006f28 <set_clock_frequency_globals>
a0006ecc:	e006      	b.n	a0006edc <SystemCoreClockUpdate+0x144>
        }
    }
    else
    {
        /* PLL initialization mode. Running from 25/50MHZ RC oscillator. */
        clk_src = get_rcosc_25_50mhz_frequency();
a0006ece:	f000 f809 	bl	a0006ee4 <get_rcosc_25_50mhz_frequency>
a0006ed2:	4603      	mov	r3, r0
a0006ed4:	613b      	str	r3, [r7, #16]
        set_clock_frequency_globals(clk_src);
a0006ed6:	6938      	ldr	r0, [r7, #16]
a0006ed8:	f000 f826 	bl	a0006f28 <set_clock_frequency_globals>
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
    g_FrequencyFIC0 = MSS_SYS_FIC_0_CLK_FREQ;
    g_FrequencyFIC1 = MSS_SYS_FIC_1_CLK_FREQ;
    g_FrequencyFIC64 = MSS_SYS_FIC64_CLK_FREQ;
#endif
}
a0006edc:	f107 0720 	add.w	r7, r7, #32
a0006ee0:	46bd      	mov	sp, r7
a0006ee2:	bd80      	pop	{r7, pc}

a0006ee4 <get_rcosc_25_50mhz_frequency>:

/***************************************************************************//**
 * Find out frequency generated by the 25_50mhz RC osciallator.
 */
static uint32_t get_rcosc_25_50mhz_frequency(void)
{
a0006ee4:	b480      	push	{r7}
a0006ee6:	b083      	sub	sp, #12
a0006ee8:	af00      	add	r7, sp, #0
    uint32_t rcosc_div2;
    uint32_t rcosc_frequency;
    
    rcosc_div2 = SYSREG->MSSDDR_PLL_STATUS & RCOSC_DIV2_MASK;
a0006eea:	f248 0300 	movw	r3, #32768	; 0x8000
a0006eee:	f2c4 0303 	movt	r3, #16387	; 0x4003
a0006ef2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
a0006ef6:	f003 0304 	and.w	r3, r3, #4
a0006efa:	603b      	str	r3, [r7, #0]
    if(0u == rcosc_div2)
a0006efc:	683b      	ldr	r3, [r7, #0]
a0006efe:	2b00      	cmp	r3, #0
a0006f00:	d105      	bne.n	a0006f0e <get_rcosc_25_50mhz_frequency+0x2a>
    {
        /* 25_50mhz oscillator is configured for 25 MHz operations. */
        rcosc_frequency = FREQ_25MHZ;
a0006f02:	f647 0340 	movw	r3, #30784	; 0x7840
a0006f06:	f2c0 137d 	movt	r3, #381	; 0x17d
a0006f0a:	607b      	str	r3, [r7, #4]
a0006f0c:	e004      	b.n	a0006f18 <get_rcosc_25_50mhz_frequency+0x34>
    }
    else
    {
        /* 25_50mhz oscillator is configured for 50 MHz operations. */
        rcosc_frequency = FREQ_50MHZ;
a0006f0e:	f24f 0380 	movw	r3, #61568	; 0xf080
a0006f12:	f2c0 23fa 	movt	r3, #762	; 0x2fa
a0006f16:	607b      	str	r3, [r7, #4]
    }
    
    return rcosc_frequency;
a0006f18:	687b      	ldr	r3, [r7, #4]
}
a0006f1a:	4618      	mov	r0, r3
a0006f1c:	f107 070c 	add.w	r7, r7, #12
a0006f20:	46bd      	mov	sp, r7
a0006f22:	bc80      	pop	{r7}
a0006f24:	4770      	bx	lr
a0006f26:	bf00      	nop

a0006f28 <set_clock_frequency_globals>:
        - g_FrequencyFIC0
        - g_FrequencyFIC1
        - g_FrequencyFIC64
 */
static void set_clock_frequency_globals(uint32_t standby_clk)
{
a0006f28:	b480      	push	{r7}
a0006f2a:	b083      	sub	sp, #12
a0006f2c:	af00      	add	r7, sp, #0
a0006f2e:	6078      	str	r0, [r7, #4]
    SystemCoreClock = standby_clk;
a0006f30:	f247 532c 	movw	r3, #29996	; 0x752c
a0006f34:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006f38:	687a      	ldr	r2, [r7, #4]
a0006f3a:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = standby_clk;
a0006f3c:	f247 5330 	movw	r3, #30000	; 0x7530
a0006f40:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006f44:	687a      	ldr	r2, [r7, #4]
a0006f46:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = standby_clk;
a0006f48:	f247 5334 	movw	r3, #30004	; 0x7534
a0006f4c:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006f50:	687a      	ldr	r2, [r7, #4]
a0006f52:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK2 = MSS_SYS_APB_2_CLK_FREQ;
a0006f54:	f247 5338 	movw	r3, #30008	; 0x7538
a0006f58:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006f5c:	f24f 0280 	movw	r2, #61568	; 0xf080
a0006f60:	f2c0 22fa 	movt	r2, #762	; 0x2fa
a0006f64:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC0 = standby_clk;
a0006f66:	f247 533c 	movw	r3, #30012	; 0x753c
a0006f6a:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006f6e:	687a      	ldr	r2, [r7, #4]
a0006f70:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC1 = standby_clk;
a0006f72:	f247 5340 	movw	r3, #30016	; 0x7540
a0006f76:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006f7a:	687a      	ldr	r2, [r7, #4]
a0006f7c:	601a      	str	r2, [r3, #0]
    g_FrequencyFIC64 = standby_clk;
a0006f7e:	f247 5344 	movw	r3, #30020	; 0x7544
a0006f82:	f2ca 0300 	movt	r3, #40960	; 0xa000
a0006f86:	687a      	ldr	r2, [r7, #4]
a0006f88:	601a      	str	r2, [r3, #0]
}
a0006f8a:	f107 070c 	add.w	r7, r7, #12
a0006f8e:	46bd      	mov	sp, r7
a0006f90:	bc80      	pop	{r7}
a0006f92:	4770      	bx	lr

a0006f94 <get_silicon_revision>:

/*------------------------------------------------------------------------------
  Retrieve silicon revision from system registers.
 */
static uint32_t get_silicon_revision(void)
{
a0006f94:	b480      	push	{r7}
a0006f96:	b083      	sub	sp, #12
a0006f98:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    uint32_t device_version;
    
    device_version = SYSREG->DEVICE_VERSION;
a0006f9a:	f248 0300 	movw	r3, #32768	; 0x8000
a0006f9e:	f2c4 0303 	movt	r3, #16387	; 0x4003
a0006fa2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
a0006fa6:	607b      	str	r3, [r7, #4]
    switch(device_version)
a0006fa8:	687a      	ldr	r2, [r7, #4]
a0006faa:	f64f 0302 	movw	r3, #63490	; 0xf802
a0006fae:	429a      	cmp	r2, r3
a0006fb0:	d006      	beq.n	a0006fc0 <get_silicon_revision+0x2c>
a0006fb2:	f64f 0302 	movw	r3, #63490	; 0xf802
a0006fb6:	f2c0 0301 	movt	r3, #1
a0006fba:	429a      	cmp	r2, r3
a0006fbc:	d004      	beq.n	a0006fc8 <get_silicon_revision+0x34>
a0006fbe:	e007      	b.n	a0006fd0 <get_silicon_revision+0x3c>
    {
        case 0x0000F802:
            silicon_revision = M2S050_REV_A_SILICON;
a0006fc0:	f04f 0301 	mov.w	r3, #1
a0006fc4:	603b      	str	r3, [r7, #0]
            break;
a0006fc6:	e006      	b.n	a0006fd6 <get_silicon_revision+0x42>
            
        case 0x0001F802:
            silicon_revision = M2S050_REV_B_SILICON;
a0006fc8:	f04f 0302 	mov.w	r3, #2
a0006fcc:	603b      	str	r3, [r7, #0]
            break;
a0006fce:	e002      	b.n	a0006fd6 <get_silicon_revision+0x42>
            
        default:
            silicon_revision = UNKNOWN_SILICON_REV;
a0006fd0:	f04f 0300 	mov.w	r3, #0
a0006fd4:	603b      	str	r3, [r7, #0]
            break;
    }
    
    return silicon_revision;
a0006fd6:	683b      	ldr	r3, [r7, #0]
}
a0006fd8:	4618      	mov	r0, r3
a0006fda:	f107 070c 	add.w	r7, r7, #12
a0006fde:	46bd      	mov	sp, r7
a0006fe0:	bc80      	pop	{r7}
a0006fe2:	4770      	bx	lr

a0006fe4 <silicon_workarounds>:

/*------------------------------------------------------------------------------
  Workarounds for various silicon versions.
 */
static void silicon_workarounds(void)
{
a0006fe4:	b580      	push	{r7, lr}
a0006fe6:	b082      	sub	sp, #8
a0006fe8:	af00      	add	r7, sp, #0
    uint32_t silicon_revision;
    
    silicon_revision = get_silicon_revision();
a0006fea:	f7ff ffd3 	bl	a0006f94 <get_silicon_revision>
a0006fee:	4603      	mov	r3, r0
a0006ff0:	607b      	str	r3, [r7, #4]
    
    switch(silicon_revision)
a0006ff2:	687b      	ldr	r3, [r7, #4]
a0006ff4:	2b01      	cmp	r3, #1
a0006ff6:	d101      	bne.n	a0006ffc <silicon_workarounds+0x18>
    {
        case M2S050_REV_A_SILICON:
            m2s050_rev_a_workarounds();
a0006ff8:	f000 f804 	bl	a0007004 <m2s050_rev_a_workarounds>
        case UNKNOWN_SILICON_REV:
            /* Fall through. */
        default:
            break;
    }
}
a0006ffc:	f107 0708 	add.w	r7, r7, #8
a0007000:	46bd      	mov	sp, r7
a0007002:	bd80      	pop	{r7, pc}

a0007004 <m2s050_rev_a_workarounds>:

/*------------------------------------------------------------------------------
  Silicon workarounds for M2S050 rev A.
 */
static void m2s050_rev_a_workarounds(void)
{
a0007004:	b480      	push	{r7}
a0007006:	af00      	add	r7, sp, #0
    /*--------------------------------------------------------------------------
     * Work around a couple of silicon issues:
     */
    /* DDR_CLK_EN <- 1 */
    SYSREG->MSSDDR_FACC1_CR |= (uint32_t)1 << DDR_CLK_EN_SHIFT;
a0007008:	f248 0300 	movw	r3, #32768	; 0x8000
a000700c:	f2c4 0303 	movt	r3, #16387	; 0x4003
a0007010:	f248 0200 	movw	r2, #32768	; 0x8000
a0007014:	f2c4 0203 	movt	r2, #16387	; 0x4003
a0007018:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
a000701c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
a0007020:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    
    /* CONTROLLER_PLL_INIT <- 0 */
    SYSREG->MSSDDR_FACC1_CR = SYSREG->MSSDDR_FACC1_CR & ~CONTROLLER_PLL_INIT_MASK;
a0007024:	f248 0300 	movw	r3, #32768	; 0x8000
a0007028:	f2c4 0303 	movt	r3, #16387	; 0x4003
a000702c:	f248 0200 	movw	r2, #32768	; 0x8000
a0007030:	f2c4 0203 	movt	r2, #16387	; 0x4003
a0007034:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
a0007038:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
a000703c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
a0007040:	46bd      	mov	sp, r7
a0007042:	bc80      	pop	{r7}
a0007044:	4770      	bx	lr
a0007046:	bf00      	nop

a0007048 <complete_clock_config>:
/*------------------------------------------------------------------------------
  Complete clock configuration if requested by Libero.
 */
#if (MSS_SYS_FACC_INIT_BY_CORTEX == 1)
static void complete_clock_config(void)
{
a0007048:	b480      	push	{r7}
a000704a:	b083      	sub	sp, #12
a000704c:	af00      	add	r7, sp, #0
    uint32_t pll_locked;
    
    /* Wait for fabric PLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & FAB_PLL_LOCK_MASK;
a000704e:	f248 0300 	movw	r3, #32768	; 0x8000
a0007052:	f2c4 0303 	movt	r3, #16387	; 0x4003
a0007056:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
a000705a:	f003 0301 	and.w	r3, r3, #1
a000705e:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
a0007060:	687b      	ldr	r3, [r7, #4]
a0007062:	2b00      	cmp	r3, #0
a0007064:	d0f3      	beq.n	a000704e <complete_clock_config+0x6>
    
    /* Negate MPLL bypass. */
    SYSREG->MSSDDR_PLL_STATUS_HIGH_CR &= ~FACC_PLL_BYPASS_MASK;
a0007066:	f248 0300 	movw	r3, #32768	; 0x8000
a000706a:	f2c4 0303 	movt	r3, #16387	; 0x4003
a000706e:	f248 0200 	movw	r2, #32768	; 0x8000
a0007072:	f2c4 0203 	movt	r2, #16387	; 0x4003
a0007076:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
a000707a:	f022 0201 	bic.w	r2, r2, #1
a000707e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    
    /* Wait for MPLL to lock. */
    do {
        pll_locked = SYSREG->MSSDDR_PLL_STATUS & MPLL_LOCK_MASK;
a0007082:	f248 0300 	movw	r3, #32768	; 0x8000
a0007086:	f2c4 0303 	movt	r3, #16387	; 0x4003
a000708a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
a000708e:	f003 0302 	and.w	r3, r3, #2
a0007092:	607b      	str	r3, [r7, #4]
    } while(!pll_locked);
a0007094:	687b      	ldr	r3, [r7, #4]
a0007096:	2b00      	cmp	r3, #0
a0007098:	d0f3      	beq.n	a0007082 <complete_clock_config+0x3a>
    
    /* Switch FACC from standby to run mode. */
    SYSREG->MSSDDR_FACC1_CR &= ~FACC_GLMUX_SEL_MASK;
a000709a:	f248 0300 	movw	r3, #32768	; 0x8000
a000709e:	f2c4 0303 	movt	r3, #16387	; 0x4003
a00070a2:	f248 0200 	movw	r2, #32768	; 0x8000
a00070a6:	f2c4 0203 	movt	r2, #16387	; 0x4003
a00070aa:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
a00070ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
a00070b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    /* Negate FPGA_SOFTRESET to de-assert MSS_RESET_N_M2F in the fabric */
    SYSREG->SOFT_RST_CR &= ~SYSREG_FPGA_SOFTRESET_MASK;
a00070b6:	f248 0300 	movw	r3, #32768	; 0x8000
a00070ba:	f2c4 0303 	movt	r3, #16387	; 0x4003
a00070be:	f248 0200 	movw	r2, #32768	; 0x8000
a00070c2:	f2c4 0203 	movt	r2, #16387	; 0x4003
a00070c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
a00070c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
a00070cc:	649a      	str	r2, [r3, #72]	; 0x48
}
a00070ce:	f107 070c 	add.w	r7, r7, #12
a00070d2:	46bd      	mov	sp, r7
a00070d4:	bc80      	pop	{r7}
a00070d6:	4770      	bx	lr

a00070d8 <HAL_disable_interrupts>:
a00070d8:	f3ef 8010 	mrs	r0, PRIMASK
a00070dc:	b672      	cpsid	i
a00070de:	4770      	bx	lr

a00070e0 <HAL_restore_interrupts>:
a00070e0:	f380 8810 	msr	PRIMASK, r0
a00070e4:	4770      	bx	lr

a00070e6 <HW_set_32bit_reg>:
a00070e6:	6001      	str	r1, [r0, #0]
a00070e8:	4770      	bx	lr

a00070ea <HW_get_32bit_reg>:
a00070ea:	6800      	ldr	r0, [r0, #0]
a00070ec:	4770      	bx	lr

a00070ee <HW_set_32bit_reg_field>:
a00070ee:	b50e      	push	{r1, r2, r3, lr}
a00070f0:	fa03 f301 	lsl.w	r3, r3, r1
a00070f4:	ea03 0302 	and.w	r3, r3, r2
a00070f8:	6801      	ldr	r1, [r0, #0]
a00070fa:	ea6f 0202 	mvn.w	r2, r2
a00070fe:	ea01 0102 	and.w	r1, r1, r2
a0007102:	ea41 0103 	orr.w	r1, r1, r3
a0007106:	6001      	str	r1, [r0, #0]
a0007108:	bd0e      	pop	{r1, r2, r3, pc}

a000710a <HW_get_32bit_reg_field>:
a000710a:	6800      	ldr	r0, [r0, #0]
a000710c:	ea00 0002 	and.w	r0, r0, r2
a0007110:	fa20 f001 	lsr.w	r0, r0, r1
a0007114:	4770      	bx	lr

a0007116 <HW_set_16bit_reg>:
a0007116:	8001      	strh	r1, [r0, #0]
a0007118:	4770      	bx	lr

a000711a <HW_get_16bit_reg>:
a000711a:	8800      	ldrh	r0, [r0, #0]
a000711c:	4770      	bx	lr

a000711e <HW_set_16bit_reg_field>:
a000711e:	b50e      	push	{r1, r2, r3, lr}
a0007120:	fa03 f301 	lsl.w	r3, r3, r1
a0007124:	ea03 0302 	and.w	r3, r3, r2
a0007128:	8801      	ldrh	r1, [r0, #0]
a000712a:	ea6f 0202 	mvn.w	r2, r2
a000712e:	ea01 0102 	and.w	r1, r1, r2
a0007132:	ea41 0103 	orr.w	r1, r1, r3
a0007136:	8001      	strh	r1, [r0, #0]
a0007138:	bd0e      	pop	{r1, r2, r3, pc}

a000713a <HW_get_16bit_reg_field>:
a000713a:	8800      	ldrh	r0, [r0, #0]
a000713c:	ea00 0002 	and.w	r0, r0, r2
a0007140:	fa20 f001 	lsr.w	r0, r0, r1
a0007144:	4770      	bx	lr

a0007146 <HW_set_8bit_reg>:
a0007146:	7001      	strb	r1, [r0, #0]
a0007148:	4770      	bx	lr

a000714a <HW_get_8bit_reg>:
a000714a:	7800      	ldrb	r0, [r0, #0]
a000714c:	4770      	bx	lr

a000714e <HW_set_8bit_reg_field>:
a000714e:	b50e      	push	{r1, r2, r3, lr}
a0007150:	fa03 f301 	lsl.w	r3, r3, r1
a0007154:	ea03 0302 	and.w	r3, r3, r2
a0007158:	7801      	ldrb	r1, [r0, #0]
a000715a:	ea6f 0202 	mvn.w	r2, r2
a000715e:	ea01 0102 	and.w	r1, r1, r2
a0007162:	ea41 0103 	orr.w	r1, r1, r3
a0007166:	7001      	strb	r1, [r0, #0]
a0007168:	bd0e      	pop	{r1, r2, r3, pc}

a000716a <HW_get_8bit_reg_field>:
a000716a:	7800      	ldrb	r0, [r0, #0]
a000716c:	ea00 0002 	and.w	r0, r0, r2
a0007170:	fa20 f001 	lsr.w	r0, r0, r1
a0007174:	4770      	bx	lr
	...

a0007178 <__libc_init_array>:
a0007178:	b570      	push	{r4, r5, r6, lr}
a000717a:	f247 46e0 	movw	r6, #29920	; 0x74e0
a000717e:	f247 45e0 	movw	r5, #29920	; 0x74e0
a0007182:	f2ca 0600 	movt	r6, #40960	; 0xa000
a0007186:	f2ca 0500 	movt	r5, #40960	; 0xa000
a000718a:	1b76      	subs	r6, r6, r5
a000718c:	10b6      	asrs	r6, r6, #2
a000718e:	d006      	beq.n	a000719e <__libc_init_array+0x26>
a0007190:	2400      	movs	r4, #0
a0007192:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
a0007196:	3401      	adds	r4, #1
a0007198:	4798      	blx	r3
a000719a:	42a6      	cmp	r6, r4
a000719c:	d8f9      	bhi.n	a0007192 <__libc_init_array+0x1a>
a000719e:	f247 45e0 	movw	r5, #29920	; 0x74e0
a00071a2:	f247 46e4 	movw	r6, #29924	; 0x74e4
a00071a6:	f2ca 0500 	movt	r5, #40960	; 0xa000
a00071aa:	f2ca 0600 	movt	r6, #40960	; 0xa000
a00071ae:	1b76      	subs	r6, r6, r5
a00071b0:	f000 f982 	bl	a00074b8 <_init>
a00071b4:	10b6      	asrs	r6, r6, #2
a00071b6:	d006      	beq.n	a00071c6 <__libc_init_array+0x4e>
a00071b8:	2400      	movs	r4, #0
a00071ba:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
a00071be:	3401      	adds	r4, #1
a00071c0:	4798      	blx	r3
a00071c2:	42a6      	cmp	r6, r4
a00071c4:	d8f9      	bhi.n	a00071ba <__libc_init_array+0x42>
a00071c6:	bd70      	pop	{r4, r5, r6, pc}

a00071c8 <memcpy>:
a00071c8:	2a03      	cmp	r2, #3
a00071ca:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
a00071ce:	d80b      	bhi.n	a00071e8 <memcpy+0x20>
a00071d0:	b13a      	cbz	r2, a00071e2 <memcpy+0x1a>
a00071d2:	2300      	movs	r3, #0
a00071d4:	f811 c003 	ldrb.w	ip, [r1, r3]
a00071d8:	f800 c003 	strb.w	ip, [r0, r3]
a00071dc:	3301      	adds	r3, #1
a00071de:	4293      	cmp	r3, r2
a00071e0:	d1f8      	bne.n	a00071d4 <memcpy+0xc>
a00071e2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
a00071e6:	4770      	bx	lr
a00071e8:	1882      	adds	r2, r0, r2
a00071ea:	460c      	mov	r4, r1
a00071ec:	4603      	mov	r3, r0
a00071ee:	e003      	b.n	a00071f8 <memcpy+0x30>
a00071f0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
a00071f4:	f803 1c01 	strb.w	r1, [r3, #-1]
a00071f8:	f003 0603 	and.w	r6, r3, #3
a00071fc:	4619      	mov	r1, r3
a00071fe:	46a4      	mov	ip, r4
a0007200:	3301      	adds	r3, #1
a0007202:	3401      	adds	r4, #1
a0007204:	2e00      	cmp	r6, #0
a0007206:	d1f3      	bne.n	a00071f0 <memcpy+0x28>
a0007208:	f01c 0403 	ands.w	r4, ip, #3
a000720c:	4663      	mov	r3, ip
a000720e:	bf08      	it	eq
a0007210:	ebc1 0c02 	rsbeq	ip, r1, r2
a0007214:	d068      	beq.n	a00072e8 <memcpy+0x120>
a0007216:	4265      	negs	r5, r4
a0007218:	f1c4 0a04 	rsb	sl, r4, #4
a000721c:	eb0c 0705 	add.w	r7, ip, r5
a0007220:	4633      	mov	r3, r6
a0007222:	ea4f 0aca 	mov.w	sl, sl, lsl #3
a0007226:	f85c 6005 	ldr.w	r6, [ip, r5]
a000722a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
a000722e:	1a55      	subs	r5, r2, r1
a0007230:	e008      	b.n	a0007244 <memcpy+0x7c>
a0007232:	f857 4f04 	ldr.w	r4, [r7, #4]!
a0007236:	4626      	mov	r6, r4
a0007238:	fa04 f40a 	lsl.w	r4, r4, sl
a000723c:	ea49 0404 	orr.w	r4, r9, r4
a0007240:	50cc      	str	r4, [r1, r3]
a0007242:	3304      	adds	r3, #4
a0007244:	185c      	adds	r4, r3, r1
a0007246:	2d03      	cmp	r5, #3
a0007248:	fa26 f908 	lsr.w	r9, r6, r8
a000724c:	f1a5 0504 	sub.w	r5, r5, #4
a0007250:	eb0c 0603 	add.w	r6, ip, r3
a0007254:	dced      	bgt.n	a0007232 <memcpy+0x6a>
a0007256:	2300      	movs	r3, #0
a0007258:	e002      	b.n	a0007260 <memcpy+0x98>
a000725a:	5cf1      	ldrb	r1, [r6, r3]
a000725c:	54e1      	strb	r1, [r4, r3]
a000725e:	3301      	adds	r3, #1
a0007260:	1919      	adds	r1, r3, r4
a0007262:	4291      	cmp	r1, r2
a0007264:	d3f9      	bcc.n	a000725a <memcpy+0x92>
a0007266:	e7bc      	b.n	a00071e2 <memcpy+0x1a>
a0007268:	f853 4c40 	ldr.w	r4, [r3, #-64]
a000726c:	f841 4c40 	str.w	r4, [r1, #-64]
a0007270:	f853 4c3c 	ldr.w	r4, [r3, #-60]
a0007274:	f841 4c3c 	str.w	r4, [r1, #-60]
a0007278:	f853 4c38 	ldr.w	r4, [r3, #-56]
a000727c:	f841 4c38 	str.w	r4, [r1, #-56]
a0007280:	f853 4c34 	ldr.w	r4, [r3, #-52]
a0007284:	f841 4c34 	str.w	r4, [r1, #-52]
a0007288:	f853 4c30 	ldr.w	r4, [r3, #-48]
a000728c:	f841 4c30 	str.w	r4, [r1, #-48]
a0007290:	f853 4c2c 	ldr.w	r4, [r3, #-44]
a0007294:	f841 4c2c 	str.w	r4, [r1, #-44]
a0007298:	f853 4c28 	ldr.w	r4, [r3, #-40]
a000729c:	f841 4c28 	str.w	r4, [r1, #-40]
a00072a0:	f853 4c24 	ldr.w	r4, [r3, #-36]
a00072a4:	f841 4c24 	str.w	r4, [r1, #-36]
a00072a8:	f853 4c20 	ldr.w	r4, [r3, #-32]
a00072ac:	f841 4c20 	str.w	r4, [r1, #-32]
a00072b0:	f853 4c1c 	ldr.w	r4, [r3, #-28]
a00072b4:	f841 4c1c 	str.w	r4, [r1, #-28]
a00072b8:	f853 4c18 	ldr.w	r4, [r3, #-24]
a00072bc:	f841 4c18 	str.w	r4, [r1, #-24]
a00072c0:	f853 4c14 	ldr.w	r4, [r3, #-20]
a00072c4:	f841 4c14 	str.w	r4, [r1, #-20]
a00072c8:	f853 4c10 	ldr.w	r4, [r3, #-16]
a00072cc:	f841 4c10 	str.w	r4, [r1, #-16]
a00072d0:	f853 4c0c 	ldr.w	r4, [r3, #-12]
a00072d4:	f841 4c0c 	str.w	r4, [r1, #-12]
a00072d8:	f853 4c08 	ldr.w	r4, [r3, #-8]
a00072dc:	f841 4c08 	str.w	r4, [r1, #-8]
a00072e0:	f853 4c04 	ldr.w	r4, [r3, #-4]
a00072e4:	f841 4c04 	str.w	r4, [r1, #-4]
a00072e8:	461c      	mov	r4, r3
a00072ea:	460d      	mov	r5, r1
a00072ec:	3340      	adds	r3, #64	; 0x40
a00072ee:	3140      	adds	r1, #64	; 0x40
a00072f0:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
a00072f4:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
a00072f8:	dcb6      	bgt.n	a0007268 <memcpy+0xa0>
a00072fa:	4621      	mov	r1, r4
a00072fc:	462b      	mov	r3, r5
a00072fe:	1b54      	subs	r4, r2, r5
a0007300:	e00f      	b.n	a0007322 <memcpy+0x15a>
a0007302:	f851 5c10 	ldr.w	r5, [r1, #-16]
a0007306:	f843 5c10 	str.w	r5, [r3, #-16]
a000730a:	f851 5c0c 	ldr.w	r5, [r1, #-12]
a000730e:	f843 5c0c 	str.w	r5, [r3, #-12]
a0007312:	f851 5c08 	ldr.w	r5, [r1, #-8]
a0007316:	f843 5c08 	str.w	r5, [r3, #-8]
a000731a:	f851 5c04 	ldr.w	r5, [r1, #-4]
a000731e:	f843 5c04 	str.w	r5, [r3, #-4]
a0007322:	2c0f      	cmp	r4, #15
a0007324:	460d      	mov	r5, r1
a0007326:	469c      	mov	ip, r3
a0007328:	f101 0110 	add.w	r1, r1, #16
a000732c:	f103 0310 	add.w	r3, r3, #16
a0007330:	f1a4 0410 	sub.w	r4, r4, #16
a0007334:	dce5      	bgt.n	a0007302 <memcpy+0x13a>
a0007336:	ebcc 0102 	rsb	r1, ip, r2
a000733a:	2300      	movs	r3, #0
a000733c:	e003      	b.n	a0007346 <memcpy+0x17e>
a000733e:	58ec      	ldr	r4, [r5, r3]
a0007340:	f84c 4003 	str.w	r4, [ip, r3]
a0007344:	3304      	adds	r3, #4
a0007346:	195e      	adds	r6, r3, r5
a0007348:	2903      	cmp	r1, #3
a000734a:	eb03 040c 	add.w	r4, r3, ip
a000734e:	f1a1 0104 	sub.w	r1, r1, #4
a0007352:	dcf4      	bgt.n	a000733e <memcpy+0x176>
a0007354:	e77f      	b.n	a0007256 <memcpy+0x8e>
a0007356:	bf00      	nop

a0007358 <memset>:
a0007358:	2a03      	cmp	r2, #3
a000735a:	b2c9      	uxtb	r1, r1
a000735c:	b430      	push	{r4, r5}
a000735e:	d807      	bhi.n	a0007370 <memset+0x18>
a0007360:	b122      	cbz	r2, a000736c <memset+0x14>
a0007362:	2300      	movs	r3, #0
a0007364:	54c1      	strb	r1, [r0, r3]
a0007366:	3301      	adds	r3, #1
a0007368:	4293      	cmp	r3, r2
a000736a:	d1fb      	bne.n	a0007364 <memset+0xc>
a000736c:	bc30      	pop	{r4, r5}
a000736e:	4770      	bx	lr
a0007370:	eb00 0c02 	add.w	ip, r0, r2
a0007374:	4603      	mov	r3, r0
a0007376:	e001      	b.n	a000737c <memset+0x24>
a0007378:	f803 1c01 	strb.w	r1, [r3, #-1]
a000737c:	f003 0403 	and.w	r4, r3, #3
a0007380:	461a      	mov	r2, r3
a0007382:	3301      	adds	r3, #1
a0007384:	2c00      	cmp	r4, #0
a0007386:	d1f7      	bne.n	a0007378 <memset+0x20>
a0007388:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
a000738c:	ebc2 040c 	rsb	r4, r2, ip
a0007390:	fb03 f301 	mul.w	r3, r3, r1
a0007394:	e01f      	b.n	a00073d6 <memset+0x7e>
a0007396:	f842 3c40 	str.w	r3, [r2, #-64]
a000739a:	f842 3c3c 	str.w	r3, [r2, #-60]
a000739e:	f842 3c38 	str.w	r3, [r2, #-56]
a00073a2:	f842 3c34 	str.w	r3, [r2, #-52]
a00073a6:	f842 3c30 	str.w	r3, [r2, #-48]
a00073aa:	f842 3c2c 	str.w	r3, [r2, #-44]
a00073ae:	f842 3c28 	str.w	r3, [r2, #-40]
a00073b2:	f842 3c24 	str.w	r3, [r2, #-36]
a00073b6:	f842 3c20 	str.w	r3, [r2, #-32]
a00073ba:	f842 3c1c 	str.w	r3, [r2, #-28]
a00073be:	f842 3c18 	str.w	r3, [r2, #-24]
a00073c2:	f842 3c14 	str.w	r3, [r2, #-20]
a00073c6:	f842 3c10 	str.w	r3, [r2, #-16]
a00073ca:	f842 3c0c 	str.w	r3, [r2, #-12]
a00073ce:	f842 3c08 	str.w	r3, [r2, #-8]
a00073d2:	f842 3c04 	str.w	r3, [r2, #-4]
a00073d6:	4615      	mov	r5, r2
a00073d8:	3240      	adds	r2, #64	; 0x40
a00073da:	2c3f      	cmp	r4, #63	; 0x3f
a00073dc:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
a00073e0:	dcd9      	bgt.n	a0007396 <memset+0x3e>
a00073e2:	462a      	mov	r2, r5
a00073e4:	ebc5 040c 	rsb	r4, r5, ip
a00073e8:	e007      	b.n	a00073fa <memset+0xa2>
a00073ea:	f842 3c10 	str.w	r3, [r2, #-16]
a00073ee:	f842 3c0c 	str.w	r3, [r2, #-12]
a00073f2:	f842 3c08 	str.w	r3, [r2, #-8]
a00073f6:	f842 3c04 	str.w	r3, [r2, #-4]
a00073fa:	4615      	mov	r5, r2
a00073fc:	3210      	adds	r2, #16
a00073fe:	2c0f      	cmp	r4, #15
a0007400:	f1a4 0410 	sub.w	r4, r4, #16
a0007404:	dcf1      	bgt.n	a00073ea <memset+0x92>
a0007406:	462a      	mov	r2, r5
a0007408:	ebc5 050c 	rsb	r5, r5, ip
a000740c:	e001      	b.n	a0007412 <memset+0xba>
a000740e:	f842 3c04 	str.w	r3, [r2, #-4]
a0007412:	4614      	mov	r4, r2
a0007414:	3204      	adds	r2, #4
a0007416:	2d03      	cmp	r5, #3
a0007418:	f1a5 0504 	sub.w	r5, r5, #4
a000741c:	dcf7      	bgt.n	a000740e <memset+0xb6>
a000741e:	e001      	b.n	a0007424 <memset+0xcc>
a0007420:	f804 1b01 	strb.w	r1, [r4], #1
a0007424:	4564      	cmp	r4, ip
a0007426:	d3fb      	bcc.n	a0007420 <memset+0xc8>
a0007428:	e7a0      	b.n	a000736c <memset+0x14>
a000742a:	bf00      	nop

a000742c <C.48.4660>:
a000742c:	6a10 0000                                   .j..

a0007430 <C.40.4595>:
a0007430:	6020 0000 6d63 5f64 6974 656d 0072 0000      `..cmd_timer...
a0007440:	4449 454c 0000 0000 2509 0963 7525 2509     IDLE.....%c.%u.%
a0007450:	0975 7525 0a0d 0000 2509 0975 2509 2575     u.%u.....%u..%u%
a0007460:	0d25 000a 2509 0975 3c09 2531 0d25 000a     %....%u..<1%%...
a0007470:	6d54 2072 7653 0063                         Tmr Svc.

a0007478 <xHeapStructSize>:
a0007478:	0008 0000                                   ....

a000747c <pcInterruptPriorityRegisters>:
a000747c:	e3f0 e000 4b48 0000 6150 6c79 616f 0064     ....HK..Payload.
a000748c:	6175 7472 695f 7172 0000 0000 4b50 5f54     uart_irq....PKT_
a000749c:	6954 656d 0072 0000                         Timer...

a00074a4 <C.135.6383>:
a00074a4:	0020 000f                                    ...

a00074a8 <C.136.6384>:
a00074a8:	0030 0001                                   0...

a00074ac <C.137.6385>:
a00074ac:	0028 0001                                   (...

a00074b0 <C.18.3459>:
a00074b0:	0100 0100 0202 0303                         ........

a00074b8 <_init>:
a00074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
a00074ba:	bf00      	nop
a00074bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
a00074be:	bc08      	pop	{r3}
a00074c0:	469e      	mov	lr, r3
a00074c2:	4770      	bx	lr

a00074c4 <_fini>:
a00074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
a00074c6:	bf00      	nop
a00074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
a00074ca:	bc08      	pop	{r3}
a00074cc:	469e      	mov	lr, r3
a00074ce:	4770      	bx	lr

a00074d0 <__mscc_post_hw_cfg_init_veneer>:
a00074d0:	b401      	push	{r0}
a00074d2:	4802      	ldr	r0, [pc, #8]	; (a00074dc <__mscc_post_hw_cfg_init_veneer+0xc>)
a00074d4:	4684      	mov	ip, r0
a00074d6:	bc01      	pop	{r0}
a00074d8:	4760      	bx	ip
a00074da:	bf00      	nop
a00074dc:	200002af 	.word	0x200002af

a00074e0 <__frame_dummy_init_array_entry>:
a00074e0:	a0000015                                ....

a00074e4 <__do_global_dtors_aux_fini_array_entry>:
a00074e4:	a0000001                                ....
